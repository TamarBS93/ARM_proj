
Final_ARM_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e9e8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031cc  0801ebb8  0801ebb8  0001fbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021d84  08021d84  000231cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08021d84  08021d84  00022d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021d8c  08021d8c  000231cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021d8c  08021d8c  00022d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021d90  08021d90  00022d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08021d94  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08021e20  0002308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08021ec0  0002312c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00027868  200001cc  08021f60  000231cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20027a34  08021f60  00023a34  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000231cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00043337  00000000  00000000  000231fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009e5d  00000000  00000000  00066533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003170  00000000  00000000  00070390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000026ef  00000000  00000000  00073500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000170a9  00000000  00000000  00075bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004e211  00000000  00000000  0008cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00127705  00000000  00000000  000daea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002025ae  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d6f0  00000000  00000000  002025f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  0020fce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801eba0 	.word	0x0801eba0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	0801eba0 	.word	0x0801eba0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fff7 	bl	80025d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8ba 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fbe8 	bl	8000dbc <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fba8 	bl	8000d40 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f9ba 	bl	8000968 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 fb46 	bl	8000c84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fb74 	bl	8000ce4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 fb12 	bl	8000c24 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000600:	f000 f966 	bl	80008d0 <MX_CRC_Init>
  MX_I2C4_Init();
 8000604:	f000 f9f0 	bl	80009e8 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000608:	f000 fa2e 	bl	8000a68 <MX_SPI1_Init>
  MX_SPI2_Init();
 800060c:	f000 fa6a 	bl	8000ae4 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000610:	f000 f90c 	bl	800082c <MX_ADC1_Init>
  MX_DAC_Init();
 8000614:	f000 f97e 	bl	8000914 <MX_DAC_Init>
  MX_TIM7_Init();
 8000618:	f000 fa9e 	bl	8000b58 <MX_TIM7_Init>
  MX_UART4_Init();
 800061c:	f000 fad2 	bl	8000bc4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000620:	f00d fde6 	bl	800e1f0 <osKernelInitialize>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UartRx */
  UartRxHandle = osSemaphoreNew(1, 0, &UartRx_attributes);
 8000624:	4a31      	ldr	r2, [pc, #196]	@ (80006ec <main+0x110>)
 8000626:	2100      	movs	r1, #0
 8000628:	2001      	movs	r0, #1
 800062a:	f00e f88f 	bl	800e74c <osSemaphoreNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a2f      	ldr	r2, [pc, #188]	@ (80006f0 <main+0x114>)
 8000632:	6013      	str	r3, [r2, #0]

  /* creation of UartTx */
  UartTxHandle = osSemaphoreNew(1, 0, &UartTx_attributes);
 8000634:	4a2f      	ldr	r2, [pc, #188]	@ (80006f4 <main+0x118>)
 8000636:	2100      	movs	r1, #0
 8000638:	2001      	movs	r0, #1
 800063a:	f00e f887 	bl	800e74c <osSemaphoreNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a2d      	ldr	r2, [pc, #180]	@ (80006f8 <main+0x11c>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of I2cRx */
  I2cRxHandle = osSemaphoreNew(1, 0, &I2cRx_attributes);
 8000644:	4a2d      	ldr	r2, [pc, #180]	@ (80006fc <main+0x120>)
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f00e f87f 	bl	800e74c <osSemaphoreNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a2b      	ldr	r2, [pc, #172]	@ (8000700 <main+0x124>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of I2cTx */
  I2cTxHandle = osSemaphoreNew(1, 0, &I2cTx_attributes);
 8000654:	4a2b      	ldr	r2, [pc, #172]	@ (8000704 <main+0x128>)
 8000656:	2100      	movs	r1, #0
 8000658:	2001      	movs	r0, #1
 800065a:	f00e f877 	bl	800e74c <osSemaphoreNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <main+0x12c>)
 8000662:	6013      	str	r3, [r2, #0]

  /* creation of SpiRx */
  SpiRxHandle = osSemaphoreNew(1, 0, &SpiRx_attributes);
 8000664:	4a29      	ldr	r2, [pc, #164]	@ (800070c <main+0x130>)
 8000666:	2100      	movs	r1, #0
 8000668:	2001      	movs	r0, #1
 800066a:	f00e f86f 	bl	800e74c <osSemaphoreNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <main+0x134>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of AdcSem */
  AdcSemHandle = osSemaphoreNew(1, 0, &AdcSem_attributes);
 8000674:	4a27      	ldr	r2, [pc, #156]	@ (8000714 <main+0x138>)
 8000676:	2100      	movs	r1, #0
 8000678:	2001      	movs	r0, #1
 800067a:	f00e f867 	bl	800e74c <osSemaphoreNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a25      	ldr	r2, [pc, #148]	@ (8000718 <main+0x13c>)
 8000682:	6013      	str	r3, [r2, #0]

  /* creation of TimSem */
  TimSemHandle = osSemaphoreNew(1, 0, &TimSem_attributes);
 8000684:	4a25      	ldr	r2, [pc, #148]	@ (800071c <main+0x140>)
 8000686:	2100      	movs	r1, #0
 8000688:	2001      	movs	r0, #1
 800068a:	f00e f85f 	bl	800e74c <osSemaphoreNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a23      	ldr	r2, [pc, #140]	@ (8000720 <main+0x144>)
 8000692:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testsQ */
  testsQHandle = osMessageQueueNew (16, 4, &testsQ_attributes);
 8000694:	4a23      	ldr	r2, [pc, #140]	@ (8000724 <main+0x148>)
 8000696:	2104      	movs	r1, #4
 8000698:	2010      	movs	r0, #16
 800069a:	f00e f9b1 	bl	800ea00 <osMessageQueueNew>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <main+0x14c>)
 80006a2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(lwip_initiation, NULL, &defaultTask_attributes);
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <main+0x150>)
 80006a6:	2100      	movs	r1, #0
 80006a8:	4821      	ldr	r0, [pc, #132]	@ (8000730 <main+0x154>)
 80006aa:	f00d fe33 	bl	800e314 <osThreadNew>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <main+0x158>)
 80006b2:	6013      	str	r3, [r2, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blinking_blue, NULL, &blink_task_attributes);
 80006b4:	4a20      	ldr	r2, [pc, #128]	@ (8000738 <main+0x15c>)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4820      	ldr	r0, [pc, #128]	@ (800073c <main+0x160>)
 80006ba:	f00d fe2b 	bl	800e314 <osThreadNew>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000740 <main+0x164>)
 80006c2:	6013      	str	r3, [r2, #0]

  /* creation of udp_task */
  udp_taskHandle = osThreadNew(udp_function, NULL, &udp_task_attributes);
 80006c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000744 <main+0x168>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	481f      	ldr	r0, [pc, #124]	@ (8000748 <main+0x16c>)
 80006ca:	f00d fe23 	bl	800e314 <osThreadNew>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <main+0x170>)
 80006d2:	6013      	str	r3, [r2, #0]

  /* creation of performing_task */
  performing_taskHandle = osThreadNew(perform_tests, NULL, &performing_task_attributes);
 80006d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000750 <main+0x174>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	481e      	ldr	r0, [pc, #120]	@ (8000754 <main+0x178>)
 80006da:	f00d fe1b 	bl	800e314 <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000758 <main+0x17c>)
 80006e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e4:	f00d fdb8 	bl	800e258 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <main+0x10c>
 80006ec:	08021ae8 	.word	0x08021ae8
 80006f0:	20000c90 	.word	0x20000c90
 80006f4:	08021af8 	.word	0x08021af8
 80006f8:	20000c94 	.word	0x20000c94
 80006fc:	08021b08 	.word	0x08021b08
 8000700:	20000c98 	.word	0x20000c98
 8000704:	08021b18 	.word	0x08021b18
 8000708:	20000c9c 	.word	0x20000c9c
 800070c:	08021b28 	.word	0x08021b28
 8000710:	20000ca0 	.word	0x20000ca0
 8000714:	08021b38 	.word	0x08021b38
 8000718:	20000ca4 	.word	0x20000ca4
 800071c:	08021b48 	.word	0x08021b48
 8000720:	20000ca8 	.word	0x20000ca8
 8000724:	08021ad0 	.word	0x08021ad0
 8000728:	20000c8c 	.word	0x20000c8c
 800072c:	08021a40 	.word	0x08021a40
 8000730:	08001139 	.word	0x08001139
 8000734:	20000c7c 	.word	0x20000c7c
 8000738:	08021a64 	.word	0x08021a64
 800073c:	0800114d 	.word	0x0800114d
 8000740:	20000c80 	.word	0x20000c80
 8000744:	08021a88 	.word	0x08021a88
 8000748:	08001191 	.word	0x08001191
 800074c:	20000c84 	.word	0x20000c84
 8000750:	08021aac 	.word	0x08021aac
 8000754:	080011a5 	.word	0x080011a5
 8000758:	20000c88 	.word	0x20000c88

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	@ 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	@ 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f01d fb17 	bl	801dd9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000780:	f007 fc52 	bl	8008028 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	4b27      	ldr	r3, [pc, #156]	@ (8000824 <SystemClock_Config+0xc8>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	4a26      	ldr	r2, [pc, #152]	@ (8000824 <SystemClock_Config+0xc8>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000790:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <SystemClock_Config+0xc8>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800079c:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <SystemClock_Config+0xcc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007a4:	4a20      	ldr	r2, [pc, #128]	@ (8000828 <SystemClock_Config+0xcc>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <SystemClock_Config+0xcc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007d0:	2348      	movs	r3, #72	@ 0x48
 80007d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007d8:	2303      	movs	r3, #3
 80007da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	4618      	mov	r0, r3
 80007e2:	f007 fc31 	bl	8008048 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ec:	f000 fdc0 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	230f      	movs	r3, #15
 80007f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	2302      	movs	r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2102      	movs	r1, #2
 800080c:	4618      	mov	r0, r3
 800080e:	f007 febf 	bl	8008590 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000818:	f000 fdaa 	bl	8001370 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3750      	adds	r7, #80	@ 0x50
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800083e:	4b21      	ldr	r3, [pc, #132]	@ (80008c4 <MX_ADC1_Init+0x98>)
 8000840:	4a21      	ldr	r2, [pc, #132]	@ (80008c8 <MX_ADC1_Init+0x9c>)
 8000842:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000844:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <MX_ADC1_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800084a:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <MX_ADC1_Init+0x98>)
 800084c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000850:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <MX_ADC1_Init+0x98>)
 8000854:	2201      	movs	r2, #1
 8000856:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000858:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <MX_ADC1_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800085e:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <MX_ADC1_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000866:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_ADC1_Init+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <MX_ADC1_Init+0x98>)
 800086e:	4a17      	ldr	r2, [pc, #92]	@ (80008cc <MX_ADC1_Init+0xa0>)
 8000870:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_ADC1_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_ADC1_Init+0x98>)
 800087a:	2201      	movs	r2, #1
 800087c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_ADC1_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_ADC1_Init+0x98>)
 8000888:	2201      	movs	r2, #1
 800088a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800088c:	480d      	ldr	r0, [pc, #52]	@ (80008c4 <MX_ADC1_Init+0x98>)
 800088e:	f001 fef1 	bl	8002674 <HAL_ADC_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000898:	f000 fd6a 	bl	8001370 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800089c:	230a      	movs	r3, #10
 800089e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a8:	463b      	mov	r3, r7
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_ADC1_Init+0x98>)
 80008ae:	f002 f963 	bl	8002b78 <HAL_ADC_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008b8:	f000 fd5a 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200001e8 	.word	0x200001e8
 80008c8:	40012000 	.word	0x40012000
 80008cc:	0f000001 	.word	0x0f000001

080008d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <MX_CRC_Init+0x3c>)
 80008d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000910 <MX_CRC_Init+0x40>)
 80008d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_CRC_Init+0x3c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <MX_CRC_Init+0x3c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_CRC_Init+0x3c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	@ (800090c <MX_CRC_Init+0x3c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_CRC_Init+0x3c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_CRC_Init+0x3c>)
 80008fa:	f002 fcaf 	bl	800325c <HAL_CRC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000904:	f000 fd34 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000230 	.word	0x20000230
 8000910:	40023000 	.word	0x40023000

08000914 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_DAC_Init+0x4c>)
 8000924:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <MX_DAC_Init+0x50>)
 8000926:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000928:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_DAC_Init+0x4c>)
 800092a:	f002 fea1 	bl	8003670 <HAL_DAC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000934:	f000 fd1c 	bl	8001370 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000938:	2300      	movs	r3, #0
 800093a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	2200      	movs	r2, #0
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	@ (8000960 <MX_DAC_Init+0x4c>)
 8000948:	f002 ff95 	bl	8003876 <HAL_DAC_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000952:	f000 fd0d 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000254 	.word	0x20000254
 8000964:	40007400 	.word	0x40007400

08000968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_I2C1_Init+0x74>)
 800096e:	4a1c      	ldr	r2, [pc, #112]	@ (80009e0 <MX_I2C1_Init+0x78>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_I2C1_Init+0x74>)
 8000974:	4a1b      	ldr	r2, [pc, #108]	@ (80009e4 <MX_I2C1_Init+0x7c>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 8000978:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_I2C1_Init+0x74>)
 800097a:	22f0      	movs	r2, #240	@ 0xf0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097e:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_I2C1_Init+0x74>)
 8000980:	2201      	movs	r2, #1
 8000982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_I2C1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_I2C1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a2:	480e      	ldr	r0, [pc, #56]	@ (80009dc <MX_I2C1_Init+0x74>)
 80009a4:	f005 f9d2 	bl	8005d4c <HAL_I2C_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ae:	f000 fcdf 	bl	8001370 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4809      	ldr	r0, [pc, #36]	@ (80009dc <MX_I2C1_Init+0x74>)
 80009b6:	f007 f965 	bl	8007c84 <HAL_I2CEx_ConfigAnalogFilter>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009c0:	f000 fcd6 	bl	8001370 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_I2C1_Init+0x74>)
 80009c8:	f007 f9a7 	bl	8007d1a <HAL_I2CEx_ConfigDigitalFilter>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009d2:	f000 fccd 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000268 	.word	0x20000268
 80009e0:	40005400 	.word	0x40005400
 80009e4:	00808cd2 	.word	0x00808cd2

080009e8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <MX_I2C4_Init+0x74>)
 80009ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000a60 <MX_I2C4_Init+0x78>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <MX_I2C4_Init+0x74>)
 80009f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a64 <MX_I2C4_Init+0x7c>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <MX_I2C4_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <MX_I2C4_Init+0x74>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_I2C4_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_I2C4_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <MX_I2C4_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_I2C4_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_I2C4_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a22:	480e      	ldr	r0, [pc, #56]	@ (8000a5c <MX_I2C4_Init+0x74>)
 8000a24:	f005 f992 	bl	8005d4c <HAL_I2C_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a2e:	f000 fc9f 	bl	8001370 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <MX_I2C4_Init+0x74>)
 8000a36:	f007 f925 	bl	8007c84 <HAL_I2CEx_ConfigAnalogFilter>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a40:	f000 fc96 	bl	8001370 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_I2C4_Init+0x74>)
 8000a48:	f007 f967 	bl	8007d1a <HAL_I2CEx_ConfigDigitalFilter>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a52:	f000 fc8d 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200002bc 	.word	0x200002bc
 8000a60:	40006000 	.word	0x40006000
 8000a64:	00808cd2 	.word	0x00808cd2

08000a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae0 <MX_SPI1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a82:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000a9e:	2210      	movs	r2, #16
 8000aa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_SPI1_Init+0x74>)
 8000ac8:	f008 fbaa 	bl	8009220 <HAL_SPI_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 fc4d 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200003d0 	.word	0x200003d0
 8000ae0:	40013000 	.word	0x40013000

08000ae4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000aea:	4a1a      	ldr	r2, [pc, #104]	@ (8000b54 <MX_SPI2_Init+0x70>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000afc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b14:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_SPI2_Init+0x6c>)
 8000b3c:	f008 fb70 	bl	8009220 <HAL_SPI_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000b46:	f000 fc13 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000434 	.word	0x20000434
 8000b54:	40003800 	.word	0x40003800

08000b58 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <MX_TIM7_Init+0x64>)
 8000b6a:	4a15      	ldr	r2, [pc, #84]	@ (8000bc0 <MX_TIM7_Init+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000 - 1;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <MX_TIM7_Init+0x64>)
 8000b70:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000b74:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_TIM7_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100 - 1;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <MX_TIM7_Init+0x64>)
 8000b7e:	2263      	movs	r2, #99	@ 0x63
 8000b80:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <MX_TIM7_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <MX_TIM7_Init+0x64>)
 8000b8a:	f009 fe9d 	bl	800a8c8 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000b94:	f000 fbec 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_TIM7_Init+0x64>)
 8000ba6:	f00a f965 	bl	800ae74 <HAL_TIMEx_MasterConfigSynchronization>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000bb0:	f000 fbde 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000498 	.word	0x20000498
 8000bc0:	40001400 	.word	0x40001400

08000bc4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_UART4_Init+0x58>)
 8000bca:	4a15      	ldr	r2, [pc, #84]	@ (8000c20 <MX_UART4_Init+0x5c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_UART4_Init+0x58>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_UART4_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_UART4_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_UART4_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_UART4_Init+0x58>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_UART4_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_UART4_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_UART4_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_UART4_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_UART4_Init+0x58>)
 8000c08:	f00a f9e0 	bl	800afcc <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000c12:	f000 fbad 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200004e4 	.word	0x200004e4
 8000c20:	40004c00 	.word	0x40004c00

08000c24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c2a:	4a15      	ldr	r2, [pc, #84]	@ (8000c80 <MX_USART2_UART_Init+0x5c>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_USART2_UART_Init+0x58>)
 8000c68:	f00a f9b0 	bl	800afcc <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c72:	f000 fb7d 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000056c 	.word	0x2000056c
 8000c80:	40004400 	.word	0x40004400

08000c84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ce0 <MX_USART3_UART_Init+0x5c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cc8:	f00a f980 	bl	800afcc <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cd2:	f000 fb4d 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200005f4 	.word	0x200005f4
 8000ce0:	40004800 	.word	0x40004800

08000ce4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000cee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf2:	2206      	movs	r2, #6
 8000cf4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d28:	f007 f843 	bl	8007db2 <HAL_PCD_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d32:	f000 fb1d 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000079c 	.word	0x2000079c

08000d40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d46:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <MX_DMA_Init+0x78>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000db8 <MX_DMA_Init+0x78>)
 8000d4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_DMA_Init+0x78>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2106      	movs	r1, #6
 8000d62:	200b      	movs	r0, #11
 8000d64:	f002 fa42 	bl	80031ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d68:	200b      	movs	r0, #11
 8000d6a:	f002 fa5b 	bl	8003224 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2106      	movs	r1, #6
 8000d72:	200d      	movs	r0, #13
 8000d74:	f002 fa3a 	bl	80031ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d78:	200d      	movs	r0, #13
 8000d7a:	f002 fa53 	bl	8003224 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 6, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2106      	movs	r1, #6
 8000d82:	200f      	movs	r0, #15
 8000d84:	f002 fa32 	bl	80031ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d88:	200f      	movs	r0, #15
 8000d8a:	f002 fa4b 	bl	8003224 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2106      	movs	r1, #6
 8000d92:	2010      	movs	r0, #16
 8000d94:	f002 fa2a 	bl	80031ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d98:	2010      	movs	r0, #16
 8000d9a:	f002 fa43 	bl	8003224 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 6, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2106      	movs	r1, #6
 8000da2:	2011      	movs	r0, #17
 8000da4:	f002 fa22 	bl	80031ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000da8:	2011      	movs	r0, #17
 8000daa:	f002 fa3b 	bl	8003224 <HAL_NVIC_EnableIRQ>

}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	@ 0x30
 8000dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b51      	ldr	r3, [pc, #324]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a50      	ldr	r2, [pc, #320]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b4e      	ldr	r3, [pc, #312]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	4b4b      	ldr	r3, [pc, #300]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a4a      	ldr	r2, [pc, #296]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b48      	ldr	r3, [pc, #288]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b45      	ldr	r3, [pc, #276]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a44      	ldr	r2, [pc, #272]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b42      	ldr	r3, [pc, #264]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b3c      	ldr	r3, [pc, #240]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e32:	4b39      	ldr	r3, [pc, #228]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a38      	ldr	r2, [pc, #224]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e38:	f043 0320 	orr.w	r3, r3, #32
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b36      	ldr	r3, [pc, #216]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0320 	and.w	r3, r3, #32
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4a:	4b33      	ldr	r3, [pc, #204]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a32      	ldr	r2, [pc, #200]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b30      	ldr	r3, [pc, #192]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e62:	4b2d      	ldr	r3, [pc, #180]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a2c      	ldr	r2, [pc, #176]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f18 <MX_GPIO_Init+0x15c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e80:	4826      	ldr	r0, [pc, #152]	@ (8000f1c <MX_GPIO_Init+0x160>)
 8000e82:	f004 ff0b 	bl	8005c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2140      	movs	r1, #64	@ 0x40
 8000e8a:	4825      	ldr	r0, [pc, #148]	@ (8000f20 <MX_GPIO_Init+0x164>)
 8000e8c:	f004 ff06 	bl	8005c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	481f      	ldr	r0, [pc, #124]	@ (8000f24 <MX_GPIO_Init+0x168>)
 8000ea8:	f004 fc40 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000eac:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4815      	ldr	r0, [pc, #84]	@ (8000f1c <MX_GPIO_Init+0x160>)
 8000ec6:	f004 fc31 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eca:	2340      	movs	r3, #64	@ 0x40
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480f      	ldr	r0, [pc, #60]	@ (8000f20 <MX_GPIO_Init+0x164>)
 8000ee2:	f004 fc23 	bl	800572c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ee6:	2380      	movs	r3, #128	@ 0x80
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <MX_GPIO_Init+0x164>)
 8000efa:	f004 fc17 	bl	800572c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2105      	movs	r1, #5
 8000f02:	2028      	movs	r0, #40	@ 0x28
 8000f04:	f002 f972 	bl	80031ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f08:	2028      	movs	r0, #40	@ 0x28
 8000f0a:	f002 f98b 	bl	8003224 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	@ 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40021800 	.word	0x40021800
 8000f24:	40020800 	.word	0x40020800

08000f28 <vApplicationStackOverflowHook>:
 *
 * @param xTask Task handle of the task whose stack overflowed.
 * @param pcTaskName Pointer to the name of the task whose stack overflowed.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
    // A stack overflow has been detected. This is a critical error.
    // The system is in an unstable state.
    // It is generally not safe to continue execution or call complex functions.

    printf("\n\r!!! STACK OVERFLOW DETECTED !!!\n\r");
 8000f32:	4811      	ldr	r0, [pc, #68]	@ (8000f78 <vApplicationStackOverflowHook+0x50>)
 8000f34:	f01c fece 	bl	801dcd4 <iprintf>
    printf("Task: %s\n\r", pcTaskName);
 8000f38:	6839      	ldr	r1, [r7, #0]
 8000f3a:	4810      	ldr	r0, [pc, #64]	@ (8000f7c <vApplicationStackOverflowHook+0x54>)
 8000f3c:	f01c feca 	bl	801dcd4 <iprintf>
    printf("Handle: 0x%lX\n\r", (uint32_t)xTask);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4619      	mov	r1, r3
 8000f44:	480e      	ldr	r0, [pc, #56]	@ (8000f80 <vApplicationStackOverflowHook+0x58>)
 8000f46:	f01c fec5 	bl	801dcd4 <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f4e:	b672      	cpsid	i
 8000f50:	f383 8811 	msr	BASEPRI, r3
 8000f54:	f3bf 8f6f 	isb	sy
 8000f58:	f3bf 8f4f 	dsb	sy
 8000f5c:	b662      	cpsie	i
 8000f5e:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000f60:	bf00      	nop
    // Disable interrupts to prevent further execution and potential damage
    taskDISABLE_INTERRUPTS();
    for(;;)
    {
        // RED LED toggle for visual indication
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f66:	4807      	ldr	r0, [pc, #28]	@ (8000f84 <vApplicationStackOverflowHook+0x5c>)
 8000f68:	f004 feb1 	bl	8005cce <HAL_GPIO_TogglePin>
        osDelay(1000);
 8000f6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f70:	f00d fa76 	bl	800e460 <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f74:	bf00      	nop
 8000f76:	e7f4      	b.n	8000f62 <vApplicationStackOverflowHook+0x3a>
 8000f78:	0801ec2c 	.word	0x0801ec2c
 8000f7c:	0801ec50 	.word	0x0801ec50
 8000f80:	0801ec5c 	.word	0x0801ec5c
 8000f84:	40020400 	.word	0x40020400

08000f88 <udp_receive_init>:
    }
}

void udp_receive_init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	//printf("udp_receive_init() called\n\r");

    udp_pcb_handle = udp_new();
 8000f8c:	f019 f932 	bl	801a1f4 <udp_new>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <udp_receive_init+0x58>)
 8000f94:	6013      	str	r3, [r2, #0]
    if (!udp_pcb_handle) {
 8000f96:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <udp_receive_init+0x58>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d103      	bne.n	8000fa6 <udp_receive_init+0x1e>
        printf("Failed to create UDP PCB\n\r");
 8000f9e:	4811      	ldr	r0, [pc, #68]	@ (8000fe4 <udp_receive_init+0x5c>)
 8000fa0:	f01c fe98 	bl	801dcd4 <iprintf>
        return;
 8000fa4:	e01a      	b.n	8000fdc <udp_receive_init+0x54>
    }

    if (udp_bind(udp_pcb_handle, IP_ADDR_ANY, LOCAL_PORT) != ERR_OK) {
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <udp_receive_init+0x58>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f241 328d 	movw	r2, #5005	@ 0x138d
 8000fae:	490e      	ldr	r1, [pc, #56]	@ (8000fe8 <udp_receive_init+0x60>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f019 f877 	bl	801a0a4 <udp_bind>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <udp_receive_init+0x3c>
        printf("UDP bind failed\n\r");
 8000fbc:	480b      	ldr	r0, [pc, #44]	@ (8000fec <udp_receive_init+0x64>)
 8000fbe:	f01c fe89 	bl	801dcd4 <iprintf>
        return;
 8000fc2:	e00b      	b.n	8000fdc <udp_receive_init+0x54>
    }

    udp_recv(udp_pcb_handle, udp_receive_callback, NULL);
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <udp_receive_init+0x58>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4909      	ldr	r1, [pc, #36]	@ (8000ff0 <udp_receive_init+0x68>)
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f019 f8f1 	bl	801a1b4 <udp_recv>
    printf("UDP ready, listening on port %d\n\r", LOCAL_PORT);
 8000fd2:	f241 318d 	movw	r1, #5005	@ 0x138d
 8000fd6:	4807      	ldr	r0, [pc, #28]	@ (8000ff4 <udp_receive_init+0x6c>)
 8000fd8:	f01c fe7c 	bl	801dcd4 <iprintf>
}
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000cac 	.word	0x20000cac
 8000fe4:	0801ec6c 	.word	0x0801ec6c
 8000fe8:	08021c94 	.word	0x08021c94
 8000fec:	0801ec88 	.word	0x0801ec88
 8000ff0:	08000ff9 	.word	0x08000ff9
 8000ff4:	0801ec9c 	.word	0x0801ec9c

08000ff8 <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d03d      	beq.n	8001088 <udp_receive_callback+0x90>
        // Copy the sender's IP address
        ip_addr_copy(g_server_addr, *addr);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a1f      	ldr	r2, [pc, #124]	@ (8001090 <udp_receive_callback+0x98>)
 8001012:	6013      	str	r3, [r2, #0]
        // Copy the sender's port
        g_server_port = port;
 8001014:	4a1f      	ldr	r2, [pc, #124]	@ (8001094 <udp_receive_callback+0x9c>)
 8001016:	8c3b      	ldrh	r3, [r7, #32]
 8001018:	8013      	strh	r3, [r2, #0]

//        // debug printf
//        printf("Received from %s:%d -> %.*s\n\r",
//               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);

        if (p->len >= sizeof(test_command_t)) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	895b      	ldrh	r3, [r3, #10]
 800101e:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8001022:	d92e      	bls.n	8001082 <udp_receive_callback+0x8a>
            test_command_t *cmd = (test_command_t *)pvPortMalloc(sizeof(test_command_t));
 8001024:	f240 1007 	movw	r0, #263	@ 0x107
 8001028:	f010 ffce 	bl	8011fc8 <pvPortMalloc>
 800102c:	4603      	mov	r3, r0
 800102e:	617b      	str	r3, [r7, #20]
            if (cmd != NULL) {
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d008      	beq.n	8001048 <udp_receive_callback+0x50>
			   // Copy the data from the pbuf payload to the allocated memory
			   memcpy(cmd, p->payload, sizeof(test_command_t)); // Only copy the struct size
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f240 1207 	movw	r2, #263	@ 0x107
 8001040:	4619      	mov	r1, r3
 8001042:	f01c ff80 	bl	801df46 <memcpy>
 8001046:	e002      	b.n	800104e <udp_receive_callback+0x56>
//				printf("iterations: %u\n\r", cmd->iterations);
//				printf("bit pattern length: %u\n\r", cmd->bit_pattern_length);
//				printf("bit pattern: %s\n\r",cmd->bit_pattern);
            }
            else{
                printf("Failed to allocate memory for test_command_t!\n\r"); // Debug printf
 8001048:	4813      	ldr	r0, [pc, #76]	@ (8001098 <udp_receive_callback+0xa0>)
 800104a:	f01c fe43 	bl	801dcd4 <iprintf>
            }
            // Send the POINTER to the newly allocated and copied* data to the queue
            if (xQueueSendToBack(testsQHandle, &cmd, 1) != pdPASS){ // Pass address of pointer
 800104e:	4b13      	ldr	r3, [pc, #76]	@ (800109c <udp_receive_callback+0xa4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f107 0114 	add.w	r1, r7, #20
 8001056:	2300      	movs	r3, #0
 8001058:	2201      	movs	r2, #1
 800105a:	f00e f9b1 	bl	800f3c0 <xQueueGenericSend>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	d007      	beq.n	8001074 <udp_receive_callback+0x7c>
                printf("Failed to send data to tests queue.\n\r"); // Debug printf
 8001064:	480e      	ldr	r0, [pc, #56]	@ (80010a0 <udp_receive_callback+0xa8>)
 8001066:	f01c fe35 	bl	801dcd4 <iprintf>
                // If send fails, free the allocated memory immediately
                vPortFree(cmd);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	4618      	mov	r0, r3
 800106e:	f011 f879 	bl	8012164 <vPortFree>
 8001072:	e006      	b.n	8001082 <udp_receive_callback+0x8a>
            } else {
                // Only notify if successfully sent to queue
            	//printf("udp_receive_callback sent a command to the tests queue successfully\n\r");
                xTaskNotifyGive(performing_taskHandle);
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <udp_receive_callback+0xac>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	2300      	movs	r3, #0
 800107a:	2202      	movs	r2, #2
 800107c:	2100      	movs	r1, #0
 800107e:	f010 f8e3 	bl	8011248 <xTaskGenericNotify>
            }
        } else {
//            printf("Packet too short: %d bytes\n\r", p->len); // Debug printf
        }
        pbuf_free(p);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f012 ff1a 	bl	8013ebc <pbuf_free>
    }
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000cb0 	.word	0x20000cb0
 8001094:	20000cb4 	.word	0x20000cb4
 8001098:	0801ecc0 	.word	0x0801ecc0
 800109c:	20000c8c 	.word	0x20000c8c
 80010a0:	0801ecf0 	.word	0x0801ecf0
 80010a4:	20000c88 	.word	0x20000c88

080010a8 <send_response>:

void send_response(result_pro_t result) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	463b      	mov	r3, r7
 80010b0:	e883 0003 	stmia.w	r3, {r0, r1}
    // Check if we have a valid sender address
    if (ip_addr_isany(&g_server_addr) == 0) {
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <send_response+0x58>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d01c      	beq.n	80010f6 <send_response+0x4e>
        // Create a new pbuf for the response data
        struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, sizeof(result_pro_t), PBUF_RAM);
 80010bc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80010c0:	2106      	movs	r1, #6
 80010c2:	2036      	movs	r0, #54	@ 0x36
 80010c4:	f012 fc16 	bl	80138f4 <pbuf_alloc>
 80010c8:	60f8      	str	r0, [r7, #12]
        if (p != NULL) {
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d012      	beq.n	80010f6 <send_response+0x4e>
            // Copy the result struct into the pbuf payload
            memcpy(p->payload, &result, sizeof(result_pro_t));
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	461a      	mov	r2, r3
 80010d6:	463b      	mov	r3, r7
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	6010      	str	r0, [r2, #0]
 80010dc:	889b      	ldrh	r3, [r3, #4]
 80010de:	8093      	strh	r3, [r2, #4]

            // Send the response to the stored address and port
            if(udp_sendto(udp_pcb_handle, p, &g_server_addr, g_server_port) != ERR_OK){
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <send_response+0x5c>)
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <send_response+0x60>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <send_response+0x58>)
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	f018 fe24 	bl	8019d38 <udp_sendto>
//            	printf("sendto server failed"); // Debug printf
            }

            // Free the pbuf
            pbuf_free(p);
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f012 fee3 	bl	8013ebc <pbuf_free>
        }
    }
}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000cb0 	.word	0x20000cb0
 8001104:	20000cac 	.word	0x20000cac
 8001108:	20000cb4 	.word	0x20000cb4

0800110c <calculate_crc>:


uint32_t calculate_crc(uint8_t *data, size_t length) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
    // HAL_CRC_Calculate expects 32-bit words, so convert length
    uint32_t word_count = (length + 3) / 4; // Round up
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	3303      	adds	r3, #3
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	60fb      	str	r3, [r7, #12]
    return HAL_CRC_Calculate(&hcrc, (uint32_t *)data, word_count);
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4804      	ldr	r0, [pc, #16]	@ (8001134 <calculate_crc+0x28>)
 8001124:	f002 f8fe 	bl	8003324 <HAL_CRC_Calculate>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000230 	.word	0x20000230

08001138 <lwip_initiation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_lwip_initiation */
void lwip_initiation(void *argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001140:	f00c f9f6 	bl	800d530 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f00d f98b 	bl	800e460 <osDelay>
 800114a:	e7fb      	b.n	8001144 <lwip_initiation+0xc>

0800114c <blinking_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinking_blue */
void blinking_blue(void *argument)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinking_blue */
  /* Infinite loop */
  for(;;)
  {
	/* visual heartbeat */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001154:	2180      	movs	r1, #128	@ 0x80
 8001156:	4804      	ldr	r0, [pc, #16]	@ (8001168 <blinking_blue+0x1c>)
 8001158:	f004 fdb9 	bl	8005cce <HAL_GPIO_TogglePin>
    osDelay(1000);
 800115c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001160:	f00d f97e 	bl	800e460 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001164:	bf00      	nop
 8001166:	e7f5      	b.n	8001154 <blinking_blue+0x8>
 8001168:	40020400 	.word	0x40020400

0800116c <__io_putchar>:
  /* USER CODE END blinking_blue */
}

/* USER CODE BEGIN Header_udp_function */
int __io_putchar(int ch)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001174:	1d39      	adds	r1, r7, #4
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	2201      	movs	r2, #1
 800117c:	4803      	ldr	r0, [pc, #12]	@ (800118c <__io_putchar+0x20>)
 800117e:	f009 ff73 	bl	800b068 <HAL_UART_Transmit>
    return ch;
 8001182:	687b      	ldr	r3, [r7, #4]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200005f4 	.word	0x200005f4

08001190 <udp_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_udp_function */
void udp_function(void *argument)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN udp_function */
	udp_receive_init();
 8001198:	f7ff fef6 	bl	8000f88 <udp_receive_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800119c:	2001      	movs	r0, #1
 800119e:	f00d f95f 	bl	800e460 <osDelay>
 80011a2:	e7fb      	b.n	800119c <udp_function+0xc>

080011a4 <perform_tests>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_perform_tests */
void perform_tests(void *argument)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b092      	sub	sp, #72	@ 0x48
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	test_command_t *cmd;

  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	2001      	movs	r0, #1
 80011b2:	f00f fffd 	bl	80111b0 <ulTaskNotifyTake>
	//printf("perform_tests woke up!\n\r");

	if (xQueueReceive(testsQHandle, &cmd, 0) != pdPASS)
 80011b6:	4b53      	ldr	r3, [pc, #332]	@ (8001304 <perform_tests+0x160>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f107 011c 	add.w	r1, r7, #28
 80011be:	2200      	movs	r2, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00e fb43 	bl	800f84c <xQueueReceive>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d003      	beq.n	80011d4 <perform_tests+0x30>
	{
		printf("perform_tests: No test command received\n\r");
 80011cc:	484e      	ldr	r0, [pc, #312]	@ (8001308 <perform_tests+0x164>)
 80011ce:	f01c fd81 	bl	801dcd4 <iprintf>
		continue;
 80011d2:	e095      	b.n	8001300 <perform_tests+0x15c>
	}
	if(cmd->bit_pattern_length > MAX_BIT_PATTERN_LENGTH || cmd->test_id == NULL || cmd->iterations<1){
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <perform_tests+0x40>
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	795b      	ldrb	r3, [r3, #5]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10b      	bne.n	80011fc <perform_tests+0x58>
		result_pro_t response = {cmd->test_id, TEST_ERR};
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011ee:	833b      	strh	r3, [r7, #24]
		send_response(response);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011f8:	f7ff ff56 	bl	80010a8 <send_response>
	}
	switch (cmd->peripheral){
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	791b      	ldrb	r3, [r3, #4]
 8001200:	3b01      	subs	r3, #1
 8001202:	2b0f      	cmp	r3, #15
 8001204:	d868      	bhi.n	80012d8 <perform_tests+0x134>
 8001206:	a201      	add	r2, pc, #4	@ (adr r2, 800120c <perform_tests+0x68>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	0800124d 	.word	0x0800124d
 8001210:	08001269 	.word	0x08001269
 8001214:	080012d9 	.word	0x080012d9
 8001218:	08001285 	.word	0x08001285
 800121c:	080012d9 	.word	0x080012d9
 8001220:	080012d9 	.word	0x080012d9
 8001224:	080012d9 	.word	0x080012d9
 8001228:	080012a1 	.word	0x080012a1
 800122c:	080012d9 	.word	0x080012d9
 8001230:	080012d9 	.word	0x080012d9
 8001234:	080012d9 	.word	0x080012d9
 8001238:	080012d9 	.word	0x080012d9
 800123c:	080012d9 	.word	0x080012d9
 8001240:	080012d9 	.word	0x080012d9
 8001244:	080012d9 	.word	0x080012d9
 8001248:	080012bd 	.word	0x080012bd
	case TIMER:
		send_response(timer_testing(cmd));
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f01c f90f 	bl	801d478 <timer_testing>
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001262:	f7ff ff21 	bl	80010a8 <send_response>
		break;
 8001266:	e048      	b.n	80012fa <perform_tests+0x156>
	case UART:
		send_response(uart_testing(cmd));
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f01c f959 	bl	801d528 <uart_testing>
 8001276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800127a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800127e:	f7ff ff13 	bl	80010a8 <send_response>
		break;
 8001282:	e03a      	b.n	80012fa <perform_tests+0x156>
	case SPI:
		send_response(spi_testing(cmd));
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f01b ff13 	bl	801d0b8 <spi_testing>
 8001292:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001296:	e893 0003 	ldmia.w	r3, {r0, r1}
 800129a:	f7ff ff05 	bl	80010a8 <send_response>
		break;
 800129e:	e02c      	b.n	80012fa <perform_tests+0x156>
	case I2C:
		send_response(i2c_testing(cmd));
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f01b fcc5 	bl	801cc38 <i2c_testing>
 80012ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012b6:	f7ff fef7 	bl	80010a8 <send_response>
		break;
 80012ba:	e01e      	b.n	80012fa <perform_tests+0x156>
	case ADC_P:
		send_response(adc_testing(cmd));
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f01b fb95 	bl	801c9f4 <adc_testing>
 80012ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012d2:	f7ff fee9 	bl	80010a8 <send_response>
		break;
 80012d6:	e010      	b.n	80012fa <perform_tests+0x156>
	default:
		result_pro_t response = {cmd->test_id, TEST_ERR};
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012e2:	823b      	strh	r3, [r7, #16]
		send_response(response);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012ec:	f7ff fedc 	bl	80010a8 <send_response>
        vPortFree(cmd);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f010 ff36 	bl	8012164 <vPortFree>
        break;
 80012f8:	bf00      	nop
	}
    osDelay(1);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f00d f8b0 	bl	800e460 <osDelay>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 8001300:	e754      	b.n	80011ac <perform_tests+0x8>
 8001302:	bf00      	nop
 8001304:	20000c8c 	.word	0x20000c8c
 8001308:	0801ed18 	.word	0x0801ed18

0800130c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a11      	ldr	r2, [pc, #68]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800131e:	f001 f965 	bl	80025ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a0f      	ldr	r2, [pc, #60]	@ (8001364 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d114      	bne.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]

	    // Use the ISR-safe function to give the semaphore
	    xSemaphoreGiveFromISR(TimSemHandle, &xHigherPriorityTaskWoken);
 8001330:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f107 020c 	add.w	r2, r7, #12
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f00e f9ed 	bl	800f71a <xQueueGiveFromISR>

	    // Call this if a higher priority task was unblocked
	    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	f3bf 8f4f 	dsb	sy
 8001352:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END Callback 1 */
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40001000 	.word	0x40001000
 8001364:	40001400 	.word	0x40001400
 8001368:	20000ca8 	.word	0x20000ca8
 800136c:	e000ed04 	.word	0xe000ed04

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <HAL_MspInit+0x6c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	4a18      	ldr	r2, [pc, #96]	@ (80013e8 <HAL_MspInit+0x6c>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	@ 0x40
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <HAL_MspInit+0x6c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <HAL_MspInit+0x6c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <HAL_MspInit+0x6c>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <HAL_MspInit+0x6c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	210f      	movs	r1, #15
 80013b6:	f06f 0001 	mvn.w	r0, #1
 80013ba:	f001 ff17 	bl	80031ec <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2105      	movs	r1, #5
 80013c2:	2005      	movs	r0, #5
 80013c4:	f001 ff12 	bl	80031ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013c8:	2005      	movs	r0, #5
 80013ca:	f001 ff2b 	bl	8003224 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2105      	movs	r1, #5
 80013d2:	2051      	movs	r0, #81	@ 0x51
 80013d4:	f001 ff0a 	bl	80031ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80013d8:	2051      	movs	r0, #81	@ 0x51
 80013da:	f001 ff23 	bl	8003224 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a19      	ldr	r2, [pc, #100]	@ (8001470 <HAL_ADC_MspInit+0x84>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12b      	bne.n	8001466 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <HAL_ADC_MspInit+0x88>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	4a18      	ldr	r2, [pc, #96]	@ (8001474 <HAL_ADC_MspInit+0x88>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001418:	6453      	str	r3, [r2, #68]	@ 0x44
 800141a:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <HAL_ADC_MspInit+0x88>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HAL_ADC_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <HAL_ADC_MspInit+0x88>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <HAL_ADC_MspInit+0x88>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800143e:	2301      	movs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001442:	2303      	movs	r3, #3
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4809      	ldr	r0, [pc, #36]	@ (8001478 <HAL_ADC_MspInit+0x8c>)
 8001452:	f004 f96b 	bl	800572c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2105      	movs	r1, #5
 800145a:	2012      	movs	r0, #18
 800145c:	f001 fec6 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001460:	2012      	movs	r0, #18
 8001462:	f001 fedf 	bl	8003224 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	@ 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40012000 	.word	0x40012000
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800

0800147c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <HAL_CRC_MspInit+0x38>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10b      	bne.n	80014a6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <HAL_CRC_MspInit+0x3c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <HAL_CRC_MspInit+0x3c>)
 8001494:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <HAL_CRC_MspInit+0x3c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023000 	.word	0x40023000
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <HAL_DAC_MspInit+0x84>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12b      	bne.n	8001536 <HAL_DAC_MspInit+0x7a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80014de:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <HAL_DAC_MspInit+0x88>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a18      	ldr	r2, [pc, #96]	@ (8001544 <HAL_DAC_MspInit+0x88>)
 80014e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <HAL_DAC_MspInit+0x88>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <HAL_DAC_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <HAL_DAC_MspInit+0x88>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <HAL_DAC_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800150e:	2310      	movs	r3, #16
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001512:	2303      	movs	r3, #3
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4809      	ldr	r0, [pc, #36]	@ (8001548 <HAL_DAC_MspInit+0x8c>)
 8001522:	f004 f903 	bl	800572c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2105      	movs	r1, #5
 800152a:	2036      	movs	r0, #54	@ 0x36
 800152c:	f001 fe5e 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001530:	2036      	movs	r0, #54	@ 0x36
 8001532:	f001 fe77 	bl	8003224 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	@ 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40007400 	.word	0x40007400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000

0800154c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0ac      	sub	sp, #176	@ 0xb0
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001564:	f107 0318 	add.w	r3, r7, #24
 8001568:	2284      	movs	r2, #132	@ 0x84
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f01c fc16 	bl	801dd9e <memset>
  if(hi2c->Instance==I2C1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a82      	ldr	r2, [pc, #520]	@ (8001780 <HAL_I2C_MspInit+0x234>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d17b      	bne.n	8001674 <HAL_I2C_MspInit+0x128>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800157c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001580:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001582:	2300      	movs	r3, #0
 8001584:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001586:	f107 0318 	add.w	r3, r7, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f007 fa58 	bl	8008a40 <HAL_RCCEx_PeriphCLKConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001596:	f7ff feeb 	bl	8001370 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	4b7a      	ldr	r3, [pc, #488]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a79      	ldr	r2, [pc, #484]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b77      	ldr	r3, [pc, #476]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ba:	2312      	movs	r3, #18
 80015bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015cc:	2304      	movs	r3, #4
 80015ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015d6:	4619      	mov	r1, r3
 80015d8:	486b      	ldr	r0, [pc, #428]	@ (8001788 <HAL_I2C_MspInit+0x23c>)
 80015da:	f004 f8a7 	bl	800572c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015de:	4b69      	ldr	r3, [pc, #420]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	4a68      	ldr	r2, [pc, #416]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 80015e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ea:	4b66      	ldr	r3, [pc, #408]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015f6:	4b65      	ldr	r3, [pc, #404]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80015f8:	4a65      	ldr	r2, [pc, #404]	@ (8001790 <HAL_I2C_MspInit+0x244>)
 80015fa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015fc:	4b63      	ldr	r3, [pc, #396]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80015fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001602:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001604:	4b61      	ldr	r3, [pc, #388]	@ (800178c <HAL_I2C_MspInit+0x240>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160a:	4b60      	ldr	r3, [pc, #384]	@ (800178c <HAL_I2C_MspInit+0x240>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001610:	4b5e      	ldr	r3, [pc, #376]	@ (800178c <HAL_I2C_MspInit+0x240>)
 8001612:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001616:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001618:	4b5c      	ldr	r3, [pc, #368]	@ (800178c <HAL_I2C_MspInit+0x240>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161e:	4b5b      	ldr	r3, [pc, #364]	@ (800178c <HAL_I2C_MspInit+0x240>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001624:	4b59      	ldr	r3, [pc, #356]	@ (800178c <HAL_I2C_MspInit+0x240>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800162a:	4b58      	ldr	r3, [pc, #352]	@ (800178c <HAL_I2C_MspInit+0x240>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001630:	4b56      	ldr	r3, [pc, #344]	@ (800178c <HAL_I2C_MspInit+0x240>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001636:	4855      	ldr	r0, [pc, #340]	@ (800178c <HAL_I2C_MspInit+0x240>)
 8001638:	f002 f980 	bl	800393c <HAL_DMA_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8001642:	f7ff fe95 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a50      	ldr	r2, [pc, #320]	@ (800178c <HAL_I2C_MspInit+0x240>)
 800164a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800164c:	4a4f      	ldr	r2, [pc, #316]	@ (800178c <HAL_I2C_MspInit+0x240>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2105      	movs	r1, #5
 8001656:	201f      	movs	r0, #31
 8001658:	f001 fdc8 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800165c:	201f      	movs	r0, #31
 800165e:	f001 fde1 	bl	8003224 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2105      	movs	r1, #5
 8001666:	2020      	movs	r0, #32
 8001668:	f001 fdc0 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800166c:	2020      	movs	r0, #32
 800166e:	f001 fdd9 	bl	8003224 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001672:	e080      	b.n	8001776 <HAL_I2C_MspInit+0x22a>
  else if(hi2c->Instance==I2C4)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a46      	ldr	r2, [pc, #280]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d17b      	bne.n	8001776 <HAL_I2C_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800167e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001682:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168a:	f107 0318 	add.w	r3, r7, #24
 800168e:	4618      	mov	r0, r3
 8001690:	f007 f9d6 	bl	8008a40 <HAL_RCCEx_PeriphCLKConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_MspInit+0x152>
      Error_Handler();
 800169a:	f7ff fe69 	bl	8001370 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800169e:	4b39      	ldr	r3, [pc, #228]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a38      	ldr	r2, [pc, #224]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 80016a4:	f043 0320 	orr.w	r3, r3, #32
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0320 	and.w	r3, r3, #32
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016b6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016be:	2312      	movs	r3, #18
 80016c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80016d0:	2304      	movs	r3, #4
 80016d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016da:	4619      	mov	r1, r3
 80016dc:	482e      	ldr	r0, [pc, #184]	@ (8001798 <HAL_I2C_MspInit+0x24c>)
 80016de:	f004 f825 	bl	800572c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80016e2:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	4a27      	ldr	r2, [pc, #156]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 80016e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ee:	4b25      	ldr	r3, [pc, #148]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c4_tx.Instance = DMA1_Stream5;
 80016fa:	4b28      	ldr	r3, [pc, #160]	@ (800179c <HAL_I2C_MspInit+0x250>)
 80016fc:	4a28      	ldr	r2, [pc, #160]	@ (80017a0 <HAL_I2C_MspInit+0x254>)
 80016fe:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Channel = DMA_CHANNEL_2;
 8001700:	4b26      	ldr	r3, [pc, #152]	@ (800179c <HAL_I2C_MspInit+0x250>)
 8001702:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001706:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001708:	4b24      	ldr	r3, [pc, #144]	@ (800179c <HAL_I2C_MspInit+0x250>)
 800170a:	2240      	movs	r2, #64	@ 0x40
 800170c:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800170e:	4b23      	ldr	r3, [pc, #140]	@ (800179c <HAL_I2C_MspInit+0x250>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001714:	4b21      	ldr	r3, [pc, #132]	@ (800179c <HAL_I2C_MspInit+0x250>)
 8001716:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800171a:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171c:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <HAL_I2C_MspInit+0x250>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001722:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <HAL_I2C_MspInit+0x250>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001728:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <HAL_I2C_MspInit+0x250>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800172e:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <HAL_I2C_MspInit+0x250>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
    hdma_i2c4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001734:	4b19      	ldr	r3, [pc, #100]	@ (800179c <HAL_I2C_MspInit+0x250>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 800173a:	4818      	ldr	r0, [pc, #96]	@ (800179c <HAL_I2C_MspInit+0x250>)
 800173c:	f002 f8fe 	bl	800393c <HAL_DMA_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_MspInit+0x1fe>
      Error_Handler();
 8001746:	f7ff fe13 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a13      	ldr	r2, [pc, #76]	@ (800179c <HAL_I2C_MspInit+0x250>)
 800174e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001750:	4a12      	ldr	r2, [pc, #72]	@ (800179c <HAL_I2C_MspInit+0x250>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2105      	movs	r1, #5
 800175a:	205f      	movs	r0, #95	@ 0x5f
 800175c:	f001 fd46 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001760:	205f      	movs	r0, #95	@ 0x5f
 8001762:	f001 fd5f 	bl	8003224 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2105      	movs	r1, #5
 800176a:	2060      	movs	r0, #96	@ 0x60
 800176c:	f001 fd3e 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001770:	2060      	movs	r0, #96	@ 0x60
 8001772:	f001 fd57 	bl	8003224 <HAL_NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	37b0      	adds	r7, #176	@ 0xb0
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40005400 	.word	0x40005400
 8001784:	40023800 	.word	0x40023800
 8001788:	40020400 	.word	0x40020400
 800178c:	20000310 	.word	0x20000310
 8001790:	40026010 	.word	0x40026010
 8001794:	40006000 	.word	0x40006000
 8001798:	40021400 	.word	0x40021400
 800179c:	20000370 	.word	0x20000370
 80017a0:	40026088 	.word	0x40026088

080017a4 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a21      	ldr	r2, [pc, #132]	@ (8001838 <HAL_I2C_MspDeInit+0x94>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11b      	bne.n	80017ee <HAL_I2C_MspDeInit+0x4a>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80017b6:	4b21      	ldr	r3, [pc, #132]	@ (800183c <HAL_I2C_MspDeInit+0x98>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	4a20      	ldr	r2, [pc, #128]	@ (800183c <HAL_I2C_MspDeInit+0x98>)
 80017bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017c0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80017c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017c6:	481e      	ldr	r0, [pc, #120]	@ (8001840 <HAL_I2C_MspDeInit+0x9c>)
 80017c8:	f004 f95c 	bl	8005a84 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80017cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017d0:	481b      	ldr	r0, [pc, #108]	@ (8001840 <HAL_I2C_MspDeInit+0x9c>)
 80017d2:	f004 f957 	bl	8005a84 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 f95c 	bl	8003a98 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80017e0:	201f      	movs	r0, #31
 80017e2:	f001 fd2d 	bl	8003240 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80017e6:	2020      	movs	r0, #32
 80017e8:	f001 fd2a 	bl	8003240 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C4_MspDeInit 1 */

    /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 80017ec:	e01f      	b.n	800182e <HAL_I2C_MspDeInit+0x8a>
  else if(hi2c->Instance==I2C4)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <HAL_I2C_MspDeInit+0xa0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d11a      	bne.n	800182e <HAL_I2C_MspDeInit+0x8a>
    __HAL_RCC_I2C4_CLK_DISABLE();
 80017f8:	4b10      	ldr	r3, [pc, #64]	@ (800183c <HAL_I2C_MspDeInit+0x98>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	4a0f      	ldr	r2, [pc, #60]	@ (800183c <HAL_I2C_MspDeInit+0x98>)
 80017fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001802:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 8001804:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001808:	480f      	ldr	r0, [pc, #60]	@ (8001848 <HAL_I2C_MspDeInit+0xa4>)
 800180a:	f004 f93b 	bl	8005a84 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 800180e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001812:	480d      	ldr	r0, [pc, #52]	@ (8001848 <HAL_I2C_MspDeInit+0xa4>)
 8001814:	f004 f936 	bl	8005a84 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181c:	4618      	mov	r0, r3
 800181e:	f002 f93b 	bl	8003a98 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8001822:	205f      	movs	r0, #95	@ 0x5f
 8001824:	f001 fd0c 	bl	8003240 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 8001828:	2060      	movs	r0, #96	@ 0x60
 800182a:	f001 fd09 	bl	8003240 <HAL_NVIC_DisableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40005400 	.word	0x40005400
 800183c:	40023800 	.word	0x40023800
 8001840:	40020400 	.word	0x40020400
 8001844:	40006000 	.word	0x40006000
 8001848:	40021400 	.word	0x40021400

0800184c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	@ 0x38
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a52      	ldr	r2, [pc, #328]	@ (80019b4 <HAL_SPI_MspInit+0x168>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d14c      	bne.n	8001908 <HAL_SPI_MspInit+0xbc>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800186e:	4b52      	ldr	r3, [pc, #328]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	4a51      	ldr	r2, [pc, #324]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001874:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001878:	6453      	str	r3, [r2, #68]	@ 0x44
 800187a:	4b4f      	ldr	r3, [pc, #316]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b4c      	ldr	r3, [pc, #304]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a4b      	ldr	r2, [pc, #300]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b49      	ldr	r3, [pc, #292]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	4b46      	ldr	r3, [pc, #280]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a45      	ldr	r2, [pc, #276]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018b6:	2360      	movs	r3, #96	@ 0x60
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018c6:	2305      	movs	r3, #5
 80018c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ce:	4619      	mov	r1, r3
 80018d0:	483a      	ldr	r0, [pc, #232]	@ (80019bc <HAL_SPI_MspInit+0x170>)
 80018d2:	f003 ff2b 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018d6:	2320      	movs	r3, #32
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018e6:	2305      	movs	r3, #5
 80018e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	4833      	ldr	r0, [pc, #204]	@ (80019c0 <HAL_SPI_MspInit+0x174>)
 80018f2:	f003 ff1b 	bl	800572c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2105      	movs	r1, #5
 80018fa:	2023      	movs	r0, #35	@ 0x23
 80018fc:	f001 fc76 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001900:	2023      	movs	r0, #35	@ 0x23
 8001902:	f001 fc8f 	bl	8003224 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001906:	e051      	b.n	80019ac <HAL_SPI_MspInit+0x160>
  else if(hspi->Instance==SPI2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2d      	ldr	r2, [pc, #180]	@ (80019c4 <HAL_SPI_MspInit+0x178>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d14c      	bne.n	80019ac <HAL_SPI_MspInit+0x160>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001912:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	4a28      	ldr	r2, [pc, #160]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800191c:	6413      	str	r3, [r2, #64]	@ 0x40
 800191e:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a22      	ldr	r2, [pc, #136]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a1c      	ldr	r2, [pc, #112]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_SPI_MspInit+0x16c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800195a:	230c      	movs	r3, #12
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800196a:	2305      	movs	r3, #5
 800196c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001972:	4619      	mov	r1, r3
 8001974:	4814      	ldr	r0, [pc, #80]	@ (80019c8 <HAL_SPI_MspInit+0x17c>)
 8001976:	f003 fed9 	bl	800572c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800197a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800198c:	2305      	movs	r3, #5
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	480a      	ldr	r0, [pc, #40]	@ (80019c0 <HAL_SPI_MspInit+0x174>)
 8001998:	f003 fec8 	bl	800572c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2105      	movs	r1, #5
 80019a0:	2024      	movs	r0, #36	@ 0x24
 80019a2:	f001 fc23 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80019a6:	2024      	movs	r0, #36	@ 0x24
 80019a8:	f001 fc3c 	bl	8003224 <HAL_NVIC_EnableIRQ>
}
 80019ac:	bf00      	nop
 80019ae:	3738      	adds	r7, #56	@ 0x38
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40013000 	.word	0x40013000
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020400 	.word	0x40020400
 80019c4:	40003800 	.word	0x40003800
 80019c8:	40020800 	.word	0x40020800

080019cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <HAL_TIM_Base_MspInit+0x44>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d113      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019de:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_TIM_Base_MspInit+0x48>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001a14 <HAL_TIM_Base_MspInit+0x48>)
 80019e4:	f043 0320 	orr.w	r3, r3, #32
 80019e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <HAL_TIM_Base_MspInit+0x48>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2105      	movs	r1, #5
 80019fa:	2037      	movs	r0, #55	@ 0x37
 80019fc:	f001 fbf6 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a00:	2037      	movs	r0, #55	@ 0x37
 8001a02:	f001 fc0f 	bl	8003224 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40001400 	.word	0x40001400
 8001a14:	40023800 	.word	0x40023800

08001a18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b0b0      	sub	sp, #192	@ 0xc0
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a34:	2284      	movs	r2, #132	@ 0x84
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f01c f9b0 	bl	801dd9e <memset>
  if(huart->Instance==UART4)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a9f      	ldr	r2, [pc, #636]	@ (8001cc0 <HAL_UART_MspInit+0x2a8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	f040 80c3 	bne.w	8001bd0 <HAL_UART_MspInit+0x1b8>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001a50:	2340      	movs	r3, #64	@ 0x40
 8001a52:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f006 fff1 	bl	8008a40 <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001a64:	f7ff fc84 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a68:	4b96      	ldr	r3, [pc, #600]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	4a95      	ldr	r2, [pc, #596]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001a6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a74:	4b93      	ldr	r3, [pc, #588]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b90      	ldr	r3, [pc, #576]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a84:	4a8f      	ldr	r2, [pc, #572]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8c:	4b8d      	ldr	r3, [pc, #564]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a98:	4b8a      	ldr	r3, [pc, #552]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9c:	4a89      	ldr	r2, [pc, #548]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa4:	4b87      	ldr	r3, [pc, #540]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ac8:	2308      	movs	r3, #8
 8001aca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	487c      	ldr	r0, [pc, #496]	@ (8001cc8 <HAL_UART_MspInit+0x2b0>)
 8001ad6:	f003 fe29 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ada:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ade:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001af4:	2308      	movs	r3, #8
 8001af6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001afe:	4619      	mov	r1, r3
 8001b00:	4872      	ldr	r0, [pc, #456]	@ (8001ccc <HAL_UART_MspInit+0x2b4>)
 8001b02:	f003 fe13 	bl	800572c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001b06:	4b72      	ldr	r3, [pc, #456]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b08:	4a72      	ldr	r2, [pc, #456]	@ (8001cd4 <HAL_UART_MspInit+0x2bc>)
 8001b0a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001b0c:	4b70      	ldr	r3, [pc, #448]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b12:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b14:	4b6e      	ldr	r3, [pc, #440]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b20:	4b6b      	ldr	r3, [pc, #428]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b26:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b28:	4b69      	ldr	r3, [pc, #420]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b2e:	4b68      	ldr	r3, [pc, #416]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001b34:	4b66      	ldr	r3, [pc, #408]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b3a:	4b65      	ldr	r3, [pc, #404]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b40:	4b63      	ldr	r3, [pc, #396]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b46:	4862      	ldr	r0, [pc, #392]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b48:	f001 fef8 	bl	800393c <HAL_DMA_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001b52:	f7ff fc0d 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b5a:	675a      	str	r2, [r3, #116]	@ 0x74
 8001b5c:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd0 <HAL_UART_MspInit+0x2b8>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001b62:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001b64:	4a5d      	ldr	r2, [pc, #372]	@ (8001cdc <HAL_UART_MspInit+0x2c4>)
 8001b66:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001b68:	4b5b      	ldr	r3, [pc, #364]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001b6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b6e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b70:	4b59      	ldr	r3, [pc, #356]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001b72:	2240      	movs	r2, #64	@ 0x40
 8001b74:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b76:	4b58      	ldr	r3, [pc, #352]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b7c:	4b56      	ldr	r3, [pc, #344]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001b7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b82:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b84:	4b54      	ldr	r3, [pc, #336]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8a:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001b90:	4b51      	ldr	r3, [pc, #324]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b96:	4b50      	ldr	r3, [pc, #320]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b9c:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001ba2:	484d      	ldr	r0, [pc, #308]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001ba4:	f001 feca 	bl	800393c <HAL_DMA_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_UART_MspInit+0x19a>
    {
      Error_Handler();
 8001bae:	f7ff fbdf 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a48      	ldr	r2, [pc, #288]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001bb6:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bb8:	4a47      	ldr	r2, [pc, #284]	@ (8001cd8 <HAL_UART_MspInit+0x2c0>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2106      	movs	r1, #6
 8001bc2:	2034      	movs	r0, #52	@ 0x34
 8001bc4:	f001 fb12 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001bc8:	2034      	movs	r0, #52	@ 0x34
 8001bca:	f001 fb2b 	bl	8003224 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bce:	e0d9      	b.n	8001d84 <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==USART2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a42      	ldr	r2, [pc, #264]	@ (8001ce0 <HAL_UART_MspInit+0x2c8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	f040 808a 	bne.w	8001cf0 <HAL_UART_MspInit+0x2d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001be0:	2304      	movs	r3, #4
 8001be2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001be8:	4618      	mov	r0, r3
 8001bea:	f006 ff29 	bl	8008a40 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8001bf4:	f7ff fbbc 	bl	8001370 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bf8:	4b32      	ldr	r3, [pc, #200]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	4a31      	ldr	r2, [pc, #196]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c04:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c10:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c14:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001c16:	f043 0308 	orr.w	r3, r3, #8
 8001c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1c:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <HAL_UART_MspInit+0x2ac>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c28:	2360      	movs	r3, #96	@ 0x60
 8001c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c40:	2307      	movs	r3, #7
 8001c42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c46:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4825      	ldr	r0, [pc, #148]	@ (8001ce4 <HAL_UART_MspInit+0x2cc>)
 8001c4e:	f003 fd6d 	bl	800572c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c52:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001c54:	4a25      	ldr	r2, [pc, #148]	@ (8001cec <HAL_UART_MspInit+0x2d4>)
 8001c56:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c58:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001c5a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c60:	4b21      	ldr	r3, [pc, #132]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001c62:	2240      	movs	r2, #64	@ 0x40
 8001c64:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c66:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001c6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c72:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c80:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c86:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c92:	4815      	ldr	r0, [pc, #84]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001c94:	f001 fe52 	bl	800393c <HAL_DMA_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_UART_MspInit+0x28a>
      Error_Handler();
 8001c9e:	f7ff fb67 	bl	8001370 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001ca6:	671a      	str	r2, [r3, #112]	@ 0x70
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce8 <HAL_UART_MspInit+0x2d0>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2106      	movs	r1, #6
 8001cb2:	2026      	movs	r0, #38	@ 0x26
 8001cb4:	f001 fa9a 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cb8:	2026      	movs	r0, #38	@ 0x26
 8001cba:	f001 fab3 	bl	8003224 <HAL_NVIC_EnableIRQ>
}
 8001cbe:	e061      	b.n	8001d84 <HAL_UART_MspInit+0x36c>
 8001cc0:	40004c00 	.word	0x40004c00
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	2000067c 	.word	0x2000067c
 8001cd4:	40026040 	.word	0x40026040
 8001cd8:	200006dc 	.word	0x200006dc
 8001cdc:	40026070 	.word	0x40026070
 8001ce0:	40004400 	.word	0x40004400
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	2000073c 	.word	0x2000073c
 8001cec:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a25      	ldr	r2, [pc, #148]	@ (8001d8c <HAL_UART_MspInit+0x374>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d144      	bne.n	8001d84 <HAL_UART_MspInit+0x36c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f006 fe99 	bl	8008a40 <HAL_RCCEx_PeriphCLKConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_UART_MspInit+0x300>
      Error_Handler();
 8001d14:	f7ff fb2c 	bl	8001370 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d18:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <HAL_UART_MspInit+0x378>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001d90 <HAL_UART_MspInit+0x378>)
 8001d1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_UART_MspInit+0x378>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d30:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <HAL_UART_MspInit+0x378>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d34:	4a16      	ldr	r2, [pc, #88]	@ (8001d90 <HAL_UART_MspInit+0x378>)
 8001d36:	f043 0308 	orr.w	r3, r3, #8
 8001d3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <HAL_UART_MspInit+0x378>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d62:	2307      	movs	r3, #7
 8001d64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d68:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4809      	ldr	r0, [pc, #36]	@ (8001d94 <HAL_UART_MspInit+0x37c>)
 8001d70:	f003 fcdc 	bl	800572c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2105      	movs	r1, #5
 8001d78:	2027      	movs	r0, #39	@ 0x27
 8001d7a:	f001 fa37 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d7e:	2027      	movs	r0, #39	@ 0x27
 8001d80:	f001 fa50 	bl	8003224 <HAL_NVIC_EnableIRQ>
}
 8001d84:	bf00      	nop
 8001d86:	37c0      	adds	r7, #192	@ 0xc0
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40004800 	.word	0x40004800
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020c00 	.word	0x40020c00

08001d98 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0ac      	sub	sp, #176	@ 0xb0
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db0:	f107 0318 	add.w	r3, r7, #24
 8001db4:	2284      	movs	r2, #132	@ 0x84
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f01b fff0 	bl	801dd9e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dc6:	d159      	bne.n	8001e7c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001dc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001dcc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f006 fe31 	bl	8008a40 <HAL_RCCEx_PeriphCLKConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001de4:	f7ff fac4 	bl	8001370 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	4b26      	ldr	r3, [pc, #152]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	4a25      	ldr	r2, [pc, #148]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df4:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e00:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001e04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e24:	4619      	mov	r1, r3
 8001e26:	4818      	ldr	r0, [pc, #96]	@ (8001e88 <HAL_PCD_MspInit+0xf0>)
 8001e28:	f003 fc80 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e44:	4619      	mov	r1, r3
 8001e46:	4810      	ldr	r0, [pc, #64]	@ (8001e88 <HAL_PCD_MspInit+0xf0>)
 8001e48:	f003 fc70 	bl	800572c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e50:	4a0c      	ldr	r2, [pc, #48]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e56:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e58:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e68:	4a06      	ldr	r2, [pc, #24]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001e7c:	bf00      	nop
 8001e7e:	37b0      	adds	r7, #176	@ 0xb0
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000

08001e8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	@ 0x38
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e9c:	4b33      	ldr	r3, [pc, #204]	@ (8001f6c <HAL_InitTick+0xe0>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	4a32      	ldr	r2, [pc, #200]	@ (8001f6c <HAL_InitTick+0xe0>)
 8001ea2:	f043 0310 	orr.w	r3, r3, #16
 8001ea6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea8:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <HAL_InitTick+0xe0>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb4:	f107 0210 	add.w	r2, r7, #16
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f006 fd8c 	bl	80089dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ece:	f006 fd5d 	bl	800898c <HAL_RCC_GetPCLK1Freq>
 8001ed2:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ed4:	e004      	b.n	8001ee0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ed6:	f006 fd59 	bl	800898c <HAL_RCC_GetPCLK1Freq>
 8001eda:	4603      	mov	r3, r0
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee2:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <HAL_InitTick+0xe4>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	0c9b      	lsrs	r3, r3, #18
 8001eea:	3b01      	subs	r3, #1
 8001eec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001ef0:	4a21      	ldr	r2, [pc, #132]	@ (8001f78 <HAL_InitTick+0xec>)
 8001ef2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001ef6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001efa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001efc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f02:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f14:	4817      	ldr	r0, [pc, #92]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f16:	f008 fcd7 	bl	800a8c8 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11b      	bne.n	8001f60 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f28:	4812      	ldr	r0, [pc, #72]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f2a:	f008 fd25 	bl	800a978 <HAL_TIM_Base_Start_IT>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d111      	bne.n	8001f60 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f3c:	2036      	movs	r0, #54	@ 0x36
 8001f3e:	f001 f971 	bl	8003224 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d808      	bhi.n	8001f5a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	2036      	movs	r0, #54	@ 0x36
 8001f4e:	f001 f94d 	bl	80031ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_InitTick+0xf0>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e002      	b.n	8001f60 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3738      	adds	r7, #56	@ 0x38
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	20000cb8 	.word	0x20000cb8
 8001f78:	40001000 	.word	0x40001000
 8001f7c:	20000004 	.word	0x20000004

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <NMI_Handler+0x4>

08001f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("!!! HARD FAULT HANDLER !!!\n\r");
 8001f8e:	4809      	ldr	r0, [pc, #36]	@ (8001fb4 <HardFault_Handler+0x2c>)
 8001f90:	f01b fea0 	bl	801dcd4 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    // RED LED toggle for visual indication
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001f94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f98:	4807      	ldr	r0, [pc, #28]	@ (8001fb8 <HardFault_Handler+0x30>)
 8001f9a:	f003 fe98 	bl	8005cce <HAL_GPIO_TogglePin>
  	for(volatile int i=0; i<1000000; i++);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	e002      	b.n	8001faa <HardFault_Handler+0x22>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a03      	ldr	r2, [pc, #12]	@ (8001fbc <HardFault_Handler+0x34>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	ddf8      	ble.n	8001fa4 <HardFault_Handler+0x1c>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001fb2:	e7ef      	b.n	8001f94 <HardFault_Handler+0xc>
 8001fb4:	0801ed44 	.word	0x0801ed44
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	000f423f 	.word	0x000f423f

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 8001fc4:	4802      	ldr	r0, [pc, #8]	@ (8001fd0 <MemManage_Handler+0x10>)
 8001fc6:	f01b fe85 	bl	801dcd4 <iprintf>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fca:	bf00      	nop
 8001fcc:	e7fd      	b.n	8001fca <MemManage_Handler+0xa>
 8001fce:	bf00      	nop
 8001fd0:	0801ed44 	.word	0x0801ed44

08001fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 8001fd8:	4802      	ldr	r0, [pc, #8]	@ (8001fe4 <BusFault_Handler+0x10>)
 8001fda:	f01b fe7b 	bl	801dcd4 <iprintf>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fde:	bf00      	nop
 8001fe0:	e7fd      	b.n	8001fde <BusFault_Handler+0xa>
 8001fe2:	bf00      	nop
 8001fe4:	0801ed44 	.word	0x0801ed44

08001fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <UsageFault_Handler+0x4>

08001ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <DMA1_Stream0_IRQHandler+0x10>)
 8002012:	f001 fe91 	bl	8003d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000310 	.word	0x20000310

08002020 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <DMA1_Stream2_IRQHandler+0x10>)
 8002026:	f001 fe87 	bl	8003d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000067c 	.word	0x2000067c

08002034 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <DMA1_Stream4_IRQHandler+0x10>)
 800203a:	f001 fe7d 	bl	8003d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200006dc 	.word	0x200006dc

08002048 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 800204c:	4802      	ldr	r0, [pc, #8]	@ (8002058 <DMA1_Stream5_IRQHandler+0x10>)
 800204e:	f001 fe73 	bl	8003d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000370 	.word	0x20000370

0800205c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002060:	4802      	ldr	r0, [pc, #8]	@ (800206c <DMA1_Stream6_IRQHandler+0x10>)
 8002062:	f001 fe69 	bl	8003d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	2000073c 	.word	0x2000073c

08002070 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002074:	4802      	ldr	r0, [pc, #8]	@ (8002080 <ADC_IRQHandler+0x10>)
 8002076:	f000 fc4d 	bl	8002914 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200001e8 	.word	0x200001e8

08002084 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <I2C1_EV_IRQHandler+0x10>)
 800208a:	f004 f8f5 	bl	8006278 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000268 	.word	0x20000268

08002098 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <I2C1_ER_IRQHandler+0x10>)
 800209e:	f004 f905 	bl	80062ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000268 	.word	0x20000268

080020ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020b0:	4802      	ldr	r0, [pc, #8]	@ (80020bc <SPI1_IRQHandler+0x10>)
 80020b2:	f007 fd25 	bl	8009b00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200003d0 	.word	0x200003d0

080020c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <SPI2_IRQHandler+0x10>)
 80020c6:	f007 fd1b 	bl	8009b00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000434 	.word	0x20000434

080020d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <USART2_IRQHandler+0x10>)
 80020da:	f009 fa43 	bl	800b564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000056c 	.word	0x2000056c

080020e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <USART3_IRQHandler+0x10>)
 80020ee:	f009 fa39 	bl	800b564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200005f4 	.word	0x200005f4

080020fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002100:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002104:	f003 fdfe 	bl	8005d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002110:	4802      	ldr	r0, [pc, #8]	@ (800211c <UART4_IRQHandler+0x10>)
 8002112:	f009 fa27 	bl	800b564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200004e4 	.word	0x200004e4

08002120 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <TIM6_DAC_IRQHandler+0x20>)
 8002126:	791b      	ldrb	r3, [r3, #4]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800212e:	4804      	ldr	r0, [pc, #16]	@ (8002140 <TIM6_DAC_IRQHandler+0x20>)
 8002130:	f001 fb17 	bl	8003762 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002134:	4803      	ldr	r0, [pc, #12]	@ (8002144 <TIM6_DAC_IRQHandler+0x24>)
 8002136:	f008 fcc7 	bl	800aac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000254 	.word	0x20000254
 8002144:	20000cb8 	.word	0x20000cb8

08002148 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800214c:	4802      	ldr	r0, [pc, #8]	@ (8002158 <TIM7_IRQHandler+0x10>)
 800214e:	f008 fcbb 	bl	800aac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000498 	.word	0x20000498

0800215c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//	printf("ETH_IRQHandler was called\n\r");
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002160:	4802      	ldr	r0, [pc, #8]	@ (800216c <ETH_IRQHandler+0x10>)
 8002162:	f002 fbfb 	bl	800495c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000a090 	.word	0x2000a090

08002170 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002174:	4802      	ldr	r0, [pc, #8]	@ (8002180 <ETH_WKUP_IRQHandler+0x10>)
 8002176:	f002 fbf1 	bl	800495c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2000a090 	.word	0x2000a090

08002184 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <I2C4_EV_IRQHandler+0x10>)
 800219a:	f004 f86d 	bl	8006278 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200002bc 	.word	0x200002bc

080021a8 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <I2C4_ER_IRQHandler+0x10>)
 80021ae:	f004 f87d 	bl	80062ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200002bc 	.word	0x200002bc

080021bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return 1;
 80021c0:	2301      	movs	r3, #1
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_kill>:

int _kill(int pid, int sig)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021d6:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <_kill+0x20>)
 80021d8:	2216      	movs	r2, #22
 80021da:	601a      	str	r2, [r3, #0]
  return -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	20027a24 	.word	0x20027a24

080021f0 <_exit>:

void _exit (int status)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ffe5 	bl	80021cc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002202:	bf00      	nop
 8002204:	e7fd      	b.n	8002202 <_exit+0x12>

08002206 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e00a      	b.n	800222e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002218:	f3af 8000 	nop.w
 800221c:	4601      	mov	r1, r0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	60ba      	str	r2, [r7, #8]
 8002224:	b2ca      	uxtb	r2, r1
 8002226:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3301      	adds	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	dbf0      	blt.n	8002218 <_read+0x12>
  }

  return len;
 8002236:	687b      	ldr	r3, [r7, #4]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e009      	b.n	8002266 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	60ba      	str	r2, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe ff86 	bl	800116c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	3301      	adds	r3, #1
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	dbf1      	blt.n	8002252 <_write+0x12>
  }
  return len;
 800226e:	687b      	ldr	r3, [r7, #4]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_close>:

int _close(int file)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022a0:	605a      	str	r2, [r3, #4]
  return 0;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_isatty>:

int _isatty(int file)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022b8:	2301      	movs	r3, #1
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e8:	4a14      	ldr	r2, [pc, #80]	@ (800233c <_sbrk+0x5c>)
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <_sbrk+0x60>)
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f4:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022fc:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <_sbrk+0x64>)
 80022fe:	4a12      	ldr	r2, [pc, #72]	@ (8002348 <_sbrk+0x68>)
 8002300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002302:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	429a      	cmp	r2, r3
 800230e:	d205      	bcs.n	800231c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002310:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <_sbrk+0x6c>)
 8002312:	220c      	movs	r2, #12
 8002314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	e009      	b.n	8002330 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002322:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	4a06      	ldr	r2, [pc, #24]	@ (8002344 <_sbrk+0x64>)
 800232c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	20050000 	.word	0x20050000
 8002340:	00000400 	.word	0x00000400
 8002344:	20000d04 	.word	0x20000d04
 8002348:	20027a38 	.word	0x20027a38
 800234c:	20027a24 	.word	0x20027a24

08002350 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <SystemInit+0x20>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	4a05      	ldr	r2, [pc, #20]	@ (8002370 <SystemInit+0x20>)
 800235c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002374:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002378:	f7ff ffea 	bl	8002350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800237c:	480c      	ldr	r0, [pc, #48]	@ (80023b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800237e:	490d      	ldr	r1, [pc, #52]	@ (80023b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002380:	4a0d      	ldr	r2, [pc, #52]	@ (80023b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002384:	e002      	b.n	800238c <LoopCopyDataInit>

08002386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238a:	3304      	adds	r3, #4

0800238c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800238c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002390:	d3f9      	bcc.n	8002386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002392:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002394:	4c0a      	ldr	r4, [pc, #40]	@ (80023c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002398:	e001      	b.n	800239e <LoopFillZerobss>

0800239a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800239c:	3204      	adds	r2, #4

0800239e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a0:	d3fb      	bcc.n	800239a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80023a2:	f01b fda9 	bl	801def8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023a6:	f7fe f919 	bl	80005dc <main>
  bx  lr    
 80023aa:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80023ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80023b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80023b8:	08021d94 	.word	0x08021d94
  ldr r2, =_sbss
 80023bc:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80023c0:	20027a34 	.word	0x20027a34

080023c4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c4:	e7fe      	b.n	80023c4 <CAN1_RX0_IRQHandler>

080023c6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <LAN8742_RegisterBusIO+0x28>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d007      	beq.n	80023ee <LAN8742_RegisterBusIO+0x28>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <LAN8742_RegisterBusIO+0x28>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	e014      	b.n	800241e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d139      	bne.n	80024ba <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e01c      	b.n	800249a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f107 020c 	add.w	r2, r7, #12
 8002468:	2112      	movs	r1, #18
 800246a:	6978      	ldr	r0, [r7, #20]
 800246c:	4798      	blx	r3
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	da03      	bge.n	800247c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002474:	f06f 0304 	mvn.w	r3, #4
 8002478:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800247a:	e00b      	b.n	8002494 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	429a      	cmp	r2, r3
 8002486:	d105      	bne.n	8002494 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
         break;
 8002492:	e005      	b.n	80024a0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3301      	adds	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b1f      	cmp	r3, #31
 800249e:	d9df      	bls.n	8002460 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b1f      	cmp	r3, #31
 80024a6:	d902      	bls.n	80024ae <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80024a8:	f06f 0302 	mvn.w	r3, #2
 80024ac:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80024ba:	693b      	ldr	r3, [r7, #16]
 }
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6810      	ldr	r0, [r2, #0]
 80024d8:	f107 020c 	add.w	r2, r7, #12
 80024dc:	2101      	movs	r1, #1
 80024de:	4798      	blx	r3
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da02      	bge.n	80024ec <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80024e6:	f06f 0304 	mvn.w	r3, #4
 80024ea:	e06e      	b.n	80025ca <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6810      	ldr	r0, [r2, #0]
 80024f4:	f107 020c 	add.w	r2, r7, #12
 80024f8:	2101      	movs	r1, #1
 80024fa:	4798      	blx	r3
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da02      	bge.n	8002508 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002502:	f06f 0304 	mvn.w	r3, #4
 8002506:	e060      	b.n	80025ca <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002512:	2301      	movs	r3, #1
 8002514:	e059      	b.n	80025ca <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6810      	ldr	r0, [r2, #0]
 800251e:	f107 020c 	add.w	r2, r7, #12
 8002522:	2100      	movs	r1, #0
 8002524:	4798      	blx	r3
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	da02      	bge.n	8002532 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800252c:	f06f 0304 	mvn.w	r3, #4
 8002530:	e04b      	b.n	80025ca <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d11b      	bne.n	8002574 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d006      	beq.n	8002554 <LAN8742_GetLinkState+0x90>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002550:	2302      	movs	r3, #2
 8002552:	e03a      	b.n	80025ca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800255e:	2303      	movs	r3, #3
 8002560:	e033      	b.n	80025ca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800256c:	2304      	movs	r3, #4
 800256e:	e02c      	b.n	80025ca <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002570:	2305      	movs	r3, #5
 8002572:	e02a      	b.n	80025ca <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6810      	ldr	r0, [r2, #0]
 800257c:	f107 020c 	add.w	r2, r7, #12
 8002580:	211f      	movs	r1, #31
 8002582:	4798      	blx	r3
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	da02      	bge.n	8002590 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800258a:	f06f 0304 	mvn.w	r3, #4
 800258e:	e01c      	b.n	80025ca <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800259a:	2306      	movs	r3, #6
 800259c:	e015      	b.n	80025ca <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 031c 	and.w	r3, r3, #28
 80025a4:	2b18      	cmp	r3, #24
 80025a6:	d101      	bne.n	80025ac <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80025a8:	2302      	movs	r3, #2
 80025aa:	e00e      	b.n	80025ca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 031c 	and.w	r3, r3, #28
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d101      	bne.n	80025ba <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e007      	b.n	80025ca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 031c 	and.w	r3, r3, #28
 80025c0:	2b14      	cmp	r3, #20
 80025c2:	d101      	bne.n	80025c8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80025c4:	2304      	movs	r3, #4
 80025c6:	e000      	b.n	80025ca <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80025c8:	2305      	movs	r3, #5
    }
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d6:	2003      	movs	r0, #3
 80025d8:	f000 fdfd 	bl	80031d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025dc:	2005      	movs	r0, #5
 80025de:	f7ff fc55 	bl	8001e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e2:	f7fe fecb 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f0:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_IncTick+0x20>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <HAL_IncTick+0x24>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a04      	ldr	r2, [pc, #16]	@ (8002610 <HAL_IncTick+0x24>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000008 	.word	0x20000008
 8002610:	20000d08 	.word	0x20000d08

08002614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;
 8002618:	4b03      	ldr	r3, [pc, #12]	@ (8002628 <HAL_GetTick+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000d08 	.word	0x20000d08

0800262c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff ffee 	bl	8002614 <HAL_GetTick>
 8002638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d005      	beq.n	8002652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002646:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <HAL_Delay+0x44>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002652:	bf00      	nop
 8002654:	f7ff ffde 	bl	8002614 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d8f7      	bhi.n	8002654 <HAL_Delay+0x28>
  {
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000008 	.word	0x20000008

08002674 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e031      	b.n	80026ee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe feaa 	bl	80013ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d116      	bne.n	80026e0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <HAL_ADC_Init+0x84>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	f043 0202 	orr.w	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fbb2 	bl	8002e2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f023 0303 	bic.w	r3, r3, #3
 80026d6:	f043 0201 	orr.w	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80026de:	e001      	b.n	80026e4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	ffffeefd 	.word	0xffffeefd

080026fc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADC_Stop+0x16>
 800270e:	2302      	movs	r3, #2
 8002710:	e01f      	b.n	8002752 <HAL_ADC_Stop+0x56>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d107      	bne.n	8002748 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800273c:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <HAL_ADC_Stop+0x64>)
 800273e:	4013      	ands	r3, r2
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	ffffeefe 	.word	0xffffeefe

08002764 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_ADC_Start_IT+0x1a>
 800277a:	2302      	movs	r3, #2
 800277c:	e0b5      	b.n	80028ea <HAL_ADC_Start_IT+0x186>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d018      	beq.n	80027c6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80027a4:	4b54      	ldr	r3, [pc, #336]	@ (80028f8 <HAL_ADC_Start_IT+0x194>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a54      	ldr	r2, [pc, #336]	@ (80028fc <HAL_ADC_Start_IT+0x198>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	0c9a      	lsrs	r2, r3, #18
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80027b8:	e002      	b.n	80027c0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3b01      	subs	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f9      	bne.n	80027ba <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d17d      	bne.n	80028d0 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027d8:	4b49      	ldr	r3, [pc, #292]	@ (8002900 <HAL_ADC_Start_IT+0x19c>)
 80027da:	4013      	ands	r3, r2
 80027dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800280e:	d106      	bne.n	800281e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002814:	f023 0206 	bic.w	r2, r3, #6
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	645a      	str	r2, [r3, #68]	@ 0x44
 800281c:	e002      	b.n	8002824 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002834:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b30      	ldr	r3, [pc, #192]	@ (8002904 <HAL_ADC_Start_IT+0x1a0>)
 8002842:	430b      	orrs	r3, r1
 8002844:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002846:	4b30      	ldr	r3, [pc, #192]	@ (8002908 <HAL_ADC_Start_IT+0x1a4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d143      	bne.n	80028e8 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	e03a      	b.n	80028e8 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a25      	ldr	r2, [pc, #148]	@ (800290c <HAL_ADC_Start_IT+0x1a8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d10e      	bne.n	800289a <HAL_ADC_Start_IT+0x136>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d107      	bne.n	800289a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002898:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800289a:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <HAL_ADC_Start_IT+0x1a4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d120      	bne.n	80028e8 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a19      	ldr	r2, [pc, #100]	@ (8002910 <HAL_ADC_Start_IT+0x1ac>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d11b      	bne.n	80028e8 <HAL_ADC_Start_IT+0x184>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d114      	bne.n	80028e8 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	e00b      	b.n	80028e8 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	f043 0210 	orr.w	r2, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000000 	.word	0x20000000
 80028fc:	431bde83 	.word	0x431bde83
 8002900:	fffff8fe 	.word	0xfffff8fe
 8002904:	04000020 	.word	0x04000020
 8002908:	40012300 	.word	0x40012300
 800290c:	40012000 	.word	0x40012000
 8002910:	40012200 	.word	0x40012200

08002914 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d049      	beq.n	80029de <HAL_ADC_IRQHandler+0xca>
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d046      	beq.n	80029de <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d12b      	bne.n	80029ce <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800297a:	2b00      	cmp	r3, #0
 800297c:	d127      	bne.n	80029ce <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002984:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002996:	2b00      	cmp	r3, #0
 8002998:	d119      	bne.n	80029ce <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0220 	bic.w	r2, r2, #32
 80029a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f01a f910 	bl	801cbf4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0212 	mvn.w	r2, #18
 80029dc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ec:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d057      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x190>
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d054      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d139      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a26:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d12b      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d124      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11d      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d119      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fac3 	bl	8003020 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f06f 020c 	mvn.w	r2, #12
 8002aa2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d017      	beq.n	8002aea <HAL_ADC_IRQHandler+0x1d6>
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d014      	beq.n	8002aea <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10d      	bne.n	8002aea <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f837 	bl	8002b4e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0201 	mvn.w	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002af8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_ADC_IRQHandler+0x218>
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	f043 0202 	orr.w	r2, r3, #2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f06f 0220 	mvn.w	r2, #32
 8002b1a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f820 	bl	8002b62 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f06f 0220 	mvn.w	r2, #32
 8002b2a:	601a      	str	r2, [r3, #0]
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x1c>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e13a      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x292>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d93a      	bls.n	8002c1a <HAL_ADC_ConfigChannel+0xa2>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bac:	d035      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68d9      	ldr	r1, [r3, #12]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b1e      	subs	r3, #30
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a8f      	ldr	r2, [pc, #572]	@ (8002e18 <HAL_ADC_ConfigChannel+0x2a0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10a      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68d9      	ldr	r1, [r3, #12]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	061a      	lsls	r2, r3, #24
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bf2:	e039      	b.n	8002c68 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68d9      	ldr	r1, [r3, #12]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4618      	mov	r0, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4403      	add	r3, r0
 8002c0c:	3b1e      	subs	r3, #30
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c18:	e026      	b.n	8002c68 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6919      	ldr	r1, [r3, #16]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	2207      	movs	r2, #7
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43da      	mvns	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	400a      	ands	r2, r1
 8002c40:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6919      	ldr	r1, [r3, #16]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	4618      	mov	r0, r3
 8002c54:	4603      	mov	r3, r0
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4403      	add	r3, r0
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b06      	cmp	r3, #6
 8002c6e:	d824      	bhi.n	8002cba <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	3b05      	subs	r3, #5
 8002c82:	221f      	movs	r2, #31
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43da      	mvns	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	400a      	ands	r2, r1
 8002c90:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	3b05      	subs	r3, #5
 8002cac:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cb8:	e04c      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d824      	bhi.n	8002d0c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3b23      	subs	r3, #35	@ 0x23
 8002cd4:	221f      	movs	r2, #31
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b23      	subs	r3, #35	@ 0x23
 8002cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d0a:	e023      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3b41      	subs	r3, #65	@ 0x41
 8002d1e:	221f      	movs	r2, #31
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43da      	mvns	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	3b41      	subs	r3, #65	@ 0x41
 8002d48:	fa00 f203 	lsl.w	r2, r0, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a30      	ldr	r2, [pc, #192]	@ (8002e1c <HAL_ADC_ConfigChannel+0x2a4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10a      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x1fc>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d66:	d105      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d68:	4b2d      	ldr	r3, [pc, #180]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d6e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002d72:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a28      	ldr	r2, [pc, #160]	@ (8002e1c <HAL_ADC_ConfigChannel+0x2a4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d10f      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x226>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b12      	cmp	r3, #18
 8002d84:	d10b      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002d86:	4b26      	ldr	r3, [pc, #152]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4a25      	ldr	r2, [pc, #148]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d8c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d90:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d92:	4b23      	ldr	r3, [pc, #140]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4a22      	ldr	r2, [pc, #136]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d9c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e1c <HAL_ADC_ConfigChannel+0x2a4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d12b      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x288>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1a      	ldr	r2, [pc, #104]	@ (8002e18 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d003      	beq.n	8002dba <HAL_ADC_ConfigChannel+0x242>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b11      	cmp	r3, #17
 8002db8:	d122      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002dba:	4b19      	ldr	r3, [pc, #100]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2a8>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2a8>)
 8002dc0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002dc4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002dc6:	4b16      	ldr	r3, [pc, #88]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2a8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4a15      	ldr	r2, [pc, #84]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2a8>)
 8002dcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dd0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a10      	ldr	r2, [pc, #64]	@ (8002e18 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d111      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <HAL_ADC_ConfigChannel+0x2ac>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a11      	ldr	r2, [pc, #68]	@ (8002e28 <HAL_ADC_ConfigChannel+0x2b0>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0c9a      	lsrs	r2, r3, #18
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002df2:	e002      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	10000012 	.word	0x10000012
 8002e1c:	40012000 	.word	0x40012000
 8002e20:	40012300 	.word	0x40012300
 8002e24:	20000000 	.word	0x20000000
 8002e28:	431bde83 	.word	0x431bde83

08002e2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e34:	4b78      	ldr	r3, [pc, #480]	@ (8003018 <ADC_Init+0x1ec>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a77      	ldr	r2, [pc, #476]	@ (8003018 <ADC_Init+0x1ec>)
 8002e3a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002e3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e40:	4b75      	ldr	r3, [pc, #468]	@ (8003018 <ADC_Init+0x1ec>)
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4973      	ldr	r1, [pc, #460]	@ (8003018 <ADC_Init+0x1ec>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	021a      	lsls	r2, r3, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6899      	ldr	r1, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	4a58      	ldr	r2, [pc, #352]	@ (800301c <ADC_Init+0x1f0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d022      	beq.n	8002f06 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ece:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6899      	ldr	r1, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ef0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6899      	ldr	r1, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	e00f      	b.n	8002f26 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0202 	bic.w	r2, r2, #2
 8002f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6899      	ldr	r1, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	005a      	lsls	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01b      	beq.n	8002f8c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	035a      	lsls	r2, r3, #13
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	e007      	b.n	8002f9c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	051a      	lsls	r2, r3, #20
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6899      	ldr	r1, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fde:	025a      	lsls	r2, r3, #9
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6899      	ldr	r1, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	029a      	lsls	r2, r3, #10
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40012300 	.word	0x40012300
 800301c:	0f000001 	.word	0x0f000001

08003020 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <__NVIC_SetPriorityGrouping+0x40>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003050:	4013      	ands	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800305c:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 800305e:	4313      	orrs	r3, r2
 8003060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003062:	4a04      	ldr	r2, [pc, #16]	@ (8003074 <__NVIC_SetPriorityGrouping+0x40>)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	60d3      	str	r3, [r2, #12]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00
 8003078:	05fa0000 	.word	0x05fa0000

0800307c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <__NVIC_GetPriorityGrouping+0x18>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 0307 	and.w	r3, r3, #7
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db0b      	blt.n	80030c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4907      	ldr	r1, [pc, #28]	@ (80030d0 <__NVIC_EnableIRQ+0x38>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db12      	blt.n	800310c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	490a      	ldr	r1, [pc, #40]	@ (8003118 <__NVIC_DisableIRQ+0x44>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	3320      	adds	r3, #32
 80030fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003100:	f3bf 8f4f 	dsb	sy
}
 8003104:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003106:	f3bf 8f6f 	isb	sy
}
 800310a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0a      	blt.n	8003146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	490c      	ldr	r1, [pc, #48]	@ (8003168 <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	440b      	add	r3, r1
 8003140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003144:	e00a      	b.n	800315c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4908      	ldr	r1, [pc, #32]	@ (800316c <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	440b      	add	r3, r1
 800315a:	761a      	strb	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000e100 	.word	0xe000e100
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	@ 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f1c3 0307 	rsb	r3, r3, #7
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf28      	it	cs
 800318e:	2304      	movcs	r3, #4
 8003190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <NVIC_EncodePriority+0x30>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3b03      	subs	r3, #3
 800319e:	e000      	b.n	80031a2 <NVIC_EncodePriority+0x32>
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43d9      	mvns	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	4313      	orrs	r3, r2
         );
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	@ 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff ff28 	bl	8003034 <__NVIC_SetPriorityGrouping>
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031fe:	f7ff ff3d 	bl	800307c <__NVIC_GetPriorityGrouping>
 8003202:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	6978      	ldr	r0, [r7, #20]
 800320a:	f7ff ffb1 	bl	8003170 <NVIC_EncodePriority>
 800320e:	4602      	mov	r2, r0
 8003210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff80 	bl	800311c <__NVIC_SetPriority>
}
 800321c:	bf00      	nop
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ff30 	bl	8003098 <__NVIC_EnableIRQ>
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff40 	bl	80030d4 <__NVIC_DisableIRQ>
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e054      	b.n	8003318 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7f5b      	ldrb	r3, [r3, #29]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe f8fc 	bl	800147c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	791b      	ldrb	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10c      	bne.n	80032ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a22      	ldr	r2, [pc, #136]	@ (8003320 <HAL_CRC_Init+0xc4>)
 8003298:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0218 	bic.w	r2, r2, #24
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	e00c      	b.n	80032c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	461a      	mov	r2, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f94c 	bl	8003554 <HAL_CRCEx_Polynomial_Set>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e028      	b.n	8003318 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	795b      	ldrb	r3, [r3, #5]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d105      	bne.n	80032da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f04f 32ff 	mov.w	r2, #4294967295
 80032d6:	611a      	str	r2, [r3, #16]
 80032d8:	e004      	b.n	80032e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6912      	ldr	r2, [r2, #16]
 80032e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	04c11db7 	.word	0x04c11db7

08003324 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2202      	movs	r2, #2
 8003338:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0201 	orr.w	r2, r2, #1
 8003348:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d006      	beq.n	8003360 <HAL_CRC_Calculate+0x3c>
 8003352:	2b03      	cmp	r3, #3
 8003354:	d829      	bhi.n	80033aa <HAL_CRC_Calculate+0x86>
 8003356:	2b01      	cmp	r3, #1
 8003358:	d019      	beq.n	800338e <HAL_CRC_Calculate+0x6a>
 800335a:	2b02      	cmp	r3, #2
 800335c:	d01e      	beq.n	800339c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800335e:	e024      	b.n	80033aa <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	e00a      	b.n	800337c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	441a      	add	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	3301      	adds	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	429a      	cmp	r2, r3
 8003382:	d3f0      	bcc.n	8003366 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	613b      	str	r3, [r7, #16]
      break;
 800338c:	e00e      	b.n	80033ac <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f812 	bl	80033bc <CRC_Handle_8>
 8003398:	6138      	str	r0, [r7, #16]
      break;
 800339a:	e007      	b.n	80033ac <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f89d 	bl	80034e0 <CRC_Handle_16>
 80033a6:	6138      	str	r0, [r7, #16]
      break;
 80033a8:	e000      	b.n	80033ac <HAL_CRC_Calculate+0x88>
      break;
 80033aa:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80033b2:	693b      	ldr	r3, [r7, #16]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	@ 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	e023      	b.n	8003416 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	4413      	add	r3, r2
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	3301      	adds	r3, #1
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	440b      	add	r3, r1
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80033e8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	440b      	add	r3, r1
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80033f8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	3303      	adds	r3, #3
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	440b      	add	r3, r1
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800340c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800340e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	3301      	adds	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	429a      	cmp	r2, r3
 800341e:	d3d6      	bcc.n	80033ce <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d051      	beq.n	80034ce <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d108      	bne.n	8003446 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	4413      	add	r3, r2
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	7013      	strb	r3, [r2, #0]
 8003444:	e043      	b.n	80034ce <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d118      	bne.n	8003482 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	4413      	add	r3, r2
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	b21b      	sxth	r3, r3
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	b21a      	sxth	r2, r3
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	3301      	adds	r3, #1
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	440b      	add	r3, r1
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b21b      	sxth	r3, r3
 800346e:	4313      	orrs	r3, r2
 8003470:	b21b      	sxth	r3, r3
 8003472:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	8b7a      	ldrh	r2, [r7, #26]
 800347e:	801a      	strh	r2, [r3, #0]
 8003480:	e025      	b.n	80034ce <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b03      	cmp	r3, #3
 800348a:	d120      	bne.n	80034ce <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	4413      	add	r3, r2
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b21b      	sxth	r3, r3
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	b21a      	sxth	r2, r3
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	3301      	adds	r3, #1
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	440b      	add	r3, r1
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b21b      	sxth	r3, r3
 80034aa:	4313      	orrs	r3, r2
 80034ac:	b21b      	sxth	r3, r3
 80034ae:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	8b7a      	ldrh	r2, [r7, #26]
 80034ba:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	3302      	adds	r3, #2
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	4413      	add	r3, r2
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3724      	adds	r7, #36	@ 0x24
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e013      	b.n	800351a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	4413      	add	r3, r2
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	041a      	lsls	r2, r3, #16
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	440b      	add	r3, r1
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	4619      	mov	r1, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3301      	adds	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	429a      	cmp	r2, r3
 8003522:	d3e6      	bcc.n	80034f2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	4413      	add	r3, r2
 800353c:	881a      	ldrh	r2, [r3, #0]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003564:	231f      	movs	r3, #31
 8003566:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	75fb      	strb	r3, [r7, #23]
 8003576:	e063      	b.n	8003640 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003578:	bf00      	nop
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1e5a      	subs	r2, r3, #1
 800357e:	613a      	str	r2, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <HAL_CRCEx_Polynomial_Set+0x44>
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b18      	cmp	r3, #24
 800359c:	d846      	bhi.n	800362c <HAL_CRCEx_Polynomial_Set+0xd8>
 800359e:	a201      	add	r2, pc, #4	@ (adr r2, 80035a4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a4:	08003633 	.word	0x08003633
 80035a8:	0800362d 	.word	0x0800362d
 80035ac:	0800362d 	.word	0x0800362d
 80035b0:	0800362d 	.word	0x0800362d
 80035b4:	0800362d 	.word	0x0800362d
 80035b8:	0800362d 	.word	0x0800362d
 80035bc:	0800362d 	.word	0x0800362d
 80035c0:	0800362d 	.word	0x0800362d
 80035c4:	08003621 	.word	0x08003621
 80035c8:	0800362d 	.word	0x0800362d
 80035cc:	0800362d 	.word	0x0800362d
 80035d0:	0800362d 	.word	0x0800362d
 80035d4:	0800362d 	.word	0x0800362d
 80035d8:	0800362d 	.word	0x0800362d
 80035dc:	0800362d 	.word	0x0800362d
 80035e0:	0800362d 	.word	0x0800362d
 80035e4:	08003615 	.word	0x08003615
 80035e8:	0800362d 	.word	0x0800362d
 80035ec:	0800362d 	.word	0x0800362d
 80035f0:	0800362d 	.word	0x0800362d
 80035f4:	0800362d 	.word	0x0800362d
 80035f8:	0800362d 	.word	0x0800362d
 80035fc:	0800362d 	.word	0x0800362d
 8003600:	0800362d 	.word	0x0800362d
 8003604:	08003609 	.word	0x08003609
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b06      	cmp	r3, #6
 800360c:	d913      	bls.n	8003636 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003612:	e010      	b.n	8003636 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b07      	cmp	r3, #7
 8003618:	d90f      	bls.n	800363a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800361e:	e00c      	b.n	800363a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b0f      	cmp	r3, #15
 8003624:	d90b      	bls.n	800363e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800362a:	e008      	b.n	800363e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	75fb      	strb	r3, [r7, #23]
        break;
 8003630:	e006      	b.n	8003640 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003632:	bf00      	nop
 8003634:	e004      	b.n	8003640 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003636:	bf00      	nop
 8003638:	e002      	b.n	8003640 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800363e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10d      	bne.n	8003662 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f023 0118 	bic.w	r1, r3, #24
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	430a      	orrs	r2, r1
 8003660:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003662:	7dfb      	ldrb	r3, [r7, #23]
}
 8003664:	4618      	mov	r0, r3
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e014      	b.n	80036ac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	791b      	ldrb	r3, [r3, #4]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd ff12 	bl	80014bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e046      	b.n	8003756 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	795b      	ldrb	r3, [r3, #5]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_DAC_Start+0x20>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e040      	b.n	8003756 <HAL_DAC_Start+0xa2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2201      	movs	r2, #1
 80036ee:	409a      	lsls	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10f      	bne.n	800371e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003708:	2b3c      	cmp	r3, #60	@ 0x3c
 800370a:	d11d      	bne.n	8003748 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	e014      	b.n	8003748 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	213c      	movs	r1, #60	@ 0x3c
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	429a      	cmp	r2, r3
 8003736:	d107      	bne.n	8003748 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0202 	orr.w	r2, r2, #2
 8003746:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003778:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01d      	beq.n	80037c0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d018      	beq.n	80037c0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2204      	movs	r2, #4
 8003792:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f043 0201 	orr.w	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037b8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f851 	bl	8003862 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01d      	beq.n	8003806 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d018      	beq.n	8003806 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2204      	movs	r2, #4
 80037d8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f043 0202 	orr.w	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80037ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80037fe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f891 	bl	8003928 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800380e:	b480      	push	{r7}
 8003810:	b087      	sub	sp, #28
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e015      	b.n	8003856 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	3308      	adds	r3, #8
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e004      	b.n	800384c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	3314      	adds	r3, #20
 800384a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	461a      	mov	r2, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003876:	b480      	push	{r7}
 8003878:	b089      	sub	sp, #36	@ 0x24
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_DAC_ConfigChannel+0x1c>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e042      	b.n	800391c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	795b      	ldrb	r3, [r3, #5]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_DAC_ConfigChannel+0x2c>
 800389e:	2302      	movs	r3, #2
 80038a0:	e03c      	b.n	800391c <HAL_DAC_ConfigChannel+0xa6>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2202      	movs	r2, #2
 80038ac:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	22c0      	movs	r2, #192	@ 0xc0
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43da      	mvns	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	400a      	ands	r2, r1
 800390c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800391a:	7ffb      	ldrb	r3, [r7, #31]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3724      	adds	r7, #36	@ 0x24
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003948:	f7fe fe64 	bl	8002614 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e099      	b.n	8003a8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003978:	e00f      	b.n	800399a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800397a:	f7fe fe4b 	bl	8002614 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b05      	cmp	r3, #5
 8003986:	d908      	bls.n	800399a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2203      	movs	r2, #3
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e078      	b.n	8003a8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e8      	bne.n	800397a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4b38      	ldr	r3, [pc, #224]	@ (8003a94 <HAL_DMA_Init+0x158>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d107      	bne.n	8003a04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	4313      	orrs	r3, r2
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0307 	bic.w	r3, r3, #7
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d117      	bne.n	8003a5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00e      	beq.n	8003a5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fb81 	bl	8004148 <DMA_CheckFifoParam>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2240      	movs	r2, #64	@ 0x40
 8003a50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e016      	b.n	8003a8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fb38 	bl	80040dc <DMA_CalcBaseAndBitshift>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a74:	223f      	movs	r2, #63	@ 0x3f
 8003a76:	409a      	lsls	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	f010803f 	.word	0xf010803f

08003a98 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e050      	b.n	8003b4c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d101      	bne.n	8003aba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e048      	b.n	8003b4c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2221      	movs	r2, #33	@ 0x21
 8003af8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 faee 	bl	80040dc <DMA_CalcBaseAndBitshift>
 8003b00:	4603      	mov	r3, r0
 8003b02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b08:	223f      	movs	r2, #63	@ 0x3f
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_DMA_Start_IT+0x26>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e048      	b.n	8003c0c <HAL_DMA_Start_IT+0xb8>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d137      	bne.n	8003bfe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2202      	movs	r2, #2
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fa6c 	bl	8004080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bac:	223f      	movs	r2, #63	@ 0x3f
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0216 	orr.w	r2, r2, #22
 8003bc2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bd2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0208 	orr.w	r2, r2, #8
 8003bea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	e005      	b.n	8003c0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
 8003c08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c22:	f7fe fcf7 	bl	8002614 <HAL_GetTick>
 8003c26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d008      	beq.n	8003c46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2280      	movs	r2, #128	@ 0x80
 8003c38:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e052      	b.n	8003cec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0216 	bic.w	r2, r2, #22
 8003c54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <HAL_DMA_Abort+0x62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0208 	bic.w	r2, r2, #8
 8003c84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c96:	e013      	b.n	8003cc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c98:	f7fe fcbc 	bl	8002614 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d90c      	bls.n	8003cc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e015      	b.n	8003cec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e4      	bne.n	8003c98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd2:	223f      	movs	r2, #63	@ 0x3f
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d004      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2280      	movs	r2, #128	@ 0x80
 8003d0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e00c      	b.n	8003d2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2205      	movs	r2, #5
 8003d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0201 	bic.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003d44:	4b8e      	ldr	r3, [pc, #568]	@ (8003f80 <HAL_DMA_IRQHandler+0x248>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a8e      	ldr	r2, [pc, #568]	@ (8003f84 <HAL_DMA_IRQHandler+0x24c>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0a9b      	lsrs	r3, r3, #10
 8003d50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d62:	2208      	movs	r2, #8
 8003d64:	409a      	lsls	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01a      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0204 	bic.w	r2, r2, #4
 8003d8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d90:	2208      	movs	r2, #8
 8003d92:	409a      	lsls	r2, r3
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da8:	2201      	movs	r2, #1
 8003daa:	409a      	lsls	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d012      	beq.n	8003dda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd2:	f043 0202 	orr.w	r2, r3, #2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dde:	2204      	movs	r2, #4
 8003de0:	409a      	lsls	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d012      	beq.n	8003e10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00b      	beq.n	8003e10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e08:	f043 0204 	orr.w	r2, r3, #4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e14:	2210      	movs	r2, #16
 8003e16:	409a      	lsls	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d043      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d03c      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e32:	2210      	movs	r2, #16
 8003e34:	409a      	lsls	r2, r3
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d018      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d108      	bne.n	8003e68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d024      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
 8003e66:	e01f      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01b      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
 8003e78:	e016      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d107      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0208 	bic.w	r2, r2, #8
 8003e96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eac:	2220      	movs	r2, #32
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 808f 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8087 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ece:	2220      	movs	r2, #32
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b05      	cmp	r3, #5
 8003ee0:	d136      	bne.n	8003f50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0216 	bic.w	r2, r2, #22
 8003ef0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_DMA_IRQHandler+0x1da>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0208 	bic.w	r2, r2, #8
 8003f20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f26:	223f      	movs	r2, #63	@ 0x3f
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d07e      	beq.n	8004044 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	4798      	blx	r3
        }
        return;
 8003f4e:	e079      	b.n	8004044 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01d      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10d      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d031      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
 8003f7c:	e02c      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x2a0>
 8003f7e:	bf00      	nop
 8003f80:	20000000 	.word	0x20000000
 8003f84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d023      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
 8003f98:	e01e      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10f      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0210 	bic.w	r2, r2, #16
 8003fb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d032      	beq.n	8004046 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d022      	beq.n	8004032 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2205      	movs	r2, #5
 8003ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	3301      	adds	r3, #1
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	429a      	cmp	r2, r3
 800400e:	d307      	bcc.n	8004020 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f2      	bne.n	8004004 <HAL_DMA_IRQHandler+0x2cc>
 800401e:	e000      	b.n	8004022 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004020:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	4798      	blx	r3
 8004042:	e000      	b.n	8004046 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004044:	bf00      	nop
    }
  }
}
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800405a:	b2db      	uxtb	r3, r3
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800409c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b40      	cmp	r3, #64	@ 0x40
 80040ac:	d108      	bne.n	80040c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040be:	e007      	b.n	80040d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	3b10      	subs	r3, #16
 80040ec:	4a13      	ldr	r2, [pc, #76]	@ (800413c <DMA_CalcBaseAndBitshift+0x60>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040f6:	4a12      	ldr	r2, [pc, #72]	@ (8004140 <DMA_CalcBaseAndBitshift+0x64>)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d908      	bls.n	800411c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <DMA_CalcBaseAndBitshift+0x68>)
 8004112:	4013      	ands	r3, r2
 8004114:	1d1a      	adds	r2, r3, #4
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	659a      	str	r2, [r3, #88]	@ 0x58
 800411a:	e006      	b.n	800412a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	4b08      	ldr	r3, [pc, #32]	@ (8004144 <DMA_CalcBaseAndBitshift+0x68>)
 8004124:	4013      	ands	r3, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	aaaaaaab 	.word	0xaaaaaaab
 8004140:	08021b70 	.word	0x08021b70
 8004144:	fffffc00 	.word	0xfffffc00

08004148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11f      	bne.n	80041a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d856      	bhi.n	8004216 <DMA_CheckFifoParam+0xce>
 8004168:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <DMA_CheckFifoParam+0x28>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004181 	.word	0x08004181
 8004174:	08004193 	.word	0x08004193
 8004178:	08004181 	.word	0x08004181
 800417c:	08004217 	.word	0x08004217
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d046      	beq.n	800421a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004190:	e043      	b.n	800421a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800419a:	d140      	bne.n	800421e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a0:	e03d      	b.n	800421e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041aa:	d121      	bne.n	80041f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d837      	bhi.n	8004222 <DMA_CheckFifoParam+0xda>
 80041b2:	a201      	add	r2, pc, #4	@ (adr r2, 80041b8 <DMA_CheckFifoParam+0x70>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041cf 	.word	0x080041cf
 80041c0:	080041c9 	.word	0x080041c9
 80041c4:	080041e1 	.word	0x080041e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e030      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d025      	beq.n	8004226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041de:	e022      	b.n	8004226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041e8:	d11f      	bne.n	800422a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041ee:	e01c      	b.n	800422a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d903      	bls.n	80041fe <DMA_CheckFifoParam+0xb6>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d003      	beq.n	8004204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041fc:	e018      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
      break;
 8004202:	e015      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00e      	beq.n	800422e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e00b      	b.n	800422e <DMA_CheckFifoParam+0xe6>
      break;
 8004216:	bf00      	nop
 8004218:	e00a      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800421a:	bf00      	nop
 800421c:	e008      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800421e:	bf00      	nop
 8004220:	e006      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 8004222:	bf00      	nop
 8004224:	e004      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 8004226:	bf00      	nop
 8004228:	e002      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;   
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800422e:	bf00      	nop
    }
  } 
  
  return status; 
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop

08004240 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e086      	b.n	8004360 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004258:	2b00      	cmp	r3, #0
 800425a:	d106      	bne.n	800426a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f009 fd9b 	bl	800dda0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800426a:	4b3f      	ldr	r3, [pc, #252]	@ (8004368 <HAL_ETH_Init+0x128>)
 800426c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426e:	4a3e      	ldr	r2, [pc, #248]	@ (8004368 <HAL_ETH_Init+0x128>)
 8004270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004274:	6453      	str	r3, [r2, #68]	@ 0x44
 8004276:	4b3c      	ldr	r3, [pc, #240]	@ (8004368 <HAL_ETH_Init+0x128>)
 8004278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004282:	4b3a      	ldr	r3, [pc, #232]	@ (800436c <HAL_ETH_Init+0x12c>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	4a39      	ldr	r2, [pc, #228]	@ (800436c <HAL_ETH_Init+0x12c>)
 8004288:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800428c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800428e:	4b37      	ldr	r3, [pc, #220]	@ (800436c <HAL_ETH_Init+0x12c>)
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4935      	ldr	r1, [pc, #212]	@ (800436c <HAL_ETH_Init+0x12c>)
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800429c:	4b33      	ldr	r3, [pc, #204]	@ (800436c <HAL_ETH_Init+0x12c>)
 800429e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042b8:	f7fe f9ac 	bl	8002614 <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80042be:	e011      	b.n	80042e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80042c0:	f7fe f9a8 	bl	8002614 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80042ce:	d909      	bls.n	80042e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2204      	movs	r2, #4
 80042d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	22e0      	movs	r2, #224	@ 0xe0
 80042dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e03d      	b.n	8004360 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e4      	bne.n	80042c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 ff5c 	bl	80051b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 f807 	bl	8005310 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f001 f85d 	bl	80053c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	461a      	mov	r2, r3
 800430e:	2100      	movs	r1, #0
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 ffc5 	bl	80052a0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004324:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b0f      	ldr	r3, [pc, #60]	@ (8004370 <HAL_ETH_Init+0x130>)
 8004334:	430b      	orrs	r3, r1
 8004336:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800434a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2210      	movs	r2, #16
 800435a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40023800 	.word	0x40023800
 800436c:	40013800 	.word	0x40013800
 8004370:	00020060 	.word	0x00020060

08004374 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004382:	2b10      	cmp	r3, #16
 8004384:	d15f      	bne.n	8004446 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2204      	movs	r2, #4
 8004398:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f9f6 	bl	800478c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80043a8:	2001      	movs	r0, #1
 80043aa:	f7fe f93f 	bl	800262c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80043c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043cc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043e4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fd80 	bl	8004eec <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0208 	orr.w	r2, r2, #8
 80043fa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004404:	2001      	movs	r0, #1
 8004406:	f7fe f911 	bl	800262c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0204 	orr.w	r2, r2, #4
 8004420:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800442a:	69d9      	ldr	r1, [r3, #28]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4b07      	ldr	r3, [pc, #28]	@ (8004450 <HAL_ETH_Start_IT+0xdc>)
 8004432:	430b      	orrs	r3, r1
 8004434:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004438:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2240      	movs	r2, #64	@ 0x40
 800443e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	e000      	b.n	8004448 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
  }
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	0001a0c1 	.word	0x0001a0c1

08004454 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004462:	2b40      	cmp	r3, #64	@ 0x40
 8004464:	d16e      	bne.n	8004544 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004476:	69d9      	ldr	r1, [r3, #28]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	4b34      	ldr	r3, [pc, #208]	@ (8004550 <HAL_ETH_Stop_IT+0xfc>)
 800447e:	400b      	ands	r3, r1
 8004480:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004484:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004498:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800449c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	f023 0302 	bic.w	r3, r3, #2
 80044b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044b4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0204 	bic.w	r2, r2, #4
 80044c4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044ce:	2001      	movs	r0, #1
 80044d0:	f7fe f8ac 	bl	800262c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fd05 	bl	8004eec <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0208 	bic.w	r2, r2, #8
 80044f0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044fa:	2001      	movs	r0, #1
 80044fc:	f7fe f896 	bl	800262c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	e00e      	b.n	800452c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	3212      	adds	r2, #18
 8004514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004518:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	3301      	adds	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d9ed      	bls.n	800450e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2210      	movs	r2, #16
 800453c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	fffe5f3e 	.word	0xfffe5f3e

08004554 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e045      	b.n	8004604 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800457e:	2b40      	cmp	r3, #64	@ 0x40
 8004580:	d13f      	bne.n	8004602 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800458a:	2201      	movs	r2, #1
 800458c:	6839      	ldr	r1, [r7, #0]
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 ff86 	bl	80054a0 <ETH_Prepare_Tx_Descriptors>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a0:	f043 0202 	orr.w	r2, r3, #2
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e02a      	b.n	8004604 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80045ae:	f3bf 8f4f 	dsb	sy
}
 80045b2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d904      	bls.n	80045d0 <HAL_ETH_Transmit_IT+0x7c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ca:	1f1a      	subs	r2, r3, #4
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ea:	461a      	mov	r2, r3
 80045ec:	2304      	movs	r3, #4
 80045ee:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045f8:	461a      	mov	r2, r3
 80045fa:	2300      	movs	r3, #0
 80045fc:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
  }
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462a:	f043 0201 	orr.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0a4      	b.n	8004782 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800463e:	2b40      	cmp	r3, #64	@ 0x40
 8004640:	d001      	beq.n	8004646 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e09d      	b.n	8004782 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	3212      	adds	r2, #18
 8004652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004656:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800465c:	f1c3 0304 	rsb	r3, r3, #4
 8004660:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004662:	e066      	b.n	8004732 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	699a      	ldr	r2, [r3, #24]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004688:	2b00      	cmp	r3, #0
 800468a:	d103      	bne.n	8004694 <HAL_ETH_ReadData+0x88>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d03c      	beq.n	800470e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80046b6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80046cc:	2301      	movs	r3, #1
 80046ce:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046e8:	461a      	mov	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f009 fd2b 	bl	800e148 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	441a      	add	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2200      	movs	r2, #0
 800470c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3301      	adds	r3, #1
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d902      	bls.n	8004720 <HAL_ETH_ReadData+0x114>
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	3b04      	subs	r3, #4
 800471e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	3212      	adds	r2, #18
 8004726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800472a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	3301      	adds	r3, #1
 8004730:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004736:	2b00      	cmp	r3, #0
 8004738:	db06      	blt.n	8004748 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	429a      	cmp	r2, r3
 8004740:	d202      	bcs.n	8004748 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d08d      	beq.n	8004664 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	441a      	add	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f815 	bl	800478c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d108      	bne.n	8004780 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	e000      	b.n	8004782 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004798:	2301      	movs	r3, #1
 800479a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047a0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	3212      	adds	r2, #18
 80047a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ac:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80047b4:	e042      	b.n	800483c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d112      	bne.n	80047e4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80047be:	f107 0308 	add.w	r3, r7, #8
 80047c2:	4618      	mov	r0, r3
 80047c4:	f009 fc90 	bl	800e0e8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	74fb      	strb	r3, [r7, #19]
 80047d2:	e007      	b.n	80047e4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	461a      	mov	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	461a      	mov	r2, r3
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d028      	beq.n	800483c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	4b26      	ldr	r3, [pc, #152]	@ (8004890 <ETH_UpdateDescriptor+0x104>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	6053      	str	r3, [r2, #4]
 80047fe:	e005      	b.n	800480c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	3301      	adds	r3, #1
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d902      	bls.n	800482a <ETH_UpdateDescriptor+0x9e>
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	3b04      	subs	r3, #4
 8004828:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	3212      	adds	r2, #18
 8004830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004834:	617b      	str	r3, [r7, #20]
      desccount--;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	3b01      	subs	r3, #1
 800483a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <ETH_UpdateDescriptor+0xbc>
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1b6      	bne.n	80047b6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	429a      	cmp	r2, r3
 8004850:	d01a      	beq.n	8004888 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3303      	adds	r3, #3
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800485c:	f3bf 8f5f 	dmb	sy
}
 8004860:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6919      	ldr	r1, [r3, #16]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	18ca      	adds	r2, r1, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800487a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004888:	bf00      	nop
 800488a:	3720      	adds	r7, #32
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	80004000 	.word	0x80004000

08004894 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3318      	adds	r3, #24
 80048a0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ac:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80048b2:	e047      	b.n	8004944 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	3304      	adds	r3, #4
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10a      	bne.n	80048e4 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3301      	adds	r3, #1
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d902      	bls.n	80048e0 <HAL_ETH_ReleaseTxPacket+0x4c>
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3b04      	subs	r3, #4
 80048de:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80048e4:	7bbb      	ldrb	r3, [r7, #14]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d02c      	beq.n	8004944 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68d9      	ldr	r1, [r3, #12]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	440b      	add	r3, r1
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	db1f      	blt.n	8004940 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	3304      	adds	r3, #4
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4618      	mov	r0, r3
 800490e:	f009 fc5d 	bl	800e1cc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	3304      	adds	r3, #4
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	2200      	movs	r2, #0
 800491e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	3301      	adds	r3, #1
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d902      	bls.n	8004932 <HAL_ETH_ReleaseTxPacket+0x9e>
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	3b04      	subs	r3, #4
 8004930:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800493e:	e001      	b.n	8004944 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_ETH_ReleaseTxPacket+0xbc>
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1b1      	bne.n	80048b4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004984:	4b4b      	ldr	r3, [pc, #300]	@ (8004ab4 <HAL_ETH_IRQHandler+0x158>)
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00e      	beq.n	80049b2 <HAL_ETH_IRQHandler+0x56>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049a6:	461a      	mov	r2, r3
 80049a8:	4b43      	ldr	r3, [pc, #268]	@ (8004ab8 <HAL_ETH_IRQHandler+0x15c>)
 80049aa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f008 ff37 	bl	800d820 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00f      	beq.n	80049dc <HAL_ETH_IRQHandler+0x80>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ce:	461a      	mov	r2, r3
 80049d0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80049d4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f008 ff32 	bl	800d840 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d042      	beq.n	8004a6c <HAL_ETH_IRQHandler+0x110>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d03d      	beq.n	8004a6c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f6:	f043 0208 	orr.w	r2, r3, #8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01a      	beq.n	8004a40 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	4b29      	ldr	r3, [pc, #164]	@ (8004abc <HAL_ETH_IRQHandler+0x160>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004a30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a34:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	22e0      	movs	r2, #224	@ 0xe0
 8004a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004a3e:	e012      	b.n	8004a66 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004a4e:	4013      	ands	r3, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004a64:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f008 fefa 	bl	800d860 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00e      	beq.n	8004a94 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f81a 	bl	8004ac0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d006      	beq.n	8004aac <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004a9e:	4b05      	ldr	r3, [pc, #20]	@ (8004ab4 <HAL_ETH_IRQHandler+0x158>)
 8004aa0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004aa4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f814 	bl	8004ad4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004aac:	bf00      	nop
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40013c00 	.word	0x40013c00
 8004ab8:	00010040 	.word	0x00010040
 8004abc:	007e2000 	.word	0x007e2000

08004ac0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 031c 	and.w	r3, r3, #28
 8004b04:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	02db      	lsls	r3, r3, #11
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	019b      	lsls	r3, r3, #6
 8004b16:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0302 	bic.w	r3, r3, #2
 8004b26:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004b38:	f7fd fd6c 	bl	8002614 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b3e:	e00d      	b.n	8004b5c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004b40:	f7fd fd68 	bl	8002614 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b4e:	d301      	bcc.n	8004b54 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e010      	b.n	8004b76 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1ec      	bne.n	8004b40 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f003 031c 	and.w	r3, r3, #28
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	02db      	lsls	r3, r3, #11
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	019b      	lsls	r3, r3, #6
 8004bac:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f043 0302 	orr.w	r3, r3, #2
 8004bbc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd8:	f7fd fd1c 	bl	8002614 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004bde:	e00d      	b.n	8004bfc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004be0:	f7fd fd18 	bl	8002614 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bee:	d301      	bcc.n	8004bf4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e009      	b.n	8004c08 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1ec      	bne.n	8004be0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0e6      	b.n	8004df2 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf14      	ite	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	2300      	moveq	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf0c      	ite	eq
 8004ce2:	2301      	moveq	r3, #1
 8004ce4:	2300      	movne	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf0c      	ite	eq
 8004cfc:	2301      	moveq	r3, #1
 8004cfe:	2300      	movne	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf14      	ite	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	2300      	moveq	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bf14      	ite	ne
 8004d3e:	2301      	movne	r3, #1
 8004d40:	2300      	moveq	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	461a      	mov	r2, r3
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf0c      	ite	eq
 8004d8e:	2301      	moveq	r3, #1
 8004d90:	2300      	movne	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	0c1b      	lsrs	r3, r3, #16
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bf14      	ite	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	2300      	moveq	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e00b      	b.n	8004e2a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d105      	bne.n	8004e28 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f88a 	bl	8004f38 <ETH_SetMACConfig>

    return HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e000      	b.n	8004e2a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 031c 	bic.w	r3, r3, #28
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e4c:	f003 fd92 	bl	8008974 <HAL_RCC_GetHCLKFreq>
 8004e50:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a14      	ldr	r2, [pc, #80]	@ (8004ea8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d804      	bhi.n	8004e64 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f043 0308 	orr.w	r3, r3, #8
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e019      	b.n	8004e98 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4a11      	ldr	r2, [pc, #68]	@ (8004eac <HAL_ETH_SetMDIOClockRange+0x78>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d204      	bcs.n	8004e76 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f043 030c 	orr.w	r3, r3, #12
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e010      	b.n	8004e98 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d90c      	bls.n	8004e98 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d804      	bhi.n	8004e90 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f043 0304 	orr.w	r3, r3, #4
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e003      	b.n	8004e98 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f043 0310 	orr.w	r3, r3, #16
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	611a      	str	r2, [r3, #16]
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	02160ebf 	.word	0x02160ebf
 8004eac:	03938700 	.word	0x03938700
 8004eb0:	05f5e0ff 	.word	0x05f5e0ff
 8004eb4:	08f0d17f 	.word	0x08f0d17f

08004eb8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f0e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	f7fd fb85 	bl	800262c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f2c:	6193      	str	r3, [r2, #24]
}
 8004f2e:	bf00      	nop
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4b53      	ldr	r3, [pc, #332]	@ (800509c <ETH_SetMACConfig+0x164>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	7b9b      	ldrb	r3, [r3, #14]
 8004f56:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	7c12      	ldrb	r2, [r2, #16]
 8004f5c:	2a00      	cmp	r2, #0
 8004f5e:	d102      	bne.n	8004f66 <ETH_SetMACConfig+0x2e>
 8004f60:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f64:	e000      	b.n	8004f68 <ETH_SetMACConfig+0x30>
 8004f66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f68:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	7c52      	ldrb	r2, [r2, #17]
 8004f6e:	2a00      	cmp	r2, #0
 8004f70:	d102      	bne.n	8004f78 <ETH_SetMACConfig+0x40>
 8004f72:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004f76:	e000      	b.n	8004f7a <ETH_SetMACConfig+0x42>
 8004f78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f7a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f80:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	7fdb      	ldrb	r3, [r3, #31]
 8004f86:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004f88:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	7f92      	ldrb	r2, [r2, #30]
 8004f94:	2a00      	cmp	r2, #0
 8004f96:	d102      	bne.n	8004f9e <ETH_SetMACConfig+0x66>
 8004f98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f9c:	e000      	b.n	8004fa0 <ETH_SetMACConfig+0x68>
 8004f9e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004fa0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	7f1b      	ldrb	r3, [r3, #28]
 8004fa6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004fa8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004fae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	791b      	ldrb	r3, [r3, #4]
 8004fb4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004fb6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	d102      	bne.n	8004fc8 <ETH_SetMACConfig+0x90>
 8004fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fc6:	e000      	b.n	8004fca <ETH_SetMACConfig+0x92>
 8004fc8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004fca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	7bdb      	ldrb	r3, [r3, #15]
 8004fd0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004fd2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004fd8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fe0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f7fd fb16 	bl	800262c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005016:	4013      	ands	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800501e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005026:	2a00      	cmp	r2, #0
 8005028:	d101      	bne.n	800502e <ETH_SetMACConfig+0xf6>
 800502a:	2280      	movs	r2, #128	@ 0x80
 800502c:	e000      	b.n	8005030 <ETH_SetMACConfig+0xf8>
 800502e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005030:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005036:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800503e:	2a01      	cmp	r2, #1
 8005040:	d101      	bne.n	8005046 <ETH_SetMACConfig+0x10e>
 8005042:	2208      	movs	r2, #8
 8005044:	e000      	b.n	8005048 <ETH_SetMACConfig+0x110>
 8005046:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005048:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005050:	2a01      	cmp	r2, #1
 8005052:	d101      	bne.n	8005058 <ETH_SetMACConfig+0x120>
 8005054:	2204      	movs	r2, #4
 8005056:	e000      	b.n	800505a <ETH_SetMACConfig+0x122>
 8005058:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800505a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005062:	2a01      	cmp	r2, #1
 8005064:	d101      	bne.n	800506a <ETH_SetMACConfig+0x132>
 8005066:	2202      	movs	r2, #2
 8005068:	e000      	b.n	800506c <ETH_SetMACConfig+0x134>
 800506a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800506c:	4313      	orrs	r3, r2
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005084:	2001      	movs	r0, #1
 8005086:	f7fd fad1 	bl	800262c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	619a      	str	r2, [r3, #24]
}
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	fd20810f 	.word	0xfd20810f

080050a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4b3d      	ldr	r3, [pc, #244]	@ (80051b0 <ETH_SetDMAConfig+0x110>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	7b1b      	ldrb	r3, [r3, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d102      	bne.n	80050cc <ETH_SetDMAConfig+0x2c>
 80050c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80050ca:	e000      	b.n	80050ce <ETH_SetDMAConfig+0x2e>
 80050cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	7b5b      	ldrb	r3, [r3, #13]
 80050d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80050d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	7f52      	ldrb	r2, [r2, #29]
 80050da:	2a00      	cmp	r2, #0
 80050dc:	d102      	bne.n	80050e4 <ETH_SetDMAConfig+0x44>
 80050de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80050e2:	e000      	b.n	80050e6 <ETH_SetDMAConfig+0x46>
 80050e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80050e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	7b9b      	ldrb	r3, [r3, #14]
 80050ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80050ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80050f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	7f1b      	ldrb	r3, [r3, #28]
 80050fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80050fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	7f9b      	ldrb	r3, [r3, #30]
 8005102:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005104:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800510a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005112:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005114:	4313      	orrs	r3, r2
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005124:	461a      	mov	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005136:	2001      	movs	r0, #1
 8005138:	f7fd fa78 	bl	800262c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005144:	461a      	mov	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	791b      	ldrb	r3, [r3, #4]
 800514e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005154:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800515a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005160:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005168:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800516a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005170:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005172:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005178:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005182:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005186:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005194:	2001      	movs	r0, #1
 8005196:	f7fd fa49 	bl	800262c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051a2:	461a      	mov	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6013      	str	r3, [r2, #0]
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	f8de3f23 	.word	0xf8de3f23

080051b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b0a6      	sub	sp, #152	@ 0x98
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80051c8:	2300      	movs	r3, #0
 80051ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80051d8:	2300      	movs	r3, #0
 80051da:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80051f6:	2300      	movs	r3, #0
 80051f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005200:	2300      	movs	r3, #0
 8005202:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005204:	2300      	movs	r3, #0
 8005206:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800520a:	2300      	movs	r3, #0
 800520c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005210:	2300      	movs	r3, #0
 8005212:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005216:	2300      	movs	r3, #0
 8005218:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800521c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005220:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005222:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800522e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff fe7f 	bl	8004f38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800523a:	2301      	movs	r3, #1
 800523c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800523e:	2301      	movs	r3, #1
 8005240:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005248:	2301      	movs	r3, #1
 800524a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800524c:	2300      	movs	r3, #0
 800524e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005250:	2300      	movs	r3, #0
 8005252:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005256:	2300      	movs	r3, #0
 8005258:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800525c:	2300      	movs	r3, #0
 800525e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005266:	2301      	movs	r3, #1
 8005268:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800526a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800526e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005270:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005274:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800527a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005282:	2300      	movs	r3, #0
 8005284:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800528a:	f107 0308 	add.w	r3, r7, #8
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ff05 	bl	80050a0 <ETH_SetDMAConfig>
}
 8005296:	bf00      	nop
 8005298:	3798      	adds	r7, #152	@ 0x98
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3305      	adds	r3, #5
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	3204      	adds	r2, #4
 80052b8:	7812      	ldrb	r2, [r2, #0]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	4b11      	ldr	r3, [pc, #68]	@ (8005308 <ETH_MACAddressConfig+0x68>)
 80052c2:	4413      	add	r3, r2
 80052c4:	461a      	mov	r2, r3
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3303      	adds	r3, #3
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	061a      	lsls	r2, r3, #24
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3302      	adds	r3, #2
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	041b      	lsls	r3, r3, #16
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3301      	adds	r3, #1
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	4313      	orrs	r3, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	7812      	ldrb	r2, [r2, #0]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	4b06      	ldr	r3, [pc, #24]	@ (800530c <ETH_MACAddressConfig+0x6c>)
 80052f2:	4413      	add	r3, r2
 80052f4:	461a      	mov	r2, r3
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	6013      	str	r3, [r2, #0]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40028040 	.word	0x40028040
 800530c:	40028044 	.word	0x40028044

08005310 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	e03e      	b.n	800539c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68d9      	ldr	r1, [r3, #12]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	440b      	add	r3, r1
 800532e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2200      	movs	r2, #0
 800533a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2200      	movs	r2, #0
 8005340:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	3206      	adds	r2, #6
 8005350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d80c      	bhi.n	8005380 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68d9      	ldr	r1, [r3, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	440b      	add	r3, r1
 8005378:	461a      	mov	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	e004      	b.n	800538a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	461a      	mov	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3301      	adds	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d9bd      	bls.n	800531e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053b4:	611a      	str	r2, [r3, #16]
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	e048      	b.n	8005462 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6919      	ldr	r1, [r3, #16]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	440b      	add	r3, r1
 80053e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2200      	movs	r2, #0
 80053ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2200      	movs	r2, #0
 80053f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2200      	movs	r2, #0
 80053fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2200      	movs	r2, #0
 8005404:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800540c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	3212      	adds	r2, #18
 800542e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d80c      	bhi.n	8005452 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6919      	ldr	r1, [r3, #16]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	440b      	add	r3, r1
 800544a:	461a      	mov	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	60da      	str	r2, [r3, #12]
 8005450:	e004      	b.n	800545c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	461a      	mov	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3301      	adds	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d9b3      	bls.n	80053d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005492:	60da      	str	r2, [r3, #12]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b091      	sub	sp, #68	@ 0x44
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3318      	adds	r3, #24
 80054b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ca:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80054d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054e2:	d007      	beq.n	80054f4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80054e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e8:	3304      	adds	r3, #4
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80054f4:	2302      	movs	r3, #2
 80054f6:	e111      	b.n	800571c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80054f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fa:	3301      	adds	r3, #1
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80054fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005506:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	4b86      	ldr	r3, [pc, #536]	@ (8005728 <ETH_Prepare_Tx_Descriptors+0x288>)
 800550e:	4013      	ands	r3, r2
 8005510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005512:	6852      	ldr	r2, [r2, #4]
 8005514:	431a      	orrs	r2, r3
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	431a      	orrs	r2, r3
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b00      	cmp	r3, #0
 8005542:	d008      	beq.n	8005556 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	431a      	orrs	r2, r3
 8005552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005554:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005578:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800557a:	e082      	b.n	8005682 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d006      	beq.n	800559c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e005      	b.n	80055a8 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80055a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80055a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055aa:	3301      	adds	r3, #1
 80055ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d902      	bls.n	80055ba <ETH_Prepare_Tx_Descriptors+0x11a>
 80055b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b6:	3b04      	subs	r3, #4
 80055b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055d0:	d007      	beq.n	80055e2 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80055d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d6:	3304      	adds	r3, #4
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d029      	beq.n	8005636 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80055f0:	2300      	movs	r3, #0
 80055f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055f4:	e019      	b.n	800562a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80055f6:	f3bf 8f5f 	dmb	sy
}
 80055fa:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560a:	3301      	adds	r3, #1
 800560c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800560e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005610:	2b03      	cmp	r3, #3
 8005612:	d902      	bls.n	800561a <ETH_Prepare_Tx_Descriptors+0x17a>
 8005614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005616:	3b04      	subs	r3, #4
 8005618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800561e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005622:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	3301      	adds	r3, #1
 8005628:	63bb      	str	r3, [r7, #56]	@ 0x38
 800562a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800562c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562e:	429a      	cmp	r2, r3
 8005630:	d3e1      	bcc.n	80055f6 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8005632:	2302      	movs	r3, #2
 8005634:	e072      	b.n	800571c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8005642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005644:	3301      	adds	r3, #1
 8005646:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800564e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	4b32      	ldr	r3, [pc, #200]	@ (8005728 <ETH_Prepare_Tx_Descriptors+0x288>)
 800565e:	4013      	ands	r3, r2
 8005660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005662:	6852      	ldr	r2, [r2, #4]
 8005664:	431a      	orrs	r2, r3
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800566a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566c:	3301      	adds	r3, #1
 800566e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005670:	f3bf 8f5f 	dmb	sy
}
 8005674:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f47f af78 	bne.w	800557c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d006      	beq.n	80056a0 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800569a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e005      	b.n	80056ac <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80056a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056aa:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80056ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	6a3a      	ldr	r2, [r7, #32]
 80056bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80056c2:	f3bf 8f5f 	dmb	sy
}
 80056c6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80056c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056dc:	3304      	adds	r3, #4
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056e8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ea:	f3ef 8310 	mrs	r3, PRIMASK
 80056ee:	613b      	str	r3, [r7, #16]
  return(result);
 80056f0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	2301      	movs	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f383 8810 	msr	PRIMASK, r3
}
 80056fe:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	4413      	add	r3, r2
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	629a      	str	r2, [r3, #40]	@ 0x28
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f383 8810 	msr	PRIMASK, r3
}
 8005718:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3744      	adds	r7, #68	@ 0x44
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	ffffe000 	.word	0xffffe000

0800572c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800572c:	b480      	push	{r7}
 800572e:	b089      	sub	sp, #36	@ 0x24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800573e:	2300      	movs	r3, #0
 8005740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005742:	2300      	movs	r3, #0
 8005744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005746:	2300      	movs	r3, #0
 8005748:	61fb      	str	r3, [r7, #28]
 800574a:	e175      	b.n	8005a38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800574c:	2201      	movs	r2, #1
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4013      	ands	r3, r2
 800575e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	429a      	cmp	r2, r3
 8005766:	f040 8164 	bne.w	8005a32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	2b01      	cmp	r3, #1
 8005774:	d005      	beq.n	8005782 <HAL_GPIO_Init+0x56>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d130      	bne.n	80057e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	2203      	movs	r2, #3
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057b8:	2201      	movs	r2, #1
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	43db      	mvns	r3, r3
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4013      	ands	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	f003 0201 	and.w	r2, r3, #1
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4313      	orrs	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d017      	beq.n	8005820 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	2203      	movs	r2, #3
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4313      	orrs	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d123      	bne.n	8005874 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	08da      	lsrs	r2, r3, #3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3208      	adds	r2, #8
 8005834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	220f      	movs	r2, #15
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4313      	orrs	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	08da      	lsrs	r2, r3, #3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3208      	adds	r2, #8
 800586e:	69b9      	ldr	r1, [r7, #24]
 8005870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	2203      	movs	r2, #3
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	43db      	mvns	r3, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4013      	ands	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 0203 	and.w	r2, r3, #3
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4313      	orrs	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80be 	beq.w	8005a32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058b6:	4b66      	ldr	r3, [pc, #408]	@ (8005a50 <HAL_GPIO_Init+0x324>)
 80058b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ba:	4a65      	ldr	r2, [pc, #404]	@ (8005a50 <HAL_GPIO_Init+0x324>)
 80058bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80058c2:	4b63      	ldr	r3, [pc, #396]	@ (8005a50 <HAL_GPIO_Init+0x324>)
 80058c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80058ce:	4a61      	ldr	r2, [pc, #388]	@ (8005a54 <HAL_GPIO_Init+0x328>)
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	089b      	lsrs	r3, r3, #2
 80058d4:	3302      	adds	r3, #2
 80058d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	220f      	movs	r2, #15
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	43db      	mvns	r3, r3
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4013      	ands	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a58      	ldr	r2, [pc, #352]	@ (8005a58 <HAL_GPIO_Init+0x32c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d037      	beq.n	800596a <HAL_GPIO_Init+0x23e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a57      	ldr	r2, [pc, #348]	@ (8005a5c <HAL_GPIO_Init+0x330>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d031      	beq.n	8005966 <HAL_GPIO_Init+0x23a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a56      	ldr	r2, [pc, #344]	@ (8005a60 <HAL_GPIO_Init+0x334>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d02b      	beq.n	8005962 <HAL_GPIO_Init+0x236>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a55      	ldr	r2, [pc, #340]	@ (8005a64 <HAL_GPIO_Init+0x338>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d025      	beq.n	800595e <HAL_GPIO_Init+0x232>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a54      	ldr	r2, [pc, #336]	@ (8005a68 <HAL_GPIO_Init+0x33c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01f      	beq.n	800595a <HAL_GPIO_Init+0x22e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a53      	ldr	r2, [pc, #332]	@ (8005a6c <HAL_GPIO_Init+0x340>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d019      	beq.n	8005956 <HAL_GPIO_Init+0x22a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a52      	ldr	r2, [pc, #328]	@ (8005a70 <HAL_GPIO_Init+0x344>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_GPIO_Init+0x226>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a51      	ldr	r2, [pc, #324]	@ (8005a74 <HAL_GPIO_Init+0x348>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00d      	beq.n	800594e <HAL_GPIO_Init+0x222>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a50      	ldr	r2, [pc, #320]	@ (8005a78 <HAL_GPIO_Init+0x34c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <HAL_GPIO_Init+0x21e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a4f      	ldr	r2, [pc, #316]	@ (8005a7c <HAL_GPIO_Init+0x350>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d101      	bne.n	8005946 <HAL_GPIO_Init+0x21a>
 8005942:	2309      	movs	r3, #9
 8005944:	e012      	b.n	800596c <HAL_GPIO_Init+0x240>
 8005946:	230a      	movs	r3, #10
 8005948:	e010      	b.n	800596c <HAL_GPIO_Init+0x240>
 800594a:	2308      	movs	r3, #8
 800594c:	e00e      	b.n	800596c <HAL_GPIO_Init+0x240>
 800594e:	2307      	movs	r3, #7
 8005950:	e00c      	b.n	800596c <HAL_GPIO_Init+0x240>
 8005952:	2306      	movs	r3, #6
 8005954:	e00a      	b.n	800596c <HAL_GPIO_Init+0x240>
 8005956:	2305      	movs	r3, #5
 8005958:	e008      	b.n	800596c <HAL_GPIO_Init+0x240>
 800595a:	2304      	movs	r3, #4
 800595c:	e006      	b.n	800596c <HAL_GPIO_Init+0x240>
 800595e:	2303      	movs	r3, #3
 8005960:	e004      	b.n	800596c <HAL_GPIO_Init+0x240>
 8005962:	2302      	movs	r3, #2
 8005964:	e002      	b.n	800596c <HAL_GPIO_Init+0x240>
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <HAL_GPIO_Init+0x240>
 800596a:	2300      	movs	r3, #0
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	f002 0203 	and.w	r2, r2, #3
 8005972:	0092      	lsls	r2, r2, #2
 8005974:	4093      	lsls	r3, r2
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4313      	orrs	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800597c:	4935      	ldr	r1, [pc, #212]	@ (8005a54 <HAL_GPIO_Init+0x328>)
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	089b      	lsrs	r3, r3, #2
 8005982:	3302      	adds	r3, #2
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800598a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a80 <HAL_GPIO_Init+0x354>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	43db      	mvns	r3, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4013      	ands	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059ae:	4a34      	ldr	r2, [pc, #208]	@ (8005a80 <HAL_GPIO_Init+0x354>)
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059b4:	4b32      	ldr	r3, [pc, #200]	@ (8005a80 <HAL_GPIO_Init+0x354>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	43db      	mvns	r3, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059d8:	4a29      	ldr	r2, [pc, #164]	@ (8005a80 <HAL_GPIO_Init+0x354>)
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059de:	4b28      	ldr	r3, [pc, #160]	@ (8005a80 <HAL_GPIO_Init+0x354>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	43db      	mvns	r3, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4013      	ands	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a02:	4a1f      	ldr	r2, [pc, #124]	@ (8005a80 <HAL_GPIO_Init+0x354>)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a08:	4b1d      	ldr	r3, [pc, #116]	@ (8005a80 <HAL_GPIO_Init+0x354>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	43db      	mvns	r3, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4013      	ands	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a2c:	4a14      	ldr	r2, [pc, #80]	@ (8005a80 <HAL_GPIO_Init+0x354>)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3301      	adds	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b0f      	cmp	r3, #15
 8005a3c:	f67f ae86 	bls.w	800574c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	3724      	adds	r7, #36	@ 0x24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40023800 	.word	0x40023800
 8005a54:	40013800 	.word	0x40013800
 8005a58:	40020000 	.word	0x40020000
 8005a5c:	40020400 	.word	0x40020400
 8005a60:	40020800 	.word	0x40020800
 8005a64:	40020c00 	.word	0x40020c00
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	40021400 	.word	0x40021400
 8005a70:	40021800 	.word	0x40021800
 8005a74:	40021c00 	.word	0x40021c00
 8005a78:	40022000 	.word	0x40022000
 8005a7c:	40022400 	.word	0x40022400
 8005a80:	40013c00 	.word	0x40013c00

08005a84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e0d9      	b.n	8005c54 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	f040 80c9 	bne.w	8005c4e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005abc:	4a6b      	ldr	r2, [pc, #428]	@ (8005c6c <HAL_GPIO_DeInit+0x1e8>)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	089b      	lsrs	r3, r3, #2
 8005ac2:	3302      	adds	r3, #2
 8005ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	220f      	movs	r2, #15
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a63      	ldr	r2, [pc, #396]	@ (8005c70 <HAL_GPIO_DeInit+0x1ec>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d037      	beq.n	8005b56 <HAL_GPIO_DeInit+0xd2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a62      	ldr	r2, [pc, #392]	@ (8005c74 <HAL_GPIO_DeInit+0x1f0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d031      	beq.n	8005b52 <HAL_GPIO_DeInit+0xce>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a61      	ldr	r2, [pc, #388]	@ (8005c78 <HAL_GPIO_DeInit+0x1f4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d02b      	beq.n	8005b4e <HAL_GPIO_DeInit+0xca>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a60      	ldr	r2, [pc, #384]	@ (8005c7c <HAL_GPIO_DeInit+0x1f8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d025      	beq.n	8005b4a <HAL_GPIO_DeInit+0xc6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a5f      	ldr	r2, [pc, #380]	@ (8005c80 <HAL_GPIO_DeInit+0x1fc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01f      	beq.n	8005b46 <HAL_GPIO_DeInit+0xc2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a5e      	ldr	r2, [pc, #376]	@ (8005c84 <HAL_GPIO_DeInit+0x200>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d019      	beq.n	8005b42 <HAL_GPIO_DeInit+0xbe>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a5d      	ldr	r2, [pc, #372]	@ (8005c88 <HAL_GPIO_DeInit+0x204>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_GPIO_DeInit+0xba>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a5c      	ldr	r2, [pc, #368]	@ (8005c8c <HAL_GPIO_DeInit+0x208>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00d      	beq.n	8005b3a <HAL_GPIO_DeInit+0xb6>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a5b      	ldr	r2, [pc, #364]	@ (8005c90 <HAL_GPIO_DeInit+0x20c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d007      	beq.n	8005b36 <HAL_GPIO_DeInit+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a5a      	ldr	r2, [pc, #360]	@ (8005c94 <HAL_GPIO_DeInit+0x210>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d101      	bne.n	8005b32 <HAL_GPIO_DeInit+0xae>
 8005b2e:	2309      	movs	r3, #9
 8005b30:	e012      	b.n	8005b58 <HAL_GPIO_DeInit+0xd4>
 8005b32:	230a      	movs	r3, #10
 8005b34:	e010      	b.n	8005b58 <HAL_GPIO_DeInit+0xd4>
 8005b36:	2308      	movs	r3, #8
 8005b38:	e00e      	b.n	8005b58 <HAL_GPIO_DeInit+0xd4>
 8005b3a:	2307      	movs	r3, #7
 8005b3c:	e00c      	b.n	8005b58 <HAL_GPIO_DeInit+0xd4>
 8005b3e:	2306      	movs	r3, #6
 8005b40:	e00a      	b.n	8005b58 <HAL_GPIO_DeInit+0xd4>
 8005b42:	2305      	movs	r3, #5
 8005b44:	e008      	b.n	8005b58 <HAL_GPIO_DeInit+0xd4>
 8005b46:	2304      	movs	r3, #4
 8005b48:	e006      	b.n	8005b58 <HAL_GPIO_DeInit+0xd4>
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e004      	b.n	8005b58 <HAL_GPIO_DeInit+0xd4>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e002      	b.n	8005b58 <HAL_GPIO_DeInit+0xd4>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <HAL_GPIO_DeInit+0xd4>
 8005b56:	2300      	movs	r3, #0
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	f002 0203 	and.w	r2, r2, #3
 8005b5e:	0092      	lsls	r2, r2, #2
 8005b60:	4093      	lsls	r3, r2
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d132      	bne.n	8005bce <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005b68:	4b4b      	ldr	r3, [pc, #300]	@ (8005c98 <HAL_GPIO_DeInit+0x214>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	4949      	ldr	r1, [pc, #292]	@ (8005c98 <HAL_GPIO_DeInit+0x214>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005b76:	4b48      	ldr	r3, [pc, #288]	@ (8005c98 <HAL_GPIO_DeInit+0x214>)
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	4946      	ldr	r1, [pc, #280]	@ (8005c98 <HAL_GPIO_DeInit+0x214>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005b84:	4b44      	ldr	r3, [pc, #272]	@ (8005c98 <HAL_GPIO_DeInit+0x214>)
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	4942      	ldr	r1, [pc, #264]	@ (8005c98 <HAL_GPIO_DeInit+0x214>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005b92:	4b41      	ldr	r3, [pc, #260]	@ (8005c98 <HAL_GPIO_DeInit+0x214>)
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	493f      	ldr	r1, [pc, #252]	@ (8005c98 <HAL_GPIO_DeInit+0x214>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	220f      	movs	r2, #15
 8005baa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8005c6c <HAL_GPIO_DeInit+0x1e8>)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	089b      	lsrs	r3, r3, #2
 8005bb6:	3302      	adds	r3, #2
 8005bb8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	43da      	mvns	r2, r3
 8005bc0:	482a      	ldr	r0, [pc, #168]	@ (8005c6c <HAL_GPIO_DeInit+0x1e8>)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	089b      	lsrs	r3, r3, #2
 8005bc6:	400a      	ands	r2, r1
 8005bc8:	3302      	adds	r3, #2
 8005bca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	2103      	movs	r1, #3
 8005bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	401a      	ands	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	08da      	lsrs	r2, r3, #3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3208      	adds	r2, #8
 8005bec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	220f      	movs	r2, #15
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	08d2      	lsrs	r2, r2, #3
 8005c04:	4019      	ands	r1, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3208      	adds	r2, #8
 8005c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	2103      	movs	r1, #3
 8005c18:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	401a      	ands	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	2101      	movs	r1, #1
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c30:	43db      	mvns	r3, r3
 8005c32:	401a      	ands	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	2103      	movs	r1, #3
 8005c42:	fa01 f303 	lsl.w	r3, r1, r3
 8005c46:	43db      	mvns	r3, r3
 8005c48:	401a      	ands	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	3301      	adds	r3, #1
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b0f      	cmp	r3, #15
 8005c58:	f67f af22 	bls.w	8005aa0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40013800 	.word	0x40013800
 8005c70:	40020000 	.word	0x40020000
 8005c74:	40020400 	.word	0x40020400
 8005c78:	40020800 	.word	0x40020800
 8005c7c:	40020c00 	.word	0x40020c00
 8005c80:	40021000 	.word	0x40021000
 8005c84:	40021400 	.word	0x40021400
 8005c88:	40021800 	.word	0x40021800
 8005c8c:	40021c00 	.word	0x40021c00
 8005c90:	40022000 	.word	0x40022000
 8005c94:	40022400 	.word	0x40022400
 8005c98:	40013c00 	.word	0x40013c00

08005c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	807b      	strh	r3, [r7, #2]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cac:	787b      	ldrb	r3, [r7, #1]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cb2:	887a      	ldrh	r2, [r7, #2]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005cb8:	e003      	b.n	8005cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005cba:	887b      	ldrh	r3, [r7, #2]
 8005cbc:	041a      	lsls	r2, r3, #16
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	619a      	str	r2, [r3, #24]
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ce0:	887a      	ldrh	r2, [r7, #2]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	041a      	lsls	r2, r3, #16
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	43d9      	mvns	r1, r3
 8005cec:	887b      	ldrh	r3, [r7, #2]
 8005cee:	400b      	ands	r3, r1
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	619a      	str	r2, [r3, #24]
}
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d0e:	4b08      	ldr	r3, [pc, #32]	@ (8005d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	4013      	ands	r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d1a:	4a05      	ldr	r2, [pc, #20]	@ (8005d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f806 	bl	8005d34 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40013c00 	.word	0x40013c00

08005d34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
	...

08005d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e08b      	b.n	8005e76 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fb fbea 	bl	800154c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2224      	movs	r2, #36	@ 0x24
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d107      	bne.n	8005dc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	e006      	b.n	8005dd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d108      	bne.n	8005dee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dea:	605a      	str	r2, [r3, #4]
 8005dec:	e007      	b.n	8005dfe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6859      	ldr	r1, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	4b1d      	ldr	r3, [pc, #116]	@ (8005e80 <HAL_I2C_Init+0x134>)
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69d9      	ldr	r1, [r3, #28]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	02008000 	.word	0x02008000

08005e84 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e021      	b.n	8005eda <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2224      	movs	r2, #36	@ 0x24
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fb fc78 	bl	80017a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	@ 0x28
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	817b      	strh	r3, [r7, #10]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	f040 80ef 	bne.w	80060e8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f18:	d101      	bne.n	8005f1e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e0e5      	b.n	80060ea <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_I2C_Master_Transmit_DMA+0x48>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e0de      	b.n	80060ea <HAL_I2C_Master_Transmit_DMA+0x206>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2221      	movs	r2, #33	@ 0x21
 8005f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2210      	movs	r2, #16
 8005f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	893a      	ldrh	r2, [r7, #8]
 8005f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4a66      	ldr	r2, [pc, #408]	@ (80060f4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a66      	ldr	r2, [pc, #408]	@ (80060f8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005f60:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2bff      	cmp	r3, #255	@ 0xff
 8005f6a:	d906      	bls.n	8005f7a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	22ff      	movs	r2, #255	@ 0xff
 8005f70:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005f72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	e007      	b.n	8005f8a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005f84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f88:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01a      	beq.n	8005fc8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f96:	781a      	ldrb	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fac:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d074      	beq.n	80060ba <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d022      	beq.n	800601e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fdc:	4a47      	ldr	r2, [pc, #284]	@ (80060fc <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005fde:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe4:	4a46      	ldr	r2, [pc, #280]	@ (8006100 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005fe6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	2200      	movs	r2, #0
 8005fee:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006008:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800600e:	f7fd fda1 	bl	8003b54 <HAL_DMA_Start_IT>
 8006012:	4603      	mov	r3, r0
 8006014:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d13a      	bne.n	8006092 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800601c:	e013      	b.n	8006046 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006032:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e051      	b.n	80060ea <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800604a:	b2db      	uxtb	r3, r3
 800604c:	3301      	adds	r3, #1
 800604e:	b2da      	uxtb	r2, r3
 8006050:	8979      	ldrh	r1, [r7, #10]
 8006052:	4b2c      	ldr	r3, [pc, #176]	@ (8006104 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f001 fcff 	bl	8007a5c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006078:	2110      	movs	r1, #16
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f001 fd20 	bl	8007ac0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e028      	b.n	80060e4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a6:	f043 0210 	orr.w	r2, r3, #16
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e017      	b.n	80060ea <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4a12      	ldr	r2, [pc, #72]	@ (8006108 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80060be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	8979      	ldrh	r1, [r7, #10]
 80060c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006104 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f001 fcc4 	bl	8007a5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060dc:	2101      	movs	r1, #1
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f001 fcee 	bl	8007ac0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	e000      	b.n	80060ea <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80060e8:	2302      	movs	r3, #2
  }
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	ffff0000 	.word	0xffff0000
 80060f8:	080068a3 	.word	0x080068a3
 80060fc:	080078cf 	.word	0x080078cf
 8006100:	080079ab 	.word	0x080079ab
 8006104:	80002000 	.word	0x80002000
 8006108:	08006417 	.word	0x08006417

0800610c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	4613      	mov	r3, r2
 8006118:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b20      	cmp	r3, #32
 8006124:	f040 809b 	bne.w	800625e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_I2C_Slave_Receive_DMA+0x28>
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800613a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e08f      	b.n	8006260 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_I2C_Slave_Receive_DMA+0x42>
 800614a:	2302      	movs	r3, #2
 800614c:	e088      	b.n	8006260 <HAL_I2C_Slave_Receive_DMA+0x154>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2222      	movs	r2, #34	@ 0x22
 800615a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	88fa      	ldrh	r2, [r7, #6]
 8006176:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a38      	ldr	r2, [pc, #224]	@ (8006268 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8006186:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4a38      	ldr	r2, [pc, #224]	@ (800626c <HAL_I2C_Slave_Receive_DMA+0x160>)
 800618c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d020      	beq.n	80061d8 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619a:	4a35      	ldr	r2, [pc, #212]	@ (8006270 <HAL_I2C_Slave_Receive_DMA+0x164>)
 800619c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a2:	4a34      	ldr	r2, [pc, #208]	@ (8006274 <HAL_I2C_Slave_Receive_DMA+0x168>)
 80061a4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061aa:	2200      	movs	r2, #0
 80061ac:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b2:	2200      	movs	r2, #0
 80061b4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3324      	adds	r3, #36	@ 0x24
 80061c0:	4619      	mov	r1, r3
 80061c2:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80061c8:	f7fd fcc4 	bl	8003b54 <HAL_DMA_Start_IT>
 80061cc:	4603      	mov	r3, r0
 80061ce:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d12f      	bne.n	8006236 <HAL_I2C_Slave_Receive_DMA+0x12a>
 80061d6:	e013      	b.n	8006200 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2228      	movs	r2, #40	@ 0x28
 80061dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e02f      	b.n	8006260 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800620e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006218:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f001 fc4f 	bl	8007ac0 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006230:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e014      	b.n	8006260 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2228      	movs	r2, #40	@ 0x28
 800623a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624a:	f043 0210 	orr.w	r2, r3, #16
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800625e:	2302      	movs	r3, #2
  }
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	ffff0000 	.word	0xffff0000
 800626c:	08006d45 	.word	0x08006d45
 8006270:	08007965 	.word	0x08007965
 8006274:	080079ab 	.word	0x080079ab

08006278 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	68f9      	ldr	r1, [r7, #12]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
  }
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	0a1b      	lsrs	r3, r3, #8
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d010      	beq.n	80062f2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	09db      	lsrs	r3, r3, #7
 80062d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e0:	f043 0201 	orr.w	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	0a9b      	lsrs	r3, r3, #10
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d010      	beq.n	8006320 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	09db      	lsrs	r3, r3, #7
 8006302:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630e:	f043 0208 	orr.w	r2, r3, #8
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800631e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	0a5b      	lsrs	r3, r3, #9
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d010      	beq.n	800634e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	09db      	lsrs	r3, r3, #7
 8006330:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633c:	f043 0202 	orr.w	r2, r3, #2
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800634c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006352:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f003 030b 	and.w	r3, r3, #11
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 f979 	bl	8007658 <I2C_ITError>
  }
}
 8006366:	bf00      	nop
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	460b      	mov	r3, r1
 80063a0:	70fb      	strb	r3, [r7, #3]
 80063a2:	4613      	mov	r3, r2
 80063a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b088      	sub	sp, #32
 800641a:	af02      	add	r7, sp, #8
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <I2C_Master_ISR_IT+0x1e>
 8006430:	2302      	movs	r3, #2
 8006432:	e12e      	b.n	8006692 <I2C_Master_ISR_IT+0x27c>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	091b      	lsrs	r3, r3, #4
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d013      	beq.n	8006470 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	091b      	lsrs	r3, r3, #4
 800644c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00d      	beq.n	8006470 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2210      	movs	r2, #16
 800645a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006460:	f043 0204 	orr.w	r2, r3, #4
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f001 fa0c 	bl	8007886 <I2C_Flush_TXDR>
 800646e:	e0fb      	b.n	8006668 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	089b      	lsrs	r3, r3, #2
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d023      	beq.n	80064c4 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	089b      	lsrs	r3, r3, #2
 8006480:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01d      	beq.n	80064c4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f023 0304 	bic.w	r3, r3, #4
 800648e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80064c2:	e0d1      	b.n	8006668 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	099b      	lsrs	r3, r3, #6
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d12a      	bne.n	8006526 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d024      	beq.n	8006526 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01e      	beq.n	8006526 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80ba 	beq.w	8006668 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f8:	781a      	ldrb	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006524:	e0a0      	b.n	8006668 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	09db      	lsrs	r3, r3, #7
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d06b      	beq.n	800660a <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	099b      	lsrs	r3, r3, #6
 8006536:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800653a:	2b00      	cmp	r3, #0
 800653c:	d065      	beq.n	800660a <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d04e      	beq.n	80065e6 <I2C_Master_ISR_IT+0x1d0>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	d14a      	bne.n	80065e6 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	b29b      	uxth	r3, r3
 8006558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800655c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	2bff      	cmp	r3, #255	@ 0xff
 8006566:	d91c      	bls.n	80065a2 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	0c1b      	lsrs	r3, r3, #16
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b01      	cmp	r3, #1
 800657a:	d103      	bne.n	8006584 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2201      	movs	r2, #1
 8006580:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006582:	e002      	b.n	800658a <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	22ff      	movs	r2, #255	@ 0xff
 8006588:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800658e:	b2da      	uxtb	r2, r3
 8006590:	8a79      	ldrh	r1, [r7, #18]
 8006592:	2300      	movs	r3, #0
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f001 fa5e 	bl	8007a5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065a0:	e032      	b.n	8006608 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065b4:	d00b      	beq.n	80065ce <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ba:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80065c0:	8a79      	ldrh	r1, [r7, #18]
 80065c2:	2000      	movs	r0, #0
 80065c4:	9000      	str	r0, [sp, #0]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f001 fa48 	bl	8007a5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065cc:	e01c      	b.n	8006608 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	8a79      	ldrh	r1, [r7, #18]
 80065d6:	2300      	movs	r3, #0
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f001 fa3c 	bl	8007a5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065e4:	e010      	b.n	8006608 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065f4:	d003      	beq.n	80065fe <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fd09 	bl	800700e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065fc:	e034      	b.n	8006668 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065fe:	2140      	movs	r1, #64	@ 0x40
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f001 f829 	bl	8007658 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006606:	e02f      	b.n	8006668 <I2C_Master_ISR_IT+0x252>
 8006608:	e02e      	b.n	8006668 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	099b      	lsrs	r3, r3, #6
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d028      	beq.n	8006668 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	099b      	lsrs	r3, r3, #6
 800661a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800661e:	2b00      	cmp	r3, #0
 8006620:	d022      	beq.n	8006668 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d119      	bne.n	8006660 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800663a:	d015      	beq.n	8006668 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006644:	d108      	bne.n	8006658 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006654:	605a      	str	r2, [r3, #4]
 8006656:	e007      	b.n	8006668 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 fcd8 	bl	800700e <I2C_ITMasterSeqCplt>
 800665e:	e003      	b.n	8006668 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006660:	2140      	movs	r1, #64	@ 0x40
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fff8 	bl	8007658 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	095b      	lsrs	r3, r3, #5
 8006678:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006680:	6979      	ldr	r1, [r7, #20]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fd5e 	bl	8007144 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <I2C_Slave_ISR_IT+0x24>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e0ed      	b.n	800689a <I2C_Slave_ISR_IT+0x200>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d004      	beq.n	80066e8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80066de:	6939      	ldr	r1, [r7, #16]
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 fdf9 	bl	80072d8 <I2C_ITSlaveCplt>
 80066e6:	e0d3      	b.n	8006890 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d04d      	beq.n	8006790 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	091b      	lsrs	r3, r3, #4
 80066f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d047      	beq.n	8006790 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d128      	bne.n	800675c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b28      	cmp	r3, #40	@ 0x28
 8006714:	d108      	bne.n	8006728 <I2C_Slave_ISR_IT+0x8e>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800671c:	d104      	bne.n	8006728 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800671e:	6939      	ldr	r1, [r7, #16]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 ff43 	bl	80075ac <I2C_ITListenCplt>
 8006726:	e032      	b.n	800678e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b29      	cmp	r3, #41	@ 0x29
 8006732:	d10e      	bne.n	8006752 <I2C_Slave_ISR_IT+0xb8>
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800673a:	d00a      	beq.n	8006752 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2210      	movs	r2, #16
 8006742:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f001 f89e 	bl	8007886 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fc9c 	bl	8007088 <I2C_ITSlaveSeqCplt>
 8006750:	e01d      	b.n	800678e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2210      	movs	r2, #16
 8006758:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800675a:	e096      	b.n	800688a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2210      	movs	r2, #16
 8006762:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006768:	f043 0204 	orr.w	r2, r3, #4
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <I2C_Slave_ISR_IT+0xe6>
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800677c:	f040 8085 	bne.w	800688a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006784:	4619      	mov	r1, r3
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 ff66 	bl	8007658 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800678c:	e07d      	b.n	800688a <I2C_Slave_ISR_IT+0x1f0>
 800678e:	e07c      	b.n	800688a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	089b      	lsrs	r3, r3, #2
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d030      	beq.n	80067fe <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d02a      	beq.n	80067fe <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d018      	beq.n	80067e4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d14f      	bne.n	800688e <I2C_Slave_ISR_IT+0x1f4>
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067f4:	d04b      	beq.n	800688e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fc46 	bl	8007088 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80067fc:	e047      	b.n	800688e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	08db      	lsrs	r3, r3, #3
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	08db      	lsrs	r3, r3, #3
 800680e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006812:	2b00      	cmp	r3, #0
 8006814:	d004      	beq.n	8006820 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006816:	6939      	ldr	r1, [r7, #16]
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fb74 	bl	8006f06 <I2C_ITAddrCplt>
 800681e:	e037      	b.n	8006890 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d031      	beq.n	8006890 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	085b      	lsrs	r3, r3, #1
 8006830:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006834:	2b00      	cmp	r3, #0
 8006836:	d02b      	beq.n	8006890 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d018      	beq.n	8006874 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006846:	781a      	ldrb	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006872:	e00d      	b.n	8006890 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800687a:	d002      	beq.n	8006882 <I2C_Slave_ISR_IT+0x1e8>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 fc00 	bl	8007088 <I2C_ITSlaveSeqCplt>
 8006888:	e002      	b.n	8006890 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800688a:	bf00      	nop
 800688c:	e000      	b.n	8006890 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800688e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b088      	sub	sp, #32
 80068a6:	af02      	add	r7, sp, #8
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <I2C_Master_ISR_DMA+0x1a>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e0f0      	b.n	8006a9e <I2C_Master_ISR_DMA+0x1fc>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	091b      	lsrs	r3, r3, #4
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d017      	beq.n	8006900 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	091b      	lsrs	r3, r3, #4
 80068d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d011      	beq.n	8006900 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2210      	movs	r2, #16
 80068e2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e8:	f043 0204 	orr.w	r2, r3, #4
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80068f0:	2120      	movs	r1, #32
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f001 f8e4 	bl	8007ac0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 ffc4 	bl	8007886 <I2C_Flush_TXDR>
 80068fe:	e0c9      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	09db      	lsrs	r3, r3, #7
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8081 	beq.w	8006a10 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	099b      	lsrs	r3, r3, #6
 8006912:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006916:	2b00      	cmp	r3, #0
 8006918:	d07a      	beq.n	8006a10 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006928:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d05c      	beq.n	80069ee <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006940:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006946:	b29b      	uxth	r3, r3
 8006948:	2bff      	cmp	r3, #255	@ 0xff
 800694a:	d914      	bls.n	8006976 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	b2db      	uxtb	r3, r3
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b01      	cmp	r3, #1
 800695e:	d103      	bne.n	8006968 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006966:	e002      	b.n	800696e <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	22ff      	movs	r2, #255	@ 0xff
 800696c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800696e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	e010      	b.n	8006998 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006988:	d003      	beq.n	8006992 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e002      	b.n	8006998 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006996:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800699c:	b2da      	uxtb	r2, r3
 800699e:	8a79      	ldrh	r1, [r7, #18]
 80069a0:	2300      	movs	r3, #0
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f001 f858 	bl	8007a5c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b22      	cmp	r3, #34	@ 0x22
 80069c8:	d108      	bne.n	80069dc <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069da:	e05b      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069ec:	e052      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069fc:	d003      	beq.n	8006a06 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fb05 	bl	800700e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006a04:	e046      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a06:	2140      	movs	r1, #64	@ 0x40
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fe25 	bl	8007658 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006a0e:	e041      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	099b      	lsrs	r3, r3, #6
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d029      	beq.n	8006a70 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	099b      	lsrs	r3, r3, #6
 8006a20:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d023      	beq.n	8006a70 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d119      	bne.n	8006a66 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a40:	d027      	beq.n	8006a92 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a46:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a4a:	d108      	bne.n	8006a5e <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a5a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006a5c:	e019      	b.n	8006a92 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 fad5 	bl	800700e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006a64:	e015      	b.n	8006a92 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a66:	2140      	movs	r1, #64	@ 0x40
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 fdf5 	bl	8007658 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a6e:	e010      	b.n	8006a92 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	095b      	lsrs	r3, r3, #5
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fb5a 	bl	8007144 <I2C_ITMasterCplt>
 8006a90:	e000      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8006a92:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006ab4:	4b94      	ldr	r3, [pc, #592]	@ (8006d08 <I2C_Mem_ISR_DMA+0x260>)
 8006ab6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <I2C_Mem_ISR_DMA+0x1e>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e139      	b.n	8006d3a <I2C_Mem_ISR_DMA+0x292>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d017      	beq.n	8006b0a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	091b      	lsrs	r3, r3, #4
 8006ade:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d011      	beq.n	8006b0a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2210      	movs	r2, #16
 8006aec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af2:	f043 0204 	orr.w	r2, r3, #4
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006afa:	2120      	movs	r1, #32
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 ffdf 	bl	8007ac0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 febf 	bl	8007886 <I2C_Flush_TXDR>
 8006b08:	e112      	b.n	8006d30 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00f      	beq.n	8006b36 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b32:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b34:	e0fc      	b.n	8006d30 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	09db      	lsrs	r3, r3, #7
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d06e      	beq.n	8006c20 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	099b      	lsrs	r3, r3, #6
 8006b46:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d068      	beq.n	8006c20 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b4e:	2101      	movs	r1, #1
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f001 f839 	bl	8007bc8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006b56:	2110      	movs	r1, #16
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 ffb1 	bl	8007ac0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d056      	beq.n	8006c16 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2bff      	cmp	r3, #255	@ 0xff
 8006b70:	d91e      	bls.n	8006bb0 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	0c1b      	lsrs	r3, r3, #16
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d103      	bne.n	8006b8e <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006b8c:	e002      	b.n	8006b94 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	22ff      	movs	r2, #255	@ 0xff
 8006b92:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b98:	b299      	uxth	r1, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 ff57 	bl	8007a5c <I2C_TransferConfig>
 8006bae:	e011      	b.n	8006bd4 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bbe:	b299      	uxth	r1, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 ff44 	bl	8007a5c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b22      	cmp	r3, #34	@ 0x22
 8006bf0:	d108      	bne.n	8006c04 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c02:	e095      	b.n	8006d30 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c12:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c14:	e08c      	b.n	8006d30 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006c16:	2140      	movs	r1, #64	@ 0x40
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fd1d 	bl	8007658 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006c1e:	e087      	b.n	8006d30 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	099b      	lsrs	r3, r3, #6
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d071      	beq.n	8006d10 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	099b      	lsrs	r3, r3, #6
 8006c30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d06b      	beq.n	8006d10 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c38:	2101      	movs	r1, #1
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 ffc4 	bl	8007bc8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006c40:	2110      	movs	r1, #16
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 ff3c 	bl	8007ac0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b22      	cmp	r3, #34	@ 0x22
 8006c52:	d101      	bne.n	8006c58 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8006c54:	4b2d      	ldr	r3, [pc, #180]	@ (8006d0c <I2C_Mem_ISR_DMA+0x264>)
 8006c56:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2bff      	cmp	r3, #255	@ 0xff
 8006c60:	d91e      	bls.n	8006ca0 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	0c1b      	lsrs	r3, r3, #16
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d103      	bne.n	8006c7e <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006c7c:	e002      	b.n	8006c84 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	22ff      	movs	r2, #255	@ 0xff
 8006c82:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c88:	b299      	uxth	r1, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 fedf 	bl	8007a5c <I2C_TransferConfig>
 8006c9e:	e011      	b.n	8006cc4 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cae:	b299      	uxth	r1, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fecc 	bl	8007a5c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b22      	cmp	r3, #34	@ 0x22
 8006ce0:	d108      	bne.n	8006cf4 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cf0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cf2:	e01d      	b.n	8006d30 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d02:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d04:	e014      	b.n	8006d30 <I2C_Mem_ISR_DMA+0x288>
 8006d06:	bf00      	nop
 8006d08:	80002000 	.word	0x80002000
 8006d0c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d009      	beq.n	8006d30 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 fa0a 	bl	8007144 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop

08006d44 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d54:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <I2C_Slave_ISR_DMA+0x24>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e0ca      	b.n	8006efe <I2C_Slave_ISR_DMA+0x1ba>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 faa4 	bl	80072d8 <I2C_ITSlaveCplt>
 8006d90:	e0b0      	b.n	8006ef4 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	091b      	lsrs	r3, r3, #4
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 809a 	beq.w	8006ed4 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	091b      	lsrs	r3, r3, #4
 8006da4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8093 	beq.w	8006ed4 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	0b9b      	lsrs	r3, r3, #14
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d105      	bne.n	8006dc6 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	0bdb      	lsrs	r3, r3, #15
 8006dbe:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d07f      	beq.n	8006ec6 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00d      	beq.n	8006dea <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	0bdb      	lsrs	r3, r3, #15
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d007      	beq.n	8006dea <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8006de6:	2301      	movs	r3, #1
 8006de8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00d      	beq.n	8006e0e <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	0b9b      	lsrs	r3, r3, #14
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d007      	beq.n	8006e0e <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d128      	bne.n	8006e66 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b28      	cmp	r3, #40	@ 0x28
 8006e1e:	d108      	bne.n	8006e32 <I2C_Slave_ISR_DMA+0xee>
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e26:	d104      	bne.n	8006e32 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006e28:	68b9      	ldr	r1, [r7, #8]
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 fbbe 	bl	80075ac <I2C_ITListenCplt>
 8006e30:	e048      	b.n	8006ec4 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b29      	cmp	r3, #41	@ 0x29
 8006e3c:	d10e      	bne.n	8006e5c <I2C_Slave_ISR_DMA+0x118>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e44:	d00a      	beq.n	8006e5c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2210      	movs	r2, #16
 8006e4c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fd19 	bl	8007886 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f917 	bl	8007088 <I2C_ITSlaveSeqCplt>
 8006e5a:	e033      	b.n	8006ec4 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2210      	movs	r2, #16
 8006e62:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006e64:	e034      	b.n	8006ed0 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2210      	movs	r2, #16
 8006e6c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e72:	f043 0204 	orr.w	r2, r3, #4
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e80:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <I2C_Slave_ISR_DMA+0x14c>
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e8e:	d11f      	bne.n	8006ed0 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	2b21      	cmp	r3, #33	@ 0x21
 8006e94:	d002      	beq.n	8006e9c <I2C_Slave_ISR_DMA+0x158>
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	2b29      	cmp	r3, #41	@ 0x29
 8006e9a:	d103      	bne.n	8006ea4 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2221      	movs	r2, #33	@ 0x21
 8006ea0:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ea2:	e008      	b.n	8006eb6 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	2b22      	cmp	r3, #34	@ 0x22
 8006ea8:	d002      	beq.n	8006eb0 <I2C_Slave_ISR_DMA+0x16c>
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eae:	d102      	bne.n	8006eb6 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2222      	movs	r2, #34	@ 0x22
 8006eb4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eba:	4619      	mov	r1, r3
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fbcb 	bl	8007658 <I2C_ITError>
      if (treatdmanack == 1U)
 8006ec2:	e005      	b.n	8006ed0 <I2C_Slave_ISR_DMA+0x18c>
 8006ec4:	e004      	b.n	8006ed0 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2210      	movs	r2, #16
 8006ecc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ece:	e011      	b.n	8006ef4 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8006ed0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ed2:	e00f      	b.n	8006ef4 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	08db      	lsrs	r3, r3, #3
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d009      	beq.n	8006ef4 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	08db      	lsrs	r3, r3, #3
 8006ee4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f809 	bl	8006f06 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3720      	adds	r7, #32
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f1c:	2b28      	cmp	r3, #40	@ 0x28
 8006f1e:	d16a      	bne.n	8006ff6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	0c1b      	lsrs	r3, r3, #16
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	0c1b      	lsrs	r3, r3, #16
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006f3e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f4c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006f5a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d138      	bne.n	8006fd6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006f64:	897b      	ldrh	r3, [r7, #10]
 8006f66:	09db      	lsrs	r3, r3, #7
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	89bb      	ldrh	r3, [r7, #12]
 8006f6c:	4053      	eors	r3, r2
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	f003 0306 	and.w	r3, r3, #6
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d11c      	bne.n	8006fb2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006f78:	897b      	ldrh	r3, [r7, #10]
 8006f7a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d13b      	bne.n	8007006 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2208      	movs	r2, #8
 8006f9a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fa4:	89ba      	ldrh	r2, [r7, #12]
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff f9f3 	bl	8006396 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006fb0:	e029      	b.n	8007006 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006fb2:	893b      	ldrh	r3, [r7, #8]
 8006fb4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006fb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fe04 	bl	8007bc8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fc8:	89ba      	ldrh	r2, [r7, #12]
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff f9e1 	bl	8006396 <HAL_I2C_AddrCallback>
}
 8006fd4:	e017      	b.n	8007006 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006fd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fdf4 	bl	8007bc8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fe8:	89ba      	ldrh	r2, [r7, #12]
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff f9d1 	bl	8006396 <HAL_I2C_AddrCallback>
}
 8006ff4:	e007      	b.n	8007006 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007006:	bf00      	nop
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b21      	cmp	r3, #33	@ 0x21
 8007028:	d115      	bne.n	8007056 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2211      	movs	r2, #17
 8007036:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800703e:	2101      	movs	r1, #1
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fdc1 	bl	8007bc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f015 ffc6 	bl	801cfe0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007054:	e014      	b.n	8007080 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2212      	movs	r2, #18
 8007062:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800706a:	2102      	movs	r1, #2
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fdab 	bl	8007bc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff f977 	bl	800636e <HAL_I2C_MasterRxCpltCallback>
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	0b9b      	lsrs	r3, r3, #14
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	e00d      	b.n	80070da <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	0bdb      	lsrs	r3, r3, #15
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d007      	beq.n	80070da <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b29      	cmp	r3, #41	@ 0x29
 80070e4:	d112      	bne.n	800710c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2228      	movs	r2, #40	@ 0x28
 80070ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2221      	movs	r2, #33	@ 0x21
 80070f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070f4:	2101      	movs	r1, #1
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fd66 	bl	8007bc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff f93c 	bl	8006382 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800710a:	e017      	b.n	800713c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b2a      	cmp	r3, #42	@ 0x2a
 8007116:	d111      	bne.n	800713c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2228      	movs	r2, #40	@ 0x28
 800711c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2222      	movs	r2, #34	@ 0x22
 8007124:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007126:	2102      	movs	r1, #2
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fd4d 	bl	8007bc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f015 ff7c 	bl	801d034 <HAL_I2C_SlaveRxCpltCallback>
}
 800713c:	bf00      	nop
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2220      	movs	r2, #32
 8007158:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b21      	cmp	r3, #33	@ 0x21
 8007164:	d107      	bne.n	8007176 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007166:	2101      	movs	r1, #1
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fd2d 	bl	8007bc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2211      	movs	r2, #17
 8007172:	631a      	str	r2, [r3, #48]	@ 0x30
 8007174:	e00c      	b.n	8007190 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b22      	cmp	r3, #34	@ 0x22
 8007180:	d106      	bne.n	8007190 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007182:	2102      	movs	r1, #2
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fd1f 	bl	8007bc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2212      	movs	r2, #18
 800718e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6859      	ldr	r1, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4b4d      	ldr	r3, [pc, #308]	@ (80072d0 <I2C_ITMasterCplt+0x18c>)
 800719c:	400b      	ands	r3, r1
 800719e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a4a      	ldr	r2, [pc, #296]	@ (80072d4 <I2C_ITMasterCplt+0x190>)
 80071aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	091b      	lsrs	r3, r3, #4
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d009      	beq.n	80071cc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2210      	movs	r2, #16
 80071be:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c4:	f043 0204 	orr.w	r2, r3, #4
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b60      	cmp	r3, #96	@ 0x60
 80071d6:	d10b      	bne.n	80071f0 <I2C_ITMasterCplt+0xac>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	089b      	lsrs	r3, r3, #2
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80071ee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fb48 	bl	8007886 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b60      	cmp	r3, #96	@ 0x60
 8007206:	d002      	beq.n	800720e <I2C_ITMasterCplt+0xca>
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d006      	beq.n	800721c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fa1f 	bl	8007658 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800721a:	e054      	b.n	80072c6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b21      	cmp	r3, #33	@ 0x21
 8007226:	d124      	bne.n	8007272 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2220      	movs	r2, #32
 800722c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b40      	cmp	r3, #64	@ 0x40
 8007240:	d10b      	bne.n	800725a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff f8b7 	bl	80063c6 <HAL_I2C_MemTxCpltCallback>
}
 8007258:	e035      	b.n	80072c6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f015 feb8 	bl	801cfe0 <HAL_I2C_MasterTxCpltCallback>
}
 8007270:	e029      	b.n	80072c6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b22      	cmp	r3, #34	@ 0x22
 800727c:	d123      	bne.n	80072c6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b40      	cmp	r3, #64	@ 0x40
 8007296:	d10b      	bne.n	80072b0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff f896 	bl	80063da <HAL_I2C_MemRxCpltCallback>
}
 80072ae:	e00a      	b.n	80072c6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff f854 	bl	800636e <HAL_I2C_MasterRxCpltCallback>
}
 80072c6:	bf00      	nop
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	fe00e800 	.word	0xfe00e800
 80072d4:	ffff0000 	.word	0xffff0000

080072d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072fa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2220      	movs	r2, #32
 8007302:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	2b21      	cmp	r3, #33	@ 0x21
 8007308:	d002      	beq.n	8007310 <I2C_ITSlaveCplt+0x38>
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	2b29      	cmp	r3, #41	@ 0x29
 800730e:	d108      	bne.n	8007322 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007310:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fc57 	bl	8007bc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2221      	movs	r2, #33	@ 0x21
 800731e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007320:	e019      	b.n	8007356 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007322:	7afb      	ldrb	r3, [r7, #11]
 8007324:	2b22      	cmp	r3, #34	@ 0x22
 8007326:	d002      	beq.n	800732e <I2C_ITSlaveCplt+0x56>
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	2b2a      	cmp	r3, #42	@ 0x2a
 800732c:	d108      	bne.n	8007340 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800732e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fc48 	bl	8007bc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2222      	movs	r2, #34	@ 0x22
 800733c:	631a      	str	r2, [r3, #48]	@ 0x30
 800733e:	e00a      	b.n	8007356 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007340:	7afb      	ldrb	r3, [r7, #11]
 8007342:	2b28      	cmp	r3, #40	@ 0x28
 8007344:	d107      	bne.n	8007356 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007346:	f248 0103 	movw	r1, #32771	@ 0x8003
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fc3c 	bl	8007bc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007364:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6859      	ldr	r1, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4b8c      	ldr	r3, [pc, #560]	@ (80075a4 <I2C_ITSlaveCplt+0x2cc>)
 8007372:	400b      	ands	r3, r1
 8007374:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa85 	bl	8007886 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	0b9b      	lsrs	r3, r3, #14
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d013      	beq.n	80073b0 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007396:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739c:	2b00      	cmp	r3, #0
 800739e:	d020      	beq.n	80073e2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073ae:	e018      	b.n	80073e2 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	0bdb      	lsrs	r3, r3, #15
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d012      	beq.n	80073e2 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073ca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d006      	beq.n	80073e2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	089b      	lsrs	r3, r3, #2
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d020      	beq.n	8007430 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f023 0304 	bic.w	r3, r3, #4
 80073f4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007400:	b2d2      	uxtb	r2, r2
 8007402:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00c      	beq.n	8007430 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743e:	f043 0204 	orr.w	r2, r3, #4
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	091b      	lsrs	r3, r3, #4
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d04a      	beq.n	80074e8 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	091b      	lsrs	r3, r3, #4
 8007456:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800745a:	2b00      	cmp	r3, #0
 800745c:	d044      	beq.n	80074e8 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d128      	bne.n	80074ba <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b28      	cmp	r3, #40	@ 0x28
 8007472:	d108      	bne.n	8007486 <I2C_ITSlaveCplt+0x1ae>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800747a:	d104      	bne.n	8007486 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800747c:	6979      	ldr	r1, [r7, #20]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f894 	bl	80075ac <I2C_ITListenCplt>
 8007484:	e030      	b.n	80074e8 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b29      	cmp	r3, #41	@ 0x29
 8007490:	d10e      	bne.n	80074b0 <I2C_ITSlaveCplt+0x1d8>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007498:	d00a      	beq.n	80074b0 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2210      	movs	r2, #16
 80074a0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f9ef 	bl	8007886 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff fded 	bl	8007088 <I2C_ITSlaveSeqCplt>
 80074ae:	e01b      	b.n	80074e8 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2210      	movs	r2, #16
 80074b6:	61da      	str	r2, [r3, #28]
 80074b8:	e016      	b.n	80074e8 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2210      	movs	r2, #16
 80074c0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c6:	f043 0204 	orr.w	r2, r3, #4
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <I2C_ITSlaveCplt+0x204>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074da:	d105      	bne.n	80074e8 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f8b8 	bl	8007658 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d010      	beq.n	8007520 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f8a7 	bl	8007658 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b28      	cmp	r3, #40	@ 0x28
 8007514:	d141      	bne.n	800759a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007516:	6979      	ldr	r1, [r7, #20]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f847 	bl	80075ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800751e:	e03c      	b.n	800759a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007528:	d014      	beq.n	8007554 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff fdac 	bl	8007088 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1d      	ldr	r2, [pc, #116]	@ (80075a8 <I2C_ITSlaveCplt+0x2d0>)
 8007534:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fe ff30 	bl	80063b2 <HAL_I2C_ListenCpltCallback>
}
 8007552:	e022      	b.n	800759a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b22      	cmp	r3, #34	@ 0x22
 800755e:	d10e      	bne.n	800757e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f015 fd5c 	bl	801d034 <HAL_I2C_SlaveRxCpltCallback>
}
 800757c:	e00d      	b.n	800759a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7fe fef4 	bl	8006382 <HAL_I2C_SlaveTxCpltCallback>
}
 800759a:	bf00      	nop
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	fe00e800 	.word	0xfe00e800
 80075a8:	ffff0000 	.word	0xffff0000

080075ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a26      	ldr	r2, [pc, #152]	@ (8007654 <I2C_ITListenCplt+0xa8>)
 80075ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	089b      	lsrs	r3, r3, #2
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d022      	beq.n	800762a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007600:	2b00      	cmp	r3, #0
 8007602:	d012      	beq.n	800762a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007614:	b29b      	uxth	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007622:	f043 0204 	orr.w	r2, r3, #4
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800762a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 faca 	bl	8007bc8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2210      	movs	r2, #16
 800763a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7fe feb4 	bl	80063b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800764a:	bf00      	nop
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	ffff0000 	.word	0xffff0000

08007658 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007668:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a6d      	ldr	r2, [pc, #436]	@ (800782c <I2C_ITError+0x1d4>)
 8007676:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	2b28      	cmp	r3, #40	@ 0x28
 800768e:	d005      	beq.n	800769c <I2C_ITError+0x44>
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	2b29      	cmp	r3, #41	@ 0x29
 8007694:	d002      	beq.n	800769c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	2b2a      	cmp	r3, #42	@ 0x2a
 800769a:	d10b      	bne.n	80076b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800769c:	2103      	movs	r1, #3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa92 	bl	8007bc8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2228      	movs	r2, #40	@ 0x28
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a60      	ldr	r2, [pc, #384]	@ (8007830 <I2C_ITError+0x1d8>)
 80076b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80076b2:	e030      	b.n	8007716 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fa85 	bl	8007bc8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f8e1 	bl	8007886 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b60      	cmp	r3, #96	@ 0x60
 80076ce:	d01f      	beq.n	8007710 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d114      	bne.n	8007710 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	f003 0310 	and.w	r3, r3, #16
 80076f0:	2b10      	cmp	r3, #16
 80076f2:	d109      	bne.n	8007708 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2210      	movs	r2, #16
 80076fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007700:	f043 0204 	orr.w	r2, r3, #4
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2220      	movs	r2, #32
 800770e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007720:	2b00      	cmp	r3, #0
 8007722:	d039      	beq.n	8007798 <I2C_ITError+0x140>
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b11      	cmp	r3, #17
 8007728:	d002      	beq.n	8007730 <I2C_ITError+0xd8>
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b21      	cmp	r3, #33	@ 0x21
 800772e:	d133      	bne.n	8007798 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800773a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800773e:	d107      	bne.n	8007750 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800774e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007754:	4618      	mov	r0, r3
 8007756:	f7fc fc79 	bl	800404c <HAL_DMA_GetState>
 800775a:	4603      	mov	r3, r0
 800775c:	2b01      	cmp	r3, #1
 800775e:	d017      	beq.n	8007790 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007764:	4a33      	ldr	r2, [pc, #204]	@ (8007834 <I2C_ITError+0x1dc>)
 8007766:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007774:	4618      	mov	r0, r3
 8007776:	f7fc fabd 	bl	8003cf4 <HAL_DMA_Abort_IT>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d04d      	beq.n	800781c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800778a:	4610      	mov	r0, r2
 800778c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800778e:	e045      	b.n	800781c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f851 	bl	8007838 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007796:	e041      	b.n	800781c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d039      	beq.n	8007814 <I2C_ITError+0x1bc>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b12      	cmp	r3, #18
 80077a4:	d002      	beq.n	80077ac <I2C_ITError+0x154>
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b22      	cmp	r3, #34	@ 0x22
 80077aa:	d133      	bne.n	8007814 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ba:	d107      	bne.n	80077cc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fc fc3b 	bl	800404c <HAL_DMA_GetState>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d017      	beq.n	800780c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e0:	4a14      	ldr	r2, [pc, #80]	@ (8007834 <I2C_ITError+0x1dc>)
 80077e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fc fa7f 	bl	8003cf4 <HAL_DMA_Abort_IT>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d011      	beq.n	8007820 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007806:	4610      	mov	r0, r2
 8007808:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800780a:	e009      	b.n	8007820 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f813 	bl	8007838 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007812:	e005      	b.n	8007820 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f80f 	bl	8007838 <I2C_TreatErrorCallback>
  }
}
 800781a:	e002      	b.n	8007822 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800781c:	bf00      	nop
 800781e:	e000      	b.n	8007822 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007820:	bf00      	nop
}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	ffff0000 	.word	0xffff0000
 8007830:	0800669b 	.word	0x0800669b
 8007834:	08007a1f 	.word	0x08007a1f

08007838 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b60      	cmp	r3, #96	@ 0x60
 800784a:	d10e      	bne.n	800786a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fe fdcd 	bl	8006402 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007868:	e009      	b.n	800787e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7fe fdb8 	bl	80063ee <HAL_I2C_ErrorCallback>
}
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b02      	cmp	r3, #2
 800789a:	d103      	bne.n	80078a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2200      	movs	r2, #0
 80078a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d007      	beq.n	80078c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699a      	ldr	r2, [r3, #24]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0201 	orr.w	r2, r2, #1
 80078c0:	619a      	str	r2, [r3, #24]
  }
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078da:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078ea:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d104      	bne.n	8007900 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80078f6:	2120      	movs	r1, #32
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f8e1 	bl	8007ac0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80078fe:	e02d      	b.n	800795c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007908:	441a      	add	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007912:	b29b      	uxth	r3, r3
 8007914:	2bff      	cmp	r3, #255	@ 0xff
 8007916:	d903      	bls.n	8007920 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	22ff      	movs	r2, #255	@ 0xff
 800791c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800791e:	e004      	b.n	800792a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	4619      	mov	r1, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3328      	adds	r3, #40	@ 0x28
 800793a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007940:	f7fc f908 	bl	8003b54 <HAL_DMA_Start_IT>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d004      	beq.n	8007954 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800794a:	2110      	movs	r1, #16
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f7ff fe83 	bl	8007658 <I2C_ITError>
}
 8007952:	e003      	b.n	800795c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007954:	2140      	movs	r1, #64	@ 0x40
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f8b2 	bl	8007ac0 <I2C_Enable_IRQ>
}
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007976:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10e      	bne.n	80079a2 <I2C_DMASlaveReceiveCplt+0x3e>
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800798a:	d00a      	beq.n	80079a2 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800799a:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7ff fb73 	bl	8007088 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ba:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d007      	beq.n	80079d4 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80079d0:	2301      	movs	r3, #1
 80079d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80079e8:	2301      	movs	r3, #1
 80079ea:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7fc fb3b 	bl	8004068 <HAL_DMA_GetError>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d00e      	beq.n	8007a16 <I2C_DMAError+0x6c>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00b      	beq.n	8007a16 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a0c:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007a0e:	2110      	movs	r1, #16
 8007a10:	68b8      	ldr	r0, [r7, #8]
 8007a12:	f7ff fe21 	bl	8007658 <I2C_ITError>
  }
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a38:	2200      	movs	r2, #0
 8007a3a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a48:	2200      	movs	r2, #0
 8007a4a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7ff fef3 	bl	8007838 <I2C_TreatErrorCallback>
}
 8007a52:	bf00      	nop
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	460b      	mov	r3, r1
 8007a68:	817b      	strh	r3, [r7, #10]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a6e:	897b      	ldrh	r3, [r7, #10]
 8007a70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a74:	7a7b      	ldrb	r3, [r7, #9]
 8007a76:	041b      	lsls	r3, r3, #16
 8007a78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a7c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a8a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	0d5b      	lsrs	r3, r3, #21
 8007a96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007a9a:	4b08      	ldr	r3, [pc, #32]	@ (8007abc <I2C_TransferConfig+0x60>)
 8007a9c:	430b      	orrs	r3, r1
 8007a9e:	43db      	mvns	r3, r3
 8007aa0:	ea02 0103 	and.w	r1, r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	03ff63ff 	.word	0x03ff63ff

08007ac0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad4:	4a39      	ldr	r2, [pc, #228]	@ (8007bbc <I2C_Enable_IRQ+0xfc>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d032      	beq.n	8007b40 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007ade:	4a38      	ldr	r2, [pc, #224]	@ (8007bc0 <I2C_Enable_IRQ+0x100>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d02d      	beq.n	8007b40 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007ae8:	4a36      	ldr	r2, [pc, #216]	@ (8007bc4 <I2C_Enable_IRQ+0x104>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d028      	beq.n	8007b40 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007aee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	da03      	bge.n	8007afe <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007afc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007afe:	887b      	ldrh	r3, [r7, #2]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007b0e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b10:	887b      	ldrh	r3, [r7, #2]
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007b20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b22:	887b      	ldrh	r3, [r7, #2]
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d103      	bne.n	8007b30 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007b2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b30:	887b      	ldrh	r3, [r7, #2]
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d133      	bne.n	8007b9e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f043 0320 	orr.w	r3, r3, #32
 8007b3c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b3e:	e02e      	b.n	8007b9e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	da03      	bge.n	8007b50 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007b4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b50:	887b      	ldrh	r3, [r7, #2]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007b60:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b62:	887b      	ldrh	r3, [r7, #2]
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007b72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b74:	887b      	ldrh	r3, [r7, #2]
 8007b76:	2b10      	cmp	r3, #16
 8007b78:	d103      	bne.n	8007b82 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007b80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b82:	887b      	ldrh	r3, [r7, #2]
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	d103      	bne.n	8007b90 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007b8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007b90:	887b      	ldrh	r3, [r7, #2]
 8007b92:	2b40      	cmp	r3, #64	@ 0x40
 8007b94:	d103      	bne.n	8007b9e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b9c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6819      	ldr	r1, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	601a      	str	r2, [r3, #0]
}
 8007bae:	bf00      	nop
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	080068a3 	.word	0x080068a3
 8007bc0:	08006d45 	.word	0x08006d45
 8007bc4:	08006aa9 	.word	0x08006aa9

08007bc8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007bd8:	887b      	ldrh	r3, [r7, #2]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00f      	beq.n	8007c02 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007be8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007bf6:	2b28      	cmp	r3, #40	@ 0x28
 8007bf8:	d003      	beq.n	8007c02 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007c00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007c02:	887b      	ldrh	r3, [r7, #2]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00f      	beq.n	8007c2c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007c12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c20:	2b28      	cmp	r3, #40	@ 0x28
 8007c22:	d003      	beq.n	8007c2c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007c2a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	da03      	bge.n	8007c3c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007c3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c3c:	887b      	ldrh	r3, [r7, #2]
 8007c3e:	2b10      	cmp	r3, #16
 8007c40:	d103      	bne.n	8007c4a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007c48:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007c4a:	887b      	ldrh	r3, [r7, #2]
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d103      	bne.n	8007c58 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f043 0320 	orr.w	r3, r3, #32
 8007c56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007c58:	887b      	ldrh	r3, [r7, #2]
 8007c5a:	2b40      	cmp	r3, #64	@ 0x40
 8007c5c:	d103      	bne.n	8007c66 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c64:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6819      	ldr	r1, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	43da      	mvns	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	400a      	ands	r2, r1
 8007c76:	601a      	str	r2, [r3, #0]
}
 8007c78:	bf00      	nop
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	d138      	bne.n	8007d0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e032      	b.n	8007d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2224      	movs	r2, #36	@ 0x24
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0201 	bic.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007cd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6819      	ldr	r1, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0201 	orr.w	r2, r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e000      	b.n	8007d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d0c:	2302      	movs	r3, #2
  }
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	d139      	bne.n	8007da4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	e033      	b.n	8007da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2224      	movs	r2, #36	@ 0x24
 8007d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0201 	bic.w	r2, r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0201 	orr.w	r2, r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	e000      	b.n	8007da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007da4:	2302      	movs	r3, #2
  }
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b086      	sub	sp, #24
 8007db6:	af02      	add	r7, sp, #8
 8007db8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e108      	b.n	8007fd6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7f9 ffda 	bl	8001d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2203      	movs	r2, #3
 8007de8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007df2:	d102      	bne.n	8007dfa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f005 f8fa 	bl	800cff8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6818      	ldr	r0, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7c1a      	ldrb	r2, [r3, #16]
 8007e0c:	f88d 2000 	strb.w	r2, [sp]
 8007e10:	3304      	adds	r3, #4
 8007e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e14:	f005 f896 	bl	800cf44 <USB_CoreInit>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e0d5      	b.n	8007fd6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f005 f8f2 	bl	800d01a <USB_SetCurrentMode>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e0c6      	b.n	8007fd6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
 8007e4c:	e04a      	b.n	8007ee4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007e4e:	7bfa      	ldrb	r2, [r7, #15]
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	4613      	mov	r3, r2
 8007e54:	00db      	lsls	r3, r3, #3
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	440b      	add	r3, r1
 8007e5c:	3315      	adds	r3, #21
 8007e5e:	2201      	movs	r2, #1
 8007e60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007e62:	7bfa      	ldrb	r2, [r7, #15]
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	4613      	mov	r3, r2
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	3314      	adds	r3, #20
 8007e72:	7bfa      	ldrb	r2, [r7, #15]
 8007e74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007e76:	7bfa      	ldrb	r2, [r7, #15]
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	b298      	uxth	r0, r3
 8007e7c:	6879      	ldr	r1, [r7, #4]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	4413      	add	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	440b      	add	r3, r1
 8007e88:	332e      	adds	r3, #46	@ 0x2e
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007e8e:	7bfa      	ldrb	r2, [r7, #15]
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	3318      	adds	r3, #24
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007ea2:	7bfa      	ldrb	r2, [r7, #15]
 8007ea4:	6879      	ldr	r1, [r7, #4]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	440b      	add	r3, r1
 8007eb0:	331c      	adds	r3, #28
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007eb6:	7bfa      	ldrb	r2, [r7, #15]
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	00db      	lsls	r3, r3, #3
 8007ebe:	4413      	add	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	440b      	add	r3, r1
 8007ec4:	3320      	adds	r3, #32
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007eca:	7bfa      	ldrb	r2, [r7, #15]
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	3324      	adds	r3, #36	@ 0x24
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	73fb      	strb	r3, [r7, #15]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	791b      	ldrb	r3, [r3, #4]
 8007ee8:	7bfa      	ldrb	r2, [r7, #15]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d3af      	bcc.n	8007e4e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]
 8007ef2:	e044      	b.n	8007f7e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007ef4:	7bfa      	ldrb	r2, [r7, #15]
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007f0a:	7bfa      	ldrb	r2, [r7, #15]
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	440b      	add	r3, r1
 8007f18:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007f1c:	7bfa      	ldrb	r2, [r7, #15]
 8007f1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007f20:	7bfa      	ldrb	r2, [r7, #15]
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	4613      	mov	r3, r2
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	440b      	add	r3, r1
 8007f2e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007f32:	2200      	movs	r2, #0
 8007f34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007f36:	7bfa      	ldrb	r2, [r7, #15]
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007f4c:	7bfa      	ldrb	r2, [r7, #15]
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	4613      	mov	r3, r2
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007f5e:	2200      	movs	r2, #0
 8007f60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007f62:	7bfa      	ldrb	r2, [r7, #15]
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	4613      	mov	r3, r2
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	73fb      	strb	r3, [r7, #15]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	791b      	ldrb	r3, [r3, #4]
 8007f82:	7bfa      	ldrb	r2, [r7, #15]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d3b5      	bcc.n	8007ef4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	7c1a      	ldrb	r2, [r3, #16]
 8007f90:	f88d 2000 	strb.w	r2, [sp]
 8007f94:	3304      	adds	r3, #4
 8007f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f98:	f005 f88c 	bl	800d0b4 <USB_DevInit>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d005      	beq.n	8007fae <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e013      	b.n	8007fd6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	7b1b      	ldrb	r3, [r3, #12]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d102      	bne.n	8007fca <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f80b 	bl	8007fe0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f005 fa47 	bl	800d462 <USB_DevDisconnect>

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800800e:	4b05      	ldr	r3, [pc, #20]	@ (8008024 <HAL_PCDEx_ActivateLPM+0x44>)
 8008010:	4313      	orrs	r3, r2
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	10000003 	.word	0x10000003

08008028 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008028:	b480      	push	{r7}
 800802a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800802c:	4b05      	ldr	r3, [pc, #20]	@ (8008044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a04      	ldr	r2, [pc, #16]	@ (8008044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008036:	6013      	str	r3, [r2, #0]
}
 8008038:	bf00      	nop
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	40007000 	.word	0x40007000

08008048 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008050:	2300      	movs	r3, #0
 8008052:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e291      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 8087 	beq.w	800817a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800806c:	4b96      	ldr	r3, [pc, #600]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f003 030c 	and.w	r3, r3, #12
 8008074:	2b04      	cmp	r3, #4
 8008076:	d00c      	beq.n	8008092 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008078:	4b93      	ldr	r3, [pc, #588]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f003 030c 	and.w	r3, r3, #12
 8008080:	2b08      	cmp	r3, #8
 8008082:	d112      	bne.n	80080aa <HAL_RCC_OscConfig+0x62>
 8008084:	4b90      	ldr	r3, [pc, #576]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800808c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008090:	d10b      	bne.n	80080aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008092:	4b8d      	ldr	r3, [pc, #564]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d06c      	beq.n	8008178 <HAL_RCC_OscConfig+0x130>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d168      	bne.n	8008178 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e26b      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b2:	d106      	bne.n	80080c2 <HAL_RCC_OscConfig+0x7a>
 80080b4:	4b84      	ldr	r3, [pc, #528]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a83      	ldr	r2, [pc, #524]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80080ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	e02e      	b.n	8008120 <HAL_RCC_OscConfig+0xd8>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10c      	bne.n	80080e4 <HAL_RCC_OscConfig+0x9c>
 80080ca:	4b7f      	ldr	r3, [pc, #508]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a7e      	ldr	r2, [pc, #504]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80080d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	4b7c      	ldr	r3, [pc, #496]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a7b      	ldr	r2, [pc, #492]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80080dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	e01d      	b.n	8008120 <HAL_RCC_OscConfig+0xd8>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080ec:	d10c      	bne.n	8008108 <HAL_RCC_OscConfig+0xc0>
 80080ee:	4b76      	ldr	r3, [pc, #472]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a75      	ldr	r2, [pc, #468]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80080f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	4b73      	ldr	r3, [pc, #460]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a72      	ldr	r2, [pc, #456]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	e00b      	b.n	8008120 <HAL_RCC_OscConfig+0xd8>
 8008108:	4b6f      	ldr	r3, [pc, #444]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a6e      	ldr	r2, [pc, #440]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 800810e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	4b6c      	ldr	r3, [pc, #432]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a6b      	ldr	r2, [pc, #428]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 800811a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800811e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d013      	beq.n	8008150 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008128:	f7fa fa74 	bl	8002614 <HAL_GetTick>
 800812c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008130:	f7fa fa70 	bl	8002614 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b64      	cmp	r3, #100	@ 0x64
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e21f      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008142:	4b61      	ldr	r3, [pc, #388]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f0      	beq.n	8008130 <HAL_RCC_OscConfig+0xe8>
 800814e:	e014      	b.n	800817a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008150:	f7fa fa60 	bl	8002614 <HAL_GetTick>
 8008154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008156:	e008      	b.n	800816a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008158:	f7fa fa5c 	bl	8002614 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b64      	cmp	r3, #100	@ 0x64
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e20b      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800816a:	4b57      	ldr	r3, [pc, #348]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f0      	bne.n	8008158 <HAL_RCC_OscConfig+0x110>
 8008176:	e000      	b.n	800817a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d069      	beq.n	800825a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008186:	4b50      	ldr	r3, [pc, #320]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 030c 	and.w	r3, r3, #12
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00b      	beq.n	80081aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008192:	4b4d      	ldr	r3, [pc, #308]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f003 030c 	and.w	r3, r3, #12
 800819a:	2b08      	cmp	r3, #8
 800819c:	d11c      	bne.n	80081d8 <HAL_RCC_OscConfig+0x190>
 800819e:	4b4a      	ldr	r3, [pc, #296]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d116      	bne.n	80081d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081aa:	4b47      	ldr	r3, [pc, #284]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d005      	beq.n	80081c2 <HAL_RCC_OscConfig+0x17a>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d001      	beq.n	80081c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e1df      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081c2:	4b41      	ldr	r3, [pc, #260]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	493d      	ldr	r1, [pc, #244]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081d6:	e040      	b.n	800825a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d023      	beq.n	8008228 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081e0:	4b39      	ldr	r3, [pc, #228]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a38      	ldr	r2, [pc, #224]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80081e6:	f043 0301 	orr.w	r3, r3, #1
 80081ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ec:	f7fa fa12 	bl	8002614 <HAL_GetTick>
 80081f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081f4:	f7fa fa0e 	bl	8002614 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e1bd      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008206:	4b30      	ldr	r3, [pc, #192]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0f0      	beq.n	80081f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008212:	4b2d      	ldr	r3, [pc, #180]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	4929      	ldr	r1, [pc, #164]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008222:	4313      	orrs	r3, r2
 8008224:	600b      	str	r3, [r1, #0]
 8008226:	e018      	b.n	800825a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008228:	4b27      	ldr	r3, [pc, #156]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a26      	ldr	r2, [pc, #152]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 800822e:	f023 0301 	bic.w	r3, r3, #1
 8008232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008234:	f7fa f9ee 	bl	8002614 <HAL_GetTick>
 8008238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800823a:	e008      	b.n	800824e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800823c:	f7fa f9ea 	bl	8002614 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e199      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800824e:	4b1e      	ldr	r3, [pc, #120]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1f0      	bne.n	800823c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d038      	beq.n	80082d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d019      	beq.n	80082a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800826e:	4b16      	ldr	r3, [pc, #88]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008272:	4a15      	ldr	r2, [pc, #84]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008274:	f043 0301 	orr.w	r3, r3, #1
 8008278:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800827a:	f7fa f9cb 	bl	8002614 <HAL_GetTick>
 800827e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008280:	e008      	b.n	8008294 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008282:	f7fa f9c7 	bl	8002614 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d901      	bls.n	8008294 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e176      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008294:	4b0c      	ldr	r3, [pc, #48]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 8008296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0f0      	beq.n	8008282 <HAL_RCC_OscConfig+0x23a>
 80082a0:	e01a      	b.n	80082d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082a2:	4b09      	ldr	r3, [pc, #36]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80082a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a6:	4a08      	ldr	r2, [pc, #32]	@ (80082c8 <HAL_RCC_OscConfig+0x280>)
 80082a8:	f023 0301 	bic.w	r3, r3, #1
 80082ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ae:	f7fa f9b1 	bl	8002614 <HAL_GetTick>
 80082b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082b4:	e00a      	b.n	80082cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082b6:	f7fa f9ad 	bl	8002614 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d903      	bls.n	80082cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e15c      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
 80082c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082cc:	4b91      	ldr	r3, [pc, #580]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80082ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1ee      	bne.n	80082b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80a4 	beq.w	800842e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082e6:	4b8b      	ldr	r3, [pc, #556]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80082e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10d      	bne.n	800830e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80082f2:	4b88      	ldr	r3, [pc, #544]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80082f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f6:	4a87      	ldr	r2, [pc, #540]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80082f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80082fe:	4b85      	ldr	r3, [pc, #532]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008306:	60bb      	str	r3, [r7, #8]
 8008308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800830a:	2301      	movs	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800830e:	4b82      	ldr	r3, [pc, #520]	@ (8008518 <HAL_RCC_OscConfig+0x4d0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008316:	2b00      	cmp	r3, #0
 8008318:	d118      	bne.n	800834c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800831a:	4b7f      	ldr	r3, [pc, #508]	@ (8008518 <HAL_RCC_OscConfig+0x4d0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a7e      	ldr	r2, [pc, #504]	@ (8008518 <HAL_RCC_OscConfig+0x4d0>)
 8008320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008326:	f7fa f975 	bl	8002614 <HAL_GetTick>
 800832a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800832c:	e008      	b.n	8008340 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800832e:	f7fa f971 	bl	8002614 <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b64      	cmp	r3, #100	@ 0x64
 800833a:	d901      	bls.n	8008340 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e120      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008340:	4b75      	ldr	r3, [pc, #468]	@ (8008518 <HAL_RCC_OscConfig+0x4d0>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0f0      	beq.n	800832e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d106      	bne.n	8008362 <HAL_RCC_OscConfig+0x31a>
 8008354:	4b6f      	ldr	r3, [pc, #444]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 8008356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008358:	4a6e      	ldr	r2, [pc, #440]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 800835a:	f043 0301 	orr.w	r3, r3, #1
 800835e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008360:	e02d      	b.n	80083be <HAL_RCC_OscConfig+0x376>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10c      	bne.n	8008384 <HAL_RCC_OscConfig+0x33c>
 800836a:	4b6a      	ldr	r3, [pc, #424]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 800836c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800836e:	4a69      	ldr	r2, [pc, #420]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 8008370:	f023 0301 	bic.w	r3, r3, #1
 8008374:	6713      	str	r3, [r2, #112]	@ 0x70
 8008376:	4b67      	ldr	r3, [pc, #412]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 8008378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800837a:	4a66      	ldr	r2, [pc, #408]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 800837c:	f023 0304 	bic.w	r3, r3, #4
 8008380:	6713      	str	r3, [r2, #112]	@ 0x70
 8008382:	e01c      	b.n	80083be <HAL_RCC_OscConfig+0x376>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	2b05      	cmp	r3, #5
 800838a:	d10c      	bne.n	80083a6 <HAL_RCC_OscConfig+0x35e>
 800838c:	4b61      	ldr	r3, [pc, #388]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 800838e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008390:	4a60      	ldr	r2, [pc, #384]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 8008392:	f043 0304 	orr.w	r3, r3, #4
 8008396:	6713      	str	r3, [r2, #112]	@ 0x70
 8008398:	4b5e      	ldr	r3, [pc, #376]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 800839a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800839c:	4a5d      	ldr	r2, [pc, #372]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 800839e:	f043 0301 	orr.w	r3, r3, #1
 80083a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80083a4:	e00b      	b.n	80083be <HAL_RCC_OscConfig+0x376>
 80083a6:	4b5b      	ldr	r3, [pc, #364]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80083a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083aa:	4a5a      	ldr	r2, [pc, #360]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80083ac:	f023 0301 	bic.w	r3, r3, #1
 80083b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80083b2:	4b58      	ldr	r3, [pc, #352]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80083b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b6:	4a57      	ldr	r2, [pc, #348]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80083b8:	f023 0304 	bic.w	r3, r3, #4
 80083bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d015      	beq.n	80083f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c6:	f7fa f925 	bl	8002614 <HAL_GetTick>
 80083ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083cc:	e00a      	b.n	80083e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ce:	f7fa f921 	bl	8002614 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083dc:	4293      	cmp	r3, r2
 80083de:	d901      	bls.n	80083e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e0ce      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083e4:	4b4b      	ldr	r3, [pc, #300]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80083e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d0ee      	beq.n	80083ce <HAL_RCC_OscConfig+0x386>
 80083f0:	e014      	b.n	800841c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083f2:	f7fa f90f 	bl	8002614 <HAL_GetTick>
 80083f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083f8:	e00a      	b.n	8008410 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083fa:	f7fa f90b 	bl	8002614 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008408:	4293      	cmp	r3, r2
 800840a:	d901      	bls.n	8008410 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e0b8      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008410:	4b40      	ldr	r3, [pc, #256]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 8008412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1ee      	bne.n	80083fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d105      	bne.n	800842e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008422:	4b3c      	ldr	r3, [pc, #240]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 8008424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008426:	4a3b      	ldr	r2, [pc, #236]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 8008428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800842c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 80a4 	beq.w	8008580 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008438:	4b36      	ldr	r3, [pc, #216]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f003 030c 	and.w	r3, r3, #12
 8008440:	2b08      	cmp	r3, #8
 8008442:	d06b      	beq.n	800851c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	2b02      	cmp	r3, #2
 800844a:	d149      	bne.n	80084e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800844c:	4b31      	ldr	r3, [pc, #196]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a30      	ldr	r2, [pc, #192]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 8008452:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008458:	f7fa f8dc 	bl	8002614 <HAL_GetTick>
 800845c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008460:	f7fa f8d8 	bl	8002614 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e087      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008472:	4b28      	ldr	r3, [pc, #160]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1f0      	bne.n	8008460 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	69da      	ldr	r2, [r3, #28]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848c:	019b      	lsls	r3, r3, #6
 800848e:	431a      	orrs	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	3b01      	subs	r3, #1
 8008498:	041b      	lsls	r3, r3, #16
 800849a:	431a      	orrs	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a0:	061b      	lsls	r3, r3, #24
 80084a2:	4313      	orrs	r3, r2
 80084a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80084a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084ac:	4b19      	ldr	r3, [pc, #100]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a18      	ldr	r2, [pc, #96]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80084b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80084b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b8:	f7fa f8ac 	bl	8002614 <HAL_GetTick>
 80084bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084be:	e008      	b.n	80084d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084c0:	f7fa f8a8 	bl	8002614 <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e057      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084d2:	4b10      	ldr	r3, [pc, #64]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d0f0      	beq.n	80084c0 <HAL_RCC_OscConfig+0x478>
 80084de:	e04f      	b.n	8008580 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a0b      	ldr	r2, [pc, #44]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 80084e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ec:	f7fa f892 	bl	8002614 <HAL_GetTick>
 80084f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084f4:	f7fa f88e 	bl	8002614 <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e03d      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008506:	4b03      	ldr	r3, [pc, #12]	@ (8008514 <HAL_RCC_OscConfig+0x4cc>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1f0      	bne.n	80084f4 <HAL_RCC_OscConfig+0x4ac>
 8008512:	e035      	b.n	8008580 <HAL_RCC_OscConfig+0x538>
 8008514:	40023800 	.word	0x40023800
 8008518:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800851c:	4b1b      	ldr	r3, [pc, #108]	@ (800858c <HAL_RCC_OscConfig+0x544>)
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d028      	beq.n	800857c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008534:	429a      	cmp	r2, r3
 8008536:	d121      	bne.n	800857c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008542:	429a      	cmp	r2, r3
 8008544:	d11a      	bne.n	800857c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800854c:	4013      	ands	r3, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008552:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008554:	4293      	cmp	r3, r2
 8008556:	d111      	bne.n	800857c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008562:	085b      	lsrs	r3, r3, #1
 8008564:	3b01      	subs	r3, #1
 8008566:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008568:	429a      	cmp	r2, r3
 800856a:	d107      	bne.n	800857c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008576:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008578:	429a      	cmp	r2, r3
 800857a:	d001      	beq.n	8008580 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e000      	b.n	8008582 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	40023800 	.word	0x40023800

08008590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e0d0      	b.n	800874a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085a8:	4b6a      	ldr	r3, [pc, #424]	@ (8008754 <HAL_RCC_ClockConfig+0x1c4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d910      	bls.n	80085d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085b6:	4b67      	ldr	r3, [pc, #412]	@ (8008754 <HAL_RCC_ClockConfig+0x1c4>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f023 020f 	bic.w	r2, r3, #15
 80085be:	4965      	ldr	r1, [pc, #404]	@ (8008754 <HAL_RCC_ClockConfig+0x1c4>)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085c6:	4b63      	ldr	r3, [pc, #396]	@ (8008754 <HAL_RCC_ClockConfig+0x1c4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d001      	beq.n	80085d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e0b8      	b.n	800874a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d020      	beq.n	8008626 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085f0:	4b59      	ldr	r3, [pc, #356]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	4a58      	ldr	r2, [pc, #352]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 80085f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80085fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0308 	and.w	r3, r3, #8
 8008604:	2b00      	cmp	r3, #0
 8008606:	d005      	beq.n	8008614 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008608:	4b53      	ldr	r3, [pc, #332]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	4a52      	ldr	r2, [pc, #328]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 800860e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008612:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008614:	4b50      	ldr	r3, [pc, #320]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	494d      	ldr	r1, [pc, #308]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 8008622:	4313      	orrs	r3, r2
 8008624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d040      	beq.n	80086b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d107      	bne.n	800864a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800863a:	4b47      	ldr	r3, [pc, #284]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d115      	bne.n	8008672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e07f      	b.n	800874a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d107      	bne.n	8008662 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008652:	4b41      	ldr	r3, [pc, #260]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d109      	bne.n	8008672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e073      	b.n	800874a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008662:	4b3d      	ldr	r3, [pc, #244]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e06b      	b.n	800874a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008672:	4b39      	ldr	r3, [pc, #228]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f023 0203 	bic.w	r2, r3, #3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	4936      	ldr	r1, [pc, #216]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 8008680:	4313      	orrs	r3, r2
 8008682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008684:	f7f9 ffc6 	bl	8002614 <HAL_GetTick>
 8008688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800868a:	e00a      	b.n	80086a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800868c:	f7f9 ffc2 	bl	8002614 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800869a:	4293      	cmp	r3, r2
 800869c:	d901      	bls.n	80086a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e053      	b.n	800874a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086a2:	4b2d      	ldr	r3, [pc, #180]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f003 020c 	and.w	r2, r3, #12
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d1eb      	bne.n	800868c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086b4:	4b27      	ldr	r3, [pc, #156]	@ (8008754 <HAL_RCC_ClockConfig+0x1c4>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 030f 	and.w	r3, r3, #15
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d210      	bcs.n	80086e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086c2:	4b24      	ldr	r3, [pc, #144]	@ (8008754 <HAL_RCC_ClockConfig+0x1c4>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f023 020f 	bic.w	r2, r3, #15
 80086ca:	4922      	ldr	r1, [pc, #136]	@ (8008754 <HAL_RCC_ClockConfig+0x1c4>)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086d2:	4b20      	ldr	r3, [pc, #128]	@ (8008754 <HAL_RCC_ClockConfig+0x1c4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 030f 	and.w	r3, r3, #15
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d001      	beq.n	80086e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e032      	b.n	800874a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d008      	beq.n	8008702 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086f0:	4b19      	ldr	r3, [pc, #100]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	4916      	ldr	r1, [pc, #88]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0308 	and.w	r3, r3, #8
 800870a:	2b00      	cmp	r3, #0
 800870c:	d009      	beq.n	8008722 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800870e:	4b12      	ldr	r3, [pc, #72]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	00db      	lsls	r3, r3, #3
 800871c:	490e      	ldr	r1, [pc, #56]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 800871e:	4313      	orrs	r3, r2
 8008720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008722:	f000 f821 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8008726:	4602      	mov	r2, r0
 8008728:	4b0b      	ldr	r3, [pc, #44]	@ (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	091b      	lsrs	r3, r3, #4
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	490a      	ldr	r1, [pc, #40]	@ (800875c <HAL_RCC_ClockConfig+0x1cc>)
 8008734:	5ccb      	ldrb	r3, [r1, r3]
 8008736:	fa22 f303 	lsr.w	r3, r2, r3
 800873a:	4a09      	ldr	r2, [pc, #36]	@ (8008760 <HAL_RCC_ClockConfig+0x1d0>)
 800873c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800873e:	4b09      	ldr	r3, [pc, #36]	@ (8008764 <HAL_RCC_ClockConfig+0x1d4>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4618      	mov	r0, r3
 8008744:	f7f9 fba2 	bl	8001e8c <HAL_InitTick>

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	40023c00 	.word	0x40023c00
 8008758:	40023800 	.word	0x40023800
 800875c:	08021b58 	.word	0x08021b58
 8008760:	20000000 	.word	0x20000000
 8008764:	20000004 	.word	0x20000004

08008768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800876c:	b094      	sub	sp, #80	@ 0x50
 800876e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	647b      	str	r3, [r7, #68]	@ 0x44
 8008774:	2300      	movs	r3, #0
 8008776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008778:	2300      	movs	r3, #0
 800877a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008780:	4b79      	ldr	r3, [pc, #484]	@ (8008968 <HAL_RCC_GetSysClockFreq+0x200>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f003 030c 	and.w	r3, r3, #12
 8008788:	2b08      	cmp	r3, #8
 800878a:	d00d      	beq.n	80087a8 <HAL_RCC_GetSysClockFreq+0x40>
 800878c:	2b08      	cmp	r3, #8
 800878e:	f200 80e1 	bhi.w	8008954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <HAL_RCC_GetSysClockFreq+0x34>
 8008796:	2b04      	cmp	r3, #4
 8008798:	d003      	beq.n	80087a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800879a:	e0db      	b.n	8008954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800879c:	4b73      	ldr	r3, [pc, #460]	@ (800896c <HAL_RCC_GetSysClockFreq+0x204>)
 800879e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087a0:	e0db      	b.n	800895a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087a2:	4b73      	ldr	r3, [pc, #460]	@ (8008970 <HAL_RCC_GetSysClockFreq+0x208>)
 80087a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087a6:	e0d8      	b.n	800895a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087a8:	4b6f      	ldr	r3, [pc, #444]	@ (8008968 <HAL_RCC_GetSysClockFreq+0x200>)
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80087b2:	4b6d      	ldr	r3, [pc, #436]	@ (8008968 <HAL_RCC_GetSysClockFreq+0x200>)
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d063      	beq.n	8008886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087be:	4b6a      	ldr	r3, [pc, #424]	@ (8008968 <HAL_RCC_GetSysClockFreq+0x200>)
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	099b      	lsrs	r3, r3, #6
 80087c4:	2200      	movs	r2, #0
 80087c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80087ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80087d2:	2300      	movs	r3, #0
 80087d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80087da:	4622      	mov	r2, r4
 80087dc:	462b      	mov	r3, r5
 80087de:	f04f 0000 	mov.w	r0, #0
 80087e2:	f04f 0100 	mov.w	r1, #0
 80087e6:	0159      	lsls	r1, r3, #5
 80087e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087ec:	0150      	lsls	r0, r2, #5
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4621      	mov	r1, r4
 80087f4:	1a51      	subs	r1, r2, r1
 80087f6:	6139      	str	r1, [r7, #16]
 80087f8:	4629      	mov	r1, r5
 80087fa:	eb63 0301 	sbc.w	r3, r3, r1
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800880c:	4659      	mov	r1, fp
 800880e:	018b      	lsls	r3, r1, #6
 8008810:	4651      	mov	r1, sl
 8008812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008816:	4651      	mov	r1, sl
 8008818:	018a      	lsls	r2, r1, #6
 800881a:	4651      	mov	r1, sl
 800881c:	ebb2 0801 	subs.w	r8, r2, r1
 8008820:	4659      	mov	r1, fp
 8008822:	eb63 0901 	sbc.w	r9, r3, r1
 8008826:	f04f 0200 	mov.w	r2, #0
 800882a:	f04f 0300 	mov.w	r3, #0
 800882e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800883a:	4690      	mov	r8, r2
 800883c:	4699      	mov	r9, r3
 800883e:	4623      	mov	r3, r4
 8008840:	eb18 0303 	adds.w	r3, r8, r3
 8008844:	60bb      	str	r3, [r7, #8]
 8008846:	462b      	mov	r3, r5
 8008848:	eb49 0303 	adc.w	r3, r9, r3
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	f04f 0200 	mov.w	r2, #0
 8008852:	f04f 0300 	mov.w	r3, #0
 8008856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800885a:	4629      	mov	r1, r5
 800885c:	024b      	lsls	r3, r1, #9
 800885e:	4621      	mov	r1, r4
 8008860:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008864:	4621      	mov	r1, r4
 8008866:	024a      	lsls	r2, r1, #9
 8008868:	4610      	mov	r0, r2
 800886a:	4619      	mov	r1, r3
 800886c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800886e:	2200      	movs	r2, #0
 8008870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008878:	f7f7 fd1a 	bl	80002b0 <__aeabi_uldivmod>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4613      	mov	r3, r2
 8008882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008884:	e058      	b.n	8008938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008886:	4b38      	ldr	r3, [pc, #224]	@ (8008968 <HAL_RCC_GetSysClockFreq+0x200>)
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	099b      	lsrs	r3, r3, #6
 800888c:	2200      	movs	r2, #0
 800888e:	4618      	mov	r0, r3
 8008890:	4611      	mov	r1, r2
 8008892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008896:	623b      	str	r3, [r7, #32]
 8008898:	2300      	movs	r3, #0
 800889a:	627b      	str	r3, [r7, #36]	@ 0x24
 800889c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80088a0:	4642      	mov	r2, r8
 80088a2:	464b      	mov	r3, r9
 80088a4:	f04f 0000 	mov.w	r0, #0
 80088a8:	f04f 0100 	mov.w	r1, #0
 80088ac:	0159      	lsls	r1, r3, #5
 80088ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088b2:	0150      	lsls	r0, r2, #5
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4641      	mov	r1, r8
 80088ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80088be:	4649      	mov	r1, r9
 80088c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	f04f 0300 	mov.w	r3, #0
 80088cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80088d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80088d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80088d8:	ebb2 040a 	subs.w	r4, r2, sl
 80088dc:	eb63 050b 	sbc.w	r5, r3, fp
 80088e0:	f04f 0200 	mov.w	r2, #0
 80088e4:	f04f 0300 	mov.w	r3, #0
 80088e8:	00eb      	lsls	r3, r5, #3
 80088ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088ee:	00e2      	lsls	r2, r4, #3
 80088f0:	4614      	mov	r4, r2
 80088f2:	461d      	mov	r5, r3
 80088f4:	4643      	mov	r3, r8
 80088f6:	18e3      	adds	r3, r4, r3
 80088f8:	603b      	str	r3, [r7, #0]
 80088fa:	464b      	mov	r3, r9
 80088fc:	eb45 0303 	adc.w	r3, r5, r3
 8008900:	607b      	str	r3, [r7, #4]
 8008902:	f04f 0200 	mov.w	r2, #0
 8008906:	f04f 0300 	mov.w	r3, #0
 800890a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800890e:	4629      	mov	r1, r5
 8008910:	028b      	lsls	r3, r1, #10
 8008912:	4621      	mov	r1, r4
 8008914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008918:	4621      	mov	r1, r4
 800891a:	028a      	lsls	r2, r1, #10
 800891c:	4610      	mov	r0, r2
 800891e:	4619      	mov	r1, r3
 8008920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008922:	2200      	movs	r2, #0
 8008924:	61bb      	str	r3, [r7, #24]
 8008926:	61fa      	str	r2, [r7, #28]
 8008928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800892c:	f7f7 fcc0 	bl	80002b0 <__aeabi_uldivmod>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4613      	mov	r3, r2
 8008936:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008938:	4b0b      	ldr	r3, [pc, #44]	@ (8008968 <HAL_RCC_GetSysClockFreq+0x200>)
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	0c1b      	lsrs	r3, r3, #16
 800893e:	f003 0303 	and.w	r3, r3, #3
 8008942:	3301      	adds	r3, #1
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008948:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800894a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800894c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008952:	e002      	b.n	800895a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008954:	4b05      	ldr	r3, [pc, #20]	@ (800896c <HAL_RCC_GetSysClockFreq+0x204>)
 8008956:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800895a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800895c:	4618      	mov	r0, r3
 800895e:	3750      	adds	r7, #80	@ 0x50
 8008960:	46bd      	mov	sp, r7
 8008962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008966:	bf00      	nop
 8008968:	40023800 	.word	0x40023800
 800896c:	00f42400 	.word	0x00f42400
 8008970:	007a1200 	.word	0x007a1200

08008974 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008974:	b480      	push	{r7}
 8008976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008978:	4b03      	ldr	r3, [pc, #12]	@ (8008988 <HAL_RCC_GetHCLKFreq+0x14>)
 800897a:	681b      	ldr	r3, [r3, #0]
}
 800897c:	4618      	mov	r0, r3
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	20000000 	.word	0x20000000

0800898c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008990:	f7ff fff0 	bl	8008974 <HAL_RCC_GetHCLKFreq>
 8008994:	4602      	mov	r2, r0
 8008996:	4b05      	ldr	r3, [pc, #20]	@ (80089ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	0a9b      	lsrs	r3, r3, #10
 800899c:	f003 0307 	and.w	r3, r3, #7
 80089a0:	4903      	ldr	r1, [pc, #12]	@ (80089b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089a2:	5ccb      	ldrb	r3, [r1, r3]
 80089a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	40023800 	.word	0x40023800
 80089b0:	08021b68 	.word	0x08021b68

080089b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80089b8:	f7ff ffdc 	bl	8008974 <HAL_RCC_GetHCLKFreq>
 80089bc:	4602      	mov	r2, r0
 80089be:	4b05      	ldr	r3, [pc, #20]	@ (80089d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	0b5b      	lsrs	r3, r3, #13
 80089c4:	f003 0307 	and.w	r3, r3, #7
 80089c8:	4903      	ldr	r1, [pc, #12]	@ (80089d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089ca:	5ccb      	ldrb	r3, [r1, r3]
 80089cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	40023800 	.word	0x40023800
 80089d8:	08021b68 	.word	0x08021b68

080089dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	220f      	movs	r2, #15
 80089ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80089ec:	4b12      	ldr	r3, [pc, #72]	@ (8008a38 <HAL_RCC_GetClockConfig+0x5c>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f003 0203 	and.w	r2, r3, #3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80089f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008a38 <HAL_RCC_GetClockConfig+0x5c>)
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008a04:	4b0c      	ldr	r3, [pc, #48]	@ (8008a38 <HAL_RCC_GetClockConfig+0x5c>)
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008a10:	4b09      	ldr	r3, [pc, #36]	@ (8008a38 <HAL_RCC_GetClockConfig+0x5c>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	08db      	lsrs	r3, r3, #3
 8008a16:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008a1e:	4b07      	ldr	r3, [pc, #28]	@ (8008a3c <HAL_RCC_GetClockConfig+0x60>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 020f 	and.w	r2, r3, #15
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	601a      	str	r2, [r3, #0]
}
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	40023800 	.word	0x40023800
 8008a3c:	40023c00 	.word	0x40023c00

08008a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d012      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008a68:	4b69      	ldr	r3, [pc, #420]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	4a68      	ldr	r2, [pc, #416]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a6e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008a72:	6093      	str	r3, [r2, #8]
 8008a74:	4b66      	ldr	r3, [pc, #408]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a76:	689a      	ldr	r2, [r3, #8]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a7c:	4964      	ldr	r1, [pc, #400]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d017      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008aa0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa8:	4959      	ldr	r1, [pc, #356]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ab8:	d101      	bne.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008aba:	2301      	movs	r3, #1
 8008abc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d017      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008adc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae4:	494a      	ldr	r1, [pc, #296]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008af4:	d101      	bne.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008af6:	2301      	movs	r3, #1
 8008af8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008b02:	2301      	movs	r3, #1
 8008b04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008b12:	2301      	movs	r3, #1
 8008b14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 808b 	beq.w	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008b24:	4b3a      	ldr	r3, [pc, #232]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b28:	4a39      	ldr	r2, [pc, #228]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b30:	4b37      	ldr	r3, [pc, #220]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b38:	60bb      	str	r3, [r7, #8]
 8008b3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b3c:	4b35      	ldr	r3, [pc, #212]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a34      	ldr	r2, [pc, #208]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b48:	f7f9 fd64 	bl	8002614 <HAL_GetTick>
 8008b4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b50:	f7f9 fd60 	bl	8002614 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b64      	cmp	r3, #100	@ 0x64
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e357      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008b62:	4b2c      	ldr	r3, [pc, #176]	@ (8008c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0f0      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b6e:	4b28      	ldr	r3, [pc, #160]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d035      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d02e      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b8c:	4b20      	ldr	r3, [pc, #128]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b96:	4b1e      	ldr	r3, [pc, #120]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ba0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008bae:	4a18      	ldr	r2, [pc, #96]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008bb4:	4b16      	ldr	r3, [pc, #88]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d114      	bne.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc0:	f7f9 fd28 	bl	8002614 <HAL_GetTick>
 8008bc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bc6:	e00a      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bc8:	f7f9 fd24 	bl	8002614 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d901      	bls.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e319      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bde:	4b0c      	ldr	r3, [pc, #48]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0ee      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bf6:	d111      	bne.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008bf8:	4b05      	ldr	r3, [pc, #20]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008c04:	4b04      	ldr	r3, [pc, #16]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008c06:	400b      	ands	r3, r1
 8008c08:	4901      	ldr	r1, [pc, #4]	@ (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	608b      	str	r3, [r1, #8]
 8008c0e:	e00b      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008c10:	40023800 	.word	0x40023800
 8008c14:	40007000 	.word	0x40007000
 8008c18:	0ffffcff 	.word	0x0ffffcff
 8008c1c:	4baa      	ldr	r3, [pc, #680]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	4aa9      	ldr	r2, [pc, #676]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c22:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008c26:	6093      	str	r3, [r2, #8]
 8008c28:	4ba7      	ldr	r3, [pc, #668]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c34:	49a4      	ldr	r1, [pc, #656]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c36:	4313      	orrs	r3, r2
 8008c38:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0310 	and.w	r3, r3, #16
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d010      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c46:	4ba0      	ldr	r3, [pc, #640]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c4c:	4a9e      	ldr	r2, [pc, #632]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008c56:	4b9c      	ldr	r3, [pc, #624]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c58:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c60:	4999      	ldr	r1, [pc, #612]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00a      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c74:	4b94      	ldr	r3, [pc, #592]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c82:	4991      	ldr	r1, [pc, #580]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c96:	4b8c      	ldr	r3, [pc, #560]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ca4:	4988      	ldr	r1, [pc, #544]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00a      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008cb8:	4b83      	ldr	r3, [pc, #524]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cc6:	4980      	ldr	r1, [pc, #512]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008cda:	4b7b      	ldr	r3, [pc, #492]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ce8:	4977      	ldr	r1, [pc, #476]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00a      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008cfc:	4b72      	ldr	r3, [pc, #456]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d02:	f023 0203 	bic.w	r2, r3, #3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d0a:	496f      	ldr	r1, [pc, #444]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d24:	f023 020c 	bic.w	r2, r3, #12
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d2c:	4966      	ldr	r1, [pc, #408]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00a      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008d40:	4b61      	ldr	r3, [pc, #388]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d46:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d4e:	495e      	ldr	r1, [pc, #376]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008d62:	4b59      	ldr	r3, [pc, #356]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d68:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d70:	4955      	ldr	r1, [pc, #340]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00a      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008d84:	4b50      	ldr	r3, [pc, #320]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d92:	494d      	ldr	r1, [pc, #308]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008da6:	4b48      	ldr	r3, [pc, #288]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db4:	4944      	ldr	r1, [pc, #272]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00a      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dd6:	493c      	ldr	r1, [pc, #240]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00a      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008dea:	4b37      	ldr	r3, [pc, #220]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008df8:	4933      	ldr	r1, [pc, #204]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00a      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e12:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e1a:	492b      	ldr	r1, [pc, #172]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d011      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008e2e:	4b26      	ldr	r3, [pc, #152]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e34:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e3c:	4922      	ldr	r1, [pc, #136]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e4c:	d101      	bne.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0308 	and.w	r3, r3, #8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e6e:	4b16      	ldr	r3, [pc, #88]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e74:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e7c:	4912      	ldr	r1, [pc, #72]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008e90:	4b0d      	ldr	r3, [pc, #52]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e96:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ea0:	4909      	ldr	r1, [pc, #36]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d006      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 80d9 	beq.w	800906e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008ebc:	4b02      	ldr	r3, [pc, #8]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a01      	ldr	r2, [pc, #4]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ec2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ec6:	e001      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008ec8:	40023800 	.word	0x40023800
 8008ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ece:	f7f9 fba1 	bl	8002614 <HAL_GetTick>
 8008ed2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ed4:	e008      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008ed6:	f7f9 fb9d 	bl	8002614 <HAL_GetTick>
 8008eda:	4602      	mov	r2, r0
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	2b64      	cmp	r3, #100	@ 0x64
 8008ee2:	d901      	bls.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e194      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1f0      	bne.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d021      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d11d      	bne.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008f08:	4b64      	ldr	r3, [pc, #400]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f0e:	0c1b      	lsrs	r3, r3, #16
 8008f10:	f003 0303 	and.w	r3, r3, #3
 8008f14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008f16:	4b61      	ldr	r3, [pc, #388]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f1c:	0e1b      	lsrs	r3, r3, #24
 8008f1e:	f003 030f 	and.w	r3, r3, #15
 8008f22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	019a      	lsls	r2, r3, #6
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	041b      	lsls	r3, r3, #16
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	061b      	lsls	r3, r3, #24
 8008f34:	431a      	orrs	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	071b      	lsls	r3, r3, #28
 8008f3c:	4957      	ldr	r1, [pc, #348]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d004      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f58:	d00a      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d02e      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f6e:	d129      	bne.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008f70:	4b4a      	ldr	r3, [pc, #296]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f76:	0c1b      	lsrs	r3, r3, #16
 8008f78:	f003 0303 	and.w	r3, r3, #3
 8008f7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f7e:	4b47      	ldr	r3, [pc, #284]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f84:	0f1b      	lsrs	r3, r3, #28
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	019a      	lsls	r2, r3, #6
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	041b      	lsls	r3, r3, #16
 8008f96:	431a      	orrs	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	061b      	lsls	r3, r3, #24
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	071b      	lsls	r3, r3, #28
 8008fa4:	493d      	ldr	r1, [pc, #244]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008fac:	4b3b      	ldr	r3, [pc, #236]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fb2:	f023 021f 	bic.w	r2, r3, #31
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	4937      	ldr	r1, [pc, #220]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d01d      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008fd0:	4b32      	ldr	r3, [pc, #200]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fd6:	0e1b      	lsrs	r3, r3, #24
 8008fd8:	f003 030f 	and.w	r3, r3, #15
 8008fdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008fde:	4b2f      	ldr	r3, [pc, #188]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fe4:	0f1b      	lsrs	r3, r3, #28
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	019a      	lsls	r2, r3, #6
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	041b      	lsls	r3, r3, #16
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	061b      	lsls	r3, r3, #24
 8008ffe:	431a      	orrs	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	071b      	lsls	r3, r3, #28
 8009004:	4925      	ldr	r1, [pc, #148]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009006:	4313      	orrs	r3, r2
 8009008:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d011      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	019a      	lsls	r2, r3, #6
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	041b      	lsls	r3, r3, #16
 8009024:	431a      	orrs	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	061b      	lsls	r3, r3, #24
 800902c:	431a      	orrs	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	071b      	lsls	r3, r3, #28
 8009034:	4919      	ldr	r1, [pc, #100]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009036:	4313      	orrs	r3, r2
 8009038:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800903c:	4b17      	ldr	r3, [pc, #92]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a16      	ldr	r2, [pc, #88]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009042:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009048:	f7f9 fae4 	bl	8002614 <HAL_GetTick>
 800904c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800904e:	e008      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009050:	f7f9 fae0 	bl	8002614 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	2b64      	cmp	r3, #100	@ 0x64
 800905c:	d901      	bls.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e0d7      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009062:	4b0e      	ldr	r3, [pc, #56]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0f0      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	2b01      	cmp	r3, #1
 8009072:	f040 80cd 	bne.w	8009210 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009076:	4b09      	ldr	r3, [pc, #36]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a08      	ldr	r2, [pc, #32]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800907c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009082:	f7f9 fac7 	bl	8002614 <HAL_GetTick>
 8009086:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009088:	e00a      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800908a:	f7f9 fac3 	bl	8002614 <HAL_GetTick>
 800908e:	4602      	mov	r2, r0
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	2b64      	cmp	r3, #100	@ 0x64
 8009096:	d903      	bls.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e0ba      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800909c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80090a0:	4b5e      	ldr	r3, [pc, #376]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ac:	d0ed      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d009      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d02e      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d12a      	bne.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80090d6:	4b51      	ldr	r3, [pc, #324]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090dc:	0c1b      	lsrs	r3, r3, #16
 80090de:	f003 0303 	and.w	r3, r3, #3
 80090e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80090e4:	4b4d      	ldr	r3, [pc, #308]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ea:	0f1b      	lsrs	r3, r3, #28
 80090ec:	f003 0307 	and.w	r3, r3, #7
 80090f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	019a      	lsls	r2, r3, #6
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	041b      	lsls	r3, r3, #16
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	061b      	lsls	r3, r3, #24
 8009104:	431a      	orrs	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	071b      	lsls	r3, r3, #28
 800910a:	4944      	ldr	r1, [pc, #272]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800910c:	4313      	orrs	r3, r2
 800910e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009112:	4b42      	ldr	r3, [pc, #264]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009118:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009120:	3b01      	subs	r3, #1
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	493d      	ldr	r1, [pc, #244]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009126:	4313      	orrs	r3, r2
 8009128:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d022      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800913c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009140:	d11d      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009142:	4b36      	ldr	r3, [pc, #216]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009148:	0e1b      	lsrs	r3, r3, #24
 800914a:	f003 030f 	and.w	r3, r3, #15
 800914e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009150:	4b32      	ldr	r3, [pc, #200]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009156:	0f1b      	lsrs	r3, r3, #28
 8009158:	f003 0307 	and.w	r3, r3, #7
 800915c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	019a      	lsls	r2, r3, #6
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	041b      	lsls	r3, r3, #16
 800916a:	431a      	orrs	r2, r3
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	061b      	lsls	r3, r3, #24
 8009170:	431a      	orrs	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	071b      	lsls	r3, r3, #28
 8009176:	4929      	ldr	r1, [pc, #164]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009178:	4313      	orrs	r3, r2
 800917a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0308 	and.w	r3, r3, #8
 8009186:	2b00      	cmp	r3, #0
 8009188:	d028      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800918a:	4b24      	ldr	r3, [pc, #144]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800918c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009190:	0e1b      	lsrs	r3, r3, #24
 8009192:	f003 030f 	and.w	r3, r3, #15
 8009196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009198:	4b20      	ldr	r3, [pc, #128]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800919a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800919e:	0c1b      	lsrs	r3, r3, #16
 80091a0:	f003 0303 	and.w	r3, r3, #3
 80091a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	019a      	lsls	r2, r3, #6
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	041b      	lsls	r3, r3, #16
 80091b0:	431a      	orrs	r2, r3
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	061b      	lsls	r3, r3, #24
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	69db      	ldr	r3, [r3, #28]
 80091bc:	071b      	lsls	r3, r3, #28
 80091be:	4917      	ldr	r1, [pc, #92]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80091c6:	4b15      	ldr	r3, [pc, #84]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d4:	4911      	ldr	r1, [pc, #68]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80091dc:	4b0f      	ldr	r3, [pc, #60]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a0e      	ldr	r2, [pc, #56]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091e8:	f7f9 fa14 	bl	8002614 <HAL_GetTick>
 80091ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80091ee:	e008      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80091f0:	f7f9 fa10 	bl	8002614 <HAL_GetTick>
 80091f4:	4602      	mov	r2, r0
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	2b64      	cmp	r3, #100	@ 0x64
 80091fc:	d901      	bls.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e007      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009202:	4b06      	ldr	r3, [pc, #24]	@ (800921c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800920a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800920e:	d1ef      	bne.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3720      	adds	r7, #32
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	40023800 	.word	0x40023800

08009220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e09d      	b.n	800936e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009236:	2b00      	cmp	r3, #0
 8009238:	d108      	bne.n	800924c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009242:	d009      	beq.n	8009258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	61da      	str	r2, [r3, #28]
 800924a:	e005      	b.n	8009258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d106      	bne.n	8009278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7f8 faea 	bl	800184c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2202      	movs	r2, #2
 800927c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800928e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009298:	d902      	bls.n	80092a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	e002      	b.n	80092a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80092a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80092a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80092ae:	d007      	beq.n	80092c0 <HAL_SPI_Init+0xa0>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80092b8:	d002      	beq.n	80092c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	431a      	orrs	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092ee:	431a      	orrs	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	69db      	ldr	r3, [r3, #28]
 80092f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092f8:	431a      	orrs	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009302:	ea42 0103 	orr.w	r1, r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800930a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	0c1b      	lsrs	r3, r3, #16
 800931c:	f003 0204 	and.w	r2, r3, #4
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009324:	f003 0310 	and.w	r3, r3, #16
 8009328:	431a      	orrs	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800932e:	f003 0308 	and.w	r3, r3, #8
 8009332:	431a      	orrs	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800933c:	ea42 0103 	orr.w	r1, r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69da      	ldr	r2, [r3, #28]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800935c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b088      	sub	sp, #32
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	603b      	str	r3, [r7, #0]
 8009382:	4613      	mov	r3, r2
 8009384:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009386:	f7f9 f945 	bl	8002614 <HAL_GetTick>
 800938a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800938c:	88fb      	ldrh	r3, [r7, #6]
 800938e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b01      	cmp	r3, #1
 800939a:	d001      	beq.n	80093a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800939c:	2302      	movs	r3, #2
 800939e:	e15c      	b.n	800965a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <HAL_SPI_Transmit+0x36>
 80093a6:	88fb      	ldrh	r3, [r7, #6]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e154      	b.n	800965a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d101      	bne.n	80093be <HAL_SPI_Transmit+0x48>
 80093ba:	2302      	movs	r3, #2
 80093bc:	e14d      	b.n	800965a <HAL_SPI_Transmit+0x2e4>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2203      	movs	r2, #3
 80093ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	88fa      	ldrh	r2, [r7, #6]
 80093de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	88fa      	ldrh	r2, [r7, #6]
 80093e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009410:	d10f      	bne.n	8009432 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009420:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009430:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800943c:	2b40      	cmp	r3, #64	@ 0x40
 800943e:	d007      	beq.n	8009450 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800944e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009458:	d952      	bls.n	8009500 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <HAL_SPI_Transmit+0xf2>
 8009462:	8b7b      	ldrh	r3, [r7, #26]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d145      	bne.n	80094f4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946c:	881a      	ldrh	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009478:	1c9a      	adds	r2, r3, #2
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009482:	b29b      	uxth	r3, r3
 8009484:	3b01      	subs	r3, #1
 8009486:	b29a      	uxth	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800948c:	e032      	b.n	80094f4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 0302 	and.w	r3, r3, #2
 8009498:	2b02      	cmp	r3, #2
 800949a:	d112      	bne.n	80094c2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a0:	881a      	ldrh	r2, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ac:	1c9a      	adds	r2, r3, #2
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	3b01      	subs	r3, #1
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80094c0:	e018      	b.n	80094f4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094c2:	f7f9 f8a7 	bl	8002614 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d803      	bhi.n	80094da <HAL_SPI_Transmit+0x164>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d8:	d102      	bne.n	80094e0 <HAL_SPI_Transmit+0x16a>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d109      	bne.n	80094f4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	e0b2      	b.n	800965a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1c7      	bne.n	800948e <HAL_SPI_Transmit+0x118>
 80094fe:	e083      	b.n	8009608 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <HAL_SPI_Transmit+0x198>
 8009508:	8b7b      	ldrh	r3, [r7, #26]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d177      	bne.n	80095fe <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009512:	b29b      	uxth	r3, r3
 8009514:	2b01      	cmp	r3, #1
 8009516:	d912      	bls.n	800953e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800951c:	881a      	ldrh	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009528:	1c9a      	adds	r2, r3, #2
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009532:	b29b      	uxth	r3, r3
 8009534:	3b02      	subs	r3, #2
 8009536:	b29a      	uxth	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800953c:	e05f      	b.n	80095fe <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	330c      	adds	r3, #12
 8009548:	7812      	ldrb	r2, [r2, #0]
 800954a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009550:	1c5a      	adds	r2, r3, #1
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800955a:	b29b      	uxth	r3, r3
 800955c:	3b01      	subs	r3, #1
 800955e:	b29a      	uxth	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009564:	e04b      	b.n	80095fe <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	2b02      	cmp	r3, #2
 8009572:	d12b      	bne.n	80095cc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009578:	b29b      	uxth	r3, r3
 800957a:	2b01      	cmp	r3, #1
 800957c:	d912      	bls.n	80095a4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009582:	881a      	ldrh	r2, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800958e:	1c9a      	adds	r2, r3, #2
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009598:	b29b      	uxth	r3, r3
 800959a:	3b02      	subs	r3, #2
 800959c:	b29a      	uxth	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80095a2:	e02c      	b.n	80095fe <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	330c      	adds	r3, #12
 80095ae:	7812      	ldrb	r2, [r2, #0]
 80095b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b6:	1c5a      	adds	r2, r3, #1
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80095ca:	e018      	b.n	80095fe <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095cc:	f7f9 f822 	bl	8002614 <HAL_GetTick>
 80095d0:	4602      	mov	r2, r0
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d803      	bhi.n	80095e4 <HAL_SPI_Transmit+0x26e>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e2:	d102      	bne.n	80095ea <HAL_SPI_Transmit+0x274>
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d109      	bne.n	80095fe <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e02d      	b.n	800965a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009602:	b29b      	uxth	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1ae      	bne.n	8009566 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009608:	69fa      	ldr	r2, [r7, #28]
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 ff7d 	bl	800a50c <SPI_EndRxTxTransaction>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2220      	movs	r2, #32
 800961c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10a      	bne.n	800963c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009626:	2300      	movs	r3, #0
 8009628:	617b      	str	r3, [r7, #20]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	617b      	str	r3, [r7, #20]
 800963a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e000      	b.n	800965a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009658:	2300      	movs	r3, #0
  }
}
 800965a:	4618      	mov	r0, r3
 800965c:	3720      	adds	r7, #32
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	4613      	mov	r3, r2
 8009670:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b01      	cmp	r3, #1
 800967c:	d001      	beq.n	8009682 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800967e:	2302      	movs	r3, #2
 8009680:	e092      	b.n	80097a8 <HAL_SPI_Receive_IT+0x144>
  }

  if ((pData == NULL) || (Size == 0U))
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <HAL_SPI_Receive_IT+0x2a>
 8009688:	88fb      	ldrh	r3, [r7, #6]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e08a      	b.n	80097a8 <HAL_SPI_Receive_IT+0x144>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d110      	bne.n	80096bc <HAL_SPI_Receive_IT+0x58>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096a2:	d10b      	bne.n	80096bc <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2204      	movs	r2, #4
 80096a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80096ac:	88fb      	ldrh	r3, [r7, #6]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 f880 	bl	80097b8 <HAL_SPI_TransmitReceive_IT>
 80096b8:	4603      	mov	r3, r0
 80096ba:	e075      	b.n	80097a8 <HAL_SPI_Receive_IT+0x144>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d101      	bne.n	80096ca <HAL_SPI_Receive_IT+0x66>
 80096c6:	2302      	movs	r3, #2
 80096c8:	e06e      	b.n	80097a8 <HAL_SPI_Receive_IT+0x144>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2204      	movs	r2, #4
 80096d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	88fa      	ldrh	r2, [r7, #6]
 80096ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	88fa      	ldrh	r2, [r7, #6]
 80096f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009716:	d90b      	bls.n	8009730 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009726:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4a21      	ldr	r2, [pc, #132]	@ (80097b0 <HAL_SPI_Receive_IT+0x14c>)
 800972c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800972e:	e00a      	b.n	8009746 <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800973e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	4a1c      	ldr	r2, [pc, #112]	@ (80097b4 <HAL_SPI_Receive_IT+0x150>)
 8009744:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800974e:	d10f      	bne.n	8009770 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800975e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800976e:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800977a:	2b40      	cmp	r3, #64	@ 0x40
 800977c:	d007      	beq.n	800978e <HAL_SPI_Receive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800978c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80097a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	0800a18d 	.word	0x0800a18d
 80097b4:	0800a13d 	.word	0x0800a13d

080097b8 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80097cc:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d00c      	beq.n	80097f4 <HAL_SPI_TransmitReceive_IT+0x3c>
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097e0:	d106      	bne.n	80097f0 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <HAL_SPI_TransmitReceive_IT+0x38>
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	d001      	beq.n	80097f4 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80097f0:	2302      	movs	r3, #2
 80097f2:	e07d      	b.n	80098f0 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <HAL_SPI_TransmitReceive_IT+0x4e>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <HAL_SPI_TransmitReceive_IT+0x4e>
 8009800:	887b      	ldrh	r3, [r7, #2]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e072      	b.n	80098f0 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_SPI_TransmitReceive_IT+0x60>
 8009814:	2302      	movs	r3, #2
 8009816:	e06b      	b.n	80098f0 <HAL_SPI_TransmitReceive_IT+0x138>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b04      	cmp	r3, #4
 800982a:	d003      	beq.n	8009834 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2205      	movs	r2, #5
 8009830:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	887a      	ldrh	r2, [r7, #2]
 8009844:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	887a      	ldrh	r2, [r7, #2]
 800984a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	887a      	ldrh	r2, [r7, #2]
 8009856:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	887a      	ldrh	r2, [r7, #2]
 800985e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800986a:	d906      	bls.n	800987a <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4a23      	ldr	r2, [pc, #140]	@ (80098fc <HAL_SPI_TransmitReceive_IT+0x144>)
 8009870:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4a22      	ldr	r2, [pc, #136]	@ (8009900 <HAL_SPI_TransmitReceive_IT+0x148>)
 8009876:	651a      	str	r2, [r3, #80]	@ 0x50
 8009878:	e005      	b.n	8009886 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4a21      	ldr	r2, [pc, #132]	@ (8009904 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800987e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4a21      	ldr	r2, [pc, #132]	@ (8009908 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009884:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800988e:	d802      	bhi.n	8009896 <HAL_SPI_TransmitReceive_IT+0xde>
 8009890:	887b      	ldrh	r3, [r7, #2]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d908      	bls.n	80098a8 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80098a4:	605a      	str	r2, [r3, #4]
 80098a6:	e007      	b.n	80098b8 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80098b6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c2:	2b40      	cmp	r3, #64	@ 0x40
 80098c4:	d007      	beq.n	80098d6 <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098d4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80098ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	371c      	adds	r7, #28
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	0800a077 	.word	0x0800a077
 8009900:	0800a0dd 	.word	0x0800a0dd
 8009904:	08009f27 	.word	0x08009f27
 8009908:	08009fe5 	.word	0x08009fe5

0800990c <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8009918:	2301      	movs	r3, #1
 800991a:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800991c:	4b72      	ldr	r3, [pc, #456]	@ (8009ae8 <HAL_SPI_Abort_IT+0x1dc>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a72      	ldr	r2, [pc, #456]	@ (8009aec <HAL_SPI_Abort_IT+0x1e0>)
 8009922:	fba2 2303 	umull	r2, r3, r2, r3
 8009926:	0a5b      	lsrs	r3, r3, #9
 8009928:	2264      	movs	r2, #100	@ 0x64
 800992a:	fb02 f303 	mul.w	r3, r2, r3
 800992e:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 0220 	bic.w	r2, r2, #32
 8009942:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800994e:	2b80      	cmp	r3, #128	@ 0x80
 8009950:	d117      	bne.n	8009982 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a66      	ldr	r2, [pc, #408]	@ (8009af0 <HAL_SPI_Abort_IT+0x1e4>)
 8009956:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d106      	bne.n	800996c <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009962:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800996a:	e008      	b.n	800997e <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	3b01      	subs	r3, #1
 8009970:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b07      	cmp	r3, #7
 800997c:	d1ec      	bne.n	8009958 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800998c:	2b40      	cmp	r3, #64	@ 0x40
 800998e:	d117      	bne.n	80099c0 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a58      	ldr	r2, [pc, #352]	@ (8009af4 <HAL_SPI_Abort_IT+0x1e8>)
 8009994:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d106      	bne.n	80099aa <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80099a8:	e008      	b.n	80099bc <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b07      	cmp	r3, #7
 80099ba:	d1ec      	bne.n	8009996 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00f      	beq.n	80099e8 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f003 0302 	and.w	r3, r3, #2
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d104      	bne.n	80099e0 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099da:	4a47      	ldr	r2, [pc, #284]	@ (8009af8 <HAL_SPI_Abort_IT+0x1ec>)
 80099dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80099de:	e003      	b.n	80099e8 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099e4:	2200      	movs	r2, #0
 80099e6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00f      	beq.n	8009a10 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d104      	bne.n	8009a08 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a02:	4a3e      	ldr	r2, [pc, #248]	@ (8009afc <HAL_SPI_Abort_IT+0x1f0>)
 8009a04:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a06:	e003      	b.n	8009a10 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d115      	bne.n	8009a4a <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d011      	beq.n	8009a4a <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fa f962 	bl	8003cf4 <HAL_DMA_Abort_IT>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2240      	movs	r2, #64	@ 0x40
 8009a42:	661a      	str	r2, [r3, #96]	@ 0x60
 8009a44:	e001      	b.n	8009a4a <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d115      	bne.n	8009a84 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d011      	beq.n	8009a84 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fa f945 	bl	8003cf4 <HAL_DMA_Abort_IT>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d007      	beq.n	8009a80 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a74:	2200      	movs	r2, #0
 8009a76:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2240      	movs	r2, #64	@ 0x40
 8009a7c:	661a      	str	r2, [r3, #96]	@ 0x60
 8009a7e:	e001      	b.n	8009a84 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d129      	bne.n	8009ade <HAL_SPI_Abort_IT+0x1d2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->TxXferCount = 0U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	87da      	strh	r2, [r3, #62]	@ 0x3e

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a9c:	2b40      	cmp	r3, #64	@ 0x40
 8009a9e:	d102      	bne.n	8009aa6 <HAL_SPI_Abort_IT+0x19a>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	77fb      	strb	r3, [r7, #31]
 8009aa4:	e002      	b.n	8009aac <HAL_SPI_Abort_IT+0x1a0>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009aac:	2300      	movs	r3, #0
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	60bb      	str	r3, [r7, #8]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	60bb      	str	r3, [r7, #8]
 8009ace:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f925 	bl	8009d28 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8009ade:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3720      	adds	r7, #32
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	20000000 	.word	0x20000000
 8009aec:	057619f1 	.word	0x057619f1
 8009af0:	0800a785 	.word	0x0800a785
 8009af4:	0800a6c5 	.word	0x0800a6c5
 8009af8:	08009d67 	.word	0x08009d67
 8009afc:	08009e45 	.word	0x08009e45

08009b00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	099b      	lsrs	r3, r3, #6
 8009b1c:	f003 0301 	and.w	r3, r3, #1
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10f      	bne.n	8009b44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	099b      	lsrs	r3, r3, #6
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d004      	beq.n	8009b44 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	4798      	blx	r3
    return;
 8009b42:	e0d7      	b.n	8009cf4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	085b      	lsrs	r3, r3, #1
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00a      	beq.n	8009b66 <HAL_SPI_IRQHandler+0x66>
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	09db      	lsrs	r3, r3, #7
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d004      	beq.n	8009b66 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	4798      	blx	r3
    return;
 8009b64:	e0c6      	b.n	8009cf4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	095b      	lsrs	r3, r3, #5
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10c      	bne.n	8009b8c <HAL_SPI_IRQHandler+0x8c>
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	099b      	lsrs	r3, r3, #6
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d106      	bne.n	8009b8c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	0a1b      	lsrs	r3, r3, #8
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 80b4 	beq.w	8009cf4 <HAL_SPI_IRQHandler+0x1f4>
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	095b      	lsrs	r3, r3, #5
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 80ad 	beq.w	8009cf4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	099b      	lsrs	r3, r3, #6
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d023      	beq.n	8009bee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d011      	beq.n	8009bd6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bb6:	f043 0204 	orr.w	r2, r3, #4
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	617b      	str	r3, [r7, #20]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	617b      	str	r3, [r7, #20]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	617b      	str	r3, [r7, #20]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	e00b      	b.n	8009bee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	613b      	str	r3, [r7, #16]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	613b      	str	r3, [r7, #16]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	613b      	str	r3, [r7, #16]
 8009bea:	693b      	ldr	r3, [r7, #16]
        return;
 8009bec:	e082      	b.n	8009cf4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	095b      	lsrs	r3, r3, #5
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d014      	beq.n	8009c24 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bfe:	f043 0201 	orr.w	r2, r3, #1
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	60fb      	str	r3, [r7, #12]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	0a1b      	lsrs	r3, r3, #8
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00c      	beq.n	8009c4a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c34:	f043 0208 	orr.w	r2, r3, #8
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60bb      	str	r3, [r7, #8]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	60bb      	str	r3, [r7, #8]
 8009c48:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d04f      	beq.n	8009cf2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009c60:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	f003 0302 	and.w	r3, r3, #2
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d104      	bne.n	8009c7e <HAL_SPI_IRQHandler+0x17e>
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d034      	beq.n	8009ce8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0203 	bic.w	r2, r2, #3
 8009c8c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d011      	beq.n	8009cba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c9a:	4a18      	ldr	r2, [pc, #96]	@ (8009cfc <HAL_SPI_IRQHandler+0x1fc>)
 8009c9c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fa f826 	bl	8003cf4 <HAL_DMA_Abort_IT>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d005      	beq.n	8009cba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d016      	beq.n	8009cf0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cc6:	4a0d      	ldr	r2, [pc, #52]	@ (8009cfc <HAL_SPI_IRQHandler+0x1fc>)
 8009cc8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fa f810 	bl	8003cf4 <HAL_DMA_Abort_IT>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009ce6:	e003      	b.n	8009cf0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f813 	bl	8009d14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009cee:	e000      	b.n	8009cf2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009cf0:	bf00      	nop
    return;
 8009cf2:	bf00      	nop
  }
}
 8009cf4:	3720      	adds	r7, #32
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	08009d3d 	.word	0x08009d3d

08009d00 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff ffdb 	bl	8009d14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d5e:	bf00      	nop
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b088      	sub	sp, #32
 8009d6a:	af02      	add	r7, sp, #8
 8009d6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d72:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d78:	2200      	movs	r2, #0
 8009d7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f022 0202 	bic.w	r2, r2, #2
 8009d8a:	605a      	str	r2, [r3, #4]

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009d8c:	f7f8 fc42 	bl	8002614 <HAL_GetTick>
 8009d90:	4603      	mov	r3, r0
 8009d92:	461a      	mov	r2, r3
 8009d94:	2164      	movs	r1, #100	@ 0x64
 8009d96:	6978      	ldr	r0, [r7, #20]
 8009d98:	f000 fbb8 	bl	800a50c <SPI_EndRxTxTransaction>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d002      	beq.n	8009da8 <SPI_DMATxAbortCallback+0x42>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2240      	movs	r2, #64	@ 0x40
 8009da6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009db6:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009db8:	f7f8 fc2c 	bl	8002614 <HAL_GetTick>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	2364      	movs	r3, #100	@ 0x64
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009dc8:	6978      	ldr	r0, [r7, #20]
 8009dca:	f000 fa8d 	bl	800a2e8 <SPI_WaitFifoStateUntilTimeout>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <SPI_DMATxAbortCallback+0x74>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	2240      	movs	r2, #64	@ 0x40
 8009dd8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d004      	beq.n	8009dec <SPI_DMATxAbortCallback+0x86>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d127      	bne.n	8009e3c <SPI_DMATxAbortCallback+0xd6>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	2200      	movs	r2, #0
 8009df8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dfe:	2b40      	cmp	r3, #64	@ 0x40
 8009e00:	d002      	beq.n	8009e08 <SPI_DMATxAbortCallback+0xa2>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2200      	movs	r2, #0
 8009e06:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e08:	2300      	movs	r3, #0
 8009e0a:	613b      	str	r3, [r7, #16]
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	613b      	str	r3, [r7, #16]
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	613b      	str	r3, [r7, #16]
 8009e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8009e34:	6978      	ldr	r0, [r7, #20]
 8009e36:	f7ff ff77 	bl	8009d28 <HAL_SPI_AbortCpltCallback>
 8009e3a:	e000      	b.n	8009e3e <SPI_DMATxAbortCallback+0xd8>
      return;
 8009e3c:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e3e:	3718      	adds	r7, #24
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b088      	sub	sp, #32
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e50:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e60:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e66:	2200      	movs	r2, #0
 8009e68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f022 0201 	bic.w	r2, r2, #1
 8009e78:	605a      	str	r2, [r3, #4]

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009e7a:	f7f8 fbcb 	bl	8002614 <HAL_GetTick>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	2364      	movs	r3, #100	@ 0x64
 8009e84:	2200      	movs	r2, #0
 8009e86:	2180      	movs	r1, #128	@ 0x80
 8009e88:	6978      	ldr	r0, [r7, #20]
 8009e8a:	f000 f9a5 	bl	800a1d8 <SPI_WaitFlagStateUntilTimeout>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <SPI_DMARxAbortCallback+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	2240      	movs	r2, #64	@ 0x40
 8009e98:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009e9a:	f7f8 fbbb 	bl	8002614 <HAL_GetTick>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	2364      	movs	r3, #100	@ 0x64
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009eaa:	6978      	ldr	r0, [r7, #20]
 8009eac:	f000 fa1c 	bl	800a2e8 <SPI_WaitFifoStateUntilTimeout>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <SPI_DMARxAbortCallback+0x78>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2240      	movs	r2, #64	@ 0x40
 8009eba:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d004      	beq.n	8009ece <SPI_DMARxAbortCallback+0x8a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d127      	bne.n	8009f1e <SPI_DMARxAbortCallback+0xda>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ee0:	2b40      	cmp	r3, #64	@ 0x40
 8009ee2:	d002      	beq.n	8009eea <SPI_DMARxAbortCallback+0xa6>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009eea:	2300      	movs	r3, #0
 8009eec:	613b      	str	r3, [r7, #16]
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	613b      	str	r3, [r7, #16]
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	613b      	str	r3, [r7, #16]
 8009efe:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009f00:	2300      	movs	r3, #0
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8009f16:	6978      	ldr	r0, [r7, #20]
 8009f18:	f7ff ff06 	bl	8009d28 <HAL_SPI_AbortCpltCallback>
 8009f1c:	e000      	b.n	8009f20 <SPI_DMARxAbortCallback+0xdc>
      return;
 8009f1e:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b082      	sub	sp, #8
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d923      	bls.n	8009f82 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f44:	b292      	uxth	r2, r2
 8009f46:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f4c:	1c9a      	adds	r2, r3, #2
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	3b02      	subs	r3, #2
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d11f      	bne.n	8009fb0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f7e:	605a      	str	r2, [r3, #4]
 8009f80:	e016      	b.n	8009fb0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f103 020c 	add.w	r2, r3, #12
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f8e:	7812      	ldrb	r2, [r2, #0]
 8009f90:	b2d2      	uxtb	r2, r2
 8009f92:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10f      	bne.n	8009fdc <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009fca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d102      	bne.n	8009fdc <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fb02 	bl	800a5e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d912      	bls.n	800a01c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ffa:	881a      	ldrh	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a006:	1c9a      	adds	r2, r3, #2
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a010:	b29b      	uxth	r3, r3
 800a012:	3b02      	subs	r3, #2
 800a014:	b29a      	uxth	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a01a:	e012      	b.n	800a042 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	330c      	adds	r3, #12
 800a026:	7812      	ldrb	r2, [r2, #0]
 800a028:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a038:	b29b      	uxth	r3, r3
 800a03a:	3b01      	subs	r3, #1
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a046:	b29b      	uxth	r3, r3
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d110      	bne.n	800a06e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a05a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a062:	b29b      	uxth	r3, r3
 800a064:	2b00      	cmp	r3, #0
 800a066:	d102      	bne.n	800a06e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fab9 	bl	800a5e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a06e:	bf00      	nop
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68da      	ldr	r2, [r3, #12]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a088:	b292      	uxth	r2, r2
 800a08a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a090:	1c9a      	adds	r2, r3, #2
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10f      	bne.n	800a0d4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d102      	bne.n	800a0d4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fa86 	bl	800a5e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e8:	881a      	ldrh	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f4:	1c9a      	adds	r2, r3, #2
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	3b01      	subs	r3, #1
 800a102:	b29a      	uxth	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d110      	bne.n	800a134 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a120:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a128:	b29b      	uxth	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d102      	bne.n	800a134 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa56 	bl	800a5e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f103 020c 	add.w	r2, r3, #12
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a150:	7812      	ldrb	r2, [r2, #0]
 800a152:	b2d2      	uxtb	r2, r2
 800a154:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a15a:	1c5a      	adds	r2, r3, #1
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a166:	b29b      	uxth	r3, r3
 800a168:	3b01      	subs	r3, #1
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a178:	b29b      	uxth	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d102      	bne.n	800a184 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fa70 	bl	800a664 <SPI_CloseRx_ISR>
  }
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68da      	ldr	r2, [r3, #12]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a19e:	b292      	uxth	r2, r2
 800a1a0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a6:	1c9a      	adds	r2, r3, #2
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d102      	bne.n	800a1d0 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fa4a 	bl	800a664 <SPI_CloseRx_ISR>
  }
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b088      	sub	sp, #32
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	603b      	str	r3, [r7, #0]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a1e8:	f7f8 fa14 	bl	8002614 <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f0:	1a9b      	subs	r3, r3, r2
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a1f8:	f7f8 fa0c 	bl	8002614 <HAL_GetTick>
 800a1fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a1fe:	4b39      	ldr	r3, [pc, #228]	@ (800a2e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	015b      	lsls	r3, r3, #5
 800a204:	0d1b      	lsrs	r3, r3, #20
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	fb02 f303 	mul.w	r3, r2, r3
 800a20c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a20e:	e055      	b.n	800a2bc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a216:	d051      	beq.n	800a2bc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a218:	f7f8 f9fc 	bl	8002614 <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	69fa      	ldr	r2, [r7, #28]
 800a224:	429a      	cmp	r2, r3
 800a226:	d902      	bls.n	800a22e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d13d      	bne.n	800a2aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a23c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a246:	d111      	bne.n	800a26c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a250:	d004      	beq.n	800a25c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a25a:	d107      	bne.n	800a26c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a26a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a274:	d10f      	bne.n	800a296 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a294:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e018      	b.n	800a2dc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d102      	bne.n	800a2b6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	61fb      	str	r3, [r7, #28]
 800a2b4:	e002      	b.n	800a2bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	689a      	ldr	r2, [r3, #8]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	bf0c      	ite	eq
 800a2cc:	2301      	moveq	r3, #1
 800a2ce:	2300      	movne	r3, #0
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d19a      	bne.n	800a210 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3720      	adds	r7, #32
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	20000000 	.word	0x20000000

0800a2e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b08a      	sub	sp, #40	@ 0x28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
 800a2f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a2fa:	f7f8 f98b 	bl	8002614 <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a302:	1a9b      	subs	r3, r3, r2
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	4413      	add	r3, r2
 800a308:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a30a:	f7f8 f983 	bl	8002614 <HAL_GetTick>
 800a30e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	330c      	adds	r3, #12
 800a316:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a318:	4b3d      	ldr	r3, [pc, #244]	@ (800a410 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	4613      	mov	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	00da      	lsls	r2, r3, #3
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	0d1b      	lsrs	r3, r3, #20
 800a328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a32a:	fb02 f303 	mul.w	r3, r2, r3
 800a32e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a330:	e061      	b.n	800a3f6 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a338:	d107      	bne.n	800a34a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d104      	bne.n	800a34a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	b2db      	uxtb	r3, r3
 800a346:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a348:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a350:	d051      	beq.n	800a3f6 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a352:	f7f8 f95f 	bl	8002614 <HAL_GetTick>
 800a356:	4602      	mov	r2, r0
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a35e:	429a      	cmp	r2, r3
 800a360:	d902      	bls.n	800a368 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a364:	2b00      	cmp	r3, #0
 800a366:	d13d      	bne.n	800a3e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a376:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a380:	d111      	bne.n	800a3a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a38a:	d004      	beq.n	800a396 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a394:	d107      	bne.n	800a3a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a3a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3ae:	d10f      	bne.n	800a3d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a3ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e011      	b.n	800a408 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d102      	bne.n	800a3f0 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3ee:	e002      	b.n	800a3f6 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	689a      	ldr	r2, [r3, #8]
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	4013      	ands	r3, r2
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	429a      	cmp	r2, r3
 800a404:	d195      	bne.n	800a332 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3728      	adds	r7, #40	@ 0x28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	20000000 	.word	0x20000000

0800a414 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af02      	add	r7, sp, #8
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a428:	d111      	bne.n	800a44e <SPI_EndRxTransaction+0x3a>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a432:	d004      	beq.n	800a43e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a43c:	d107      	bne.n	800a44e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a44c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a456:	d112      	bne.n	800a47e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2200      	movs	r2, #0
 800a460:	2180      	movs	r1, #128	@ 0x80
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f7ff feb8 	bl	800a1d8 <SPI_WaitFlagStateUntilTimeout>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d021      	beq.n	800a4b2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a472:	f043 0220 	orr.w	r2, r3, #32
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e03d      	b.n	800a4fa <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a47e:	4b21      	ldr	r3, [pc, #132]	@ (800a504 <SPI_EndRxTransaction+0xf0>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a21      	ldr	r2, [pc, #132]	@ (800a508 <SPI_EndRxTransaction+0xf4>)
 800a484:	fba2 2303 	umull	r2, r3, r2, r3
 800a488:	0d5b      	lsrs	r3, r3, #21
 800a48a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a48e:	fb02 f303 	mul.w	r3, r2, r3
 800a492:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	3b01      	subs	r3, #1
 800a49e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4aa:	2b80      	cmp	r3, #128	@ 0x80
 800a4ac:	d0f2      	beq.n	800a494 <SPI_EndRxTransaction+0x80>
 800a4ae:	e000      	b.n	800a4b2 <SPI_EndRxTransaction+0x9e>
        break;
 800a4b0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a4ba:	d11d      	bne.n	800a4f8 <SPI_EndRxTransaction+0xe4>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4c4:	d004      	beq.n	800a4d0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4ce:	d113      	bne.n	800a4f8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f7ff ff03 	bl	800a2e8 <SPI_WaitFifoStateUntilTimeout>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d007      	beq.n	800a4f8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4ec:	f043 0220 	orr.w	r2, r3, #32
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e000      	b.n	800a4fa <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3718      	adds	r7, #24
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	20000000 	.word	0x20000000
 800a508:	165e9f81 	.word	0x165e9f81

0800a50c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af02      	add	r7, sp, #8
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2200      	movs	r2, #0
 800a520:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7ff fedf 	bl	800a2e8 <SPI_WaitFifoStateUntilTimeout>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d007      	beq.n	800a540 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a534:	f043 0220 	orr.w	r2, r3, #32
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e046      	b.n	800a5ce <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a540:	4b25      	ldr	r3, [pc, #148]	@ (800a5d8 <SPI_EndRxTxTransaction+0xcc>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a25      	ldr	r2, [pc, #148]	@ (800a5dc <SPI_EndRxTxTransaction+0xd0>)
 800a546:	fba2 2303 	umull	r2, r3, r2, r3
 800a54a:	0d5b      	lsrs	r3, r3, #21
 800a54c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a550:	fb02 f303 	mul.w	r3, r2, r3
 800a554:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a55e:	d112      	bne.n	800a586 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2200      	movs	r2, #0
 800a568:	2180      	movs	r1, #128	@ 0x80
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7ff fe34 	bl	800a1d8 <SPI_WaitFlagStateUntilTimeout>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d016      	beq.n	800a5a4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a57a:	f043 0220 	orr.w	r2, r3, #32
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	e023      	b.n	800a5ce <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00a      	beq.n	800a5a2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	3b01      	subs	r3, #1
 800a590:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a59c:	2b80      	cmp	r3, #128	@ 0x80
 800a59e:	d0f2      	beq.n	800a586 <SPI_EndRxTxTransaction+0x7a>
 800a5a0:	e000      	b.n	800a5a4 <SPI_EndRxTxTransaction+0x98>
        break;
 800a5a2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7ff fe99 	bl	800a2e8 <SPI_WaitFifoStateUntilTimeout>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d007      	beq.n	800a5cc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5c0:	f043 0220 	orr.w	r2, r3, #32
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e000      	b.n	800a5ce <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3718      	adds	r7, #24
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20000000 	.word	0x20000000
 800a5dc:	165e9f81 	.word	0x165e9f81

0800a5e0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5e8:	f7f8 f814 	bl	8002614 <HAL_GetTick>
 800a5ec:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f022 0220 	bic.w	r2, r2, #32
 800a5fc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	2164      	movs	r1, #100	@ 0x64
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7ff ff82 	bl	800a50c <SPI_EndRxTxTransaction>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d005      	beq.n	800a61a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a612:	f043 0220 	orr.w	r2, r3, #32
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d115      	bne.n	800a64e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d107      	bne.n	800a63e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f012 fef4 	bl	801d424 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a63c:	e00e      	b.n	800a65c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2201      	movs	r2, #1
 800a642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7ff fb5a 	bl	8009d00 <HAL_SPI_TxRxCpltCallback>
}
 800a64c:	e006      	b.n	800a65c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7ff fb5c 	bl	8009d14 <HAL_SPI_ErrorCallback>
}
 800a65c:	bf00      	nop
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a67a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a67c:	f7f7 ffca 	bl	8002614 <HAL_GetTick>
 800a680:	4603      	mov	r3, r0
 800a682:	461a      	mov	r2, r3
 800a684:	2164      	movs	r1, #100	@ 0x64
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff fec4 	bl	800a414 <SPI_EndRxTransaction>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d005      	beq.n	800a69e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a696:	f043 0220 	orr.w	r2, r3, #32
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d103      	bne.n	800a6b6 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f012 feb8 	bl	801d424 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a6b4:	e002      	b.n	800a6bc <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff fb2c 	bl	8009d14 <HAL_SPI_ErrorCallback>
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af02      	add	r7, sp, #8
 800a6ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a6da:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a6dc:	4b27      	ldr	r3, [pc, #156]	@ (800a77c <SPI_AbortRx_ISR+0xb8>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a27      	ldr	r2, [pc, #156]	@ (800a780 <SPI_AbortRx_ISR+0xbc>)
 800a6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e6:	0a5b      	lsrs	r3, r3, #9
 800a6e8:	2264      	movs	r2, #100	@ 0x64
 800a6ea:	fb02 f303 	mul.w	r3, r2, r3
 800a6ee:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a6fe:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d106      	bne.n	800a714 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a70a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800a712:	e009      	b.n	800a728 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	3b01      	subs	r3, #1
 800a718:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a724:	2b40      	cmp	r3, #64	@ 0x40
 800a726:	d0eb      	beq.n	800a700 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a728:	f7f7 ff74 	bl	8002614 <HAL_GetTick>
 800a72c:	4603      	mov	r3, r0
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	2364      	movs	r3, #100	@ 0x64
 800a732:	2200      	movs	r2, #0
 800a734:	2180      	movs	r1, #128	@ 0x80
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7ff fd4e 	bl	800a1d8 <SPI_WaitFlagStateUntilTimeout>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d002      	beq.n	800a748 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2240      	movs	r2, #64	@ 0x40
 800a746:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a748:	f7f7 ff64 	bl	8002614 <HAL_GetTick>
 800a74c:	4603      	mov	r3, r0
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	2364      	movs	r3, #100	@ 0x64
 800a752:	2200      	movs	r2, #0
 800a754:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff fdc5 	bl	800a2e8 <SPI_WaitFifoStateUntilTimeout>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2240      	movs	r2, #64	@ 0x40
 800a768:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2207      	movs	r2, #7
 800a76e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000000 	.word	0x20000000
 800a780:	057619f1 	.word	0x057619f1

0800a784 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af02      	add	r7, sp, #8
 800a78a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a78c:	4b4c      	ldr	r3, [pc, #304]	@ (800a8c0 <SPI_AbortTx_ISR+0x13c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a4c      	ldr	r2, [pc, #304]	@ (800a8c4 <SPI_AbortTx_ISR+0x140>)
 800a792:	fba2 2303 	umull	r2, r3, r2, r3
 800a796:	0a5b      	lsrs	r3, r3, #9
 800a798:	2264      	movs	r2, #100	@ 0x64
 800a79a:	fb02 f303 	mul.w	r3, r2, r3
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a7ae:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d106      	bne.n	800a7c4 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800a7c2:	e009      	b.n	800a7d8 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7d4:	2b80      	cmp	r3, #128	@ 0x80
 800a7d6:	d0eb      	beq.n	800a7b0 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a7d8:	f7f7 ff1c 	bl	8002614 <HAL_GetTick>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	461a      	mov	r2, r3
 800a7e0:	2164      	movs	r1, #100	@ 0x64
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff fe92 	bl	800a50c <SPI_EndRxTxTransaction>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2240      	movs	r2, #64	@ 0x40
 800a7f2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a802:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a804:	f7f7 ff06 	bl	8002614 <HAL_GetTick>
 800a808:	4603      	mov	r3, r0
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	2364      	movs	r3, #100	@ 0x64
 800a80e:	2200      	movs	r2, #0
 800a810:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff fd67 	bl	800a2e8 <SPI_WaitFifoStateUntilTimeout>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2240      	movs	r2, #64	@ 0x40
 800a824:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a830:	2b40      	cmp	r3, #64	@ 0x40
 800a832:	d13c      	bne.n	800a8ae <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a842:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d106      	bne.n	800a858 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a84e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a856:	e009      	b.n	800a86c <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a868:	2b40      	cmp	r3, #64	@ 0x40
 800a86a:	d0eb      	beq.n	800a844 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a86c:	f7f7 fed2 	bl	8002614 <HAL_GetTick>
 800a870:	4603      	mov	r3, r0
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	2364      	movs	r3, #100	@ 0x64
 800a876:	2200      	movs	r2, #0
 800a878:	2180      	movs	r1, #128	@ 0x80
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff fcac 	bl	800a1d8 <SPI_WaitFlagStateUntilTimeout>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d002      	beq.n	800a88c <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2240      	movs	r2, #64	@ 0x40
 800a88a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a88c:	f7f7 fec2 	bl	8002614 <HAL_GetTick>
 800a890:	4603      	mov	r3, r0
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	2364      	movs	r3, #100	@ 0x64
 800a896:	2200      	movs	r2, #0
 800a898:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7ff fd23 	bl	800a2e8 <SPI_WaitFifoStateUntilTimeout>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2240      	movs	r2, #64	@ 0x40
 800a8ac:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2207      	movs	r2, #7
 800a8b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800a8b6:	bf00      	nop
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20000000 	.word	0x20000000
 800a8c4:	057619f1 	.word	0x057619f1

0800a8c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e049      	b.n	800a96e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d106      	bne.n	800a8f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7f7 f86c 	bl	80019cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	3304      	adds	r3, #4
 800a904:	4619      	mov	r1, r3
 800a906:	4610      	mov	r0, r2
 800a908:	f000 fa0e 	bl	800ad28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
	...

0800a978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d001      	beq.n	800a990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e054      	b.n	800aa3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f042 0201 	orr.w	r2, r2, #1
 800a9a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a26      	ldr	r2, [pc, #152]	@ (800aa48 <HAL_TIM_Base_Start_IT+0xd0>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d022      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x80>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ba:	d01d      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x80>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a22      	ldr	r2, [pc, #136]	@ (800aa4c <HAL_TIM_Base_Start_IT+0xd4>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d018      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x80>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a21      	ldr	r2, [pc, #132]	@ (800aa50 <HAL_TIM_Base_Start_IT+0xd8>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d013      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x80>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a1f      	ldr	r2, [pc, #124]	@ (800aa54 <HAL_TIM_Base_Start_IT+0xdc>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d00e      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x80>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a1e      	ldr	r2, [pc, #120]	@ (800aa58 <HAL_TIM_Base_Start_IT+0xe0>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d009      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x80>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a1c      	ldr	r2, [pc, #112]	@ (800aa5c <HAL_TIM_Base_Start_IT+0xe4>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d004      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x80>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a1b      	ldr	r2, [pc, #108]	@ (800aa60 <HAL_TIM_Base_Start_IT+0xe8>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d115      	bne.n	800aa24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	689a      	ldr	r2, [r3, #8]
 800a9fe:	4b19      	ldr	r3, [pc, #100]	@ (800aa64 <HAL_TIM_Base_Start_IT+0xec>)
 800aa00:	4013      	ands	r3, r2
 800aa02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2b06      	cmp	r3, #6
 800aa08:	d015      	beq.n	800aa36 <HAL_TIM_Base_Start_IT+0xbe>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa10:	d011      	beq.n	800aa36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f042 0201 	orr.w	r2, r2, #1
 800aa20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa22:	e008      	b.n	800aa36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f042 0201 	orr.w	r2, r2, #1
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	e000      	b.n	800aa38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	40010000 	.word	0x40010000
 800aa4c:	40000400 	.word	0x40000400
 800aa50:	40000800 	.word	0x40000800
 800aa54:	40000c00 	.word	0x40000c00
 800aa58:	40010400 	.word	0x40010400
 800aa5c:	40014000 	.word	0x40014000
 800aa60:	40001800 	.word	0x40001800
 800aa64:	00010007 	.word	0x00010007

0800aa68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68da      	ldr	r2, [r3, #12]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f022 0201 	bic.w	r2, r2, #1
 800aa7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6a1a      	ldr	r2, [r3, #32]
 800aa86:	4b0f      	ldr	r3, [pc, #60]	@ (800aac4 <HAL_TIM_Base_Stop_IT+0x5c>)
 800aa88:	4013      	ands	r3, r2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10f      	bne.n	800aaae <HAL_TIM_Base_Stop_IT+0x46>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	6a1a      	ldr	r2, [r3, #32]
 800aa94:	f240 4344 	movw	r3, #1092	@ 0x444
 800aa98:	4013      	ands	r3, r2
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d107      	bne.n	800aaae <HAL_TIM_Base_Stop_IT+0x46>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f022 0201 	bic.w	r2, r2, #1
 800aaac:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	00111111 	.word	0x00111111

0800aac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d020      	beq.n	800ab2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f003 0302 	and.w	r3, r3, #2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d01b      	beq.n	800ab2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f06f 0202 	mvn.w	r2, #2
 800aafc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	f003 0303 	and.w	r3, r3, #3
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d003      	beq.n	800ab1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f8e9 	bl	800acea <HAL_TIM_IC_CaptureCallback>
 800ab18:	e005      	b.n	800ab26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 f8db 	bl	800acd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f8ec 	bl	800acfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	f003 0304 	and.w	r3, r3, #4
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d020      	beq.n	800ab78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f003 0304 	and.w	r3, r3, #4
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d01b      	beq.n	800ab78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f06f 0204 	mvn.w	r2, #4
 800ab48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2202      	movs	r2, #2
 800ab4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f8c3 	bl	800acea <HAL_TIM_IC_CaptureCallback>
 800ab64:	e005      	b.n	800ab72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f8b5 	bl	800acd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f8c6 	bl	800acfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f003 0308 	and.w	r3, r3, #8
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d020      	beq.n	800abc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f003 0308 	and.w	r3, r3, #8
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d01b      	beq.n	800abc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f06f 0208 	mvn.w	r2, #8
 800ab94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2204      	movs	r2, #4
 800ab9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f89d 	bl	800acea <HAL_TIM_IC_CaptureCallback>
 800abb0:	e005      	b.n	800abbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f88f 	bl	800acd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f8a0 	bl	800acfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f003 0310 	and.w	r3, r3, #16
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d020      	beq.n	800ac10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f003 0310 	and.w	r3, r3, #16
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01b      	beq.n	800ac10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f06f 0210 	mvn.w	r2, #16
 800abe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2208      	movs	r2, #8
 800abe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f877 	bl	800acea <HAL_TIM_IC_CaptureCallback>
 800abfc:	e005      	b.n	800ac0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f869 	bl	800acd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 f87a 	bl	800acfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00c      	beq.n	800ac34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f003 0301 	and.w	r3, r3, #1
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d007      	beq.n	800ac34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f06f 0201 	mvn.w	r2, #1
 800ac2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7f6 fb6c 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d104      	bne.n	800ac48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00c      	beq.n	800ac62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d007      	beq.n	800ac62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ac5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f9a1 	bl	800afa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00c      	beq.n	800ac86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d007      	beq.n	800ac86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ac7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f999 	bl	800afb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00c      	beq.n	800acaa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d007      	beq.n	800acaa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f834 	bl	800ad12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	f003 0320 	and.w	r3, r3, #32
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00c      	beq.n	800acce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f003 0320 	and.w	r3, r3, #32
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d007      	beq.n	800acce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f06f 0220 	mvn.w	r2, #32
 800acc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f961 	bl	800af90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800acce:	bf00      	nop
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b083      	sub	sp, #12
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acde:	bf00      	nop
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acf2:	bf00      	nop
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b083      	sub	sp, #12
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad06:	bf00      	nop
 800ad08:	370c      	adds	r7, #12
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b083      	sub	sp, #12
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad1a:	bf00      	nop
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
	...

0800ad28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a43      	ldr	r2, [pc, #268]	@ (800ae48 <TIM_Base_SetConfig+0x120>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d013      	beq.n	800ad68 <TIM_Base_SetConfig+0x40>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad46:	d00f      	beq.n	800ad68 <TIM_Base_SetConfig+0x40>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a40      	ldr	r2, [pc, #256]	@ (800ae4c <TIM_Base_SetConfig+0x124>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d00b      	beq.n	800ad68 <TIM_Base_SetConfig+0x40>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a3f      	ldr	r2, [pc, #252]	@ (800ae50 <TIM_Base_SetConfig+0x128>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d007      	beq.n	800ad68 <TIM_Base_SetConfig+0x40>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a3e      	ldr	r2, [pc, #248]	@ (800ae54 <TIM_Base_SetConfig+0x12c>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d003      	beq.n	800ad68 <TIM_Base_SetConfig+0x40>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a3d      	ldr	r2, [pc, #244]	@ (800ae58 <TIM_Base_SetConfig+0x130>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d108      	bne.n	800ad7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a32      	ldr	r2, [pc, #200]	@ (800ae48 <TIM_Base_SetConfig+0x120>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d02b      	beq.n	800adda <TIM_Base_SetConfig+0xb2>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad88:	d027      	beq.n	800adda <TIM_Base_SetConfig+0xb2>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a2f      	ldr	r2, [pc, #188]	@ (800ae4c <TIM_Base_SetConfig+0x124>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d023      	beq.n	800adda <TIM_Base_SetConfig+0xb2>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a2e      	ldr	r2, [pc, #184]	@ (800ae50 <TIM_Base_SetConfig+0x128>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d01f      	beq.n	800adda <TIM_Base_SetConfig+0xb2>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a2d      	ldr	r2, [pc, #180]	@ (800ae54 <TIM_Base_SetConfig+0x12c>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d01b      	beq.n	800adda <TIM_Base_SetConfig+0xb2>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a2c      	ldr	r2, [pc, #176]	@ (800ae58 <TIM_Base_SetConfig+0x130>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d017      	beq.n	800adda <TIM_Base_SetConfig+0xb2>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a2b      	ldr	r2, [pc, #172]	@ (800ae5c <TIM_Base_SetConfig+0x134>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d013      	beq.n	800adda <TIM_Base_SetConfig+0xb2>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a2a      	ldr	r2, [pc, #168]	@ (800ae60 <TIM_Base_SetConfig+0x138>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d00f      	beq.n	800adda <TIM_Base_SetConfig+0xb2>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a29      	ldr	r2, [pc, #164]	@ (800ae64 <TIM_Base_SetConfig+0x13c>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d00b      	beq.n	800adda <TIM_Base_SetConfig+0xb2>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a28      	ldr	r2, [pc, #160]	@ (800ae68 <TIM_Base_SetConfig+0x140>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d007      	beq.n	800adda <TIM_Base_SetConfig+0xb2>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a27      	ldr	r2, [pc, #156]	@ (800ae6c <TIM_Base_SetConfig+0x144>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d003      	beq.n	800adda <TIM_Base_SetConfig+0xb2>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a26      	ldr	r2, [pc, #152]	@ (800ae70 <TIM_Base_SetConfig+0x148>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d108      	bne.n	800adec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ade0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	4313      	orrs	r3, r2
 800adea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	689a      	ldr	r2, [r3, #8]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a0e      	ldr	r2, [pc, #56]	@ (800ae48 <TIM_Base_SetConfig+0x120>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d003      	beq.n	800ae1a <TIM_Base_SetConfig+0xf2>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a10      	ldr	r2, [pc, #64]	@ (800ae58 <TIM_Base_SetConfig+0x130>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d103      	bne.n	800ae22 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	691a      	ldr	r2, [r3, #16]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f043 0204 	orr.w	r2, r3, #4
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	601a      	str	r2, [r3, #0]
}
 800ae3a:	bf00      	nop
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40010000 	.word	0x40010000
 800ae4c:	40000400 	.word	0x40000400
 800ae50:	40000800 	.word	0x40000800
 800ae54:	40000c00 	.word	0x40000c00
 800ae58:	40010400 	.word	0x40010400
 800ae5c:	40014000 	.word	0x40014000
 800ae60:	40014400 	.word	0x40014400
 800ae64:	40014800 	.word	0x40014800
 800ae68:	40001800 	.word	0x40001800
 800ae6c:	40001c00 	.word	0x40001c00
 800ae70:	40002000 	.word	0x40002000

0800ae74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d101      	bne.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	e06d      	b.n	800af68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2202      	movs	r2, #2
 800ae98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a30      	ldr	r2, [pc, #192]	@ (800af74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d004      	beq.n	800aec0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a2f      	ldr	r2, [pc, #188]	@ (800af78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d108      	bne.n	800aed2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aec6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	4313      	orrs	r3, r2
 800aed0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aed8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	4313      	orrs	r3, r2
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a20      	ldr	r2, [pc, #128]	@ (800af74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d022      	beq.n	800af3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aefe:	d01d      	beq.n	800af3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a1d      	ldr	r2, [pc, #116]	@ (800af7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d018      	beq.n	800af3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a1c      	ldr	r2, [pc, #112]	@ (800af80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d013      	beq.n	800af3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a1a      	ldr	r2, [pc, #104]	@ (800af84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d00e      	beq.n	800af3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a15      	ldr	r2, [pc, #84]	@ (800af78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d009      	beq.n	800af3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a16      	ldr	r2, [pc, #88]	@ (800af88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d004      	beq.n	800af3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a15      	ldr	r2, [pc, #84]	@ (800af8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d10c      	bne.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr
 800af74:	40010000 	.word	0x40010000
 800af78:	40010400 	.word	0x40010400
 800af7c:	40000400 	.word	0x40000400
 800af80:	40000800 	.word	0x40000800
 800af84:	40000c00 	.word	0x40000c00
 800af88:	40014000 	.word	0x40014000
 800af8c:	40001800 	.word	0x40001800

0800af90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800afc0:	bf00      	nop
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e040      	b.n	800b060 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d106      	bne.n	800aff4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7f6 fd12 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2224      	movs	r2, #36	@ 0x24
 800aff8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f022 0201 	bic.w	r2, r2, #1
 800b008:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d002      	beq.n	800b018 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f001 f820 	bl	800c058 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fdb9 	bl	800bb90 <UART_SetConfig>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b01      	cmp	r3, #1
 800b022:	d101      	bne.n	800b028 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e01b      	b.n	800b060 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689a      	ldr	r2, [r3, #8]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f042 0201 	orr.w	r2, r2, #1
 800b056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f001 f89f 	bl	800c19c <UART_CheckIdleState>
 800b05e:	4603      	mov	r3, r0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08a      	sub	sp, #40	@ 0x28
 800b06c:	af02      	add	r7, sp, #8
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	603b      	str	r3, [r7, #0]
 800b074:	4613      	mov	r3, r2
 800b076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b07c:	2b20      	cmp	r3, #32
 800b07e:	d177      	bne.n	800b170 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <HAL_UART_Transmit+0x24>
 800b086:	88fb      	ldrh	r3, [r7, #6]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e070      	b.n	800b172 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2221      	movs	r2, #33	@ 0x21
 800b09c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b09e:	f7f7 fab9 	bl	8002614 <HAL_GetTick>
 800b0a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	88fa      	ldrh	r2, [r7, #6]
 800b0a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	88fa      	ldrh	r2, [r7, #6]
 800b0b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0bc:	d108      	bne.n	800b0d0 <HAL_UART_Transmit+0x68>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d104      	bne.n	800b0d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	61bb      	str	r3, [r7, #24]
 800b0ce:	e003      	b.n	800b0d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b0d8:	e02f      	b.n	800b13a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	2180      	movs	r1, #128	@ 0x80
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f001 f8b0 	bl	800c24a <UART_WaitOnFlagUntilTimeout>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d004      	beq.n	800b0fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2220      	movs	r2, #32
 800b0f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	e03b      	b.n	800b172 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10b      	bne.n	800b118 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	881b      	ldrh	r3, [r3, #0]
 800b104:	461a      	mov	r2, r3
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b10e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	3302      	adds	r3, #2
 800b114:	61bb      	str	r3, [r7, #24]
 800b116:	e007      	b.n	800b128 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	3301      	adds	r3, #1
 800b126:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b12e:	b29b      	uxth	r3, r3
 800b130:	3b01      	subs	r3, #1
 800b132:	b29a      	uxth	r2, r3
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b140:	b29b      	uxth	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1c9      	bne.n	800b0da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2200      	movs	r2, #0
 800b14e:	2140      	movs	r1, #64	@ 0x40
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f001 f87a 	bl	800c24a <UART_WaitOnFlagUntilTimeout>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d004      	beq.n	800b166 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2220      	movs	r2, #32
 800b160:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800b162:	2303      	movs	r3, #3
 800b164:	e005      	b.n	800b172 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2220      	movs	r2, #32
 800b16a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800b16c:	2300      	movs	r3, #0
 800b16e:	e000      	b.n	800b172 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800b170:	2302      	movs	r3, #2
  }
}
 800b172:	4618      	mov	r0, r3
 800b174:	3720      	adds	r7, #32
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
	...

0800b17c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b08b      	sub	sp, #44	@ 0x2c
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	4613      	mov	r3, r2
 800b188:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b18e:	2b20      	cmp	r3, #32
 800b190:	d147      	bne.n	800b222 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d002      	beq.n	800b19e <HAL_UART_Transmit_IT+0x22>
 800b198:	88fb      	ldrh	r3, [r7, #6]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e040      	b.n	800b224 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	88fa      	ldrh	r2, [r7, #6]
 800b1ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	88fa      	ldrh	r2, [r7, #6]
 800b1b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2221      	movs	r2, #33	@ 0x21
 800b1ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1d4:	d107      	bne.n	800b1e6 <HAL_UART_Transmit_IT+0x6a>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d103      	bne.n	800b1e6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	4a13      	ldr	r2, [pc, #76]	@ (800b230 <HAL_UART_Transmit_IT+0xb4>)
 800b1e2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b1e4:	e002      	b.n	800b1ec <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	4a12      	ldr	r2, [pc, #72]	@ (800b234 <HAL_UART_Transmit_IT+0xb8>)
 800b1ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	e853 3f00 	ldrex	r3, [r3]
 800b1f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b200:	627b      	str	r3, [r7, #36]	@ 0x24
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20a:	623b      	str	r3, [r7, #32]
 800b20c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20e:	69f9      	ldr	r1, [r7, #28]
 800b210:	6a3a      	ldr	r2, [r7, #32]
 800b212:	e841 2300 	strex	r3, r2, [r1]
 800b216:	61bb      	str	r3, [r7, #24]
   return(result);
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1e6      	bne.n	800b1ec <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	e000      	b.n	800b224 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800b222:	2302      	movs	r3, #2
  }
}
 800b224:	4618      	mov	r0, r3
 800b226:	372c      	adds	r7, #44	@ 0x2c
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	0800cadf 	.word	0x0800cadf
 800b234:	0800ca29 	.word	0x0800ca29

0800b238 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b08a      	sub	sp, #40	@ 0x28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	4613      	mov	r3, r2
 800b244:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b24c:	2b20      	cmp	r3, #32
 800b24e:	d132      	bne.n	800b2b6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <HAL_UART_Receive_IT+0x24>
 800b256:	88fb      	ldrh	r3, [r7, #6]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e02b      	b.n	800b2b8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d018      	beq.n	800b2a6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	e853 3f00 	ldrex	r3, [r3]
 800b280:	613b      	str	r3, [r7, #16]
   return(result);
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b288:	627b      	str	r3, [r7, #36]	@ 0x24
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	461a      	mov	r2, r3
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	623b      	str	r3, [r7, #32]
 800b294:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b296:	69f9      	ldr	r1, [r7, #28]
 800b298:	6a3a      	ldr	r2, [r7, #32]
 800b29a:	e841 2300 	strex	r3, r2, [r1]
 800b29e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1e6      	bne.n	800b274 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b2a6:	88fb      	ldrh	r3, [r7, #6]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	68b9      	ldr	r1, [r7, #8]
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f001 f839 	bl	800c324 <UART_Start_Receive_IT>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	e000      	b.n	800b2b8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b2b6:	2302      	movs	r3, #2
  }
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3728      	adds	r7, #40	@ 0x28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08a      	sub	sp, #40	@ 0x28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2d2:	2b20      	cmp	r3, #32
 800b2d4:	d165      	bne.n	800b3a2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <HAL_UART_Transmit_DMA+0x22>
 800b2dc:	88fb      	ldrh	r3, [r7, #6]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e05e      	b.n	800b3a4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	88fa      	ldrh	r2, [r7, #6]
 800b2f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	88fa      	ldrh	r2, [r7, #6]
 800b2f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2221      	movs	r2, #33	@ 0x21
 800b308:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d027      	beq.n	800b362 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b316:	4a25      	ldr	r2, [pc, #148]	@ (800b3ac <HAL_UART_Transmit_DMA+0xec>)
 800b318:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b31e:	4a24      	ldr	r2, [pc, #144]	@ (800b3b0 <HAL_UART_Transmit_DMA+0xf0>)
 800b320:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b326:	4a23      	ldr	r2, [pc, #140]	@ (800b3b4 <HAL_UART_Transmit_DMA+0xf4>)
 800b328:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b32e:	2200      	movs	r2, #0
 800b330:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b33a:	4619      	mov	r1, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3328      	adds	r3, #40	@ 0x28
 800b342:	461a      	mov	r2, r3
 800b344:	88fb      	ldrh	r3, [r7, #6]
 800b346:	f7f8 fc05 	bl	8003b54 <HAL_DMA_Start_IT>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d008      	beq.n	800b362 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2210      	movs	r2, #16
 800b354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2220      	movs	r2, #32
 800b35c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	e020      	b.n	800b3a4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2240      	movs	r2, #64	@ 0x40
 800b368:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3308      	adds	r3, #8
 800b370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	e853 3f00 	ldrex	r3, [r3]
 800b378:	613b      	str	r3, [r7, #16]
   return(result);
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b380:	627b      	str	r3, [r7, #36]	@ 0x24
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	3308      	adds	r3, #8
 800b388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b38a:	623a      	str	r2, [r7, #32]
 800b38c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38e:	69f9      	ldr	r1, [r7, #28]
 800b390:	6a3a      	ldr	r2, [r7, #32]
 800b392:	e841 2300 	strex	r3, r2, [r1]
 800b396:	61bb      	str	r3, [r7, #24]
   return(result);
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1e5      	bne.n	800b36a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e000      	b.n	800b3a4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800b3a2:	2302      	movs	r3, #2
  }
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3728      	adds	r7, #40	@ 0x28
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	0800c705 	.word	0x0800c705
 800b3b0:	0800c79b 	.word	0x0800c79b
 800b3b4:	0800c987 	.word	0x0800c987

0800b3b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b08a      	sub	sp, #40	@ 0x28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3cc:	2b20      	cmp	r3, #32
 800b3ce:	d132      	bne.n	800b436 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <HAL_UART_Receive_DMA+0x24>
 800b3d6:	88fb      	ldrh	r3, [r7, #6]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d101      	bne.n	800b3e0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e02b      	b.n	800b438 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d018      	beq.n	800b426 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	e853 3f00 	ldrex	r3, [r3]
 800b400:	613b      	str	r3, [r7, #16]
   return(result);
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b408:	627b      	str	r3, [r7, #36]	@ 0x24
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	461a      	mov	r2, r3
 800b410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b412:	623b      	str	r3, [r7, #32]
 800b414:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b416:	69f9      	ldr	r1, [r7, #28]
 800b418:	6a3a      	ldr	r2, [r7, #32]
 800b41a:	e841 2300 	strex	r3, r2, [r1]
 800b41e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1e6      	bne.n	800b3f4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b426:	88fb      	ldrh	r3, [r7, #6]
 800b428:	461a      	mov	r2, r3
 800b42a:	68b9      	ldr	r1, [r7, #8]
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f001 f83f 	bl	800c4b0 <UART_Start_Receive_DMA>
 800b432:	4603      	mov	r3, r0
 800b434:	e000      	b.n	800b438 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b436:	2302      	movs	r3, #2
  }
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3728      	adds	r7, #40	@ 0x28
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b090      	sub	sp, #64	@ 0x40
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b454:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b460:	2b80      	cmp	r3, #128	@ 0x80
 800b462:	d139      	bne.n	800b4d8 <HAL_UART_DMAStop+0x98>
 800b464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b466:	2b21      	cmp	r3, #33	@ 0x21
 800b468:	d136      	bne.n	800b4d8 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3308      	adds	r3, #8
 800b470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	e853 3f00 	ldrex	r3, [r3]
 800b478:	61fb      	str	r3, [r7, #28]
   return(result);
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b480:	637b      	str	r3, [r7, #52]	@ 0x34
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3308      	adds	r3, #8
 800b488:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b48a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b48c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b492:	e841 2300 	strex	r3, r2, [r1]
 800b496:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1e5      	bne.n	800b46a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d015      	beq.n	800b4d2 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7f8 fbb2 	bl	8003c14 <HAL_DMA_Abort>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00d      	beq.n	800b4d2 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7f8 fdd4 	bl	8004068 <HAL_DMA_GetError>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b20      	cmp	r3, #32
 800b4c4:	d105      	bne.n	800b4d2 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2210      	movs	r2, #16
 800b4ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b4ce:	2303      	movs	r3, #3
 800b4d0:	e044      	b.n	800b55c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f001 f88c 	bl	800c5f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4e2:	2b40      	cmp	r3, #64	@ 0x40
 800b4e4:	d139      	bne.n	800b55a <HAL_UART_DMAStop+0x11a>
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e8:	2b22      	cmp	r3, #34	@ 0x22
 800b4ea:	d136      	bne.n	800b55a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b502:	633b      	str	r3, [r7, #48]	@ 0x30
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3308      	adds	r3, #8
 800b50a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b50c:	61ba      	str	r2, [r7, #24]
 800b50e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b510:	6979      	ldr	r1, [r7, #20]
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	e841 2300 	strex	r3, r2, [r1]
 800b518:	613b      	str	r3, [r7, #16]
   return(result);
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e5      	bne.n	800b4ec <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b524:	2b00      	cmp	r3, #0
 800b526:	d015      	beq.n	800b554 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7f8 fb71 	bl	8003c14 <HAL_DMA_Abort>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00d      	beq.n	800b554 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7f8 fd93 	bl	8004068 <HAL_DMA_GetError>
 800b542:	4603      	mov	r3, r0
 800b544:	2b20      	cmp	r3, #32
 800b546:	d105      	bne.n	800b554 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2210      	movs	r2, #16
 800b54c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e003      	b.n	800b55c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f001 f871 	bl	800c63c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3740      	adds	r7, #64	@ 0x40
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b0ba      	sub	sp, #232	@ 0xe8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	69db      	ldr	r3, [r3, #28]
 800b572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b58a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b58e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b592:	4013      	ands	r3, r2
 800b594:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d115      	bne.n	800b5cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5a4:	f003 0320 	and.w	r3, r3, #32
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00f      	beq.n	800b5cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b5ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5b0:	f003 0320 	and.w	r3, r3, #32
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d009      	beq.n	800b5cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 82b1 	beq.w	800bb24 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	4798      	blx	r3
      }
      return;
 800b5ca:	e2ab      	b.n	800bb24 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b5cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f000 8117 	beq.w	800b804 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b5d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d106      	bne.n	800b5f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b5e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b5e6:	4b85      	ldr	r3, [pc, #532]	@ (800b7fc <HAL_UART_IRQHandler+0x298>)
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f000 810a 	beq.w	800b804 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5f4:	f003 0301 	and.w	r3, r3, #1
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d011      	beq.n	800b620 <HAL_UART_IRQHandler+0xbc>
 800b5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00b      	beq.n	800b620 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2201      	movs	r2, #1
 800b60e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b616:	f043 0201 	orr.w	r2, r3, #1
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b624:	f003 0302 	and.w	r3, r3, #2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d011      	beq.n	800b650 <HAL_UART_IRQHandler+0xec>
 800b62c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00b      	beq.n	800b650 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2202      	movs	r2, #2
 800b63e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b646:	f043 0204 	orr.w	r2, r3, #4
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b654:	f003 0304 	and.w	r3, r3, #4
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d011      	beq.n	800b680 <HAL_UART_IRQHandler+0x11c>
 800b65c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b660:	f003 0301 	and.w	r3, r3, #1
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00b      	beq.n	800b680 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2204      	movs	r2, #4
 800b66e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b676:	f043 0202 	orr.w	r2, r3, #2
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b684:	f003 0308 	and.w	r3, r3, #8
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d017      	beq.n	800b6bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b68c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b690:	f003 0320 	and.w	r3, r3, #32
 800b694:	2b00      	cmp	r3, #0
 800b696:	d105      	bne.n	800b6a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b69c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00b      	beq.n	800b6bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2208      	movs	r2, #8
 800b6aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6b2:	f043 0208 	orr.w	r2, r3, #8
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d012      	beq.n	800b6ee <HAL_UART_IRQHandler+0x18a>
 800b6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00c      	beq.n	800b6ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6e4:	f043 0220 	orr.w	r2, r3, #32
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 8217 	beq.w	800bb28 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6fe:	f003 0320 	and.w	r3, r3, #32
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00d      	beq.n	800b722 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b70a:	f003 0320 	and.w	r3, r3, #32
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d007      	beq.n	800b722 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b716:	2b00      	cmp	r3, #0
 800b718:	d003      	beq.n	800b722 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b728:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b736:	2b40      	cmp	r3, #64	@ 0x40
 800b738:	d005      	beq.n	800b746 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b73a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b73e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b742:	2b00      	cmp	r3, #0
 800b744:	d04f      	beq.n	800b7e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 ff78 	bl	800c63c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b756:	2b40      	cmp	r3, #64	@ 0x40
 800b758:	d141      	bne.n	800b7de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	3308      	adds	r3, #8
 800b760:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b764:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b768:	e853 3f00 	ldrex	r3, [r3]
 800b76c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b770:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b778:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3308      	adds	r3, #8
 800b782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b786:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b78a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b796:	e841 2300 	strex	r3, r2, [r1]
 800b79a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b79e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1d9      	bne.n	800b75a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d013      	beq.n	800b7d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7b2:	4a13      	ldr	r2, [pc, #76]	@ (800b800 <HAL_UART_IRQHandler+0x29c>)
 800b7b4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7f8 fa9a 	bl	8003cf4 <HAL_DMA_Abort_IT>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d017      	beq.n	800b7f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b7d0:	4610      	mov	r0, r2
 800b7d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d4:	e00f      	b.n	800b7f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f9c4 	bl	800bb64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7dc:	e00b      	b.n	800b7f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f9c0 	bl	800bb64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7e4:	e007      	b.n	800b7f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f9bc 	bl	800bb64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800b7f4:	e198      	b.n	800bb28 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7f6:	bf00      	nop
    return;
 800b7f8:	e196      	b.n	800bb28 <HAL_UART_IRQHandler+0x5c4>
 800b7fa:	bf00      	nop
 800b7fc:	04000120 	.word	0x04000120
 800b800:	0800ca05 	.word	0x0800ca05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b808:	2b01      	cmp	r3, #1
 800b80a:	f040 8166 	bne.w	800bada <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b80e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b812:	f003 0310 	and.w	r3, r3, #16
 800b816:	2b00      	cmp	r3, #0
 800b818:	f000 815f 	beq.w	800bada <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b820:	f003 0310 	and.w	r3, r3, #16
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 8158 	beq.w	800bada <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2210      	movs	r2, #16
 800b830:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b83c:	2b40      	cmp	r3, #64	@ 0x40
 800b83e:	f040 80d0 	bne.w	800b9e2 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b84e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 80ab 	beq.w	800b9ae <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b85e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b862:	429a      	cmp	r2, r3
 800b864:	f080 80a3 	bcs.w	800b9ae <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b86e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b876:	69db      	ldr	r3, [r3, #28]
 800b878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b87c:	f000 8086 	beq.w	800b98c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b888:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b88c:	e853 3f00 	ldrex	r3, [r3]
 800b890:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b894:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b89c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b8ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b8b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b8ba:	e841 2300 	strex	r3, r2, [r1]
 800b8be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b8c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1da      	bne.n	800b880 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8d4:	e853 3f00 	ldrex	r3, [r3]
 800b8d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b8da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8dc:	f023 0301 	bic.w	r3, r3, #1
 800b8e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b8ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b8f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b8f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b8fa:	e841 2300 	strex	r3, r2, [r1]
 800b8fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b900:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1e1      	bne.n	800b8ca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	3308      	adds	r3, #8
 800b90c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b910:	e853 3f00 	ldrex	r3, [r3]
 800b914:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b91c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	3308      	adds	r3, #8
 800b926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b92a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b92c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b930:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b932:	e841 2300 	strex	r3, r2, [r1]
 800b936:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b938:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1e3      	bne.n	800b906 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2220      	movs	r2, #32
 800b942:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b954:	e853 3f00 	ldrex	r3, [r3]
 800b958:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b95a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b95c:	f023 0310 	bic.w	r3, r3, #16
 800b960:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	461a      	mov	r2, r3
 800b96a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b96e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b970:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b972:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b974:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b976:	e841 2300 	strex	r3, r2, [r1]
 800b97a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b97c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1e4      	bne.n	800b94c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b986:	4618      	mov	r0, r3
 800b988:	f7f8 f944 	bl	8003c14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2202      	movs	r2, #2
 800b990:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f8e6 	bl	800bb78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b9ac:	e0be      	b.n	800bb2c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b9b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	f040 80b7 	bne.w	800bb2c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9c2:	69db      	ldr	r3, [r3, #28]
 800b9c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9c8:	f040 80b0 	bne.w	800bb2c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f8cc 	bl	800bb78 <HAL_UARTEx_RxEventCallback>
      return;
 800b9e0:	e0a4      	b.n	800bb2c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f000 8096 	beq.w	800bb30 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800ba04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 8091 	beq.w	800bb30 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba16:	e853 3f00 	ldrex	r3, [r3]
 800ba1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba30:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba38:	e841 2300 	strex	r3, r2, [r1]
 800ba3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1e4      	bne.n	800ba0e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	3308      	adds	r3, #8
 800ba4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4e:	e853 3f00 	ldrex	r3, [r3]
 800ba52:	623b      	str	r3, [r7, #32]
   return(result);
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	f023 0301 	bic.w	r3, r3, #1
 800ba5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3308      	adds	r3, #8
 800ba64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ba68:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba70:	e841 2300 	strex	r3, r2, [r1]
 800ba74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1e3      	bne.n	800ba44 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2220      	movs	r2, #32
 800ba80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	e853 3f00 	ldrex	r3, [r3]
 800ba9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f023 0310 	bic.w	r3, r3, #16
 800baa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	461a      	mov	r2, r3
 800baae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bab2:	61fb      	str	r3, [r7, #28]
 800bab4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab6:	69b9      	ldr	r1, [r7, #24]
 800bab8:	69fa      	ldr	r2, [r7, #28]
 800baba:	e841 2300 	strex	r3, r2, [r1]
 800babe:	617b      	str	r3, [r7, #20]
   return(result);
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1e4      	bne.n	800ba90 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2202      	movs	r2, #2
 800baca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bacc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bad0:	4619      	mov	r1, r3
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f850 	bl	800bb78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bad8:	e02a      	b.n	800bb30 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00e      	beq.n	800bb04 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d008      	beq.n	800bb04 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d01c      	beq.n	800bb34 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	4798      	blx	r3
    }
    return;
 800bb02:	e017      	b.n	800bb34 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d012      	beq.n	800bb36 <HAL_UART_IRQHandler+0x5d2>
 800bb10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00c      	beq.n	800bb36 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f001 f83e 	bl	800cb9e <UART_EndTransmit_IT>
    return;
 800bb22:	e008      	b.n	800bb36 <HAL_UART_IRQHandler+0x5d2>
      return;
 800bb24:	bf00      	nop
 800bb26:	e006      	b.n	800bb36 <HAL_UART_IRQHandler+0x5d2>
    return;
 800bb28:	bf00      	nop
 800bb2a:	e004      	b.n	800bb36 <HAL_UART_IRQHandler+0x5d2>
      return;
 800bb2c:	bf00      	nop
 800bb2e:	e002      	b.n	800bb36 <HAL_UART_IRQHandler+0x5d2>
      return;
 800bb30:	bf00      	nop
 800bb32:	e000      	b.n	800bb36 <HAL_UART_IRQHandler+0x5d2>
    return;
 800bb34:	bf00      	nop
  }

}
 800bb36:	37e8      	adds	r7, #232	@ 0xe8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb58:	bf00      	nop
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb6c:	bf00      	nop
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b088      	sub	sp, #32
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	689a      	ldr	r2, [r3, #8]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	431a      	orrs	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	431a      	orrs	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	69db      	ldr	r3, [r3, #28]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	4ba6      	ldr	r3, [pc, #664]	@ (800be54 <UART_SetConfig+0x2c4>)
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	6812      	ldr	r2, [r2, #0]
 800bbc2:	6979      	ldr	r1, [r7, #20]
 800bbc4:	430b      	orrs	r3, r1
 800bbc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68da      	ldr	r2, [r3, #12]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	430a      	orrs	r2, r1
 800bbdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	697a      	ldr	r2, [r7, #20]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	430a      	orrs	r2, r1
 800bc00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a94      	ldr	r2, [pc, #592]	@ (800be58 <UART_SetConfig+0x2c8>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d120      	bne.n	800bc4e <UART_SetConfig+0xbe>
 800bc0c:	4b93      	ldr	r3, [pc, #588]	@ (800be5c <UART_SetConfig+0x2cc>)
 800bc0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc12:	f003 0303 	and.w	r3, r3, #3
 800bc16:	2b03      	cmp	r3, #3
 800bc18:	d816      	bhi.n	800bc48 <UART_SetConfig+0xb8>
 800bc1a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc20 <UART_SetConfig+0x90>)
 800bc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc20:	0800bc31 	.word	0x0800bc31
 800bc24:	0800bc3d 	.word	0x0800bc3d
 800bc28:	0800bc37 	.word	0x0800bc37
 800bc2c:	0800bc43 	.word	0x0800bc43
 800bc30:	2301      	movs	r3, #1
 800bc32:	77fb      	strb	r3, [r7, #31]
 800bc34:	e150      	b.n	800bed8 <UART_SetConfig+0x348>
 800bc36:	2302      	movs	r3, #2
 800bc38:	77fb      	strb	r3, [r7, #31]
 800bc3a:	e14d      	b.n	800bed8 <UART_SetConfig+0x348>
 800bc3c:	2304      	movs	r3, #4
 800bc3e:	77fb      	strb	r3, [r7, #31]
 800bc40:	e14a      	b.n	800bed8 <UART_SetConfig+0x348>
 800bc42:	2308      	movs	r3, #8
 800bc44:	77fb      	strb	r3, [r7, #31]
 800bc46:	e147      	b.n	800bed8 <UART_SetConfig+0x348>
 800bc48:	2310      	movs	r3, #16
 800bc4a:	77fb      	strb	r3, [r7, #31]
 800bc4c:	e144      	b.n	800bed8 <UART_SetConfig+0x348>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a83      	ldr	r2, [pc, #524]	@ (800be60 <UART_SetConfig+0x2d0>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d132      	bne.n	800bcbe <UART_SetConfig+0x12e>
 800bc58:	4b80      	ldr	r3, [pc, #512]	@ (800be5c <UART_SetConfig+0x2cc>)
 800bc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc5e:	f003 030c 	and.w	r3, r3, #12
 800bc62:	2b0c      	cmp	r3, #12
 800bc64:	d828      	bhi.n	800bcb8 <UART_SetConfig+0x128>
 800bc66:	a201      	add	r2, pc, #4	@ (adr r2, 800bc6c <UART_SetConfig+0xdc>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bca1 	.word	0x0800bca1
 800bc70:	0800bcb9 	.word	0x0800bcb9
 800bc74:	0800bcb9 	.word	0x0800bcb9
 800bc78:	0800bcb9 	.word	0x0800bcb9
 800bc7c:	0800bcad 	.word	0x0800bcad
 800bc80:	0800bcb9 	.word	0x0800bcb9
 800bc84:	0800bcb9 	.word	0x0800bcb9
 800bc88:	0800bcb9 	.word	0x0800bcb9
 800bc8c:	0800bca7 	.word	0x0800bca7
 800bc90:	0800bcb9 	.word	0x0800bcb9
 800bc94:	0800bcb9 	.word	0x0800bcb9
 800bc98:	0800bcb9 	.word	0x0800bcb9
 800bc9c:	0800bcb3 	.word	0x0800bcb3
 800bca0:	2300      	movs	r3, #0
 800bca2:	77fb      	strb	r3, [r7, #31]
 800bca4:	e118      	b.n	800bed8 <UART_SetConfig+0x348>
 800bca6:	2302      	movs	r3, #2
 800bca8:	77fb      	strb	r3, [r7, #31]
 800bcaa:	e115      	b.n	800bed8 <UART_SetConfig+0x348>
 800bcac:	2304      	movs	r3, #4
 800bcae:	77fb      	strb	r3, [r7, #31]
 800bcb0:	e112      	b.n	800bed8 <UART_SetConfig+0x348>
 800bcb2:	2308      	movs	r3, #8
 800bcb4:	77fb      	strb	r3, [r7, #31]
 800bcb6:	e10f      	b.n	800bed8 <UART_SetConfig+0x348>
 800bcb8:	2310      	movs	r3, #16
 800bcba:	77fb      	strb	r3, [r7, #31]
 800bcbc:	e10c      	b.n	800bed8 <UART_SetConfig+0x348>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a68      	ldr	r2, [pc, #416]	@ (800be64 <UART_SetConfig+0x2d4>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d120      	bne.n	800bd0a <UART_SetConfig+0x17a>
 800bcc8:	4b64      	ldr	r3, [pc, #400]	@ (800be5c <UART_SetConfig+0x2cc>)
 800bcca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bcd2:	2b30      	cmp	r3, #48	@ 0x30
 800bcd4:	d013      	beq.n	800bcfe <UART_SetConfig+0x16e>
 800bcd6:	2b30      	cmp	r3, #48	@ 0x30
 800bcd8:	d814      	bhi.n	800bd04 <UART_SetConfig+0x174>
 800bcda:	2b20      	cmp	r3, #32
 800bcdc:	d009      	beq.n	800bcf2 <UART_SetConfig+0x162>
 800bcde:	2b20      	cmp	r3, #32
 800bce0:	d810      	bhi.n	800bd04 <UART_SetConfig+0x174>
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <UART_SetConfig+0x15c>
 800bce6:	2b10      	cmp	r3, #16
 800bce8:	d006      	beq.n	800bcf8 <UART_SetConfig+0x168>
 800bcea:	e00b      	b.n	800bd04 <UART_SetConfig+0x174>
 800bcec:	2300      	movs	r3, #0
 800bcee:	77fb      	strb	r3, [r7, #31]
 800bcf0:	e0f2      	b.n	800bed8 <UART_SetConfig+0x348>
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	77fb      	strb	r3, [r7, #31]
 800bcf6:	e0ef      	b.n	800bed8 <UART_SetConfig+0x348>
 800bcf8:	2304      	movs	r3, #4
 800bcfa:	77fb      	strb	r3, [r7, #31]
 800bcfc:	e0ec      	b.n	800bed8 <UART_SetConfig+0x348>
 800bcfe:	2308      	movs	r3, #8
 800bd00:	77fb      	strb	r3, [r7, #31]
 800bd02:	e0e9      	b.n	800bed8 <UART_SetConfig+0x348>
 800bd04:	2310      	movs	r3, #16
 800bd06:	77fb      	strb	r3, [r7, #31]
 800bd08:	e0e6      	b.n	800bed8 <UART_SetConfig+0x348>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a56      	ldr	r2, [pc, #344]	@ (800be68 <UART_SetConfig+0x2d8>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d120      	bne.n	800bd56 <UART_SetConfig+0x1c6>
 800bd14:	4b51      	ldr	r3, [pc, #324]	@ (800be5c <UART_SetConfig+0x2cc>)
 800bd16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bd1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800bd20:	d013      	beq.n	800bd4a <UART_SetConfig+0x1ba>
 800bd22:	2bc0      	cmp	r3, #192	@ 0xc0
 800bd24:	d814      	bhi.n	800bd50 <UART_SetConfig+0x1c0>
 800bd26:	2b80      	cmp	r3, #128	@ 0x80
 800bd28:	d009      	beq.n	800bd3e <UART_SetConfig+0x1ae>
 800bd2a:	2b80      	cmp	r3, #128	@ 0x80
 800bd2c:	d810      	bhi.n	800bd50 <UART_SetConfig+0x1c0>
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <UART_SetConfig+0x1a8>
 800bd32:	2b40      	cmp	r3, #64	@ 0x40
 800bd34:	d006      	beq.n	800bd44 <UART_SetConfig+0x1b4>
 800bd36:	e00b      	b.n	800bd50 <UART_SetConfig+0x1c0>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	77fb      	strb	r3, [r7, #31]
 800bd3c:	e0cc      	b.n	800bed8 <UART_SetConfig+0x348>
 800bd3e:	2302      	movs	r3, #2
 800bd40:	77fb      	strb	r3, [r7, #31]
 800bd42:	e0c9      	b.n	800bed8 <UART_SetConfig+0x348>
 800bd44:	2304      	movs	r3, #4
 800bd46:	77fb      	strb	r3, [r7, #31]
 800bd48:	e0c6      	b.n	800bed8 <UART_SetConfig+0x348>
 800bd4a:	2308      	movs	r3, #8
 800bd4c:	77fb      	strb	r3, [r7, #31]
 800bd4e:	e0c3      	b.n	800bed8 <UART_SetConfig+0x348>
 800bd50:	2310      	movs	r3, #16
 800bd52:	77fb      	strb	r3, [r7, #31]
 800bd54:	e0c0      	b.n	800bed8 <UART_SetConfig+0x348>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a44      	ldr	r2, [pc, #272]	@ (800be6c <UART_SetConfig+0x2dc>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d125      	bne.n	800bdac <UART_SetConfig+0x21c>
 800bd60:	4b3e      	ldr	r3, [pc, #248]	@ (800be5c <UART_SetConfig+0x2cc>)
 800bd62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd6e:	d017      	beq.n	800bda0 <UART_SetConfig+0x210>
 800bd70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd74:	d817      	bhi.n	800bda6 <UART_SetConfig+0x216>
 800bd76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd7a:	d00b      	beq.n	800bd94 <UART_SetConfig+0x204>
 800bd7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd80:	d811      	bhi.n	800bda6 <UART_SetConfig+0x216>
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d003      	beq.n	800bd8e <UART_SetConfig+0x1fe>
 800bd86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd8a:	d006      	beq.n	800bd9a <UART_SetConfig+0x20a>
 800bd8c:	e00b      	b.n	800bda6 <UART_SetConfig+0x216>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	77fb      	strb	r3, [r7, #31]
 800bd92:	e0a1      	b.n	800bed8 <UART_SetConfig+0x348>
 800bd94:	2302      	movs	r3, #2
 800bd96:	77fb      	strb	r3, [r7, #31]
 800bd98:	e09e      	b.n	800bed8 <UART_SetConfig+0x348>
 800bd9a:	2304      	movs	r3, #4
 800bd9c:	77fb      	strb	r3, [r7, #31]
 800bd9e:	e09b      	b.n	800bed8 <UART_SetConfig+0x348>
 800bda0:	2308      	movs	r3, #8
 800bda2:	77fb      	strb	r3, [r7, #31]
 800bda4:	e098      	b.n	800bed8 <UART_SetConfig+0x348>
 800bda6:	2310      	movs	r3, #16
 800bda8:	77fb      	strb	r3, [r7, #31]
 800bdaa:	e095      	b.n	800bed8 <UART_SetConfig+0x348>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a2f      	ldr	r2, [pc, #188]	@ (800be70 <UART_SetConfig+0x2e0>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d125      	bne.n	800be02 <UART_SetConfig+0x272>
 800bdb6:	4b29      	ldr	r3, [pc, #164]	@ (800be5c <UART_SetConfig+0x2cc>)
 800bdb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bdc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bdc4:	d017      	beq.n	800bdf6 <UART_SetConfig+0x266>
 800bdc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bdca:	d817      	bhi.n	800bdfc <UART_SetConfig+0x26c>
 800bdcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bdd0:	d00b      	beq.n	800bdea <UART_SetConfig+0x25a>
 800bdd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bdd6:	d811      	bhi.n	800bdfc <UART_SetConfig+0x26c>
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d003      	beq.n	800bde4 <UART_SetConfig+0x254>
 800bddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bde0:	d006      	beq.n	800bdf0 <UART_SetConfig+0x260>
 800bde2:	e00b      	b.n	800bdfc <UART_SetConfig+0x26c>
 800bde4:	2301      	movs	r3, #1
 800bde6:	77fb      	strb	r3, [r7, #31]
 800bde8:	e076      	b.n	800bed8 <UART_SetConfig+0x348>
 800bdea:	2302      	movs	r3, #2
 800bdec:	77fb      	strb	r3, [r7, #31]
 800bdee:	e073      	b.n	800bed8 <UART_SetConfig+0x348>
 800bdf0:	2304      	movs	r3, #4
 800bdf2:	77fb      	strb	r3, [r7, #31]
 800bdf4:	e070      	b.n	800bed8 <UART_SetConfig+0x348>
 800bdf6:	2308      	movs	r3, #8
 800bdf8:	77fb      	strb	r3, [r7, #31]
 800bdfa:	e06d      	b.n	800bed8 <UART_SetConfig+0x348>
 800bdfc:	2310      	movs	r3, #16
 800bdfe:	77fb      	strb	r3, [r7, #31]
 800be00:	e06a      	b.n	800bed8 <UART_SetConfig+0x348>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a1b      	ldr	r2, [pc, #108]	@ (800be74 <UART_SetConfig+0x2e4>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d138      	bne.n	800be7e <UART_SetConfig+0x2ee>
 800be0c:	4b13      	ldr	r3, [pc, #76]	@ (800be5c <UART_SetConfig+0x2cc>)
 800be0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800be16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be1a:	d017      	beq.n	800be4c <UART_SetConfig+0x2bc>
 800be1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be20:	d82a      	bhi.n	800be78 <UART_SetConfig+0x2e8>
 800be22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be26:	d00b      	beq.n	800be40 <UART_SetConfig+0x2b0>
 800be28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be2c:	d824      	bhi.n	800be78 <UART_SetConfig+0x2e8>
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d003      	beq.n	800be3a <UART_SetConfig+0x2aa>
 800be32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be36:	d006      	beq.n	800be46 <UART_SetConfig+0x2b6>
 800be38:	e01e      	b.n	800be78 <UART_SetConfig+0x2e8>
 800be3a:	2300      	movs	r3, #0
 800be3c:	77fb      	strb	r3, [r7, #31]
 800be3e:	e04b      	b.n	800bed8 <UART_SetConfig+0x348>
 800be40:	2302      	movs	r3, #2
 800be42:	77fb      	strb	r3, [r7, #31]
 800be44:	e048      	b.n	800bed8 <UART_SetConfig+0x348>
 800be46:	2304      	movs	r3, #4
 800be48:	77fb      	strb	r3, [r7, #31]
 800be4a:	e045      	b.n	800bed8 <UART_SetConfig+0x348>
 800be4c:	2308      	movs	r3, #8
 800be4e:	77fb      	strb	r3, [r7, #31]
 800be50:	e042      	b.n	800bed8 <UART_SetConfig+0x348>
 800be52:	bf00      	nop
 800be54:	efff69f3 	.word	0xefff69f3
 800be58:	40011000 	.word	0x40011000
 800be5c:	40023800 	.word	0x40023800
 800be60:	40004400 	.word	0x40004400
 800be64:	40004800 	.word	0x40004800
 800be68:	40004c00 	.word	0x40004c00
 800be6c:	40005000 	.word	0x40005000
 800be70:	40011400 	.word	0x40011400
 800be74:	40007800 	.word	0x40007800
 800be78:	2310      	movs	r3, #16
 800be7a:	77fb      	strb	r3, [r7, #31]
 800be7c:	e02c      	b.n	800bed8 <UART_SetConfig+0x348>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a72      	ldr	r2, [pc, #456]	@ (800c04c <UART_SetConfig+0x4bc>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d125      	bne.n	800bed4 <UART_SetConfig+0x344>
 800be88:	4b71      	ldr	r3, [pc, #452]	@ (800c050 <UART_SetConfig+0x4c0>)
 800be8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be8e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800be92:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800be96:	d017      	beq.n	800bec8 <UART_SetConfig+0x338>
 800be98:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800be9c:	d817      	bhi.n	800bece <UART_SetConfig+0x33e>
 800be9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bea2:	d00b      	beq.n	800bebc <UART_SetConfig+0x32c>
 800bea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bea8:	d811      	bhi.n	800bece <UART_SetConfig+0x33e>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d003      	beq.n	800beb6 <UART_SetConfig+0x326>
 800beae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800beb2:	d006      	beq.n	800bec2 <UART_SetConfig+0x332>
 800beb4:	e00b      	b.n	800bece <UART_SetConfig+0x33e>
 800beb6:	2300      	movs	r3, #0
 800beb8:	77fb      	strb	r3, [r7, #31]
 800beba:	e00d      	b.n	800bed8 <UART_SetConfig+0x348>
 800bebc:	2302      	movs	r3, #2
 800bebe:	77fb      	strb	r3, [r7, #31]
 800bec0:	e00a      	b.n	800bed8 <UART_SetConfig+0x348>
 800bec2:	2304      	movs	r3, #4
 800bec4:	77fb      	strb	r3, [r7, #31]
 800bec6:	e007      	b.n	800bed8 <UART_SetConfig+0x348>
 800bec8:	2308      	movs	r3, #8
 800beca:	77fb      	strb	r3, [r7, #31]
 800becc:	e004      	b.n	800bed8 <UART_SetConfig+0x348>
 800bece:	2310      	movs	r3, #16
 800bed0:	77fb      	strb	r3, [r7, #31]
 800bed2:	e001      	b.n	800bed8 <UART_SetConfig+0x348>
 800bed4:	2310      	movs	r3, #16
 800bed6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	69db      	ldr	r3, [r3, #28]
 800bedc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bee0:	d15b      	bne.n	800bf9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bee2:	7ffb      	ldrb	r3, [r7, #31]
 800bee4:	2b08      	cmp	r3, #8
 800bee6:	d828      	bhi.n	800bf3a <UART_SetConfig+0x3aa>
 800bee8:	a201      	add	r2, pc, #4	@ (adr r2, 800bef0 <UART_SetConfig+0x360>)
 800beea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beee:	bf00      	nop
 800bef0:	0800bf15 	.word	0x0800bf15
 800bef4:	0800bf1d 	.word	0x0800bf1d
 800bef8:	0800bf25 	.word	0x0800bf25
 800befc:	0800bf3b 	.word	0x0800bf3b
 800bf00:	0800bf2b 	.word	0x0800bf2b
 800bf04:	0800bf3b 	.word	0x0800bf3b
 800bf08:	0800bf3b 	.word	0x0800bf3b
 800bf0c:	0800bf3b 	.word	0x0800bf3b
 800bf10:	0800bf33 	.word	0x0800bf33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf14:	f7fc fd3a 	bl	800898c <HAL_RCC_GetPCLK1Freq>
 800bf18:	61b8      	str	r0, [r7, #24]
        break;
 800bf1a:	e013      	b.n	800bf44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf1c:	f7fc fd4a 	bl	80089b4 <HAL_RCC_GetPCLK2Freq>
 800bf20:	61b8      	str	r0, [r7, #24]
        break;
 800bf22:	e00f      	b.n	800bf44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf24:	4b4b      	ldr	r3, [pc, #300]	@ (800c054 <UART_SetConfig+0x4c4>)
 800bf26:	61bb      	str	r3, [r7, #24]
        break;
 800bf28:	e00c      	b.n	800bf44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf2a:	f7fc fc1d 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 800bf2e:	61b8      	str	r0, [r7, #24]
        break;
 800bf30:	e008      	b.n	800bf44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf36:	61bb      	str	r3, [r7, #24]
        break;
 800bf38:	e004      	b.n	800bf44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	77bb      	strb	r3, [r7, #30]
        break;
 800bf42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d074      	beq.n	800c034 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	005a      	lsls	r2, r3, #1
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	085b      	lsrs	r3, r3, #1
 800bf54:	441a      	add	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	2b0f      	cmp	r3, #15
 800bf64:	d916      	bls.n	800bf94 <UART_SetConfig+0x404>
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf6c:	d212      	bcs.n	800bf94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	f023 030f 	bic.w	r3, r3, #15
 800bf76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	085b      	lsrs	r3, r3, #1
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	f003 0307 	and.w	r3, r3, #7
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	89fb      	ldrh	r3, [r7, #14]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	89fa      	ldrh	r2, [r7, #14]
 800bf90:	60da      	str	r2, [r3, #12]
 800bf92:	e04f      	b.n	800c034 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	77bb      	strb	r3, [r7, #30]
 800bf98:	e04c      	b.n	800c034 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf9a:	7ffb      	ldrb	r3, [r7, #31]
 800bf9c:	2b08      	cmp	r3, #8
 800bf9e:	d828      	bhi.n	800bff2 <UART_SetConfig+0x462>
 800bfa0:	a201      	add	r2, pc, #4	@ (adr r2, 800bfa8 <UART_SetConfig+0x418>)
 800bfa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa6:	bf00      	nop
 800bfa8:	0800bfcd 	.word	0x0800bfcd
 800bfac:	0800bfd5 	.word	0x0800bfd5
 800bfb0:	0800bfdd 	.word	0x0800bfdd
 800bfb4:	0800bff3 	.word	0x0800bff3
 800bfb8:	0800bfe3 	.word	0x0800bfe3
 800bfbc:	0800bff3 	.word	0x0800bff3
 800bfc0:	0800bff3 	.word	0x0800bff3
 800bfc4:	0800bff3 	.word	0x0800bff3
 800bfc8:	0800bfeb 	.word	0x0800bfeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfcc:	f7fc fcde 	bl	800898c <HAL_RCC_GetPCLK1Freq>
 800bfd0:	61b8      	str	r0, [r7, #24]
        break;
 800bfd2:	e013      	b.n	800bffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfd4:	f7fc fcee 	bl	80089b4 <HAL_RCC_GetPCLK2Freq>
 800bfd8:	61b8      	str	r0, [r7, #24]
        break;
 800bfda:	e00f      	b.n	800bffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bfdc:	4b1d      	ldr	r3, [pc, #116]	@ (800c054 <UART_SetConfig+0x4c4>)
 800bfde:	61bb      	str	r3, [r7, #24]
        break;
 800bfe0:	e00c      	b.n	800bffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfe2:	f7fc fbc1 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 800bfe6:	61b8      	str	r0, [r7, #24]
        break;
 800bfe8:	e008      	b.n	800bffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfee:	61bb      	str	r3, [r7, #24]
        break;
 800bff0:	e004      	b.n	800bffc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bff2:	2300      	movs	r3, #0
 800bff4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	77bb      	strb	r3, [r7, #30]
        break;
 800bffa:	bf00      	nop
    }

    if (pclk != 0U)
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d018      	beq.n	800c034 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	085a      	lsrs	r2, r3, #1
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	441a      	add	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	fbb2 f3f3 	udiv	r3, r2, r3
 800c014:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	2b0f      	cmp	r3, #15
 800c01a:	d909      	bls.n	800c030 <UART_SetConfig+0x4a0>
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c022:	d205      	bcs.n	800c030 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	b29a      	uxth	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	60da      	str	r2, [r3, #12]
 800c02e:	e001      	b.n	800c034 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c040:	7fbb      	ldrb	r3, [r7, #30]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3720      	adds	r7, #32
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	40007c00 	.word	0x40007c00
 800c050:	40023800 	.word	0x40023800
 800c054:	00f42400 	.word	0x00f42400

0800c058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c064:	f003 0308 	and.w	r3, r3, #8
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00a      	beq.n	800c082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	430a      	orrs	r2, r1
 800c080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c086:	f003 0301 	and.w	r3, r3, #1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00a      	beq.n	800c0a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	430a      	orrs	r2, r1
 800c0a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a8:	f003 0302 	and.w	r3, r3, #2
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00a      	beq.n	800c0c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	430a      	orrs	r2, r1
 800c0c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ca:	f003 0304 	and.w	r3, r3, #4
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00a      	beq.n	800c0e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	430a      	orrs	r2, r1
 800c0e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ec:	f003 0310 	and.w	r3, r3, #16
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00a      	beq.n	800c10a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	430a      	orrs	r2, r1
 800c108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10e:	f003 0320 	and.w	r3, r3, #32
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00a      	beq.n	800c12c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	430a      	orrs	r2, r1
 800c12a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c134:	2b00      	cmp	r3, #0
 800c136:	d01a      	beq.n	800c16e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	430a      	orrs	r2, r1
 800c14c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c156:	d10a      	bne.n	800c16e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	430a      	orrs	r2, r1
 800c16c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00a      	beq.n	800c190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	430a      	orrs	r2, r1
 800c18e:	605a      	str	r2, [r3, #4]
  }
}
 800c190:	bf00      	nop
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b08c      	sub	sp, #48	@ 0x30
 800c1a0:	af02      	add	r7, sp, #8
 800c1a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c1ac:	f7f6 fa32 	bl	8002614 <HAL_GetTick>
 800c1b0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f003 0308 	and.w	r3, r3, #8
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	d12e      	bne.n	800c21e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f83b 	bl	800c24a <UART_WaitOnFlagUntilTimeout>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d021      	beq.n	800c21e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	e853 3f00 	ldrex	r3, [r3]
 800c1e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c1ee:	623b      	str	r3, [r7, #32]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	6a3b      	ldr	r3, [r7, #32]
 800c1f8:	61fb      	str	r3, [r7, #28]
 800c1fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fc:	69b9      	ldr	r1, [r7, #24]
 800c1fe:	69fa      	ldr	r2, [r7, #28]
 800c200:	e841 2300 	strex	r3, r2, [r1]
 800c204:	617b      	str	r3, [r7, #20]
   return(result);
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1e6      	bne.n	800c1da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2220      	movs	r2, #32
 800c210:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c21a:	2303      	movs	r3, #3
 800c21c:	e011      	b.n	800c242 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2220      	movs	r2, #32
 800c222:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2220      	movs	r2, #32
 800c228:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3728      	adds	r7, #40	@ 0x28
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	af00      	add	r7, sp, #0
 800c250:	60f8      	str	r0, [r7, #12]
 800c252:	60b9      	str	r1, [r7, #8]
 800c254:	603b      	str	r3, [r7, #0]
 800c256:	4613      	mov	r3, r2
 800c258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c25a:	e04f      	b.n	800c2fc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c262:	d04b      	beq.n	800c2fc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c264:	f7f6 f9d6 	bl	8002614 <HAL_GetTick>
 800c268:	4602      	mov	r2, r0
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	69ba      	ldr	r2, [r7, #24]
 800c270:	429a      	cmp	r2, r3
 800c272:	d302      	bcc.n	800c27a <UART_WaitOnFlagUntilTimeout+0x30>
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d101      	bne.n	800c27e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c27a:	2303      	movs	r3, #3
 800c27c:	e04e      	b.n	800c31c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 0304 	and.w	r3, r3, #4
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d037      	beq.n	800c2fc <UART_WaitOnFlagUntilTimeout+0xb2>
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2b80      	cmp	r3, #128	@ 0x80
 800c290:	d034      	beq.n	800c2fc <UART_WaitOnFlagUntilTimeout+0xb2>
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2b40      	cmp	r3, #64	@ 0x40
 800c296:	d031      	beq.n	800c2fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	69db      	ldr	r3, [r3, #28]
 800c29e:	f003 0308 	and.w	r3, r3, #8
 800c2a2:	2b08      	cmp	r3, #8
 800c2a4:	d110      	bne.n	800c2c8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2208      	movs	r2, #8
 800c2ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f000 f9c4 	bl	800c63c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2208      	movs	r2, #8
 800c2b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e029      	b.n	800c31c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	69db      	ldr	r3, [r3, #28]
 800c2ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c2d6:	d111      	bne.n	800c2fc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f000 f9aa 	bl	800c63c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2220      	movs	r2, #32
 800c2ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e00f      	b.n	800c31c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	69da      	ldr	r2, [r3, #28]
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	4013      	ands	r3, r2
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	429a      	cmp	r2, r3
 800c30a:	bf0c      	ite	eq
 800c30c:	2301      	moveq	r3, #1
 800c30e:	2300      	movne	r3, #0
 800c310:	b2db      	uxtb	r3, r3
 800c312:	461a      	mov	r2, r3
 800c314:	79fb      	ldrb	r3, [r7, #7]
 800c316:	429a      	cmp	r2, r3
 800c318:	d0a0      	beq.n	800c25c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c324:	b480      	push	{r7}
 800c326:	b097      	sub	sp, #92	@ 0x5c
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	4613      	mov	r3, r2
 800c330:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	88fa      	ldrh	r2, [r7, #6]
 800c33c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	88fa      	ldrh	r2, [r7, #6]
 800c344:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c356:	d10e      	bne.n	800c376 <UART_Start_Receive_IT+0x52>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d105      	bne.n	800c36c <UART_Start_Receive_IT+0x48>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c366:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c36a:	e02d      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	22ff      	movs	r2, #255	@ 0xff
 800c370:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c374:	e028      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10d      	bne.n	800c39a <UART_Start_Receive_IT+0x76>
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d104      	bne.n	800c390 <UART_Start_Receive_IT+0x6c>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	22ff      	movs	r2, #255	@ 0xff
 800c38a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c38e:	e01b      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	227f      	movs	r2, #127	@ 0x7f
 800c394:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c398:	e016      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3a2:	d10d      	bne.n	800c3c0 <UART_Start_Receive_IT+0x9c>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d104      	bne.n	800c3b6 <UART_Start_Receive_IT+0x92>
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	227f      	movs	r2, #127	@ 0x7f
 800c3b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c3b4:	e008      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	223f      	movs	r2, #63	@ 0x3f
 800c3ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c3be:	e003      	b.n	800c3c8 <UART_Start_Receive_IT+0xa4>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2222      	movs	r2, #34	@ 0x22
 800c3d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3308      	adds	r3, #8
 800c3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3e2:	e853 3f00 	ldrex	r3, [r3]
 800c3e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ea:	f043 0301 	orr.w	r3, r3, #1
 800c3ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c3f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c3fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c3fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c400:	e841 2300 	strex	r3, r2, [r1]
 800c404:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1e5      	bne.n	800c3d8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c414:	d107      	bne.n	800c426 <UART_Start_Receive_IT+0x102>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d103      	bne.n	800c426 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	4a21      	ldr	r2, [pc, #132]	@ (800c4a8 <UART_Start_Receive_IT+0x184>)
 800c422:	669a      	str	r2, [r3, #104]	@ 0x68
 800c424:	e002      	b.n	800c42c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	4a20      	ldr	r2, [pc, #128]	@ (800c4ac <UART_Start_Receive_IT+0x188>)
 800c42a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	691b      	ldr	r3, [r3, #16]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d019      	beq.n	800c468 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43c:	e853 3f00 	ldrex	r3, [r3]
 800c440:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c444:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	461a      	mov	r2, r3
 800c450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c452:	637b      	str	r3, [r7, #52]	@ 0x34
 800c454:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c456:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c458:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c45a:	e841 2300 	strex	r3, r2, [r1]
 800c45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1e6      	bne.n	800c434 <UART_Start_Receive_IT+0x110>
 800c466:	e018      	b.n	800c49a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	e853 3f00 	ldrex	r3, [r3]
 800c474:	613b      	str	r3, [r7, #16]
   return(result);
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	f043 0320 	orr.w	r3, r3, #32
 800c47c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c486:	623b      	str	r3, [r7, #32]
 800c488:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48a:	69f9      	ldr	r1, [r7, #28]
 800c48c:	6a3a      	ldr	r2, [r7, #32]
 800c48e:	e841 2300 	strex	r3, r2, [r1]
 800c492:	61bb      	str	r3, [r7, #24]
   return(result);
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1e6      	bne.n	800c468 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	375c      	adds	r7, #92	@ 0x5c
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr
 800c4a8:	0800cd9b 	.word	0x0800cd9b
 800c4ac:	0800cbf3 	.word	0x0800cbf3

0800c4b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b096      	sub	sp, #88	@ 0x58
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	88fa      	ldrh	r2, [r7, #6]
 800c4c8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2222      	movs	r2, #34	@ 0x22
 800c4d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d028      	beq.n	800c536 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4e8:	4a3e      	ldr	r2, [pc, #248]	@ (800c5e4 <UART_Start_Receive_DMA+0x134>)
 800c4ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4f0:	4a3d      	ldr	r2, [pc, #244]	@ (800c5e8 <UART_Start_Receive_DMA+0x138>)
 800c4f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4f8:	4a3c      	ldr	r2, [pc, #240]	@ (800c5ec <UART_Start_Receive_DMA+0x13c>)
 800c4fa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c500:	2200      	movs	r2, #0
 800c502:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	3324      	adds	r3, #36	@ 0x24
 800c50e:	4619      	mov	r1, r3
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c514:	461a      	mov	r2, r3
 800c516:	88fb      	ldrh	r3, [r7, #6]
 800c518:	f7f7 fb1c 	bl	8003b54 <HAL_DMA_Start_IT>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d009      	beq.n	800c536 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2210      	movs	r2, #16
 800c526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2220      	movs	r2, #32
 800c52e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	e051      	b.n	800c5da <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d018      	beq.n	800c570 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c546:	e853 3f00 	ldrex	r3, [r3]
 800c54a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c552:	657b      	str	r3, [r7, #84]	@ 0x54
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	461a      	mov	r2, r3
 800c55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c55c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c55e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c560:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c562:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c564:	e841 2300 	strex	r3, r2, [r1]
 800c568:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c56a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1e6      	bne.n	800c53e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	3308      	adds	r3, #8
 800c576:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57a:	e853 3f00 	ldrex	r3, [r3]
 800c57e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c582:	f043 0301 	orr.w	r3, r3, #1
 800c586:	653b      	str	r3, [r7, #80]	@ 0x50
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	3308      	adds	r3, #8
 800c58e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c590:	637a      	str	r2, [r7, #52]	@ 0x34
 800c592:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c594:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c596:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c598:	e841 2300 	strex	r3, r2, [r1]
 800c59c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1e5      	bne.n	800c570 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3308      	adds	r3, #8
 800c5aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	e853 3f00 	ldrex	r3, [r3]
 800c5b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	3308      	adds	r3, #8
 800c5c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c5c4:	623a      	str	r2, [r7, #32]
 800c5c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c8:	69f9      	ldr	r1, [r7, #28]
 800c5ca:	6a3a      	ldr	r2, [r7, #32]
 800c5cc:	e841 2300 	strex	r3, r2, [r1]
 800c5d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1e5      	bne.n	800c5a4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3758      	adds	r7, #88	@ 0x58
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	0800c7b7 	.word	0x0800c7b7
 800c5e8:	0800c915 	.word	0x0800c915
 800c5ec:	0800c987 	.word	0x0800c987

0800c5f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b089      	sub	sp, #36	@ 0x24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	e853 3f00 	ldrex	r3, [r3]
 800c604:	60bb      	str	r3, [r7, #8]
   return(result);
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c60c:	61fb      	str	r3, [r7, #28]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	461a      	mov	r2, r3
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	61bb      	str	r3, [r7, #24]
 800c618:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61a:	6979      	ldr	r1, [r7, #20]
 800c61c:	69ba      	ldr	r2, [r7, #24]
 800c61e:	e841 2300 	strex	r3, r2, [r1]
 800c622:	613b      	str	r3, [r7, #16]
   return(result);
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1e6      	bne.n	800c5f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2220      	movs	r2, #32
 800c62e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800c630:	bf00      	nop
 800c632:	3724      	adds	r7, #36	@ 0x24
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b095      	sub	sp, #84	@ 0x54
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	461a      	mov	r2, r3
 800c660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c662:	643b      	str	r3, [r7, #64]	@ 0x40
 800c664:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c666:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c668:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c66a:	e841 2300 	strex	r3, r2, [r1]
 800c66e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1e6      	bne.n	800c644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3308      	adds	r3, #8
 800c67c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	e853 3f00 	ldrex	r3, [r3]
 800c684:	61fb      	str	r3, [r7, #28]
   return(result);
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	f023 0301 	bic.w	r3, r3, #1
 800c68c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	3308      	adds	r3, #8
 800c694:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c698:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c69c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c69e:	e841 2300 	strex	r3, r2, [r1]
 800c6a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1e5      	bne.n	800c676 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d118      	bne.n	800c6e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	e853 3f00 	ldrex	r3, [r3]
 800c6be:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	f023 0310 	bic.w	r3, r3, #16
 800c6c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6d0:	61bb      	str	r3, [r7, #24]
 800c6d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d4:	6979      	ldr	r1, [r7, #20]
 800c6d6:	69ba      	ldr	r2, [r7, #24]
 800c6d8:	e841 2300 	strex	r3, r2, [r1]
 800c6dc:	613b      	str	r3, [r7, #16]
   return(result);
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1e6      	bne.n	800c6b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2220      	movs	r2, #32
 800c6e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c6f8:	bf00      	nop
 800c6fa:	3754      	adds	r7, #84	@ 0x54
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b090      	sub	sp, #64	@ 0x40
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c710:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c71a:	d037      	beq.n	800c78c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c71c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c71e:	2200      	movs	r2, #0
 800c720:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	3308      	adds	r3, #8
 800c72a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72e:	e853 3f00 	ldrex	r3, [r3]
 800c732:	623b      	str	r3, [r7, #32]
   return(result);
 800c734:	6a3b      	ldr	r3, [r7, #32]
 800c736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c73a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c73c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3308      	adds	r3, #8
 800c742:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c744:	633a      	str	r2, [r7, #48]	@ 0x30
 800c746:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c74a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c74c:	e841 2300 	strex	r3, r2, [r1]
 800c750:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1e5      	bne.n	800c724 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	60fb      	str	r3, [r7, #12]
   return(result);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c76c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c76e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	461a      	mov	r2, r3
 800c774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c776:	61fb      	str	r3, [r7, #28]
 800c778:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77a:	69b9      	ldr	r1, [r7, #24]
 800c77c:	69fa      	ldr	r2, [r7, #28]
 800c77e:	e841 2300 	strex	r3, r2, [r1]
 800c782:	617b      	str	r3, [r7, #20]
   return(result);
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1e6      	bne.n	800c758 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c78a:	e002      	b.n	800c792 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c78c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c78e:	f011 f917 	bl	801d9c0 <HAL_UART_TxCpltCallback>
}
 800c792:	bf00      	nop
 800c794:	3740      	adds	r7, #64	@ 0x40
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	f7ff f9c7 	bl	800bb3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7ae:	bf00      	nop
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b09c      	sub	sp, #112	@ 0x70
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7c2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	69db      	ldr	r3, [r3, #28]
 800c7c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7cc:	d071      	beq.n	800c8b2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c7ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7de:	e853 3f00 	ldrex	r3, [r3]
 800c7e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c7e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7f4:	657b      	str	r3, [r7, #84]	@ 0x54
 800c7f6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c7fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c7fc:	e841 2300 	strex	r3, r2, [r1]
 800c800:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1e6      	bne.n	800c7d6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	3308      	adds	r3, #8
 800c80e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c812:	e853 3f00 	ldrex	r3, [r3]
 800c816:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81a:	f023 0301 	bic.w	r3, r3, #1
 800c81e:	667b      	str	r3, [r7, #100]	@ 0x64
 800c820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	3308      	adds	r3, #8
 800c826:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c828:	643a      	str	r2, [r7, #64]	@ 0x40
 800c82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c82e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c830:	e841 2300 	strex	r3, r2, [r1]
 800c834:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1e5      	bne.n	800c808 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c83c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3308      	adds	r3, #8
 800c842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c844:	6a3b      	ldr	r3, [r7, #32]
 800c846:	e853 3f00 	ldrex	r3, [r3]
 800c84a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c852:	663b      	str	r3, [r7, #96]	@ 0x60
 800c854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	3308      	adds	r3, #8
 800c85a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c85c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c85e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c864:	e841 2300 	strex	r3, r2, [r1]
 800c868:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d1e5      	bne.n	800c83c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c872:	2220      	movs	r2, #32
 800c874:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c87a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d118      	bne.n	800c8b2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	e853 3f00 	ldrex	r3, [r3]
 800c88c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	f023 0310 	bic.w	r3, r3, #16
 800c894:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c89e:	61bb      	str	r3, [r7, #24]
 800c8a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a2:	6979      	ldr	r1, [r7, #20]
 800c8a4:	69ba      	ldr	r2, [r7, #24]
 800c8a6:	e841 2300 	strex	r3, r2, [r1]
 800c8aa:	613b      	str	r3, [r7, #16]
   return(result);
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1e6      	bne.n	800c880 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d122      	bne.n	800c906 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800c8c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800c8d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c8d8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d204      	bcs.n	800c8ea <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800c8e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8e2:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800c8e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c8ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c8f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c900:	f7ff f93a 	bl	800bb78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c904:	e002      	b.n	800c90c <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800c906:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c908:	f011 f896 	bl	801da38 <HAL_UART_RxCpltCallback>
}
 800c90c:	bf00      	nop
 800c90e:	3770      	adds	r7, #112	@ 0x70
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c920:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2201      	movs	r2, #1
 800c926:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d123      	bne.n	800c978 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c936:	085b      	lsrs	r3, r3, #1
 800c938:	b29a      	uxth	r2, r3
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c94e:	897a      	ldrh	r2, [r7, #10]
 800c950:	429a      	cmp	r2, r3
 800c952:	d803      	bhi.n	800c95c <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	897a      	ldrh	r2, [r7, #10]
 800c958:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c968:	b29b      	uxth	r3, r3
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	4619      	mov	r1, r3
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f7ff f901 	bl	800bb78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c976:	e002      	b.n	800c97e <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f7ff f8e9 	bl	800bb50 <HAL_UART_RxHalfCpltCallback>
}
 800c97e:	bf00      	nop
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b086      	sub	sp, #24
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c992:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c998:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9a0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9ac:	2b80      	cmp	r3, #128	@ 0x80
 800c9ae:	d109      	bne.n	800c9c4 <UART_DMAError+0x3e>
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	2b21      	cmp	r3, #33	@ 0x21
 800c9b4:	d106      	bne.n	800c9c4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800c9be:	6978      	ldr	r0, [r7, #20]
 800c9c0:	f7ff fe16 	bl	800c5f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ce:	2b40      	cmp	r3, #64	@ 0x40
 800c9d0:	d109      	bne.n	800c9e6 <UART_DMAError+0x60>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2b22      	cmp	r3, #34	@ 0x22
 800c9d6:	d106      	bne.n	800c9e6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800c9e0:	6978      	ldr	r0, [r7, #20]
 800c9e2:	f7ff fe2b 	bl	800c63c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9ec:	f043 0210 	orr.w	r2, r3, #16
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9f6:	6978      	ldr	r0, [r7, #20]
 800c9f8:	f7ff f8b4 	bl	800bb64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9fc:	bf00      	nop
 800c9fe:	3718      	adds	r7, #24
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff f8a2 	bl	800bb64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca20:	bf00      	nop
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b08f      	sub	sp, #60	@ 0x3c
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca34:	2b21      	cmp	r3, #33	@ 0x21
 800ca36:	d14c      	bne.n	800cad2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d132      	bne.n	800caaa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4a:	6a3b      	ldr	r3, [r7, #32]
 800ca4c:	e853 3f00 	ldrex	r3, [r3]
 800ca50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca64:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca6a:	e841 2300 	strex	r3, r2, [r1]
 800ca6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1e6      	bne.n	800ca44 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	e853 3f00 	ldrex	r3, [r3]
 800ca82:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	461a      	mov	r2, r3
 800ca92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca94:	61bb      	str	r3, [r7, #24]
 800ca96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca98:	6979      	ldr	r1, [r7, #20]
 800ca9a:	69ba      	ldr	r2, [r7, #24]
 800ca9c:	e841 2300 	strex	r3, r2, [r1]
 800caa0:	613b      	str	r3, [r7, #16]
   return(result);
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1e6      	bne.n	800ca76 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800caa8:	e013      	b.n	800cad2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800caae:	781a      	ldrb	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800caba:	1c5a      	adds	r2, r3, #1
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	3b01      	subs	r3, #1
 800caca:	b29a      	uxth	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800cad2:	bf00      	nop
 800cad4:	373c      	adds	r7, #60	@ 0x3c
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cade:	b480      	push	{r7}
 800cae0:	b091      	sub	sp, #68	@ 0x44
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800caea:	2b21      	cmp	r3, #33	@ 0x21
 800caec:	d151      	bne.n	800cb92 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d132      	bne.n	800cb60 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb02:	e853 3f00 	ldrex	r3, [r3]
 800cb06:	623b      	str	r3, [r7, #32]
   return(result);
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	461a      	mov	r2, r3
 800cb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb18:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb20:	e841 2300 	strex	r3, r2, [r1]
 800cb24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d1e6      	bne.n	800cafa <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	e853 3f00 	ldrex	r3, [r3]
 800cb38:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb40:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	461a      	mov	r2, r3
 800cb48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb4a:	61fb      	str	r3, [r7, #28]
 800cb4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4e:	69b9      	ldr	r1, [r7, #24]
 800cb50:	69fa      	ldr	r2, [r7, #28]
 800cb52:	e841 2300 	strex	r3, r2, [r1]
 800cb56:	617b      	str	r3, [r7, #20]
   return(result);
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1e6      	bne.n	800cb2c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800cb5e:	e018      	b.n	800cb92 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cb66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb74:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb7a:	1c9a      	adds	r2, r3, #2
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800cb92:	bf00      	nop
 800cb94:	3744      	adds	r7, #68	@ 0x44
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr

0800cb9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b088      	sub	sp, #32
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	e853 3f00 	ldrex	r3, [r3]
 800cbb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbba:	61fb      	str	r3, [r7, #28]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	61bb      	str	r3, [r7, #24]
 800cbc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc8:	6979      	ldr	r1, [r7, #20]
 800cbca:	69ba      	ldr	r2, [r7, #24]
 800cbcc:	e841 2300 	strex	r3, r2, [r1]
 800cbd0:	613b      	str	r3, [r7, #16]
   return(result);
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1e6      	bne.n	800cba6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2220      	movs	r2, #32
 800cbdc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f010 feeb 	bl	801d9c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbea:	bf00      	nop
 800cbec:	3720      	adds	r7, #32
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b09c      	sub	sp, #112	@ 0x70
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc00:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc0a:	2b22      	cmp	r3, #34	@ 0x22
 800cc0c:	f040 80b9 	bne.w	800cd82 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc16:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cc1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cc1e:	b2d9      	uxtb	r1, r3
 800cc20:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc2a:	400a      	ands	r2, r1
 800cc2c:	b2d2      	uxtb	r2, r2
 800cc2e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc34:	1c5a      	adds	r2, r3, #1
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	3b01      	subs	r3, #1
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f040 809c 	bne.w	800cd92 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc62:	e853 3f00 	ldrex	r3, [r3]
 800cc66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cc68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	461a      	mov	r2, r3
 800cc76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc78:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cc7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc80:	e841 2300 	strex	r3, r2, [r1]
 800cc84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cc86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1e6      	bne.n	800cc5a <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3308      	adds	r3, #8
 800cc92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc96:	e853 3f00 	ldrex	r3, [r3]
 800cc9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc9e:	f023 0301 	bic.w	r3, r3, #1
 800cca2:	667b      	str	r3, [r7, #100]	@ 0x64
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3308      	adds	r3, #8
 800ccaa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ccac:	647a      	str	r2, [r7, #68]	@ 0x44
 800ccae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccb4:	e841 2300 	strex	r3, r2, [r1]
 800ccb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ccba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1e5      	bne.n	800cc8c <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2220      	movs	r2, #32
 800ccc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d018      	beq.n	800cd14 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccea:	e853 3f00 	ldrex	r3, [r3]
 800ccee:	623b      	str	r3, [r7, #32]
   return(result);
 800ccf0:	6a3b      	ldr	r3, [r7, #32]
 800ccf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ccf6:	663b      	str	r3, [r7, #96]	@ 0x60
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd00:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd08:	e841 2300 	strex	r3, r2, [r1]
 800cd0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1e6      	bne.n	800cce2 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d12e      	bne.n	800cd7a <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	e853 3f00 	ldrex	r3, [r3]
 800cd2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f023 0310 	bic.w	r3, r3, #16
 800cd36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd40:	61fb      	str	r3, [r7, #28]
 800cd42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd44:	69b9      	ldr	r1, [r7, #24]
 800cd46:	69fa      	ldr	r2, [r7, #28]
 800cd48:	e841 2300 	strex	r3, r2, [r1]
 800cd4c:	617b      	str	r3, [r7, #20]
   return(result);
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d1e6      	bne.n	800cd22 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	69db      	ldr	r3, [r3, #28]
 800cd5a:	f003 0310 	and.w	r3, r3, #16
 800cd5e:	2b10      	cmp	r3, #16
 800cd60:	d103      	bne.n	800cd6a <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2210      	movs	r2, #16
 800cd68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7fe ff00 	bl	800bb78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd78:	e00b      	b.n	800cd92 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f010 fe5c 	bl	801da38 <HAL_UART_RxCpltCallback>
}
 800cd80:	e007      	b.n	800cd92 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	699a      	ldr	r2, [r3, #24]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f042 0208 	orr.w	r2, r2, #8
 800cd90:	619a      	str	r2, [r3, #24]
}
 800cd92:	bf00      	nop
 800cd94:	3770      	adds	r7, #112	@ 0x70
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b09c      	sub	sp, #112	@ 0x70
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cda8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdb2:	2b22      	cmp	r3, #34	@ 0x22
 800cdb4:	f040 80b9 	bne.w	800cf2a <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdbe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdc6:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cdc8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800cdcc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdd6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cddc:	1c9a      	adds	r2, r3, #2
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	3b01      	subs	r3, #1
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f040 809c 	bne.w	800cf3a <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce0a:	e853 3f00 	ldrex	r3, [r3]
 800ce0e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ce10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce16:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce20:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce22:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce24:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce28:	e841 2300 	strex	r3, r2, [r1]
 800ce2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ce2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1e6      	bne.n	800ce02 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	3308      	adds	r3, #8
 800ce3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce3e:	e853 3f00 	ldrex	r3, [r3]
 800ce42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce46:	f023 0301 	bic.w	r3, r3, #1
 800ce4a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	3308      	adds	r3, #8
 800ce52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce54:	643a      	str	r2, [r7, #64]	@ 0x40
 800ce56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce5c:	e841 2300 	strex	r3, r2, [r1]
 800ce60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1e5      	bne.n	800ce34 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2220      	movs	r2, #32
 800ce6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d018      	beq.n	800cebc <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce90:	6a3b      	ldr	r3, [r7, #32]
 800ce92:	e853 3f00 	ldrex	r3, [r3]
 800ce96:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ce9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	461a      	mov	r2, r3
 800cea6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ceaa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ceae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ceb0:	e841 2300 	strex	r3, r2, [r1]
 800ceb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1e6      	bne.n	800ce8a <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d12e      	bne.n	800cf22 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	e853 3f00 	ldrex	r3, [r3]
 800ced6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	f023 0310 	bic.w	r3, r3, #16
 800cede:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	461a      	mov	r2, r3
 800cee6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cee8:	61bb      	str	r3, [r7, #24]
 800ceea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceec:	6979      	ldr	r1, [r7, #20]
 800ceee:	69ba      	ldr	r2, [r7, #24]
 800cef0:	e841 2300 	strex	r3, r2, [r1]
 800cef4:	613b      	str	r3, [r7, #16]
   return(result);
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d1e6      	bne.n	800ceca <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	69db      	ldr	r3, [r3, #28]
 800cf02:	f003 0310 	and.w	r3, r3, #16
 800cf06:	2b10      	cmp	r3, #16
 800cf08:	d103      	bne.n	800cf12 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2210      	movs	r2, #16
 800cf10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7fe fe2c 	bl	800bb78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf20:	e00b      	b.n	800cf3a <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f010 fd88 	bl	801da38 <HAL_UART_RxCpltCallback>
}
 800cf28:	e007      	b.n	800cf3a <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	699a      	ldr	r2, [r3, #24]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f042 0208 	orr.w	r2, r2, #8
 800cf38:	619a      	str	r2, [r3, #24]
}
 800cf3a:	bf00      	nop
 800cf3c:	3770      	adds	r7, #112	@ 0x70
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
	...

0800cf44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf44:	b084      	sub	sp, #16
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	f107 001c 	add.w	r0, r7, #28
 800cf52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cf56:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d121      	bne.n	800cfa2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	68da      	ldr	r2, [r3, #12]
 800cf6e:	4b21      	ldr	r3, [pc, #132]	@ (800cff4 <USB_CoreInit+0xb0>)
 800cf70:	4013      	ands	r3, r2
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cf82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d105      	bne.n	800cf96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 fa92 	bl	800d4c0 <USB_CoreReset>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	73fb      	strb	r3, [r7, #15]
 800cfa0:	e010      	b.n	800cfc4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 fa86 	bl	800d4c0 <USB_CoreReset>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800cfc4:	7fbb      	ldrb	r3, [r7, #30]
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d10b      	bne.n	800cfe2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	f043 0206 	orr.w	r2, r3, #6
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	f043 0220 	orr.w	r2, r3, #32
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cfe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3710      	adds	r7, #16
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cfee:	b004      	add	sp, #16
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	ffbdffbf 	.word	0xffbdffbf

0800cff8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	f023 0201 	bic.w	r2, r3, #1
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b084      	sub	sp, #16
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	460b      	mov	r3, r1
 800d024:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d026:	2300      	movs	r3, #0
 800d028:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d036:	78fb      	ldrb	r3, [r7, #3]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d115      	bne.n	800d068 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d048:	200a      	movs	r0, #10
 800d04a:	f7f5 faef 	bl	800262c <HAL_Delay>
      ms += 10U;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	330a      	adds	r3, #10
 800d052:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 fa25 	bl	800d4a4 <USB_GetMode>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d01e      	beq.n	800d09e <USB_SetCurrentMode+0x84>
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2bc7      	cmp	r3, #199	@ 0xc7
 800d064:	d9f0      	bls.n	800d048 <USB_SetCurrentMode+0x2e>
 800d066:	e01a      	b.n	800d09e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d068:	78fb      	ldrb	r3, [r7, #3]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d115      	bne.n	800d09a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d07a:	200a      	movs	r0, #10
 800d07c:	f7f5 fad6 	bl	800262c <HAL_Delay>
      ms += 10U;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	330a      	adds	r3, #10
 800d084:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 fa0c 	bl	800d4a4 <USB_GetMode>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d005      	beq.n	800d09e <USB_SetCurrentMode+0x84>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2bc7      	cmp	r3, #199	@ 0xc7
 800d096:	d9f0      	bls.n	800d07a <USB_SetCurrentMode+0x60>
 800d098:	e001      	b.n	800d09e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	e005      	b.n	800d0aa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2bc8      	cmp	r3, #200	@ 0xc8
 800d0a2:	d101      	bne.n	800d0a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e000      	b.n	800d0aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
	...

0800d0b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b086      	sub	sp, #24
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
 800d0be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d0c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	613b      	str	r3, [r7, #16]
 800d0d2:	e009      	b.n	800d0e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	3340      	adds	r3, #64	@ 0x40
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4413      	add	r3, r2
 800d0de:	2200      	movs	r2, #0
 800d0e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	613b      	str	r3, [r7, #16]
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	2b0e      	cmp	r3, #14
 800d0ec:	d9f2      	bls.n	800d0d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d0ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d11c      	bne.n	800d130 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d104:	f043 0302 	orr.w	r3, r3, #2
 800d108:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d10e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	601a      	str	r2, [r3, #0]
 800d12e:	e005      	b.n	800d13c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d134:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d142:	461a      	mov	r2, r3
 800d144:	2300      	movs	r3, #0
 800d146:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d148:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d10d      	bne.n	800d16c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d154:	2b00      	cmp	r3, #0
 800d156:	d104      	bne.n	800d162 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d158:	2100      	movs	r1, #0
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f968 	bl	800d430 <USB_SetDevSpeed>
 800d160:	e008      	b.n	800d174 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d162:	2101      	movs	r1, #1
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f963 	bl	800d430 <USB_SetDevSpeed>
 800d16a:	e003      	b.n	800d174 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d16c:	2103      	movs	r1, #3
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f95e 	bl	800d430 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d174:	2110      	movs	r1, #16
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 f8fa 	bl	800d370 <USB_FlushTxFifo>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d001      	beq.n	800d186 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d182:	2301      	movs	r3, #1
 800d184:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 f924 	bl	800d3d4 <USB_FlushRxFifo>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d001      	beq.n	800d196 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d192:	2301      	movs	r3, #1
 800d194:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d19c:	461a      	mov	r2, r3
 800d19e:	2300      	movs	r3, #0
 800d1a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	613b      	str	r3, [r7, #16]
 800d1be:	e043      	b.n	800d248 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	015a      	lsls	r2, r3, #5
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d1d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d1d6:	d118      	bne.n	800d20a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10a      	bne.n	800d1f4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	015a      	lsls	r2, r3, #5
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d1f0:	6013      	str	r3, [r2, #0]
 800d1f2:	e013      	b.n	800d21c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	015a      	lsls	r2, r3, #5
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d200:	461a      	mov	r2, r3
 800d202:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d206:	6013      	str	r3, [r2, #0]
 800d208:	e008      	b.n	800d21c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	015a      	lsls	r2, r3, #5
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	4413      	add	r3, r2
 800d212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d216:	461a      	mov	r2, r3
 800d218:	2300      	movs	r3, #0
 800d21a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	015a      	lsls	r2, r3, #5
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	4413      	add	r3, r2
 800d224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d228:	461a      	mov	r2, r3
 800d22a:	2300      	movs	r3, #0
 800d22c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	015a      	lsls	r2, r3, #5
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	4413      	add	r3, r2
 800d236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d23a:	461a      	mov	r2, r3
 800d23c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d240:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	3301      	adds	r3, #1
 800d246:	613b      	str	r3, [r7, #16]
 800d248:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d24c:	461a      	mov	r2, r3
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	4293      	cmp	r3, r2
 800d252:	d3b5      	bcc.n	800d1c0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d254:	2300      	movs	r3, #0
 800d256:	613b      	str	r3, [r7, #16]
 800d258:	e043      	b.n	800d2e2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	015a      	lsls	r2, r3, #5
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	4413      	add	r3, r2
 800d262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d26c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d270:	d118      	bne.n	800d2a4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10a      	bne.n	800d28e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	015a      	lsls	r2, r3, #5
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	4413      	add	r3, r2
 800d280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d284:	461a      	mov	r2, r3
 800d286:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d28a:	6013      	str	r3, [r2, #0]
 800d28c:	e013      	b.n	800d2b6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	015a      	lsls	r2, r3, #5
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	4413      	add	r3, r2
 800d296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d29a:	461a      	mov	r2, r3
 800d29c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d2a0:	6013      	str	r3, [r2, #0]
 800d2a2:	e008      	b.n	800d2b6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	015a      	lsls	r2, r3, #5
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	015a      	lsls	r2, r3, #5
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	4413      	add	r3, r2
 800d2be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	015a      	lsls	r2, r3, #5
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d2da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	613b      	str	r3, [r7, #16]
 800d2e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d3b5      	bcc.n	800d25a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d2fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d300:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d30e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d310:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d314:	2b00      	cmp	r3, #0
 800d316:	d105      	bne.n	800d324 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	699b      	ldr	r3, [r3, #24]
 800d31c:	f043 0210 	orr.w	r2, r3, #16
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	699a      	ldr	r2, [r3, #24]
 800d328:	4b0f      	ldr	r3, [pc, #60]	@ (800d368 <USB_DevInit+0x2b4>)
 800d32a:	4313      	orrs	r3, r2
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d330:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d334:	2b00      	cmp	r3, #0
 800d336:	d005      	beq.n	800d344 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	f043 0208 	orr.w	r2, r3, #8
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d344:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d105      	bne.n	800d358 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	699a      	ldr	r2, [r3, #24]
 800d350:	4b06      	ldr	r3, [pc, #24]	@ (800d36c <USB_DevInit+0x2b8>)
 800d352:	4313      	orrs	r3, r2
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d358:	7dfb      	ldrb	r3, [r7, #23]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3718      	adds	r7, #24
 800d35e:	46bd      	mov	sp, r7
 800d360:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d364:	b004      	add	sp, #16
 800d366:	4770      	bx	lr
 800d368:	803c3800 	.word	0x803c3800
 800d36c:	40000004 	.word	0x40000004

0800d370 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d37a:	2300      	movs	r3, #0
 800d37c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	3301      	adds	r3, #1
 800d382:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d38a:	d901      	bls.n	800d390 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d38c:	2303      	movs	r3, #3
 800d38e:	e01b      	b.n	800d3c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	2b00      	cmp	r3, #0
 800d396:	daf2      	bge.n	800d37e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d398:	2300      	movs	r3, #0
 800d39a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	019b      	lsls	r3, r3, #6
 800d3a0:	f043 0220 	orr.w	r2, r3, #32
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d3b4:	d901      	bls.n	800d3ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d3b6:	2303      	movs	r3, #3
 800d3b8:	e006      	b.n	800d3c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	691b      	ldr	r3, [r3, #16]
 800d3be:	f003 0320 	and.w	r3, r3, #32
 800d3c2:	2b20      	cmp	r3, #32
 800d3c4:	d0f0      	beq.n	800d3a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3714      	adds	r7, #20
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d3ec:	d901      	bls.n	800d3f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	e018      	b.n	800d424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	691b      	ldr	r3, [r3, #16]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	daf2      	bge.n	800d3e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2210      	movs	r2, #16
 800d402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	3301      	adds	r3, #1
 800d408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d410:	d901      	bls.n	800d416 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d412:	2303      	movs	r3, #3
 800d414:	e006      	b.n	800d424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	f003 0310 	and.w	r3, r3, #16
 800d41e:	2b10      	cmp	r3, #16
 800d420:	d0f0      	beq.n	800d404 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3714      	adds	r7, #20
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d430:	b480      	push	{r7}
 800d432:	b085      	sub	sp, #20
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	460b      	mov	r3, r1
 800d43a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	78fb      	ldrb	r3, [r7, #3]
 800d44a:	68f9      	ldr	r1, [r7, #12]
 800d44c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d450:	4313      	orrs	r3, r2
 800d452:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3714      	adds	r7, #20
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr

0800d462 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d462:	b480      	push	{r7}
 800d464:	b085      	sub	sp, #20
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d47c:	f023 0303 	bic.w	r3, r3, #3
 800d480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d490:	f043 0302 	orr.w	r3, r3, #2
 800d494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3714      	adds	r7, #20
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	695b      	ldr	r3, [r3, #20]
 800d4b0:	f003 0301 	and.w	r3, r3, #1
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b085      	sub	sp, #20
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d4d8:	d901      	bls.n	800d4de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d4da:	2303      	movs	r3, #3
 800d4dc:	e022      	b.n	800d524 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	691b      	ldr	r3, [r3, #16]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	daf2      	bge.n	800d4cc <USB_CoreReset+0xc>

  count = 10U;
 800d4e6:	230a      	movs	r3, #10
 800d4e8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800d4ea:	e002      	b.n	800d4f2 <USB_CoreReset+0x32>
  {
    count--;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1f9      	bne.n	800d4ec <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	691b      	ldr	r3, [r3, #16]
 800d4fc:	f043 0201 	orr.w	r2, r3, #1
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	3301      	adds	r3, #1
 800d508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d510:	d901      	bls.n	800d516 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800d512:	2303      	movs	r3, #3
 800d514:	e006      	b.n	800d524 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	f003 0301 	and.w	r3, r3, #1
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d0f0      	beq.n	800d504 <USB_CoreReset+0x44>

  return HAL_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800d536:	4b92      	ldr	r3, [pc, #584]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d538:	22c0      	movs	r2, #192	@ 0xc0
 800d53a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800d53c:	4b90      	ldr	r3, [pc, #576]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d53e:	22a8      	movs	r2, #168	@ 0xa8
 800d540:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800d542:	4b8f      	ldr	r3, [pc, #572]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d544:	2201      	movs	r2, #1
 800d546:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 168;
 800d548:	4b8d      	ldr	r3, [pc, #564]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d54a:	22a8      	movs	r2, #168	@ 0xa8
 800d54c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800d54e:	4b8d      	ldr	r3, [pc, #564]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d550:	22ff      	movs	r2, #255	@ 0xff
 800d552:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800d554:	4b8b      	ldr	r3, [pc, #556]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d556:	22ff      	movs	r2, #255	@ 0xff
 800d558:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800d55a:	4b8a      	ldr	r3, [pc, #552]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d55c:	22ff      	movs	r2, #255	@ 0xff
 800d55e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800d560:	4b88      	ldr	r3, [pc, #544]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d562:	2200      	movs	r2, #0
 800d564:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800d566:	4b88      	ldr	r3, [pc, #544]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d568:	2200      	movs	r2, #0
 800d56a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800d56c:	4b86      	ldr	r3, [pc, #536]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d56e:	2200      	movs	r2, #0
 800d570:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800d572:	4b85      	ldr	r3, [pc, #532]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d574:	2200      	movs	r2, #0
 800d576:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800d578:	4b83      	ldr	r3, [pc, #524]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800d57e:	2100      	movs	r1, #0
 800d580:	2000      	movs	r0, #0
 800d582:	f005 f863 	bl	801264c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800d586:	4b7e      	ldr	r3, [pc, #504]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	061a      	lsls	r2, r3, #24
 800d58c:	4b7c      	ldr	r3, [pc, #496]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d58e:	785b      	ldrb	r3, [r3, #1]
 800d590:	041b      	lsls	r3, r3, #16
 800d592:	431a      	orrs	r2, r3
 800d594:	4b7a      	ldr	r3, [pc, #488]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d596:	789b      	ldrb	r3, [r3, #2]
 800d598:	021b      	lsls	r3, r3, #8
 800d59a:	4313      	orrs	r3, r2
 800d59c:	4a78      	ldr	r2, [pc, #480]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d59e:	78d2      	ldrb	r2, [r2, #3]
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	061a      	lsls	r2, r3, #24
 800d5a4:	4b76      	ldr	r3, [pc, #472]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	0619      	lsls	r1, r3, #24
 800d5aa:	4b75      	ldr	r3, [pc, #468]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d5ac:	785b      	ldrb	r3, [r3, #1]
 800d5ae:	041b      	lsls	r3, r3, #16
 800d5b0:	4319      	orrs	r1, r3
 800d5b2:	4b73      	ldr	r3, [pc, #460]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d5b4:	789b      	ldrb	r3, [r3, #2]
 800d5b6:	021b      	lsls	r3, r3, #8
 800d5b8:	430b      	orrs	r3, r1
 800d5ba:	4971      	ldr	r1, [pc, #452]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d5bc:	78c9      	ldrb	r1, [r1, #3]
 800d5be:	430b      	orrs	r3, r1
 800d5c0:	021b      	lsls	r3, r3, #8
 800d5c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d5c6:	431a      	orrs	r2, r3
 800d5c8:	4b6d      	ldr	r3, [pc, #436]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	0619      	lsls	r1, r3, #24
 800d5ce:	4b6c      	ldr	r3, [pc, #432]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d5d0:	785b      	ldrb	r3, [r3, #1]
 800d5d2:	041b      	lsls	r3, r3, #16
 800d5d4:	4319      	orrs	r1, r3
 800d5d6:	4b6a      	ldr	r3, [pc, #424]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d5d8:	789b      	ldrb	r3, [r3, #2]
 800d5da:	021b      	lsls	r3, r3, #8
 800d5dc:	430b      	orrs	r3, r1
 800d5de:	4968      	ldr	r1, [pc, #416]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d5e0:	78c9      	ldrb	r1, [r1, #3]
 800d5e2:	430b      	orrs	r3, r1
 800d5e4:	0a1b      	lsrs	r3, r3, #8
 800d5e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d5ea:	431a      	orrs	r2, r3
 800d5ec:	4b64      	ldr	r3, [pc, #400]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	0619      	lsls	r1, r3, #24
 800d5f2:	4b63      	ldr	r3, [pc, #396]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d5f4:	785b      	ldrb	r3, [r3, #1]
 800d5f6:	041b      	lsls	r3, r3, #16
 800d5f8:	4319      	orrs	r1, r3
 800d5fa:	4b61      	ldr	r3, [pc, #388]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d5fc:	789b      	ldrb	r3, [r3, #2]
 800d5fe:	021b      	lsls	r3, r3, #8
 800d600:	430b      	orrs	r3, r1
 800d602:	495f      	ldr	r1, [pc, #380]	@ (800d780 <MX_LWIP_Init+0x250>)
 800d604:	78c9      	ldrb	r1, [r1, #3]
 800d606:	430b      	orrs	r3, r1
 800d608:	0e1b      	lsrs	r3, r3, #24
 800d60a:	4313      	orrs	r3, r2
 800d60c:	4a5f      	ldr	r2, [pc, #380]	@ (800d78c <MX_LWIP_Init+0x25c>)
 800d60e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800d610:	4b5c      	ldr	r3, [pc, #368]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	061a      	lsls	r2, r3, #24
 800d616:	4b5b      	ldr	r3, [pc, #364]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d618:	785b      	ldrb	r3, [r3, #1]
 800d61a:	041b      	lsls	r3, r3, #16
 800d61c:	431a      	orrs	r2, r3
 800d61e:	4b59      	ldr	r3, [pc, #356]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d620:	789b      	ldrb	r3, [r3, #2]
 800d622:	021b      	lsls	r3, r3, #8
 800d624:	4313      	orrs	r3, r2
 800d626:	4a57      	ldr	r2, [pc, #348]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d628:	78d2      	ldrb	r2, [r2, #3]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	061a      	lsls	r2, r3, #24
 800d62e:	4b55      	ldr	r3, [pc, #340]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	0619      	lsls	r1, r3, #24
 800d634:	4b53      	ldr	r3, [pc, #332]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d636:	785b      	ldrb	r3, [r3, #1]
 800d638:	041b      	lsls	r3, r3, #16
 800d63a:	4319      	orrs	r1, r3
 800d63c:	4b51      	ldr	r3, [pc, #324]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d63e:	789b      	ldrb	r3, [r3, #2]
 800d640:	021b      	lsls	r3, r3, #8
 800d642:	430b      	orrs	r3, r1
 800d644:	494f      	ldr	r1, [pc, #316]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d646:	78c9      	ldrb	r1, [r1, #3]
 800d648:	430b      	orrs	r3, r1
 800d64a:	021b      	lsls	r3, r3, #8
 800d64c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d650:	431a      	orrs	r2, r3
 800d652:	4b4c      	ldr	r3, [pc, #304]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	0619      	lsls	r1, r3, #24
 800d658:	4b4a      	ldr	r3, [pc, #296]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d65a:	785b      	ldrb	r3, [r3, #1]
 800d65c:	041b      	lsls	r3, r3, #16
 800d65e:	4319      	orrs	r1, r3
 800d660:	4b48      	ldr	r3, [pc, #288]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d662:	789b      	ldrb	r3, [r3, #2]
 800d664:	021b      	lsls	r3, r3, #8
 800d666:	430b      	orrs	r3, r1
 800d668:	4946      	ldr	r1, [pc, #280]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d66a:	78c9      	ldrb	r1, [r1, #3]
 800d66c:	430b      	orrs	r3, r1
 800d66e:	0a1b      	lsrs	r3, r3, #8
 800d670:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d674:	431a      	orrs	r2, r3
 800d676:	4b43      	ldr	r3, [pc, #268]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	0619      	lsls	r1, r3, #24
 800d67c:	4b41      	ldr	r3, [pc, #260]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d67e:	785b      	ldrb	r3, [r3, #1]
 800d680:	041b      	lsls	r3, r3, #16
 800d682:	4319      	orrs	r1, r3
 800d684:	4b3f      	ldr	r3, [pc, #252]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d686:	789b      	ldrb	r3, [r3, #2]
 800d688:	021b      	lsls	r3, r3, #8
 800d68a:	430b      	orrs	r3, r1
 800d68c:	493d      	ldr	r1, [pc, #244]	@ (800d784 <MX_LWIP_Init+0x254>)
 800d68e:	78c9      	ldrb	r1, [r1, #3]
 800d690:	430b      	orrs	r3, r1
 800d692:	0e1b      	lsrs	r3, r3, #24
 800d694:	4313      	orrs	r3, r2
 800d696:	4a3e      	ldr	r2, [pc, #248]	@ (800d790 <MX_LWIP_Init+0x260>)
 800d698:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800d69a:	4b3b      	ldr	r3, [pc, #236]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	061a      	lsls	r2, r3, #24
 800d6a0:	4b39      	ldr	r3, [pc, #228]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d6a2:	785b      	ldrb	r3, [r3, #1]
 800d6a4:	041b      	lsls	r3, r3, #16
 800d6a6:	431a      	orrs	r2, r3
 800d6a8:	4b37      	ldr	r3, [pc, #220]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d6aa:	789b      	ldrb	r3, [r3, #2]
 800d6ac:	021b      	lsls	r3, r3, #8
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	4a35      	ldr	r2, [pc, #212]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d6b2:	78d2      	ldrb	r2, [r2, #3]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	061a      	lsls	r2, r3, #24
 800d6b8:	4b33      	ldr	r3, [pc, #204]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	0619      	lsls	r1, r3, #24
 800d6be:	4b32      	ldr	r3, [pc, #200]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d6c0:	785b      	ldrb	r3, [r3, #1]
 800d6c2:	041b      	lsls	r3, r3, #16
 800d6c4:	4319      	orrs	r1, r3
 800d6c6:	4b30      	ldr	r3, [pc, #192]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d6c8:	789b      	ldrb	r3, [r3, #2]
 800d6ca:	021b      	lsls	r3, r3, #8
 800d6cc:	430b      	orrs	r3, r1
 800d6ce:	492e      	ldr	r1, [pc, #184]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d6d0:	78c9      	ldrb	r1, [r1, #3]
 800d6d2:	430b      	orrs	r3, r1
 800d6d4:	021b      	lsls	r3, r3, #8
 800d6d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d6da:	431a      	orrs	r2, r3
 800d6dc:	4b2a      	ldr	r3, [pc, #168]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	0619      	lsls	r1, r3, #24
 800d6e2:	4b29      	ldr	r3, [pc, #164]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d6e4:	785b      	ldrb	r3, [r3, #1]
 800d6e6:	041b      	lsls	r3, r3, #16
 800d6e8:	4319      	orrs	r1, r3
 800d6ea:	4b27      	ldr	r3, [pc, #156]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d6ec:	789b      	ldrb	r3, [r3, #2]
 800d6ee:	021b      	lsls	r3, r3, #8
 800d6f0:	430b      	orrs	r3, r1
 800d6f2:	4925      	ldr	r1, [pc, #148]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d6f4:	78c9      	ldrb	r1, [r1, #3]
 800d6f6:	430b      	orrs	r3, r1
 800d6f8:	0a1b      	lsrs	r3, r3, #8
 800d6fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d6fe:	431a      	orrs	r2, r3
 800d700:	4b21      	ldr	r3, [pc, #132]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	0619      	lsls	r1, r3, #24
 800d706:	4b20      	ldr	r3, [pc, #128]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d708:	785b      	ldrb	r3, [r3, #1]
 800d70a:	041b      	lsls	r3, r3, #16
 800d70c:	4319      	orrs	r1, r3
 800d70e:	4b1e      	ldr	r3, [pc, #120]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d710:	789b      	ldrb	r3, [r3, #2]
 800d712:	021b      	lsls	r3, r3, #8
 800d714:	430b      	orrs	r3, r1
 800d716:	491c      	ldr	r1, [pc, #112]	@ (800d788 <MX_LWIP_Init+0x258>)
 800d718:	78c9      	ldrb	r1, [r1, #3]
 800d71a:	430b      	orrs	r3, r1
 800d71c:	0e1b      	lsrs	r3, r3, #24
 800d71e:	4313      	orrs	r3, r2
 800d720:	4a1c      	ldr	r2, [pc, #112]	@ (800d794 <MX_LWIP_Init+0x264>)
 800d722:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800d724:	4b1c      	ldr	r3, [pc, #112]	@ (800d798 <MX_LWIP_Init+0x268>)
 800d726:	9302      	str	r3, [sp, #8]
 800d728:	4b1c      	ldr	r3, [pc, #112]	@ (800d79c <MX_LWIP_Init+0x26c>)
 800d72a:	9301      	str	r3, [sp, #4]
 800d72c:	2300      	movs	r3, #0
 800d72e:	9300      	str	r3, [sp, #0]
 800d730:	4b18      	ldr	r3, [pc, #96]	@ (800d794 <MX_LWIP_Init+0x264>)
 800d732:	4a17      	ldr	r2, [pc, #92]	@ (800d790 <MX_LWIP_Init+0x260>)
 800d734:	4915      	ldr	r1, [pc, #84]	@ (800d78c <MX_LWIP_Init+0x25c>)
 800d736:	481a      	ldr	r0, [pc, #104]	@ (800d7a0 <MX_LWIP_Init+0x270>)
 800d738:	f005 fd4e 	bl	80131d8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800d73c:	4818      	ldr	r0, [pc, #96]	@ (800d7a0 <MX_LWIP_Init+0x270>)
 800d73e:	f005 fefd 	bl	801353c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800d742:	4817      	ldr	r0, [pc, #92]	@ (800d7a0 <MX_LWIP_Init+0x270>)
 800d744:	f005 ff0a 	bl	801355c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800d748:	4916      	ldr	r1, [pc, #88]	@ (800d7a4 <MX_LWIP_Init+0x274>)
 800d74a:	4815      	ldr	r0, [pc, #84]	@ (800d7a0 <MX_LWIP_Init+0x270>)
 800d74c:	f006 f808 	bl	8013760 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800d750:	2224      	movs	r2, #36	@ 0x24
 800d752:	2100      	movs	r1, #0
 800d754:	4814      	ldr	r0, [pc, #80]	@ (800d7a8 <MX_LWIP_Init+0x278>)
 800d756:	f010 fb22 	bl	801dd9e <memset>
  attributes.name = "EthLink";
 800d75a:	4b13      	ldr	r3, [pc, #76]	@ (800d7a8 <MX_LWIP_Init+0x278>)
 800d75c:	4a13      	ldr	r2, [pc, #76]	@ (800d7ac <MX_LWIP_Init+0x27c>)
 800d75e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800d760:	4b11      	ldr	r3, [pc, #68]	@ (800d7a8 <MX_LWIP_Init+0x278>)
 800d762:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d766:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800d768:	4b0f      	ldr	r3, [pc, #60]	@ (800d7a8 <MX_LWIP_Init+0x278>)
 800d76a:	2210      	movs	r2, #16
 800d76c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800d76e:	4a0e      	ldr	r2, [pc, #56]	@ (800d7a8 <MX_LWIP_Init+0x278>)
 800d770:	490b      	ldr	r1, [pc, #44]	@ (800d7a0 <MX_LWIP_Init+0x270>)
 800d772:	480f      	ldr	r0, [pc, #60]	@ (800d7b0 <MX_LWIP_Init+0x280>)
 800d774:	f000 fdce 	bl	800e314 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  // printf("IP: %s\n\r", ipaddr_ntoa(&gnetif.ip_addr));
/* USER CODE END 3 */
}
 800d778:	bf00      	nop
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	20000d4c 	.word	0x20000d4c
 800d784:	20000d50 	.word	0x20000d50
 800d788:	20000d54 	.word	0x20000d54
 800d78c:	20000d40 	.word	0x20000d40
 800d790:	20000d44 	.word	0x20000d44
 800d794:	20000d48 	.word	0x20000d48
 800d798:	08012589 	.word	0x08012589
 800d79c:	0800dcf5 	.word	0x0800dcf5
 800d7a0:	20000d0c 	.word	0x20000d0c
 800d7a4:	0800d7b5 	.word	0x0800d7b5
 800d7a8:	20000d58 	.word	0x20000d58
 800d7ac:	0801ed64 	.word	0x0801ed64
 800d7b0:	0800dfcd 	.word	0x0800dfcd

0800d7b4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b087      	sub	sp, #28
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800d7da:	2320      	movs	r3, #32
 800d7dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d7de:	f3bf 8f4f 	dsb	sy
}
 800d7e2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800d7e4:	e00b      	b.n	800d7fe <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800d7e6:	4a0d      	ldr	r2, [pc, #52]	@ (800d81c <SCB_InvalidateDCache_by_Addr+0x54>)
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	693a      	ldr	r2, [r7, #16]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800d7f6:	697a      	ldr	r2, [r7, #20]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2b00      	cmp	r3, #0
 800d802:	dcf0      	bgt.n	800d7e6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800d804:	f3bf 8f4f 	dsb	sy
}
 800d808:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d80a:	f3bf 8f6f 	isb	sy
}
 800d80e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800d810:	bf00      	nop
 800d812:	371c      	adds	r7, #28
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	e000ed00 	.word	0xe000ed00

0800d820 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800d828:	4b04      	ldr	r3, [pc, #16]	@ (800d83c <HAL_ETH_RxCpltCallback+0x1c>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f001 f88f 	bl	800e950 <osSemaphoreRelease>
}
 800d832:	bf00      	nop
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	2000a088 	.word	0x2000a088

0800d840 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800d848:	4b04      	ldr	r3, [pc, #16]	@ (800d85c <HAL_ETH_TxCpltCallback+0x1c>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f001 f87f 	bl	800e950 <osSemaphoreRelease>
}
 800d852:	bf00      	nop
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
 800d85a:	bf00      	nop
 800d85c:	2000a08c 	.word	0x2000a08c

0800d860 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7f7 fb32 	bl	8004ed2 <HAL_ETH_GetDMAError>
 800d86e:	4603      	mov	r3, r0
 800d870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d874:	2b80      	cmp	r3, #128	@ 0x80
 800d876:	d104      	bne.n	800d882 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800d878:	4b04      	ldr	r3, [pc, #16]	@ (800d88c <HAL_ETH_ErrorCallback+0x2c>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4618      	mov	r0, r3
 800d87e:	f001 f867 	bl	800e950 <osSemaphoreRelease>
  }
}
 800d882:	bf00      	nop
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	2000a088 	.word	0x2000a088

0800d890 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b0aa      	sub	sp, #168	@ 0xa8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800d898:	2300      	movs	r3, #0
 800d89a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800d8aa:	f107 0310 	add.w	r3, r7, #16
 800d8ae:	2264      	movs	r2, #100	@ 0x64
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f010 fa73 	bl	801dd9e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800d8b8:	4b89      	ldr	r3, [pc, #548]	@ (800dae0 <low_level_init+0x250>)
 800d8ba:	4a8a      	ldr	r2, [pc, #552]	@ (800dae4 <low_level_init+0x254>)
 800d8bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800d8c2:	2380      	movs	r3, #128	@ 0x80
 800d8c4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800d8c6:	23e1      	movs	r3, #225	@ 0xe1
 800d8c8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800d8d6:	4a82      	ldr	r2, [pc, #520]	@ (800dae0 <low_level_init+0x250>)
 800d8d8:	f107 0308 	add.w	r3, r7, #8
 800d8dc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800d8de:	4b80      	ldr	r3, [pc, #512]	@ (800dae0 <low_level_init+0x250>)
 800d8e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800d8e4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800d8e6:	4b7e      	ldr	r3, [pc, #504]	@ (800dae0 <low_level_init+0x250>)
 800d8e8:	4a7f      	ldr	r2, [pc, #508]	@ (800dae8 <low_level_init+0x258>)
 800d8ea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800d8ec:	4b7c      	ldr	r3, [pc, #496]	@ (800dae0 <low_level_init+0x250>)
 800d8ee:	4a7f      	ldr	r2, [pc, #508]	@ (800daec <low_level_init+0x25c>)
 800d8f0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800d8f2:	4b7b      	ldr	r3, [pc, #492]	@ (800dae0 <low_level_init+0x250>)
 800d8f4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800d8f8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800d8fa:	4879      	ldr	r0, [pc, #484]	@ (800dae0 <low_level_init+0x250>)
 800d8fc:	f7f6 fca0 	bl	8004240 <HAL_ETH_Init>
 800d900:	4603      	mov	r3, r0
 800d902:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800d906:	2238      	movs	r2, #56	@ 0x38
 800d908:	2100      	movs	r1, #0
 800d90a:	4879      	ldr	r0, [pc, #484]	@ (800daf0 <low_level_init+0x260>)
 800d90c:	f010 fa47 	bl	801dd9e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800d910:	4b77      	ldr	r3, [pc, #476]	@ (800daf0 <low_level_init+0x260>)
 800d912:	2221      	movs	r2, #33	@ 0x21
 800d914:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800d916:	4b76      	ldr	r3, [pc, #472]	@ (800daf0 <low_level_init+0x260>)
 800d918:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800d91c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800d91e:	4b74      	ldr	r3, [pc, #464]	@ (800daf0 <low_level_init+0x260>)
 800d920:	2200      	movs	r2, #0
 800d922:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800d924:	4873      	ldr	r0, [pc, #460]	@ (800daf4 <low_level_init+0x264>)
 800d926:	f005 fb11 	bl	8012f4c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2206      	movs	r2, #6
 800d92e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800d932:	4b6b      	ldr	r3, [pc, #428]	@ (800dae0 <low_level_init+0x250>)
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	781a      	ldrb	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800d93e:	4b68      	ldr	r3, [pc, #416]	@ (800dae0 <low_level_init+0x250>)
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	785a      	ldrb	r2, [r3, #1]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800d94a:	4b65      	ldr	r3, [pc, #404]	@ (800dae0 <low_level_init+0x250>)
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	789a      	ldrb	r2, [r3, #2]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800d956:	4b62      	ldr	r3, [pc, #392]	@ (800dae0 <low_level_init+0x250>)
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	78da      	ldrb	r2, [r3, #3]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800d962:	4b5f      	ldr	r3, [pc, #380]	@ (800dae0 <low_level_init+0x250>)
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	791a      	ldrb	r2, [r3, #4]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800d96e:	4b5c      	ldr	r3, [pc, #368]	@ (800dae0 <low_level_init+0x250>)
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	795a      	ldrb	r2, [r3, #5]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800d980:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d988:	f043 030a 	orr.w	r3, r3, #10
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800d994:	2200      	movs	r2, #0
 800d996:	2100      	movs	r1, #0
 800d998:	2001      	movs	r0, #1
 800d99a:	f000 fed7 	bl	800e74c <osSemaphoreNew>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	4a55      	ldr	r2, [pc, #340]	@ (800daf8 <low_level_init+0x268>)
 800d9a2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	2001      	movs	r0, #1
 800d9aa:	f000 fecf 	bl	800e74c <osSemaphoreNew>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	4a52      	ldr	r2, [pc, #328]	@ (800dafc <low_level_init+0x26c>)
 800d9b2:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800d9b4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800d9b8:	2224      	movs	r2, #36	@ 0x24
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f010 f9ee 	bl	801dd9e <memset>
  attributes.name = "EthIf";
 800d9c2:	4b4f      	ldr	r3, [pc, #316]	@ (800db00 <low_level_init+0x270>)
 800d9c4:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800d9c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d9ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800d9ce:	2330      	movs	r3, #48	@ 0x30
 800d9d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800d9d4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800d9d8:	461a      	mov	r2, r3
 800d9da:	6879      	ldr	r1, [r7, #4]
 800d9dc:	4849      	ldr	r0, [pc, #292]	@ (800db04 <low_level_init+0x274>)
 800d9de:	f000 fc99 	bl	800e314 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800d9e2:	4949      	ldr	r1, [pc, #292]	@ (800db08 <low_level_init+0x278>)
 800d9e4:	4849      	ldr	r0, [pc, #292]	@ (800db0c <low_level_init+0x27c>)
 800d9e6:	f7f4 fcee 	bl	80023c6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800d9ea:	4848      	ldr	r0, [pc, #288]	@ (800db0c <low_level_init+0x27c>)
 800d9ec:	f7f4 fd1d 	bl	800242a <LAN8742_Init>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d006      	beq.n	800da04 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f005 fe82 	bl	8013700 <netif_set_link_down>
    netif_set_down(netif);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f005 fe19 	bl	8013634 <netif_set_down>
 800da02:	e06a      	b.n	800dada <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800da04:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d164      	bne.n	800dad6 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800da0c:	483f      	ldr	r0, [pc, #252]	@ (800db0c <low_level_init+0x27c>)
 800da0e:	f7f4 fd59 	bl	80024c4 <LAN8742_GetLinkState>
 800da12:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800da16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	dc06      	bgt.n	800da2c <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f005 fe6e 	bl	8013700 <netif_set_link_down>
      netif_set_down(netif);
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f005 fe05 	bl	8013634 <netif_set_down>
 800da2a:	e056      	b.n	800dada <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800da2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da30:	3b02      	subs	r3, #2
 800da32:	2b03      	cmp	r3, #3
 800da34:	d82a      	bhi.n	800da8c <low_level_init+0x1fc>
 800da36:	a201      	add	r2, pc, #4	@ (adr r2, 800da3c <low_level_init+0x1ac>)
 800da38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3c:	0800da4d 	.word	0x0800da4d
 800da40:	0800da5f 	.word	0x0800da5f
 800da44:	0800da6f 	.word	0x0800da6f
 800da48:	0800da7f 	.word	0x0800da7f
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800da4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800da54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800da58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800da5c:	e01f      	b.n	800da9e <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800da5e:	2300      	movs	r3, #0
 800da60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800da64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800da68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800da6c:	e017      	b.n	800da9e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800da6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800da76:	2300      	movs	r3, #0
 800da78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800da7c:	e00f      	b.n	800da9e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800da7e:	2300      	movs	r3, #0
 800da80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800da84:	2300      	movs	r3, #0
 800da86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800da8a:	e008      	b.n	800da9e <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800da8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800da94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800da98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800da9c:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800da9e:	f107 0310 	add.w	r3, r7, #16
 800daa2:	4619      	mov	r1, r3
 800daa4:	480e      	ldr	r0, [pc, #56]	@ (800dae0 <low_level_init+0x250>)
 800daa6:	f7f7 f8b3 	bl	8004c10 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800daaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800daae:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800dab0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dab4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800dab6:	f107 0310 	add.w	r3, r7, #16
 800daba:	4619      	mov	r1, r3
 800dabc:	4808      	ldr	r0, [pc, #32]	@ (800dae0 <low_level_init+0x250>)
 800dabe:	f7f7 f99e 	bl	8004dfe <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800dac2:	4807      	ldr	r0, [pc, #28]	@ (800dae0 <low_level_init+0x250>)
 800dac4:	f7f6 fc56 	bl	8004374 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f005 fd47 	bl	801355c <netif_set_up>
    netif_set_link_up(netif);
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f005 fde2 	bl	8013698 <netif_set_link_up>
 800dad4:	e001      	b.n	800dada <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800dad6:	f7f3 fc4b 	bl	8001370 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800dada:	37a8      	adds	r7, #168	@ 0xa8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	2000a090 	.word	0x2000a090
 800dae4:	40028000 	.word	0x40028000
 800dae8:	2000012c 	.word	0x2000012c
 800daec:	2000008c 	.word	0x2000008c
 800daf0:	2000a140 	.word	0x2000a140
 800daf4:	08021b78 	.word	0x08021b78
 800daf8:	2000a088 	.word	0x2000a088
 800dafc:	2000a08c 	.word	0x2000a08c
 800db00:	0801ed6c 	.word	0x0801ed6c
 800db04:	0800dca1 	.word	0x0800dca1
 800db08:	2000000c 	.word	0x2000000c
 800db0c:	2000a178 	.word	0x2000a178

0800db10 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b092      	sub	sp, #72	@ 0x48
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800db1a:	2300      	movs	r3, #0
 800db1c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800db1e:	2300      	movs	r3, #0
 800db20:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800db28:	f107 030c 	add.w	r3, r7, #12
 800db2c:	2230      	movs	r2, #48	@ 0x30
 800db2e:	2100      	movs	r1, #0
 800db30:	4618      	mov	r0, r3
 800db32:	f010 f934 	bl	801dd9e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800db36:	f107 030c 	add.w	r3, r7, #12
 800db3a:	2230      	movs	r2, #48	@ 0x30
 800db3c:	2100      	movs	r1, #0
 800db3e:	4618      	mov	r0, r3
 800db40:	f010 f92d 	bl	801dd9e <memset>

  for(q = p; q != NULL; q = q->next)
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	643b      	str	r3, [r7, #64]	@ 0x40
 800db48:	e045      	b.n	800dbd6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800db4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db4c:	2b03      	cmp	r3, #3
 800db4e:	d902      	bls.n	800db56 <low_level_output+0x46>
      return ERR_IF;
 800db50:	f06f 030b 	mvn.w	r3, #11
 800db54:	e07f      	b.n	800dc56 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800db56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db58:	6859      	ldr	r1, [r3, #4]
 800db5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db5c:	4613      	mov	r3, r2
 800db5e:	005b      	lsls	r3, r3, #1
 800db60:	4413      	add	r3, r2
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	3348      	adds	r3, #72	@ 0x48
 800db66:	443b      	add	r3, r7
 800db68:	3b3c      	subs	r3, #60	@ 0x3c
 800db6a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800db6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db6e:	895b      	ldrh	r3, [r3, #10]
 800db70:	4619      	mov	r1, r3
 800db72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db74:	4613      	mov	r3, r2
 800db76:	005b      	lsls	r3, r3, #1
 800db78:	4413      	add	r3, r2
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	3348      	adds	r3, #72	@ 0x48
 800db7e:	443b      	add	r3, r7
 800db80:	3b38      	subs	r3, #56	@ 0x38
 800db82:	6019      	str	r1, [r3, #0]

    if(i>0)
 800db84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db86:	2b00      	cmp	r3, #0
 800db88:	d011      	beq.n	800dbae <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800db8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db8c:	1e5a      	subs	r2, r3, #1
 800db8e:	f107 000c 	add.w	r0, r7, #12
 800db92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db94:	460b      	mov	r3, r1
 800db96:	005b      	lsls	r3, r3, #1
 800db98:	440b      	add	r3, r1
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	18c1      	adds	r1, r0, r3
 800db9e:	4613      	mov	r3, r2
 800dba0:	005b      	lsls	r3, r3, #1
 800dba2:	4413      	add	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	3348      	adds	r3, #72	@ 0x48
 800dba8:	443b      	add	r3, r7
 800dbaa:	3b34      	subs	r3, #52	@ 0x34
 800dbac:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800dbae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d109      	bne.n	800dbca <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800dbb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbb8:	4613      	mov	r3, r2
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	4413      	add	r3, r2
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	3348      	adds	r3, #72	@ 0x48
 800dbc2:	443b      	add	r3, r7
 800dbc4:	3b34      	subs	r3, #52	@ 0x34
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	601a      	str	r2, [r3, #0]
    }

    i++;
 800dbca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbcc:	3301      	adds	r3, #1
 800dbce:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800dbd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1b6      	bne.n	800db4a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	891b      	ldrh	r3, [r3, #8]
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	4b1f      	ldr	r3, [pc, #124]	@ (800dc60 <low_level_output+0x150>)
 800dbe4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800dbe6:	4a1e      	ldr	r2, [pc, #120]	@ (800dc60 <low_level_output+0x150>)
 800dbe8:	f107 030c 	add.w	r3, r7, #12
 800dbec:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800dbee:	4a1c      	ldr	r2, [pc, #112]	@ (800dc60 <low_level_output+0x150>)
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800dbf4:	6838      	ldr	r0, [r7, #0]
 800dbf6:	f006 fa07 	bl	8014008 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800dbfa:	4919      	ldr	r1, [pc, #100]	@ (800dc60 <low_level_output+0x150>)
 800dbfc:	4819      	ldr	r0, [pc, #100]	@ (800dc64 <low_level_output+0x154>)
 800dbfe:	f7f6 fca9 	bl	8004554 <HAL_ETH_Transmit_IT>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d103      	bne.n	800dc10 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800dc0e:	e01b      	b.n	800dc48 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800dc10:	4814      	ldr	r0, [pc, #80]	@ (800dc64 <low_level_output+0x154>)
 800dc12:	f7f7 f951 	bl	8004eb8 <HAL_ETH_GetError>
 800dc16:	4603      	mov	r3, r0
 800dc18:	f003 0302 	and.w	r3, r3, #2
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00d      	beq.n	800dc3c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800dc20:	4b11      	ldr	r3, [pc, #68]	@ (800dc68 <low_level_output+0x158>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f000 fe2b 	bl	800e884 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800dc2e:	480d      	ldr	r0, [pc, #52]	@ (800dc64 <low_level_output+0x154>)
 800dc30:	f7f6 fe30 	bl	8004894 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800dc34:	23fe      	movs	r3, #254	@ 0xfe
 800dc36:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800dc3a:	e005      	b.n	800dc48 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800dc3c:	6838      	ldr	r0, [r7, #0]
 800dc3e:	f006 f93d 	bl	8013ebc <pbuf_free>
        errval =  ERR_IF;
 800dc42:	23f4      	movs	r3, #244	@ 0xf4
 800dc44:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800dc48:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800dc4c:	f113 0f02 	cmn.w	r3, #2
 800dc50:	d0d3      	beq.n	800dbfa <low_level_output+0xea>

  return errval;
 800dc52:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3748      	adds	r7, #72	@ 0x48
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	2000a140 	.word	0x2000a140
 800dc64:	2000a090 	.word	0x2000a090
 800dc68:	2000a08c 	.word	0x2000a08c

0800dc6c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800dc74:	2300      	movs	r3, #0
 800dc76:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800dc78:	4b07      	ldr	r3, [pc, #28]	@ (800dc98 <low_level_input+0x2c>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d105      	bne.n	800dc8c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800dc80:	f107 030c 	add.w	r3, r7, #12
 800dc84:	4619      	mov	r1, r3
 800dc86:	4805      	ldr	r0, [pc, #20]	@ (800dc9c <low_level_input+0x30>)
 800dc88:	f7f6 fcc0 	bl	800460c <HAL_ETH_ReadData>
  }

  return p;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	2000a084 	.word	0x2000a084
 800dc9c:	2000a090 	.word	0x2000a090

0800dca0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800dcb0:	4b0f      	ldr	r3, [pc, #60]	@ (800dcf0 <ethernetif_input+0x50>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f04f 31ff 	mov.w	r1, #4294967295
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f000 fde3 	bl	800e884 <osSemaphoreAcquire>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d1f5      	bne.n	800dcb0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800dcc4:	68b8      	ldr	r0, [r7, #8]
 800dcc6:	f7ff ffd1 	bl	800dc6c <low_level_input>
 800dcca:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00a      	beq.n	800dce8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	691b      	ldr	r3, [r3, #16]
 800dcd6:	68b9      	ldr	r1, [r7, #8]
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	4798      	blx	r3
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d002      	beq.n	800dce8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	f006 f8ea 	bl	8013ebc <pbuf_free>
          }
        }
      } while(p!=NULL);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1ea      	bne.n	800dcc4 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800dcee:	e7df      	b.n	800dcb0 <ethernetif_input+0x10>
 800dcf0:	2000a088 	.word	0x2000a088

0800dcf4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d106      	bne.n	800dd10 <ethernetif_init+0x1c>
 800dd02:	4b0e      	ldr	r3, [pc, #56]	@ (800dd3c <ethernetif_init+0x48>)
 800dd04:	f240 220d 	movw	r2, #525	@ 0x20d
 800dd08:	490d      	ldr	r1, [pc, #52]	@ (800dd40 <ethernetif_init+0x4c>)
 800dd0a:	480e      	ldr	r0, [pc, #56]	@ (800dd44 <ethernetif_init+0x50>)
 800dd0c:	f00f ffe2 	bl	801dcd4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2273      	movs	r2, #115	@ 0x73
 800dd14:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2274      	movs	r2, #116	@ 0x74
 800dd1c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4a09      	ldr	r2, [pc, #36]	@ (800dd48 <ethernetif_init+0x54>)
 800dd24:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	4a08      	ldr	r2, [pc, #32]	@ (800dd4c <ethernetif_init+0x58>)
 800dd2a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f7ff fdaf 	bl	800d890 <low_level_init>

  return ERR_OK;
 800dd32:	2300      	movs	r3, #0
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	0801ed74 	.word	0x0801ed74
 800dd40:	0801ed90 	.word	0x0801ed90
 800dd44:	0801eda0 	.word	0x0801eda0
 800dd48:	0801ab1d 	.word	0x0801ab1d
 800dd4c:	0800db11 	.word	0x0800db11

0800dd50 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800dd5c:	68f9      	ldr	r1, [r7, #12]
 800dd5e:	4809      	ldr	r0, [pc, #36]	@ (800dd84 <pbuf_free_custom+0x34>)
 800dd60:	f005 f9e4 	bl	801312c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800dd64:	4b08      	ldr	r3, [pc, #32]	@ (800dd88 <pbuf_free_custom+0x38>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d107      	bne.n	800dd7c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800dd6c:	4b06      	ldr	r3, [pc, #24]	@ (800dd88 <pbuf_free_custom+0x38>)
 800dd6e:	2200      	movs	r2, #0
 800dd70:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800dd72:	4b06      	ldr	r3, [pc, #24]	@ (800dd8c <pbuf_free_custom+0x3c>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f000 fdea 	bl	800e950 <osSemaphoreRelease>
  }
}
 800dd7c:	bf00      	nop
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	08021b78 	.word	0x08021b78
 800dd88:	2000a084 	.word	0x2000a084
 800dd8c:	2000a088 	.word	0x2000a088

0800dd90 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800dd94:	f7f4 fc3e 	bl	8002614 <HAL_GetTick>
 800dd98:	4603      	mov	r3, r0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	bd80      	pop	{r7, pc}
	...

0800dda0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08e      	sub	sp, #56	@ 0x38
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dda8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ddac:	2200      	movs	r2, #0
 800ddae:	601a      	str	r2, [r3, #0]
 800ddb0:	605a      	str	r2, [r3, #4]
 800ddb2:	609a      	str	r2, [r3, #8]
 800ddb4:	60da      	str	r2, [r3, #12]
 800ddb6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a56      	ldr	r2, [pc, #344]	@ (800df18 <HAL_ETH_MspInit+0x178>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	f040 80a6 	bne.w	800df10 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ddc4:	4b55      	ldr	r3, [pc, #340]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800ddc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddc8:	4a54      	ldr	r2, [pc, #336]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800ddca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ddce:	6313      	str	r3, [r2, #48]	@ 0x30
 800ddd0:	4b52      	ldr	r3, [pc, #328]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800ddd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ddd8:	623b      	str	r3, [r7, #32]
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	4b4f      	ldr	r3, [pc, #316]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800ddde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dde0:	4a4e      	ldr	r2, [pc, #312]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800dde2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dde6:	6313      	str	r3, [r2, #48]	@ 0x30
 800dde8:	4b4c      	ldr	r3, [pc, #304]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800ddea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ddf0:	61fb      	str	r3, [r7, #28]
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	4b49      	ldr	r3, [pc, #292]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800ddf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddf8:	4a48      	ldr	r2, [pc, #288]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800ddfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ddfe:	6313      	str	r3, [r2, #48]	@ 0x30
 800de00:	4b46      	ldr	r3, [pc, #280]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de08:	61bb      	str	r3, [r7, #24]
 800de0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800de0c:	4b43      	ldr	r3, [pc, #268]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de10:	4a42      	ldr	r2, [pc, #264]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de12:	f043 0304 	orr.w	r3, r3, #4
 800de16:	6313      	str	r3, [r2, #48]	@ 0x30
 800de18:	4b40      	ldr	r3, [pc, #256]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de1c:	f003 0304 	and.w	r3, r3, #4
 800de20:	617b      	str	r3, [r7, #20]
 800de22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de24:	4b3d      	ldr	r3, [pc, #244]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de28:	4a3c      	ldr	r2, [pc, #240]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de2a:	f043 0301 	orr.w	r3, r3, #1
 800de2e:	6313      	str	r3, [r2, #48]	@ 0x30
 800de30:	4b3a      	ldr	r3, [pc, #232]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de34:	f003 0301 	and.w	r3, r3, #1
 800de38:	613b      	str	r3, [r7, #16]
 800de3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de3c:	4b37      	ldr	r3, [pc, #220]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de40:	4a36      	ldr	r2, [pc, #216]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de42:	f043 0302 	orr.w	r3, r3, #2
 800de46:	6313      	str	r3, [r2, #48]	@ 0x30
 800de48:	4b34      	ldr	r3, [pc, #208]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de4c:	f003 0302 	and.w	r3, r3, #2
 800de50:	60fb      	str	r3, [r7, #12]
 800de52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800de54:	4b31      	ldr	r3, [pc, #196]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de58:	4a30      	ldr	r2, [pc, #192]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de5e:	6313      	str	r3, [r2, #48]	@ 0x30
 800de60:	4b2e      	ldr	r3, [pc, #184]	@ (800df1c <HAL_ETH_MspInit+0x17c>)
 800de62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de68:	60bb      	str	r3, [r7, #8]
 800de6a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800de6c:	2332      	movs	r3, #50	@ 0x32
 800de6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de70:	2302      	movs	r3, #2
 800de72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de74:	2300      	movs	r3, #0
 800de76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de78:	2303      	movs	r3, #3
 800de7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800de7c:	230b      	movs	r3, #11
 800de7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800de80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de84:	4619      	mov	r1, r3
 800de86:	4826      	ldr	r0, [pc, #152]	@ (800df20 <HAL_ETH_MspInit+0x180>)
 800de88:	f7f7 fc50 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800de8c:	2386      	movs	r3, #134	@ 0x86
 800de8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de90:	2302      	movs	r3, #2
 800de92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de94:	2300      	movs	r3, #0
 800de96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de98:	2303      	movs	r3, #3
 800de9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800de9c:	230b      	movs	r3, #11
 800de9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dea4:	4619      	mov	r1, r3
 800dea6:	481f      	ldr	r0, [pc, #124]	@ (800df24 <HAL_ETH_MspInit+0x184>)
 800dea8:	f7f7 fc40 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800deac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800deb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deb2:	2302      	movs	r3, #2
 800deb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deb6:	2300      	movs	r3, #0
 800deb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800deba:	2303      	movs	r3, #3
 800debc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800debe:	230b      	movs	r3, #11
 800dec0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800dec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dec6:	4619      	mov	r1, r3
 800dec8:	4817      	ldr	r0, [pc, #92]	@ (800df28 <HAL_ETH_MspInit+0x188>)
 800deca:	f7f7 fc2f 	bl	800572c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800dece:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800ded2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ded4:	2302      	movs	r3, #2
 800ded6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ded8:	2300      	movs	r3, #0
 800deda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dedc:	2303      	movs	r3, #3
 800dede:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dee0:	230b      	movs	r3, #11
 800dee2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800dee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dee8:	4619      	mov	r1, r3
 800deea:	4810      	ldr	r0, [pc, #64]	@ (800df2c <HAL_ETH_MspInit+0x18c>)
 800deec:	f7f7 fc1e 	bl	800572c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800def0:	2200      	movs	r2, #0
 800def2:	2105      	movs	r1, #5
 800def4:	203d      	movs	r0, #61	@ 0x3d
 800def6:	f7f5 f979 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800defa:	203d      	movs	r0, #61	@ 0x3d
 800defc:	f7f5 f992 	bl	8003224 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800df00:	2200      	movs	r2, #0
 800df02:	2105      	movs	r1, #5
 800df04:	203e      	movs	r0, #62	@ 0x3e
 800df06:	f7f5 f971 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800df0a:	203e      	movs	r0, #62	@ 0x3e
 800df0c:	f7f5 f98a 	bl	8003224 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800df10:	bf00      	nop
 800df12:	3738      	adds	r7, #56	@ 0x38
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	40028000 	.word	0x40028000
 800df1c:	40023800 	.word	0x40023800
 800df20:	40020800 	.word	0x40020800
 800df24:	40020000 	.word	0x40020000
 800df28:	40020400 	.word	0x40020400
 800df2c:	40021800 	.word	0x40021800

0800df30 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800df34:	4802      	ldr	r0, [pc, #8]	@ (800df40 <ETH_PHY_IO_Init+0x10>)
 800df36:	f7f6 ff7d 	bl	8004e34 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800df3a:	2300      	movs	r3, #0
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	2000a090 	.word	0x2000a090

0800df44 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800df44:	b480      	push	{r7}
 800df46:	af00      	add	r7, sp, #0
  return 0;
 800df48:	2300      	movs	r3, #0
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr

0800df54 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	68ba      	ldr	r2, [r7, #8]
 800df64:	68f9      	ldr	r1, [r7, #12]
 800df66:	4807      	ldr	r0, [pc, #28]	@ (800df84 <ETH_PHY_IO_ReadReg+0x30>)
 800df68:	f7f6 fdbe 	bl	8004ae8 <HAL_ETH_ReadPHYRegister>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d002      	beq.n	800df78 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800df72:	f04f 33ff 	mov.w	r3, #4294967295
 800df76:	e000      	b.n	800df7a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	2000a090 	.word	0x2000a090

0800df88 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	68ba      	ldr	r2, [r7, #8]
 800df98:	68f9      	ldr	r1, [r7, #12]
 800df9a:	4807      	ldr	r0, [pc, #28]	@ (800dfb8 <ETH_PHY_IO_WriteReg+0x30>)
 800df9c:	f7f6 fdef 	bl	8004b7e <HAL_ETH_WritePHYRegister>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d002      	beq.n	800dfac <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800dfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfaa:	e000      	b.n	800dfae <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	2000a090 	.word	0x2000a090

0800dfbc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800dfc0:	f7f4 fb28 	bl	8002614 <HAL_GetTick>
 800dfc4:	4603      	mov	r3, r0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	bd80      	pop	{r7, pc}
	...

0800dfcc <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b0a0      	sub	sp, #128	@ 0x80
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800dfd4:	f107 0308 	add.w	r3, r7, #8
 800dfd8:	2264      	movs	r2, #100	@ 0x64
 800dfda:	2100      	movs	r1, #0
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f00f fede 	bl	801dd9e <memset>
  int32_t PHYLinkState = 0;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dfea:	2300      	movs	r3, #0
 800dfec:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dfee:	2300      	movs	r3, #0
 800dff0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800dff6:	483a      	ldr	r0, [pc, #232]	@ (800e0e0 <ethernet_link_thread+0x114>)
 800dff8:	f7f4 fa64 	bl	80024c4 <LAN8742_GetLinkState>
 800dffc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800dffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e000:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e004:	089b      	lsrs	r3, r3, #2
 800e006:	f003 0301 	and.w	r3, r3, #1
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00c      	beq.n	800e02a <ethernet_link_thread+0x5e>
 800e010:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e012:	2b01      	cmp	r3, #1
 800e014:	dc09      	bgt.n	800e02a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800e016:	4833      	ldr	r0, [pc, #204]	@ (800e0e4 <ethernet_link_thread+0x118>)
 800e018:	f7f6 fa1c 	bl	8004454 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800e01c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e01e:	f005 fb09 	bl	8013634 <netif_set_down>
    netif_set_link_down(netif);
 800e022:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e024:	f005 fb6c 	bl	8013700 <netif_set_link_down>
 800e028:	e055      	b.n	800e0d6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e02a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e02c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e030:	f003 0304 	and.w	r3, r3, #4
 800e034:	2b00      	cmp	r3, #0
 800e036:	d14e      	bne.n	800e0d6 <ethernet_link_thread+0x10a>
 800e038:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	dd4b      	ble.n	800e0d6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800e03e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e040:	3b02      	subs	r3, #2
 800e042:	2b03      	cmp	r3, #3
 800e044:	d82a      	bhi.n	800e09c <ethernet_link_thread+0xd0>
 800e046:	a201      	add	r2, pc, #4	@ (adr r2, 800e04c <ethernet_link_thread+0x80>)
 800e048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04c:	0800e05d 	.word	0x0800e05d
 800e050:	0800e06f 	.word	0x0800e06f
 800e054:	0800e07f 	.word	0x0800e07f
 800e058:	0800e08f 	.word	0x0800e08f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e05c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e060:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800e062:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e066:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e068:	2301      	movs	r3, #1
 800e06a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e06c:	e017      	b.n	800e09e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e06e:	2300      	movs	r3, #0
 800e070:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800e072:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e076:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e078:	2301      	movs	r3, #1
 800e07a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e07c:	e00f      	b.n	800e09e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e07e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e082:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800e084:	2300      	movs	r3, #0
 800e086:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e088:	2301      	movs	r3, #1
 800e08a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e08c:	e007      	b.n	800e09e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e08e:	2300      	movs	r3, #0
 800e090:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800e092:	2300      	movs	r3, #0
 800e094:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e096:	2301      	movs	r3, #1
 800e098:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e09a:	e000      	b.n	800e09e <ethernet_link_thread+0xd2>
    default:
      break;
 800e09c:	bf00      	nop
    }

    if(linkchanged)
 800e09e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d018      	beq.n	800e0d6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e0a4:	f107 0308 	add.w	r3, r7, #8
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	480e      	ldr	r0, [pc, #56]	@ (800e0e4 <ethernet_link_thread+0x118>)
 800e0ac:	f7f6 fdb0 	bl	8004c10 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e0b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e0b2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800e0b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e0b6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e0b8:	f107 0308 	add.w	r3, r7, #8
 800e0bc:	4619      	mov	r1, r3
 800e0be:	4809      	ldr	r0, [pc, #36]	@ (800e0e4 <ethernet_link_thread+0x118>)
 800e0c0:	f7f6 fe9d 	bl	8004dfe <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800e0c4:	4807      	ldr	r0, [pc, #28]	@ (800e0e4 <ethernet_link_thread+0x118>)
 800e0c6:	f7f6 f955 	bl	8004374 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800e0ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e0cc:	f005 fa46 	bl	801355c <netif_set_up>
      netif_set_link_up(netif);
 800e0d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e0d2:	f005 fae1 	bl	8013698 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800e0d6:	2064      	movs	r0, #100	@ 0x64
 800e0d8:	f000 f9c2 	bl	800e460 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e0dc:	e78b      	b.n	800dff6 <ethernet_link_thread+0x2a>
 800e0de:	bf00      	nop
 800e0e0:	2000a178 	.word	0x2000a178
 800e0e4:	2000a090 	.word	0x2000a090

0800e0e8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b086      	sub	sp, #24
 800e0ec:	af02      	add	r7, sp, #8
 800e0ee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e0f0:	4812      	ldr	r0, [pc, #72]	@ (800e13c <HAL_ETH_RxAllocateCallback+0x54>)
 800e0f2:	f004 ffa7 	bl	8013044 <memp_malloc_pool>
 800e0f6:	60f8      	str	r0, [r7, #12]
  if (p)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d014      	beq.n	800e128 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f103 0220 	add.w	r2, r3, #32
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	4a0d      	ldr	r2, [pc, #52]	@ (800e140 <HAL_ETH_RxAllocateCallback+0x58>)
 800e10c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800e116:	9201      	str	r2, [sp, #4]
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2241      	movs	r2, #65	@ 0x41
 800e11e:	2100      	movs	r1, #0
 800e120:	2000      	movs	r0, #0
 800e122:	f005 fd11 	bl	8013b48 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800e126:	e005      	b.n	800e134 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800e128:	4b06      	ldr	r3, [pc, #24]	@ (800e144 <HAL_ETH_RxAllocateCallback+0x5c>)
 800e12a:	2201      	movs	r2, #1
 800e12c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	601a      	str	r2, [r3, #0]
}
 800e134:	bf00      	nop
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	08021b78 	.word	0x08021b78
 800e140:	0800dd51 	.word	0x0800dd51
 800e144:	2000a084 	.word	0x2000a084

0800e148 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b088      	sub	sp, #32
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]
 800e154:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e15e:	2300      	movs	r3, #0
 800e160:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	3b20      	subs	r3, #32
 800e166:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	2200      	movs	r2, #0
 800e16c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	2200      	movs	r2, #0
 800e172:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	887a      	ldrh	r2, [r7, #2]
 800e178:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d103      	bne.n	800e18a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	69fa      	ldr	r2, [r7, #28]
 800e186:	601a      	str	r2, [r3, #0]
 800e188:	e003      	b.n	800e192 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	69fa      	ldr	r2, [r7, #28]
 800e190:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	69fa      	ldr	r2, [r7, #28]
 800e196:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	61fb      	str	r3, [r7, #28]
 800e19e:	e009      	b.n	800e1b4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	891a      	ldrh	r2, [r3, #8]
 800e1a4:	887b      	ldrh	r3, [r7, #2]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	61fb      	str	r3, [r7, #28]
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1f2      	bne.n	800e1a0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800e1ba:	887b      	ldrh	r3, [r7, #2]
 800e1bc:	4619      	mov	r1, r3
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff fb02 	bl	800d7c8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800e1c4:	bf00      	nop
 800e1c6:	3720      	adds	r7, #32
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f005 fe71 	bl	8013ebc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800e1da:	bf00      	nop
 800e1dc:	3708      	adds	r7, #8
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e1e2:	b480      	push	{r7}
 800e1e4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e1e6:	bf00      	nop
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr

0800e1f0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e1f0:	b480      	push	{r7}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1f6:	f3ef 8305 	mrs	r3, IPSR
 800e1fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800e1fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10f      	bne.n	800e222 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e202:	f3ef 8310 	mrs	r3, PRIMASK
 800e206:	607b      	str	r3, [r7, #4]
  return(result);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d105      	bne.n	800e21a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e20e:	f3ef 8311 	mrs	r3, BASEPRI
 800e212:	603b      	str	r3, [r7, #0]
  return(result);
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d007      	beq.n	800e22a <osKernelInitialize+0x3a>
 800e21a:	4b0e      	ldr	r3, [pc, #56]	@ (800e254 <osKernelInitialize+0x64>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b02      	cmp	r3, #2
 800e220:	d103      	bne.n	800e22a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e222:	f06f 0305 	mvn.w	r3, #5
 800e226:	60fb      	str	r3, [r7, #12]
 800e228:	e00c      	b.n	800e244 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e22a:	4b0a      	ldr	r3, [pc, #40]	@ (800e254 <osKernelInitialize+0x64>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d105      	bne.n	800e23e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e232:	4b08      	ldr	r3, [pc, #32]	@ (800e254 <osKernelInitialize+0x64>)
 800e234:	2201      	movs	r2, #1
 800e236:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e238:	2300      	movs	r3, #0
 800e23a:	60fb      	str	r3, [r7, #12]
 800e23c:	e002      	b.n	800e244 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e23e:	f04f 33ff 	mov.w	r3, #4294967295
 800e242:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e244:	68fb      	ldr	r3, [r7, #12]
}
 800e246:	4618      	mov	r0, r3
 800e248:	3714      	adds	r7, #20
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	2000a198 	.word	0x2000a198

0800e258 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e25e:	f3ef 8305 	mrs	r3, IPSR
 800e262:	60bb      	str	r3, [r7, #8]
  return(result);
 800e264:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e266:	2b00      	cmp	r3, #0
 800e268:	d10f      	bne.n	800e28a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e26a:	f3ef 8310 	mrs	r3, PRIMASK
 800e26e:	607b      	str	r3, [r7, #4]
  return(result);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d105      	bne.n	800e282 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e276:	f3ef 8311 	mrs	r3, BASEPRI
 800e27a:	603b      	str	r3, [r7, #0]
  return(result);
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d007      	beq.n	800e292 <osKernelStart+0x3a>
 800e282:	4b0f      	ldr	r3, [pc, #60]	@ (800e2c0 <osKernelStart+0x68>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b02      	cmp	r3, #2
 800e288:	d103      	bne.n	800e292 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e28a:	f06f 0305 	mvn.w	r3, #5
 800e28e:	60fb      	str	r3, [r7, #12]
 800e290:	e010      	b.n	800e2b4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e292:	4b0b      	ldr	r3, [pc, #44]	@ (800e2c0 <osKernelStart+0x68>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b01      	cmp	r3, #1
 800e298:	d109      	bne.n	800e2ae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e29a:	f7ff ffa2 	bl	800e1e2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e29e:	4b08      	ldr	r3, [pc, #32]	@ (800e2c0 <osKernelStart+0x68>)
 800e2a0:	2202      	movs	r2, #2
 800e2a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e2a4:	f002 f92e 	bl	8010504 <vTaskStartScheduler>
      stat = osOK;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	60fb      	str	r3, [r7, #12]
 800e2ac:	e002      	b.n	800e2b4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	2000a198 	.word	0x2000a198

0800e2c4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2ca:	f3ef 8305 	mrs	r3, IPSR
 800e2ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800e2d0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d10f      	bne.n	800e2f6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2d6:	f3ef 8310 	mrs	r3, PRIMASK
 800e2da:	607b      	str	r3, [r7, #4]
  return(result);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d105      	bne.n	800e2ee <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e2e2:	f3ef 8311 	mrs	r3, BASEPRI
 800e2e6:	603b      	str	r3, [r7, #0]
  return(result);
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d007      	beq.n	800e2fe <osKernelGetTickCount+0x3a>
 800e2ee:	4b08      	ldr	r3, [pc, #32]	@ (800e310 <osKernelGetTickCount+0x4c>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2b02      	cmp	r3, #2
 800e2f4:	d103      	bne.n	800e2fe <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800e2f6:	f002 fa37 	bl	8010768 <xTaskGetTickCountFromISR>
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	e002      	b.n	800e304 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800e2fe:	f002 fa23 	bl	8010748 <xTaskGetTickCount>
 800e302:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800e304:	68fb      	ldr	r3, [r7, #12]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	2000a198 	.word	0x2000a198

0800e314 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e314:	b580      	push	{r7, lr}
 800e316:	b090      	sub	sp, #64	@ 0x40
 800e318:	af04      	add	r7, sp, #16
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e320:	2300      	movs	r3, #0
 800e322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e324:	f3ef 8305 	mrs	r3, IPSR
 800e328:	61fb      	str	r3, [r7, #28]
  return(result);
 800e32a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f040 8090 	bne.w	800e452 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e332:	f3ef 8310 	mrs	r3, PRIMASK
 800e336:	61bb      	str	r3, [r7, #24]
  return(result);
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d105      	bne.n	800e34a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e33e:	f3ef 8311 	mrs	r3, BASEPRI
 800e342:	617b      	str	r3, [r7, #20]
  return(result);
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d003      	beq.n	800e352 <osThreadNew+0x3e>
 800e34a:	4b44      	ldr	r3, [pc, #272]	@ (800e45c <osThreadNew+0x148>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b02      	cmp	r3, #2
 800e350:	d07f      	beq.n	800e452 <osThreadNew+0x13e>
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d07c      	beq.n	800e452 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800e358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e35c:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e35e:	2318      	movs	r3, #24
 800e360:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800e362:	2300      	movs	r3, #0
 800e364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800e366:	f04f 33ff 	mov.w	r3, #4294967295
 800e36a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d045      	beq.n	800e3fe <osThreadNew+0xea>
      if (attr->name != NULL) {
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d002      	beq.n	800e380 <osThreadNew+0x6c>
        name = attr->name;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	699b      	ldr	r3, [r3, #24]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d002      	beq.n	800e38e <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e390:	2b00      	cmp	r3, #0
 800e392:	d008      	beq.n	800e3a6 <osThreadNew+0x92>
 800e394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e396:	2b38      	cmp	r3, #56	@ 0x38
 800e398:	d805      	bhi.n	800e3a6 <osThreadNew+0x92>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	f003 0301 	and.w	r3, r3, #1
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d001      	beq.n	800e3aa <osThreadNew+0x96>
        return (NULL);
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	e054      	b.n	800e454 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	695b      	ldr	r3, [r3, #20]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d003      	beq.n	800e3ba <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	089b      	lsrs	r3, r3, #2
 800e3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	689b      	ldr	r3, [r3, #8]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d00e      	beq.n	800e3e0 <osThreadNew+0xcc>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	2ba7      	cmp	r3, #167	@ 0xa7
 800e3c8:	d90a      	bls.n	800e3e0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d006      	beq.n	800e3e0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	695b      	ldr	r3, [r3, #20]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <osThreadNew+0xcc>
        mem = 1;
 800e3da:	2301      	movs	r3, #1
 800e3dc:	623b      	str	r3, [r7, #32]
 800e3de:	e010      	b.n	800e402 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	689b      	ldr	r3, [r3, #8]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d10c      	bne.n	800e402 <osThreadNew+0xee>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d108      	bne.n	800e402 <osThreadNew+0xee>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d104      	bne.n	800e402 <osThreadNew+0xee>
          mem = 0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	623b      	str	r3, [r7, #32]
 800e3fc:	e001      	b.n	800e402 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800e3fe:	2300      	movs	r3, #0
 800e400:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e402:	6a3b      	ldr	r3, [r7, #32]
 800e404:	2b01      	cmp	r3, #1
 800e406:	d110      	bne.n	800e42a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e410:	9202      	str	r2, [sp, #8]
 800e412:	9301      	str	r3, [sp, #4]
 800e414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e41c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f001 fe72 	bl	8010108 <xTaskCreateStatic>
 800e424:	4603      	mov	r3, r0
 800e426:	613b      	str	r3, [r7, #16]
 800e428:	e013      	b.n	800e452 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d110      	bne.n	800e452 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e432:	b29a      	uxth	r2, r3
 800e434:	f107 0310 	add.w	r3, r7, #16
 800e438:	9301      	str	r3, [sp, #4]
 800e43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f001 fec6 	bl	80101d4 <xTaskCreate>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d001      	beq.n	800e452 <osThreadNew+0x13e>
          hTask = NULL;
 800e44e:	2300      	movs	r3, #0
 800e450:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e452:	693b      	ldr	r3, [r7, #16]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3730      	adds	r7, #48	@ 0x30
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	2000a198 	.word	0x2000a198

0800e460 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e460:	b580      	push	{r7, lr}
 800e462:	b086      	sub	sp, #24
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e468:	f3ef 8305 	mrs	r3, IPSR
 800e46c:	613b      	str	r3, [r7, #16]
  return(result);
 800e46e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e470:	2b00      	cmp	r3, #0
 800e472:	d10f      	bne.n	800e494 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e474:	f3ef 8310 	mrs	r3, PRIMASK
 800e478:	60fb      	str	r3, [r7, #12]
  return(result);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d105      	bne.n	800e48c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e480:	f3ef 8311 	mrs	r3, BASEPRI
 800e484:	60bb      	str	r3, [r7, #8]
  return(result);
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d007      	beq.n	800e49c <osDelay+0x3c>
 800e48c:	4b0a      	ldr	r3, [pc, #40]	@ (800e4b8 <osDelay+0x58>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2b02      	cmp	r3, #2
 800e492:	d103      	bne.n	800e49c <osDelay+0x3c>
    stat = osErrorISR;
 800e494:	f06f 0305 	mvn.w	r3, #5
 800e498:	617b      	str	r3, [r7, #20]
 800e49a:	e007      	b.n	800e4ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e49c:	2300      	movs	r3, #0
 800e49e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d002      	beq.n	800e4ac <osDelay+0x4c>
      vTaskDelay(ticks);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f001 fff4 	bl	8010494 <vTaskDelay>
    }
  }

  return (stat);
 800e4ac:	697b      	ldr	r3, [r7, #20]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3718      	adds	r7, #24
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	2000a198 	.word	0x2000a198

0800e4bc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08a      	sub	sp, #40	@ 0x28
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4c8:	f3ef 8305 	mrs	r3, IPSR
 800e4cc:	613b      	str	r3, [r7, #16]
  return(result);
 800e4ce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	f040 8085 	bne.w	800e5e0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4d6:	f3ef 8310 	mrs	r3, PRIMASK
 800e4da:	60fb      	str	r3, [r7, #12]
  return(result);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d105      	bne.n	800e4ee <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e4e2:	f3ef 8311 	mrs	r3, BASEPRI
 800e4e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d003      	beq.n	800e4f6 <osMutexNew+0x3a>
 800e4ee:	4b3f      	ldr	r3, [pc, #252]	@ (800e5ec <osMutexNew+0x130>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b02      	cmp	r3, #2
 800e4f4:	d074      	beq.n	800e5e0 <osMutexNew+0x124>
    if (attr != NULL) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d003      	beq.n	800e504 <osMutexNew+0x48>
      type = attr->attr_bits;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	623b      	str	r3, [r7, #32]
 800e502:	e001      	b.n	800e508 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800e504:	2300      	movs	r3, #0
 800e506:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e508:	6a3b      	ldr	r3, [r7, #32]
 800e50a:	f003 0301 	and.w	r3, r3, #1
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d002      	beq.n	800e518 <osMutexNew+0x5c>
      rmtx = 1U;
 800e512:	2301      	movs	r3, #1
 800e514:	61fb      	str	r3, [r7, #28]
 800e516:	e001      	b.n	800e51c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800e518:	2300      	movs	r3, #0
 800e51a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e51c:	6a3b      	ldr	r3, [r7, #32]
 800e51e:	f003 0308 	and.w	r3, r3, #8
 800e522:	2b00      	cmp	r3, #0
 800e524:	d15c      	bne.n	800e5e0 <osMutexNew+0x124>
      mem = -1;
 800e526:	f04f 33ff 	mov.w	r3, #4294967295
 800e52a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d015      	beq.n	800e55e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d006      	beq.n	800e548 <osMutexNew+0x8c>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	2b4f      	cmp	r3, #79	@ 0x4f
 800e540:	d902      	bls.n	800e548 <osMutexNew+0x8c>
          mem = 1;
 800e542:	2301      	movs	r3, #1
 800e544:	61bb      	str	r3, [r7, #24]
 800e546:	e00c      	b.n	800e562 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d108      	bne.n	800e562 <osMutexNew+0xa6>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d104      	bne.n	800e562 <osMutexNew+0xa6>
            mem = 0;
 800e558:	2300      	movs	r3, #0
 800e55a:	61bb      	str	r3, [r7, #24]
 800e55c:	e001      	b.n	800e562 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800e55e:	2300      	movs	r3, #0
 800e560:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	2b01      	cmp	r3, #1
 800e566:	d112      	bne.n	800e58e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d007      	beq.n	800e57e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	689b      	ldr	r3, [r3, #8]
 800e572:	4619      	mov	r1, r3
 800e574:	2004      	movs	r0, #4
 800e576:	f000 fe22 	bl	800f1be <xQueueCreateMutexStatic>
 800e57a:	6278      	str	r0, [r7, #36]	@ 0x24
 800e57c:	e016      	b.n	800e5ac <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	689b      	ldr	r3, [r3, #8]
 800e582:	4619      	mov	r1, r3
 800e584:	2001      	movs	r0, #1
 800e586:	f000 fe1a 	bl	800f1be <xQueueCreateMutexStatic>
 800e58a:	6278      	str	r0, [r7, #36]	@ 0x24
 800e58c:	e00e      	b.n	800e5ac <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d10b      	bne.n	800e5ac <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d004      	beq.n	800e5a4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800e59a:	2004      	movs	r0, #4
 800e59c:	f000 fdf7 	bl	800f18e <xQueueCreateMutex>
 800e5a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800e5a2:	e003      	b.n	800e5ac <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	f000 fdf2 	bl	800f18e <xQueueCreateMutex>
 800e5aa:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d00c      	beq.n	800e5cc <osMutexNew+0x110>
        if (attr != NULL) {
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d003      	beq.n	800e5c0 <osMutexNew+0x104>
          name = attr->name;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	617b      	str	r3, [r7, #20]
 800e5be:	e001      	b.n	800e5c4 <osMutexNew+0x108>
        } else {
          name = NULL;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800e5c4:	6979      	ldr	r1, [r7, #20]
 800e5c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e5c8:	f001 fd16 	bl	800fff8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d006      	beq.n	800e5e0 <osMutexNew+0x124>
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d003      	beq.n	800e5e0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5da:	f043 0301 	orr.w	r3, r3, #1
 800e5de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3728      	adds	r7, #40	@ 0x28
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	2000a198 	.word	0x2000a198

0800e5f0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b088      	sub	sp, #32
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f023 0301 	bic.w	r3, r3, #1
 800e600:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f003 0301 	and.w	r3, r3, #1
 800e608:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e60a:	2300      	movs	r3, #0
 800e60c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e60e:	f3ef 8305 	mrs	r3, IPSR
 800e612:	613b      	str	r3, [r7, #16]
  return(result);
 800e614:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10f      	bne.n	800e63a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e61a:	f3ef 8310 	mrs	r3, PRIMASK
 800e61e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d105      	bne.n	800e632 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e626:	f3ef 8311 	mrs	r3, BASEPRI
 800e62a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d007      	beq.n	800e642 <osMutexAcquire+0x52>
 800e632:	4b1d      	ldr	r3, [pc, #116]	@ (800e6a8 <osMutexAcquire+0xb8>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2b02      	cmp	r3, #2
 800e638:	d103      	bne.n	800e642 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800e63a:	f06f 0305 	mvn.w	r3, #5
 800e63e:	61fb      	str	r3, [r7, #28]
 800e640:	e02c      	b.n	800e69c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d103      	bne.n	800e650 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800e648:	f06f 0303 	mvn.w	r3, #3
 800e64c:	61fb      	str	r3, [r7, #28]
 800e64e:	e025      	b.n	800e69c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d011      	beq.n	800e67a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e656:	6839      	ldr	r1, [r7, #0]
 800e658:	69b8      	ldr	r0, [r7, #24]
 800e65a:	f000 fe02 	bl	800f262 <xQueueTakeMutexRecursive>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b01      	cmp	r3, #1
 800e662:	d01b      	beq.n	800e69c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d003      	beq.n	800e672 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800e66a:	f06f 0301 	mvn.w	r3, #1
 800e66e:	61fb      	str	r3, [r7, #28]
 800e670:	e014      	b.n	800e69c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e672:	f06f 0302 	mvn.w	r3, #2
 800e676:	61fb      	str	r3, [r7, #28]
 800e678:	e010      	b.n	800e69c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e67a:	6839      	ldr	r1, [r7, #0]
 800e67c:	69b8      	ldr	r0, [r7, #24]
 800e67e:	f001 f9cd 	bl	800fa1c <xQueueSemaphoreTake>
 800e682:	4603      	mov	r3, r0
 800e684:	2b01      	cmp	r3, #1
 800e686:	d009      	beq.n	800e69c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d003      	beq.n	800e696 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800e68e:	f06f 0301 	mvn.w	r3, #1
 800e692:	61fb      	str	r3, [r7, #28]
 800e694:	e002      	b.n	800e69c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e696:	f06f 0302 	mvn.w	r3, #2
 800e69a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e69c:	69fb      	ldr	r3, [r7, #28]
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3720      	adds	r7, #32
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	2000a198 	.word	0x2000a198

0800e6ac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b088      	sub	sp, #32
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f023 0301 	bic.w	r3, r3, #1
 800e6ba:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f003 0301 	and.w	r3, r3, #1
 800e6c2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6c8:	f3ef 8305 	mrs	r3, IPSR
 800e6cc:	613b      	str	r3, [r7, #16]
  return(result);
 800e6ce:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d10f      	bne.n	800e6f4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6d4:	f3ef 8310 	mrs	r3, PRIMASK
 800e6d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d105      	bne.n	800e6ec <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6e0:	f3ef 8311 	mrs	r3, BASEPRI
 800e6e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d007      	beq.n	800e6fc <osMutexRelease+0x50>
 800e6ec:	4b16      	ldr	r3, [pc, #88]	@ (800e748 <osMutexRelease+0x9c>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b02      	cmp	r3, #2
 800e6f2:	d103      	bne.n	800e6fc <osMutexRelease+0x50>
    stat = osErrorISR;
 800e6f4:	f06f 0305 	mvn.w	r3, #5
 800e6f8:	61fb      	str	r3, [r7, #28]
 800e6fa:	e01f      	b.n	800e73c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d103      	bne.n	800e70a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800e702:	f06f 0303 	mvn.w	r3, #3
 800e706:	61fb      	str	r3, [r7, #28]
 800e708:	e018      	b.n	800e73c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d009      	beq.n	800e724 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e710:	69b8      	ldr	r0, [r7, #24]
 800e712:	f000 fd6f 	bl	800f1f4 <xQueueGiveMutexRecursive>
 800e716:	4603      	mov	r3, r0
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d00f      	beq.n	800e73c <osMutexRelease+0x90>
        stat = osErrorResource;
 800e71c:	f06f 0302 	mvn.w	r3, #2
 800e720:	61fb      	str	r3, [r7, #28]
 800e722:	e00b      	b.n	800e73c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e724:	2300      	movs	r3, #0
 800e726:	2200      	movs	r2, #0
 800e728:	2100      	movs	r1, #0
 800e72a:	69b8      	ldr	r0, [r7, #24]
 800e72c:	f000 fe48 	bl	800f3c0 <xQueueGenericSend>
 800e730:	4603      	mov	r3, r0
 800e732:	2b01      	cmp	r3, #1
 800e734:	d002      	beq.n	800e73c <osMutexRelease+0x90>
        stat = osErrorResource;
 800e736:	f06f 0302 	mvn.w	r3, #2
 800e73a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e73c:	69fb      	ldr	r3, [r7, #28]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3720      	adds	r7, #32
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	2000a198 	.word	0x2000a198

0800e74c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b08c      	sub	sp, #48	@ 0x30
 800e750:	af02      	add	r7, sp, #8
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e758:	2300      	movs	r3, #0
 800e75a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e75c:	f3ef 8305 	mrs	r3, IPSR
 800e760:	61bb      	str	r3, [r7, #24]
  return(result);
 800e762:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e764:	2b00      	cmp	r3, #0
 800e766:	f040 8086 	bne.w	800e876 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e76a:	f3ef 8310 	mrs	r3, PRIMASK
 800e76e:	617b      	str	r3, [r7, #20]
  return(result);
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d105      	bne.n	800e782 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e776:	f3ef 8311 	mrs	r3, BASEPRI
 800e77a:	613b      	str	r3, [r7, #16]
  return(result);
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d003      	beq.n	800e78a <osSemaphoreNew+0x3e>
 800e782:	4b3f      	ldr	r3, [pc, #252]	@ (800e880 <osSemaphoreNew+0x134>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b02      	cmp	r3, #2
 800e788:	d075      	beq.n	800e876 <osSemaphoreNew+0x12a>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d072      	beq.n	800e876 <osSemaphoreNew+0x12a>
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	429a      	cmp	r2, r3
 800e796:	d86e      	bhi.n	800e876 <osSemaphoreNew+0x12a>
    mem = -1;
 800e798:	f04f 33ff 	mov.w	r3, #4294967295
 800e79c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d015      	beq.n	800e7d0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	689b      	ldr	r3, [r3, #8]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d006      	beq.n	800e7ba <osSemaphoreNew+0x6e>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	2b4f      	cmp	r3, #79	@ 0x4f
 800e7b2:	d902      	bls.n	800e7ba <osSemaphoreNew+0x6e>
        mem = 1;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	623b      	str	r3, [r7, #32]
 800e7b8:	e00c      	b.n	800e7d4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d108      	bne.n	800e7d4 <osSemaphoreNew+0x88>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d104      	bne.n	800e7d4 <osSemaphoreNew+0x88>
          mem = 0;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	623b      	str	r3, [r7, #32]
 800e7ce:	e001      	b.n	800e7d4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800e7d4:	6a3b      	ldr	r3, [r7, #32]
 800e7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7da:	d04c      	beq.n	800e876 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	d128      	bne.n	800e834 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800e7e2:	6a3b      	ldr	r3, [r7, #32]
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d10a      	bne.n	800e7fe <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	2203      	movs	r2, #3
 800e7ee:	9200      	str	r2, [sp, #0]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	2001      	movs	r0, #1
 800e7f6:	f000 fbc3 	bl	800ef80 <xQueueGenericCreateStatic>
 800e7fa:	6278      	str	r0, [r7, #36]	@ 0x24
 800e7fc:	e005      	b.n	800e80a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800e7fe:	2203      	movs	r2, #3
 800e800:	2100      	movs	r1, #0
 800e802:	2001      	movs	r0, #1
 800e804:	f000 fc43 	bl	800f08e <xQueueGenericCreate>
 800e808:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d022      	beq.n	800e856 <osSemaphoreNew+0x10a>
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d01f      	beq.n	800e856 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e816:	2300      	movs	r3, #0
 800e818:	2200      	movs	r2, #0
 800e81a:	2100      	movs	r1, #0
 800e81c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e81e:	f000 fdcf 	bl	800f3c0 <xQueueGenericSend>
 800e822:	4603      	mov	r3, r0
 800e824:	2b01      	cmp	r3, #1
 800e826:	d016      	beq.n	800e856 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800e828:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e82a:	f001 fa97 	bl	800fd5c <vQueueDelete>
            hSemaphore = NULL;
 800e82e:	2300      	movs	r3, #0
 800e830:	627b      	str	r3, [r7, #36]	@ 0x24
 800e832:	e010      	b.n	800e856 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800e834:	6a3b      	ldr	r3, [r7, #32]
 800e836:	2b01      	cmp	r3, #1
 800e838:	d108      	bne.n	800e84c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	461a      	mov	r2, r3
 800e840:	68b9      	ldr	r1, [r7, #8]
 800e842:	68f8      	ldr	r0, [r7, #12]
 800e844:	f000 fd46 	bl	800f2d4 <xQueueCreateCountingSemaphoreStatic>
 800e848:	6278      	str	r0, [r7, #36]	@ 0x24
 800e84a:	e004      	b.n	800e856 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e84c:	68b9      	ldr	r1, [r7, #8]
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f000 fd7d 	bl	800f34e <xQueueCreateCountingSemaphore>
 800e854:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d00c      	beq.n	800e876 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d003      	beq.n	800e86a <osSemaphoreNew+0x11e>
          name = attr->name;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	61fb      	str	r3, [r7, #28]
 800e868:	e001      	b.n	800e86e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800e86a:	2300      	movs	r3, #0
 800e86c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e86e:	69f9      	ldr	r1, [r7, #28]
 800e870:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e872:	f001 fbc1 	bl	800fff8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3728      	adds	r7, #40	@ 0x28
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	2000a198 	.word	0x2000a198

0800e884 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e884:	b580      	push	{r7, lr}
 800e886:	b088      	sub	sp, #32
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e892:	2300      	movs	r3, #0
 800e894:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d103      	bne.n	800e8a4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e89c:	f06f 0303 	mvn.w	r3, #3
 800e8a0:	61fb      	str	r3, [r7, #28]
 800e8a2:	e04b      	b.n	800e93c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8a4:	f3ef 8305 	mrs	r3, IPSR
 800e8a8:	617b      	str	r3, [r7, #20]
  return(result);
 800e8aa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d10f      	bne.n	800e8d0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8b0:	f3ef 8310 	mrs	r3, PRIMASK
 800e8b4:	613b      	str	r3, [r7, #16]
  return(result);
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d105      	bne.n	800e8c8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8bc:	f3ef 8311 	mrs	r3, BASEPRI
 800e8c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d026      	beq.n	800e916 <osSemaphoreAcquire+0x92>
 800e8c8:	4b1f      	ldr	r3, [pc, #124]	@ (800e948 <osSemaphoreAcquire+0xc4>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2b02      	cmp	r3, #2
 800e8ce:	d122      	bne.n	800e916 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d003      	beq.n	800e8de <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800e8d6:	f06f 0303 	mvn.w	r3, #3
 800e8da:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e8dc:	e02d      	b.n	800e93a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e8e2:	f107 0308 	add.w	r3, r7, #8
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	2100      	movs	r1, #0
 800e8ea:	69b8      	ldr	r0, [r7, #24]
 800e8ec:	f001 f9ae 	bl	800fc4c <xQueueReceiveFromISR>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d003      	beq.n	800e8fe <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800e8f6:	f06f 0302 	mvn.w	r3, #2
 800e8fa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e8fc:	e01d      	b.n	800e93a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d01a      	beq.n	800e93a <osSemaphoreAcquire+0xb6>
 800e904:	4b11      	ldr	r3, [pc, #68]	@ (800e94c <osSemaphoreAcquire+0xc8>)
 800e906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800e914:	e011      	b.n	800e93a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e916:	6839      	ldr	r1, [r7, #0]
 800e918:	69b8      	ldr	r0, [r7, #24]
 800e91a:	f001 f87f 	bl	800fa1c <xQueueSemaphoreTake>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b01      	cmp	r3, #1
 800e922:	d00b      	beq.n	800e93c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d003      	beq.n	800e932 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800e92a:	f06f 0301 	mvn.w	r3, #1
 800e92e:	61fb      	str	r3, [r7, #28]
 800e930:	e004      	b.n	800e93c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800e932:	f06f 0302 	mvn.w	r3, #2
 800e936:	61fb      	str	r3, [r7, #28]
 800e938:	e000      	b.n	800e93c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800e93a:	bf00      	nop
      }
    }
  }

  return (stat);
 800e93c:	69fb      	ldr	r3, [r7, #28]
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3720      	adds	r7, #32
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	2000a198 	.word	0x2000a198
 800e94c:	e000ed04 	.word	0xe000ed04

0800e950 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e950:	b580      	push	{r7, lr}
 800e952:	b088      	sub	sp, #32
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e95c:	2300      	movs	r3, #0
 800e95e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d103      	bne.n	800e96e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e966:	f06f 0303 	mvn.w	r3, #3
 800e96a:	61fb      	str	r3, [r7, #28]
 800e96c:	e03e      	b.n	800e9ec <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e96e:	f3ef 8305 	mrs	r3, IPSR
 800e972:	617b      	str	r3, [r7, #20]
  return(result);
 800e974:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e976:	2b00      	cmp	r3, #0
 800e978:	d10f      	bne.n	800e99a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e97a:	f3ef 8310 	mrs	r3, PRIMASK
 800e97e:	613b      	str	r3, [r7, #16]
  return(result);
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d105      	bne.n	800e992 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e986:	f3ef 8311 	mrs	r3, BASEPRI
 800e98a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d01e      	beq.n	800e9d0 <osSemaphoreRelease+0x80>
 800e992:	4b19      	ldr	r3, [pc, #100]	@ (800e9f8 <osSemaphoreRelease+0xa8>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b02      	cmp	r3, #2
 800e998:	d11a      	bne.n	800e9d0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800e99a:	2300      	movs	r3, #0
 800e99c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e99e:	f107 0308 	add.w	r3, r7, #8
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	69b8      	ldr	r0, [r7, #24]
 800e9a6:	f000 feb8 	bl	800f71a <xQueueGiveFromISR>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d003      	beq.n	800e9b8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800e9b0:	f06f 0302 	mvn.w	r3, #2
 800e9b4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e9b6:	e018      	b.n	800e9ea <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d015      	beq.n	800e9ea <osSemaphoreRelease+0x9a>
 800e9be:	4b0f      	ldr	r3, [pc, #60]	@ (800e9fc <osSemaphoreRelease+0xac>)
 800e9c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9c4:	601a      	str	r2, [r3, #0]
 800e9c6:	f3bf 8f4f 	dsb	sy
 800e9ca:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e9ce:	e00c      	b.n	800e9ea <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	69b8      	ldr	r0, [r7, #24]
 800e9d8:	f000 fcf2 	bl	800f3c0 <xQueueGenericSend>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d004      	beq.n	800e9ec <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800e9e2:	f06f 0302 	mvn.w	r3, #2
 800e9e6:	61fb      	str	r3, [r7, #28]
 800e9e8:	e000      	b.n	800e9ec <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e9ea:	bf00      	nop
    }
  }

  return (stat);
 800e9ec:	69fb      	ldr	r3, [r7, #28]
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3720      	adds	r7, #32
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	2000a198 	.word	0x2000a198
 800e9fc:	e000ed04 	.word	0xe000ed04

0800ea00 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b08c      	sub	sp, #48	@ 0x30
 800ea04:	af02      	add	r7, sp, #8
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea10:	f3ef 8305 	mrs	r3, IPSR
 800ea14:	61bb      	str	r3, [r7, #24]
  return(result);
 800ea16:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d16f      	bne.n	800eafc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea1c:	f3ef 8310 	mrs	r3, PRIMASK
 800ea20:	617b      	str	r3, [r7, #20]
  return(result);
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d105      	bne.n	800ea34 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea28:	f3ef 8311 	mrs	r3, BASEPRI
 800ea2c:	613b      	str	r3, [r7, #16]
  return(result);
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d003      	beq.n	800ea3c <osMessageQueueNew+0x3c>
 800ea34:	4b34      	ldr	r3, [pc, #208]	@ (800eb08 <osMessageQueueNew+0x108>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	d05f      	beq.n	800eafc <osMessageQueueNew+0xfc>
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d05c      	beq.n	800eafc <osMessageQueueNew+0xfc>
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d059      	beq.n	800eafc <osMessageQueueNew+0xfc>
    mem = -1;
 800ea48:	f04f 33ff 	mov.w	r3, #4294967295
 800ea4c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d029      	beq.n	800eaa8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d012      	beq.n	800ea82 <osMessageQueueNew+0x82>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	2b4f      	cmp	r3, #79	@ 0x4f
 800ea62:	d90e      	bls.n	800ea82 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00a      	beq.n	800ea82 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	695a      	ldr	r2, [r3, #20]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	68b9      	ldr	r1, [r7, #8]
 800ea74:	fb01 f303 	mul.w	r3, r1, r3
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d302      	bcc.n	800ea82 <osMessageQueueNew+0x82>
        mem = 1;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	623b      	str	r3, [r7, #32]
 800ea80:	e014      	b.n	800eaac <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d110      	bne.n	800eaac <osMessageQueueNew+0xac>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10c      	bne.n	800eaac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d108      	bne.n	800eaac <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	695b      	ldr	r3, [r3, #20]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d104      	bne.n	800eaac <osMessageQueueNew+0xac>
          mem = 0;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	623b      	str	r3, [r7, #32]
 800eaa6:	e001      	b.n	800eaac <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800eaac:	6a3b      	ldr	r3, [r7, #32]
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d10b      	bne.n	800eaca <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	691a      	ldr	r2, [r3, #16]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	2100      	movs	r1, #0
 800eabc:	9100      	str	r1, [sp, #0]
 800eabe:	68b9      	ldr	r1, [r7, #8]
 800eac0:	68f8      	ldr	r0, [r7, #12]
 800eac2:	f000 fa5d 	bl	800ef80 <xQueueGenericCreateStatic>
 800eac6:	6278      	str	r0, [r7, #36]	@ 0x24
 800eac8:	e008      	b.n	800eadc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800eaca:	6a3b      	ldr	r3, [r7, #32]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d105      	bne.n	800eadc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ead0:	2200      	movs	r2, #0
 800ead2:	68b9      	ldr	r1, [r7, #8]
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f000 fada 	bl	800f08e <xQueueGenericCreate>
 800eada:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800eadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00c      	beq.n	800eafc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d003      	beq.n	800eaf0 <osMessageQueueNew+0xf0>
        name = attr->name;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	61fb      	str	r3, [r7, #28]
 800eaee:	e001      	b.n	800eaf4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800eaf4:	69f9      	ldr	r1, [r7, #28]
 800eaf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eaf8:	f001 fa7e 	bl	800fff8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800eafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3728      	adds	r7, #40	@ 0x28
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	2000a198 	.word	0x2000a198

0800eb0c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b08a      	sub	sp, #40	@ 0x28
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	603b      	str	r3, [r7, #0]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eb20:	2300      	movs	r3, #0
 800eb22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb24:	f3ef 8305 	mrs	r3, IPSR
 800eb28:	61fb      	str	r3, [r7, #28]
  return(result);
 800eb2a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10f      	bne.n	800eb50 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb30:	f3ef 8310 	mrs	r3, PRIMASK
 800eb34:	61bb      	str	r3, [r7, #24]
  return(result);
 800eb36:	69bb      	ldr	r3, [r7, #24]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d105      	bne.n	800eb48 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb3c:	f3ef 8311 	mrs	r3, BASEPRI
 800eb40:	617b      	str	r3, [r7, #20]
  return(result);
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d02c      	beq.n	800eba2 <osMessageQueuePut+0x96>
 800eb48:	4b28      	ldr	r3, [pc, #160]	@ (800ebec <osMessageQueuePut+0xe0>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b02      	cmp	r3, #2
 800eb4e:	d128      	bne.n	800eba2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb50:	6a3b      	ldr	r3, [r7, #32]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d005      	beq.n	800eb62 <osMessageQueuePut+0x56>
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d002      	beq.n	800eb62 <osMessageQueuePut+0x56>
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d003      	beq.n	800eb6a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800eb62:	f06f 0303 	mvn.w	r3, #3
 800eb66:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb68:	e039      	b.n	800ebde <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800eb6e:	f107 0210 	add.w	r2, r7, #16
 800eb72:	2300      	movs	r3, #0
 800eb74:	68b9      	ldr	r1, [r7, #8]
 800eb76:	6a38      	ldr	r0, [r7, #32]
 800eb78:	f000 fd2c 	bl	800f5d4 <xQueueGenericSendFromISR>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d003      	beq.n	800eb8a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800eb82:	f06f 0302 	mvn.w	r3, #2
 800eb86:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb88:	e029      	b.n	800ebde <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d026      	beq.n	800ebde <osMessageQueuePut+0xd2>
 800eb90:	4b17      	ldr	r3, [pc, #92]	@ (800ebf0 <osMessageQueuePut+0xe4>)
 800eb92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb96:	601a      	str	r2, [r3, #0]
 800eb98:	f3bf 8f4f 	dsb	sy
 800eb9c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eba0:	e01d      	b.n	800ebde <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eba2:	6a3b      	ldr	r3, [r7, #32]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d002      	beq.n	800ebae <osMessageQueuePut+0xa2>
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d103      	bne.n	800ebb6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ebae:	f06f 0303 	mvn.w	r3, #3
 800ebb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebb4:	e014      	b.n	800ebe0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	683a      	ldr	r2, [r7, #0]
 800ebba:	68b9      	ldr	r1, [r7, #8]
 800ebbc:	6a38      	ldr	r0, [r7, #32]
 800ebbe:	f000 fbff 	bl	800f3c0 <xQueueGenericSend>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d00b      	beq.n	800ebe0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d003      	beq.n	800ebd6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800ebce:	f06f 0301 	mvn.w	r3, #1
 800ebd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebd4:	e004      	b.n	800ebe0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800ebd6:	f06f 0302 	mvn.w	r3, #2
 800ebda:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebdc:	e000      	b.n	800ebe0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ebde:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3728      	adds	r7, #40	@ 0x28
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	2000a198 	.word	0x2000a198
 800ebf0:	e000ed04 	.word	0xe000ed04

0800ebf4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b08a      	sub	sp, #40	@ 0x28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
 800ec00:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ec06:	2300      	movs	r3, #0
 800ec08:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec0a:	f3ef 8305 	mrs	r3, IPSR
 800ec0e:	61fb      	str	r3, [r7, #28]
  return(result);
 800ec10:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d10f      	bne.n	800ec36 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec16:	f3ef 8310 	mrs	r3, PRIMASK
 800ec1a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d105      	bne.n	800ec2e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec22:	f3ef 8311 	mrs	r3, BASEPRI
 800ec26:	617b      	str	r3, [r7, #20]
  return(result);
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d02c      	beq.n	800ec88 <osMessageQueueGet+0x94>
 800ec2e:	4b28      	ldr	r3, [pc, #160]	@ (800ecd0 <osMessageQueueGet+0xdc>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2b02      	cmp	r3, #2
 800ec34:	d128      	bne.n	800ec88 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec36:	6a3b      	ldr	r3, [r7, #32]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d005      	beq.n	800ec48 <osMessageQueueGet+0x54>
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d002      	beq.n	800ec48 <osMessageQueueGet+0x54>
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d003      	beq.n	800ec50 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ec48:	f06f 0303 	mvn.w	r3, #3
 800ec4c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec4e:	e038      	b.n	800ecc2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ec50:	2300      	movs	r3, #0
 800ec52:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ec54:	f107 0310 	add.w	r3, r7, #16
 800ec58:	461a      	mov	r2, r3
 800ec5a:	68b9      	ldr	r1, [r7, #8]
 800ec5c:	6a38      	ldr	r0, [r7, #32]
 800ec5e:	f000 fff5 	bl	800fc4c <xQueueReceiveFromISR>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d003      	beq.n	800ec70 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ec68:	f06f 0302 	mvn.w	r3, #2
 800ec6c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec6e:	e028      	b.n	800ecc2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d025      	beq.n	800ecc2 <osMessageQueueGet+0xce>
 800ec76:	4b17      	ldr	r3, [pc, #92]	@ (800ecd4 <osMessageQueueGet+0xe0>)
 800ec78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec7c:	601a      	str	r2, [r3, #0]
 800ec7e:	f3bf 8f4f 	dsb	sy
 800ec82:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec86:	e01c      	b.n	800ecc2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ec88:	6a3b      	ldr	r3, [r7, #32]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d002      	beq.n	800ec94 <osMessageQueueGet+0xa0>
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d103      	bne.n	800ec9c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ec94:	f06f 0303 	mvn.w	r3, #3
 800ec98:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec9a:	e013      	b.n	800ecc4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ec9c:	683a      	ldr	r2, [r7, #0]
 800ec9e:	68b9      	ldr	r1, [r7, #8]
 800eca0:	6a38      	ldr	r0, [r7, #32]
 800eca2:	f000 fdd3 	bl	800f84c <xQueueReceive>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d00b      	beq.n	800ecc4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d003      	beq.n	800ecba <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ecb2:	f06f 0301 	mvn.w	r3, #1
 800ecb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecb8:	e004      	b.n	800ecc4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ecba:	f06f 0302 	mvn.w	r3, #2
 800ecbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecc0:	e000      	b.n	800ecc4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ecc2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3728      	adds	r7, #40	@ 0x28
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	2000a198 	.word	0x2000a198
 800ecd4:	e000ed04 	.word	0xe000ed04

0800ecd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	4a07      	ldr	r2, [pc, #28]	@ (800ed04 <vApplicationGetIdleTaskMemory+0x2c>)
 800ece8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	4a06      	ldr	r2, [pc, #24]	@ (800ed08 <vApplicationGetIdleTaskMemory+0x30>)
 800ecee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ecf6:	601a      	str	r2, [r3, #0]
}
 800ecf8:	bf00      	nop
 800ecfa:	3714      	adds	r7, #20
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr
 800ed04:	2000a19c 	.word	0x2000a19c
 800ed08:	2000a244 	.word	0x2000a244

0800ed0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ed0c:	b480      	push	{r7}
 800ed0e:	b085      	sub	sp, #20
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	4a07      	ldr	r2, [pc, #28]	@ (800ed38 <vApplicationGetTimerTaskMemory+0x2c>)
 800ed1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	4a06      	ldr	r2, [pc, #24]	@ (800ed3c <vApplicationGetTimerTaskMemory+0x30>)
 800ed22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed2a:	601a      	str	r2, [r3, #0]
}
 800ed2c:	bf00      	nop
 800ed2e:	3714      	adds	r7, #20
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr
 800ed38:	2000a644 	.word	0x2000a644
 800ed3c:	2000a6ec 	.word	0x2000a6ec

0800ed40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f103 0208 	add.w	r2, r3, #8
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f04f 32ff 	mov.w	r2, #4294967295
 800ed58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f103 0208 	add.w	r2, r3, #8
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f103 0208 	add.w	r2, r3, #8
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ed80:	b480      	push	{r7}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ed8e:	bf00      	nop
 800ed90:	370c      	adds	r7, #12
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr

0800ed9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	b085      	sub	sp, #20
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	68fa      	ldr	r2, [r7, #12]
 800edae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	689a      	ldr	r2, [r3, #8]
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	689b      	ldr	r3, [r3, #8]
 800edbc:	683a      	ldr	r2, [r7, #0]
 800edbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	683a      	ldr	r2, [r7, #0]
 800edc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	1c5a      	adds	r2, r3, #1
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	601a      	str	r2, [r3, #0]
}
 800edd6:	bf00      	nop
 800edd8:	3714      	adds	r7, #20
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr

0800ede2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ede2:	b480      	push	{r7}
 800ede4:	b085      	sub	sp, #20
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
 800edea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf8:	d103      	bne.n	800ee02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	691b      	ldr	r3, [r3, #16]
 800edfe:	60fb      	str	r3, [r7, #12]
 800ee00:	e00c      	b.n	800ee1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	3308      	adds	r3, #8
 800ee06:	60fb      	str	r3, [r7, #12]
 800ee08:	e002      	b.n	800ee10 <vListInsert+0x2e>
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	60fb      	str	r3, [r7, #12]
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	68ba      	ldr	r2, [r7, #8]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d2f6      	bcs.n	800ee0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	685a      	ldr	r2, [r3, #4]
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	683a      	ldr	r2, [r7, #0]
 800ee2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	601a      	str	r2, [r3, #0]
}
 800ee48:	bf00      	nop
 800ee4a:	3714      	adds	r7, #20
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	691b      	ldr	r3, [r3, #16]
 800ee60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	6892      	ldr	r2, [r2, #8]
 800ee6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	6852      	ldr	r2, [r2, #4]
 800ee74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d103      	bne.n	800ee88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	689a      	ldr	r2, [r3, #8]
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	1e5a      	subs	r2, r3, #1
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3714      	adds	r7, #20
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d10d      	bne.n	800eed8 <xQueueGenericReset+0x30>
	__asm volatile
 800eebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec0:	b672      	cpsid	i
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	b662      	cpsie	i
 800eed0:	60bb      	str	r3, [r7, #8]
}
 800eed2:	bf00      	nop
 800eed4:	bf00      	nop
 800eed6:	e7fd      	b.n	800eed4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800eed8:	f002 ff48 	bl	8011d6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eee4:	68f9      	ldr	r1, [r7, #12]
 800eee6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800eee8:	fb01 f303 	mul.w	r3, r1, r3
 800eeec:	441a      	add	r2, r3
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2200      	movs	r2, #0
 800eef6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	68f9      	ldr	r1, [r7, #12]
 800ef0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ef0e:	fb01 f303 	mul.w	r3, r1, r3
 800ef12:	441a      	add	r2, r3
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	22ff      	movs	r2, #255	@ 0xff
 800ef1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	22ff      	movs	r2, #255	@ 0xff
 800ef24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d114      	bne.n	800ef58 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	691b      	ldr	r3, [r3, #16]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d01a      	beq.n	800ef6c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	3310      	adds	r3, #16
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f001 fdc4 	bl	8010ac8 <xTaskRemoveFromEventList>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d012      	beq.n	800ef6c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ef46:	4b0d      	ldr	r3, [pc, #52]	@ (800ef7c <xQueueGenericReset+0xd4>)
 800ef48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef4c:	601a      	str	r2, [r3, #0]
 800ef4e:	f3bf 8f4f 	dsb	sy
 800ef52:	f3bf 8f6f 	isb	sy
 800ef56:	e009      	b.n	800ef6c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	3310      	adds	r3, #16
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7ff feef 	bl	800ed40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	3324      	adds	r3, #36	@ 0x24
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7ff feea 	bl	800ed40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ef6c:	f002 ff34 	bl	8011dd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ef70:	2301      	movs	r3, #1
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	e000ed04 	.word	0xe000ed04

0800ef80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b08e      	sub	sp, #56	@ 0x38
 800ef84:	af02      	add	r7, sp, #8
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	607a      	str	r2, [r7, #4]
 800ef8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d10d      	bne.n	800efb0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800ef94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef98:	b672      	cpsid	i
 800ef9a:	f383 8811 	msr	BASEPRI, r3
 800ef9e:	f3bf 8f6f 	isb	sy
 800efa2:	f3bf 8f4f 	dsb	sy
 800efa6:	b662      	cpsie	i
 800efa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800efaa:	bf00      	nop
 800efac:	bf00      	nop
 800efae:	e7fd      	b.n	800efac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d10d      	bne.n	800efd2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800efb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efba:	b672      	cpsid	i
 800efbc:	f383 8811 	msr	BASEPRI, r3
 800efc0:	f3bf 8f6f 	isb	sy
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	b662      	cpsie	i
 800efca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800efcc:	bf00      	nop
 800efce:	bf00      	nop
 800efd0:	e7fd      	b.n	800efce <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <xQueueGenericCreateStatic+0x5e>
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <xQueueGenericCreateStatic+0x62>
 800efde:	2301      	movs	r3, #1
 800efe0:	e000      	b.n	800efe4 <xQueueGenericCreateStatic+0x64>
 800efe2:	2300      	movs	r3, #0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d10d      	bne.n	800f004 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800efe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efec:	b672      	cpsid	i
 800efee:	f383 8811 	msr	BASEPRI, r3
 800eff2:	f3bf 8f6f 	isb	sy
 800eff6:	f3bf 8f4f 	dsb	sy
 800effa:	b662      	cpsie	i
 800effc:	623b      	str	r3, [r7, #32]
}
 800effe:	bf00      	nop
 800f000:	bf00      	nop
 800f002:	e7fd      	b.n	800f000 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d102      	bne.n	800f010 <xQueueGenericCreateStatic+0x90>
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d101      	bne.n	800f014 <xQueueGenericCreateStatic+0x94>
 800f010:	2301      	movs	r3, #1
 800f012:	e000      	b.n	800f016 <xQueueGenericCreateStatic+0x96>
 800f014:	2300      	movs	r3, #0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10d      	bne.n	800f036 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800f01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f01e:	b672      	cpsid	i
 800f020:	f383 8811 	msr	BASEPRI, r3
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	b662      	cpsie	i
 800f02e:	61fb      	str	r3, [r7, #28]
}
 800f030:	bf00      	nop
 800f032:	bf00      	nop
 800f034:	e7fd      	b.n	800f032 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f036:	2350      	movs	r3, #80	@ 0x50
 800f038:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	2b50      	cmp	r3, #80	@ 0x50
 800f03e:	d00d      	beq.n	800f05c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800f040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f044:	b672      	cpsid	i
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	b662      	cpsie	i
 800f054:	61bb      	str	r3, [r7, #24]
}
 800f056:	bf00      	nop
 800f058:	bf00      	nop
 800f05a:	e7fd      	b.n	800f058 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f05c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00d      	beq.n	800f084 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f06a:	2201      	movs	r2, #1
 800f06c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f070:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	4613      	mov	r3, r2
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	68b9      	ldr	r1, [r7, #8]
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f000 f848 	bl	800f114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f086:	4618      	mov	r0, r3
 800f088:	3730      	adds	r7, #48	@ 0x30
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b08a      	sub	sp, #40	@ 0x28
 800f092:	af02      	add	r7, sp, #8
 800f094:	60f8      	str	r0, [r7, #12]
 800f096:	60b9      	str	r1, [r7, #8]
 800f098:	4613      	mov	r3, r2
 800f09a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d10d      	bne.n	800f0be <xQueueGenericCreate+0x30>
	__asm volatile
 800f0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a6:	b672      	cpsid	i
 800f0a8:	f383 8811 	msr	BASEPRI, r3
 800f0ac:	f3bf 8f6f 	isb	sy
 800f0b0:	f3bf 8f4f 	dsb	sy
 800f0b4:	b662      	cpsie	i
 800f0b6:	613b      	str	r3, [r7, #16]
}
 800f0b8:	bf00      	nop
 800f0ba:	bf00      	nop
 800f0bc:	e7fd      	b.n	800f0ba <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d102      	bne.n	800f0ca <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	61fb      	str	r3, [r7, #28]
 800f0c8:	e004      	b.n	800f0d4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	68ba      	ldr	r2, [r7, #8]
 800f0ce:	fb02 f303 	mul.w	r3, r2, r3
 800f0d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	3350      	adds	r3, #80	@ 0x50
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f002 ff75 	bl	8011fc8 <pvPortMalloc>
 800f0de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f0e0:	69bb      	ldr	r3, [r7, #24]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d011      	beq.n	800f10a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	3350      	adds	r3, #80	@ 0x50
 800f0ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f0f8:	79fa      	ldrb	r2, [r7, #7]
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	9300      	str	r3, [sp, #0]
 800f0fe:	4613      	mov	r3, r2
 800f100:	697a      	ldr	r2, [r7, #20]
 800f102:	68b9      	ldr	r1, [r7, #8]
 800f104:	68f8      	ldr	r0, [r7, #12]
 800f106:	f000 f805 	bl	800f114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f10a:	69bb      	ldr	r3, [r7, #24]
	}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3720      	adds	r7, #32
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}

0800f114 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d103      	bne.n	800f130 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	69ba      	ldr	r2, [r7, #24]
 800f12c:	601a      	str	r2, [r3, #0]
 800f12e:	e002      	b.n	800f136 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f130:	69bb      	ldr	r3, [r7, #24]
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	68ba      	ldr	r2, [r7, #8]
 800f140:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f142:	2101      	movs	r1, #1
 800f144:	69b8      	ldr	r0, [r7, #24]
 800f146:	f7ff feaf 	bl	800eea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f14a:	69bb      	ldr	r3, [r7, #24]
 800f14c:	78fa      	ldrb	r2, [r7, #3]
 800f14e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f152:	bf00      	nop
 800f154:	3710      	adds	r7, #16
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}

0800f15a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f15a:	b580      	push	{r7, lr}
 800f15c:	b082      	sub	sp, #8
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d00e      	beq.n	800f186 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2200      	movs	r2, #0
 800f172:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2200      	movs	r2, #0
 800f178:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f17a:	2300      	movs	r3, #0
 800f17c:	2200      	movs	r2, #0
 800f17e:	2100      	movs	r1, #0
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 f91d 	bl	800f3c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f186:	bf00      	nop
 800f188:	3708      	adds	r7, #8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}

0800f18e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f18e:	b580      	push	{r7, lr}
 800f190:	b086      	sub	sp, #24
 800f192:	af00      	add	r7, sp, #0
 800f194:	4603      	mov	r3, r0
 800f196:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f198:	2301      	movs	r3, #1
 800f19a:	617b      	str	r3, [r7, #20]
 800f19c:	2300      	movs	r3, #0
 800f19e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f1a0:	79fb      	ldrb	r3, [r7, #7]
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	6939      	ldr	r1, [r7, #16]
 800f1a6:	6978      	ldr	r0, [r7, #20]
 800f1a8:	f7ff ff71 	bl	800f08e <xQueueGenericCreate>
 800f1ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f1ae:	68f8      	ldr	r0, [r7, #12]
 800f1b0:	f7ff ffd3 	bl	800f15a <prvInitialiseMutex>

		return xNewQueue;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
	}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3718      	adds	r7, #24
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b088      	sub	sp, #32
 800f1c2:	af02      	add	r7, sp, #8
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	6039      	str	r1, [r7, #0]
 800f1c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	617b      	str	r3, [r7, #20]
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	9300      	str	r3, [sp, #0]
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	6939      	ldr	r1, [r7, #16]
 800f1dc:	6978      	ldr	r0, [r7, #20]
 800f1de:	f7ff fecf 	bl	800ef80 <xQueueGenericCreateStatic>
 800f1e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f1e4:	68f8      	ldr	r0, [r7, #12]
 800f1e6:	f7ff ffb8 	bl	800f15a <prvInitialiseMutex>

		return xNewQueue;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
	}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3718      	adds	r7, #24
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f1f4:	b590      	push	{r4, r7, lr}
 800f1f6:	b087      	sub	sp, #28
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d10d      	bne.n	800f222 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800f206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f20a:	b672      	cpsid	i
 800f20c:	f383 8811 	msr	BASEPRI, r3
 800f210:	f3bf 8f6f 	isb	sy
 800f214:	f3bf 8f4f 	dsb	sy
 800f218:	b662      	cpsie	i
 800f21a:	60fb      	str	r3, [r7, #12]
}
 800f21c:	bf00      	nop
 800f21e:	bf00      	nop
 800f220:	e7fd      	b.n	800f21e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	689c      	ldr	r4, [r3, #8]
 800f226:	f001 fe1d 	bl	8010e64 <xTaskGetCurrentTaskHandle>
 800f22a:	4603      	mov	r3, r0
 800f22c:	429c      	cmp	r4, r3
 800f22e:	d111      	bne.n	800f254 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	1e5a      	subs	r2, r3, #1
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d105      	bne.n	800f24e <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f242:	2300      	movs	r3, #0
 800f244:	2200      	movs	r2, #0
 800f246:	2100      	movs	r1, #0
 800f248:	6938      	ldr	r0, [r7, #16]
 800f24a:	f000 f8b9 	bl	800f3c0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f24e:	2301      	movs	r3, #1
 800f250:	617b      	str	r3, [r7, #20]
 800f252:	e001      	b.n	800f258 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f254:	2300      	movs	r3, #0
 800f256:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f258:	697b      	ldr	r3, [r7, #20]
	}
 800f25a:	4618      	mov	r0, r3
 800f25c:	371c      	adds	r7, #28
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd90      	pop	{r4, r7, pc}

0800f262 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f262:	b590      	push	{r4, r7, lr}
 800f264:	b087      	sub	sp, #28
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d10d      	bne.n	800f292 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800f276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f27a:	b672      	cpsid	i
 800f27c:	f383 8811 	msr	BASEPRI, r3
 800f280:	f3bf 8f6f 	isb	sy
 800f284:	f3bf 8f4f 	dsb	sy
 800f288:	b662      	cpsie	i
 800f28a:	60fb      	str	r3, [r7, #12]
}
 800f28c:	bf00      	nop
 800f28e:	bf00      	nop
 800f290:	e7fd      	b.n	800f28e <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	689c      	ldr	r4, [r3, #8]
 800f296:	f001 fde5 	bl	8010e64 <xTaskGetCurrentTaskHandle>
 800f29a:	4603      	mov	r3, r0
 800f29c:	429c      	cmp	r4, r3
 800f29e:	d107      	bne.n	800f2b0 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	1c5a      	adds	r2, r3, #1
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	617b      	str	r3, [r7, #20]
 800f2ae:	e00c      	b.n	800f2ca <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f2b0:	6839      	ldr	r1, [r7, #0]
 800f2b2:	6938      	ldr	r0, [r7, #16]
 800f2b4:	f000 fbb2 	bl	800fa1c <xQueueSemaphoreTake>
 800f2b8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d004      	beq.n	800f2ca <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	1c5a      	adds	r2, r3, #1
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f2ca:	697b      	ldr	r3, [r7, #20]
	}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	371c      	adds	r7, #28
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd90      	pop	{r4, r7, pc}

0800f2d4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b08a      	sub	sp, #40	@ 0x28
 800f2d8:	af02      	add	r7, sp, #8
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d10d      	bne.n	800f302 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800f2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ea:	b672      	cpsid	i
 800f2ec:	f383 8811 	msr	BASEPRI, r3
 800f2f0:	f3bf 8f6f 	isb	sy
 800f2f4:	f3bf 8f4f 	dsb	sy
 800f2f8:	b662      	cpsie	i
 800f2fa:	61bb      	str	r3, [r7, #24]
}
 800f2fc:	bf00      	nop
 800f2fe:	bf00      	nop
 800f300:	e7fd      	b.n	800f2fe <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	429a      	cmp	r2, r3
 800f308:	d90d      	bls.n	800f326 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800f30a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f30e:	b672      	cpsid	i
 800f310:	f383 8811 	msr	BASEPRI, r3
 800f314:	f3bf 8f6f 	isb	sy
 800f318:	f3bf 8f4f 	dsb	sy
 800f31c:	b662      	cpsie	i
 800f31e:	617b      	str	r3, [r7, #20]
}
 800f320:	bf00      	nop
 800f322:	bf00      	nop
 800f324:	e7fd      	b.n	800f322 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f326:	2302      	movs	r3, #2
 800f328:	9300      	str	r3, [sp, #0]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2200      	movs	r2, #0
 800f32e:	2100      	movs	r1, #0
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f7ff fe25 	bl	800ef80 <xQueueGenericCreateStatic>
 800f336:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d002      	beq.n	800f344 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	68ba      	ldr	r2, [r7, #8]
 800f342:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f344:	69fb      	ldr	r3, [r7, #28]
	}
 800f346:	4618      	mov	r0, r3
 800f348:	3720      	adds	r7, #32
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}

0800f34e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f34e:	b580      	push	{r7, lr}
 800f350:	b086      	sub	sp, #24
 800f352:	af00      	add	r7, sp, #0
 800f354:	6078      	str	r0, [r7, #4]
 800f356:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d10d      	bne.n	800f37a <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800f35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f362:	b672      	cpsid	i
 800f364:	f383 8811 	msr	BASEPRI, r3
 800f368:	f3bf 8f6f 	isb	sy
 800f36c:	f3bf 8f4f 	dsb	sy
 800f370:	b662      	cpsie	i
 800f372:	613b      	str	r3, [r7, #16]
}
 800f374:	bf00      	nop
 800f376:	bf00      	nop
 800f378:	e7fd      	b.n	800f376 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f37a:	683a      	ldr	r2, [r7, #0]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d90d      	bls.n	800f39e <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800f382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f386:	b672      	cpsid	i
 800f388:	f383 8811 	msr	BASEPRI, r3
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f3bf 8f4f 	dsb	sy
 800f394:	b662      	cpsie	i
 800f396:	60fb      	str	r3, [r7, #12]
}
 800f398:	bf00      	nop
 800f39a:	bf00      	nop
 800f39c:	e7fd      	b.n	800f39a <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f39e:	2202      	movs	r2, #2
 800f3a0:	2100      	movs	r1, #0
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f7ff fe73 	bl	800f08e <xQueueGenericCreate>
 800f3a8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d002      	beq.n	800f3b6 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	683a      	ldr	r2, [r7, #0]
 800f3b4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f3b6:	697b      	ldr	r3, [r7, #20]
	}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3718      	adds	r7, #24
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b08e      	sub	sp, #56	@ 0x38
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
 800f3cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d10d      	bne.n	800f3f8 <xQueueGenericSend+0x38>
	__asm volatile
 800f3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3e0:	b672      	cpsid	i
 800f3e2:	f383 8811 	msr	BASEPRI, r3
 800f3e6:	f3bf 8f6f 	isb	sy
 800f3ea:	f3bf 8f4f 	dsb	sy
 800f3ee:	b662      	cpsie	i
 800f3f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f3f2:	bf00      	nop
 800f3f4:	bf00      	nop
 800f3f6:	e7fd      	b.n	800f3f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d103      	bne.n	800f406 <xQueueGenericSend+0x46>
 800f3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f402:	2b00      	cmp	r3, #0
 800f404:	d101      	bne.n	800f40a <xQueueGenericSend+0x4a>
 800f406:	2301      	movs	r3, #1
 800f408:	e000      	b.n	800f40c <xQueueGenericSend+0x4c>
 800f40a:	2300      	movs	r3, #0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d10d      	bne.n	800f42c <xQueueGenericSend+0x6c>
	__asm volatile
 800f410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f414:	b672      	cpsid	i
 800f416:	f383 8811 	msr	BASEPRI, r3
 800f41a:	f3bf 8f6f 	isb	sy
 800f41e:	f3bf 8f4f 	dsb	sy
 800f422:	b662      	cpsie	i
 800f424:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f426:	bf00      	nop
 800f428:	bf00      	nop
 800f42a:	e7fd      	b.n	800f428 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	2b02      	cmp	r3, #2
 800f430:	d103      	bne.n	800f43a <xQueueGenericSend+0x7a>
 800f432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f436:	2b01      	cmp	r3, #1
 800f438:	d101      	bne.n	800f43e <xQueueGenericSend+0x7e>
 800f43a:	2301      	movs	r3, #1
 800f43c:	e000      	b.n	800f440 <xQueueGenericSend+0x80>
 800f43e:	2300      	movs	r3, #0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d10d      	bne.n	800f460 <xQueueGenericSend+0xa0>
	__asm volatile
 800f444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f448:	b672      	cpsid	i
 800f44a:	f383 8811 	msr	BASEPRI, r3
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	f3bf 8f4f 	dsb	sy
 800f456:	b662      	cpsie	i
 800f458:	623b      	str	r3, [r7, #32]
}
 800f45a:	bf00      	nop
 800f45c:	bf00      	nop
 800f45e:	e7fd      	b.n	800f45c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f460:	f001 fd10 	bl	8010e84 <xTaskGetSchedulerState>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d102      	bne.n	800f470 <xQueueGenericSend+0xb0>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d101      	bne.n	800f474 <xQueueGenericSend+0xb4>
 800f470:	2301      	movs	r3, #1
 800f472:	e000      	b.n	800f476 <xQueueGenericSend+0xb6>
 800f474:	2300      	movs	r3, #0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d10d      	bne.n	800f496 <xQueueGenericSend+0xd6>
	__asm volatile
 800f47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f47e:	b672      	cpsid	i
 800f480:	f383 8811 	msr	BASEPRI, r3
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	f3bf 8f4f 	dsb	sy
 800f48c:	b662      	cpsie	i
 800f48e:	61fb      	str	r3, [r7, #28]
}
 800f490:	bf00      	nop
 800f492:	bf00      	nop
 800f494:	e7fd      	b.n	800f492 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f496:	f002 fc69 	bl	8011d6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f49c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d302      	bcc.n	800f4ac <xQueueGenericSend+0xec>
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	2b02      	cmp	r3, #2
 800f4aa:	d129      	bne.n	800f500 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4ac:	683a      	ldr	r2, [r7, #0]
 800f4ae:	68b9      	ldr	r1, [r7, #8]
 800f4b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f4b2:	f000 fc91 	bl	800fdd8 <prvCopyDataToQueue>
 800f4b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d010      	beq.n	800f4e2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4c2:	3324      	adds	r3, #36	@ 0x24
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f001 faff 	bl	8010ac8 <xTaskRemoveFromEventList>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d013      	beq.n	800f4f8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f4d0:	4b3f      	ldr	r3, [pc, #252]	@ (800f5d0 <xQueueGenericSend+0x210>)
 800f4d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4d6:	601a      	str	r2, [r3, #0]
 800f4d8:	f3bf 8f4f 	dsb	sy
 800f4dc:	f3bf 8f6f 	isb	sy
 800f4e0:	e00a      	b.n	800f4f8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d007      	beq.n	800f4f8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f4e8:	4b39      	ldr	r3, [pc, #228]	@ (800f5d0 <xQueueGenericSend+0x210>)
 800f4ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4ee:	601a      	str	r2, [r3, #0]
 800f4f0:	f3bf 8f4f 	dsb	sy
 800f4f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f4f8:	f002 fc6e 	bl	8011dd8 <vPortExitCritical>
				return pdPASS;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	e063      	b.n	800f5c8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d103      	bne.n	800f50e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f506:	f002 fc67 	bl	8011dd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f50a:	2300      	movs	r3, #0
 800f50c:	e05c      	b.n	800f5c8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f50e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f510:	2b00      	cmp	r3, #0
 800f512:	d106      	bne.n	800f522 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f514:	f107 0314 	add.w	r3, r7, #20
 800f518:	4618      	mov	r0, r3
 800f51a:	f001 fb3b 	bl	8010b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f51e:	2301      	movs	r3, #1
 800f520:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f522:	f002 fc59 	bl	8011dd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f526:	f001 f861 	bl	80105ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f52a:	f002 fc1f 	bl	8011d6c <vPortEnterCritical>
 800f52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f534:	b25b      	sxtb	r3, r3
 800f536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f53a:	d103      	bne.n	800f544 <xQueueGenericSend+0x184>
 800f53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f53e:	2200      	movs	r2, #0
 800f540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f54a:	b25b      	sxtb	r3, r3
 800f54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f550:	d103      	bne.n	800f55a <xQueueGenericSend+0x19a>
 800f552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f554:	2200      	movs	r2, #0
 800f556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f55a:	f002 fc3d 	bl	8011dd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f55e:	1d3a      	adds	r2, r7, #4
 800f560:	f107 0314 	add.w	r3, r7, #20
 800f564:	4611      	mov	r1, r2
 800f566:	4618      	mov	r0, r3
 800f568:	f001 fb2a 	bl	8010bc0 <xTaskCheckForTimeOut>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d124      	bne.n	800f5bc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f572:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f574:	f000 fd28 	bl	800ffc8 <prvIsQueueFull>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d018      	beq.n	800f5b0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f580:	3310      	adds	r3, #16
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	4611      	mov	r1, r2
 800f586:	4618      	mov	r0, r3
 800f588:	f001 fa48 	bl	8010a1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f58c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f58e:	f000 fcb3 	bl	800fef8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f592:	f001 f839 	bl	8010608 <xTaskResumeAll>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	f47f af7c 	bne.w	800f496 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800f59e:	4b0c      	ldr	r3, [pc, #48]	@ (800f5d0 <xQueueGenericSend+0x210>)
 800f5a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5a4:	601a      	str	r2, [r3, #0]
 800f5a6:	f3bf 8f4f 	dsb	sy
 800f5aa:	f3bf 8f6f 	isb	sy
 800f5ae:	e772      	b.n	800f496 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f5b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5b2:	f000 fca1 	bl	800fef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f5b6:	f001 f827 	bl	8010608 <xTaskResumeAll>
 800f5ba:	e76c      	b.n	800f496 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f5bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5be:	f000 fc9b 	bl	800fef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f5c2:	f001 f821 	bl	8010608 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f5c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3738      	adds	r7, #56	@ 0x38
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	e000ed04 	.word	0xe000ed04

0800f5d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b08e      	sub	sp, #56	@ 0x38
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]
 800f5e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d10d      	bne.n	800f608 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800f5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f0:	b672      	cpsid	i
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	b662      	cpsie	i
 800f600:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f602:	bf00      	nop
 800f604:	bf00      	nop
 800f606:	e7fd      	b.n	800f604 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d103      	bne.n	800f616 <xQueueGenericSendFromISR+0x42>
 800f60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f612:	2b00      	cmp	r3, #0
 800f614:	d101      	bne.n	800f61a <xQueueGenericSendFromISR+0x46>
 800f616:	2301      	movs	r3, #1
 800f618:	e000      	b.n	800f61c <xQueueGenericSendFromISR+0x48>
 800f61a:	2300      	movs	r3, #0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d10d      	bne.n	800f63c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800f620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f624:	b672      	cpsid	i
 800f626:	f383 8811 	msr	BASEPRI, r3
 800f62a:	f3bf 8f6f 	isb	sy
 800f62e:	f3bf 8f4f 	dsb	sy
 800f632:	b662      	cpsie	i
 800f634:	623b      	str	r3, [r7, #32]
}
 800f636:	bf00      	nop
 800f638:	bf00      	nop
 800f63a:	e7fd      	b.n	800f638 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	2b02      	cmp	r3, #2
 800f640:	d103      	bne.n	800f64a <xQueueGenericSendFromISR+0x76>
 800f642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f646:	2b01      	cmp	r3, #1
 800f648:	d101      	bne.n	800f64e <xQueueGenericSendFromISR+0x7a>
 800f64a:	2301      	movs	r3, #1
 800f64c:	e000      	b.n	800f650 <xQueueGenericSendFromISR+0x7c>
 800f64e:	2300      	movs	r3, #0
 800f650:	2b00      	cmp	r3, #0
 800f652:	d10d      	bne.n	800f670 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800f654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f658:	b672      	cpsid	i
 800f65a:	f383 8811 	msr	BASEPRI, r3
 800f65e:	f3bf 8f6f 	isb	sy
 800f662:	f3bf 8f4f 	dsb	sy
 800f666:	b662      	cpsie	i
 800f668:	61fb      	str	r3, [r7, #28]
}
 800f66a:	bf00      	nop
 800f66c:	bf00      	nop
 800f66e:	e7fd      	b.n	800f66c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f670:	f002 fc64 	bl	8011f3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f674:	f3ef 8211 	mrs	r2, BASEPRI
 800f678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f67c:	b672      	cpsid	i
 800f67e:	f383 8811 	msr	BASEPRI, r3
 800f682:	f3bf 8f6f 	isb	sy
 800f686:	f3bf 8f4f 	dsb	sy
 800f68a:	b662      	cpsie	i
 800f68c:	61ba      	str	r2, [r7, #24]
 800f68e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f690:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f692:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f69a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d302      	bcc.n	800f6a6 <xQueueGenericSendFromISR+0xd2>
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	2b02      	cmp	r3, #2
 800f6a4:	d12c      	bne.n	800f700 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f6ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f6b0:	683a      	ldr	r2, [r7, #0]
 800f6b2:	68b9      	ldr	r1, [r7, #8]
 800f6b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6b6:	f000 fb8f 	bl	800fdd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f6ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800f6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6c2:	d112      	bne.n	800f6ea <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d016      	beq.n	800f6fa <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ce:	3324      	adds	r3, #36	@ 0x24
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f001 f9f9 	bl	8010ac8 <xTaskRemoveFromEventList>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d00e      	beq.n	800f6fa <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d00b      	beq.n	800f6fa <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	601a      	str	r2, [r3, #0]
 800f6e8:	e007      	b.n	800f6fa <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f6ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	b25a      	sxtb	r2, r3
 800f6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800f6fe:	e001      	b.n	800f704 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f700:	2300      	movs	r3, #0
 800f702:	637b      	str	r3, [r7, #52]	@ 0x34
 800f704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f706:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f70e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f712:	4618      	mov	r0, r3
 800f714:	3738      	adds	r7, #56	@ 0x38
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}

0800f71a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f71a:	b580      	push	{r7, lr}
 800f71c:	b08e      	sub	sp, #56	@ 0x38
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
 800f722:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d10d      	bne.n	800f74a <xQueueGiveFromISR+0x30>
	__asm volatile
 800f72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f732:	b672      	cpsid	i
 800f734:	f383 8811 	msr	BASEPRI, r3
 800f738:	f3bf 8f6f 	isb	sy
 800f73c:	f3bf 8f4f 	dsb	sy
 800f740:	b662      	cpsie	i
 800f742:	623b      	str	r3, [r7, #32]
}
 800f744:	bf00      	nop
 800f746:	bf00      	nop
 800f748:	e7fd      	b.n	800f746 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00d      	beq.n	800f76e <xQueueGiveFromISR+0x54>
	__asm volatile
 800f752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f756:	b672      	cpsid	i
 800f758:	f383 8811 	msr	BASEPRI, r3
 800f75c:	f3bf 8f6f 	isb	sy
 800f760:	f3bf 8f4f 	dsb	sy
 800f764:	b662      	cpsie	i
 800f766:	61fb      	str	r3, [r7, #28]
}
 800f768:	bf00      	nop
 800f76a:	bf00      	nop
 800f76c:	e7fd      	b.n	800f76a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d103      	bne.n	800f77e <xQueueGiveFromISR+0x64>
 800f776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d101      	bne.n	800f782 <xQueueGiveFromISR+0x68>
 800f77e:	2301      	movs	r3, #1
 800f780:	e000      	b.n	800f784 <xQueueGiveFromISR+0x6a>
 800f782:	2300      	movs	r3, #0
 800f784:	2b00      	cmp	r3, #0
 800f786:	d10d      	bne.n	800f7a4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800f788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f78c:	b672      	cpsid	i
 800f78e:	f383 8811 	msr	BASEPRI, r3
 800f792:	f3bf 8f6f 	isb	sy
 800f796:	f3bf 8f4f 	dsb	sy
 800f79a:	b662      	cpsie	i
 800f79c:	61bb      	str	r3, [r7, #24]
}
 800f79e:	bf00      	nop
 800f7a0:	bf00      	nop
 800f7a2:	e7fd      	b.n	800f7a0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7a4:	f002 fbca 	bl	8011f3c <vPortValidateInterruptPriority>
	__asm volatile
 800f7a8:	f3ef 8211 	mrs	r2, BASEPRI
 800f7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b0:	b672      	cpsid	i
 800f7b2:	f383 8811 	msr	BASEPRI, r3
 800f7b6:	f3bf 8f6f 	isb	sy
 800f7ba:	f3bf 8f4f 	dsb	sy
 800f7be:	b662      	cpsie	i
 800f7c0:	617a      	str	r2, [r7, #20]
 800f7c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f7c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7cc:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d22b      	bcs.n	800f830 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f7de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e4:	1c5a      	adds	r2, r3, #1
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7e8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f7ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f2:	d112      	bne.n	800f81a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d016      	beq.n	800f82a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7fe:	3324      	adds	r3, #36	@ 0x24
 800f800:	4618      	mov	r0, r3
 800f802:	f001 f961 	bl	8010ac8 <xTaskRemoveFromEventList>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00e      	beq.n	800f82a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00b      	beq.n	800f82a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	2201      	movs	r2, #1
 800f816:	601a      	str	r2, [r3, #0]
 800f818:	e007      	b.n	800f82a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f81a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f81e:	3301      	adds	r3, #1
 800f820:	b2db      	uxtb	r3, r3
 800f822:	b25a      	sxtb	r2, r3
 800f824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f82a:	2301      	movs	r3, #1
 800f82c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f82e:	e001      	b.n	800f834 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f830:	2300      	movs	r3, #0
 800f832:	637b      	str	r3, [r7, #52]	@ 0x34
 800f834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f836:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f383 8811 	msr	BASEPRI, r3
}
 800f83e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f842:	4618      	mov	r0, r3
 800f844:	3738      	adds	r7, #56	@ 0x38
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
	...

0800f84c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b08c      	sub	sp, #48	@ 0x30
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	60b9      	str	r1, [r7, #8]
 800f856:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f858:	2300      	movs	r3, #0
 800f85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f862:	2b00      	cmp	r3, #0
 800f864:	d10d      	bne.n	800f882 <xQueueReceive+0x36>
	__asm volatile
 800f866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f86a:	b672      	cpsid	i
 800f86c:	f383 8811 	msr	BASEPRI, r3
 800f870:	f3bf 8f6f 	isb	sy
 800f874:	f3bf 8f4f 	dsb	sy
 800f878:	b662      	cpsie	i
 800f87a:	623b      	str	r3, [r7, #32]
}
 800f87c:	bf00      	nop
 800f87e:	bf00      	nop
 800f880:	e7fd      	b.n	800f87e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d103      	bne.n	800f890 <xQueueReceive+0x44>
 800f888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d101      	bne.n	800f894 <xQueueReceive+0x48>
 800f890:	2301      	movs	r3, #1
 800f892:	e000      	b.n	800f896 <xQueueReceive+0x4a>
 800f894:	2300      	movs	r3, #0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d10d      	bne.n	800f8b6 <xQueueReceive+0x6a>
	__asm volatile
 800f89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f89e:	b672      	cpsid	i
 800f8a0:	f383 8811 	msr	BASEPRI, r3
 800f8a4:	f3bf 8f6f 	isb	sy
 800f8a8:	f3bf 8f4f 	dsb	sy
 800f8ac:	b662      	cpsie	i
 800f8ae:	61fb      	str	r3, [r7, #28]
}
 800f8b0:	bf00      	nop
 800f8b2:	bf00      	nop
 800f8b4:	e7fd      	b.n	800f8b2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8b6:	f001 fae5 	bl	8010e84 <xTaskGetSchedulerState>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d102      	bne.n	800f8c6 <xQueueReceive+0x7a>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d101      	bne.n	800f8ca <xQueueReceive+0x7e>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e000      	b.n	800f8cc <xQueueReceive+0x80>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d10d      	bne.n	800f8ec <xQueueReceive+0xa0>
	__asm volatile
 800f8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d4:	b672      	cpsid	i
 800f8d6:	f383 8811 	msr	BASEPRI, r3
 800f8da:	f3bf 8f6f 	isb	sy
 800f8de:	f3bf 8f4f 	dsb	sy
 800f8e2:	b662      	cpsie	i
 800f8e4:	61bb      	str	r3, [r7, #24]
}
 800f8e6:	bf00      	nop
 800f8e8:	bf00      	nop
 800f8ea:	e7fd      	b.n	800f8e8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8ec:	f002 fa3e 	bl	8011d6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d01f      	beq.n	800f93c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f8fc:	68b9      	ldr	r1, [r7, #8]
 800f8fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f900:	f000 fad4 	bl	800feac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f906:	1e5a      	subs	r2, r3, #1
 800f908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f90a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f90e:	691b      	ldr	r3, [r3, #16]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d00f      	beq.n	800f934 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f916:	3310      	adds	r3, #16
 800f918:	4618      	mov	r0, r3
 800f91a:	f001 f8d5 	bl	8010ac8 <xTaskRemoveFromEventList>
 800f91e:	4603      	mov	r3, r0
 800f920:	2b00      	cmp	r3, #0
 800f922:	d007      	beq.n	800f934 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f924:	4b3c      	ldr	r3, [pc, #240]	@ (800fa18 <xQueueReceive+0x1cc>)
 800f926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f92a:	601a      	str	r2, [r3, #0]
 800f92c:	f3bf 8f4f 	dsb	sy
 800f930:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f934:	f002 fa50 	bl	8011dd8 <vPortExitCritical>
				return pdPASS;
 800f938:	2301      	movs	r3, #1
 800f93a:	e069      	b.n	800fa10 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d103      	bne.n	800f94a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f942:	f002 fa49 	bl	8011dd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f946:	2300      	movs	r3, #0
 800f948:	e062      	b.n	800fa10 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d106      	bne.n	800f95e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f950:	f107 0310 	add.w	r3, r7, #16
 800f954:	4618      	mov	r0, r3
 800f956:	f001 f91d 	bl	8010b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f95a:	2301      	movs	r3, #1
 800f95c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f95e:	f002 fa3b 	bl	8011dd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f962:	f000 fe43 	bl	80105ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f966:	f002 fa01 	bl	8011d6c <vPortEnterCritical>
 800f96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f96c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f970:	b25b      	sxtb	r3, r3
 800f972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f976:	d103      	bne.n	800f980 <xQueueReceive+0x134>
 800f978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f97a:	2200      	movs	r2, #0
 800f97c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f982:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f986:	b25b      	sxtb	r3, r3
 800f988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f98c:	d103      	bne.n	800f996 <xQueueReceive+0x14a>
 800f98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f990:	2200      	movs	r2, #0
 800f992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f996:	f002 fa1f 	bl	8011dd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f99a:	1d3a      	adds	r2, r7, #4
 800f99c:	f107 0310 	add.w	r3, r7, #16
 800f9a0:	4611      	mov	r1, r2
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f001 f90c 	bl	8010bc0 <xTaskCheckForTimeOut>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d123      	bne.n	800f9f6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9b0:	f000 faf4 	bl	800ff9c <prvIsQueueEmpty>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d017      	beq.n	800f9ea <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9bc:	3324      	adds	r3, #36	@ 0x24
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	4611      	mov	r1, r2
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f001 f82a 	bl	8010a1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f9c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9ca:	f000 fa95 	bl	800fef8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f9ce:	f000 fe1b 	bl	8010608 <xTaskResumeAll>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d189      	bne.n	800f8ec <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800f9d8:	4b0f      	ldr	r3, [pc, #60]	@ (800fa18 <xQueueReceive+0x1cc>)
 800f9da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9de:	601a      	str	r2, [r3, #0]
 800f9e0:	f3bf 8f4f 	dsb	sy
 800f9e4:	f3bf 8f6f 	isb	sy
 800f9e8:	e780      	b.n	800f8ec <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f9ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9ec:	f000 fa84 	bl	800fef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9f0:	f000 fe0a 	bl	8010608 <xTaskResumeAll>
 800f9f4:	e77a      	b.n	800f8ec <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f9f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9f8:	f000 fa7e 	bl	800fef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9fc:	f000 fe04 	bl	8010608 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa02:	f000 facb 	bl	800ff9c <prvIsQueueEmpty>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	f43f af6f 	beq.w	800f8ec <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3730      	adds	r7, #48	@ 0x30
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	e000ed04 	.word	0xe000ed04

0800fa1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b08e      	sub	sp, #56	@ 0x38
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa26:	2300      	movs	r3, #0
 800fa28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d10d      	bne.n	800fa54 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800fa38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa3c:	b672      	cpsid	i
 800fa3e:	f383 8811 	msr	BASEPRI, r3
 800fa42:	f3bf 8f6f 	isb	sy
 800fa46:	f3bf 8f4f 	dsb	sy
 800fa4a:	b662      	cpsie	i
 800fa4c:	623b      	str	r3, [r7, #32]
}
 800fa4e:	bf00      	nop
 800fa50:	bf00      	nop
 800fa52:	e7fd      	b.n	800fa50 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fa54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00d      	beq.n	800fa78 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800fa5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa60:	b672      	cpsid	i
 800fa62:	f383 8811 	msr	BASEPRI, r3
 800fa66:	f3bf 8f6f 	isb	sy
 800fa6a:	f3bf 8f4f 	dsb	sy
 800fa6e:	b662      	cpsie	i
 800fa70:	61fb      	str	r3, [r7, #28]
}
 800fa72:	bf00      	nop
 800fa74:	bf00      	nop
 800fa76:	e7fd      	b.n	800fa74 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa78:	f001 fa04 	bl	8010e84 <xTaskGetSchedulerState>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d102      	bne.n	800fa88 <xQueueSemaphoreTake+0x6c>
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d101      	bne.n	800fa8c <xQueueSemaphoreTake+0x70>
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e000      	b.n	800fa8e <xQueueSemaphoreTake+0x72>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d10d      	bne.n	800faae <xQueueSemaphoreTake+0x92>
	__asm volatile
 800fa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa96:	b672      	cpsid	i
 800fa98:	f383 8811 	msr	BASEPRI, r3
 800fa9c:	f3bf 8f6f 	isb	sy
 800faa0:	f3bf 8f4f 	dsb	sy
 800faa4:	b662      	cpsie	i
 800faa6:	61bb      	str	r3, [r7, #24]
}
 800faa8:	bf00      	nop
 800faaa:	bf00      	nop
 800faac:	e7fd      	b.n	800faaa <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800faae:	f002 f95d 	bl	8011d6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fab6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d024      	beq.n	800fb08 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac0:	1e5a      	subs	r2, r3, #1
 800fac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fac4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d104      	bne.n	800fad8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800face:	f001 fb5b 	bl	8011188 <pvTaskIncrementMutexHeldCount>
 800fad2:	4602      	mov	r2, r0
 800fad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fad6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fada:	691b      	ldr	r3, [r3, #16]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d00f      	beq.n	800fb00 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fae2:	3310      	adds	r3, #16
 800fae4:	4618      	mov	r0, r3
 800fae6:	f000 ffef 	bl	8010ac8 <xTaskRemoveFromEventList>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	d007      	beq.n	800fb00 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800faf0:	4b55      	ldr	r3, [pc, #340]	@ (800fc48 <xQueueSemaphoreTake+0x22c>)
 800faf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800faf6:	601a      	str	r2, [r3, #0]
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb00:	f002 f96a 	bl	8011dd8 <vPortExitCritical>
				return pdPASS;
 800fb04:	2301      	movs	r3, #1
 800fb06:	e09a      	b.n	800fc3e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d114      	bne.n	800fb38 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00d      	beq.n	800fb30 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800fb14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb18:	b672      	cpsid	i
 800fb1a:	f383 8811 	msr	BASEPRI, r3
 800fb1e:	f3bf 8f6f 	isb	sy
 800fb22:	f3bf 8f4f 	dsb	sy
 800fb26:	b662      	cpsie	i
 800fb28:	617b      	str	r3, [r7, #20]
}
 800fb2a:	bf00      	nop
 800fb2c:	bf00      	nop
 800fb2e:	e7fd      	b.n	800fb2c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fb30:	f002 f952 	bl	8011dd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb34:	2300      	movs	r3, #0
 800fb36:	e082      	b.n	800fc3e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d106      	bne.n	800fb4c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb3e:	f107 030c 	add.w	r3, r7, #12
 800fb42:	4618      	mov	r0, r3
 800fb44:	f001 f826 	bl	8010b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb4c:	f002 f944 	bl	8011dd8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb50:	f000 fd4c 	bl	80105ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb54:	f002 f90a 	bl	8011d6c <vPortEnterCritical>
 800fb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fb5e:	b25b      	sxtb	r3, r3
 800fb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb64:	d103      	bne.n	800fb6e <xQueueSemaphoreTake+0x152>
 800fb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb68:	2200      	movs	r2, #0
 800fb6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb74:	b25b      	sxtb	r3, r3
 800fb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb7a:	d103      	bne.n	800fb84 <xQueueSemaphoreTake+0x168>
 800fb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb84:	f002 f928 	bl	8011dd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb88:	463a      	mov	r2, r7
 800fb8a:	f107 030c 	add.w	r3, r7, #12
 800fb8e:	4611      	mov	r1, r2
 800fb90:	4618      	mov	r0, r3
 800fb92:	f001 f815 	bl	8010bc0 <xTaskCheckForTimeOut>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d132      	bne.n	800fc02 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb9e:	f000 f9fd 	bl	800ff9c <prvIsQueueEmpty>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d026      	beq.n	800fbf6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d109      	bne.n	800fbc4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800fbb0:	f002 f8dc 	bl	8011d6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbb6:	689b      	ldr	r3, [r3, #8]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f001 f981 	bl	8010ec0 <xTaskPriorityInherit>
 800fbbe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fbc0:	f002 f90a 	bl	8011dd8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fbc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc6:	3324      	adds	r3, #36	@ 0x24
 800fbc8:	683a      	ldr	r2, [r7, #0]
 800fbca:	4611      	mov	r1, r2
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f000 ff25 	bl	8010a1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fbd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbd4:	f000 f990 	bl	800fef8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fbd8:	f000 fd16 	bl	8010608 <xTaskResumeAll>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f47f af65 	bne.w	800faae <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800fbe4:	4b18      	ldr	r3, [pc, #96]	@ (800fc48 <xQueueSemaphoreTake+0x22c>)
 800fbe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbea:	601a      	str	r2, [r3, #0]
 800fbec:	f3bf 8f4f 	dsb	sy
 800fbf0:	f3bf 8f6f 	isb	sy
 800fbf4:	e75b      	b.n	800faae <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fbf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbf8:	f000 f97e 	bl	800fef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbfc:	f000 fd04 	bl	8010608 <xTaskResumeAll>
 800fc00:	e755      	b.n	800faae <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fc02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc04:	f000 f978 	bl	800fef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc08:	f000 fcfe 	bl	8010608 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc0e:	f000 f9c5 	bl	800ff9c <prvIsQueueEmpty>
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	f43f af4a 	beq.w	800faae <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00d      	beq.n	800fc3c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800fc20:	f002 f8a4 	bl	8011d6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fc24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc26:	f000 f8bf 	bl	800fda8 <prvGetDisinheritPriorityAfterTimeout>
 800fc2a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fc32:	4618      	mov	r0, r3
 800fc34:	f001 fa20 	bl	8011078 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fc38:	f002 f8ce 	bl	8011dd8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3738      	adds	r7, #56	@ 0x38
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	e000ed04 	.word	0xe000ed04

0800fc4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b08e      	sub	sp, #56	@ 0x38
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d10d      	bne.n	800fc7e <xQueueReceiveFromISR+0x32>
	__asm volatile
 800fc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc66:	b672      	cpsid	i
 800fc68:	f383 8811 	msr	BASEPRI, r3
 800fc6c:	f3bf 8f6f 	isb	sy
 800fc70:	f3bf 8f4f 	dsb	sy
 800fc74:	b662      	cpsie	i
 800fc76:	623b      	str	r3, [r7, #32]
}
 800fc78:	bf00      	nop
 800fc7a:	bf00      	nop
 800fc7c:	e7fd      	b.n	800fc7a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d103      	bne.n	800fc8c <xQueueReceiveFromISR+0x40>
 800fc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d101      	bne.n	800fc90 <xQueueReceiveFromISR+0x44>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	e000      	b.n	800fc92 <xQueueReceiveFromISR+0x46>
 800fc90:	2300      	movs	r3, #0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d10d      	bne.n	800fcb2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800fc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc9a:	b672      	cpsid	i
 800fc9c:	f383 8811 	msr	BASEPRI, r3
 800fca0:	f3bf 8f6f 	isb	sy
 800fca4:	f3bf 8f4f 	dsb	sy
 800fca8:	b662      	cpsie	i
 800fcaa:	61fb      	str	r3, [r7, #28]
}
 800fcac:	bf00      	nop
 800fcae:	bf00      	nop
 800fcb0:	e7fd      	b.n	800fcae <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcb2:	f002 f943 	bl	8011f3c <vPortValidateInterruptPriority>
	__asm volatile
 800fcb6:	f3ef 8211 	mrs	r2, BASEPRI
 800fcba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcbe:	b672      	cpsid	i
 800fcc0:	f383 8811 	msr	BASEPRI, r3
 800fcc4:	f3bf 8f6f 	isb	sy
 800fcc8:	f3bf 8f4f 	dsb	sy
 800fccc:	b662      	cpsie	i
 800fcce:	61ba      	str	r2, [r7, #24]
 800fcd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fcd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fcd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d02f      	beq.n	800fd42 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fce4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fcec:	68b9      	ldr	r1, [r7, #8]
 800fcee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fcf0:	f000 f8dc 	bl	800feac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fcf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcf6:	1e5a      	subs	r2, r3, #1
 800fcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcfa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fcfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd04:	d112      	bne.n	800fd2c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd08:	691b      	ldr	r3, [r3, #16]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d016      	beq.n	800fd3c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd10:	3310      	adds	r3, #16
 800fd12:	4618      	mov	r0, r3
 800fd14:	f000 fed8 	bl	8010ac8 <xTaskRemoveFromEventList>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d00e      	beq.n	800fd3c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d00b      	beq.n	800fd3c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2201      	movs	r2, #1
 800fd28:	601a      	str	r2, [r3, #0]
 800fd2a:	e007      	b.n	800fd3c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd30:	3301      	adds	r3, #1
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	b25a      	sxtb	r2, r3
 800fd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd40:	e001      	b.n	800fd46 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd48:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	f383 8811 	msr	BASEPRI, r3
}
 800fd50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3738      	adds	r7, #56	@ 0x38
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b084      	sub	sp, #16
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d10d      	bne.n	800fd8a <vQueueDelete+0x2e>
	__asm volatile
 800fd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd72:	b672      	cpsid	i
 800fd74:	f383 8811 	msr	BASEPRI, r3
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	b662      	cpsie	i
 800fd82:	60bb      	str	r3, [r7, #8]
}
 800fd84:	bf00      	nop
 800fd86:	bf00      	nop
 800fd88:	e7fd      	b.n	800fd86 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	f000 f95e 	bl	801004c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d102      	bne.n	800fda0 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800fd9a:	68f8      	ldr	r0, [r7, #12]
 800fd9c:	f002 f9e2 	bl	8012164 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fda0:	bf00      	nop
 800fda2:	3710      	adds	r7, #16
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fda8:	b480      	push	{r7}
 800fdaa:	b085      	sub	sp, #20
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d006      	beq.n	800fdc6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800fdc2:	60fb      	str	r3, [r7, #12]
 800fdc4:	e001      	b.n	800fdca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fdca:	68fb      	ldr	r3, [r7, #12]
	}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3714      	adds	r7, #20
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b086      	sub	sp, #24
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fde4:	2300      	movs	r3, #0
 800fde6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d10d      	bne.n	800fe12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d14d      	bne.n	800fe9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	4618      	mov	r0, r3
 800fe04:	f001 f8c4 	bl	8010f90 <xTaskPriorityDisinherit>
 800fe08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	609a      	str	r2, [r3, #8]
 800fe10:	e043      	b.n	800fe9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d119      	bne.n	800fe4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	6858      	ldr	r0, [r3, #4]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe20:	461a      	mov	r2, r3
 800fe22:	68b9      	ldr	r1, [r7, #8]
 800fe24:	f00e f88f 	bl	801df46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	685a      	ldr	r2, [r3, #4]
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe30:	441a      	add	r2, r3
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	685a      	ldr	r2, [r3, #4]
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	689b      	ldr	r3, [r3, #8]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d32b      	bcc.n	800fe9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681a      	ldr	r2, [r3, #0]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	605a      	str	r2, [r3, #4]
 800fe4a:	e026      	b.n	800fe9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	68d8      	ldr	r0, [r3, #12]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe54:	461a      	mov	r2, r3
 800fe56:	68b9      	ldr	r1, [r7, #8]
 800fe58:	f00e f875 	bl	801df46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	68da      	ldr	r2, [r3, #12]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe64:	425b      	negs	r3, r3
 800fe66:	441a      	add	r2, r3
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	68da      	ldr	r2, [r3, #12]
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d207      	bcs.n	800fe88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	689a      	ldr	r2, [r3, #8]
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe80:	425b      	negs	r3, r3
 800fe82:	441a      	add	r2, r3
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	d105      	bne.n	800fe9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d002      	beq.n	800fe9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	3b01      	subs	r3, #1
 800fe98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	1c5a      	adds	r2, r3, #1
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fea2:	697b      	ldr	r3, [r7, #20]
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3718      	adds	r7, #24
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feba:	2b00      	cmp	r3, #0
 800febc:	d018      	beq.n	800fef0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	68da      	ldr	r2, [r3, #12]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fec6:	441a      	add	r2, r3
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	68da      	ldr	r2, [r3, #12]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d303      	bcc.n	800fee0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	68d9      	ldr	r1, [r3, #12]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fee8:	461a      	mov	r2, r3
 800feea:	6838      	ldr	r0, [r7, #0]
 800feec:	f00e f82b 	bl	801df46 <memcpy>
	}
}
 800fef0:	bf00      	nop
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ff00:	f001 ff34 	bl	8011d6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ff0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff0c:	e011      	b.n	800ff32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d012      	beq.n	800ff3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	3324      	adds	r3, #36	@ 0x24
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f000 fdd4 	bl	8010ac8 <xTaskRemoveFromEventList>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d001      	beq.n	800ff2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ff26:	f000 feb3 	bl	8010c90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ff2a:	7bfb      	ldrb	r3, [r7, #15]
 800ff2c:	3b01      	subs	r3, #1
 800ff2e:	b2db      	uxtb	r3, r3
 800ff30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	dce9      	bgt.n	800ff0e <prvUnlockQueue+0x16>
 800ff3a:	e000      	b.n	800ff3e <prvUnlockQueue+0x46>
					break;
 800ff3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	22ff      	movs	r2, #255	@ 0xff
 800ff42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ff46:	f001 ff47 	bl	8011dd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ff4a:	f001 ff0f 	bl	8011d6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff56:	e011      	b.n	800ff7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	691b      	ldr	r3, [r3, #16]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d012      	beq.n	800ff86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	3310      	adds	r3, #16
 800ff64:	4618      	mov	r0, r3
 800ff66:	f000 fdaf 	bl	8010ac8 <xTaskRemoveFromEventList>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d001      	beq.n	800ff74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ff70:	f000 fe8e 	bl	8010c90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ff74:	7bbb      	ldrb	r3, [r7, #14]
 800ff76:	3b01      	subs	r3, #1
 800ff78:	b2db      	uxtb	r3, r3
 800ff7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	dce9      	bgt.n	800ff58 <prvUnlockQueue+0x60>
 800ff84:	e000      	b.n	800ff88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ff86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	22ff      	movs	r2, #255	@ 0xff
 800ff8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ff90:	f001 ff22 	bl	8011dd8 <vPortExitCritical>
}
 800ff94:	bf00      	nop
 800ff96:	3710      	adds	r7, #16
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}

0800ff9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ffa4:	f001 fee2 	bl	8011d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d102      	bne.n	800ffb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	60fb      	str	r3, [r7, #12]
 800ffb4:	e001      	b.n	800ffba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ffba:	f001 ff0d 	bl	8011dd8 <vPortExitCritical>

	return xReturn;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3710      	adds	r7, #16
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ffd0:	f001 fecc 	bl	8011d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d102      	bne.n	800ffe6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	60fb      	str	r3, [r7, #12]
 800ffe4:	e001      	b.n	800ffea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ffea:	f001 fef5 	bl	8011dd8 <vPortExitCritical>

	return xReturn;
 800ffee:	68fb      	ldr	r3, [r7, #12]
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3710      	adds	r7, #16
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fff8:	b480      	push	{r7}
 800fffa:	b085      	sub	sp, #20
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010002:	2300      	movs	r3, #0
 8010004:	60fb      	str	r3, [r7, #12]
 8010006:	e014      	b.n	8010032 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010008:	4a0f      	ldr	r2, [pc, #60]	@ (8010048 <vQueueAddToRegistry+0x50>)
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d10b      	bne.n	801002c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010014:	490c      	ldr	r1, [pc, #48]	@ (8010048 <vQueueAddToRegistry+0x50>)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	683a      	ldr	r2, [r7, #0]
 801001a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801001e:	4a0a      	ldr	r2, [pc, #40]	@ (8010048 <vQueueAddToRegistry+0x50>)
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	00db      	lsls	r3, r3, #3
 8010024:	4413      	add	r3, r2
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801002a:	e006      	b.n	801003a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	3301      	adds	r3, #1
 8010030:	60fb      	str	r3, [r7, #12]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2b07      	cmp	r3, #7
 8010036:	d9e7      	bls.n	8010008 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010038:	bf00      	nop
 801003a:	bf00      	nop
 801003c:	3714      	adds	r7, #20
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr
 8010046:	bf00      	nop
 8010048:	2000aeec 	.word	0x2000aeec

0801004c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801004c:	b480      	push	{r7}
 801004e:	b085      	sub	sp, #20
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010054:	2300      	movs	r3, #0
 8010056:	60fb      	str	r3, [r7, #12]
 8010058:	e016      	b.n	8010088 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801005a:	4a10      	ldr	r2, [pc, #64]	@ (801009c <vQueueUnregisterQueue+0x50>)
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	00db      	lsls	r3, r3, #3
 8010060:	4413      	add	r3, r2
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	429a      	cmp	r2, r3
 8010068:	d10b      	bne.n	8010082 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801006a:	4a0c      	ldr	r2, [pc, #48]	@ (801009c <vQueueUnregisterQueue+0x50>)
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2100      	movs	r1, #0
 8010070:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010074:	4a09      	ldr	r2, [pc, #36]	@ (801009c <vQueueUnregisterQueue+0x50>)
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	00db      	lsls	r3, r3, #3
 801007a:	4413      	add	r3, r2
 801007c:	2200      	movs	r2, #0
 801007e:	605a      	str	r2, [r3, #4]
				break;
 8010080:	e006      	b.n	8010090 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	3301      	adds	r3, #1
 8010086:	60fb      	str	r3, [r7, #12]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2b07      	cmp	r3, #7
 801008c:	d9e5      	bls.n	801005a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801008e:	bf00      	nop
 8010090:	bf00      	nop
 8010092:	3714      	adds	r7, #20
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr
 801009c:	2000aeec 	.word	0x2000aeec

080100a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b086      	sub	sp, #24
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80100b0:	f001 fe5c 	bl	8011d6c <vPortEnterCritical>
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80100ba:	b25b      	sxtb	r3, r3
 80100bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100c0:	d103      	bne.n	80100ca <vQueueWaitForMessageRestricted+0x2a>
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	2200      	movs	r2, #0
 80100c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80100d0:	b25b      	sxtb	r3, r3
 80100d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d6:	d103      	bne.n	80100e0 <vQueueWaitForMessageRestricted+0x40>
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	2200      	movs	r2, #0
 80100dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80100e0:	f001 fe7a 	bl	8011dd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d106      	bne.n	80100fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	3324      	adds	r3, #36	@ 0x24
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	68b9      	ldr	r1, [r7, #8]
 80100f4:	4618      	mov	r0, r3
 80100f6:	f000 fcb9 	bl	8010a6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80100fa:	6978      	ldr	r0, [r7, #20]
 80100fc:	f7ff fefc 	bl	800fef8 <prvUnlockQueue>
	}
 8010100:	bf00      	nop
 8010102:	3718      	adds	r7, #24
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010108:	b580      	push	{r7, lr}
 801010a:	b08e      	sub	sp, #56	@ 0x38
 801010c:	af04      	add	r7, sp, #16
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	607a      	str	r2, [r7, #4]
 8010114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010118:	2b00      	cmp	r3, #0
 801011a:	d10d      	bne.n	8010138 <xTaskCreateStatic+0x30>
	__asm volatile
 801011c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010120:	b672      	cpsid	i
 8010122:	f383 8811 	msr	BASEPRI, r3
 8010126:	f3bf 8f6f 	isb	sy
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	b662      	cpsie	i
 8010130:	623b      	str	r3, [r7, #32]
}
 8010132:	bf00      	nop
 8010134:	bf00      	nop
 8010136:	e7fd      	b.n	8010134 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013a:	2b00      	cmp	r3, #0
 801013c:	d10d      	bne.n	801015a <xTaskCreateStatic+0x52>
	__asm volatile
 801013e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010142:	b672      	cpsid	i
 8010144:	f383 8811 	msr	BASEPRI, r3
 8010148:	f3bf 8f6f 	isb	sy
 801014c:	f3bf 8f4f 	dsb	sy
 8010150:	b662      	cpsie	i
 8010152:	61fb      	str	r3, [r7, #28]
}
 8010154:	bf00      	nop
 8010156:	bf00      	nop
 8010158:	e7fd      	b.n	8010156 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801015a:	23a8      	movs	r3, #168	@ 0xa8
 801015c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	2ba8      	cmp	r3, #168	@ 0xa8
 8010162:	d00d      	beq.n	8010180 <xTaskCreateStatic+0x78>
	__asm volatile
 8010164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010168:	b672      	cpsid	i
 801016a:	f383 8811 	msr	BASEPRI, r3
 801016e:	f3bf 8f6f 	isb	sy
 8010172:	f3bf 8f4f 	dsb	sy
 8010176:	b662      	cpsie	i
 8010178:	61bb      	str	r3, [r7, #24]
}
 801017a:	bf00      	nop
 801017c:	bf00      	nop
 801017e:	e7fd      	b.n	801017c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010180:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010184:	2b00      	cmp	r3, #0
 8010186:	d01e      	beq.n	80101c6 <xTaskCreateStatic+0xbe>
 8010188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801018a:	2b00      	cmp	r3, #0
 801018c:	d01b      	beq.n	80101c6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801018e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010190:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010194:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010196:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801019a:	2202      	movs	r2, #2
 801019c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80101a0:	2300      	movs	r3, #0
 80101a2:	9303      	str	r3, [sp, #12]
 80101a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a6:	9302      	str	r3, [sp, #8]
 80101a8:	f107 0314 	add.w	r3, r7, #20
 80101ac:	9301      	str	r3, [sp, #4]
 80101ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101b0:	9300      	str	r3, [sp, #0]
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	68b9      	ldr	r1, [r7, #8]
 80101b8:	68f8      	ldr	r0, [r7, #12]
 80101ba:	f000 f851 	bl	8010260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80101c0:	f000 f8f8 	bl	80103b4 <prvAddNewTaskToReadyList>
 80101c4:	e001      	b.n	80101ca <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80101c6:	2300      	movs	r3, #0
 80101c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80101ca:	697b      	ldr	r3, [r7, #20]
	}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3728      	adds	r7, #40	@ 0x28
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b08c      	sub	sp, #48	@ 0x30
 80101d8:	af04      	add	r7, sp, #16
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	603b      	str	r3, [r7, #0]
 80101e0:	4613      	mov	r3, r2
 80101e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80101e4:	88fb      	ldrh	r3, [r7, #6]
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	4618      	mov	r0, r3
 80101ea:	f001 feed 	bl	8011fc8 <pvPortMalloc>
 80101ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00e      	beq.n	8010214 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80101f6:	20a8      	movs	r0, #168	@ 0xa8
 80101f8:	f001 fee6 	bl	8011fc8 <pvPortMalloc>
 80101fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d003      	beq.n	801020c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	697a      	ldr	r2, [r7, #20]
 8010208:	631a      	str	r2, [r3, #48]	@ 0x30
 801020a:	e005      	b.n	8010218 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801020c:	6978      	ldr	r0, [r7, #20]
 801020e:	f001 ffa9 	bl	8012164 <vPortFree>
 8010212:	e001      	b.n	8010218 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010214:	2300      	movs	r3, #0
 8010216:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d017      	beq.n	801024e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	2200      	movs	r2, #0
 8010222:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010226:	88fa      	ldrh	r2, [r7, #6]
 8010228:	2300      	movs	r3, #0
 801022a:	9303      	str	r3, [sp, #12]
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	9302      	str	r3, [sp, #8]
 8010230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010232:	9301      	str	r3, [sp, #4]
 8010234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010236:	9300      	str	r3, [sp, #0]
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	68b9      	ldr	r1, [r7, #8]
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f000 f80f 	bl	8010260 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010242:	69f8      	ldr	r0, [r7, #28]
 8010244:	f000 f8b6 	bl	80103b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010248:	2301      	movs	r3, #1
 801024a:	61bb      	str	r3, [r7, #24]
 801024c:	e002      	b.n	8010254 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801024e:	f04f 33ff 	mov.w	r3, #4294967295
 8010252:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010254:	69bb      	ldr	r3, [r7, #24]
	}
 8010256:	4618      	mov	r0, r3
 8010258:	3720      	adds	r7, #32
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
	...

08010260 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b088      	sub	sp, #32
 8010264:	af00      	add	r7, sp, #0
 8010266:	60f8      	str	r0, [r7, #12]
 8010268:	60b9      	str	r1, [r7, #8]
 801026a:	607a      	str	r2, [r7, #4]
 801026c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801026e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010270:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	009b      	lsls	r3, r3, #2
 8010276:	461a      	mov	r2, r3
 8010278:	21a5      	movs	r1, #165	@ 0xa5
 801027a:	f00d fd90 	bl	801dd9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801027e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010282:	6879      	ldr	r1, [r7, #4]
 8010284:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010288:	440b      	add	r3, r1
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	4413      	add	r3, r2
 801028e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010290:	69bb      	ldr	r3, [r7, #24]
 8010292:	f023 0307 	bic.w	r3, r3, #7
 8010296:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010298:	69bb      	ldr	r3, [r7, #24]
 801029a:	f003 0307 	and.w	r3, r3, #7
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d00d      	beq.n	80102be <prvInitialiseNewTask+0x5e>
	__asm volatile
 80102a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102a6:	b672      	cpsid	i
 80102a8:	f383 8811 	msr	BASEPRI, r3
 80102ac:	f3bf 8f6f 	isb	sy
 80102b0:	f3bf 8f4f 	dsb	sy
 80102b4:	b662      	cpsie	i
 80102b6:	617b      	str	r3, [r7, #20]
}
 80102b8:	bf00      	nop
 80102ba:	bf00      	nop
 80102bc:	e7fd      	b.n	80102ba <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d01f      	beq.n	8010304 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102c4:	2300      	movs	r3, #0
 80102c6:	61fb      	str	r3, [r7, #28]
 80102c8:	e012      	b.n	80102f0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80102ca:	68ba      	ldr	r2, [r7, #8]
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	4413      	add	r3, r2
 80102d0:	7819      	ldrb	r1, [r3, #0]
 80102d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	4413      	add	r3, r2
 80102d8:	3334      	adds	r3, #52	@ 0x34
 80102da:	460a      	mov	r2, r1
 80102dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80102de:	68ba      	ldr	r2, [r7, #8]
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	4413      	add	r3, r2
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d006      	beq.n	80102f8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	3301      	adds	r3, #1
 80102ee:	61fb      	str	r3, [r7, #28]
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	2b0f      	cmp	r3, #15
 80102f4:	d9e9      	bls.n	80102ca <prvInitialiseNewTask+0x6a>
 80102f6:	e000      	b.n	80102fa <prvInitialiseNewTask+0x9a>
			{
				break;
 80102f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80102fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102fc:	2200      	movs	r2, #0
 80102fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010302:	e003      	b.n	801030c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010306:	2200      	movs	r2, #0
 8010308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801030c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801030e:	2b37      	cmp	r3, #55	@ 0x37
 8010310:	d901      	bls.n	8010316 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010312:	2337      	movs	r3, #55	@ 0x37
 8010314:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010318:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801031a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801031c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801031e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010320:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010324:	2200      	movs	r2, #0
 8010326:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801032a:	3304      	adds	r3, #4
 801032c:	4618      	mov	r0, r3
 801032e:	f7fe fd27 	bl	800ed80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010334:	3318      	adds	r3, #24
 8010336:	4618      	mov	r0, r3
 8010338:	f7fe fd22 	bl	800ed80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801033c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801033e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010340:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010344:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801034a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801034c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801034e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010350:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010354:	2200      	movs	r2, #0
 8010356:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801035a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801035c:	2200      	movs	r2, #0
 801035e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010364:	3354      	adds	r3, #84	@ 0x54
 8010366:	224c      	movs	r2, #76	@ 0x4c
 8010368:	2100      	movs	r1, #0
 801036a:	4618      	mov	r0, r3
 801036c:	f00d fd17 	bl	801dd9e <memset>
 8010370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010372:	4a0d      	ldr	r2, [pc, #52]	@ (80103a8 <prvInitialiseNewTask+0x148>)
 8010374:	659a      	str	r2, [r3, #88]	@ 0x58
 8010376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010378:	4a0c      	ldr	r2, [pc, #48]	@ (80103ac <prvInitialiseNewTask+0x14c>)
 801037a:	65da      	str	r2, [r3, #92]	@ 0x5c
 801037c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801037e:	4a0c      	ldr	r2, [pc, #48]	@ (80103b0 <prvInitialiseNewTask+0x150>)
 8010380:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010382:	683a      	ldr	r2, [r7, #0]
 8010384:	68f9      	ldr	r1, [r7, #12]
 8010386:	69b8      	ldr	r0, [r7, #24]
 8010388:	f001 fbe2 	bl	8011b50 <pxPortInitialiseStack>
 801038c:	4602      	mov	r2, r0
 801038e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801039c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801039e:	bf00      	nop
 80103a0:	3720      	adds	r7, #32
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	200278e8 	.word	0x200278e8
 80103ac:	20027950 	.word	0x20027950
 80103b0:	200279b8 	.word	0x200279b8

080103b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80103bc:	f001 fcd6 	bl	8011d6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80103c0:	4b2d      	ldr	r3, [pc, #180]	@ (8010478 <prvAddNewTaskToReadyList+0xc4>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	3301      	adds	r3, #1
 80103c6:	4a2c      	ldr	r2, [pc, #176]	@ (8010478 <prvAddNewTaskToReadyList+0xc4>)
 80103c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80103ca:	4b2c      	ldr	r3, [pc, #176]	@ (801047c <prvAddNewTaskToReadyList+0xc8>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d109      	bne.n	80103e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80103d2:	4a2a      	ldr	r2, [pc, #168]	@ (801047c <prvAddNewTaskToReadyList+0xc8>)
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80103d8:	4b27      	ldr	r3, [pc, #156]	@ (8010478 <prvAddNewTaskToReadyList+0xc4>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d110      	bne.n	8010402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80103e0:	f000 fc7a 	bl	8010cd8 <prvInitialiseTaskLists>
 80103e4:	e00d      	b.n	8010402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80103e6:	4b26      	ldr	r3, [pc, #152]	@ (8010480 <prvAddNewTaskToReadyList+0xcc>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d109      	bne.n	8010402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80103ee:	4b23      	ldr	r3, [pc, #140]	@ (801047c <prvAddNewTaskToReadyList+0xc8>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d802      	bhi.n	8010402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80103fc:	4a1f      	ldr	r2, [pc, #124]	@ (801047c <prvAddNewTaskToReadyList+0xc8>)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010402:	4b20      	ldr	r3, [pc, #128]	@ (8010484 <prvAddNewTaskToReadyList+0xd0>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	3301      	adds	r3, #1
 8010408:	4a1e      	ldr	r2, [pc, #120]	@ (8010484 <prvAddNewTaskToReadyList+0xd0>)
 801040a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801040c:	4b1d      	ldr	r3, [pc, #116]	@ (8010484 <prvAddNewTaskToReadyList+0xd0>)
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010418:	4b1b      	ldr	r3, [pc, #108]	@ (8010488 <prvAddNewTaskToReadyList+0xd4>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	429a      	cmp	r2, r3
 801041e:	d903      	bls.n	8010428 <prvAddNewTaskToReadyList+0x74>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010424:	4a18      	ldr	r2, [pc, #96]	@ (8010488 <prvAddNewTaskToReadyList+0xd4>)
 8010426:	6013      	str	r3, [r2, #0]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801042c:	4613      	mov	r3, r2
 801042e:	009b      	lsls	r3, r3, #2
 8010430:	4413      	add	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	4a15      	ldr	r2, [pc, #84]	@ (801048c <prvAddNewTaskToReadyList+0xd8>)
 8010436:	441a      	add	r2, r3
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	3304      	adds	r3, #4
 801043c:	4619      	mov	r1, r3
 801043e:	4610      	mov	r0, r2
 8010440:	f7fe fcab 	bl	800ed9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010444:	f001 fcc8 	bl	8011dd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010448:	4b0d      	ldr	r3, [pc, #52]	@ (8010480 <prvAddNewTaskToReadyList+0xcc>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00e      	beq.n	801046e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010450:	4b0a      	ldr	r3, [pc, #40]	@ (801047c <prvAddNewTaskToReadyList+0xc8>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801045a:	429a      	cmp	r2, r3
 801045c:	d207      	bcs.n	801046e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801045e:	4b0c      	ldr	r3, [pc, #48]	@ (8010490 <prvAddNewTaskToReadyList+0xdc>)
 8010460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010464:	601a      	str	r2, [r3, #0]
 8010466:	f3bf 8f4f 	dsb	sy
 801046a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801046e:	bf00      	nop
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	2000b400 	.word	0x2000b400
 801047c:	2000af2c 	.word	0x2000af2c
 8010480:	2000b40c 	.word	0x2000b40c
 8010484:	2000b41c 	.word	0x2000b41c
 8010488:	2000b408 	.word	0x2000b408
 801048c:	2000af30 	.word	0x2000af30
 8010490:	e000ed04 	.word	0xe000ed04

08010494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010494:	b580      	push	{r7, lr}
 8010496:	b084      	sub	sp, #16
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801049c:	2300      	movs	r3, #0
 801049e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d01a      	beq.n	80104dc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80104a6:	4b15      	ldr	r3, [pc, #84]	@ (80104fc <vTaskDelay+0x68>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d00d      	beq.n	80104ca <vTaskDelay+0x36>
	__asm volatile
 80104ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104b2:	b672      	cpsid	i
 80104b4:	f383 8811 	msr	BASEPRI, r3
 80104b8:	f3bf 8f6f 	isb	sy
 80104bc:	f3bf 8f4f 	dsb	sy
 80104c0:	b662      	cpsie	i
 80104c2:	60bb      	str	r3, [r7, #8]
}
 80104c4:	bf00      	nop
 80104c6:	bf00      	nop
 80104c8:	e7fd      	b.n	80104c6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80104ca:	f000 f88f 	bl	80105ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80104ce:	2100      	movs	r1, #0
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f000 ff81 	bl	80113d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80104d6:	f000 f897 	bl	8010608 <xTaskResumeAll>
 80104da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d107      	bne.n	80104f2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80104e2:	4b07      	ldr	r3, [pc, #28]	@ (8010500 <vTaskDelay+0x6c>)
 80104e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104e8:	601a      	str	r2, [r3, #0]
 80104ea:	f3bf 8f4f 	dsb	sy
 80104ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104f2:	bf00      	nop
 80104f4:	3710      	adds	r7, #16
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	2000b428 	.word	0x2000b428
 8010500:	e000ed04 	.word	0xe000ed04

08010504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b08a      	sub	sp, #40	@ 0x28
 8010508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801050a:	2300      	movs	r3, #0
 801050c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801050e:	2300      	movs	r3, #0
 8010510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010512:	463a      	mov	r2, r7
 8010514:	1d39      	adds	r1, r7, #4
 8010516:	f107 0308 	add.w	r3, r7, #8
 801051a:	4618      	mov	r0, r3
 801051c:	f7fe fbdc 	bl	800ecd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010520:	6839      	ldr	r1, [r7, #0]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	68ba      	ldr	r2, [r7, #8]
 8010526:	9202      	str	r2, [sp, #8]
 8010528:	9301      	str	r3, [sp, #4]
 801052a:	2300      	movs	r3, #0
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	2300      	movs	r3, #0
 8010530:	460a      	mov	r2, r1
 8010532:	4926      	ldr	r1, [pc, #152]	@ (80105cc <vTaskStartScheduler+0xc8>)
 8010534:	4826      	ldr	r0, [pc, #152]	@ (80105d0 <vTaskStartScheduler+0xcc>)
 8010536:	f7ff fde7 	bl	8010108 <xTaskCreateStatic>
 801053a:	4603      	mov	r3, r0
 801053c:	4a25      	ldr	r2, [pc, #148]	@ (80105d4 <vTaskStartScheduler+0xd0>)
 801053e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010540:	4b24      	ldr	r3, [pc, #144]	@ (80105d4 <vTaskStartScheduler+0xd0>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d002      	beq.n	801054e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010548:	2301      	movs	r3, #1
 801054a:	617b      	str	r3, [r7, #20]
 801054c:	e001      	b.n	8010552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801054e:	2300      	movs	r3, #0
 8010550:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	2b01      	cmp	r3, #1
 8010556:	d102      	bne.n	801055e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010558:	f000 ff92 	bl	8011480 <xTimerCreateTimerTask>
 801055c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d11d      	bne.n	80105a0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8010564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010568:	b672      	cpsid	i
 801056a:	f383 8811 	msr	BASEPRI, r3
 801056e:	f3bf 8f6f 	isb	sy
 8010572:	f3bf 8f4f 	dsb	sy
 8010576:	b662      	cpsie	i
 8010578:	613b      	str	r3, [r7, #16]
}
 801057a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801057c:	4b16      	ldr	r3, [pc, #88]	@ (80105d8 <vTaskStartScheduler+0xd4>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	3354      	adds	r3, #84	@ 0x54
 8010582:	4a16      	ldr	r2, [pc, #88]	@ (80105dc <vTaskStartScheduler+0xd8>)
 8010584:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010586:	4b16      	ldr	r3, [pc, #88]	@ (80105e0 <vTaskStartScheduler+0xdc>)
 8010588:	f04f 32ff 	mov.w	r2, #4294967295
 801058c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801058e:	4b15      	ldr	r3, [pc, #84]	@ (80105e4 <vTaskStartScheduler+0xe0>)
 8010590:	2201      	movs	r2, #1
 8010592:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010594:	4b14      	ldr	r3, [pc, #80]	@ (80105e8 <vTaskStartScheduler+0xe4>)
 8010596:	2200      	movs	r2, #0
 8010598:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801059a:	f001 fb69 	bl	8011c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801059e:	e011      	b.n	80105c4 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105a6:	d10d      	bne.n	80105c4 <vTaskStartScheduler+0xc0>
	__asm volatile
 80105a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105ac:	b672      	cpsid	i
 80105ae:	f383 8811 	msr	BASEPRI, r3
 80105b2:	f3bf 8f6f 	isb	sy
 80105b6:	f3bf 8f4f 	dsb	sy
 80105ba:	b662      	cpsie	i
 80105bc:	60fb      	str	r3, [r7, #12]
}
 80105be:	bf00      	nop
 80105c0:	bf00      	nop
 80105c2:	e7fd      	b.n	80105c0 <vTaskStartScheduler+0xbc>
}
 80105c4:	bf00      	nop
 80105c6:	3718      	adds	r7, #24
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}
 80105cc:	0801edc8 	.word	0x0801edc8
 80105d0:	08010ca9 	.word	0x08010ca9
 80105d4:	2000b424 	.word	0x2000b424
 80105d8:	2000af2c 	.word	0x2000af2c
 80105dc:	2000003c 	.word	0x2000003c
 80105e0:	2000b420 	.word	0x2000b420
 80105e4:	2000b40c 	.word	0x2000b40c
 80105e8:	2000b404 	.word	0x2000b404

080105ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80105ec:	b480      	push	{r7}
 80105ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80105f0:	4b04      	ldr	r3, [pc, #16]	@ (8010604 <vTaskSuspendAll+0x18>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	3301      	adds	r3, #1
 80105f6:	4a03      	ldr	r2, [pc, #12]	@ (8010604 <vTaskSuspendAll+0x18>)
 80105f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80105fa:	bf00      	nop
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr
 8010604:	2000b428 	.word	0x2000b428

08010608 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b084      	sub	sp, #16
 801060c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801060e:	2300      	movs	r3, #0
 8010610:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010612:	2300      	movs	r3, #0
 8010614:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010616:	4b43      	ldr	r3, [pc, #268]	@ (8010724 <xTaskResumeAll+0x11c>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d10d      	bne.n	801063a <xTaskResumeAll+0x32>
	__asm volatile
 801061e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010622:	b672      	cpsid	i
 8010624:	f383 8811 	msr	BASEPRI, r3
 8010628:	f3bf 8f6f 	isb	sy
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	b662      	cpsie	i
 8010632:	603b      	str	r3, [r7, #0]
}
 8010634:	bf00      	nop
 8010636:	bf00      	nop
 8010638:	e7fd      	b.n	8010636 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801063a:	f001 fb97 	bl	8011d6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801063e:	4b39      	ldr	r3, [pc, #228]	@ (8010724 <xTaskResumeAll+0x11c>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	3b01      	subs	r3, #1
 8010644:	4a37      	ldr	r2, [pc, #220]	@ (8010724 <xTaskResumeAll+0x11c>)
 8010646:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010648:	4b36      	ldr	r3, [pc, #216]	@ (8010724 <xTaskResumeAll+0x11c>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d162      	bne.n	8010716 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010650:	4b35      	ldr	r3, [pc, #212]	@ (8010728 <xTaskResumeAll+0x120>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d05e      	beq.n	8010716 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010658:	e02f      	b.n	80106ba <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801065a:	4b34      	ldr	r3, [pc, #208]	@ (801072c <xTaskResumeAll+0x124>)
 801065c:	68db      	ldr	r3, [r3, #12]
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	3318      	adds	r3, #24
 8010666:	4618      	mov	r0, r3
 8010668:	f7fe fbf4 	bl	800ee54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	3304      	adds	r3, #4
 8010670:	4618      	mov	r0, r3
 8010672:	f7fe fbef 	bl	800ee54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801067a:	4b2d      	ldr	r3, [pc, #180]	@ (8010730 <xTaskResumeAll+0x128>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	429a      	cmp	r2, r3
 8010680:	d903      	bls.n	801068a <xTaskResumeAll+0x82>
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010686:	4a2a      	ldr	r2, [pc, #168]	@ (8010730 <xTaskResumeAll+0x128>)
 8010688:	6013      	str	r3, [r2, #0]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801068e:	4613      	mov	r3, r2
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	4413      	add	r3, r2
 8010694:	009b      	lsls	r3, r3, #2
 8010696:	4a27      	ldr	r2, [pc, #156]	@ (8010734 <xTaskResumeAll+0x12c>)
 8010698:	441a      	add	r2, r3
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	3304      	adds	r3, #4
 801069e:	4619      	mov	r1, r3
 80106a0:	4610      	mov	r0, r2
 80106a2:	f7fe fb7a 	bl	800ed9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106aa:	4b23      	ldr	r3, [pc, #140]	@ (8010738 <xTaskResumeAll+0x130>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d302      	bcc.n	80106ba <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80106b4:	4b21      	ldr	r3, [pc, #132]	@ (801073c <xTaskResumeAll+0x134>)
 80106b6:	2201      	movs	r2, #1
 80106b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80106ba:	4b1c      	ldr	r3, [pc, #112]	@ (801072c <xTaskResumeAll+0x124>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d1cb      	bne.n	801065a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d001      	beq.n	80106cc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80106c8:	f000 fbac 	bl	8010e24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80106cc:	4b1c      	ldr	r3, [pc, #112]	@ (8010740 <xTaskResumeAll+0x138>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d010      	beq.n	80106fa <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80106d8:	f000 f858 	bl	801078c <xTaskIncrementTick>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d002      	beq.n	80106e8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80106e2:	4b16      	ldr	r3, [pc, #88]	@ (801073c <xTaskResumeAll+0x134>)
 80106e4:	2201      	movs	r2, #1
 80106e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	3b01      	subs	r3, #1
 80106ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d1f1      	bne.n	80106d8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80106f4:	4b12      	ldr	r3, [pc, #72]	@ (8010740 <xTaskResumeAll+0x138>)
 80106f6:	2200      	movs	r2, #0
 80106f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80106fa:	4b10      	ldr	r3, [pc, #64]	@ (801073c <xTaskResumeAll+0x134>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d009      	beq.n	8010716 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010702:	2301      	movs	r3, #1
 8010704:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010706:	4b0f      	ldr	r3, [pc, #60]	@ (8010744 <xTaskResumeAll+0x13c>)
 8010708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801070c:	601a      	str	r2, [r3, #0]
 801070e:	f3bf 8f4f 	dsb	sy
 8010712:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010716:	f001 fb5f 	bl	8011dd8 <vPortExitCritical>

	return xAlreadyYielded;
 801071a:	68bb      	ldr	r3, [r7, #8]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	2000b428 	.word	0x2000b428
 8010728:	2000b400 	.word	0x2000b400
 801072c:	2000b3c0 	.word	0x2000b3c0
 8010730:	2000b408 	.word	0x2000b408
 8010734:	2000af30 	.word	0x2000af30
 8010738:	2000af2c 	.word	0x2000af2c
 801073c:	2000b414 	.word	0x2000b414
 8010740:	2000b410 	.word	0x2000b410
 8010744:	e000ed04 	.word	0xe000ed04

08010748 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010748:	b480      	push	{r7}
 801074a:	b083      	sub	sp, #12
 801074c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801074e:	4b05      	ldr	r3, [pc, #20]	@ (8010764 <xTaskGetTickCount+0x1c>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010754:	687b      	ldr	r3, [r7, #4]
}
 8010756:	4618      	mov	r0, r3
 8010758:	370c      	adds	r7, #12
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop
 8010764:	2000b404 	.word	0x2000b404

08010768 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801076e:	f001 fbe5 	bl	8011f3c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010772:	2300      	movs	r3, #0
 8010774:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010776:	4b04      	ldr	r3, [pc, #16]	@ (8010788 <xTaskGetTickCountFromISR+0x20>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801077c:	683b      	ldr	r3, [r7, #0]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3708      	adds	r7, #8
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
 8010786:	bf00      	nop
 8010788:	2000b404 	.word	0x2000b404

0801078c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b086      	sub	sp, #24
 8010790:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010792:	2300      	movs	r3, #0
 8010794:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010796:	4b50      	ldr	r3, [pc, #320]	@ (80108d8 <xTaskIncrementTick+0x14c>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	f040 808c 	bne.w	80108b8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80107a0:	4b4e      	ldr	r3, [pc, #312]	@ (80108dc <xTaskIncrementTick+0x150>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	3301      	adds	r3, #1
 80107a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80107a8:	4a4c      	ldr	r2, [pc, #304]	@ (80108dc <xTaskIncrementTick+0x150>)
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d123      	bne.n	80107fc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80107b4:	4b4a      	ldr	r3, [pc, #296]	@ (80108e0 <xTaskIncrementTick+0x154>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00d      	beq.n	80107da <xTaskIncrementTick+0x4e>
	__asm volatile
 80107be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c2:	b672      	cpsid	i
 80107c4:	f383 8811 	msr	BASEPRI, r3
 80107c8:	f3bf 8f6f 	isb	sy
 80107cc:	f3bf 8f4f 	dsb	sy
 80107d0:	b662      	cpsie	i
 80107d2:	603b      	str	r3, [r7, #0]
}
 80107d4:	bf00      	nop
 80107d6:	bf00      	nop
 80107d8:	e7fd      	b.n	80107d6 <xTaskIncrementTick+0x4a>
 80107da:	4b41      	ldr	r3, [pc, #260]	@ (80108e0 <xTaskIncrementTick+0x154>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	60fb      	str	r3, [r7, #12]
 80107e0:	4b40      	ldr	r3, [pc, #256]	@ (80108e4 <xTaskIncrementTick+0x158>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	4a3e      	ldr	r2, [pc, #248]	@ (80108e0 <xTaskIncrementTick+0x154>)
 80107e6:	6013      	str	r3, [r2, #0]
 80107e8:	4a3e      	ldr	r2, [pc, #248]	@ (80108e4 <xTaskIncrementTick+0x158>)
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	6013      	str	r3, [r2, #0]
 80107ee:	4b3e      	ldr	r3, [pc, #248]	@ (80108e8 <xTaskIncrementTick+0x15c>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	3301      	adds	r3, #1
 80107f4:	4a3c      	ldr	r2, [pc, #240]	@ (80108e8 <xTaskIncrementTick+0x15c>)
 80107f6:	6013      	str	r3, [r2, #0]
 80107f8:	f000 fb14 	bl	8010e24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80107fc:	4b3b      	ldr	r3, [pc, #236]	@ (80108ec <xTaskIncrementTick+0x160>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	693a      	ldr	r2, [r7, #16]
 8010802:	429a      	cmp	r2, r3
 8010804:	d349      	bcc.n	801089a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010806:	4b36      	ldr	r3, [pc, #216]	@ (80108e0 <xTaskIncrementTick+0x154>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d104      	bne.n	801081a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010810:	4b36      	ldr	r3, [pc, #216]	@ (80108ec <xTaskIncrementTick+0x160>)
 8010812:	f04f 32ff 	mov.w	r2, #4294967295
 8010816:	601a      	str	r2, [r3, #0]
					break;
 8010818:	e03f      	b.n	801089a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801081a:	4b31      	ldr	r3, [pc, #196]	@ (80108e0 <xTaskIncrementTick+0x154>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	68db      	ldr	r3, [r3, #12]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801082a:	693a      	ldr	r2, [r7, #16]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	429a      	cmp	r2, r3
 8010830:	d203      	bcs.n	801083a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010832:	4a2e      	ldr	r2, [pc, #184]	@ (80108ec <xTaskIncrementTick+0x160>)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010838:	e02f      	b.n	801089a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	3304      	adds	r3, #4
 801083e:	4618      	mov	r0, r3
 8010840:	f7fe fb08 	bl	800ee54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010848:	2b00      	cmp	r3, #0
 801084a:	d004      	beq.n	8010856 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	3318      	adds	r3, #24
 8010850:	4618      	mov	r0, r3
 8010852:	f7fe faff 	bl	800ee54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801085a:	4b25      	ldr	r3, [pc, #148]	@ (80108f0 <xTaskIncrementTick+0x164>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	429a      	cmp	r2, r3
 8010860:	d903      	bls.n	801086a <xTaskIncrementTick+0xde>
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010866:	4a22      	ldr	r2, [pc, #136]	@ (80108f0 <xTaskIncrementTick+0x164>)
 8010868:	6013      	str	r3, [r2, #0]
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801086e:	4613      	mov	r3, r2
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	4413      	add	r3, r2
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4a1f      	ldr	r2, [pc, #124]	@ (80108f4 <xTaskIncrementTick+0x168>)
 8010878:	441a      	add	r2, r3
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	3304      	adds	r3, #4
 801087e:	4619      	mov	r1, r3
 8010880:	4610      	mov	r0, r2
 8010882:	f7fe fa8a 	bl	800ed9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801088a:	4b1b      	ldr	r3, [pc, #108]	@ (80108f8 <xTaskIncrementTick+0x16c>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010890:	429a      	cmp	r2, r3
 8010892:	d3b8      	bcc.n	8010806 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8010894:	2301      	movs	r3, #1
 8010896:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010898:	e7b5      	b.n	8010806 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801089a:	4b17      	ldr	r3, [pc, #92]	@ (80108f8 <xTaskIncrementTick+0x16c>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108a0:	4914      	ldr	r1, [pc, #80]	@ (80108f4 <xTaskIncrementTick+0x168>)
 80108a2:	4613      	mov	r3, r2
 80108a4:	009b      	lsls	r3, r3, #2
 80108a6:	4413      	add	r3, r2
 80108a8:	009b      	lsls	r3, r3, #2
 80108aa:	440b      	add	r3, r1
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	2b01      	cmp	r3, #1
 80108b0:	d907      	bls.n	80108c2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80108b2:	2301      	movs	r3, #1
 80108b4:	617b      	str	r3, [r7, #20]
 80108b6:	e004      	b.n	80108c2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80108b8:	4b10      	ldr	r3, [pc, #64]	@ (80108fc <xTaskIncrementTick+0x170>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	3301      	adds	r3, #1
 80108be:	4a0f      	ldr	r2, [pc, #60]	@ (80108fc <xTaskIncrementTick+0x170>)
 80108c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80108c2:	4b0f      	ldr	r3, [pc, #60]	@ (8010900 <xTaskIncrementTick+0x174>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d001      	beq.n	80108ce <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80108ca:	2301      	movs	r3, #1
 80108cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80108ce:	697b      	ldr	r3, [r7, #20]
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3718      	adds	r7, #24
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	2000b428 	.word	0x2000b428
 80108dc:	2000b404 	.word	0x2000b404
 80108e0:	2000b3b8 	.word	0x2000b3b8
 80108e4:	2000b3bc 	.word	0x2000b3bc
 80108e8:	2000b418 	.word	0x2000b418
 80108ec:	2000b420 	.word	0x2000b420
 80108f0:	2000b408 	.word	0x2000b408
 80108f4:	2000af30 	.word	0x2000af30
 80108f8:	2000af2c 	.word	0x2000af2c
 80108fc:	2000b410 	.word	0x2000b410
 8010900:	2000b414 	.word	0x2000b414

08010904 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b086      	sub	sp, #24
 8010908:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801090a:	4b3e      	ldr	r3, [pc, #248]	@ (8010a04 <vTaskSwitchContext+0x100>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d003      	beq.n	801091a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010912:	4b3d      	ldr	r3, [pc, #244]	@ (8010a08 <vTaskSwitchContext+0x104>)
 8010914:	2201      	movs	r2, #1
 8010916:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010918:	e070      	b.n	80109fc <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 801091a:	4b3b      	ldr	r3, [pc, #236]	@ (8010a08 <vTaskSwitchContext+0x104>)
 801091c:	2200      	movs	r2, #0
 801091e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010920:	4b3a      	ldr	r3, [pc, #232]	@ (8010a0c <vTaskSwitchContext+0x108>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010926:	613b      	str	r3, [r7, #16]
 8010928:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 801092c:	60fb      	str	r3, [r7, #12]
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	68fa      	ldr	r2, [r7, #12]
 8010934:	429a      	cmp	r2, r3
 8010936:	d111      	bne.n	801095c <vTaskSwitchContext+0x58>
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	3304      	adds	r3, #4
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	68fa      	ldr	r2, [r7, #12]
 8010940:	429a      	cmp	r2, r3
 8010942:	d10b      	bne.n	801095c <vTaskSwitchContext+0x58>
 8010944:	693b      	ldr	r3, [r7, #16]
 8010946:	3308      	adds	r3, #8
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	68fa      	ldr	r2, [r7, #12]
 801094c:	429a      	cmp	r2, r3
 801094e:	d105      	bne.n	801095c <vTaskSwitchContext+0x58>
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	330c      	adds	r3, #12
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	429a      	cmp	r2, r3
 801095a:	d008      	beq.n	801096e <vTaskSwitchContext+0x6a>
 801095c:	4b2b      	ldr	r3, [pc, #172]	@ (8010a0c <vTaskSwitchContext+0x108>)
 801095e:	681a      	ldr	r2, [r3, #0]
 8010960:	4b2a      	ldr	r3, [pc, #168]	@ (8010a0c <vTaskSwitchContext+0x108>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	3334      	adds	r3, #52	@ 0x34
 8010966:	4619      	mov	r1, r3
 8010968:	4610      	mov	r0, r2
 801096a:	f7f0 fadd 	bl	8000f28 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801096e:	4b28      	ldr	r3, [pc, #160]	@ (8010a10 <vTaskSwitchContext+0x10c>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	617b      	str	r3, [r7, #20]
 8010974:	e013      	b.n	801099e <vTaskSwitchContext+0x9a>
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d10d      	bne.n	8010998 <vTaskSwitchContext+0x94>
	__asm volatile
 801097c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010980:	b672      	cpsid	i
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	b662      	cpsie	i
 8010990:	607b      	str	r3, [r7, #4]
}
 8010992:	bf00      	nop
 8010994:	bf00      	nop
 8010996:	e7fd      	b.n	8010994 <vTaskSwitchContext+0x90>
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	3b01      	subs	r3, #1
 801099c:	617b      	str	r3, [r7, #20]
 801099e:	491d      	ldr	r1, [pc, #116]	@ (8010a14 <vTaskSwitchContext+0x110>)
 80109a0:	697a      	ldr	r2, [r7, #20]
 80109a2:	4613      	mov	r3, r2
 80109a4:	009b      	lsls	r3, r3, #2
 80109a6:	4413      	add	r3, r2
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	440b      	add	r3, r1
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d0e1      	beq.n	8010976 <vTaskSwitchContext+0x72>
 80109b2:	697a      	ldr	r2, [r7, #20]
 80109b4:	4613      	mov	r3, r2
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	4413      	add	r3, r2
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	4a15      	ldr	r2, [pc, #84]	@ (8010a14 <vTaskSwitchContext+0x110>)
 80109be:	4413      	add	r3, r2
 80109c0:	60bb      	str	r3, [r7, #8]
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	685a      	ldr	r2, [r3, #4]
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	605a      	str	r2, [r3, #4]
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	685a      	ldr	r2, [r3, #4]
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	3308      	adds	r3, #8
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d104      	bne.n	80109e2 <vTaskSwitchContext+0xde>
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	685a      	ldr	r2, [r3, #4]
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	605a      	str	r2, [r3, #4]
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	68db      	ldr	r3, [r3, #12]
 80109e8:	4a08      	ldr	r2, [pc, #32]	@ (8010a0c <vTaskSwitchContext+0x108>)
 80109ea:	6013      	str	r3, [r2, #0]
 80109ec:	4a08      	ldr	r2, [pc, #32]	@ (8010a10 <vTaskSwitchContext+0x10c>)
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80109f2:	4b06      	ldr	r3, [pc, #24]	@ (8010a0c <vTaskSwitchContext+0x108>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	3354      	adds	r3, #84	@ 0x54
 80109f8:	4a07      	ldr	r2, [pc, #28]	@ (8010a18 <vTaskSwitchContext+0x114>)
 80109fa:	6013      	str	r3, [r2, #0]
}
 80109fc:	bf00      	nop
 80109fe:	3718      	adds	r7, #24
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	2000b428 	.word	0x2000b428
 8010a08:	2000b414 	.word	0x2000b414
 8010a0c:	2000af2c 	.word	0x2000af2c
 8010a10:	2000b408 	.word	0x2000b408
 8010a14:	2000af30 	.word	0x2000af30
 8010a18:	2000003c 	.word	0x2000003c

08010a1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d10d      	bne.n	8010a48 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8010a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a30:	b672      	cpsid	i
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	b662      	cpsie	i
 8010a40:	60fb      	str	r3, [r7, #12]
}
 8010a42:	bf00      	nop
 8010a44:	bf00      	nop
 8010a46:	e7fd      	b.n	8010a44 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010a48:	4b07      	ldr	r3, [pc, #28]	@ (8010a68 <vTaskPlaceOnEventList+0x4c>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	3318      	adds	r3, #24
 8010a4e:	4619      	mov	r1, r3
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f7fe f9c6 	bl	800ede2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010a56:	2101      	movs	r1, #1
 8010a58:	6838      	ldr	r0, [r7, #0]
 8010a5a:	f000 fcbd 	bl	80113d8 <prvAddCurrentTaskToDelayedList>
}
 8010a5e:	bf00      	nop
 8010a60:	3710      	adds	r7, #16
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	2000af2c 	.word	0x2000af2c

08010a6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b086      	sub	sp, #24
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d10d      	bne.n	8010a9a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8010a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a82:	b672      	cpsid	i
 8010a84:	f383 8811 	msr	BASEPRI, r3
 8010a88:	f3bf 8f6f 	isb	sy
 8010a8c:	f3bf 8f4f 	dsb	sy
 8010a90:	b662      	cpsie	i
 8010a92:	617b      	str	r3, [r7, #20]
}
 8010a94:	bf00      	nop
 8010a96:	bf00      	nop
 8010a98:	e7fd      	b.n	8010a96 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8010ac4 <vTaskPlaceOnEventListRestricted+0x58>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	3318      	adds	r3, #24
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	68f8      	ldr	r0, [r7, #12]
 8010aa4:	f7fe f979 	bl	800ed9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d002      	beq.n	8010ab4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8010aae:	f04f 33ff 	mov.w	r3, #4294967295
 8010ab2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010ab4:	6879      	ldr	r1, [r7, #4]
 8010ab6:	68b8      	ldr	r0, [r7, #8]
 8010ab8:	f000 fc8e 	bl	80113d8 <prvAddCurrentTaskToDelayedList>
	}
 8010abc:	bf00      	nop
 8010abe:	3718      	adds	r7, #24
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	2000af2c 	.word	0x2000af2c

08010ac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b086      	sub	sp, #24
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	68db      	ldr	r3, [r3, #12]
 8010ad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d10d      	bne.n	8010afa <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8010ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ae2:	b672      	cpsid	i
 8010ae4:	f383 8811 	msr	BASEPRI, r3
 8010ae8:	f3bf 8f6f 	isb	sy
 8010aec:	f3bf 8f4f 	dsb	sy
 8010af0:	b662      	cpsie	i
 8010af2:	60fb      	str	r3, [r7, #12]
}
 8010af4:	bf00      	nop
 8010af6:	bf00      	nop
 8010af8:	e7fd      	b.n	8010af6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	3318      	adds	r3, #24
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7fe f9a8 	bl	800ee54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b04:	4b1d      	ldr	r3, [pc, #116]	@ (8010b7c <xTaskRemoveFromEventList+0xb4>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d11d      	bne.n	8010b48 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010b0c:	693b      	ldr	r3, [r7, #16]
 8010b0e:	3304      	adds	r3, #4
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7fe f99f 	bl	800ee54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b1a:	4b19      	ldr	r3, [pc, #100]	@ (8010b80 <xTaskRemoveFromEventList+0xb8>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d903      	bls.n	8010b2a <xTaskRemoveFromEventList+0x62>
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b26:	4a16      	ldr	r2, [pc, #88]	@ (8010b80 <xTaskRemoveFromEventList+0xb8>)
 8010b28:	6013      	str	r3, [r2, #0]
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b2e:	4613      	mov	r3, r2
 8010b30:	009b      	lsls	r3, r3, #2
 8010b32:	4413      	add	r3, r2
 8010b34:	009b      	lsls	r3, r3, #2
 8010b36:	4a13      	ldr	r2, [pc, #76]	@ (8010b84 <xTaskRemoveFromEventList+0xbc>)
 8010b38:	441a      	add	r2, r3
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	3304      	adds	r3, #4
 8010b3e:	4619      	mov	r1, r3
 8010b40:	4610      	mov	r0, r2
 8010b42:	f7fe f92a 	bl	800ed9a <vListInsertEnd>
 8010b46:	e005      	b.n	8010b54 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	3318      	adds	r3, #24
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	480e      	ldr	r0, [pc, #56]	@ (8010b88 <xTaskRemoveFromEventList+0xc0>)
 8010b50:	f7fe f923 	bl	800ed9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b58:	4b0c      	ldr	r3, [pc, #48]	@ (8010b8c <xTaskRemoveFromEventList+0xc4>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d905      	bls.n	8010b6e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010b62:	2301      	movs	r3, #1
 8010b64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010b66:	4b0a      	ldr	r3, [pc, #40]	@ (8010b90 <xTaskRemoveFromEventList+0xc8>)
 8010b68:	2201      	movs	r2, #1
 8010b6a:	601a      	str	r2, [r3, #0]
 8010b6c:	e001      	b.n	8010b72 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010b72:	697b      	ldr	r3, [r7, #20]
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3718      	adds	r7, #24
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	2000b428 	.word	0x2000b428
 8010b80:	2000b408 	.word	0x2000b408
 8010b84:	2000af30 	.word	0x2000af30
 8010b88:	2000b3c0 	.word	0x2000b3c0
 8010b8c:	2000af2c 	.word	0x2000af2c
 8010b90:	2000b414 	.word	0x2000b414

08010b94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010b9c:	4b06      	ldr	r3, [pc, #24]	@ (8010bb8 <vTaskInternalSetTimeOutState+0x24>)
 8010b9e:	681a      	ldr	r2, [r3, #0]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010ba4:	4b05      	ldr	r3, [pc, #20]	@ (8010bbc <vTaskInternalSetTimeOutState+0x28>)
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	605a      	str	r2, [r3, #4]
}
 8010bac:	bf00      	nop
 8010bae:	370c      	adds	r7, #12
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr
 8010bb8:	2000b418 	.word	0x2000b418
 8010bbc:	2000b404 	.word	0x2000b404

08010bc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b088      	sub	sp, #32
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d10d      	bne.n	8010bec <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8010bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bd4:	b672      	cpsid	i
 8010bd6:	f383 8811 	msr	BASEPRI, r3
 8010bda:	f3bf 8f6f 	isb	sy
 8010bde:	f3bf 8f4f 	dsb	sy
 8010be2:	b662      	cpsie	i
 8010be4:	613b      	str	r3, [r7, #16]
}
 8010be6:	bf00      	nop
 8010be8:	bf00      	nop
 8010bea:	e7fd      	b.n	8010be8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d10d      	bne.n	8010c0e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8010bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bf6:	b672      	cpsid	i
 8010bf8:	f383 8811 	msr	BASEPRI, r3
 8010bfc:	f3bf 8f6f 	isb	sy
 8010c00:	f3bf 8f4f 	dsb	sy
 8010c04:	b662      	cpsie	i
 8010c06:	60fb      	str	r3, [r7, #12]
}
 8010c08:	bf00      	nop
 8010c0a:	bf00      	nop
 8010c0c:	e7fd      	b.n	8010c0a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8010c0e:	f001 f8ad 	bl	8011d6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010c12:	4b1d      	ldr	r3, [pc, #116]	@ (8010c88 <xTaskCheckForTimeOut+0xc8>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	69ba      	ldr	r2, [r7, #24]
 8010c1e:	1ad3      	subs	r3, r2, r3
 8010c20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c2a:	d102      	bne.n	8010c32 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	61fb      	str	r3, [r7, #28]
 8010c30:	e023      	b.n	8010c7a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	4b15      	ldr	r3, [pc, #84]	@ (8010c8c <xTaskCheckForTimeOut+0xcc>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d007      	beq.n	8010c4e <xTaskCheckForTimeOut+0x8e>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	69ba      	ldr	r2, [r7, #24]
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d302      	bcc.n	8010c4e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	61fb      	str	r3, [r7, #28]
 8010c4c:	e015      	b.n	8010c7a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	697a      	ldr	r2, [r7, #20]
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d20b      	bcs.n	8010c70 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	1ad2      	subs	r2, r2, r3
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f7ff ff95 	bl	8010b94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	61fb      	str	r3, [r7, #28]
 8010c6e:	e004      	b.n	8010c7a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	2200      	movs	r2, #0
 8010c74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010c76:	2301      	movs	r3, #1
 8010c78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010c7a:	f001 f8ad 	bl	8011dd8 <vPortExitCritical>

	return xReturn;
 8010c7e:	69fb      	ldr	r3, [r7, #28]
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3720      	adds	r7, #32
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	2000b404 	.word	0x2000b404
 8010c8c:	2000b418 	.word	0x2000b418

08010c90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010c90:	b480      	push	{r7}
 8010c92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010c94:	4b03      	ldr	r3, [pc, #12]	@ (8010ca4 <vTaskMissedYield+0x14>)
 8010c96:	2201      	movs	r2, #1
 8010c98:	601a      	str	r2, [r3, #0]
}
 8010c9a:	bf00      	nop
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr
 8010ca4:	2000b414 	.word	0x2000b414

08010ca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010cb0:	f000 f852 	bl	8010d58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010cb4:	4b06      	ldr	r3, [pc, #24]	@ (8010cd0 <prvIdleTask+0x28>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d9f9      	bls.n	8010cb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010cbc:	4b05      	ldr	r3, [pc, #20]	@ (8010cd4 <prvIdleTask+0x2c>)
 8010cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010cc2:	601a      	str	r2, [r3, #0]
 8010cc4:	f3bf 8f4f 	dsb	sy
 8010cc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010ccc:	e7f0      	b.n	8010cb0 <prvIdleTask+0x8>
 8010cce:	bf00      	nop
 8010cd0:	2000af30 	.word	0x2000af30
 8010cd4:	e000ed04 	.word	0xe000ed04

08010cd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010cde:	2300      	movs	r3, #0
 8010ce0:	607b      	str	r3, [r7, #4]
 8010ce2:	e00c      	b.n	8010cfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	4413      	add	r3, r2
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4a12      	ldr	r2, [pc, #72]	@ (8010d38 <prvInitialiseTaskLists+0x60>)
 8010cf0:	4413      	add	r3, r2
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fe f824 	bl	800ed40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	607b      	str	r3, [r7, #4]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2b37      	cmp	r3, #55	@ 0x37
 8010d02:	d9ef      	bls.n	8010ce4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010d04:	480d      	ldr	r0, [pc, #52]	@ (8010d3c <prvInitialiseTaskLists+0x64>)
 8010d06:	f7fe f81b 	bl	800ed40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010d0a:	480d      	ldr	r0, [pc, #52]	@ (8010d40 <prvInitialiseTaskLists+0x68>)
 8010d0c:	f7fe f818 	bl	800ed40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010d10:	480c      	ldr	r0, [pc, #48]	@ (8010d44 <prvInitialiseTaskLists+0x6c>)
 8010d12:	f7fe f815 	bl	800ed40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010d16:	480c      	ldr	r0, [pc, #48]	@ (8010d48 <prvInitialiseTaskLists+0x70>)
 8010d18:	f7fe f812 	bl	800ed40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010d1c:	480b      	ldr	r0, [pc, #44]	@ (8010d4c <prvInitialiseTaskLists+0x74>)
 8010d1e:	f7fe f80f 	bl	800ed40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010d22:	4b0b      	ldr	r3, [pc, #44]	@ (8010d50 <prvInitialiseTaskLists+0x78>)
 8010d24:	4a05      	ldr	r2, [pc, #20]	@ (8010d3c <prvInitialiseTaskLists+0x64>)
 8010d26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010d28:	4b0a      	ldr	r3, [pc, #40]	@ (8010d54 <prvInitialiseTaskLists+0x7c>)
 8010d2a:	4a05      	ldr	r2, [pc, #20]	@ (8010d40 <prvInitialiseTaskLists+0x68>)
 8010d2c:	601a      	str	r2, [r3, #0]
}
 8010d2e:	bf00      	nop
 8010d30:	3708      	adds	r7, #8
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	2000af30 	.word	0x2000af30
 8010d3c:	2000b390 	.word	0x2000b390
 8010d40:	2000b3a4 	.word	0x2000b3a4
 8010d44:	2000b3c0 	.word	0x2000b3c0
 8010d48:	2000b3d4 	.word	0x2000b3d4
 8010d4c:	2000b3ec 	.word	0x2000b3ec
 8010d50:	2000b3b8 	.word	0x2000b3b8
 8010d54:	2000b3bc 	.word	0x2000b3bc

08010d58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010d5e:	e019      	b.n	8010d94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010d60:	f001 f804 	bl	8011d6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d64:	4b10      	ldr	r3, [pc, #64]	@ (8010da8 <prvCheckTasksWaitingTermination+0x50>)
 8010d66:	68db      	ldr	r3, [r3, #12]
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	3304      	adds	r3, #4
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fe f86f 	bl	800ee54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010d76:	4b0d      	ldr	r3, [pc, #52]	@ (8010dac <prvCheckTasksWaitingTermination+0x54>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8010dac <prvCheckTasksWaitingTermination+0x54>)
 8010d7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010d80:	4b0b      	ldr	r3, [pc, #44]	@ (8010db0 <prvCheckTasksWaitingTermination+0x58>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	3b01      	subs	r3, #1
 8010d86:	4a0a      	ldr	r2, [pc, #40]	@ (8010db0 <prvCheckTasksWaitingTermination+0x58>)
 8010d88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010d8a:	f001 f825 	bl	8011dd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 f810 	bl	8010db4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010d94:	4b06      	ldr	r3, [pc, #24]	@ (8010db0 <prvCheckTasksWaitingTermination+0x58>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d1e1      	bne.n	8010d60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010d9c:	bf00      	nop
 8010d9e:	bf00      	nop
 8010da0:	3708      	adds	r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	2000b3d4 	.word	0x2000b3d4
 8010dac:	2000b400 	.word	0x2000b400
 8010db0:	2000b3e8 	.word	0x2000b3e8

08010db4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b084      	sub	sp, #16
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	3354      	adds	r3, #84	@ 0x54
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f00d f805 	bl	801ddd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d108      	bne.n	8010de2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f001 f9c5 	bl	8012164 <vPortFree>
				vPortFree( pxTCB );
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f001 f9c2 	bl	8012164 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010de0:	e01b      	b.n	8010e1a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d103      	bne.n	8010df4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f001 f9b9 	bl	8012164 <vPortFree>
	}
 8010df2:	e012      	b.n	8010e1a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010dfa:	2b02      	cmp	r3, #2
 8010dfc:	d00d      	beq.n	8010e1a <prvDeleteTCB+0x66>
	__asm volatile
 8010dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e02:	b672      	cpsid	i
 8010e04:	f383 8811 	msr	BASEPRI, r3
 8010e08:	f3bf 8f6f 	isb	sy
 8010e0c:	f3bf 8f4f 	dsb	sy
 8010e10:	b662      	cpsie	i
 8010e12:	60fb      	str	r3, [r7, #12]
}
 8010e14:	bf00      	nop
 8010e16:	bf00      	nop
 8010e18:	e7fd      	b.n	8010e16 <prvDeleteTCB+0x62>
	}
 8010e1a:	bf00      	nop
 8010e1c:	3710      	adds	r7, #16
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
	...

08010e24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010e24:	b480      	push	{r7}
 8010e26:	b083      	sub	sp, #12
 8010e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8010e5c <prvResetNextTaskUnblockTime+0x38>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d104      	bne.n	8010e3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010e34:	4b0a      	ldr	r3, [pc, #40]	@ (8010e60 <prvResetNextTaskUnblockTime+0x3c>)
 8010e36:	f04f 32ff 	mov.w	r2, #4294967295
 8010e3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010e3c:	e008      	b.n	8010e50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e3e:	4b07      	ldr	r3, [pc, #28]	@ (8010e5c <prvResetNextTaskUnblockTime+0x38>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	4a04      	ldr	r2, [pc, #16]	@ (8010e60 <prvResetNextTaskUnblockTime+0x3c>)
 8010e4e:	6013      	str	r3, [r2, #0]
}
 8010e50:	bf00      	nop
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr
 8010e5c:	2000b3b8 	.word	0x2000b3b8
 8010e60:	2000b420 	.word	0x2000b420

08010e64 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010e6a:	4b05      	ldr	r3, [pc, #20]	@ (8010e80 <xTaskGetCurrentTaskHandle+0x1c>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010e70:	687b      	ldr	r3, [r7, #4]
	}
 8010e72:	4618      	mov	r0, r3
 8010e74:	370c      	adds	r7, #12
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	2000af2c 	.word	0x2000af2c

08010e84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8010eb8 <xTaskGetSchedulerState+0x34>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d102      	bne.n	8010e98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010e92:	2301      	movs	r3, #1
 8010e94:	607b      	str	r3, [r7, #4]
 8010e96:	e008      	b.n	8010eaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e98:	4b08      	ldr	r3, [pc, #32]	@ (8010ebc <xTaskGetSchedulerState+0x38>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d102      	bne.n	8010ea6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010ea0:	2302      	movs	r3, #2
 8010ea2:	607b      	str	r3, [r7, #4]
 8010ea4:	e001      	b.n	8010eaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010eaa:	687b      	ldr	r3, [r7, #4]
	}
 8010eac:	4618      	mov	r0, r3
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr
 8010eb8:	2000b40c 	.word	0x2000b40c
 8010ebc:	2000b428 	.word	0x2000b428

08010ec0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d051      	beq.n	8010f7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eda:	4b2a      	ldr	r3, [pc, #168]	@ (8010f84 <xTaskPriorityInherit+0xc4>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d241      	bcs.n	8010f68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	699b      	ldr	r3, [r3, #24]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	db06      	blt.n	8010efa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010eec:	4b25      	ldr	r3, [pc, #148]	@ (8010f84 <xTaskPriorityInherit+0xc4>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ef2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	6959      	ldr	r1, [r3, #20]
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f02:	4613      	mov	r3, r2
 8010f04:	009b      	lsls	r3, r3, #2
 8010f06:	4413      	add	r3, r2
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8010f88 <xTaskPriorityInherit+0xc8>)
 8010f0c:	4413      	add	r3, r2
 8010f0e:	4299      	cmp	r1, r3
 8010f10:	d122      	bne.n	8010f58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	3304      	adds	r3, #4
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fd ff9c 	bl	800ee54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010f1c:	4b19      	ldr	r3, [pc, #100]	@ (8010f84 <xTaskPriorityInherit+0xc4>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f2a:	4b18      	ldr	r3, [pc, #96]	@ (8010f8c <xTaskPriorityInherit+0xcc>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d903      	bls.n	8010f3a <xTaskPriorityInherit+0x7a>
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f36:	4a15      	ldr	r2, [pc, #84]	@ (8010f8c <xTaskPriorityInherit+0xcc>)
 8010f38:	6013      	str	r3, [r2, #0]
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f3e:	4613      	mov	r3, r2
 8010f40:	009b      	lsls	r3, r3, #2
 8010f42:	4413      	add	r3, r2
 8010f44:	009b      	lsls	r3, r3, #2
 8010f46:	4a10      	ldr	r2, [pc, #64]	@ (8010f88 <xTaskPriorityInherit+0xc8>)
 8010f48:	441a      	add	r2, r3
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	3304      	adds	r3, #4
 8010f4e:	4619      	mov	r1, r3
 8010f50:	4610      	mov	r0, r2
 8010f52:	f7fd ff22 	bl	800ed9a <vListInsertEnd>
 8010f56:	e004      	b.n	8010f62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010f58:	4b0a      	ldr	r3, [pc, #40]	@ (8010f84 <xTaskPriorityInherit+0xc4>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010f62:	2301      	movs	r3, #1
 8010f64:	60fb      	str	r3, [r7, #12]
 8010f66:	e008      	b.n	8010f7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010f6c:	4b05      	ldr	r3, [pc, #20]	@ (8010f84 <xTaskPriorityInherit+0xc4>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d201      	bcs.n	8010f7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010f76:	2301      	movs	r3, #1
 8010f78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
	}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3710      	adds	r7, #16
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	2000af2c 	.word	0x2000af2c
 8010f88:	2000af30 	.word	0x2000af30
 8010f8c:	2000b408 	.word	0x2000b408

08010f90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b086      	sub	sp, #24
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d05c      	beq.n	8011060 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010fa6:	4b31      	ldr	r3, [pc, #196]	@ (801106c <xTaskPriorityDisinherit+0xdc>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	693a      	ldr	r2, [r7, #16]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d00d      	beq.n	8010fcc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8010fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fb4:	b672      	cpsid	i
 8010fb6:	f383 8811 	msr	BASEPRI, r3
 8010fba:	f3bf 8f6f 	isb	sy
 8010fbe:	f3bf 8f4f 	dsb	sy
 8010fc2:	b662      	cpsie	i
 8010fc4:	60fb      	str	r3, [r7, #12]
}
 8010fc6:	bf00      	nop
 8010fc8:	bf00      	nop
 8010fca:	e7fd      	b.n	8010fc8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d10d      	bne.n	8010ff0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8010fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fd8:	b672      	cpsid	i
 8010fda:	f383 8811 	msr	BASEPRI, r3
 8010fde:	f3bf 8f6f 	isb	sy
 8010fe2:	f3bf 8f4f 	dsb	sy
 8010fe6:	b662      	cpsie	i
 8010fe8:	60bb      	str	r3, [r7, #8]
}
 8010fea:	bf00      	nop
 8010fec:	bf00      	nop
 8010fee:	e7fd      	b.n	8010fec <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ff4:	1e5a      	subs	r2, r3, #1
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011002:	429a      	cmp	r2, r3
 8011004:	d02c      	beq.n	8011060 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801100a:	2b00      	cmp	r3, #0
 801100c:	d128      	bne.n	8011060 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	3304      	adds	r3, #4
 8011012:	4618      	mov	r0, r3
 8011014:	f7fd ff1e 	bl	800ee54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011024:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011030:	4b0f      	ldr	r3, [pc, #60]	@ (8011070 <xTaskPriorityDisinherit+0xe0>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	429a      	cmp	r2, r3
 8011036:	d903      	bls.n	8011040 <xTaskPriorityDisinherit+0xb0>
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801103c:	4a0c      	ldr	r2, [pc, #48]	@ (8011070 <xTaskPriorityDisinherit+0xe0>)
 801103e:	6013      	str	r3, [r2, #0]
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011044:	4613      	mov	r3, r2
 8011046:	009b      	lsls	r3, r3, #2
 8011048:	4413      	add	r3, r2
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	4a09      	ldr	r2, [pc, #36]	@ (8011074 <xTaskPriorityDisinherit+0xe4>)
 801104e:	441a      	add	r2, r3
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	3304      	adds	r3, #4
 8011054:	4619      	mov	r1, r3
 8011056:	4610      	mov	r0, r2
 8011058:	f7fd fe9f 	bl	800ed9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801105c:	2301      	movs	r3, #1
 801105e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011060:	697b      	ldr	r3, [r7, #20]
	}
 8011062:	4618      	mov	r0, r3
 8011064:	3718      	adds	r7, #24
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	2000af2c 	.word	0x2000af2c
 8011070:	2000b408 	.word	0x2000b408
 8011074:	2000af30 	.word	0x2000af30

08011078 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011078:	b580      	push	{r7, lr}
 801107a:	b088      	sub	sp, #32
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011086:	2301      	movs	r3, #1
 8011088:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d070      	beq.n	8011172 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011094:	2b00      	cmp	r3, #0
 8011096:	d10d      	bne.n	80110b4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8011098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801109c:	b672      	cpsid	i
 801109e:	f383 8811 	msr	BASEPRI, r3
 80110a2:	f3bf 8f6f 	isb	sy
 80110a6:	f3bf 8f4f 	dsb	sy
 80110aa:	b662      	cpsie	i
 80110ac:	60fb      	str	r3, [r7, #12]
}
 80110ae:	bf00      	nop
 80110b0:	bf00      	nop
 80110b2:	e7fd      	b.n	80110b0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80110b4:	69bb      	ldr	r3, [r7, #24]
 80110b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80110b8:	683a      	ldr	r2, [r7, #0]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d902      	bls.n	80110c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	61fb      	str	r3, [r7, #28]
 80110c2:	e002      	b.n	80110ca <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80110c4:	69bb      	ldr	r3, [r7, #24]
 80110c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80110c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80110ca:	69bb      	ldr	r3, [r7, #24]
 80110cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110ce:	69fa      	ldr	r2, [r7, #28]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d04e      	beq.n	8011172 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80110d4:	69bb      	ldr	r3, [r7, #24]
 80110d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110d8:	697a      	ldr	r2, [r7, #20]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d149      	bne.n	8011172 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80110de:	4b27      	ldr	r3, [pc, #156]	@ (801117c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	69ba      	ldr	r2, [r7, #24]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d10d      	bne.n	8011104 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80110e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ec:	b672      	cpsid	i
 80110ee:	f383 8811 	msr	BASEPRI, r3
 80110f2:	f3bf 8f6f 	isb	sy
 80110f6:	f3bf 8f4f 	dsb	sy
 80110fa:	b662      	cpsie	i
 80110fc:	60bb      	str	r3, [r7, #8]
}
 80110fe:	bf00      	nop
 8011100:	bf00      	nop
 8011102:	e7fd      	b.n	8011100 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011108:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801110a:	69bb      	ldr	r3, [r7, #24]
 801110c:	69fa      	ldr	r2, [r7, #28]
 801110e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	699b      	ldr	r3, [r3, #24]
 8011114:	2b00      	cmp	r3, #0
 8011116:	db04      	blt.n	8011122 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011118:	69fb      	ldr	r3, [r7, #28]
 801111a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801111e:	69bb      	ldr	r3, [r7, #24]
 8011120:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011122:	69bb      	ldr	r3, [r7, #24]
 8011124:	6959      	ldr	r1, [r3, #20]
 8011126:	693a      	ldr	r2, [r7, #16]
 8011128:	4613      	mov	r3, r2
 801112a:	009b      	lsls	r3, r3, #2
 801112c:	4413      	add	r3, r2
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	4a13      	ldr	r2, [pc, #76]	@ (8011180 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011132:	4413      	add	r3, r2
 8011134:	4299      	cmp	r1, r3
 8011136:	d11c      	bne.n	8011172 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011138:	69bb      	ldr	r3, [r7, #24]
 801113a:	3304      	adds	r3, #4
 801113c:	4618      	mov	r0, r3
 801113e:	f7fd fe89 	bl	800ee54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011142:	69bb      	ldr	r3, [r7, #24]
 8011144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011146:	4b0f      	ldr	r3, [pc, #60]	@ (8011184 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	429a      	cmp	r2, r3
 801114c:	d903      	bls.n	8011156 <vTaskPriorityDisinheritAfterTimeout+0xde>
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011152:	4a0c      	ldr	r2, [pc, #48]	@ (8011184 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8011154:	6013      	str	r3, [r2, #0]
 8011156:	69bb      	ldr	r3, [r7, #24]
 8011158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801115a:	4613      	mov	r3, r2
 801115c:	009b      	lsls	r3, r3, #2
 801115e:	4413      	add	r3, r2
 8011160:	009b      	lsls	r3, r3, #2
 8011162:	4a07      	ldr	r2, [pc, #28]	@ (8011180 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011164:	441a      	add	r2, r3
 8011166:	69bb      	ldr	r3, [r7, #24]
 8011168:	3304      	adds	r3, #4
 801116a:	4619      	mov	r1, r3
 801116c:	4610      	mov	r0, r2
 801116e:	f7fd fe14 	bl	800ed9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011172:	bf00      	nop
 8011174:	3720      	adds	r7, #32
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop
 801117c:	2000af2c 	.word	0x2000af2c
 8011180:	2000af30 	.word	0x2000af30
 8011184:	2000b408 	.word	0x2000b408

08011188 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011188:	b480      	push	{r7}
 801118a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801118c:	4b07      	ldr	r3, [pc, #28]	@ (80111ac <pvTaskIncrementMutexHeldCount+0x24>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d004      	beq.n	801119e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011194:	4b05      	ldr	r3, [pc, #20]	@ (80111ac <pvTaskIncrementMutexHeldCount+0x24>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801119a:	3201      	adds	r2, #1
 801119c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801119e:	4b03      	ldr	r3, [pc, #12]	@ (80111ac <pvTaskIncrementMutexHeldCount+0x24>)
 80111a0:	681b      	ldr	r3, [r3, #0]
	}
 80111a2:	4618      	mov	r0, r3
 80111a4:	46bd      	mov	sp, r7
 80111a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111aa:	4770      	bx	lr
 80111ac:	2000af2c 	.word	0x2000af2c

080111b0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80111ba:	f000 fdd7 	bl	8011d6c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80111be:	4b20      	ldr	r3, [pc, #128]	@ (8011240 <ulTaskNotifyTake+0x90>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d113      	bne.n	80111f2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80111ca:	4b1d      	ldr	r3, [pc, #116]	@ (8011240 <ulTaskNotifyTake+0x90>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2201      	movs	r2, #1
 80111d0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00b      	beq.n	80111f2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80111da:	2101      	movs	r1, #1
 80111dc:	6838      	ldr	r0, [r7, #0]
 80111de:	f000 f8fb 	bl	80113d8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80111e2:	4b18      	ldr	r3, [pc, #96]	@ (8011244 <ulTaskNotifyTake+0x94>)
 80111e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111e8:	601a      	str	r2, [r3, #0]
 80111ea:	f3bf 8f4f 	dsb	sy
 80111ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80111f2:	f000 fdf1 	bl	8011dd8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80111f6:	f000 fdb9 	bl	8011d6c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80111fa:	4b11      	ldr	r3, [pc, #68]	@ (8011240 <ulTaskNotifyTake+0x90>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011202:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d00e      	beq.n	8011228 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d005      	beq.n	801121c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011210:	4b0b      	ldr	r3, [pc, #44]	@ (8011240 <ulTaskNotifyTake+0x90>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2200      	movs	r2, #0
 8011216:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801121a:	e005      	b.n	8011228 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801121c:	4b08      	ldr	r3, [pc, #32]	@ (8011240 <ulTaskNotifyTake+0x90>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	68fa      	ldr	r2, [r7, #12]
 8011222:	3a01      	subs	r2, #1
 8011224:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011228:	4b05      	ldr	r3, [pc, #20]	@ (8011240 <ulTaskNotifyTake+0x90>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	2200      	movs	r2, #0
 801122e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8011232:	f000 fdd1 	bl	8011dd8 <vPortExitCritical>

		return ulReturn;
 8011236:	68fb      	ldr	r3, [r7, #12]
	}
 8011238:	4618      	mov	r0, r3
 801123a:	3710      	adds	r7, #16
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	2000af2c 	.word	0x2000af2c
 8011244:	e000ed04 	.word	0xe000ed04

08011248 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011248:	b580      	push	{r7, lr}
 801124a:	b08a      	sub	sp, #40	@ 0x28
 801124c:	af00      	add	r7, sp, #0
 801124e:	60f8      	str	r0, [r7, #12]
 8011250:	60b9      	str	r1, [r7, #8]
 8011252:	603b      	str	r3, [r7, #0]
 8011254:	4613      	mov	r3, r2
 8011256:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011258:	2301      	movs	r3, #1
 801125a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d10d      	bne.n	801127e <xTaskGenericNotify+0x36>
	__asm volatile
 8011262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011266:	b672      	cpsid	i
 8011268:	f383 8811 	msr	BASEPRI, r3
 801126c:	f3bf 8f6f 	isb	sy
 8011270:	f3bf 8f4f 	dsb	sy
 8011274:	b662      	cpsie	i
 8011276:	61bb      	str	r3, [r7, #24]
}
 8011278:	bf00      	nop
 801127a:	bf00      	nop
 801127c:	e7fd      	b.n	801127a <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011282:	f000 fd73 	bl	8011d6c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d004      	beq.n	8011296 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801128c:	6a3b      	ldr	r3, [r7, #32]
 801128e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011296:	6a3b      	ldr	r3, [r7, #32]
 8011298:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801129c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801129e:	6a3b      	ldr	r3, [r7, #32]
 80112a0:	2202      	movs	r2, #2
 80112a2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80112a6:	79fb      	ldrb	r3, [r7, #7]
 80112a8:	2b04      	cmp	r3, #4
 80112aa:	d82e      	bhi.n	801130a <xTaskGenericNotify+0xc2>
 80112ac:	a201      	add	r2, pc, #4	@ (adr r2, 80112b4 <xTaskGenericNotify+0x6c>)
 80112ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b2:	bf00      	nop
 80112b4:	08011333 	.word	0x08011333
 80112b8:	080112c9 	.word	0x080112c9
 80112bc:	080112db 	.word	0x080112db
 80112c0:	080112eb 	.word	0x080112eb
 80112c4:	080112f5 	.word	0x080112f5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80112c8:	6a3b      	ldr	r3, [r7, #32]
 80112ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	431a      	orrs	r2, r3
 80112d2:	6a3b      	ldr	r3, [r7, #32]
 80112d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80112d8:	e02e      	b.n	8011338 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80112da:	6a3b      	ldr	r3, [r7, #32]
 80112dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80112e0:	1c5a      	adds	r2, r3, #1
 80112e2:	6a3b      	ldr	r3, [r7, #32]
 80112e4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80112e8:	e026      	b.n	8011338 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80112ea:	6a3b      	ldr	r3, [r7, #32]
 80112ec:	68ba      	ldr	r2, [r7, #8]
 80112ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80112f2:	e021      	b.n	8011338 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80112f4:	7ffb      	ldrb	r3, [r7, #31]
 80112f6:	2b02      	cmp	r3, #2
 80112f8:	d004      	beq.n	8011304 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80112fa:	6a3b      	ldr	r3, [r7, #32]
 80112fc:	68ba      	ldr	r2, [r7, #8]
 80112fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011302:	e019      	b.n	8011338 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8011304:	2300      	movs	r3, #0
 8011306:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8011308:	e016      	b.n	8011338 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801130a:	6a3b      	ldr	r3, [r7, #32]
 801130c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011314:	d00f      	beq.n	8011336 <xTaskGenericNotify+0xee>
	__asm volatile
 8011316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801131a:	b672      	cpsid	i
 801131c:	f383 8811 	msr	BASEPRI, r3
 8011320:	f3bf 8f6f 	isb	sy
 8011324:	f3bf 8f4f 	dsb	sy
 8011328:	b662      	cpsie	i
 801132a:	617b      	str	r3, [r7, #20]
}
 801132c:	bf00      	nop
 801132e:	bf00      	nop
 8011330:	e7fd      	b.n	801132e <xTaskGenericNotify+0xe6>
					break;
 8011332:	bf00      	nop
 8011334:	e000      	b.n	8011338 <xTaskGenericNotify+0xf0>

					break;
 8011336:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011338:	7ffb      	ldrb	r3, [r7, #31]
 801133a:	2b01      	cmp	r3, #1
 801133c:	d13d      	bne.n	80113ba <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801133e:	6a3b      	ldr	r3, [r7, #32]
 8011340:	3304      	adds	r3, #4
 8011342:	4618      	mov	r0, r3
 8011344:	f7fd fd86 	bl	800ee54 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011348:	6a3b      	ldr	r3, [r7, #32]
 801134a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801134c:	4b1e      	ldr	r3, [pc, #120]	@ (80113c8 <xTaskGenericNotify+0x180>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	429a      	cmp	r2, r3
 8011352:	d903      	bls.n	801135c <xTaskGenericNotify+0x114>
 8011354:	6a3b      	ldr	r3, [r7, #32]
 8011356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011358:	4a1b      	ldr	r2, [pc, #108]	@ (80113c8 <xTaskGenericNotify+0x180>)
 801135a:	6013      	str	r3, [r2, #0]
 801135c:	6a3b      	ldr	r3, [r7, #32]
 801135e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011360:	4613      	mov	r3, r2
 8011362:	009b      	lsls	r3, r3, #2
 8011364:	4413      	add	r3, r2
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	4a18      	ldr	r2, [pc, #96]	@ (80113cc <xTaskGenericNotify+0x184>)
 801136a:	441a      	add	r2, r3
 801136c:	6a3b      	ldr	r3, [r7, #32]
 801136e:	3304      	adds	r3, #4
 8011370:	4619      	mov	r1, r3
 8011372:	4610      	mov	r0, r2
 8011374:	f7fd fd11 	bl	800ed9a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011378:	6a3b      	ldr	r3, [r7, #32]
 801137a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801137c:	2b00      	cmp	r3, #0
 801137e:	d00d      	beq.n	801139c <xTaskGenericNotify+0x154>
	__asm volatile
 8011380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011384:	b672      	cpsid	i
 8011386:	f383 8811 	msr	BASEPRI, r3
 801138a:	f3bf 8f6f 	isb	sy
 801138e:	f3bf 8f4f 	dsb	sy
 8011392:	b662      	cpsie	i
 8011394:	613b      	str	r3, [r7, #16]
}
 8011396:	bf00      	nop
 8011398:	bf00      	nop
 801139a:	e7fd      	b.n	8011398 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801139c:	6a3b      	ldr	r3, [r7, #32]
 801139e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113a0:	4b0b      	ldr	r3, [pc, #44]	@ (80113d0 <xTaskGenericNotify+0x188>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d907      	bls.n	80113ba <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80113aa:	4b0a      	ldr	r3, [pc, #40]	@ (80113d4 <xTaskGenericNotify+0x18c>)
 80113ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113b0:	601a      	str	r2, [r3, #0]
 80113b2:	f3bf 8f4f 	dsb	sy
 80113b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80113ba:	f000 fd0d 	bl	8011dd8 <vPortExitCritical>

		return xReturn;
 80113be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3728      	adds	r7, #40	@ 0x28
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	2000b408 	.word	0x2000b408
 80113cc:	2000af30 	.word	0x2000af30
 80113d0:	2000af2c 	.word	0x2000af2c
 80113d4:	e000ed04 	.word	0xe000ed04

080113d8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80113e2:	4b21      	ldr	r3, [pc, #132]	@ (8011468 <prvAddCurrentTaskToDelayedList+0x90>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80113e8:	4b20      	ldr	r3, [pc, #128]	@ (801146c <prvAddCurrentTaskToDelayedList+0x94>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	3304      	adds	r3, #4
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fd fd30 	bl	800ee54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113fa:	d10a      	bne.n	8011412 <prvAddCurrentTaskToDelayedList+0x3a>
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d007      	beq.n	8011412 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011402:	4b1a      	ldr	r3, [pc, #104]	@ (801146c <prvAddCurrentTaskToDelayedList+0x94>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	3304      	adds	r3, #4
 8011408:	4619      	mov	r1, r3
 801140a:	4819      	ldr	r0, [pc, #100]	@ (8011470 <prvAddCurrentTaskToDelayedList+0x98>)
 801140c:	f7fd fcc5 	bl	800ed9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011410:	e026      	b.n	8011460 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011412:	68fa      	ldr	r2, [r7, #12]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4413      	add	r3, r2
 8011418:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801141a:	4b14      	ldr	r3, [pc, #80]	@ (801146c <prvAddCurrentTaskToDelayedList+0x94>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	68ba      	ldr	r2, [r7, #8]
 8011420:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011422:	68ba      	ldr	r2, [r7, #8]
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	429a      	cmp	r2, r3
 8011428:	d209      	bcs.n	801143e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801142a:	4b12      	ldr	r3, [pc, #72]	@ (8011474 <prvAddCurrentTaskToDelayedList+0x9c>)
 801142c:	681a      	ldr	r2, [r3, #0]
 801142e:	4b0f      	ldr	r3, [pc, #60]	@ (801146c <prvAddCurrentTaskToDelayedList+0x94>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	3304      	adds	r3, #4
 8011434:	4619      	mov	r1, r3
 8011436:	4610      	mov	r0, r2
 8011438:	f7fd fcd3 	bl	800ede2 <vListInsert>
}
 801143c:	e010      	b.n	8011460 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801143e:	4b0e      	ldr	r3, [pc, #56]	@ (8011478 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	4b0a      	ldr	r3, [pc, #40]	@ (801146c <prvAddCurrentTaskToDelayedList+0x94>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	3304      	adds	r3, #4
 8011448:	4619      	mov	r1, r3
 801144a:	4610      	mov	r0, r2
 801144c:	f7fd fcc9 	bl	800ede2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011450:	4b0a      	ldr	r3, [pc, #40]	@ (801147c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	68ba      	ldr	r2, [r7, #8]
 8011456:	429a      	cmp	r2, r3
 8011458:	d202      	bcs.n	8011460 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801145a:	4a08      	ldr	r2, [pc, #32]	@ (801147c <prvAddCurrentTaskToDelayedList+0xa4>)
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	6013      	str	r3, [r2, #0]
}
 8011460:	bf00      	nop
 8011462:	3710      	adds	r7, #16
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	2000b404 	.word	0x2000b404
 801146c:	2000af2c 	.word	0x2000af2c
 8011470:	2000b3ec 	.word	0x2000b3ec
 8011474:	2000b3bc 	.word	0x2000b3bc
 8011478:	2000b3b8 	.word	0x2000b3b8
 801147c:	2000b420 	.word	0x2000b420

08011480 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b08a      	sub	sp, #40	@ 0x28
 8011484:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011486:	2300      	movs	r3, #0
 8011488:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801148a:	f000 fb21 	bl	8011ad0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801148e:	4b1e      	ldr	r3, [pc, #120]	@ (8011508 <xTimerCreateTimerTask+0x88>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d021      	beq.n	80114da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011496:	2300      	movs	r3, #0
 8011498:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801149a:	2300      	movs	r3, #0
 801149c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801149e:	1d3a      	adds	r2, r7, #4
 80114a0:	f107 0108 	add.w	r1, r7, #8
 80114a4:	f107 030c 	add.w	r3, r7, #12
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7fd fc2f 	bl	800ed0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80114ae:	6879      	ldr	r1, [r7, #4]
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	68fa      	ldr	r2, [r7, #12]
 80114b4:	9202      	str	r2, [sp, #8]
 80114b6:	9301      	str	r3, [sp, #4]
 80114b8:	2302      	movs	r3, #2
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	2300      	movs	r3, #0
 80114be:	460a      	mov	r2, r1
 80114c0:	4912      	ldr	r1, [pc, #72]	@ (801150c <xTimerCreateTimerTask+0x8c>)
 80114c2:	4813      	ldr	r0, [pc, #76]	@ (8011510 <xTimerCreateTimerTask+0x90>)
 80114c4:	f7fe fe20 	bl	8010108 <xTaskCreateStatic>
 80114c8:	4603      	mov	r3, r0
 80114ca:	4a12      	ldr	r2, [pc, #72]	@ (8011514 <xTimerCreateTimerTask+0x94>)
 80114cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80114ce:	4b11      	ldr	r3, [pc, #68]	@ (8011514 <xTimerCreateTimerTask+0x94>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d001      	beq.n	80114da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80114d6:	2301      	movs	r3, #1
 80114d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d10d      	bne.n	80114fc <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80114e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114e4:	b672      	cpsid	i
 80114e6:	f383 8811 	msr	BASEPRI, r3
 80114ea:	f3bf 8f6f 	isb	sy
 80114ee:	f3bf 8f4f 	dsb	sy
 80114f2:	b662      	cpsie	i
 80114f4:	613b      	str	r3, [r7, #16]
}
 80114f6:	bf00      	nop
 80114f8:	bf00      	nop
 80114fa:	e7fd      	b.n	80114f8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80114fc:	697b      	ldr	r3, [r7, #20]
}
 80114fe:	4618      	mov	r0, r3
 8011500:	3718      	adds	r7, #24
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	2000b45c 	.word	0x2000b45c
 801150c:	0801edd0 	.word	0x0801edd0
 8011510:	08011659 	.word	0x08011659
 8011514:	2000b460 	.word	0x2000b460

08011518 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b08a      	sub	sp, #40	@ 0x28
 801151c:	af00      	add	r7, sp, #0
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	607a      	str	r2, [r7, #4]
 8011524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011526:	2300      	movs	r3, #0
 8011528:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d10d      	bne.n	801154c <xTimerGenericCommand+0x34>
	__asm volatile
 8011530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011534:	b672      	cpsid	i
 8011536:	f383 8811 	msr	BASEPRI, r3
 801153a:	f3bf 8f6f 	isb	sy
 801153e:	f3bf 8f4f 	dsb	sy
 8011542:	b662      	cpsie	i
 8011544:	623b      	str	r3, [r7, #32]
}
 8011546:	bf00      	nop
 8011548:	bf00      	nop
 801154a:	e7fd      	b.n	8011548 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801154c:	4b19      	ldr	r3, [pc, #100]	@ (80115b4 <xTimerGenericCommand+0x9c>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d02a      	beq.n	80115aa <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	2b05      	cmp	r3, #5
 8011564:	dc18      	bgt.n	8011598 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011566:	f7ff fc8d 	bl	8010e84 <xTaskGetSchedulerState>
 801156a:	4603      	mov	r3, r0
 801156c:	2b02      	cmp	r3, #2
 801156e:	d109      	bne.n	8011584 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011570:	4b10      	ldr	r3, [pc, #64]	@ (80115b4 <xTimerGenericCommand+0x9c>)
 8011572:	6818      	ldr	r0, [r3, #0]
 8011574:	f107 0110 	add.w	r1, r7, #16
 8011578:	2300      	movs	r3, #0
 801157a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801157c:	f7fd ff20 	bl	800f3c0 <xQueueGenericSend>
 8011580:	6278      	str	r0, [r7, #36]	@ 0x24
 8011582:	e012      	b.n	80115aa <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011584:	4b0b      	ldr	r3, [pc, #44]	@ (80115b4 <xTimerGenericCommand+0x9c>)
 8011586:	6818      	ldr	r0, [r3, #0]
 8011588:	f107 0110 	add.w	r1, r7, #16
 801158c:	2300      	movs	r3, #0
 801158e:	2200      	movs	r2, #0
 8011590:	f7fd ff16 	bl	800f3c0 <xQueueGenericSend>
 8011594:	6278      	str	r0, [r7, #36]	@ 0x24
 8011596:	e008      	b.n	80115aa <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011598:	4b06      	ldr	r3, [pc, #24]	@ (80115b4 <xTimerGenericCommand+0x9c>)
 801159a:	6818      	ldr	r0, [r3, #0]
 801159c:	f107 0110 	add.w	r1, r7, #16
 80115a0:	2300      	movs	r3, #0
 80115a2:	683a      	ldr	r2, [r7, #0]
 80115a4:	f7fe f816 	bl	800f5d4 <xQueueGenericSendFromISR>
 80115a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80115aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3728      	adds	r7, #40	@ 0x28
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	2000b45c 	.word	0x2000b45c

080115b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b088      	sub	sp, #32
 80115bc:	af02      	add	r7, sp, #8
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115c2:	4b24      	ldr	r3, [pc, #144]	@ (8011654 <prvProcessExpiredTimer+0x9c>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	68db      	ldr	r3, [r3, #12]
 80115c8:	68db      	ldr	r3, [r3, #12]
 80115ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	3304      	adds	r3, #4
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7fd fc3f 	bl	800ee54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80115dc:	f003 0304 	and.w	r3, r3, #4
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d025      	beq.n	8011630 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	699a      	ldr	r2, [r3, #24]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	18d1      	adds	r1, r2, r3
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	683a      	ldr	r2, [r7, #0]
 80115f0:	6978      	ldr	r0, [r7, #20]
 80115f2:	f000 f8d7 	bl	80117a4 <prvInsertTimerInActiveList>
 80115f6:	4603      	mov	r3, r0
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d022      	beq.n	8011642 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80115fc:	2300      	movs	r3, #0
 80115fe:	9300      	str	r3, [sp, #0]
 8011600:	2300      	movs	r3, #0
 8011602:	687a      	ldr	r2, [r7, #4]
 8011604:	2100      	movs	r1, #0
 8011606:	6978      	ldr	r0, [r7, #20]
 8011608:	f7ff ff86 	bl	8011518 <xTimerGenericCommand>
 801160c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d116      	bne.n	8011642 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8011614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011618:	b672      	cpsid	i
 801161a:	f383 8811 	msr	BASEPRI, r3
 801161e:	f3bf 8f6f 	isb	sy
 8011622:	f3bf 8f4f 	dsb	sy
 8011626:	b662      	cpsie	i
 8011628:	60fb      	str	r3, [r7, #12]
}
 801162a:	bf00      	nop
 801162c:	bf00      	nop
 801162e:	e7fd      	b.n	801162c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011636:	f023 0301 	bic.w	r3, r3, #1
 801163a:	b2da      	uxtb	r2, r3
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	6a1b      	ldr	r3, [r3, #32]
 8011646:	6978      	ldr	r0, [r7, #20]
 8011648:	4798      	blx	r3
}
 801164a:	bf00      	nop
 801164c:	3718      	adds	r7, #24
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	2000b454 	.word	0x2000b454

08011658 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011660:	f107 0308 	add.w	r3, r7, #8
 8011664:	4618      	mov	r0, r3
 8011666:	f000 f859 	bl	801171c <prvGetNextExpireTime>
 801166a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	4619      	mov	r1, r3
 8011670:	68f8      	ldr	r0, [r7, #12]
 8011672:	f000 f805 	bl	8011680 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011676:	f000 f8d7 	bl	8011828 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801167a:	bf00      	nop
 801167c:	e7f0      	b.n	8011660 <prvTimerTask+0x8>
	...

08011680 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801168a:	f7fe ffaf 	bl	80105ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801168e:	f107 0308 	add.w	r3, r7, #8
 8011692:	4618      	mov	r0, r3
 8011694:	f000 f866 	bl	8011764 <prvSampleTimeNow>
 8011698:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d130      	bne.n	8011702 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d10a      	bne.n	80116bc <prvProcessTimerOrBlockTask+0x3c>
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d806      	bhi.n	80116bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80116ae:	f7fe ffab 	bl	8010608 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80116b2:	68f9      	ldr	r1, [r7, #12]
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f7ff ff7f 	bl	80115b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80116ba:	e024      	b.n	8011706 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d008      	beq.n	80116d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80116c2:	4b13      	ldr	r3, [pc, #76]	@ (8011710 <prvProcessTimerOrBlockTask+0x90>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d101      	bne.n	80116d0 <prvProcessTimerOrBlockTask+0x50>
 80116cc:	2301      	movs	r3, #1
 80116ce:	e000      	b.n	80116d2 <prvProcessTimerOrBlockTask+0x52>
 80116d0:	2300      	movs	r3, #0
 80116d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80116d4:	4b0f      	ldr	r3, [pc, #60]	@ (8011714 <prvProcessTimerOrBlockTask+0x94>)
 80116d6:	6818      	ldr	r0, [r3, #0]
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	1ad3      	subs	r3, r2, r3
 80116de:	683a      	ldr	r2, [r7, #0]
 80116e0:	4619      	mov	r1, r3
 80116e2:	f7fe fcdd 	bl	80100a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80116e6:	f7fe ff8f 	bl	8010608 <xTaskResumeAll>
 80116ea:	4603      	mov	r3, r0
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d10a      	bne.n	8011706 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80116f0:	4b09      	ldr	r3, [pc, #36]	@ (8011718 <prvProcessTimerOrBlockTask+0x98>)
 80116f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80116f6:	601a      	str	r2, [r3, #0]
 80116f8:	f3bf 8f4f 	dsb	sy
 80116fc:	f3bf 8f6f 	isb	sy
}
 8011700:	e001      	b.n	8011706 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011702:	f7fe ff81 	bl	8010608 <xTaskResumeAll>
}
 8011706:	bf00      	nop
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	2000b458 	.word	0x2000b458
 8011714:	2000b45c 	.word	0x2000b45c
 8011718:	e000ed04 	.word	0xe000ed04

0801171c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801171c:	b480      	push	{r7}
 801171e:	b085      	sub	sp, #20
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011724:	4b0e      	ldr	r3, [pc, #56]	@ (8011760 <prvGetNextExpireTime+0x44>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d101      	bne.n	8011732 <prvGetNextExpireTime+0x16>
 801172e:	2201      	movs	r2, #1
 8011730:	e000      	b.n	8011734 <prvGetNextExpireTime+0x18>
 8011732:	2200      	movs	r2, #0
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d105      	bne.n	801174c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011740:	4b07      	ldr	r3, [pc, #28]	@ (8011760 <prvGetNextExpireTime+0x44>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	68db      	ldr	r3, [r3, #12]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	60fb      	str	r3, [r7, #12]
 801174a:	e001      	b.n	8011750 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801174c:	2300      	movs	r3, #0
 801174e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011750:	68fb      	ldr	r3, [r7, #12]
}
 8011752:	4618      	mov	r0, r3
 8011754:	3714      	adds	r7, #20
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr
 801175e:	bf00      	nop
 8011760:	2000b454 	.word	0x2000b454

08011764 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801176c:	f7fe ffec 	bl	8010748 <xTaskGetTickCount>
 8011770:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011772:	4b0b      	ldr	r3, [pc, #44]	@ (80117a0 <prvSampleTimeNow+0x3c>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	68fa      	ldr	r2, [r7, #12]
 8011778:	429a      	cmp	r2, r3
 801177a:	d205      	bcs.n	8011788 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801177c:	f000 f940 	bl	8011a00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2201      	movs	r2, #1
 8011784:	601a      	str	r2, [r3, #0]
 8011786:	e002      	b.n	801178e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2200      	movs	r2, #0
 801178c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801178e:	4a04      	ldr	r2, [pc, #16]	@ (80117a0 <prvSampleTimeNow+0x3c>)
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011794:	68fb      	ldr	r3, [r7, #12]
}
 8011796:	4618      	mov	r0, r3
 8011798:	3710      	adds	r7, #16
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	2000b464 	.word	0x2000b464

080117a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b086      	sub	sp, #24
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	607a      	str	r2, [r7, #4]
 80117b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80117b2:	2300      	movs	r3, #0
 80117b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	68ba      	ldr	r2, [r7, #8]
 80117ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80117c2:	68ba      	ldr	r2, [r7, #8]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d812      	bhi.n	80117f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	1ad2      	subs	r2, r2, r3
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	699b      	ldr	r3, [r3, #24]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d302      	bcc.n	80117de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80117d8:	2301      	movs	r3, #1
 80117da:	617b      	str	r3, [r7, #20]
 80117dc:	e01b      	b.n	8011816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80117de:	4b10      	ldr	r3, [pc, #64]	@ (8011820 <prvInsertTimerInActiveList+0x7c>)
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	3304      	adds	r3, #4
 80117e6:	4619      	mov	r1, r3
 80117e8:	4610      	mov	r0, r2
 80117ea:	f7fd fafa 	bl	800ede2 <vListInsert>
 80117ee:	e012      	b.n	8011816 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80117f0:	687a      	ldr	r2, [r7, #4]
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d206      	bcs.n	8011806 <prvInsertTimerInActiveList+0x62>
 80117f8:	68ba      	ldr	r2, [r7, #8]
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d302      	bcc.n	8011806 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011800:	2301      	movs	r3, #1
 8011802:	617b      	str	r3, [r7, #20]
 8011804:	e007      	b.n	8011816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011806:	4b07      	ldr	r3, [pc, #28]	@ (8011824 <prvInsertTimerInActiveList+0x80>)
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	3304      	adds	r3, #4
 801180e:	4619      	mov	r1, r3
 8011810:	4610      	mov	r0, r2
 8011812:	f7fd fae6 	bl	800ede2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011816:	697b      	ldr	r3, [r7, #20]
}
 8011818:	4618      	mov	r0, r3
 801181a:	3718      	adds	r7, #24
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	2000b458 	.word	0x2000b458
 8011824:	2000b454 	.word	0x2000b454

08011828 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b08e      	sub	sp, #56	@ 0x38
 801182c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801182e:	e0d4      	b.n	80119da <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2b00      	cmp	r3, #0
 8011834:	da1b      	bge.n	801186e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011836:	1d3b      	adds	r3, r7, #4
 8011838:	3304      	adds	r3, #4
 801183a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801183e:	2b00      	cmp	r3, #0
 8011840:	d10d      	bne.n	801185e <prvProcessReceivedCommands+0x36>
	__asm volatile
 8011842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011846:	b672      	cpsid	i
 8011848:	f383 8811 	msr	BASEPRI, r3
 801184c:	f3bf 8f6f 	isb	sy
 8011850:	f3bf 8f4f 	dsb	sy
 8011854:	b662      	cpsie	i
 8011856:	61fb      	str	r3, [r7, #28]
}
 8011858:	bf00      	nop
 801185a:	bf00      	nop
 801185c:	e7fd      	b.n	801185a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011864:	6850      	ldr	r0, [r2, #4]
 8011866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011868:	6892      	ldr	r2, [r2, #8]
 801186a:	4611      	mov	r1, r2
 801186c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2b00      	cmp	r3, #0
 8011872:	f2c0 80b2 	blt.w	80119da <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801187a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801187c:	695b      	ldr	r3, [r3, #20]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d004      	beq.n	801188c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011884:	3304      	adds	r3, #4
 8011886:	4618      	mov	r0, r3
 8011888:	f7fd fae4 	bl	800ee54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801188c:	463b      	mov	r3, r7
 801188e:	4618      	mov	r0, r3
 8011890:	f7ff ff68 	bl	8011764 <prvSampleTimeNow>
 8011894:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2b09      	cmp	r3, #9
 801189a:	f200 809b 	bhi.w	80119d4 <prvProcessReceivedCommands+0x1ac>
 801189e:	a201      	add	r2, pc, #4	@ (adr r2, 80118a4 <prvProcessReceivedCommands+0x7c>)
 80118a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118a4:	080118cd 	.word	0x080118cd
 80118a8:	080118cd 	.word	0x080118cd
 80118ac:	080118cd 	.word	0x080118cd
 80118b0:	08011947 	.word	0x08011947
 80118b4:	0801195b 	.word	0x0801195b
 80118b8:	080119ab 	.word	0x080119ab
 80118bc:	080118cd 	.word	0x080118cd
 80118c0:	080118cd 	.word	0x080118cd
 80118c4:	08011947 	.word	0x08011947
 80118c8:	0801195b 	.word	0x0801195b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80118cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80118d2:	f043 0301 	orr.w	r3, r3, #1
 80118d6:	b2da      	uxtb	r2, r3
 80118d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80118de:	68ba      	ldr	r2, [r7, #8]
 80118e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118e2:	699b      	ldr	r3, [r3, #24]
 80118e4:	18d1      	adds	r1, r2, r3
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80118ec:	f7ff ff5a 	bl	80117a4 <prvInsertTimerInActiveList>
 80118f0:	4603      	mov	r3, r0
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d070      	beq.n	80119d8 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80118f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f8:	6a1b      	ldr	r3, [r3, #32]
 80118fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80118fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80118fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011900:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011904:	f003 0304 	and.w	r3, r3, #4
 8011908:	2b00      	cmp	r3, #0
 801190a:	d065      	beq.n	80119d8 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801190c:	68ba      	ldr	r2, [r7, #8]
 801190e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011910:	699b      	ldr	r3, [r3, #24]
 8011912:	441a      	add	r2, r3
 8011914:	2300      	movs	r3, #0
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	2300      	movs	r3, #0
 801191a:	2100      	movs	r1, #0
 801191c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801191e:	f7ff fdfb 	bl	8011518 <xTimerGenericCommand>
 8011922:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011924:	6a3b      	ldr	r3, [r7, #32]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d156      	bne.n	80119d8 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 801192a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801192e:	b672      	cpsid	i
 8011930:	f383 8811 	msr	BASEPRI, r3
 8011934:	f3bf 8f6f 	isb	sy
 8011938:	f3bf 8f4f 	dsb	sy
 801193c:	b662      	cpsie	i
 801193e:	61bb      	str	r3, [r7, #24]
}
 8011940:	bf00      	nop
 8011942:	bf00      	nop
 8011944:	e7fd      	b.n	8011942 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801194c:	f023 0301 	bic.w	r3, r3, #1
 8011950:	b2da      	uxtb	r2, r3
 8011952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011954:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011958:	e03f      	b.n	80119da <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801195a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801195c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011960:	f043 0301 	orr.w	r3, r3, #1
 8011964:	b2da      	uxtb	r2, r3
 8011966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011968:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801196c:	68ba      	ldr	r2, [r7, #8]
 801196e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011970:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011974:	699b      	ldr	r3, [r3, #24]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d10d      	bne.n	8011996 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 801197a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801197e:	b672      	cpsid	i
 8011980:	f383 8811 	msr	BASEPRI, r3
 8011984:	f3bf 8f6f 	isb	sy
 8011988:	f3bf 8f4f 	dsb	sy
 801198c:	b662      	cpsie	i
 801198e:	617b      	str	r3, [r7, #20]
}
 8011990:	bf00      	nop
 8011992:	bf00      	nop
 8011994:	e7fd      	b.n	8011992 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011998:	699a      	ldr	r2, [r3, #24]
 801199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801199c:	18d1      	adds	r1, r2, r3
 801199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80119a4:	f7ff fefe 	bl	80117a4 <prvInsertTimerInActiveList>
					break;
 80119a8:	e017      	b.n	80119da <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80119aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80119b0:	f003 0302 	and.w	r3, r3, #2
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d103      	bne.n	80119c0 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80119b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80119ba:	f000 fbd3 	bl	8012164 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80119be:	e00c      	b.n	80119da <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80119c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80119c6:	f023 0301 	bic.w	r3, r3, #1
 80119ca:	b2da      	uxtb	r2, r3
 80119cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80119d2:	e002      	b.n	80119da <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80119d4:	bf00      	nop
 80119d6:	e000      	b.n	80119da <prvProcessReceivedCommands+0x1b2>
					break;
 80119d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80119da:	4b08      	ldr	r3, [pc, #32]	@ (80119fc <prvProcessReceivedCommands+0x1d4>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	1d39      	adds	r1, r7, #4
 80119e0:	2200      	movs	r2, #0
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fd ff32 	bl	800f84c <xQueueReceive>
 80119e8:	4603      	mov	r3, r0
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	f47f af20 	bne.w	8011830 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80119f0:	bf00      	nop
 80119f2:	bf00      	nop
 80119f4:	3730      	adds	r7, #48	@ 0x30
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	bf00      	nop
 80119fc:	2000b45c 	.word	0x2000b45c

08011a00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b088      	sub	sp, #32
 8011a04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011a06:	e04b      	b.n	8011aa0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011a08:	4b2f      	ldr	r3, [pc, #188]	@ (8011ac8 <prvSwitchTimerLists+0xc8>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	68db      	ldr	r3, [r3, #12]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a12:	4b2d      	ldr	r3, [pc, #180]	@ (8011ac8 <prvSwitchTimerLists+0xc8>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	68db      	ldr	r3, [r3, #12]
 8011a1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	3304      	adds	r3, #4
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7fd fa17 	bl	800ee54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	6a1b      	ldr	r3, [r3, #32]
 8011a2a:	68f8      	ldr	r0, [r7, #12]
 8011a2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a34:	f003 0304 	and.w	r3, r3, #4
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d031      	beq.n	8011aa0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	699b      	ldr	r3, [r3, #24]
 8011a40:	693a      	ldr	r2, [r7, #16]
 8011a42:	4413      	add	r3, r2
 8011a44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011a46:	68ba      	ldr	r2, [r7, #8]
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d90e      	bls.n	8011a6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	68ba      	ldr	r2, [r7, #8]
 8011a52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	68fa      	ldr	r2, [r7, #12]
 8011a58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8011ac8 <prvSwitchTimerLists+0xc8>)
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	3304      	adds	r3, #4
 8011a62:	4619      	mov	r1, r3
 8011a64:	4610      	mov	r0, r2
 8011a66:	f7fd f9bc 	bl	800ede2 <vListInsert>
 8011a6a:	e019      	b.n	8011aa0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	9300      	str	r3, [sp, #0]
 8011a70:	2300      	movs	r3, #0
 8011a72:	693a      	ldr	r2, [r7, #16]
 8011a74:	2100      	movs	r1, #0
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	f7ff fd4e 	bl	8011518 <xTimerGenericCommand>
 8011a7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d10d      	bne.n	8011aa0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8011a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a88:	b672      	cpsid	i
 8011a8a:	f383 8811 	msr	BASEPRI, r3
 8011a8e:	f3bf 8f6f 	isb	sy
 8011a92:	f3bf 8f4f 	dsb	sy
 8011a96:	b662      	cpsie	i
 8011a98:	603b      	str	r3, [r7, #0]
}
 8011a9a:	bf00      	nop
 8011a9c:	bf00      	nop
 8011a9e:	e7fd      	b.n	8011a9c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011aa0:	4b09      	ldr	r3, [pc, #36]	@ (8011ac8 <prvSwitchTimerLists+0xc8>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d1ae      	bne.n	8011a08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011aaa:	4b07      	ldr	r3, [pc, #28]	@ (8011ac8 <prvSwitchTimerLists+0xc8>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011ab0:	4b06      	ldr	r3, [pc, #24]	@ (8011acc <prvSwitchTimerLists+0xcc>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	4a04      	ldr	r2, [pc, #16]	@ (8011ac8 <prvSwitchTimerLists+0xc8>)
 8011ab6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011ab8:	4a04      	ldr	r2, [pc, #16]	@ (8011acc <prvSwitchTimerLists+0xcc>)
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	6013      	str	r3, [r2, #0]
}
 8011abe:	bf00      	nop
 8011ac0:	3718      	adds	r7, #24
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	2000b454 	.word	0x2000b454
 8011acc:	2000b458 	.word	0x2000b458

08011ad0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011ad6:	f000 f949 	bl	8011d6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011ada:	4b15      	ldr	r3, [pc, #84]	@ (8011b30 <prvCheckForValidListAndQueue+0x60>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d120      	bne.n	8011b24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011ae2:	4814      	ldr	r0, [pc, #80]	@ (8011b34 <prvCheckForValidListAndQueue+0x64>)
 8011ae4:	f7fd f92c 	bl	800ed40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011ae8:	4813      	ldr	r0, [pc, #76]	@ (8011b38 <prvCheckForValidListAndQueue+0x68>)
 8011aea:	f7fd f929 	bl	800ed40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011aee:	4b13      	ldr	r3, [pc, #76]	@ (8011b3c <prvCheckForValidListAndQueue+0x6c>)
 8011af0:	4a10      	ldr	r2, [pc, #64]	@ (8011b34 <prvCheckForValidListAndQueue+0x64>)
 8011af2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011af4:	4b12      	ldr	r3, [pc, #72]	@ (8011b40 <prvCheckForValidListAndQueue+0x70>)
 8011af6:	4a10      	ldr	r2, [pc, #64]	@ (8011b38 <prvCheckForValidListAndQueue+0x68>)
 8011af8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011afa:	2300      	movs	r3, #0
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	4b11      	ldr	r3, [pc, #68]	@ (8011b44 <prvCheckForValidListAndQueue+0x74>)
 8011b00:	4a11      	ldr	r2, [pc, #68]	@ (8011b48 <prvCheckForValidListAndQueue+0x78>)
 8011b02:	2110      	movs	r1, #16
 8011b04:	200a      	movs	r0, #10
 8011b06:	f7fd fa3b 	bl	800ef80 <xQueueGenericCreateStatic>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	4a08      	ldr	r2, [pc, #32]	@ (8011b30 <prvCheckForValidListAndQueue+0x60>)
 8011b0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011b10:	4b07      	ldr	r3, [pc, #28]	@ (8011b30 <prvCheckForValidListAndQueue+0x60>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d005      	beq.n	8011b24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011b18:	4b05      	ldr	r3, [pc, #20]	@ (8011b30 <prvCheckForValidListAndQueue+0x60>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	490b      	ldr	r1, [pc, #44]	@ (8011b4c <prvCheckForValidListAndQueue+0x7c>)
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7fe fa6a 	bl	800fff8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011b24:	f000 f958 	bl	8011dd8 <vPortExitCritical>
}
 8011b28:	bf00      	nop
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}
 8011b2e:	bf00      	nop
 8011b30:	2000b45c 	.word	0x2000b45c
 8011b34:	2000b42c 	.word	0x2000b42c
 8011b38:	2000b440 	.word	0x2000b440
 8011b3c:	2000b454 	.word	0x2000b454
 8011b40:	2000b458 	.word	0x2000b458
 8011b44:	2000b508 	.word	0x2000b508
 8011b48:	2000b468 	.word	0x2000b468
 8011b4c:	0801edd8 	.word	0x0801edd8

08011b50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011b50:	b480      	push	{r7}
 8011b52:	b085      	sub	sp, #20
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	3b04      	subs	r3, #4
 8011b60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	3b04      	subs	r3, #4
 8011b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	f023 0201 	bic.w	r2, r3, #1
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	3b04      	subs	r3, #4
 8011b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011b80:	4a0c      	ldr	r2, [pc, #48]	@ (8011bb4 <pxPortInitialiseStack+0x64>)
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	3b14      	subs	r3, #20
 8011b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011b8c:	687a      	ldr	r2, [r7, #4]
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	3b04      	subs	r3, #4
 8011b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	f06f 0202 	mvn.w	r2, #2
 8011b9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	3b20      	subs	r3, #32
 8011ba4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3714      	adds	r7, #20
 8011bac:	46bd      	mov	sp, r7
 8011bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb2:	4770      	bx	lr
 8011bb4:	08011bb9 	.word	0x08011bb9

08011bb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b085      	sub	sp, #20
 8011bbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011bc2:	4b15      	ldr	r3, [pc, #84]	@ (8011c18 <prvTaskExitError+0x60>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bca:	d00d      	beq.n	8011be8 <prvTaskExitError+0x30>
	__asm volatile
 8011bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bd0:	b672      	cpsid	i
 8011bd2:	f383 8811 	msr	BASEPRI, r3
 8011bd6:	f3bf 8f6f 	isb	sy
 8011bda:	f3bf 8f4f 	dsb	sy
 8011bde:	b662      	cpsie	i
 8011be0:	60fb      	str	r3, [r7, #12]
}
 8011be2:	bf00      	nop
 8011be4:	bf00      	nop
 8011be6:	e7fd      	b.n	8011be4 <prvTaskExitError+0x2c>
	__asm volatile
 8011be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bec:	b672      	cpsid	i
 8011bee:	f383 8811 	msr	BASEPRI, r3
 8011bf2:	f3bf 8f6f 	isb	sy
 8011bf6:	f3bf 8f4f 	dsb	sy
 8011bfa:	b662      	cpsie	i
 8011bfc:	60bb      	str	r3, [r7, #8]
}
 8011bfe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011c00:	bf00      	nop
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d0fc      	beq.n	8011c02 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011c08:	bf00      	nop
 8011c0a:	bf00      	nop
 8011c0c:	3714      	adds	r7, #20
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr
 8011c16:	bf00      	nop
 8011c18:	20000020 	.word	0x20000020
 8011c1c:	00000000 	.word	0x00000000

08011c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011c20:	4b07      	ldr	r3, [pc, #28]	@ (8011c40 <pxCurrentTCBConst2>)
 8011c22:	6819      	ldr	r1, [r3, #0]
 8011c24:	6808      	ldr	r0, [r1, #0]
 8011c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c2a:	f380 8809 	msr	PSP, r0
 8011c2e:	f3bf 8f6f 	isb	sy
 8011c32:	f04f 0000 	mov.w	r0, #0
 8011c36:	f380 8811 	msr	BASEPRI, r0
 8011c3a:	4770      	bx	lr
 8011c3c:	f3af 8000 	nop.w

08011c40 <pxCurrentTCBConst2>:
 8011c40:	2000af2c 	.word	0x2000af2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011c44:	bf00      	nop
 8011c46:	bf00      	nop

08011c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011c48:	4808      	ldr	r0, [pc, #32]	@ (8011c6c <prvPortStartFirstTask+0x24>)
 8011c4a:	6800      	ldr	r0, [r0, #0]
 8011c4c:	6800      	ldr	r0, [r0, #0]
 8011c4e:	f380 8808 	msr	MSP, r0
 8011c52:	f04f 0000 	mov.w	r0, #0
 8011c56:	f380 8814 	msr	CONTROL, r0
 8011c5a:	b662      	cpsie	i
 8011c5c:	b661      	cpsie	f
 8011c5e:	f3bf 8f4f 	dsb	sy
 8011c62:	f3bf 8f6f 	isb	sy
 8011c66:	df00      	svc	0
 8011c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011c6a:	bf00      	nop
 8011c6c:	e000ed08 	.word	0xe000ed08

08011c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011c76:	4b37      	ldr	r3, [pc, #220]	@ (8011d54 <xPortStartScheduler+0xe4>)
 8011c78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	781b      	ldrb	r3, [r3, #0]
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	22ff      	movs	r2, #255	@ 0xff
 8011c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011c90:	78fb      	ldrb	r3, [r7, #3]
 8011c92:	b2db      	uxtb	r3, r3
 8011c94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011c98:	b2da      	uxtb	r2, r3
 8011c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8011d58 <xPortStartScheduler+0xe8>)
 8011c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8011d5c <xPortStartScheduler+0xec>)
 8011ca0:	2207      	movs	r2, #7
 8011ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011ca4:	e009      	b.n	8011cba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8011d5c <xPortStartScheduler+0xec>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	3b01      	subs	r3, #1
 8011cac:	4a2b      	ldr	r2, [pc, #172]	@ (8011d5c <xPortStartScheduler+0xec>)
 8011cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011cb0:	78fb      	ldrb	r3, [r7, #3]
 8011cb2:	b2db      	uxtb	r3, r3
 8011cb4:	005b      	lsls	r3, r3, #1
 8011cb6:	b2db      	uxtb	r3, r3
 8011cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011cba:	78fb      	ldrb	r3, [r7, #3]
 8011cbc:	b2db      	uxtb	r3, r3
 8011cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011cc2:	2b80      	cmp	r3, #128	@ 0x80
 8011cc4:	d0ef      	beq.n	8011ca6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011cc6:	4b25      	ldr	r3, [pc, #148]	@ (8011d5c <xPortStartScheduler+0xec>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f1c3 0307 	rsb	r3, r3, #7
 8011cce:	2b04      	cmp	r3, #4
 8011cd0:	d00d      	beq.n	8011cee <xPortStartScheduler+0x7e>
	__asm volatile
 8011cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cd6:	b672      	cpsid	i
 8011cd8:	f383 8811 	msr	BASEPRI, r3
 8011cdc:	f3bf 8f6f 	isb	sy
 8011ce0:	f3bf 8f4f 	dsb	sy
 8011ce4:	b662      	cpsie	i
 8011ce6:	60bb      	str	r3, [r7, #8]
}
 8011ce8:	bf00      	nop
 8011cea:	bf00      	nop
 8011cec:	e7fd      	b.n	8011cea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011cee:	4b1b      	ldr	r3, [pc, #108]	@ (8011d5c <xPortStartScheduler+0xec>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	021b      	lsls	r3, r3, #8
 8011cf4:	4a19      	ldr	r2, [pc, #100]	@ (8011d5c <xPortStartScheduler+0xec>)
 8011cf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011cf8:	4b18      	ldr	r3, [pc, #96]	@ (8011d5c <xPortStartScheduler+0xec>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011d00:	4a16      	ldr	r2, [pc, #88]	@ (8011d5c <xPortStartScheduler+0xec>)
 8011d02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	b2da      	uxtb	r2, r3
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011d0c:	4b14      	ldr	r3, [pc, #80]	@ (8011d60 <xPortStartScheduler+0xf0>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	4a13      	ldr	r2, [pc, #76]	@ (8011d60 <xPortStartScheduler+0xf0>)
 8011d12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011d16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011d18:	4b11      	ldr	r3, [pc, #68]	@ (8011d60 <xPortStartScheduler+0xf0>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	4a10      	ldr	r2, [pc, #64]	@ (8011d60 <xPortStartScheduler+0xf0>)
 8011d1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011d22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011d24:	f000 f8dc 	bl	8011ee0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011d28:	4b0e      	ldr	r3, [pc, #56]	@ (8011d64 <xPortStartScheduler+0xf4>)
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011d2e:	f000 f8fb 	bl	8011f28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011d32:	4b0d      	ldr	r3, [pc, #52]	@ (8011d68 <xPortStartScheduler+0xf8>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	4a0c      	ldr	r2, [pc, #48]	@ (8011d68 <xPortStartScheduler+0xf8>)
 8011d38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011d3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011d3e:	f7ff ff83 	bl	8011c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011d42:	f7fe fddf 	bl	8010904 <vTaskSwitchContext>
	prvTaskExitError();
 8011d46:	f7ff ff37 	bl	8011bb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011d4a:	2300      	movs	r3, #0
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3710      	adds	r7, #16
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	e000e400 	.word	0xe000e400
 8011d58:	2000b558 	.word	0x2000b558
 8011d5c:	2000b55c 	.word	0x2000b55c
 8011d60:	e000ed20 	.word	0xe000ed20
 8011d64:	20000020 	.word	0x20000020
 8011d68:	e000ef34 	.word	0xe000ef34

08011d6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b083      	sub	sp, #12
 8011d70:	af00      	add	r7, sp, #0
	__asm volatile
 8011d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d76:	b672      	cpsid	i
 8011d78:	f383 8811 	msr	BASEPRI, r3
 8011d7c:	f3bf 8f6f 	isb	sy
 8011d80:	f3bf 8f4f 	dsb	sy
 8011d84:	b662      	cpsie	i
 8011d86:	607b      	str	r3, [r7, #4]
}
 8011d88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011d8a:	4b11      	ldr	r3, [pc, #68]	@ (8011dd0 <vPortEnterCritical+0x64>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	3301      	adds	r3, #1
 8011d90:	4a0f      	ldr	r2, [pc, #60]	@ (8011dd0 <vPortEnterCritical+0x64>)
 8011d92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011d94:	4b0e      	ldr	r3, [pc, #56]	@ (8011dd0 <vPortEnterCritical+0x64>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b01      	cmp	r3, #1
 8011d9a:	d112      	bne.n	8011dc2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8011dd4 <vPortEnterCritical+0x68>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d00d      	beq.n	8011dc2 <vPortEnterCritical+0x56>
	__asm volatile
 8011da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011daa:	b672      	cpsid	i
 8011dac:	f383 8811 	msr	BASEPRI, r3
 8011db0:	f3bf 8f6f 	isb	sy
 8011db4:	f3bf 8f4f 	dsb	sy
 8011db8:	b662      	cpsie	i
 8011dba:	603b      	str	r3, [r7, #0]
}
 8011dbc:	bf00      	nop
 8011dbe:	bf00      	nop
 8011dc0:	e7fd      	b.n	8011dbe <vPortEnterCritical+0x52>
	}
}
 8011dc2:	bf00      	nop
 8011dc4:	370c      	adds	r7, #12
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dcc:	4770      	bx	lr
 8011dce:	bf00      	nop
 8011dd0:	20000020 	.word	0x20000020
 8011dd4:	e000ed04 	.word	0xe000ed04

08011dd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011dde:	4b13      	ldr	r3, [pc, #76]	@ (8011e2c <vPortExitCritical+0x54>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d10d      	bne.n	8011e02 <vPortExitCritical+0x2a>
	__asm volatile
 8011de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dea:	b672      	cpsid	i
 8011dec:	f383 8811 	msr	BASEPRI, r3
 8011df0:	f3bf 8f6f 	isb	sy
 8011df4:	f3bf 8f4f 	dsb	sy
 8011df8:	b662      	cpsie	i
 8011dfa:	607b      	str	r3, [r7, #4]
}
 8011dfc:	bf00      	nop
 8011dfe:	bf00      	nop
 8011e00:	e7fd      	b.n	8011dfe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8011e02:	4b0a      	ldr	r3, [pc, #40]	@ (8011e2c <vPortExitCritical+0x54>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	3b01      	subs	r3, #1
 8011e08:	4a08      	ldr	r2, [pc, #32]	@ (8011e2c <vPortExitCritical+0x54>)
 8011e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011e0c:	4b07      	ldr	r3, [pc, #28]	@ (8011e2c <vPortExitCritical+0x54>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d105      	bne.n	8011e20 <vPortExitCritical+0x48>
 8011e14:	2300      	movs	r3, #0
 8011e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	f383 8811 	msr	BASEPRI, r3
}
 8011e1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011e20:	bf00      	nop
 8011e22:	370c      	adds	r7, #12
 8011e24:	46bd      	mov	sp, r7
 8011e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2a:	4770      	bx	lr
 8011e2c:	20000020 	.word	0x20000020

08011e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011e30:	f3ef 8009 	mrs	r0, PSP
 8011e34:	f3bf 8f6f 	isb	sy
 8011e38:	4b15      	ldr	r3, [pc, #84]	@ (8011e90 <pxCurrentTCBConst>)
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	f01e 0f10 	tst.w	lr, #16
 8011e40:	bf08      	it	eq
 8011e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e4a:	6010      	str	r0, [r2, #0]
 8011e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011e54:	b672      	cpsid	i
 8011e56:	f380 8811 	msr	BASEPRI, r0
 8011e5a:	f3bf 8f4f 	dsb	sy
 8011e5e:	f3bf 8f6f 	isb	sy
 8011e62:	b662      	cpsie	i
 8011e64:	f7fe fd4e 	bl	8010904 <vTaskSwitchContext>
 8011e68:	f04f 0000 	mov.w	r0, #0
 8011e6c:	f380 8811 	msr	BASEPRI, r0
 8011e70:	bc09      	pop	{r0, r3}
 8011e72:	6819      	ldr	r1, [r3, #0]
 8011e74:	6808      	ldr	r0, [r1, #0]
 8011e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7a:	f01e 0f10 	tst.w	lr, #16
 8011e7e:	bf08      	it	eq
 8011e80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011e84:	f380 8809 	msr	PSP, r0
 8011e88:	f3bf 8f6f 	isb	sy
 8011e8c:	4770      	bx	lr
 8011e8e:	bf00      	nop

08011e90 <pxCurrentTCBConst>:
 8011e90:	2000af2c 	.word	0x2000af2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011e94:	bf00      	nop
 8011e96:	bf00      	nop

08011e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b082      	sub	sp, #8
 8011e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8011e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ea2:	b672      	cpsid	i
 8011ea4:	f383 8811 	msr	BASEPRI, r3
 8011ea8:	f3bf 8f6f 	isb	sy
 8011eac:	f3bf 8f4f 	dsb	sy
 8011eb0:	b662      	cpsie	i
 8011eb2:	607b      	str	r3, [r7, #4]
}
 8011eb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011eb6:	f7fe fc69 	bl	801078c <xTaskIncrementTick>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d003      	beq.n	8011ec8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011ec0:	4b06      	ldr	r3, [pc, #24]	@ (8011edc <SysTick_Handler+0x44>)
 8011ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ec6:	601a      	str	r2, [r3, #0]
 8011ec8:	2300      	movs	r3, #0
 8011eca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	f383 8811 	msr	BASEPRI, r3
}
 8011ed2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011ed4:	bf00      	nop
 8011ed6:	3708      	adds	r7, #8
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	e000ed04 	.word	0xe000ed04

08011ee0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8011f14 <vPortSetupTimerInterrupt+0x34>)
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011eea:	4b0b      	ldr	r3, [pc, #44]	@ (8011f18 <vPortSetupTimerInterrupt+0x38>)
 8011eec:	2200      	movs	r2, #0
 8011eee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8011f1c <vPortSetupTimerInterrupt+0x3c>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8011f20 <vPortSetupTimerInterrupt+0x40>)
 8011ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8011efa:	099b      	lsrs	r3, r3, #6
 8011efc:	4a09      	ldr	r2, [pc, #36]	@ (8011f24 <vPortSetupTimerInterrupt+0x44>)
 8011efe:	3b01      	subs	r3, #1
 8011f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011f02:	4b04      	ldr	r3, [pc, #16]	@ (8011f14 <vPortSetupTimerInterrupt+0x34>)
 8011f04:	2207      	movs	r2, #7
 8011f06:	601a      	str	r2, [r3, #0]
}
 8011f08:	bf00      	nop
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	e000e010 	.word	0xe000e010
 8011f18:	e000e018 	.word	0xe000e018
 8011f1c:	20000000 	.word	0x20000000
 8011f20:	10624dd3 	.word	0x10624dd3
 8011f24:	e000e014 	.word	0xe000e014

08011f28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011f28:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011f38 <vPortEnableVFP+0x10>
 8011f2c:	6801      	ldr	r1, [r0, #0]
 8011f2e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8011f32:	6001      	str	r1, [r0, #0]
 8011f34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011f36:	bf00      	nop
 8011f38:	e000ed88 	.word	0xe000ed88

08011f3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b085      	sub	sp, #20
 8011f40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011f42:	f3ef 8305 	mrs	r3, IPSR
 8011f46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	2b0f      	cmp	r3, #15
 8011f4c:	d917      	bls.n	8011f7e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8011fb8 <vPortValidateInterruptPriority+0x7c>)
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	4413      	add	r3, r2
 8011f54:	781b      	ldrb	r3, [r3, #0]
 8011f56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011f58:	4b18      	ldr	r3, [pc, #96]	@ (8011fbc <vPortValidateInterruptPriority+0x80>)
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	7afa      	ldrb	r2, [r7, #11]
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	d20d      	bcs.n	8011f7e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8011f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f66:	b672      	cpsid	i
 8011f68:	f383 8811 	msr	BASEPRI, r3
 8011f6c:	f3bf 8f6f 	isb	sy
 8011f70:	f3bf 8f4f 	dsb	sy
 8011f74:	b662      	cpsie	i
 8011f76:	607b      	str	r3, [r7, #4]
}
 8011f78:	bf00      	nop
 8011f7a:	bf00      	nop
 8011f7c:	e7fd      	b.n	8011f7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011f7e:	4b10      	ldr	r3, [pc, #64]	@ (8011fc0 <vPortValidateInterruptPriority+0x84>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011f86:	4b0f      	ldr	r3, [pc, #60]	@ (8011fc4 <vPortValidateInterruptPriority+0x88>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d90d      	bls.n	8011faa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8011f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f92:	b672      	cpsid	i
 8011f94:	f383 8811 	msr	BASEPRI, r3
 8011f98:	f3bf 8f6f 	isb	sy
 8011f9c:	f3bf 8f4f 	dsb	sy
 8011fa0:	b662      	cpsie	i
 8011fa2:	603b      	str	r3, [r7, #0]
}
 8011fa4:	bf00      	nop
 8011fa6:	bf00      	nop
 8011fa8:	e7fd      	b.n	8011fa6 <vPortValidateInterruptPriority+0x6a>
	}
 8011faa:	bf00      	nop
 8011fac:	3714      	adds	r7, #20
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop
 8011fb8:	e000e3f0 	.word	0xe000e3f0
 8011fbc:	2000b558 	.word	0x2000b558
 8011fc0:	e000ed0c 	.word	0xe000ed0c
 8011fc4:	2000b55c 	.word	0x2000b55c

08011fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b08a      	sub	sp, #40	@ 0x28
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011fd4:	f7fe fb0a 	bl	80105ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011fd8:	4b5d      	ldr	r3, [pc, #372]	@ (8012150 <pvPortMalloc+0x188>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d101      	bne.n	8011fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011fe0:	f000 f920 	bl	8012224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011fe4:	4b5b      	ldr	r3, [pc, #364]	@ (8012154 <pvPortMalloc+0x18c>)
 8011fe6:	681a      	ldr	r2, [r3, #0]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	4013      	ands	r3, r2
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	f040 8094 	bne.w	801211a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d020      	beq.n	801203a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8011ff8:	2208      	movs	r2, #8
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	4413      	add	r3, r2
 8011ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f003 0307 	and.w	r3, r3, #7
 8012006:	2b00      	cmp	r3, #0
 8012008:	d017      	beq.n	801203a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f023 0307 	bic.w	r3, r3, #7
 8012010:	3308      	adds	r3, #8
 8012012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f003 0307 	and.w	r3, r3, #7
 801201a:	2b00      	cmp	r3, #0
 801201c:	d00d      	beq.n	801203a <pvPortMalloc+0x72>
	__asm volatile
 801201e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012022:	b672      	cpsid	i
 8012024:	f383 8811 	msr	BASEPRI, r3
 8012028:	f3bf 8f6f 	isb	sy
 801202c:	f3bf 8f4f 	dsb	sy
 8012030:	b662      	cpsie	i
 8012032:	617b      	str	r3, [r7, #20]
}
 8012034:	bf00      	nop
 8012036:	bf00      	nop
 8012038:	e7fd      	b.n	8012036 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d06c      	beq.n	801211a <pvPortMalloc+0x152>
 8012040:	4b45      	ldr	r3, [pc, #276]	@ (8012158 <pvPortMalloc+0x190>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	429a      	cmp	r2, r3
 8012048:	d867      	bhi.n	801211a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801204a:	4b44      	ldr	r3, [pc, #272]	@ (801215c <pvPortMalloc+0x194>)
 801204c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801204e:	4b43      	ldr	r3, [pc, #268]	@ (801215c <pvPortMalloc+0x194>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012054:	e004      	b.n	8012060 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8012056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012058:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	429a      	cmp	r2, r3
 8012068:	d903      	bls.n	8012072 <pvPortMalloc+0xaa>
 801206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d1f1      	bne.n	8012056 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012072:	4b37      	ldr	r3, [pc, #220]	@ (8012150 <pvPortMalloc+0x188>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012078:	429a      	cmp	r2, r3
 801207a:	d04e      	beq.n	801211a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801207c:	6a3b      	ldr	r3, [r7, #32]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	2208      	movs	r2, #8
 8012082:	4413      	add	r3, r2
 8012084:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012088:	681a      	ldr	r2, [r3, #0]
 801208a:	6a3b      	ldr	r3, [r7, #32]
 801208c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012090:	685a      	ldr	r2, [r3, #4]
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	1ad2      	subs	r2, r2, r3
 8012096:	2308      	movs	r3, #8
 8012098:	005b      	lsls	r3, r3, #1
 801209a:	429a      	cmp	r2, r3
 801209c:	d922      	bls.n	80120e4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801209e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	4413      	add	r3, r2
 80120a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	f003 0307 	and.w	r3, r3, #7
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d00d      	beq.n	80120cc <pvPortMalloc+0x104>
	__asm volatile
 80120b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120b4:	b672      	cpsid	i
 80120b6:	f383 8811 	msr	BASEPRI, r3
 80120ba:	f3bf 8f6f 	isb	sy
 80120be:	f3bf 8f4f 	dsb	sy
 80120c2:	b662      	cpsie	i
 80120c4:	613b      	str	r3, [r7, #16]
}
 80120c6:	bf00      	nop
 80120c8:	bf00      	nop
 80120ca:	e7fd      	b.n	80120c8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80120cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ce:	685a      	ldr	r2, [r3, #4]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	1ad2      	subs	r2, r2, r3
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80120d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120da:	687a      	ldr	r2, [r7, #4]
 80120dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80120de:	69b8      	ldr	r0, [r7, #24]
 80120e0:	f000 f902 	bl	80122e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80120e4:	4b1c      	ldr	r3, [pc, #112]	@ (8012158 <pvPortMalloc+0x190>)
 80120e6:	681a      	ldr	r2, [r3, #0]
 80120e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	1ad3      	subs	r3, r2, r3
 80120ee:	4a1a      	ldr	r2, [pc, #104]	@ (8012158 <pvPortMalloc+0x190>)
 80120f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80120f2:	4b19      	ldr	r3, [pc, #100]	@ (8012158 <pvPortMalloc+0x190>)
 80120f4:	681a      	ldr	r2, [r3, #0]
 80120f6:	4b1a      	ldr	r3, [pc, #104]	@ (8012160 <pvPortMalloc+0x198>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d203      	bcs.n	8012106 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80120fe:	4b16      	ldr	r3, [pc, #88]	@ (8012158 <pvPortMalloc+0x190>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	4a17      	ldr	r2, [pc, #92]	@ (8012160 <pvPortMalloc+0x198>)
 8012104:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012108:	685a      	ldr	r2, [r3, #4]
 801210a:	4b12      	ldr	r3, [pc, #72]	@ (8012154 <pvPortMalloc+0x18c>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	431a      	orrs	r2, r3
 8012110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012112:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012116:	2200      	movs	r2, #0
 8012118:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801211a:	f7fe fa75 	bl	8010608 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801211e:	69fb      	ldr	r3, [r7, #28]
 8012120:	f003 0307 	and.w	r3, r3, #7
 8012124:	2b00      	cmp	r3, #0
 8012126:	d00d      	beq.n	8012144 <pvPortMalloc+0x17c>
	__asm volatile
 8012128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801212c:	b672      	cpsid	i
 801212e:	f383 8811 	msr	BASEPRI, r3
 8012132:	f3bf 8f6f 	isb	sy
 8012136:	f3bf 8f4f 	dsb	sy
 801213a:	b662      	cpsie	i
 801213c:	60fb      	str	r3, [r7, #12]
}
 801213e:	bf00      	nop
 8012140:	bf00      	nop
 8012142:	e7fd      	b.n	8012140 <pvPortMalloc+0x178>
	return pvReturn;
 8012144:	69fb      	ldr	r3, [r7, #28]
}
 8012146:	4618      	mov	r0, r3
 8012148:	3728      	adds	r7, #40	@ 0x28
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}
 801214e:	bf00      	nop
 8012150:	20024568 	.word	0x20024568
 8012154:	20024574 	.word	0x20024574
 8012158:	2002456c 	.word	0x2002456c
 801215c:	20024560 	.word	0x20024560
 8012160:	20024570 	.word	0x20024570

08012164 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b086      	sub	sp, #24
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d04e      	beq.n	8012214 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012176:	2308      	movs	r3, #8
 8012178:	425b      	negs	r3, r3
 801217a:	697a      	ldr	r2, [r7, #20]
 801217c:	4413      	add	r3, r2
 801217e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	685a      	ldr	r2, [r3, #4]
 8012188:	4b24      	ldr	r3, [pc, #144]	@ (801221c <vPortFree+0xb8>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	4013      	ands	r3, r2
 801218e:	2b00      	cmp	r3, #0
 8012190:	d10d      	bne.n	80121ae <vPortFree+0x4a>
	__asm volatile
 8012192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012196:	b672      	cpsid	i
 8012198:	f383 8811 	msr	BASEPRI, r3
 801219c:	f3bf 8f6f 	isb	sy
 80121a0:	f3bf 8f4f 	dsb	sy
 80121a4:	b662      	cpsie	i
 80121a6:	60fb      	str	r3, [r7, #12]
}
 80121a8:	bf00      	nop
 80121aa:	bf00      	nop
 80121ac:	e7fd      	b.n	80121aa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d00d      	beq.n	80121d2 <vPortFree+0x6e>
	__asm volatile
 80121b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121ba:	b672      	cpsid	i
 80121bc:	f383 8811 	msr	BASEPRI, r3
 80121c0:	f3bf 8f6f 	isb	sy
 80121c4:	f3bf 8f4f 	dsb	sy
 80121c8:	b662      	cpsie	i
 80121ca:	60bb      	str	r3, [r7, #8]
}
 80121cc:	bf00      	nop
 80121ce:	bf00      	nop
 80121d0:	e7fd      	b.n	80121ce <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	685a      	ldr	r2, [r3, #4]
 80121d6:	4b11      	ldr	r3, [pc, #68]	@ (801221c <vPortFree+0xb8>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	4013      	ands	r3, r2
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d019      	beq.n	8012214 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d115      	bne.n	8012214 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	685a      	ldr	r2, [r3, #4]
 80121ec:	4b0b      	ldr	r3, [pc, #44]	@ (801221c <vPortFree+0xb8>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	43db      	mvns	r3, r3
 80121f2:	401a      	ands	r2, r3
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80121f8:	f7fe f9f8 	bl	80105ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	685a      	ldr	r2, [r3, #4]
 8012200:	4b07      	ldr	r3, [pc, #28]	@ (8012220 <vPortFree+0xbc>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	4413      	add	r3, r2
 8012206:	4a06      	ldr	r2, [pc, #24]	@ (8012220 <vPortFree+0xbc>)
 8012208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801220a:	6938      	ldr	r0, [r7, #16]
 801220c:	f000 f86c 	bl	80122e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012210:	f7fe f9fa 	bl	8010608 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012214:	bf00      	nop
 8012216:	3718      	adds	r7, #24
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}
 801221c:	20024574 	.word	0x20024574
 8012220:	2002456c 	.word	0x2002456c

08012224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012224:	b480      	push	{r7}
 8012226:	b085      	sub	sp, #20
 8012228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801222a:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 801222e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012230:	4b27      	ldr	r3, [pc, #156]	@ (80122d0 <prvHeapInit+0xac>)
 8012232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	f003 0307 	and.w	r3, r3, #7
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00c      	beq.n	8012258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	3307      	adds	r3, #7
 8012242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	f023 0307 	bic.w	r3, r3, #7
 801224a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801224c:	68ba      	ldr	r2, [r7, #8]
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	1ad3      	subs	r3, r2, r3
 8012252:	4a1f      	ldr	r2, [pc, #124]	@ (80122d0 <prvHeapInit+0xac>)
 8012254:	4413      	add	r3, r2
 8012256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801225c:	4a1d      	ldr	r2, [pc, #116]	@ (80122d4 <prvHeapInit+0xb0>)
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012262:	4b1c      	ldr	r3, [pc, #112]	@ (80122d4 <prvHeapInit+0xb0>)
 8012264:	2200      	movs	r2, #0
 8012266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	68ba      	ldr	r2, [r7, #8]
 801226c:	4413      	add	r3, r2
 801226e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012270:	2208      	movs	r2, #8
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	1a9b      	subs	r3, r3, r2
 8012276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	f023 0307 	bic.w	r3, r3, #7
 801227e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	4a15      	ldr	r2, [pc, #84]	@ (80122d8 <prvHeapInit+0xb4>)
 8012284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012286:	4b14      	ldr	r3, [pc, #80]	@ (80122d8 <prvHeapInit+0xb4>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	2200      	movs	r2, #0
 801228c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801228e:	4b12      	ldr	r3, [pc, #72]	@ (80122d8 <prvHeapInit+0xb4>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	2200      	movs	r2, #0
 8012294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	68fa      	ldr	r2, [r7, #12]
 801229e:	1ad2      	subs	r2, r2, r3
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80122a4:	4b0c      	ldr	r3, [pc, #48]	@ (80122d8 <prvHeapInit+0xb4>)
 80122a6:	681a      	ldr	r2, [r3, #0]
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	685b      	ldr	r3, [r3, #4]
 80122b0:	4a0a      	ldr	r2, [pc, #40]	@ (80122dc <prvHeapInit+0xb8>)
 80122b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	4a09      	ldr	r2, [pc, #36]	@ (80122e0 <prvHeapInit+0xbc>)
 80122ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80122bc:	4b09      	ldr	r3, [pc, #36]	@ (80122e4 <prvHeapInit+0xc0>)
 80122be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80122c2:	601a      	str	r2, [r3, #0]
}
 80122c4:	bf00      	nop
 80122c6:	3714      	adds	r7, #20
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr
 80122d0:	2000b560 	.word	0x2000b560
 80122d4:	20024560 	.word	0x20024560
 80122d8:	20024568 	.word	0x20024568
 80122dc:	20024570 	.word	0x20024570
 80122e0:	2002456c 	.word	0x2002456c
 80122e4:	20024574 	.word	0x20024574

080122e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80122e8:	b480      	push	{r7}
 80122ea:	b085      	sub	sp, #20
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80122f0:	4b28      	ldr	r3, [pc, #160]	@ (8012394 <prvInsertBlockIntoFreeList+0xac>)
 80122f2:	60fb      	str	r3, [r7, #12]
 80122f4:	e002      	b.n	80122fc <prvInsertBlockIntoFreeList+0x14>
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	60fb      	str	r3, [r7, #12]
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	429a      	cmp	r2, r3
 8012304:	d8f7      	bhi.n	80122f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	685b      	ldr	r3, [r3, #4]
 801230e:	68ba      	ldr	r2, [r7, #8]
 8012310:	4413      	add	r3, r2
 8012312:	687a      	ldr	r2, [r7, #4]
 8012314:	429a      	cmp	r2, r3
 8012316:	d108      	bne.n	801232a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	685a      	ldr	r2, [r3, #4]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	441a      	add	r2, r3
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	68ba      	ldr	r2, [r7, #8]
 8012334:	441a      	add	r2, r3
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	429a      	cmp	r2, r3
 801233c:	d118      	bne.n	8012370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	4b15      	ldr	r3, [pc, #84]	@ (8012398 <prvInsertBlockIntoFreeList+0xb0>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	429a      	cmp	r2, r3
 8012348:	d00d      	beq.n	8012366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	685a      	ldr	r2, [r3, #4]
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	441a      	add	r2, r3
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	681a      	ldr	r2, [r3, #0]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	601a      	str	r2, [r3, #0]
 8012364:	e008      	b.n	8012378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012366:	4b0c      	ldr	r3, [pc, #48]	@ (8012398 <prvInsertBlockIntoFreeList+0xb0>)
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	601a      	str	r2, [r3, #0]
 801236e:	e003      	b.n	8012378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	681a      	ldr	r2, [r3, #0]
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012378:	68fa      	ldr	r2, [r7, #12]
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	429a      	cmp	r2, r3
 801237e:	d002      	beq.n	8012386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	687a      	ldr	r2, [r7, #4]
 8012384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012386:	bf00      	nop
 8012388:	3714      	adds	r7, #20
 801238a:	46bd      	mov	sp, r7
 801238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012390:	4770      	bx	lr
 8012392:	bf00      	nop
 8012394:	20024560 	.word	0x20024560
 8012398:	20024568 	.word	0x20024568

0801239c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80123a6:	f007 facd 	bl	8019944 <sys_timeouts_sleeptime>
 80123aa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123b2:	d10b      	bne.n	80123cc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80123b4:	4813      	ldr	r0, [pc, #76]	@ (8012404 <tcpip_timeouts_mbox_fetch+0x68>)
 80123b6:	f00a fad2 	bl	801c95e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80123ba:	2200      	movs	r2, #0
 80123bc:	6839      	ldr	r1, [r7, #0]
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f00a fa5a 	bl	801c878 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80123c4:	480f      	ldr	r0, [pc, #60]	@ (8012404 <tcpip_timeouts_mbox_fetch+0x68>)
 80123c6:	f00a fabb 	bl	801c940 <sys_mutex_lock>
    return;
 80123ca:	e018      	b.n	80123fe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d102      	bne.n	80123d8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80123d2:	f007 fa7d 	bl	80198d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80123d6:	e7e6      	b.n	80123a6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80123d8:	480a      	ldr	r0, [pc, #40]	@ (8012404 <tcpip_timeouts_mbox_fetch+0x68>)
 80123da:	f00a fac0 	bl	801c95e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80123de:	68fa      	ldr	r2, [r7, #12]
 80123e0:	6839      	ldr	r1, [r7, #0]
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f00a fa48 	bl	801c878 <sys_arch_mbox_fetch>
 80123e8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80123ea:	4806      	ldr	r0, [pc, #24]	@ (8012404 <tcpip_timeouts_mbox_fetch+0x68>)
 80123ec:	f00a faa8 	bl	801c940 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123f6:	d102      	bne.n	80123fe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80123f8:	f007 fa6a 	bl	80198d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80123fc:	e7d3      	b.n	80123a6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80123fe:	3710      	adds	r7, #16
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	20024584 	.word	0x20024584

08012408 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b084      	sub	sp, #16
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012410:	4810      	ldr	r0, [pc, #64]	@ (8012454 <tcpip_thread+0x4c>)
 8012412:	f00a fa95 	bl	801c940 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012416:	4b10      	ldr	r3, [pc, #64]	@ (8012458 <tcpip_thread+0x50>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d005      	beq.n	801242a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801241e:	4b0e      	ldr	r3, [pc, #56]	@ (8012458 <tcpip_thread+0x50>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	4a0e      	ldr	r2, [pc, #56]	@ (801245c <tcpip_thread+0x54>)
 8012424:	6812      	ldr	r2, [r2, #0]
 8012426:	4610      	mov	r0, r2
 8012428:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801242a:	f107 030c 	add.w	r3, r7, #12
 801242e:	4619      	mov	r1, r3
 8012430:	480b      	ldr	r0, [pc, #44]	@ (8012460 <tcpip_thread+0x58>)
 8012432:	f7ff ffb3 	bl	801239c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d106      	bne.n	801244a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801243c:	4b09      	ldr	r3, [pc, #36]	@ (8012464 <tcpip_thread+0x5c>)
 801243e:	2291      	movs	r2, #145	@ 0x91
 8012440:	4909      	ldr	r1, [pc, #36]	@ (8012468 <tcpip_thread+0x60>)
 8012442:	480a      	ldr	r0, [pc, #40]	@ (801246c <tcpip_thread+0x64>)
 8012444:	f00b fc46 	bl	801dcd4 <iprintf>
      continue;
 8012448:	e003      	b.n	8012452 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	4618      	mov	r0, r3
 801244e:	f000 f80f 	bl	8012470 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012452:	e7ea      	b.n	801242a <tcpip_thread+0x22>
 8012454:	20024584 	.word	0x20024584
 8012458:	20024578 	.word	0x20024578
 801245c:	2002457c 	.word	0x2002457c
 8012460:	20024580 	.word	0x20024580
 8012464:	0801ede0 	.word	0x0801ede0
 8012468:	0801ee10 	.word	0x0801ee10
 801246c:	0801ee30 	.word	0x0801ee30

08012470 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	2b02      	cmp	r3, #2
 801247e:	d026      	beq.n	80124ce <tcpip_thread_handle_msg+0x5e>
 8012480:	2b02      	cmp	r3, #2
 8012482:	dc2b      	bgt.n	80124dc <tcpip_thread_handle_msg+0x6c>
 8012484:	2b00      	cmp	r3, #0
 8012486:	d002      	beq.n	801248e <tcpip_thread_handle_msg+0x1e>
 8012488:	2b01      	cmp	r3, #1
 801248a:	d015      	beq.n	80124b8 <tcpip_thread_handle_msg+0x48>
 801248c:	e026      	b.n	80124dc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	68db      	ldr	r3, [r3, #12]
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	6850      	ldr	r0, [r2, #4]
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	6892      	ldr	r2, [r2, #8]
 801249a:	4611      	mov	r1, r2
 801249c:	4798      	blx	r3
 801249e:	4603      	mov	r3, r0
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d004      	beq.n	80124ae <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	4618      	mov	r0, r3
 80124aa:	f001 fd07 	bl	8013ebc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80124ae:	6879      	ldr	r1, [r7, #4]
 80124b0:	2009      	movs	r0, #9
 80124b2:	f000 fe5f 	bl	8013174 <memp_free>
      break;
 80124b6:	e018      	b.n	80124ea <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	685b      	ldr	r3, [r3, #4]
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	6892      	ldr	r2, [r2, #8]
 80124c0:	4610      	mov	r0, r2
 80124c2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80124c4:	6879      	ldr	r1, [r7, #4]
 80124c6:	2008      	movs	r0, #8
 80124c8:	f000 fe54 	bl	8013174 <memp_free>
      break;
 80124cc:	e00d      	b.n	80124ea <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	685b      	ldr	r3, [r3, #4]
 80124d2:	687a      	ldr	r2, [r7, #4]
 80124d4:	6892      	ldr	r2, [r2, #8]
 80124d6:	4610      	mov	r0, r2
 80124d8:	4798      	blx	r3
      break;
 80124da:	e006      	b.n	80124ea <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80124dc:	4b05      	ldr	r3, [pc, #20]	@ (80124f4 <tcpip_thread_handle_msg+0x84>)
 80124de:	22cf      	movs	r2, #207	@ 0xcf
 80124e0:	4905      	ldr	r1, [pc, #20]	@ (80124f8 <tcpip_thread_handle_msg+0x88>)
 80124e2:	4806      	ldr	r0, [pc, #24]	@ (80124fc <tcpip_thread_handle_msg+0x8c>)
 80124e4:	f00b fbf6 	bl	801dcd4 <iprintf>
      break;
 80124e8:	bf00      	nop
  }
}
 80124ea:	bf00      	nop
 80124ec:	3708      	adds	r7, #8
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
 80124f2:	bf00      	nop
 80124f4:	0801ede0 	.word	0x0801ede0
 80124f8:	0801ee10 	.word	0x0801ee10
 80124fc:	0801ee30 	.word	0x0801ee30

08012500 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b086      	sub	sp, #24
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801250c:	481a      	ldr	r0, [pc, #104]	@ (8012578 <tcpip_inpkt+0x78>)
 801250e:	f00a f9e4 	bl	801c8da <sys_mbox_valid>
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d105      	bne.n	8012524 <tcpip_inpkt+0x24>
 8012518:	4b18      	ldr	r3, [pc, #96]	@ (801257c <tcpip_inpkt+0x7c>)
 801251a:	22fc      	movs	r2, #252	@ 0xfc
 801251c:	4918      	ldr	r1, [pc, #96]	@ (8012580 <tcpip_inpkt+0x80>)
 801251e:	4819      	ldr	r0, [pc, #100]	@ (8012584 <tcpip_inpkt+0x84>)
 8012520:	f00b fbd8 	bl	801dcd4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012524:	2009      	movs	r0, #9
 8012526:	f000 fdaf 	bl	8013088 <memp_malloc>
 801252a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d102      	bne.n	8012538 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012532:	f04f 33ff 	mov.w	r3, #4294967295
 8012536:	e01a      	b.n	801256e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	2200      	movs	r2, #0
 801253c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	68fa      	ldr	r2, [r7, #12]
 8012542:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	68ba      	ldr	r2, [r7, #8]
 8012548:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	687a      	ldr	r2, [r7, #4]
 801254e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012550:	6979      	ldr	r1, [r7, #20]
 8012552:	4809      	ldr	r0, [pc, #36]	@ (8012578 <tcpip_inpkt+0x78>)
 8012554:	f00a f976 	bl	801c844 <sys_mbox_trypost>
 8012558:	4603      	mov	r3, r0
 801255a:	2b00      	cmp	r3, #0
 801255c:	d006      	beq.n	801256c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801255e:	6979      	ldr	r1, [r7, #20]
 8012560:	2009      	movs	r0, #9
 8012562:	f000 fe07 	bl	8013174 <memp_free>
    return ERR_MEM;
 8012566:	f04f 33ff 	mov.w	r3, #4294967295
 801256a:	e000      	b.n	801256e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801256c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801256e:	4618      	mov	r0, r3
 8012570:	3718      	adds	r7, #24
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop
 8012578:	20024580 	.word	0x20024580
 801257c:	0801ede0 	.word	0x0801ede0
 8012580:	0801ee58 	.word	0x0801ee58
 8012584:	0801ee30 	.word	0x0801ee30

08012588 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012598:	f003 0318 	and.w	r3, r3, #24
 801259c:	2b00      	cmp	r3, #0
 801259e:	d006      	beq.n	80125ae <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80125a0:	4a08      	ldr	r2, [pc, #32]	@ (80125c4 <tcpip_input+0x3c>)
 80125a2:	6839      	ldr	r1, [r7, #0]
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7ff ffab 	bl	8012500 <tcpip_inpkt>
 80125aa:	4603      	mov	r3, r0
 80125ac:	e005      	b.n	80125ba <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80125ae:	4a06      	ldr	r2, [pc, #24]	@ (80125c8 <tcpip_input+0x40>)
 80125b0:	6839      	ldr	r1, [r7, #0]
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f7ff ffa4 	bl	8012500 <tcpip_inpkt>
 80125b8:	4603      	mov	r3, r0
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3708      	adds	r7, #8
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
 80125c2:	bf00      	nop
 80125c4:	0801c665 	.word	0x0801c665
 80125c8:	0801b56d 	.word	0x0801b56d

080125cc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80125d6:	4819      	ldr	r0, [pc, #100]	@ (801263c <tcpip_try_callback+0x70>)
 80125d8:	f00a f97f 	bl	801c8da <sys_mbox_valid>
 80125dc:	4603      	mov	r3, r0
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d106      	bne.n	80125f0 <tcpip_try_callback+0x24>
 80125e2:	4b17      	ldr	r3, [pc, #92]	@ (8012640 <tcpip_try_callback+0x74>)
 80125e4:	f240 125d 	movw	r2, #349	@ 0x15d
 80125e8:	4916      	ldr	r1, [pc, #88]	@ (8012644 <tcpip_try_callback+0x78>)
 80125ea:	4817      	ldr	r0, [pc, #92]	@ (8012648 <tcpip_try_callback+0x7c>)
 80125ec:	f00b fb72 	bl	801dcd4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80125f0:	2008      	movs	r0, #8
 80125f2:	f000 fd49 	bl	8013088 <memp_malloc>
 80125f6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d102      	bne.n	8012604 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80125fe:	f04f 33ff 	mov.w	r3, #4294967295
 8012602:	e017      	b.n	8012634 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	2201      	movs	r2, #1
 8012608:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	683a      	ldr	r2, [r7, #0]
 8012614:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012616:	68f9      	ldr	r1, [r7, #12]
 8012618:	4808      	ldr	r0, [pc, #32]	@ (801263c <tcpip_try_callback+0x70>)
 801261a:	f00a f913 	bl	801c844 <sys_mbox_trypost>
 801261e:	4603      	mov	r3, r0
 8012620:	2b00      	cmp	r3, #0
 8012622:	d006      	beq.n	8012632 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012624:	68f9      	ldr	r1, [r7, #12]
 8012626:	2008      	movs	r0, #8
 8012628:	f000 fda4 	bl	8013174 <memp_free>
    return ERR_MEM;
 801262c:	f04f 33ff 	mov.w	r3, #4294967295
 8012630:	e000      	b.n	8012634 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012632:	2300      	movs	r3, #0
}
 8012634:	4618      	mov	r0, r3
 8012636:	3710      	adds	r7, #16
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	20024580 	.word	0x20024580
 8012640:	0801ede0 	.word	0x0801ede0
 8012644:	0801ee58 	.word	0x0801ee58
 8012648:	0801ee30 	.word	0x0801ee30

0801264c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b084      	sub	sp, #16
 8012650:	af02      	add	r7, sp, #8
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012656:	f000 f872 	bl	801273e <lwip_init>

  tcpip_init_done = initfunc;
 801265a:	4a17      	ldr	r2, [pc, #92]	@ (80126b8 <tcpip_init+0x6c>)
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012660:	4a16      	ldr	r2, [pc, #88]	@ (80126bc <tcpip_init+0x70>)
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012666:	2106      	movs	r1, #6
 8012668:	4815      	ldr	r0, [pc, #84]	@ (80126c0 <tcpip_init+0x74>)
 801266a:	f00a f8d1 	bl	801c810 <sys_mbox_new>
 801266e:	4603      	mov	r3, r0
 8012670:	2b00      	cmp	r3, #0
 8012672:	d006      	beq.n	8012682 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012674:	4b13      	ldr	r3, [pc, #76]	@ (80126c4 <tcpip_init+0x78>)
 8012676:	f240 2261 	movw	r2, #609	@ 0x261
 801267a:	4913      	ldr	r1, [pc, #76]	@ (80126c8 <tcpip_init+0x7c>)
 801267c:	4813      	ldr	r0, [pc, #76]	@ (80126cc <tcpip_init+0x80>)
 801267e:	f00b fb29 	bl	801dcd4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012682:	4813      	ldr	r0, [pc, #76]	@ (80126d0 <tcpip_init+0x84>)
 8012684:	f00a f946 	bl	801c914 <sys_mutex_new>
 8012688:	4603      	mov	r3, r0
 801268a:	2b00      	cmp	r3, #0
 801268c:	d006      	beq.n	801269c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801268e:	4b0d      	ldr	r3, [pc, #52]	@ (80126c4 <tcpip_init+0x78>)
 8012690:	f240 2265 	movw	r2, #613	@ 0x265
 8012694:	490f      	ldr	r1, [pc, #60]	@ (80126d4 <tcpip_init+0x88>)
 8012696:	480d      	ldr	r0, [pc, #52]	@ (80126cc <tcpip_init+0x80>)
 8012698:	f00b fb1c 	bl	801dcd4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801269c:	2318      	movs	r3, #24
 801269e:	9300      	str	r3, [sp, #0]
 80126a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80126a4:	2200      	movs	r2, #0
 80126a6:	490c      	ldr	r1, [pc, #48]	@ (80126d8 <tcpip_init+0x8c>)
 80126a8:	480c      	ldr	r0, [pc, #48]	@ (80126dc <tcpip_init+0x90>)
 80126aa:	f00a f965 	bl	801c978 <sys_thread_new>
}
 80126ae:	bf00      	nop
 80126b0:	3708      	adds	r7, #8
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop
 80126b8:	20024578 	.word	0x20024578
 80126bc:	2002457c 	.word	0x2002457c
 80126c0:	20024580 	.word	0x20024580
 80126c4:	0801ede0 	.word	0x0801ede0
 80126c8:	0801ee68 	.word	0x0801ee68
 80126cc:	0801ee30 	.word	0x0801ee30
 80126d0:	20024584 	.word	0x20024584
 80126d4:	0801ee8c 	.word	0x0801ee8c
 80126d8:	08012409 	.word	0x08012409
 80126dc:	0801eeb0 	.word	0x0801eeb0

080126e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80126e0:	b480      	push	{r7}
 80126e2:	b083      	sub	sp, #12
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	4603      	mov	r3, r0
 80126e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80126ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126ee:	021b      	lsls	r3, r3, #8
 80126f0:	b21a      	sxth	r2, r3
 80126f2:	88fb      	ldrh	r3, [r7, #6]
 80126f4:	0a1b      	lsrs	r3, r3, #8
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	b21b      	sxth	r3, r3
 80126fa:	4313      	orrs	r3, r2
 80126fc:	b21b      	sxth	r3, r3
 80126fe:	b29b      	uxth	r3, r3
}
 8012700:	4618      	mov	r0, r3
 8012702:	370c      	adds	r7, #12
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr

0801270c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	061a      	lsls	r2, r3, #24
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	021b      	lsls	r3, r3, #8
 801271c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012720:	431a      	orrs	r2, r3
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	0a1b      	lsrs	r3, r3, #8
 8012726:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801272a:	431a      	orrs	r2, r3
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	0e1b      	lsrs	r3, r3, #24
 8012730:	4313      	orrs	r3, r2
}
 8012732:	4618      	mov	r0, r3
 8012734:	370c      	adds	r7, #12
 8012736:	46bd      	mov	sp, r7
 8012738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273c:	4770      	bx	lr

0801273e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801273e:	b580      	push	{r7, lr}
 8012740:	b082      	sub	sp, #8
 8012742:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012744:	2300      	movs	r3, #0
 8012746:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012748:	f00a f8d8 	bl	801c8fc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801274c:	f000 f8d4 	bl	80128f8 <mem_init>
  memp_init();
 8012750:	f000 fc2c 	bl	8012fac <memp_init>
  pbuf_init();
  netif_init();
 8012754:	f000 fd38 	bl	80131c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012758:	f007 f92c 	bl	80199b4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801275c:	f001 fe58 	bl	8014410 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012760:	f007 f86e 	bl	8019840 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012764:	bf00      	nop
 8012766:	3708      	adds	r7, #8
 8012768:	46bd      	mov	sp, r7
 801276a:	bd80      	pop	{r7, pc}

0801276c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
 8012772:	4603      	mov	r3, r0
 8012774:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012776:	4b05      	ldr	r3, [pc, #20]	@ (801278c <ptr_to_mem+0x20>)
 8012778:	681a      	ldr	r2, [r3, #0]
 801277a:	88fb      	ldrh	r3, [r7, #6]
 801277c:	4413      	add	r3, r2
}
 801277e:	4618      	mov	r0, r3
 8012780:	370c      	adds	r7, #12
 8012782:	46bd      	mov	sp, r7
 8012784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012788:	4770      	bx	lr
 801278a:	bf00      	nop
 801278c:	200245a0 	.word	0x200245a0

08012790 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012790:	b480      	push	{r7}
 8012792:	b083      	sub	sp, #12
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012798:	4b05      	ldr	r3, [pc, #20]	@ (80127b0 <mem_to_ptr+0x20>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	687a      	ldr	r2, [r7, #4]
 801279e:	1ad3      	subs	r3, r2, r3
 80127a0:	b29b      	uxth	r3, r3
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	370c      	adds	r7, #12
 80127a6:	46bd      	mov	sp, r7
 80127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	200245a0 	.word	0x200245a0

080127b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80127b4:	b590      	push	{r4, r7, lr}
 80127b6:	b085      	sub	sp, #20
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80127bc:	4b45      	ldr	r3, [pc, #276]	@ (80128d4 <plug_holes+0x120>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	687a      	ldr	r2, [r7, #4]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d206      	bcs.n	80127d4 <plug_holes+0x20>
 80127c6:	4b44      	ldr	r3, [pc, #272]	@ (80128d8 <plug_holes+0x124>)
 80127c8:	f240 12df 	movw	r2, #479	@ 0x1df
 80127cc:	4943      	ldr	r1, [pc, #268]	@ (80128dc <plug_holes+0x128>)
 80127ce:	4844      	ldr	r0, [pc, #272]	@ (80128e0 <plug_holes+0x12c>)
 80127d0:	f00b fa80 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80127d4:	4b43      	ldr	r3, [pc, #268]	@ (80128e4 <plug_holes+0x130>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	687a      	ldr	r2, [r7, #4]
 80127da:	429a      	cmp	r2, r3
 80127dc:	d306      	bcc.n	80127ec <plug_holes+0x38>
 80127de:	4b3e      	ldr	r3, [pc, #248]	@ (80128d8 <plug_holes+0x124>)
 80127e0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80127e4:	4940      	ldr	r1, [pc, #256]	@ (80128e8 <plug_holes+0x134>)
 80127e6:	483e      	ldr	r0, [pc, #248]	@ (80128e0 <plug_holes+0x12c>)
 80127e8:	f00b fa74 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	791b      	ldrb	r3, [r3, #4]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d006      	beq.n	8012802 <plug_holes+0x4e>
 80127f4:	4b38      	ldr	r3, [pc, #224]	@ (80128d8 <plug_holes+0x124>)
 80127f6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80127fa:	493c      	ldr	r1, [pc, #240]	@ (80128ec <plug_holes+0x138>)
 80127fc:	4838      	ldr	r0, [pc, #224]	@ (80128e0 <plug_holes+0x12c>)
 80127fe:	f00b fa69 	bl	801dcd4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801280a:	d906      	bls.n	801281a <plug_holes+0x66>
 801280c:	4b32      	ldr	r3, [pc, #200]	@ (80128d8 <plug_holes+0x124>)
 801280e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012812:	4937      	ldr	r1, [pc, #220]	@ (80128f0 <plug_holes+0x13c>)
 8012814:	4832      	ldr	r0, [pc, #200]	@ (80128e0 <plug_holes+0x12c>)
 8012816:	f00b fa5d 	bl	801dcd4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	881b      	ldrh	r3, [r3, #0]
 801281e:	4618      	mov	r0, r3
 8012820:	f7ff ffa4 	bl	801276c <ptr_to_mem>
 8012824:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012826:	687a      	ldr	r2, [r7, #4]
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	429a      	cmp	r2, r3
 801282c:	d024      	beq.n	8012878 <plug_holes+0xc4>
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	791b      	ldrb	r3, [r3, #4]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d120      	bne.n	8012878 <plug_holes+0xc4>
 8012836:	4b2b      	ldr	r3, [pc, #172]	@ (80128e4 <plug_holes+0x130>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	68fa      	ldr	r2, [r7, #12]
 801283c:	429a      	cmp	r2, r3
 801283e:	d01b      	beq.n	8012878 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012840:	4b2c      	ldr	r3, [pc, #176]	@ (80128f4 <plug_holes+0x140>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	68fa      	ldr	r2, [r7, #12]
 8012846:	429a      	cmp	r2, r3
 8012848:	d102      	bne.n	8012850 <plug_holes+0x9c>
      lfree = mem;
 801284a:	4a2a      	ldr	r2, [pc, #168]	@ (80128f4 <plug_holes+0x140>)
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	881a      	ldrh	r2, [r3, #0]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	881b      	ldrh	r3, [r3, #0]
 801285c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012860:	d00a      	beq.n	8012878 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	881b      	ldrh	r3, [r3, #0]
 8012866:	4618      	mov	r0, r3
 8012868:	f7ff ff80 	bl	801276c <ptr_to_mem>
 801286c:	4604      	mov	r4, r0
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f7ff ff8e 	bl	8012790 <mem_to_ptr>
 8012874:	4603      	mov	r3, r0
 8012876:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	885b      	ldrh	r3, [r3, #2]
 801287c:	4618      	mov	r0, r3
 801287e:	f7ff ff75 	bl	801276c <ptr_to_mem>
 8012882:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012884:	68ba      	ldr	r2, [r7, #8]
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	429a      	cmp	r2, r3
 801288a:	d01f      	beq.n	80128cc <plug_holes+0x118>
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	791b      	ldrb	r3, [r3, #4]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d11b      	bne.n	80128cc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012894:	4b17      	ldr	r3, [pc, #92]	@ (80128f4 <plug_holes+0x140>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	429a      	cmp	r2, r3
 801289c:	d102      	bne.n	80128a4 <plug_holes+0xf0>
      lfree = pmem;
 801289e:	4a15      	ldr	r2, [pc, #84]	@ (80128f4 <plug_holes+0x140>)
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	881a      	ldrh	r2, [r3, #0]
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	881b      	ldrh	r3, [r3, #0]
 80128b0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80128b4:	d00a      	beq.n	80128cc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	881b      	ldrh	r3, [r3, #0]
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7ff ff56 	bl	801276c <ptr_to_mem>
 80128c0:	4604      	mov	r4, r0
 80128c2:	68b8      	ldr	r0, [r7, #8]
 80128c4:	f7ff ff64 	bl	8012790 <mem_to_ptr>
 80128c8:	4603      	mov	r3, r0
 80128ca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80128cc:	bf00      	nop
 80128ce:	3714      	adds	r7, #20
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd90      	pop	{r4, r7, pc}
 80128d4:	200245a0 	.word	0x200245a0
 80128d8:	0801eec0 	.word	0x0801eec0
 80128dc:	0801eef0 	.word	0x0801eef0
 80128e0:	0801ef08 	.word	0x0801ef08
 80128e4:	200245a4 	.word	0x200245a4
 80128e8:	0801ef30 	.word	0x0801ef30
 80128ec:	0801ef4c 	.word	0x0801ef4c
 80128f0:	0801ef68 	.word	0x0801ef68
 80128f4:	200245ac 	.word	0x200245ac

080128f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80128fe:	4b1d      	ldr	r3, [pc, #116]	@ (8012974 <mem_init+0x7c>)
 8012900:	4a1d      	ldr	r2, [pc, #116]	@ (8012978 <mem_init+0x80>)
 8012902:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012904:	4b1b      	ldr	r3, [pc, #108]	@ (8012974 <mem_init+0x7c>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012910:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2200      	movs	r2, #0
 8012916:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2200      	movs	r2, #0
 801291c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801291e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8012922:	f7ff ff23 	bl	801276c <ptr_to_mem>
 8012926:	4603      	mov	r3, r0
 8012928:	4a14      	ldr	r2, [pc, #80]	@ (801297c <mem_init+0x84>)
 801292a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801292c:	4b13      	ldr	r3, [pc, #76]	@ (801297c <mem_init+0x84>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2201      	movs	r2, #1
 8012932:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012934:	4b11      	ldr	r3, [pc, #68]	@ (801297c <mem_init+0x84>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 801293c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801293e:	4b0f      	ldr	r3, [pc, #60]	@ (801297c <mem_init+0x84>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012946:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012948:	4b0a      	ldr	r3, [pc, #40]	@ (8012974 <mem_init+0x7c>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	4a0c      	ldr	r2, [pc, #48]	@ (8012980 <mem_init+0x88>)
 801294e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012950:	480c      	ldr	r0, [pc, #48]	@ (8012984 <mem_init+0x8c>)
 8012952:	f009 ffdf 	bl	801c914 <sys_mutex_new>
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d006      	beq.n	801296a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801295c:	4b0a      	ldr	r3, [pc, #40]	@ (8012988 <mem_init+0x90>)
 801295e:	f240 221f 	movw	r2, #543	@ 0x21f
 8012962:	490a      	ldr	r1, [pc, #40]	@ (801298c <mem_init+0x94>)
 8012964:	480a      	ldr	r0, [pc, #40]	@ (8012990 <mem_init+0x98>)
 8012966:	f00b f9b5 	bl	801dcd4 <iprintf>
  }
}
 801296a:	bf00      	nop
 801296c:	3708      	adds	r7, #8
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}
 8012972:	bf00      	nop
 8012974:	200245a0 	.word	0x200245a0
 8012978:	20048000 	.word	0x20048000
 801297c:	200245a4 	.word	0x200245a4
 8012980:	200245ac 	.word	0x200245ac
 8012984:	200245a8 	.word	0x200245a8
 8012988:	0801eec0 	.word	0x0801eec0
 801298c:	0801ef94 	.word	0x0801ef94
 8012990:	0801ef08 	.word	0x0801ef08

08012994 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b086      	sub	sp, #24
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f7ff fef7 	bl	8012790 <mem_to_ptr>
 80129a2:	4603      	mov	r3, r0
 80129a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	881b      	ldrh	r3, [r3, #0]
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7ff fede 	bl	801276c <ptr_to_mem>
 80129b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	885b      	ldrh	r3, [r3, #2]
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7ff fed8 	bl	801276c <ptr_to_mem>
 80129bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	881b      	ldrh	r3, [r3, #0]
 80129c2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80129c6:	d818      	bhi.n	80129fa <mem_link_valid+0x66>
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	885b      	ldrh	r3, [r3, #2]
 80129cc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80129d0:	d813      	bhi.n	80129fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80129d6:	8afa      	ldrh	r2, [r7, #22]
 80129d8:	429a      	cmp	r2, r3
 80129da:	d004      	beq.n	80129e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	881b      	ldrh	r3, [r3, #0]
 80129e0:	8afa      	ldrh	r2, [r7, #22]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d109      	bne.n	80129fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80129e6:	4b08      	ldr	r3, [pc, #32]	@ (8012a08 <mem_link_valid+0x74>)
 80129e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80129ea:	693a      	ldr	r2, [r7, #16]
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d006      	beq.n	80129fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	885b      	ldrh	r3, [r3, #2]
 80129f4:	8afa      	ldrh	r2, [r7, #22]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d001      	beq.n	80129fe <mem_link_valid+0x6a>
    return 0;
 80129fa:	2300      	movs	r3, #0
 80129fc:	e000      	b.n	8012a00 <mem_link_valid+0x6c>
  }
  return 1;
 80129fe:	2301      	movs	r3, #1
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3718      	adds	r7, #24
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	200245a4 	.word	0x200245a4

08012a0c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b088      	sub	sp, #32
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d070      	beq.n	8012afc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f003 0303 	and.w	r3, r3, #3
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d00d      	beq.n	8012a40 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012a24:	4b37      	ldr	r3, [pc, #220]	@ (8012b04 <mem_free+0xf8>)
 8012a26:	f240 2273 	movw	r2, #627	@ 0x273
 8012a2a:	4937      	ldr	r1, [pc, #220]	@ (8012b08 <mem_free+0xfc>)
 8012a2c:	4837      	ldr	r0, [pc, #220]	@ (8012b0c <mem_free+0x100>)
 8012a2e:	f00b f951 	bl	801dcd4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012a32:	f009 ffc1 	bl	801c9b8 <sys_arch_protect>
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	68f8      	ldr	r0, [r7, #12]
 8012a3a:	f009 ffcb 	bl	801c9d4 <sys_arch_unprotect>
    return;
 8012a3e:	e05e      	b.n	8012afe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	3b08      	subs	r3, #8
 8012a44:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012a46:	4b32      	ldr	r3, [pc, #200]	@ (8012b10 <mem_free+0x104>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	69fa      	ldr	r2, [r7, #28]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d306      	bcc.n	8012a5e <mem_free+0x52>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f103 020c 	add.w	r2, r3, #12
 8012a56:	4b2f      	ldr	r3, [pc, #188]	@ (8012b14 <mem_free+0x108>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d90d      	bls.n	8012a7a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012a5e:	4b29      	ldr	r3, [pc, #164]	@ (8012b04 <mem_free+0xf8>)
 8012a60:	f240 227f 	movw	r2, #639	@ 0x27f
 8012a64:	492c      	ldr	r1, [pc, #176]	@ (8012b18 <mem_free+0x10c>)
 8012a66:	4829      	ldr	r0, [pc, #164]	@ (8012b0c <mem_free+0x100>)
 8012a68:	f00b f934 	bl	801dcd4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012a6c:	f009 ffa4 	bl	801c9b8 <sys_arch_protect>
 8012a70:	6138      	str	r0, [r7, #16]
 8012a72:	6938      	ldr	r0, [r7, #16]
 8012a74:	f009 ffae 	bl	801c9d4 <sys_arch_unprotect>
    return;
 8012a78:	e041      	b.n	8012afe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012a7a:	4828      	ldr	r0, [pc, #160]	@ (8012b1c <mem_free+0x110>)
 8012a7c:	f009 ff60 	bl	801c940 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012a80:	69fb      	ldr	r3, [r7, #28]
 8012a82:	791b      	ldrb	r3, [r3, #4]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d110      	bne.n	8012aaa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012a88:	4b1e      	ldr	r3, [pc, #120]	@ (8012b04 <mem_free+0xf8>)
 8012a8a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8012a8e:	4924      	ldr	r1, [pc, #144]	@ (8012b20 <mem_free+0x114>)
 8012a90:	481e      	ldr	r0, [pc, #120]	@ (8012b0c <mem_free+0x100>)
 8012a92:	f00b f91f 	bl	801dcd4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012a96:	4821      	ldr	r0, [pc, #132]	@ (8012b1c <mem_free+0x110>)
 8012a98:	f009 ff61 	bl	801c95e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012a9c:	f009 ff8c 	bl	801c9b8 <sys_arch_protect>
 8012aa0:	6178      	str	r0, [r7, #20]
 8012aa2:	6978      	ldr	r0, [r7, #20]
 8012aa4:	f009 ff96 	bl	801c9d4 <sys_arch_unprotect>
    return;
 8012aa8:	e029      	b.n	8012afe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012aaa:	69f8      	ldr	r0, [r7, #28]
 8012aac:	f7ff ff72 	bl	8012994 <mem_link_valid>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d110      	bne.n	8012ad8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012ab6:	4b13      	ldr	r3, [pc, #76]	@ (8012b04 <mem_free+0xf8>)
 8012ab8:	f240 2295 	movw	r2, #661	@ 0x295
 8012abc:	4919      	ldr	r1, [pc, #100]	@ (8012b24 <mem_free+0x118>)
 8012abe:	4813      	ldr	r0, [pc, #76]	@ (8012b0c <mem_free+0x100>)
 8012ac0:	f00b f908 	bl	801dcd4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012ac4:	4815      	ldr	r0, [pc, #84]	@ (8012b1c <mem_free+0x110>)
 8012ac6:	f009 ff4a 	bl	801c95e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012aca:	f009 ff75 	bl	801c9b8 <sys_arch_protect>
 8012ace:	61b8      	str	r0, [r7, #24]
 8012ad0:	69b8      	ldr	r0, [r7, #24]
 8012ad2:	f009 ff7f 	bl	801c9d4 <sys_arch_unprotect>
    return;
 8012ad6:	e012      	b.n	8012afe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	2200      	movs	r2, #0
 8012adc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012ade:	4b12      	ldr	r3, [pc, #72]	@ (8012b28 <mem_free+0x11c>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	69fa      	ldr	r2, [r7, #28]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d202      	bcs.n	8012aee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8012b28 <mem_free+0x11c>)
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012aee:	69f8      	ldr	r0, [r7, #28]
 8012af0:	f7ff fe60 	bl	80127b4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012af4:	4809      	ldr	r0, [pc, #36]	@ (8012b1c <mem_free+0x110>)
 8012af6:	f009 ff32 	bl	801c95e <sys_mutex_unlock>
 8012afa:	e000      	b.n	8012afe <mem_free+0xf2>
    return;
 8012afc:	bf00      	nop
}
 8012afe:	3720      	adds	r7, #32
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	0801eec0 	.word	0x0801eec0
 8012b08:	0801efb0 	.word	0x0801efb0
 8012b0c:	0801ef08 	.word	0x0801ef08
 8012b10:	200245a0 	.word	0x200245a0
 8012b14:	200245a4 	.word	0x200245a4
 8012b18:	0801efd4 	.word	0x0801efd4
 8012b1c:	200245a8 	.word	0x200245a8
 8012b20:	0801eff0 	.word	0x0801eff0
 8012b24:	0801f018 	.word	0x0801f018
 8012b28:	200245ac 	.word	0x200245ac

08012b2c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b088      	sub	sp, #32
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	460b      	mov	r3, r1
 8012b36:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012b38:	887b      	ldrh	r3, [r7, #2]
 8012b3a:	3303      	adds	r3, #3
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	f023 0303 	bic.w	r3, r3, #3
 8012b42:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012b44:	8bfb      	ldrh	r3, [r7, #30]
 8012b46:	2b0b      	cmp	r3, #11
 8012b48:	d801      	bhi.n	8012b4e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012b4a:	230c      	movs	r3, #12
 8012b4c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012b4e:	8bfb      	ldrh	r3, [r7, #30]
 8012b50:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012b54:	d803      	bhi.n	8012b5e <mem_trim+0x32>
 8012b56:	8bfa      	ldrh	r2, [r7, #30]
 8012b58:	887b      	ldrh	r3, [r7, #2]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d201      	bcs.n	8012b62 <mem_trim+0x36>
    return NULL;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	e0d8      	b.n	8012d14 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012b62:	4b6e      	ldr	r3, [pc, #440]	@ (8012d1c <mem_trim+0x1f0>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	687a      	ldr	r2, [r7, #4]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d304      	bcc.n	8012b76 <mem_trim+0x4a>
 8012b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8012d20 <mem_trim+0x1f4>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	687a      	ldr	r2, [r7, #4]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d306      	bcc.n	8012b84 <mem_trim+0x58>
 8012b76:	4b6b      	ldr	r3, [pc, #428]	@ (8012d24 <mem_trim+0x1f8>)
 8012b78:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012b7c:	496a      	ldr	r1, [pc, #424]	@ (8012d28 <mem_trim+0x1fc>)
 8012b7e:	486b      	ldr	r0, [pc, #428]	@ (8012d2c <mem_trim+0x200>)
 8012b80:	f00b f8a8 	bl	801dcd4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012b84:	4b65      	ldr	r3, [pc, #404]	@ (8012d1c <mem_trim+0x1f0>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	687a      	ldr	r2, [r7, #4]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d304      	bcc.n	8012b98 <mem_trim+0x6c>
 8012b8e:	4b64      	ldr	r3, [pc, #400]	@ (8012d20 <mem_trim+0x1f4>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d307      	bcc.n	8012ba8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012b98:	f009 ff0e 	bl	801c9b8 <sys_arch_protect>
 8012b9c:	60b8      	str	r0, [r7, #8]
 8012b9e:	68b8      	ldr	r0, [r7, #8]
 8012ba0:	f009 ff18 	bl	801c9d4 <sys_arch_unprotect>
    return rmem;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	e0b5      	b.n	8012d14 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	3b08      	subs	r3, #8
 8012bac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012bae:	69b8      	ldr	r0, [r7, #24]
 8012bb0:	f7ff fdee 	bl	8012790 <mem_to_ptr>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012bb8:	69bb      	ldr	r3, [r7, #24]
 8012bba:	881a      	ldrh	r2, [r3, #0]
 8012bbc:	8afb      	ldrh	r3, [r7, #22]
 8012bbe:	1ad3      	subs	r3, r2, r3
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	3b08      	subs	r3, #8
 8012bc4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012bc6:	8bfa      	ldrh	r2, [r7, #30]
 8012bc8:	8abb      	ldrh	r3, [r7, #20]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d906      	bls.n	8012bdc <mem_trim+0xb0>
 8012bce:	4b55      	ldr	r3, [pc, #340]	@ (8012d24 <mem_trim+0x1f8>)
 8012bd0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8012bd4:	4956      	ldr	r1, [pc, #344]	@ (8012d30 <mem_trim+0x204>)
 8012bd6:	4855      	ldr	r0, [pc, #340]	@ (8012d2c <mem_trim+0x200>)
 8012bd8:	f00b f87c 	bl	801dcd4 <iprintf>
  if (newsize > size) {
 8012bdc:	8bfa      	ldrh	r2, [r7, #30]
 8012bde:	8abb      	ldrh	r3, [r7, #20]
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d901      	bls.n	8012be8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012be4:	2300      	movs	r3, #0
 8012be6:	e095      	b.n	8012d14 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8012be8:	8bfa      	ldrh	r2, [r7, #30]
 8012bea:	8abb      	ldrh	r3, [r7, #20]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d101      	bne.n	8012bf4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	e08f      	b.n	8012d14 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012bf4:	484f      	ldr	r0, [pc, #316]	@ (8012d34 <mem_trim+0x208>)
 8012bf6:	f009 fea3 	bl	801c940 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012bfa:	69bb      	ldr	r3, [r7, #24]
 8012bfc:	881b      	ldrh	r3, [r3, #0]
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7ff fdb4 	bl	801276c <ptr_to_mem>
 8012c04:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	791b      	ldrb	r3, [r3, #4]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d13f      	bne.n	8012c8e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012c0e:	69bb      	ldr	r3, [r7, #24]
 8012c10:	881b      	ldrh	r3, [r3, #0]
 8012c12:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012c16:	d106      	bne.n	8012c26 <mem_trim+0xfa>
 8012c18:	4b42      	ldr	r3, [pc, #264]	@ (8012d24 <mem_trim+0x1f8>)
 8012c1a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8012c1e:	4946      	ldr	r1, [pc, #280]	@ (8012d38 <mem_trim+0x20c>)
 8012c20:	4842      	ldr	r0, [pc, #264]	@ (8012d2c <mem_trim+0x200>)
 8012c22:	f00b f857 	bl	801dcd4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012c26:	693b      	ldr	r3, [r7, #16]
 8012c28:	881b      	ldrh	r3, [r3, #0]
 8012c2a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012c2c:	8afa      	ldrh	r2, [r7, #22]
 8012c2e:	8bfb      	ldrh	r3, [r7, #30]
 8012c30:	4413      	add	r3, r2
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	3308      	adds	r3, #8
 8012c36:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012c38:	4b40      	ldr	r3, [pc, #256]	@ (8012d3c <mem_trim+0x210>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	693a      	ldr	r2, [r7, #16]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d106      	bne.n	8012c50 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012c42:	89fb      	ldrh	r3, [r7, #14]
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7ff fd91 	bl	801276c <ptr_to_mem>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	4a3b      	ldr	r2, [pc, #236]	@ (8012d3c <mem_trim+0x210>)
 8012c4e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012c50:	89fb      	ldrh	r3, [r7, #14]
 8012c52:	4618      	mov	r0, r3
 8012c54:	f7ff fd8a 	bl	801276c <ptr_to_mem>
 8012c58:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	89ba      	ldrh	r2, [r7, #12]
 8012c64:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	8afa      	ldrh	r2, [r7, #22]
 8012c6a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012c6c:	69bb      	ldr	r3, [r7, #24]
 8012c6e:	89fa      	ldrh	r2, [r7, #14]
 8012c70:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012c72:	693b      	ldr	r3, [r7, #16]
 8012c74:	881b      	ldrh	r3, [r3, #0]
 8012c76:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012c7a:	d047      	beq.n	8012d0c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	881b      	ldrh	r3, [r3, #0]
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7ff fd73 	bl	801276c <ptr_to_mem>
 8012c86:	4602      	mov	r2, r0
 8012c88:	89fb      	ldrh	r3, [r7, #14]
 8012c8a:	8053      	strh	r3, [r2, #2]
 8012c8c:	e03e      	b.n	8012d0c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012c8e:	8bfb      	ldrh	r3, [r7, #30]
 8012c90:	f103 0214 	add.w	r2, r3, #20
 8012c94:	8abb      	ldrh	r3, [r7, #20]
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d838      	bhi.n	8012d0c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012c9a:	8afa      	ldrh	r2, [r7, #22]
 8012c9c:	8bfb      	ldrh	r3, [r7, #30]
 8012c9e:	4413      	add	r3, r2
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	3308      	adds	r3, #8
 8012ca4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012ca6:	69bb      	ldr	r3, [r7, #24]
 8012ca8:	881b      	ldrh	r3, [r3, #0]
 8012caa:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012cae:	d106      	bne.n	8012cbe <mem_trim+0x192>
 8012cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8012d24 <mem_trim+0x1f8>)
 8012cb2:	f240 3216 	movw	r2, #790	@ 0x316
 8012cb6:	4920      	ldr	r1, [pc, #128]	@ (8012d38 <mem_trim+0x20c>)
 8012cb8:	481c      	ldr	r0, [pc, #112]	@ (8012d2c <mem_trim+0x200>)
 8012cba:	f00b f80b 	bl	801dcd4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012cbe:	89fb      	ldrh	r3, [r7, #14]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7ff fd53 	bl	801276c <ptr_to_mem>
 8012cc6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8012d3c <mem_trim+0x210>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	693a      	ldr	r2, [r7, #16]
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	d202      	bcs.n	8012cd8 <mem_trim+0x1ac>
      lfree = mem2;
 8012cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8012d3c <mem_trim+0x210>)
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012cde:	69bb      	ldr	r3, [r7, #24]
 8012ce0:	881a      	ldrh	r2, [r3, #0]
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012ce6:	693b      	ldr	r3, [r7, #16]
 8012ce8:	8afa      	ldrh	r2, [r7, #22]
 8012cea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012cec:	69bb      	ldr	r3, [r7, #24]
 8012cee:	89fa      	ldrh	r2, [r7, #14]
 8012cf0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	881b      	ldrh	r3, [r3, #0]
 8012cf6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012cfa:	d007      	beq.n	8012d0c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	881b      	ldrh	r3, [r3, #0]
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff fd33 	bl	801276c <ptr_to_mem>
 8012d06:	4602      	mov	r2, r0
 8012d08:	89fb      	ldrh	r3, [r7, #14]
 8012d0a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012d0c:	4809      	ldr	r0, [pc, #36]	@ (8012d34 <mem_trim+0x208>)
 8012d0e:	f009 fe26 	bl	801c95e <sys_mutex_unlock>
  return rmem;
 8012d12:	687b      	ldr	r3, [r7, #4]
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3720      	adds	r7, #32
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	200245a0 	.word	0x200245a0
 8012d20:	200245a4 	.word	0x200245a4
 8012d24:	0801eec0 	.word	0x0801eec0
 8012d28:	0801f04c 	.word	0x0801f04c
 8012d2c:	0801ef08 	.word	0x0801ef08
 8012d30:	0801f064 	.word	0x0801f064
 8012d34:	200245a8 	.word	0x200245a8
 8012d38:	0801f084 	.word	0x0801f084
 8012d3c:	200245ac 	.word	0x200245ac

08012d40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b088      	sub	sp, #32
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	4603      	mov	r3, r0
 8012d48:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012d4a:	88fb      	ldrh	r3, [r7, #6]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d101      	bne.n	8012d54 <mem_malloc+0x14>
    return NULL;
 8012d50:	2300      	movs	r3, #0
 8012d52:	e0e2      	b.n	8012f1a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012d54:	88fb      	ldrh	r3, [r7, #6]
 8012d56:	3303      	adds	r3, #3
 8012d58:	b29b      	uxth	r3, r3
 8012d5a:	f023 0303 	bic.w	r3, r3, #3
 8012d5e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012d60:	8bbb      	ldrh	r3, [r7, #28]
 8012d62:	2b0b      	cmp	r3, #11
 8012d64:	d801      	bhi.n	8012d6a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012d66:	230c      	movs	r3, #12
 8012d68:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012d6a:	8bbb      	ldrh	r3, [r7, #28]
 8012d6c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012d70:	d803      	bhi.n	8012d7a <mem_malloc+0x3a>
 8012d72:	8bba      	ldrh	r2, [r7, #28]
 8012d74:	88fb      	ldrh	r3, [r7, #6]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d201      	bcs.n	8012d7e <mem_malloc+0x3e>
    return NULL;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	e0cd      	b.n	8012f1a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012d7e:	4869      	ldr	r0, [pc, #420]	@ (8012f24 <mem_malloc+0x1e4>)
 8012d80:	f009 fdde 	bl	801c940 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012d84:	4b68      	ldr	r3, [pc, #416]	@ (8012f28 <mem_malloc+0x1e8>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f7ff fd01 	bl	8012790 <mem_to_ptr>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	83fb      	strh	r3, [r7, #30]
 8012d92:	e0b7      	b.n	8012f04 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012d94:	8bfb      	ldrh	r3, [r7, #30]
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7ff fce8 	bl	801276c <ptr_to_mem>
 8012d9c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	791b      	ldrb	r3, [r3, #4]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	f040 80a7 	bne.w	8012ef6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	881b      	ldrh	r3, [r3, #0]
 8012dac:	461a      	mov	r2, r3
 8012dae:	8bfb      	ldrh	r3, [r7, #30]
 8012db0:	1ad3      	subs	r3, r2, r3
 8012db2:	f1a3 0208 	sub.w	r2, r3, #8
 8012db6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012db8:	429a      	cmp	r2, r3
 8012dba:	f0c0 809c 	bcc.w	8012ef6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	881b      	ldrh	r3, [r3, #0]
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	8bfb      	ldrh	r3, [r7, #30]
 8012dc6:	1ad3      	subs	r3, r2, r3
 8012dc8:	f1a3 0208 	sub.w	r2, r3, #8
 8012dcc:	8bbb      	ldrh	r3, [r7, #28]
 8012dce:	3314      	adds	r3, #20
 8012dd0:	429a      	cmp	r2, r3
 8012dd2:	d333      	bcc.n	8012e3c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012dd4:	8bfa      	ldrh	r2, [r7, #30]
 8012dd6:	8bbb      	ldrh	r3, [r7, #28]
 8012dd8:	4413      	add	r3, r2
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	3308      	adds	r3, #8
 8012dde:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012de0:	8a7b      	ldrh	r3, [r7, #18]
 8012de2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012de6:	d106      	bne.n	8012df6 <mem_malloc+0xb6>
 8012de8:	4b50      	ldr	r3, [pc, #320]	@ (8012f2c <mem_malloc+0x1ec>)
 8012dea:	f240 3287 	movw	r2, #903	@ 0x387
 8012dee:	4950      	ldr	r1, [pc, #320]	@ (8012f30 <mem_malloc+0x1f0>)
 8012df0:	4850      	ldr	r0, [pc, #320]	@ (8012f34 <mem_malloc+0x1f4>)
 8012df2:	f00a ff6f 	bl	801dcd4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012df6:	8a7b      	ldrh	r3, [r7, #18]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7ff fcb7 	bl	801276c <ptr_to_mem>
 8012dfe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2200      	movs	r2, #0
 8012e04:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	881a      	ldrh	r2, [r3, #0]
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	8bfa      	ldrh	r2, [r7, #30]
 8012e12:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	8a7a      	ldrh	r2, [r7, #18]
 8012e18:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	2201      	movs	r2, #1
 8012e1e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	881b      	ldrh	r3, [r3, #0]
 8012e24:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012e28:	d00b      	beq.n	8012e42 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	881b      	ldrh	r3, [r3, #0]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7ff fc9c 	bl	801276c <ptr_to_mem>
 8012e34:	4602      	mov	r2, r0
 8012e36:	8a7b      	ldrh	r3, [r7, #18]
 8012e38:	8053      	strh	r3, [r2, #2]
 8012e3a:	e002      	b.n	8012e42 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	2201      	movs	r2, #1
 8012e40:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012e42:	4b39      	ldr	r3, [pc, #228]	@ (8012f28 <mem_malloc+0x1e8>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	697a      	ldr	r2, [r7, #20]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d127      	bne.n	8012e9c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8012e4c:	4b36      	ldr	r3, [pc, #216]	@ (8012f28 <mem_malloc+0x1e8>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012e52:	e005      	b.n	8012e60 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012e54:	69bb      	ldr	r3, [r7, #24]
 8012e56:	881b      	ldrh	r3, [r3, #0]
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7ff fc87 	bl	801276c <ptr_to_mem>
 8012e5e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	791b      	ldrb	r3, [r3, #4]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d004      	beq.n	8012e72 <mem_malloc+0x132>
 8012e68:	4b33      	ldr	r3, [pc, #204]	@ (8012f38 <mem_malloc+0x1f8>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	69ba      	ldr	r2, [r7, #24]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d1f0      	bne.n	8012e54 <mem_malloc+0x114>
          }
          lfree = cur;
 8012e72:	4a2d      	ldr	r2, [pc, #180]	@ (8012f28 <mem_malloc+0x1e8>)
 8012e74:	69bb      	ldr	r3, [r7, #24]
 8012e76:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012e78:	4b2b      	ldr	r3, [pc, #172]	@ (8012f28 <mem_malloc+0x1e8>)
 8012e7a:	681a      	ldr	r2, [r3, #0]
 8012e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8012f38 <mem_malloc+0x1f8>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d00b      	beq.n	8012e9c <mem_malloc+0x15c>
 8012e84:	4b28      	ldr	r3, [pc, #160]	@ (8012f28 <mem_malloc+0x1e8>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	791b      	ldrb	r3, [r3, #4]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d006      	beq.n	8012e9c <mem_malloc+0x15c>
 8012e8e:	4b27      	ldr	r3, [pc, #156]	@ (8012f2c <mem_malloc+0x1ec>)
 8012e90:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8012e94:	4929      	ldr	r1, [pc, #164]	@ (8012f3c <mem_malloc+0x1fc>)
 8012e96:	4827      	ldr	r0, [pc, #156]	@ (8012f34 <mem_malloc+0x1f4>)
 8012e98:	f00a ff1c 	bl	801dcd4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012e9c:	4821      	ldr	r0, [pc, #132]	@ (8012f24 <mem_malloc+0x1e4>)
 8012e9e:	f009 fd5e 	bl	801c95e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012ea2:	8bba      	ldrh	r2, [r7, #28]
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	4413      	add	r3, r2
 8012ea8:	3308      	adds	r3, #8
 8012eaa:	4a23      	ldr	r2, [pc, #140]	@ (8012f38 <mem_malloc+0x1f8>)
 8012eac:	6812      	ldr	r2, [r2, #0]
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	d906      	bls.n	8012ec0 <mem_malloc+0x180>
 8012eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8012f2c <mem_malloc+0x1ec>)
 8012eb4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8012eb8:	4921      	ldr	r1, [pc, #132]	@ (8012f40 <mem_malloc+0x200>)
 8012eba:	481e      	ldr	r0, [pc, #120]	@ (8012f34 <mem_malloc+0x1f4>)
 8012ebc:	f00a ff0a 	bl	801dcd4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	f003 0303 	and.w	r3, r3, #3
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d006      	beq.n	8012ed8 <mem_malloc+0x198>
 8012eca:	4b18      	ldr	r3, [pc, #96]	@ (8012f2c <mem_malloc+0x1ec>)
 8012ecc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8012ed0:	491c      	ldr	r1, [pc, #112]	@ (8012f44 <mem_malloc+0x204>)
 8012ed2:	4818      	ldr	r0, [pc, #96]	@ (8012f34 <mem_malloc+0x1f4>)
 8012ed4:	f00a fefe 	bl	801dcd4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012ed8:	697b      	ldr	r3, [r7, #20]
 8012eda:	f003 0303 	and.w	r3, r3, #3
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d006      	beq.n	8012ef0 <mem_malloc+0x1b0>
 8012ee2:	4b12      	ldr	r3, [pc, #72]	@ (8012f2c <mem_malloc+0x1ec>)
 8012ee4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8012ee8:	4917      	ldr	r1, [pc, #92]	@ (8012f48 <mem_malloc+0x208>)
 8012eea:	4812      	ldr	r0, [pc, #72]	@ (8012f34 <mem_malloc+0x1f4>)
 8012eec:	f00a fef2 	bl	801dcd4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	3308      	adds	r3, #8
 8012ef4:	e011      	b.n	8012f1a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8012ef6:	8bfb      	ldrh	r3, [r7, #30]
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f7ff fc37 	bl	801276c <ptr_to_mem>
 8012efe:	4603      	mov	r3, r0
 8012f00:	881b      	ldrh	r3, [r3, #0]
 8012f02:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012f04:	8bfa      	ldrh	r2, [r7, #30]
 8012f06:	8bbb      	ldrh	r3, [r7, #28]
 8012f08:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	f4ff af41 	bcc.w	8012d94 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012f12:	4804      	ldr	r0, [pc, #16]	@ (8012f24 <mem_malloc+0x1e4>)
 8012f14:	f009 fd23 	bl	801c95e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012f18:	2300      	movs	r3, #0
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3720      	adds	r7, #32
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	bf00      	nop
 8012f24:	200245a8 	.word	0x200245a8
 8012f28:	200245ac 	.word	0x200245ac
 8012f2c:	0801eec0 	.word	0x0801eec0
 8012f30:	0801f084 	.word	0x0801f084
 8012f34:	0801ef08 	.word	0x0801ef08
 8012f38:	200245a4 	.word	0x200245a4
 8012f3c:	0801f098 	.word	0x0801f098
 8012f40:	0801f0b4 	.word	0x0801f0b4
 8012f44:	0801f0e4 	.word	0x0801f0e4
 8012f48:	0801f114 	.word	0x0801f114

08012f4c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b085      	sub	sp, #20
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	689b      	ldr	r3, [r3, #8]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	3303      	adds	r3, #3
 8012f62:	f023 0303 	bic.w	r3, r3, #3
 8012f66:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012f68:	2300      	movs	r3, #0
 8012f6a:	60fb      	str	r3, [r7, #12]
 8012f6c:	e011      	b.n	8012f92 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	689b      	ldr	r3, [r3, #8]
 8012f72:	681a      	ldr	r2, [r3, #0]
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	689b      	ldr	r3, [r3, #8]
 8012f7c:	68ba      	ldr	r2, [r7, #8]
 8012f7e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	881b      	ldrh	r3, [r3, #0]
 8012f84:	461a      	mov	r2, r3
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	4413      	add	r3, r2
 8012f8a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	3301      	adds	r3, #1
 8012f90:	60fb      	str	r3, [r7, #12]
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	885b      	ldrh	r3, [r3, #2]
 8012f96:	461a      	mov	r2, r3
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	dbe7      	blt.n	8012f6e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012f9e:	bf00      	nop
 8012fa0:	bf00      	nop
 8012fa2:	3714      	adds	r7, #20
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr

08012fac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	80fb      	strh	r3, [r7, #6]
 8012fb6:	e009      	b.n	8012fcc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012fb8:	88fb      	ldrh	r3, [r7, #6]
 8012fba:	4a08      	ldr	r2, [pc, #32]	@ (8012fdc <memp_init+0x30>)
 8012fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7ff ffc3 	bl	8012f4c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012fc6:	88fb      	ldrh	r3, [r7, #6]
 8012fc8:	3301      	adds	r3, #1
 8012fca:	80fb      	strh	r3, [r7, #6]
 8012fcc:	88fb      	ldrh	r3, [r7, #6]
 8012fce:	2b0c      	cmp	r3, #12
 8012fd0:	d9f2      	bls.n	8012fb8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012fd2:	bf00      	nop
 8012fd4:	bf00      	nop
 8012fd6:	3708      	adds	r7, #8
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}
 8012fdc:	08021c20 	.word	0x08021c20

08012fe0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b084      	sub	sp, #16
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012fe8:	f009 fce6 	bl	801c9b8 <sys_arch_protect>
 8012fec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	689b      	ldr	r3, [r3, #8]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d015      	beq.n	8013028 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	689b      	ldr	r3, [r3, #8]
 8013000:	68ba      	ldr	r2, [r7, #8]
 8013002:	6812      	ldr	r2, [r2, #0]
 8013004:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	f003 0303 	and.w	r3, r3, #3
 801300c:	2b00      	cmp	r3, #0
 801300e:	d006      	beq.n	801301e <do_memp_malloc_pool+0x3e>
 8013010:	4b09      	ldr	r3, [pc, #36]	@ (8013038 <do_memp_malloc_pool+0x58>)
 8013012:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013016:	4909      	ldr	r1, [pc, #36]	@ (801303c <do_memp_malloc_pool+0x5c>)
 8013018:	4809      	ldr	r0, [pc, #36]	@ (8013040 <do_memp_malloc_pool+0x60>)
 801301a:	f00a fe5b 	bl	801dcd4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801301e:	68f8      	ldr	r0, [r7, #12]
 8013020:	f009 fcd8 	bl	801c9d4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	e003      	b.n	8013030 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013028:	68f8      	ldr	r0, [r7, #12]
 801302a:	f009 fcd3 	bl	801c9d4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801302e:	2300      	movs	r3, #0
}
 8013030:	4618      	mov	r0, r3
 8013032:	3710      	adds	r7, #16
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}
 8013038:	0801f138 	.word	0x0801f138
 801303c:	0801f168 	.word	0x0801f168
 8013040:	0801f18c 	.word	0x0801f18c

08013044 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d106      	bne.n	8013060 <memp_malloc_pool+0x1c>
 8013052:	4b0a      	ldr	r3, [pc, #40]	@ (801307c <memp_malloc_pool+0x38>)
 8013054:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8013058:	4909      	ldr	r1, [pc, #36]	@ (8013080 <memp_malloc_pool+0x3c>)
 801305a:	480a      	ldr	r0, [pc, #40]	@ (8013084 <memp_malloc_pool+0x40>)
 801305c:	f00a fe3a 	bl	801dcd4 <iprintf>
  if (desc == NULL) {
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d101      	bne.n	801306a <memp_malloc_pool+0x26>
    return NULL;
 8013066:	2300      	movs	r3, #0
 8013068:	e003      	b.n	8013072 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f7ff ffb8 	bl	8012fe0 <do_memp_malloc_pool>
 8013070:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013072:	4618      	mov	r0, r3
 8013074:	3708      	adds	r7, #8
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	0801f138 	.word	0x0801f138
 8013080:	0801f1b4 	.word	0x0801f1b4
 8013084:	0801f18c 	.word	0x0801f18c

08013088 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b084      	sub	sp, #16
 801308c:	af00      	add	r7, sp, #0
 801308e:	4603      	mov	r3, r0
 8013090:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013092:	79fb      	ldrb	r3, [r7, #7]
 8013094:	2b0c      	cmp	r3, #12
 8013096:	d908      	bls.n	80130aa <memp_malloc+0x22>
 8013098:	4b0a      	ldr	r3, [pc, #40]	@ (80130c4 <memp_malloc+0x3c>)
 801309a:	f240 1257 	movw	r2, #343	@ 0x157
 801309e:	490a      	ldr	r1, [pc, #40]	@ (80130c8 <memp_malloc+0x40>)
 80130a0:	480a      	ldr	r0, [pc, #40]	@ (80130cc <memp_malloc+0x44>)
 80130a2:	f00a fe17 	bl	801dcd4 <iprintf>
 80130a6:	2300      	movs	r3, #0
 80130a8:	e008      	b.n	80130bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80130aa:	79fb      	ldrb	r3, [r7, #7]
 80130ac:	4a08      	ldr	r2, [pc, #32]	@ (80130d0 <memp_malloc+0x48>)
 80130ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7ff ff94 	bl	8012fe0 <do_memp_malloc_pool>
 80130b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80130ba:	68fb      	ldr	r3, [r7, #12]
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3710      	adds	r7, #16
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}
 80130c4:	0801f138 	.word	0x0801f138
 80130c8:	0801f1c8 	.word	0x0801f1c8
 80130cc:	0801f18c 	.word	0x0801f18c
 80130d0:	08021c20 	.word	0x08021c20

080130d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
 80130dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	f003 0303 	and.w	r3, r3, #3
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d006      	beq.n	80130f6 <do_memp_free_pool+0x22>
 80130e8:	4b0d      	ldr	r3, [pc, #52]	@ (8013120 <do_memp_free_pool+0x4c>)
 80130ea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80130ee:	490d      	ldr	r1, [pc, #52]	@ (8013124 <do_memp_free_pool+0x50>)
 80130f0:	480d      	ldr	r0, [pc, #52]	@ (8013128 <do_memp_free_pool+0x54>)
 80130f2:	f00a fdef 	bl	801dcd4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80130fa:	f009 fc5d 	bl	801c9b8 <sys_arch_protect>
 80130fe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	689b      	ldr	r3, [r3, #8]
 8013104:	681a      	ldr	r2, [r3, #0]
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	689b      	ldr	r3, [r3, #8]
 801310e:	68fa      	ldr	r2, [r7, #12]
 8013110:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013112:	68b8      	ldr	r0, [r7, #8]
 8013114:	f009 fc5e 	bl	801c9d4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013118:	bf00      	nop
 801311a:	3710      	adds	r7, #16
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}
 8013120:	0801f138 	.word	0x0801f138
 8013124:	0801f1e8 	.word	0x0801f1e8
 8013128:	0801f18c 	.word	0x0801f18c

0801312c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b082      	sub	sp, #8
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d106      	bne.n	801314a <memp_free_pool+0x1e>
 801313c:	4b0a      	ldr	r3, [pc, #40]	@ (8013168 <memp_free_pool+0x3c>)
 801313e:	f240 1295 	movw	r2, #405	@ 0x195
 8013142:	490a      	ldr	r1, [pc, #40]	@ (801316c <memp_free_pool+0x40>)
 8013144:	480a      	ldr	r0, [pc, #40]	@ (8013170 <memp_free_pool+0x44>)
 8013146:	f00a fdc5 	bl	801dcd4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d007      	beq.n	8013160 <memp_free_pool+0x34>
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d004      	beq.n	8013160 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013156:	6839      	ldr	r1, [r7, #0]
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7ff ffbb 	bl	80130d4 <do_memp_free_pool>
 801315e:	e000      	b.n	8013162 <memp_free_pool+0x36>
    return;
 8013160:	bf00      	nop
}
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	0801f138 	.word	0x0801f138
 801316c:	0801f1b4 	.word	0x0801f1b4
 8013170:	0801f18c 	.word	0x0801f18c

08013174 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
 801317a:	4603      	mov	r3, r0
 801317c:	6039      	str	r1, [r7, #0]
 801317e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013180:	79fb      	ldrb	r3, [r7, #7]
 8013182:	2b0c      	cmp	r3, #12
 8013184:	d907      	bls.n	8013196 <memp_free+0x22>
 8013186:	4b0c      	ldr	r3, [pc, #48]	@ (80131b8 <memp_free+0x44>)
 8013188:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801318c:	490b      	ldr	r1, [pc, #44]	@ (80131bc <memp_free+0x48>)
 801318e:	480c      	ldr	r0, [pc, #48]	@ (80131c0 <memp_free+0x4c>)
 8013190:	f00a fda0 	bl	801dcd4 <iprintf>
 8013194:	e00c      	b.n	80131b0 <memp_free+0x3c>

  if (mem == NULL) {
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d008      	beq.n	80131ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801319c:	79fb      	ldrb	r3, [r7, #7]
 801319e:	4a09      	ldr	r2, [pc, #36]	@ (80131c4 <memp_free+0x50>)
 80131a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131a4:	6839      	ldr	r1, [r7, #0]
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7ff ff94 	bl	80130d4 <do_memp_free_pool>
 80131ac:	e000      	b.n	80131b0 <memp_free+0x3c>
    return;
 80131ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80131b0:	3708      	adds	r7, #8
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	0801f138 	.word	0x0801f138
 80131bc:	0801f208 	.word	0x0801f208
 80131c0:	0801f18c 	.word	0x0801f18c
 80131c4:	08021c20 	.word	0x08021c20

080131c8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80131c8:	b480      	push	{r7}
 80131ca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80131cc:	bf00      	nop
 80131ce:	46bd      	mov	sp, r7
 80131d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d4:	4770      	bx	lr
	...

080131d8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b086      	sub	sp, #24
 80131dc:	af00      	add	r7, sp, #0
 80131de:	60f8      	str	r0, [r7, #12]
 80131e0:	60b9      	str	r1, [r7, #8]
 80131e2:	607a      	str	r2, [r7, #4]
 80131e4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d108      	bne.n	80131fe <netif_add+0x26>
 80131ec:	4b57      	ldr	r3, [pc, #348]	@ (801334c <netif_add+0x174>)
 80131ee:	f240 1227 	movw	r2, #295	@ 0x127
 80131f2:	4957      	ldr	r1, [pc, #348]	@ (8013350 <netif_add+0x178>)
 80131f4:	4857      	ldr	r0, [pc, #348]	@ (8013354 <netif_add+0x17c>)
 80131f6:	f00a fd6d 	bl	801dcd4 <iprintf>
 80131fa:	2300      	movs	r3, #0
 80131fc:	e0a2      	b.n	8013344 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80131fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013200:	2b00      	cmp	r3, #0
 8013202:	d108      	bne.n	8013216 <netif_add+0x3e>
 8013204:	4b51      	ldr	r3, [pc, #324]	@ (801334c <netif_add+0x174>)
 8013206:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801320a:	4953      	ldr	r1, [pc, #332]	@ (8013358 <netif_add+0x180>)
 801320c:	4851      	ldr	r0, [pc, #324]	@ (8013354 <netif_add+0x17c>)
 801320e:	f00a fd61 	bl	801dcd4 <iprintf>
 8013212:	2300      	movs	r3, #0
 8013214:	e096      	b.n	8013344 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d101      	bne.n	8013220 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801321c:	4b4f      	ldr	r3, [pc, #316]	@ (801335c <netif_add+0x184>)
 801321e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d101      	bne.n	801322a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013226:	4b4d      	ldr	r3, [pc, #308]	@ (801335c <netif_add+0x184>)
 8013228:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d101      	bne.n	8013234 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013230:	4b4a      	ldr	r3, [pc, #296]	@ (801335c <netif_add+0x184>)
 8013232:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2200      	movs	r2, #0
 8013238:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2200      	movs	r2, #0
 801323e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	2200      	movs	r2, #0
 8013244:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	4a45      	ldr	r2, [pc, #276]	@ (8013360 <netif_add+0x188>)
 801324a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2200      	movs	r2, #0
 8013250:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2200      	movs	r2, #0
 8013256:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	2200      	movs	r2, #0
 801325e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	6a3a      	ldr	r2, [r7, #32]
 8013264:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013266:	4b3f      	ldr	r3, [pc, #252]	@ (8013364 <netif_add+0x18c>)
 8013268:	781a      	ldrb	r2, [r3, #0]
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013274:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	68b9      	ldr	r1, [r7, #8]
 801327c:	68f8      	ldr	r0, [r7, #12]
 801327e:	f000 f913 	bl	80134a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013284:	68f8      	ldr	r0, [r7, #12]
 8013286:	4798      	blx	r3
 8013288:	4603      	mov	r3, r0
 801328a:	2b00      	cmp	r3, #0
 801328c:	d001      	beq.n	8013292 <netif_add+0xba>
    return NULL;
 801328e:	2300      	movs	r3, #0
 8013290:	e058      	b.n	8013344 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013298:	2bff      	cmp	r3, #255	@ 0xff
 801329a:	d103      	bne.n	80132a4 <netif_add+0xcc>
        netif->num = 0;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	2200      	movs	r2, #0
 80132a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80132a4:	2300      	movs	r3, #0
 80132a6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80132a8:	4b2f      	ldr	r3, [pc, #188]	@ (8013368 <netif_add+0x190>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	617b      	str	r3, [r7, #20]
 80132ae:	e02b      	b.n	8013308 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80132b0:	697a      	ldr	r2, [r7, #20]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d106      	bne.n	80132c6 <netif_add+0xee>
 80132b8:	4b24      	ldr	r3, [pc, #144]	@ (801334c <netif_add+0x174>)
 80132ba:	f240 128b 	movw	r2, #395	@ 0x18b
 80132be:	492b      	ldr	r1, [pc, #172]	@ (801336c <netif_add+0x194>)
 80132c0:	4824      	ldr	r0, [pc, #144]	@ (8013354 <netif_add+0x17c>)
 80132c2:	f00a fd07 	bl	801dcd4 <iprintf>
        num_netifs++;
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	3301      	adds	r3, #1
 80132ca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	2bff      	cmp	r3, #255	@ 0xff
 80132d0:	dd06      	ble.n	80132e0 <netif_add+0x108>
 80132d2:	4b1e      	ldr	r3, [pc, #120]	@ (801334c <netif_add+0x174>)
 80132d4:	f240 128d 	movw	r2, #397	@ 0x18d
 80132d8:	4925      	ldr	r1, [pc, #148]	@ (8013370 <netif_add+0x198>)
 80132da:	481e      	ldr	r0, [pc, #120]	@ (8013354 <netif_add+0x17c>)
 80132dc:	f00a fcfa 	bl	801dcd4 <iprintf>
        if (netif2->num == netif->num) {
 80132e0:	697b      	ldr	r3, [r7, #20]
 80132e2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d108      	bne.n	8013302 <netif_add+0x12a>
          netif->num++;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80132f6:	3301      	adds	r3, #1
 80132f8:	b2da      	uxtb	r2, r3
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013300:	e005      	b.n	801330e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	617b      	str	r3, [r7, #20]
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d1d0      	bne.n	80132b0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d1be      	bne.n	8013292 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801331a:	2bfe      	cmp	r3, #254	@ 0xfe
 801331c:	d103      	bne.n	8013326 <netif_add+0x14e>
    netif_num = 0;
 801331e:	4b11      	ldr	r3, [pc, #68]	@ (8013364 <netif_add+0x18c>)
 8013320:	2200      	movs	r2, #0
 8013322:	701a      	strb	r2, [r3, #0]
 8013324:	e006      	b.n	8013334 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801332c:	3301      	adds	r3, #1
 801332e:	b2da      	uxtb	r2, r3
 8013330:	4b0c      	ldr	r3, [pc, #48]	@ (8013364 <netif_add+0x18c>)
 8013332:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013334:	4b0c      	ldr	r3, [pc, #48]	@ (8013368 <netif_add+0x190>)
 8013336:	681a      	ldr	r2, [r3, #0]
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801333c:	4a0a      	ldr	r2, [pc, #40]	@ (8013368 <netif_add+0x190>)
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013342:	68fb      	ldr	r3, [r7, #12]
}
 8013344:	4618      	mov	r0, r3
 8013346:	3718      	adds	r7, #24
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	0801f224 	.word	0x0801f224
 8013350:	0801f2b8 	.word	0x0801f2b8
 8013354:	0801f274 	.word	0x0801f274
 8013358:	0801f2d4 	.word	0x0801f2d4
 801335c:	08021c94 	.word	0x08021c94
 8013360:	08013783 	.word	0x08013783
 8013364:	20027684 	.word	0x20027684
 8013368:	2002767c 	.word	0x2002767c
 801336c:	0801f2f8 	.word	0x0801f2f8
 8013370:	0801f30c 	.word	0x0801f30c

08013374 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801337e:	6839      	ldr	r1, [r7, #0]
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f002 fb8f 	bl	8015aa4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013386:	6839      	ldr	r1, [r7, #0]
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f006 ff4b 	bl	801a224 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801338e:	bf00      	nop
 8013390:	3708      	adds	r7, #8
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
	...

08013398 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b086      	sub	sp, #24
 801339c:	af00      	add	r7, sp, #0
 801339e:	60f8      	str	r0, [r7, #12]
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d106      	bne.n	80133b8 <netif_do_set_ipaddr+0x20>
 80133aa:	4b1d      	ldr	r3, [pc, #116]	@ (8013420 <netif_do_set_ipaddr+0x88>)
 80133ac:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80133b0:	491c      	ldr	r1, [pc, #112]	@ (8013424 <netif_do_set_ipaddr+0x8c>)
 80133b2:	481d      	ldr	r0, [pc, #116]	@ (8013428 <netif_do_set_ipaddr+0x90>)
 80133b4:	f00a fc8e 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d106      	bne.n	80133cc <netif_do_set_ipaddr+0x34>
 80133be:	4b18      	ldr	r3, [pc, #96]	@ (8013420 <netif_do_set_ipaddr+0x88>)
 80133c0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80133c4:	4917      	ldr	r1, [pc, #92]	@ (8013424 <netif_do_set_ipaddr+0x8c>)
 80133c6:	4818      	ldr	r0, [pc, #96]	@ (8013428 <netif_do_set_ipaddr+0x90>)
 80133c8:	f00a fc84 	bl	801dcd4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	3304      	adds	r3, #4
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d01c      	beq.n	8013414 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	3304      	adds	r3, #4
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80133ea:	f107 0314 	add.w	r3, r7, #20
 80133ee:	4619      	mov	r1, r3
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f7ff ffbf 	bl	8013374 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d002      	beq.n	8013402 <netif_do_set_ipaddr+0x6a>
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	e000      	b.n	8013404 <netif_do_set_ipaddr+0x6c>
 8013402:	2300      	movs	r3, #0
 8013404:	68fa      	ldr	r2, [r7, #12]
 8013406:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013408:	2101      	movs	r1, #1
 801340a:	68f8      	ldr	r0, [r7, #12]
 801340c:	f000 f8d2 	bl	80135b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013410:	2301      	movs	r3, #1
 8013412:	e000      	b.n	8013416 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013414:	2300      	movs	r3, #0
}
 8013416:	4618      	mov	r0, r3
 8013418:	3718      	adds	r7, #24
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
 801341e:	bf00      	nop
 8013420:	0801f224 	.word	0x0801f224
 8013424:	0801f33c 	.word	0x0801f33c
 8013428:	0801f274 	.word	0x0801f274

0801342c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801342c:	b480      	push	{r7}
 801342e:	b085      	sub	sp, #20
 8013430:	af00      	add	r7, sp, #0
 8013432:	60f8      	str	r0, [r7, #12]
 8013434:	60b9      	str	r1, [r7, #8]
 8013436:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	681a      	ldr	r2, [r3, #0]
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	3308      	adds	r3, #8
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	429a      	cmp	r2, r3
 8013444:	d00a      	beq.n	801345c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d002      	beq.n	8013452 <netif_do_set_netmask+0x26>
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	e000      	b.n	8013454 <netif_do_set_netmask+0x28>
 8013452:	2300      	movs	r3, #0
 8013454:	68fa      	ldr	r2, [r7, #12]
 8013456:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013458:	2301      	movs	r3, #1
 801345a:	e000      	b.n	801345e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801345c:	2300      	movs	r3, #0
}
 801345e:	4618      	mov	r0, r3
 8013460:	3714      	adds	r7, #20
 8013462:	46bd      	mov	sp, r7
 8013464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013468:	4770      	bx	lr

0801346a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801346a:	b480      	push	{r7}
 801346c:	b085      	sub	sp, #20
 801346e:	af00      	add	r7, sp, #0
 8013470:	60f8      	str	r0, [r7, #12]
 8013472:	60b9      	str	r1, [r7, #8]
 8013474:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	330c      	adds	r3, #12
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	429a      	cmp	r2, r3
 8013482:	d00a      	beq.n	801349a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d002      	beq.n	8013490 <netif_do_set_gw+0x26>
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	e000      	b.n	8013492 <netif_do_set_gw+0x28>
 8013490:	2300      	movs	r3, #0
 8013492:	68fa      	ldr	r2, [r7, #12]
 8013494:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013496:	2301      	movs	r3, #1
 8013498:	e000      	b.n	801349c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801349a:	2300      	movs	r3, #0
}
 801349c:	4618      	mov	r0, r3
 801349e:	3714      	adds	r7, #20
 80134a0:	46bd      	mov	sp, r7
 80134a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a6:	4770      	bx	lr

080134a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b088      	sub	sp, #32
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	607a      	str	r2, [r7, #4]
 80134b4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80134b6:	2300      	movs	r3, #0
 80134b8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80134ba:	2300      	movs	r3, #0
 80134bc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80134be:	68bb      	ldr	r3, [r7, #8]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d101      	bne.n	80134c8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80134c4:	4b1c      	ldr	r3, [pc, #112]	@ (8013538 <netif_set_addr+0x90>)
 80134c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d101      	bne.n	80134d2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80134ce:	4b1a      	ldr	r3, [pc, #104]	@ (8013538 <netif_set_addr+0x90>)
 80134d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d101      	bne.n	80134dc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80134d8:	4b17      	ldr	r3, [pc, #92]	@ (8013538 <netif_set_addr+0x90>)
 80134da:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d003      	beq.n	80134ea <netif_set_addr+0x42>
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d101      	bne.n	80134ee <netif_set_addr+0x46>
 80134ea:	2301      	movs	r3, #1
 80134ec:	e000      	b.n	80134f0 <netif_set_addr+0x48>
 80134ee:	2300      	movs	r3, #0
 80134f0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80134f2:	697b      	ldr	r3, [r7, #20]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d006      	beq.n	8013506 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80134f8:	f107 0310 	add.w	r3, r7, #16
 80134fc:	461a      	mov	r2, r3
 80134fe:	68b9      	ldr	r1, [r7, #8]
 8013500:	68f8      	ldr	r0, [r7, #12]
 8013502:	f7ff ff49 	bl	8013398 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013506:	69fa      	ldr	r2, [r7, #28]
 8013508:	6879      	ldr	r1, [r7, #4]
 801350a:	68f8      	ldr	r0, [r7, #12]
 801350c:	f7ff ff8e 	bl	801342c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013510:	69ba      	ldr	r2, [r7, #24]
 8013512:	6839      	ldr	r1, [r7, #0]
 8013514:	68f8      	ldr	r0, [r7, #12]
 8013516:	f7ff ffa8 	bl	801346a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d106      	bne.n	801352e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013520:	f107 0310 	add.w	r3, r7, #16
 8013524:	461a      	mov	r2, r3
 8013526:	68b9      	ldr	r1, [r7, #8]
 8013528:	68f8      	ldr	r0, [r7, #12]
 801352a:	f7ff ff35 	bl	8013398 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801352e:	bf00      	nop
 8013530:	3720      	adds	r7, #32
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	08021c94 	.word	0x08021c94

0801353c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801353c:	b480      	push	{r7}
 801353e:	b083      	sub	sp, #12
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013544:	4a04      	ldr	r2, [pc, #16]	@ (8013558 <netif_set_default+0x1c>)
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801354a:	bf00      	nop
 801354c:	370c      	adds	r7, #12
 801354e:	46bd      	mov	sp, r7
 8013550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013554:	4770      	bx	lr
 8013556:	bf00      	nop
 8013558:	20027680 	.word	0x20027680

0801355c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b082      	sub	sp, #8
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d107      	bne.n	801357a <netif_set_up+0x1e>
 801356a:	4b0f      	ldr	r3, [pc, #60]	@ (80135a8 <netif_set_up+0x4c>)
 801356c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013570:	490e      	ldr	r1, [pc, #56]	@ (80135ac <netif_set_up+0x50>)
 8013572:	480f      	ldr	r0, [pc, #60]	@ (80135b0 <netif_set_up+0x54>)
 8013574:	f00a fbae 	bl	801dcd4 <iprintf>
 8013578:	e013      	b.n	80135a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013580:	f003 0301 	and.w	r3, r3, #1
 8013584:	2b00      	cmp	r3, #0
 8013586:	d10c      	bne.n	80135a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801358e:	f043 0301 	orr.w	r3, r3, #1
 8013592:	b2da      	uxtb	r2, r3
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801359a:	2103      	movs	r1, #3
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f000 f809 	bl	80135b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80135a2:	3708      	adds	r7, #8
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}
 80135a8:	0801f224 	.word	0x0801f224
 80135ac:	0801f3ac 	.word	0x0801f3ac
 80135b0:	0801f274 	.word	0x0801f274

080135b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b082      	sub	sp, #8
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	460b      	mov	r3, r1
 80135be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d106      	bne.n	80135d4 <netif_issue_reports+0x20>
 80135c6:	4b18      	ldr	r3, [pc, #96]	@ (8013628 <netif_issue_reports+0x74>)
 80135c8:	f240 326d 	movw	r2, #877	@ 0x36d
 80135cc:	4917      	ldr	r1, [pc, #92]	@ (801362c <netif_issue_reports+0x78>)
 80135ce:	4818      	ldr	r0, [pc, #96]	@ (8013630 <netif_issue_reports+0x7c>)
 80135d0:	f00a fb80 	bl	801dcd4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80135da:	f003 0304 	and.w	r3, r3, #4
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d01e      	beq.n	8013620 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80135e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d017      	beq.n	8013620 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80135f0:	78fb      	ldrb	r3, [r7, #3]
 80135f2:	f003 0301 	and.w	r3, r3, #1
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d013      	beq.n	8013622 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	3304      	adds	r3, #4
 80135fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013600:	2b00      	cmp	r3, #0
 8013602:	d00e      	beq.n	8013622 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801360a:	f003 0308 	and.w	r3, r3, #8
 801360e:	2b00      	cmp	r3, #0
 8013610:	d007      	beq.n	8013622 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	3304      	adds	r3, #4
 8013616:	4619      	mov	r1, r3
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f007 fd6d 	bl	801b0f8 <etharp_request>
 801361e:	e000      	b.n	8013622 <netif_issue_reports+0x6e>
    return;
 8013620:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013622:	3708      	adds	r7, #8
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}
 8013628:	0801f224 	.word	0x0801f224
 801362c:	0801f3c8 	.word	0x0801f3c8
 8013630:	0801f274 	.word	0x0801f274

08013634 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b082      	sub	sp, #8
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d107      	bne.n	8013652 <netif_set_down+0x1e>
 8013642:	4b12      	ldr	r3, [pc, #72]	@ (801368c <netif_set_down+0x58>)
 8013644:	f240 329b 	movw	r2, #923	@ 0x39b
 8013648:	4911      	ldr	r1, [pc, #68]	@ (8013690 <netif_set_down+0x5c>)
 801364a:	4812      	ldr	r0, [pc, #72]	@ (8013694 <netif_set_down+0x60>)
 801364c:	f00a fb42 	bl	801dcd4 <iprintf>
 8013650:	e019      	b.n	8013686 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013658:	f003 0301 	and.w	r3, r3, #1
 801365c:	2b00      	cmp	r3, #0
 801365e:	d012      	beq.n	8013686 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013666:	f023 0301 	bic.w	r3, r3, #1
 801366a:	b2da      	uxtb	r2, r3
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013678:	f003 0308 	and.w	r3, r3, #8
 801367c:	2b00      	cmp	r3, #0
 801367e:	d002      	beq.n	8013686 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013680:	6878      	ldr	r0, [r7, #4]
 8013682:	f007 f8f7 	bl	801a874 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013686:	3708      	adds	r7, #8
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}
 801368c:	0801f224 	.word	0x0801f224
 8013690:	0801f3ec 	.word	0x0801f3ec
 8013694:	0801f274 	.word	0x0801f274

08013698 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d107      	bne.n	80136b6 <netif_set_link_up+0x1e>
 80136a6:	4b13      	ldr	r3, [pc, #76]	@ (80136f4 <netif_set_link_up+0x5c>)
 80136a8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80136ac:	4912      	ldr	r1, [pc, #72]	@ (80136f8 <netif_set_link_up+0x60>)
 80136ae:	4813      	ldr	r0, [pc, #76]	@ (80136fc <netif_set_link_up+0x64>)
 80136b0:	f00a fb10 	bl	801dcd4 <iprintf>
 80136b4:	e01b      	b.n	80136ee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80136bc:	f003 0304 	and.w	r3, r3, #4
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d114      	bne.n	80136ee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80136ca:	f043 0304 	orr.w	r3, r3, #4
 80136ce:	b2da      	uxtb	r2, r3
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80136d6:	2103      	movs	r1, #3
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f7ff ff6b 	bl	80135b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	69db      	ldr	r3, [r3, #28]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d003      	beq.n	80136ee <netif_set_link_up+0x56>
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	69db      	ldr	r3, [r3, #28]
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80136ee:	3708      	adds	r7, #8
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	0801f224 	.word	0x0801f224
 80136f8:	0801f40c 	.word	0x0801f40c
 80136fc:	0801f274 	.word	0x0801f274

08013700 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d107      	bne.n	801371e <netif_set_link_down+0x1e>
 801370e:	4b11      	ldr	r3, [pc, #68]	@ (8013754 <netif_set_link_down+0x54>)
 8013710:	f240 4206 	movw	r2, #1030	@ 0x406
 8013714:	4910      	ldr	r1, [pc, #64]	@ (8013758 <netif_set_link_down+0x58>)
 8013716:	4811      	ldr	r0, [pc, #68]	@ (801375c <netif_set_link_down+0x5c>)
 8013718:	f00a fadc 	bl	801dcd4 <iprintf>
 801371c:	e017      	b.n	801374e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013724:	f003 0304 	and.w	r3, r3, #4
 8013728:	2b00      	cmp	r3, #0
 801372a:	d010      	beq.n	801374e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013732:	f023 0304 	bic.w	r3, r3, #4
 8013736:	b2da      	uxtb	r2, r3
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	69db      	ldr	r3, [r3, #28]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d003      	beq.n	801374e <netif_set_link_down+0x4e>
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	69db      	ldr	r3, [r3, #28]
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801374e:	3708      	adds	r7, #8
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}
 8013754:	0801f224 	.word	0x0801f224
 8013758:	0801f430 	.word	0x0801f430
 801375c:	0801f274 	.word	0x0801f274

08013760 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d002      	beq.n	8013776 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	683a      	ldr	r2, [r7, #0]
 8013774:	61da      	str	r2, [r3, #28]
  }
}
 8013776:	bf00      	nop
 8013778:	370c      	adds	r7, #12
 801377a:	46bd      	mov	sp, r7
 801377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013780:	4770      	bx	lr

08013782 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013782:	b480      	push	{r7}
 8013784:	b085      	sub	sp, #20
 8013786:	af00      	add	r7, sp, #0
 8013788:	60f8      	str	r0, [r7, #12]
 801378a:	60b9      	str	r1, [r7, #8]
 801378c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801378e:	f06f 030b 	mvn.w	r3, #11
}
 8013792:	4618      	mov	r0, r3
 8013794:	3714      	adds	r7, #20
 8013796:	46bd      	mov	sp, r7
 8013798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379c:	4770      	bx	lr
	...

080137a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80137a0:	b480      	push	{r7}
 80137a2:	b085      	sub	sp, #20
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	4603      	mov	r3, r0
 80137a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80137aa:	79fb      	ldrb	r3, [r7, #7]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d013      	beq.n	80137d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80137b0:	4b0d      	ldr	r3, [pc, #52]	@ (80137e8 <netif_get_by_index+0x48>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	60fb      	str	r3, [r7, #12]
 80137b6:	e00c      	b.n	80137d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80137be:	3301      	adds	r3, #1
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	79fa      	ldrb	r2, [r7, #7]
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d101      	bne.n	80137cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	e006      	b.n	80137da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	60fb      	str	r3, [r7, #12]
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d1ef      	bne.n	80137b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80137d8:	2300      	movs	r3, #0
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3714      	adds	r7, #20
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr
 80137e6:	bf00      	nop
 80137e8:	2002767c 	.word	0x2002767c

080137ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b082      	sub	sp, #8
 80137f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80137f2:	f009 f8e1 	bl	801c9b8 <sys_arch_protect>
 80137f6:	6038      	str	r0, [r7, #0]
 80137f8:	4b0d      	ldr	r3, [pc, #52]	@ (8013830 <pbuf_free_ooseq+0x44>)
 80137fa:	2200      	movs	r2, #0
 80137fc:	701a      	strb	r2, [r3, #0]
 80137fe:	6838      	ldr	r0, [r7, #0]
 8013800:	f009 f8e8 	bl	801c9d4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013804:	4b0b      	ldr	r3, [pc, #44]	@ (8013834 <pbuf_free_ooseq+0x48>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	607b      	str	r3, [r7, #4]
 801380a:	e00a      	b.n	8013822 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013810:	2b00      	cmp	r3, #0
 8013812:	d003      	beq.n	801381c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f002 f983 	bl	8015b20 <tcp_free_ooseq>
      return;
 801381a:	e005      	b.n	8013828 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	68db      	ldr	r3, [r3, #12]
 8013820:	607b      	str	r3, [r7, #4]
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d1f1      	bne.n	801380c <pbuf_free_ooseq+0x20>
    }
  }
}
 8013828:	3708      	adds	r7, #8
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
 801382e:	bf00      	nop
 8013830:	20027685 	.word	0x20027685
 8013834:	20027694 	.word	0x20027694

08013838 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b082      	sub	sp, #8
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013840:	f7ff ffd4 	bl	80137ec <pbuf_free_ooseq>
}
 8013844:	bf00      	nop
 8013846:	3708      	adds	r7, #8
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013852:	f009 f8b1 	bl	801c9b8 <sys_arch_protect>
 8013856:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013858:	4b0f      	ldr	r3, [pc, #60]	@ (8013898 <pbuf_pool_is_empty+0x4c>)
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801385e:	4b0e      	ldr	r3, [pc, #56]	@ (8013898 <pbuf_pool_is_empty+0x4c>)
 8013860:	2201      	movs	r2, #1
 8013862:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013864:	6878      	ldr	r0, [r7, #4]
 8013866:	f009 f8b5 	bl	801c9d4 <sys_arch_unprotect>

  if (!queued) {
 801386a:	78fb      	ldrb	r3, [r7, #3]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d10f      	bne.n	8013890 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013870:	2100      	movs	r1, #0
 8013872:	480a      	ldr	r0, [pc, #40]	@ (801389c <pbuf_pool_is_empty+0x50>)
 8013874:	f7fe feaa 	bl	80125cc <tcpip_try_callback>
 8013878:	4603      	mov	r3, r0
 801387a:	2b00      	cmp	r3, #0
 801387c:	d008      	beq.n	8013890 <pbuf_pool_is_empty+0x44>
 801387e:	f009 f89b 	bl	801c9b8 <sys_arch_protect>
 8013882:	6078      	str	r0, [r7, #4]
 8013884:	4b04      	ldr	r3, [pc, #16]	@ (8013898 <pbuf_pool_is_empty+0x4c>)
 8013886:	2200      	movs	r2, #0
 8013888:	701a      	strb	r2, [r3, #0]
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f009 f8a2 	bl	801c9d4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013890:	bf00      	nop
 8013892:	3708      	adds	r7, #8
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	20027685 	.word	0x20027685
 801389c:	08013839 	.word	0x08013839

080138a0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80138a0:	b480      	push	{r7}
 80138a2:	b085      	sub	sp, #20
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	60f8      	str	r0, [r7, #12]
 80138a8:	60b9      	str	r1, [r7, #8]
 80138aa:	4611      	mov	r1, r2
 80138ac:	461a      	mov	r2, r3
 80138ae:	460b      	mov	r3, r1
 80138b0:	80fb      	strh	r3, [r7, #6]
 80138b2:	4613      	mov	r3, r2
 80138b4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	2200      	movs	r2, #0
 80138ba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	68ba      	ldr	r2, [r7, #8]
 80138c0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	88fa      	ldrh	r2, [r7, #6]
 80138c6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	88ba      	ldrh	r2, [r7, #4]
 80138cc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80138ce:	8b3b      	ldrh	r3, [r7, #24]
 80138d0:	b2da      	uxtb	r2, r3
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	7f3a      	ldrb	r2, [r7, #28]
 80138da:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2201      	movs	r2, #1
 80138e0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2200      	movs	r2, #0
 80138e6:	73da      	strb	r2, [r3, #15]
}
 80138e8:	bf00      	nop
 80138ea:	3714      	adds	r7, #20
 80138ec:	46bd      	mov	sp, r7
 80138ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f2:	4770      	bx	lr

080138f4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b08c      	sub	sp, #48	@ 0x30
 80138f8:	af02      	add	r7, sp, #8
 80138fa:	4603      	mov	r3, r0
 80138fc:	71fb      	strb	r3, [r7, #7]
 80138fe:	460b      	mov	r3, r1
 8013900:	80bb      	strh	r3, [r7, #4]
 8013902:	4613      	mov	r3, r2
 8013904:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013906:	79fb      	ldrb	r3, [r7, #7]
 8013908:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801390a:	887b      	ldrh	r3, [r7, #2]
 801390c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013910:	d07f      	beq.n	8013a12 <pbuf_alloc+0x11e>
 8013912:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013916:	f300 80c8 	bgt.w	8013aaa <pbuf_alloc+0x1b6>
 801391a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801391e:	d010      	beq.n	8013942 <pbuf_alloc+0x4e>
 8013920:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013924:	f300 80c1 	bgt.w	8013aaa <pbuf_alloc+0x1b6>
 8013928:	2b01      	cmp	r3, #1
 801392a:	d002      	beq.n	8013932 <pbuf_alloc+0x3e>
 801392c:	2b41      	cmp	r3, #65	@ 0x41
 801392e:	f040 80bc 	bne.w	8013aaa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013932:	887a      	ldrh	r2, [r7, #2]
 8013934:	88bb      	ldrh	r3, [r7, #4]
 8013936:	4619      	mov	r1, r3
 8013938:	2000      	movs	r0, #0
 801393a:	f000 f8d1 	bl	8013ae0 <pbuf_alloc_reference>
 801393e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013940:	e0bd      	b.n	8013abe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013942:	2300      	movs	r3, #0
 8013944:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013946:	2300      	movs	r3, #0
 8013948:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801394a:	88bb      	ldrh	r3, [r7, #4]
 801394c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801394e:	200c      	movs	r0, #12
 8013950:	f7ff fb9a 	bl	8013088 <memp_malloc>
 8013954:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d109      	bne.n	8013970 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801395c:	f7ff ff76 	bl	801384c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013962:	2b00      	cmp	r3, #0
 8013964:	d002      	beq.n	801396c <pbuf_alloc+0x78>
            pbuf_free(p);
 8013966:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013968:	f000 faa8 	bl	8013ebc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801396c:	2300      	movs	r3, #0
 801396e:	e0a7      	b.n	8013ac0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013970:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013972:	3303      	adds	r3, #3
 8013974:	b29b      	uxth	r3, r3
 8013976:	f023 0303 	bic.w	r3, r3, #3
 801397a:	b29b      	uxth	r3, r3
 801397c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013980:	b29b      	uxth	r3, r3
 8013982:	8b7a      	ldrh	r2, [r7, #26]
 8013984:	4293      	cmp	r3, r2
 8013986:	bf28      	it	cs
 8013988:	4613      	movcs	r3, r2
 801398a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801398c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801398e:	3310      	adds	r3, #16
 8013990:	693a      	ldr	r2, [r7, #16]
 8013992:	4413      	add	r3, r2
 8013994:	3303      	adds	r3, #3
 8013996:	f023 0303 	bic.w	r3, r3, #3
 801399a:	4618      	mov	r0, r3
 801399c:	89f9      	ldrh	r1, [r7, #14]
 801399e:	8b7a      	ldrh	r2, [r7, #26]
 80139a0:	2300      	movs	r3, #0
 80139a2:	9301      	str	r3, [sp, #4]
 80139a4:	887b      	ldrh	r3, [r7, #2]
 80139a6:	9300      	str	r3, [sp, #0]
 80139a8:	460b      	mov	r3, r1
 80139aa:	4601      	mov	r1, r0
 80139ac:	6938      	ldr	r0, [r7, #16]
 80139ae:	f7ff ff77 	bl	80138a0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80139b2:	693b      	ldr	r3, [r7, #16]
 80139b4:	685b      	ldr	r3, [r3, #4]
 80139b6:	f003 0303 	and.w	r3, r3, #3
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d006      	beq.n	80139cc <pbuf_alloc+0xd8>
 80139be:	4b42      	ldr	r3, [pc, #264]	@ (8013ac8 <pbuf_alloc+0x1d4>)
 80139c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80139c4:	4941      	ldr	r1, [pc, #260]	@ (8013acc <pbuf_alloc+0x1d8>)
 80139c6:	4842      	ldr	r0, [pc, #264]	@ (8013ad0 <pbuf_alloc+0x1dc>)
 80139c8:	f00a f984 	bl	801dcd4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80139cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80139ce:	3303      	adds	r3, #3
 80139d0:	f023 0303 	bic.w	r3, r3, #3
 80139d4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80139d8:	d106      	bne.n	80139e8 <pbuf_alloc+0xf4>
 80139da:	4b3b      	ldr	r3, [pc, #236]	@ (8013ac8 <pbuf_alloc+0x1d4>)
 80139dc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80139e0:	493c      	ldr	r1, [pc, #240]	@ (8013ad4 <pbuf_alloc+0x1e0>)
 80139e2:	483b      	ldr	r0, [pc, #236]	@ (8013ad0 <pbuf_alloc+0x1dc>)
 80139e4:	f00a f976 	bl	801dcd4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80139e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d102      	bne.n	80139f4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80139f2:	e002      	b.n	80139fa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	693a      	ldr	r2, [r7, #16]
 80139f8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80139fa:	693b      	ldr	r3, [r7, #16]
 80139fc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80139fe:	8b7a      	ldrh	r2, [r7, #26]
 8013a00:	89fb      	ldrh	r3, [r7, #14]
 8013a02:	1ad3      	subs	r3, r2, r3
 8013a04:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013a06:	2300      	movs	r3, #0
 8013a08:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8013a0a:	8b7b      	ldrh	r3, [r7, #26]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d19e      	bne.n	801394e <pbuf_alloc+0x5a>
      break;
 8013a10:	e055      	b.n	8013abe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013a12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013a14:	3303      	adds	r3, #3
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	f023 0303 	bic.w	r3, r3, #3
 8013a1c:	b29a      	uxth	r2, r3
 8013a1e:	88bb      	ldrh	r3, [r7, #4]
 8013a20:	3303      	adds	r3, #3
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	f023 0303 	bic.w	r3, r3, #3
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	4413      	add	r3, r2
 8013a2c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013a2e:	8b3b      	ldrh	r3, [r7, #24]
 8013a30:	3310      	adds	r3, #16
 8013a32:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013a34:	8b3a      	ldrh	r2, [r7, #24]
 8013a36:	88bb      	ldrh	r3, [r7, #4]
 8013a38:	3303      	adds	r3, #3
 8013a3a:	f023 0303 	bic.w	r3, r3, #3
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d306      	bcc.n	8013a50 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013a42:	8afa      	ldrh	r2, [r7, #22]
 8013a44:	88bb      	ldrh	r3, [r7, #4]
 8013a46:	3303      	adds	r3, #3
 8013a48:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d201      	bcs.n	8013a54 <pbuf_alloc+0x160>
        return NULL;
 8013a50:	2300      	movs	r3, #0
 8013a52:	e035      	b.n	8013ac0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013a54:	8afb      	ldrh	r3, [r7, #22]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7ff f972 	bl	8012d40 <mem_malloc>
 8013a5c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8013a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d101      	bne.n	8013a68 <pbuf_alloc+0x174>
        return NULL;
 8013a64:	2300      	movs	r3, #0
 8013a66:	e02b      	b.n	8013ac0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013a68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013a6a:	3310      	adds	r3, #16
 8013a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013a6e:	4413      	add	r3, r2
 8013a70:	3303      	adds	r3, #3
 8013a72:	f023 0303 	bic.w	r3, r3, #3
 8013a76:	4618      	mov	r0, r3
 8013a78:	88b9      	ldrh	r1, [r7, #4]
 8013a7a:	88ba      	ldrh	r2, [r7, #4]
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	9301      	str	r3, [sp, #4]
 8013a80:	887b      	ldrh	r3, [r7, #2]
 8013a82:	9300      	str	r3, [sp, #0]
 8013a84:	460b      	mov	r3, r1
 8013a86:	4601      	mov	r1, r0
 8013a88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013a8a:	f7ff ff09 	bl	80138a0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	f003 0303 	and.w	r3, r3, #3
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d010      	beq.n	8013abc <pbuf_alloc+0x1c8>
 8013a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8013ac8 <pbuf_alloc+0x1d4>)
 8013a9c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8013aa0:	490d      	ldr	r1, [pc, #52]	@ (8013ad8 <pbuf_alloc+0x1e4>)
 8013aa2:	480b      	ldr	r0, [pc, #44]	@ (8013ad0 <pbuf_alloc+0x1dc>)
 8013aa4:	f00a f916 	bl	801dcd4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013aa8:	e008      	b.n	8013abc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013aaa:	4b07      	ldr	r3, [pc, #28]	@ (8013ac8 <pbuf_alloc+0x1d4>)
 8013aac:	f240 1227 	movw	r2, #295	@ 0x127
 8013ab0:	490a      	ldr	r1, [pc, #40]	@ (8013adc <pbuf_alloc+0x1e8>)
 8013ab2:	4807      	ldr	r0, [pc, #28]	@ (8013ad0 <pbuf_alloc+0x1dc>)
 8013ab4:	f00a f90e 	bl	801dcd4 <iprintf>
      return NULL;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	e001      	b.n	8013ac0 <pbuf_alloc+0x1cc>
      break;
 8013abc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3728      	adds	r7, #40	@ 0x28
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	0801f454 	.word	0x0801f454
 8013acc:	0801f484 	.word	0x0801f484
 8013ad0:	0801f4b4 	.word	0x0801f4b4
 8013ad4:	0801f4dc 	.word	0x0801f4dc
 8013ad8:	0801f510 	.word	0x0801f510
 8013adc:	0801f53c 	.word	0x0801f53c

08013ae0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b086      	sub	sp, #24
 8013ae4:	af02      	add	r7, sp, #8
 8013ae6:	6078      	str	r0, [r7, #4]
 8013ae8:	460b      	mov	r3, r1
 8013aea:	807b      	strh	r3, [r7, #2]
 8013aec:	4613      	mov	r3, r2
 8013aee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013af0:	883b      	ldrh	r3, [r7, #0]
 8013af2:	2b41      	cmp	r3, #65	@ 0x41
 8013af4:	d009      	beq.n	8013b0a <pbuf_alloc_reference+0x2a>
 8013af6:	883b      	ldrh	r3, [r7, #0]
 8013af8:	2b01      	cmp	r3, #1
 8013afa:	d006      	beq.n	8013b0a <pbuf_alloc_reference+0x2a>
 8013afc:	4b0f      	ldr	r3, [pc, #60]	@ (8013b3c <pbuf_alloc_reference+0x5c>)
 8013afe:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8013b02:	490f      	ldr	r1, [pc, #60]	@ (8013b40 <pbuf_alloc_reference+0x60>)
 8013b04:	480f      	ldr	r0, [pc, #60]	@ (8013b44 <pbuf_alloc_reference+0x64>)
 8013b06:	f00a f8e5 	bl	801dcd4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013b0a:	200b      	movs	r0, #11
 8013b0c:	f7ff fabc 	bl	8013088 <memp_malloc>
 8013b10:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d101      	bne.n	8013b1c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	e00b      	b.n	8013b34 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013b1c:	8879      	ldrh	r1, [r7, #2]
 8013b1e:	887a      	ldrh	r2, [r7, #2]
 8013b20:	2300      	movs	r3, #0
 8013b22:	9301      	str	r3, [sp, #4]
 8013b24:	883b      	ldrh	r3, [r7, #0]
 8013b26:	9300      	str	r3, [sp, #0]
 8013b28:	460b      	mov	r3, r1
 8013b2a:	6879      	ldr	r1, [r7, #4]
 8013b2c:	68f8      	ldr	r0, [r7, #12]
 8013b2e:	f7ff feb7 	bl	80138a0 <pbuf_init_alloced_pbuf>
  return p;
 8013b32:	68fb      	ldr	r3, [r7, #12]
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3710      	adds	r7, #16
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	0801f454 	.word	0x0801f454
 8013b40:	0801f558 	.word	0x0801f558
 8013b44:	0801f4b4 	.word	0x0801f4b4

08013b48 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b088      	sub	sp, #32
 8013b4c:	af02      	add	r7, sp, #8
 8013b4e:	607b      	str	r3, [r7, #4]
 8013b50:	4603      	mov	r3, r0
 8013b52:	73fb      	strb	r3, [r7, #15]
 8013b54:	460b      	mov	r3, r1
 8013b56:	81bb      	strh	r3, [r7, #12]
 8013b58:	4613      	mov	r3, r2
 8013b5a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013b5c:	7bfb      	ldrb	r3, [r7, #15]
 8013b5e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013b60:	8a7b      	ldrh	r3, [r7, #18]
 8013b62:	3303      	adds	r3, #3
 8013b64:	f023 0203 	bic.w	r2, r3, #3
 8013b68:	89bb      	ldrh	r3, [r7, #12]
 8013b6a:	441a      	add	r2, r3
 8013b6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d901      	bls.n	8013b76 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013b72:	2300      	movs	r3, #0
 8013b74:	e018      	b.n	8013ba8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013b76:	6a3b      	ldr	r3, [r7, #32]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d007      	beq.n	8013b8c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013b7c:	8a7b      	ldrh	r3, [r7, #18]
 8013b7e:	3303      	adds	r3, #3
 8013b80:	f023 0303 	bic.w	r3, r3, #3
 8013b84:	6a3a      	ldr	r2, [r7, #32]
 8013b86:	4413      	add	r3, r2
 8013b88:	617b      	str	r3, [r7, #20]
 8013b8a:	e001      	b.n	8013b90 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	89b9      	ldrh	r1, [r7, #12]
 8013b94:	89ba      	ldrh	r2, [r7, #12]
 8013b96:	2302      	movs	r3, #2
 8013b98:	9301      	str	r3, [sp, #4]
 8013b9a:	897b      	ldrh	r3, [r7, #10]
 8013b9c:	9300      	str	r3, [sp, #0]
 8013b9e:	460b      	mov	r3, r1
 8013ba0:	6979      	ldr	r1, [r7, #20]
 8013ba2:	f7ff fe7d 	bl	80138a0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013ba6:	687b      	ldr	r3, [r7, #4]
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3718      	adds	r7, #24
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}

08013bb0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	460b      	mov	r3, r1
 8013bba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d106      	bne.n	8013bd0 <pbuf_realloc+0x20>
 8013bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8013cac <pbuf_realloc+0xfc>)
 8013bc4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8013bc8:	4939      	ldr	r1, [pc, #228]	@ (8013cb0 <pbuf_realloc+0x100>)
 8013bca:	483a      	ldr	r0, [pc, #232]	@ (8013cb4 <pbuf_realloc+0x104>)
 8013bcc:	f00a f882 	bl	801dcd4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	891b      	ldrh	r3, [r3, #8]
 8013bd4:	887a      	ldrh	r2, [r7, #2]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d263      	bcs.n	8013ca2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	891a      	ldrh	r2, [r3, #8]
 8013bde:	887b      	ldrh	r3, [r7, #2]
 8013be0:	1ad3      	subs	r3, r2, r3
 8013be2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013be4:	887b      	ldrh	r3, [r7, #2]
 8013be6:	817b      	strh	r3, [r7, #10]
  q = p;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013bec:	e018      	b.n	8013c20 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	895b      	ldrh	r3, [r3, #10]
 8013bf2:	897a      	ldrh	r2, [r7, #10]
 8013bf4:	1ad3      	subs	r3, r2, r3
 8013bf6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	891a      	ldrh	r2, [r3, #8]
 8013bfc:	893b      	ldrh	r3, [r7, #8]
 8013bfe:	1ad3      	subs	r3, r2, r3
 8013c00:	b29a      	uxth	r2, r3
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d106      	bne.n	8013c20 <pbuf_realloc+0x70>
 8013c12:	4b26      	ldr	r3, [pc, #152]	@ (8013cac <pbuf_realloc+0xfc>)
 8013c14:	f240 12af 	movw	r2, #431	@ 0x1af
 8013c18:	4927      	ldr	r1, [pc, #156]	@ (8013cb8 <pbuf_realloc+0x108>)
 8013c1a:	4826      	ldr	r0, [pc, #152]	@ (8013cb4 <pbuf_realloc+0x104>)
 8013c1c:	f00a f85a 	bl	801dcd4 <iprintf>
  while (rem_len > q->len) {
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	895b      	ldrh	r3, [r3, #10]
 8013c24:	897a      	ldrh	r2, [r7, #10]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d8e1      	bhi.n	8013bee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	7b1b      	ldrb	r3, [r3, #12]
 8013c2e:	f003 030f 	and.w	r3, r3, #15
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d121      	bne.n	8013c7a <pbuf_realloc+0xca>
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	895b      	ldrh	r3, [r3, #10]
 8013c3a:	897a      	ldrh	r2, [r7, #10]
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d01c      	beq.n	8013c7a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	7b5b      	ldrb	r3, [r3, #13]
 8013c44:	f003 0302 	and.w	r3, r3, #2
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d116      	bne.n	8013c7a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	685a      	ldr	r2, [r3, #4]
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	1ad3      	subs	r3, r2, r3
 8013c54:	b29a      	uxth	r2, r3
 8013c56:	897b      	ldrh	r3, [r7, #10]
 8013c58:	4413      	add	r3, r2
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	68f8      	ldr	r0, [r7, #12]
 8013c60:	f7fe ff64 	bl	8012b2c <mem_trim>
 8013c64:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d106      	bne.n	8013c7a <pbuf_realloc+0xca>
 8013c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8013cac <pbuf_realloc+0xfc>)
 8013c6e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8013c72:	4912      	ldr	r1, [pc, #72]	@ (8013cbc <pbuf_realloc+0x10c>)
 8013c74:	480f      	ldr	r0, [pc, #60]	@ (8013cb4 <pbuf_realloc+0x104>)
 8013c76:	f00a f82d 	bl	801dcd4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	897a      	ldrh	r2, [r7, #10]
 8013c7e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	895a      	ldrh	r2, [r3, #10]
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d004      	beq.n	8013c9a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	4618      	mov	r0, r3
 8013c96:	f000 f911 	bl	8013ebc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	601a      	str	r2, [r3, #0]
 8013ca0:	e000      	b.n	8013ca4 <pbuf_realloc+0xf4>
    return;
 8013ca2:	bf00      	nop

}
 8013ca4:	3710      	adds	r7, #16
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	0801f454 	.word	0x0801f454
 8013cb0:	0801f56c 	.word	0x0801f56c
 8013cb4:	0801f4b4 	.word	0x0801f4b4
 8013cb8:	0801f584 	.word	0x0801f584
 8013cbc:	0801f59c 	.word	0x0801f59c

08013cc0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b086      	sub	sp, #24
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	60f8      	str	r0, [r7, #12]
 8013cc8:	60b9      	str	r1, [r7, #8]
 8013cca:	4613      	mov	r3, r2
 8013ccc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d106      	bne.n	8013ce2 <pbuf_add_header_impl+0x22>
 8013cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8013d84 <pbuf_add_header_impl+0xc4>)
 8013cd6:	f240 12df 	movw	r2, #479	@ 0x1df
 8013cda:	492b      	ldr	r1, [pc, #172]	@ (8013d88 <pbuf_add_header_impl+0xc8>)
 8013cdc:	482b      	ldr	r0, [pc, #172]	@ (8013d8c <pbuf_add_header_impl+0xcc>)
 8013cde:	f009 fff9 	bl	801dcd4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d003      	beq.n	8013cf0 <pbuf_add_header_impl+0x30>
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013cee:	d301      	bcc.n	8013cf4 <pbuf_add_header_impl+0x34>
    return 1;
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	e043      	b.n	8013d7c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d101      	bne.n	8013cfe <pbuf_add_header_impl+0x3e>
    return 0;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	e03e      	b.n	8013d7c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	891a      	ldrh	r2, [r3, #8]
 8013d06:	8a7b      	ldrh	r3, [r7, #18]
 8013d08:	4413      	add	r3, r2
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	8a7a      	ldrh	r2, [r7, #18]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d901      	bls.n	8013d16 <pbuf_add_header_impl+0x56>
    return 1;
 8013d12:	2301      	movs	r3, #1
 8013d14:	e032      	b.n	8013d7c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	7b1b      	ldrb	r3, [r3, #12]
 8013d1a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013d1c:	8a3b      	ldrh	r3, [r7, #16]
 8013d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d00c      	beq.n	8013d40 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	685a      	ldr	r2, [r3, #4]
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	425b      	negs	r3, r3
 8013d2e:	4413      	add	r3, r2
 8013d30:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	3310      	adds	r3, #16
 8013d36:	697a      	ldr	r2, [r7, #20]
 8013d38:	429a      	cmp	r2, r3
 8013d3a:	d20d      	bcs.n	8013d58 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	e01d      	b.n	8013d7c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013d40:	79fb      	ldrb	r3, [r7, #7]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d006      	beq.n	8013d54 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	685a      	ldr	r2, [r3, #4]
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	425b      	negs	r3, r3
 8013d4e:	4413      	add	r3, r2
 8013d50:	617b      	str	r3, [r7, #20]
 8013d52:	e001      	b.n	8013d58 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013d54:	2301      	movs	r3, #1
 8013d56:	e011      	b.n	8013d7c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	697a      	ldr	r2, [r7, #20]
 8013d5c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	895a      	ldrh	r2, [r3, #10]
 8013d62:	8a7b      	ldrh	r3, [r7, #18]
 8013d64:	4413      	add	r3, r2
 8013d66:	b29a      	uxth	r2, r3
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	891a      	ldrh	r2, [r3, #8]
 8013d70:	8a7b      	ldrh	r3, [r7, #18]
 8013d72:	4413      	add	r3, r2
 8013d74:	b29a      	uxth	r2, r3
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	811a      	strh	r2, [r3, #8]


  return 0;
 8013d7a:	2300      	movs	r3, #0
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3718      	adds	r7, #24
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	0801f454 	.word	0x0801f454
 8013d88:	0801f5b8 	.word	0x0801f5b8
 8013d8c:	0801f4b4 	.word	0x0801f4b4

08013d90 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b082      	sub	sp, #8
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	6839      	ldr	r1, [r7, #0]
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f7ff ff8e 	bl	8013cc0 <pbuf_add_header_impl>
 8013da4:	4603      	mov	r3, r0
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3708      	adds	r7, #8
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
	...

08013db0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b084      	sub	sp, #16
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d106      	bne.n	8013dce <pbuf_remove_header+0x1e>
 8013dc0:	4b20      	ldr	r3, [pc, #128]	@ (8013e44 <pbuf_remove_header+0x94>)
 8013dc2:	f240 224b 	movw	r2, #587	@ 0x24b
 8013dc6:	4920      	ldr	r1, [pc, #128]	@ (8013e48 <pbuf_remove_header+0x98>)
 8013dc8:	4820      	ldr	r0, [pc, #128]	@ (8013e4c <pbuf_remove_header+0x9c>)
 8013dca:	f009 ff83 	bl	801dcd4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d003      	beq.n	8013ddc <pbuf_remove_header+0x2c>
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013dda:	d301      	bcc.n	8013de0 <pbuf_remove_header+0x30>
    return 1;
 8013ddc:	2301      	movs	r3, #1
 8013dde:	e02c      	b.n	8013e3a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8013de0:	683b      	ldr	r3, [r7, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d101      	bne.n	8013dea <pbuf_remove_header+0x3a>
    return 0;
 8013de6:	2300      	movs	r3, #0
 8013de8:	e027      	b.n	8013e3a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	895b      	ldrh	r3, [r3, #10]
 8013df2:	89fa      	ldrh	r2, [r7, #14]
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d908      	bls.n	8013e0a <pbuf_remove_header+0x5a>
 8013df8:	4b12      	ldr	r3, [pc, #72]	@ (8013e44 <pbuf_remove_header+0x94>)
 8013dfa:	f240 2255 	movw	r2, #597	@ 0x255
 8013dfe:	4914      	ldr	r1, [pc, #80]	@ (8013e50 <pbuf_remove_header+0xa0>)
 8013e00:	4812      	ldr	r0, [pc, #72]	@ (8013e4c <pbuf_remove_header+0x9c>)
 8013e02:	f009 ff67 	bl	801dcd4 <iprintf>
 8013e06:	2301      	movs	r3, #1
 8013e08:	e017      	b.n	8013e3a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	685b      	ldr	r3, [r3, #4]
 8013e0e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	685a      	ldr	r2, [r3, #4]
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	441a      	add	r2, r3
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	895a      	ldrh	r2, [r3, #10]
 8013e20:	89fb      	ldrh	r3, [r7, #14]
 8013e22:	1ad3      	subs	r3, r2, r3
 8013e24:	b29a      	uxth	r2, r3
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	891a      	ldrh	r2, [r3, #8]
 8013e2e:	89fb      	ldrh	r3, [r7, #14]
 8013e30:	1ad3      	subs	r3, r2, r3
 8013e32:	b29a      	uxth	r2, r3
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013e38:	2300      	movs	r3, #0
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3710      	adds	r7, #16
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}
 8013e42:	bf00      	nop
 8013e44:	0801f454 	.word	0x0801f454
 8013e48:	0801f5b8 	.word	0x0801f5b8
 8013e4c:	0801f4b4 	.word	0x0801f4b4
 8013e50:	0801f5c4 	.word	0x0801f5c4

08013e54 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b082      	sub	sp, #8
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
 8013e5c:	460b      	mov	r3, r1
 8013e5e:	807b      	strh	r3, [r7, #2]
 8013e60:	4613      	mov	r3, r2
 8013e62:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013e64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	da08      	bge.n	8013e7e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013e6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013e70:	425b      	negs	r3, r3
 8013e72:	4619      	mov	r1, r3
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f7ff ff9b 	bl	8013db0 <pbuf_remove_header>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	e007      	b.n	8013e8e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8013e7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013e82:	787a      	ldrb	r2, [r7, #1]
 8013e84:	4619      	mov	r1, r3
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f7ff ff1a 	bl	8013cc0 <pbuf_add_header_impl>
 8013e8c:	4603      	mov	r3, r0
  }
}
 8013e8e:	4618      	mov	r0, r3
 8013e90:	3708      	adds	r7, #8
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}

08013e96 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013e96:	b580      	push	{r7, lr}
 8013e98:	b082      	sub	sp, #8
 8013e9a:	af00      	add	r7, sp, #0
 8013e9c:	6078      	str	r0, [r7, #4]
 8013e9e:	460b      	mov	r3, r1
 8013ea0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8013ea2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013ea6:	2201      	movs	r2, #1
 8013ea8:	4619      	mov	r1, r3
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f7ff ffd2 	bl	8013e54 <pbuf_header_impl>
 8013eb0:	4603      	mov	r3, r0
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3708      	adds	r7, #8
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}
	...

08013ebc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b088      	sub	sp, #32
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d10b      	bne.n	8013ee2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d106      	bne.n	8013ede <pbuf_free+0x22>
 8013ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8013fc0 <pbuf_free+0x104>)
 8013ed2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8013ed6:	493b      	ldr	r1, [pc, #236]	@ (8013fc4 <pbuf_free+0x108>)
 8013ed8:	483b      	ldr	r0, [pc, #236]	@ (8013fc8 <pbuf_free+0x10c>)
 8013eda:	f009 fefb 	bl	801dcd4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	e069      	b.n	8013fb6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8013ee6:	e062      	b.n	8013fae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013ee8:	f008 fd66 	bl	801c9b8 <sys_arch_protect>
 8013eec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	7b9b      	ldrb	r3, [r3, #14]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d106      	bne.n	8013f04 <pbuf_free+0x48>
 8013ef6:	4b32      	ldr	r3, [pc, #200]	@ (8013fc0 <pbuf_free+0x104>)
 8013ef8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8013efc:	4933      	ldr	r1, [pc, #204]	@ (8013fcc <pbuf_free+0x110>)
 8013efe:	4832      	ldr	r0, [pc, #200]	@ (8013fc8 <pbuf_free+0x10c>)
 8013f00:	f009 fee8 	bl	801dcd4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	7b9b      	ldrb	r3, [r3, #14]
 8013f08:	3b01      	subs	r3, #1
 8013f0a:	b2da      	uxtb	r2, r3
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	739a      	strb	r2, [r3, #14]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	7b9b      	ldrb	r3, [r3, #14]
 8013f14:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013f16:	69b8      	ldr	r0, [r7, #24]
 8013f18:	f008 fd5c 	bl	801c9d4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013f1c:	7dfb      	ldrb	r3, [r7, #23]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d143      	bne.n	8013faa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	7b1b      	ldrb	r3, [r3, #12]
 8013f2c:	f003 030f 	and.w	r3, r3, #15
 8013f30:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	7b5b      	ldrb	r3, [r3, #13]
 8013f36:	f003 0302 	and.w	r3, r3, #2
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d011      	beq.n	8013f62 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	691b      	ldr	r3, [r3, #16]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d106      	bne.n	8013f58 <pbuf_free+0x9c>
 8013f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8013fc0 <pbuf_free+0x104>)
 8013f4c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8013f50:	491f      	ldr	r1, [pc, #124]	@ (8013fd0 <pbuf_free+0x114>)
 8013f52:	481d      	ldr	r0, [pc, #116]	@ (8013fc8 <pbuf_free+0x10c>)
 8013f54:	f009 febe 	bl	801dcd4 <iprintf>
        pc->custom_free_function(p);
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	691b      	ldr	r3, [r3, #16]
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	4798      	blx	r3
 8013f60:	e01d      	b.n	8013f9e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013f62:	7bfb      	ldrb	r3, [r7, #15]
 8013f64:	2b02      	cmp	r3, #2
 8013f66:	d104      	bne.n	8013f72 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013f68:	6879      	ldr	r1, [r7, #4]
 8013f6a:	200c      	movs	r0, #12
 8013f6c:	f7ff f902 	bl	8013174 <memp_free>
 8013f70:	e015      	b.n	8013f9e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013f72:	7bfb      	ldrb	r3, [r7, #15]
 8013f74:	2b01      	cmp	r3, #1
 8013f76:	d104      	bne.n	8013f82 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013f78:	6879      	ldr	r1, [r7, #4]
 8013f7a:	200b      	movs	r0, #11
 8013f7c:	f7ff f8fa 	bl	8013174 <memp_free>
 8013f80:	e00d      	b.n	8013f9e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013f82:	7bfb      	ldrb	r3, [r7, #15]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d103      	bne.n	8013f90 <pbuf_free+0xd4>
          mem_free(p);
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f7fe fd3f 	bl	8012a0c <mem_free>
 8013f8e:	e006      	b.n	8013f9e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8013f90:	4b0b      	ldr	r3, [pc, #44]	@ (8013fc0 <pbuf_free+0x104>)
 8013f92:	f240 320f 	movw	r2, #783	@ 0x30f
 8013f96:	490f      	ldr	r1, [pc, #60]	@ (8013fd4 <pbuf_free+0x118>)
 8013f98:	480b      	ldr	r0, [pc, #44]	@ (8013fc8 <pbuf_free+0x10c>)
 8013f9a:	f009 fe9b 	bl	801dcd4 <iprintf>
        }
      }
      count++;
 8013f9e:	7ffb      	ldrb	r3, [r7, #31]
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	607b      	str	r3, [r7, #4]
 8013fa8:	e001      	b.n	8013fae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8013faa:	2300      	movs	r3, #0
 8013fac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d199      	bne.n	8013ee8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3720      	adds	r7, #32
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	0801f454 	.word	0x0801f454
 8013fc4:	0801f5b8 	.word	0x0801f5b8
 8013fc8:	0801f4b4 	.word	0x0801f4b4
 8013fcc:	0801f5e4 	.word	0x0801f5e4
 8013fd0:	0801f5fc 	.word	0x0801f5fc
 8013fd4:	0801f620 	.word	0x0801f620

08013fd8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013fd8:	b480      	push	{r7}
 8013fda:	b085      	sub	sp, #20
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8013fe4:	e005      	b.n	8013ff2 <pbuf_clen+0x1a>
    ++len;
 8013fe6:	89fb      	ldrh	r3, [r7, #14]
 8013fe8:	3301      	adds	r3, #1
 8013fea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d1f6      	bne.n	8013fe6 <pbuf_clen+0xe>
  }
  return len;
 8013ff8:	89fb      	ldrh	r3, [r7, #14]
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3714      	adds	r7, #20
 8013ffe:	46bd      	mov	sp, r7
 8014000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014004:	4770      	bx	lr
	...

08014008 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b084      	sub	sp, #16
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d016      	beq.n	8014044 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014016:	f008 fccf 	bl	801c9b8 <sys_arch_protect>
 801401a:	60f8      	str	r0, [r7, #12]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	7b9b      	ldrb	r3, [r3, #14]
 8014020:	3301      	adds	r3, #1
 8014022:	b2da      	uxtb	r2, r3
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	739a      	strb	r2, [r3, #14]
 8014028:	68f8      	ldr	r0, [r7, #12]
 801402a:	f008 fcd3 	bl	801c9d4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	7b9b      	ldrb	r3, [r3, #14]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d106      	bne.n	8014044 <pbuf_ref+0x3c>
 8014036:	4b05      	ldr	r3, [pc, #20]	@ (801404c <pbuf_ref+0x44>)
 8014038:	f240 3242 	movw	r2, #834	@ 0x342
 801403c:	4904      	ldr	r1, [pc, #16]	@ (8014050 <pbuf_ref+0x48>)
 801403e:	4805      	ldr	r0, [pc, #20]	@ (8014054 <pbuf_ref+0x4c>)
 8014040:	f009 fe48 	bl	801dcd4 <iprintf>
  }
}
 8014044:	bf00      	nop
 8014046:	3710      	adds	r7, #16
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	0801f454 	.word	0x0801f454
 8014050:	0801f634 	.word	0x0801f634
 8014054:	0801f4b4 	.word	0x0801f4b4

08014058 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b084      	sub	sp, #16
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
 8014060:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d002      	beq.n	801406e <pbuf_cat+0x16>
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d107      	bne.n	801407e <pbuf_cat+0x26>
 801406e:	4b20      	ldr	r3, [pc, #128]	@ (80140f0 <pbuf_cat+0x98>)
 8014070:	f240 3259 	movw	r2, #857	@ 0x359
 8014074:	491f      	ldr	r1, [pc, #124]	@ (80140f4 <pbuf_cat+0x9c>)
 8014076:	4820      	ldr	r0, [pc, #128]	@ (80140f8 <pbuf_cat+0xa0>)
 8014078:	f009 fe2c 	bl	801dcd4 <iprintf>
 801407c:	e034      	b.n	80140e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	60fb      	str	r3, [r7, #12]
 8014082:	e00a      	b.n	801409a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	891a      	ldrh	r2, [r3, #8]
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	891b      	ldrh	r3, [r3, #8]
 801408c:	4413      	add	r3, r2
 801408e:	b29a      	uxth	r2, r3
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	60fb      	str	r3, [r7, #12]
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d1f0      	bne.n	8014084 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	891a      	ldrh	r2, [r3, #8]
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	895b      	ldrh	r3, [r3, #10]
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d006      	beq.n	80140bc <pbuf_cat+0x64>
 80140ae:	4b10      	ldr	r3, [pc, #64]	@ (80140f0 <pbuf_cat+0x98>)
 80140b0:	f240 3262 	movw	r2, #866	@ 0x362
 80140b4:	4911      	ldr	r1, [pc, #68]	@ (80140fc <pbuf_cat+0xa4>)
 80140b6:	4810      	ldr	r0, [pc, #64]	@ (80140f8 <pbuf_cat+0xa0>)
 80140b8:	f009 fe0c 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d006      	beq.n	80140d2 <pbuf_cat+0x7a>
 80140c4:	4b0a      	ldr	r3, [pc, #40]	@ (80140f0 <pbuf_cat+0x98>)
 80140c6:	f240 3263 	movw	r2, #867	@ 0x363
 80140ca:	490d      	ldr	r1, [pc, #52]	@ (8014100 <pbuf_cat+0xa8>)
 80140cc:	480a      	ldr	r0, [pc, #40]	@ (80140f8 <pbuf_cat+0xa0>)
 80140ce:	f009 fe01 	bl	801dcd4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	891a      	ldrh	r2, [r3, #8]
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	891b      	ldrh	r3, [r3, #8]
 80140da:	4413      	add	r3, r2
 80140dc:	b29a      	uxth	r2, r3
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	683a      	ldr	r2, [r7, #0]
 80140e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80140e8:	3710      	adds	r7, #16
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}
 80140ee:	bf00      	nop
 80140f0:	0801f454 	.word	0x0801f454
 80140f4:	0801f648 	.word	0x0801f648
 80140f8:	0801f4b4 	.word	0x0801f4b4
 80140fc:	0801f680 	.word	0x0801f680
 8014100:	0801f6b0 	.word	0x0801f6b0

08014104 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b082      	sub	sp, #8
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
 801410c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801410e:	6839      	ldr	r1, [r7, #0]
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f7ff ffa1 	bl	8014058 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014116:	6838      	ldr	r0, [r7, #0]
 8014118:	f7ff ff76 	bl	8014008 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801411c:	bf00      	nop
 801411e:	3708      	adds	r7, #8
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}

08014124 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b086      	sub	sp, #24
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801412e:	2300      	movs	r3, #0
 8014130:	617b      	str	r3, [r7, #20]
 8014132:	2300      	movs	r3, #0
 8014134:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d008      	beq.n	801414e <pbuf_copy+0x2a>
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d005      	beq.n	801414e <pbuf_copy+0x2a>
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	891a      	ldrh	r2, [r3, #8]
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	891b      	ldrh	r3, [r3, #8]
 801414a:	429a      	cmp	r2, r3
 801414c:	d209      	bcs.n	8014162 <pbuf_copy+0x3e>
 801414e:	4b57      	ldr	r3, [pc, #348]	@ (80142ac <pbuf_copy+0x188>)
 8014150:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014154:	4956      	ldr	r1, [pc, #344]	@ (80142b0 <pbuf_copy+0x18c>)
 8014156:	4857      	ldr	r0, [pc, #348]	@ (80142b4 <pbuf_copy+0x190>)
 8014158:	f009 fdbc 	bl	801dcd4 <iprintf>
 801415c:	f06f 030f 	mvn.w	r3, #15
 8014160:	e09f      	b.n	80142a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	895b      	ldrh	r3, [r3, #10]
 8014166:	461a      	mov	r2, r3
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	1ad2      	subs	r2, r2, r3
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	895b      	ldrh	r3, [r3, #10]
 8014170:	4619      	mov	r1, r3
 8014172:	693b      	ldr	r3, [r7, #16]
 8014174:	1acb      	subs	r3, r1, r3
 8014176:	429a      	cmp	r2, r3
 8014178:	d306      	bcc.n	8014188 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	895b      	ldrh	r3, [r3, #10]
 801417e:	461a      	mov	r2, r3
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	1ad3      	subs	r3, r2, r3
 8014184:	60fb      	str	r3, [r7, #12]
 8014186:	e005      	b.n	8014194 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	895b      	ldrh	r3, [r3, #10]
 801418c:	461a      	mov	r2, r3
 801418e:	697b      	ldr	r3, [r7, #20]
 8014190:	1ad3      	subs	r3, r2, r3
 8014192:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	685a      	ldr	r2, [r3, #4]
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	18d0      	adds	r0, r2, r3
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	685a      	ldr	r2, [r3, #4]
 80141a0:	693b      	ldr	r3, [r7, #16]
 80141a2:	4413      	add	r3, r2
 80141a4:	68fa      	ldr	r2, [r7, #12]
 80141a6:	4619      	mov	r1, r3
 80141a8:	f009 fecd 	bl	801df46 <memcpy>
    offset_to += len;
 80141ac:	697a      	ldr	r2, [r7, #20]
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	4413      	add	r3, r2
 80141b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80141b4:	693a      	ldr	r2, [r7, #16]
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	4413      	add	r3, r2
 80141ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	895b      	ldrh	r3, [r3, #10]
 80141c0:	461a      	mov	r2, r3
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	4293      	cmp	r3, r2
 80141c6:	d906      	bls.n	80141d6 <pbuf_copy+0xb2>
 80141c8:	4b38      	ldr	r3, [pc, #224]	@ (80142ac <pbuf_copy+0x188>)
 80141ca:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80141ce:	493a      	ldr	r1, [pc, #232]	@ (80142b8 <pbuf_copy+0x194>)
 80141d0:	4838      	ldr	r0, [pc, #224]	@ (80142b4 <pbuf_copy+0x190>)
 80141d2:	f009 fd7f 	bl	801dcd4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	895b      	ldrh	r3, [r3, #10]
 80141da:	461a      	mov	r2, r3
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	4293      	cmp	r3, r2
 80141e0:	d906      	bls.n	80141f0 <pbuf_copy+0xcc>
 80141e2:	4b32      	ldr	r3, [pc, #200]	@ (80142ac <pbuf_copy+0x188>)
 80141e4:	f240 32da 	movw	r2, #986	@ 0x3da
 80141e8:	4934      	ldr	r1, [pc, #208]	@ (80142bc <pbuf_copy+0x198>)
 80141ea:	4832      	ldr	r0, [pc, #200]	@ (80142b4 <pbuf_copy+0x190>)
 80141ec:	f009 fd72 	bl	801dcd4 <iprintf>
    if (offset_from >= p_from->len) {
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	895b      	ldrh	r3, [r3, #10]
 80141f4:	461a      	mov	r2, r3
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	4293      	cmp	r3, r2
 80141fa:	d304      	bcc.n	8014206 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80141fc:	2300      	movs	r3, #0
 80141fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	895b      	ldrh	r3, [r3, #10]
 801420a:	461a      	mov	r2, r3
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	4293      	cmp	r3, r2
 8014210:	d114      	bne.n	801423c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014212:	2300      	movs	r3, #0
 8014214:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d10c      	bne.n	801423c <pbuf_copy+0x118>
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d009      	beq.n	801423c <pbuf_copy+0x118>
 8014228:	4b20      	ldr	r3, [pc, #128]	@ (80142ac <pbuf_copy+0x188>)
 801422a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801422e:	4924      	ldr	r1, [pc, #144]	@ (80142c0 <pbuf_copy+0x19c>)
 8014230:	4820      	ldr	r0, [pc, #128]	@ (80142b4 <pbuf_copy+0x190>)
 8014232:	f009 fd4f 	bl	801dcd4 <iprintf>
 8014236:	f06f 030f 	mvn.w	r3, #15
 801423a:	e032      	b.n	80142a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d013      	beq.n	801426a <pbuf_copy+0x146>
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	895a      	ldrh	r2, [r3, #10]
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	891b      	ldrh	r3, [r3, #8]
 801424a:	429a      	cmp	r2, r3
 801424c:	d10d      	bne.n	801426a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d009      	beq.n	801426a <pbuf_copy+0x146>
 8014256:	4b15      	ldr	r3, [pc, #84]	@ (80142ac <pbuf_copy+0x188>)
 8014258:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801425c:	4919      	ldr	r1, [pc, #100]	@ (80142c4 <pbuf_copy+0x1a0>)
 801425e:	4815      	ldr	r0, [pc, #84]	@ (80142b4 <pbuf_copy+0x190>)
 8014260:	f009 fd38 	bl	801dcd4 <iprintf>
 8014264:	f06f 0305 	mvn.w	r3, #5
 8014268:	e01b      	b.n	80142a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d013      	beq.n	8014298 <pbuf_copy+0x174>
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	895a      	ldrh	r2, [r3, #10]
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	891b      	ldrh	r3, [r3, #8]
 8014278:	429a      	cmp	r2, r3
 801427a:	d10d      	bne.n	8014298 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d009      	beq.n	8014298 <pbuf_copy+0x174>
 8014284:	4b09      	ldr	r3, [pc, #36]	@ (80142ac <pbuf_copy+0x188>)
 8014286:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801428a:	490e      	ldr	r1, [pc, #56]	@ (80142c4 <pbuf_copy+0x1a0>)
 801428c:	4809      	ldr	r0, [pc, #36]	@ (80142b4 <pbuf_copy+0x190>)
 801428e:	f009 fd21 	bl	801dcd4 <iprintf>
 8014292:	f06f 0305 	mvn.w	r3, #5
 8014296:	e004      	b.n	80142a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014298:	683b      	ldr	r3, [r7, #0]
 801429a:	2b00      	cmp	r3, #0
 801429c:	f47f af61 	bne.w	8014162 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80142a0:	2300      	movs	r3, #0
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3718      	adds	r7, #24
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	0801f454 	.word	0x0801f454
 80142b0:	0801f6fc 	.word	0x0801f6fc
 80142b4:	0801f4b4 	.word	0x0801f4b4
 80142b8:	0801f72c 	.word	0x0801f72c
 80142bc:	0801f744 	.word	0x0801f744
 80142c0:	0801f760 	.word	0x0801f760
 80142c4:	0801f770 	.word	0x0801f770

080142c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b088      	sub	sp, #32
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	4611      	mov	r1, r2
 80142d4:	461a      	mov	r2, r3
 80142d6:	460b      	mov	r3, r1
 80142d8:	80fb      	strh	r3, [r7, #6]
 80142da:	4613      	mov	r3, r2
 80142dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80142de:	2300      	movs	r3, #0
 80142e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80142e2:	2300      	movs	r3, #0
 80142e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d108      	bne.n	80142fe <pbuf_copy_partial+0x36>
 80142ec:	4b2b      	ldr	r3, [pc, #172]	@ (801439c <pbuf_copy_partial+0xd4>)
 80142ee:	f240 420a 	movw	r2, #1034	@ 0x40a
 80142f2:	492b      	ldr	r1, [pc, #172]	@ (80143a0 <pbuf_copy_partial+0xd8>)
 80142f4:	482b      	ldr	r0, [pc, #172]	@ (80143a4 <pbuf_copy_partial+0xdc>)
 80142f6:	f009 fced 	bl	801dcd4 <iprintf>
 80142fa:	2300      	movs	r3, #0
 80142fc:	e04a      	b.n	8014394 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d108      	bne.n	8014316 <pbuf_copy_partial+0x4e>
 8014304:	4b25      	ldr	r3, [pc, #148]	@ (801439c <pbuf_copy_partial+0xd4>)
 8014306:	f240 420b 	movw	r2, #1035	@ 0x40b
 801430a:	4927      	ldr	r1, [pc, #156]	@ (80143a8 <pbuf_copy_partial+0xe0>)
 801430c:	4825      	ldr	r0, [pc, #148]	@ (80143a4 <pbuf_copy_partial+0xdc>)
 801430e:	f009 fce1 	bl	801dcd4 <iprintf>
 8014312:	2300      	movs	r3, #0
 8014314:	e03e      	b.n	8014394 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	61fb      	str	r3, [r7, #28]
 801431a:	e034      	b.n	8014386 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801431c:	88bb      	ldrh	r3, [r7, #4]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d00a      	beq.n	8014338 <pbuf_copy_partial+0x70>
 8014322:	69fb      	ldr	r3, [r7, #28]
 8014324:	895b      	ldrh	r3, [r3, #10]
 8014326:	88ba      	ldrh	r2, [r7, #4]
 8014328:	429a      	cmp	r2, r3
 801432a:	d305      	bcc.n	8014338 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801432c:	69fb      	ldr	r3, [r7, #28]
 801432e:	895b      	ldrh	r3, [r3, #10]
 8014330:	88ba      	ldrh	r2, [r7, #4]
 8014332:	1ad3      	subs	r3, r2, r3
 8014334:	80bb      	strh	r3, [r7, #4]
 8014336:	e023      	b.n	8014380 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	895a      	ldrh	r2, [r3, #10]
 801433c:	88bb      	ldrh	r3, [r7, #4]
 801433e:	1ad3      	subs	r3, r2, r3
 8014340:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014342:	8b3a      	ldrh	r2, [r7, #24]
 8014344:	88fb      	ldrh	r3, [r7, #6]
 8014346:	429a      	cmp	r2, r3
 8014348:	d901      	bls.n	801434e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801434a:	88fb      	ldrh	r3, [r7, #6]
 801434c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801434e:	8b7b      	ldrh	r3, [r7, #26]
 8014350:	68ba      	ldr	r2, [r7, #8]
 8014352:	18d0      	adds	r0, r2, r3
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	685a      	ldr	r2, [r3, #4]
 8014358:	88bb      	ldrh	r3, [r7, #4]
 801435a:	4413      	add	r3, r2
 801435c:	8b3a      	ldrh	r2, [r7, #24]
 801435e:	4619      	mov	r1, r3
 8014360:	f009 fdf1 	bl	801df46 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014364:	8afa      	ldrh	r2, [r7, #22]
 8014366:	8b3b      	ldrh	r3, [r7, #24]
 8014368:	4413      	add	r3, r2
 801436a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801436c:	8b7a      	ldrh	r2, [r7, #26]
 801436e:	8b3b      	ldrh	r3, [r7, #24]
 8014370:	4413      	add	r3, r2
 8014372:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014374:	88fa      	ldrh	r2, [r7, #6]
 8014376:	8b3b      	ldrh	r3, [r7, #24]
 8014378:	1ad3      	subs	r3, r2, r3
 801437a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801437c:	2300      	movs	r3, #0
 801437e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	61fb      	str	r3, [r7, #28]
 8014386:	88fb      	ldrh	r3, [r7, #6]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d002      	beq.n	8014392 <pbuf_copy_partial+0xca>
 801438c:	69fb      	ldr	r3, [r7, #28]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d1c4      	bne.n	801431c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014392:	8afb      	ldrh	r3, [r7, #22]
}
 8014394:	4618      	mov	r0, r3
 8014396:	3720      	adds	r7, #32
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}
 801439c:	0801f454 	.word	0x0801f454
 80143a0:	0801f79c 	.word	0x0801f79c
 80143a4:	0801f4b4 	.word	0x0801f4b4
 80143a8:	0801f7bc 	.word	0x0801f7bc

080143ac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b084      	sub	sp, #16
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	4603      	mov	r3, r0
 80143b4:	603a      	str	r2, [r7, #0]
 80143b6:	71fb      	strb	r3, [r7, #7]
 80143b8:	460b      	mov	r3, r1
 80143ba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	8919      	ldrh	r1, [r3, #8]
 80143c0:	88ba      	ldrh	r2, [r7, #4]
 80143c2:	79fb      	ldrb	r3, [r7, #7]
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7ff fa95 	bl	80138f4 <pbuf_alloc>
 80143ca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d101      	bne.n	80143d6 <pbuf_clone+0x2a>
    return NULL;
 80143d2:	2300      	movs	r3, #0
 80143d4:	e011      	b.n	80143fa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80143d6:	6839      	ldr	r1, [r7, #0]
 80143d8:	68f8      	ldr	r0, [r7, #12]
 80143da:	f7ff fea3 	bl	8014124 <pbuf_copy>
 80143de:	4603      	mov	r3, r0
 80143e0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80143e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d006      	beq.n	80143f8 <pbuf_clone+0x4c>
 80143ea:	4b06      	ldr	r3, [pc, #24]	@ (8014404 <pbuf_clone+0x58>)
 80143ec:	f240 5224 	movw	r2, #1316	@ 0x524
 80143f0:	4905      	ldr	r1, [pc, #20]	@ (8014408 <pbuf_clone+0x5c>)
 80143f2:	4806      	ldr	r0, [pc, #24]	@ (801440c <pbuf_clone+0x60>)
 80143f4:	f009 fc6e 	bl	801dcd4 <iprintf>
  return q;
 80143f8:	68fb      	ldr	r3, [r7, #12]
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	3710      	adds	r7, #16
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}
 8014402:	bf00      	nop
 8014404:	0801f454 	.word	0x0801f454
 8014408:	0801f8c8 	.word	0x0801f8c8
 801440c:	0801f4b4 	.word	0x0801f4b4

08014410 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014414:	f009 fb5e 	bl	801dad4 <rand>
 8014418:	4603      	mov	r3, r0
 801441a:	b29b      	uxth	r3, r3
 801441c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014420:	b29b      	uxth	r3, r3
 8014422:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014426:	b29a      	uxth	r2, r3
 8014428:	4b01      	ldr	r3, [pc, #4]	@ (8014430 <tcp_init+0x20>)
 801442a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801442c:	bf00      	nop
 801442e:	bd80      	pop	{r7, pc}
 8014430:	20000024 	.word	0x20000024

08014434 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b082      	sub	sp, #8
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	7d1b      	ldrb	r3, [r3, #20]
 8014440:	2b01      	cmp	r3, #1
 8014442:	d105      	bne.n	8014450 <tcp_free+0x1c>
 8014444:	4b06      	ldr	r3, [pc, #24]	@ (8014460 <tcp_free+0x2c>)
 8014446:	22d4      	movs	r2, #212	@ 0xd4
 8014448:	4906      	ldr	r1, [pc, #24]	@ (8014464 <tcp_free+0x30>)
 801444a:	4807      	ldr	r0, [pc, #28]	@ (8014468 <tcp_free+0x34>)
 801444c:	f009 fc42 	bl	801dcd4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014450:	6879      	ldr	r1, [r7, #4]
 8014452:	2001      	movs	r0, #1
 8014454:	f7fe fe8e 	bl	8013174 <memp_free>
}
 8014458:	bf00      	nop
 801445a:	3708      	adds	r7, #8
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}
 8014460:	0801f954 	.word	0x0801f954
 8014464:	0801f984 	.word	0x0801f984
 8014468:	0801f998 	.word	0x0801f998

0801446c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	7d1b      	ldrb	r3, [r3, #20]
 8014478:	2b01      	cmp	r3, #1
 801447a:	d105      	bne.n	8014488 <tcp_free_listen+0x1c>
 801447c:	4b06      	ldr	r3, [pc, #24]	@ (8014498 <tcp_free_listen+0x2c>)
 801447e:	22df      	movs	r2, #223	@ 0xdf
 8014480:	4906      	ldr	r1, [pc, #24]	@ (801449c <tcp_free_listen+0x30>)
 8014482:	4807      	ldr	r0, [pc, #28]	@ (80144a0 <tcp_free_listen+0x34>)
 8014484:	f009 fc26 	bl	801dcd4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014488:	6879      	ldr	r1, [r7, #4]
 801448a:	2002      	movs	r0, #2
 801448c:	f7fe fe72 	bl	8013174 <memp_free>
}
 8014490:	bf00      	nop
 8014492:	3708      	adds	r7, #8
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}
 8014498:	0801f954 	.word	0x0801f954
 801449c:	0801f9c0 	.word	0x0801f9c0
 80144a0:	0801f998 	.word	0x0801f998

080144a4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80144a8:	f000 fea4 	bl	80151f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80144ac:	4b07      	ldr	r3, [pc, #28]	@ (80144cc <tcp_tmr+0x28>)
 80144ae:	781b      	ldrb	r3, [r3, #0]
 80144b0:	3301      	adds	r3, #1
 80144b2:	b2da      	uxtb	r2, r3
 80144b4:	4b05      	ldr	r3, [pc, #20]	@ (80144cc <tcp_tmr+0x28>)
 80144b6:	701a      	strb	r2, [r3, #0]
 80144b8:	4b04      	ldr	r3, [pc, #16]	@ (80144cc <tcp_tmr+0x28>)
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	f003 0301 	and.w	r3, r3, #1
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d001      	beq.n	80144c8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80144c4:	f000 fb54 	bl	8014b70 <tcp_slowtmr>
  }
}
 80144c8:	bf00      	nop
 80144ca:	bd80      	pop	{r7, pc}
 80144cc:	2002769d 	.word	0x2002769d

080144d0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b084      	sub	sp, #16
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
 80144d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d105      	bne.n	80144ec <tcp_remove_listener+0x1c>
 80144e0:	4b0d      	ldr	r3, [pc, #52]	@ (8014518 <tcp_remove_listener+0x48>)
 80144e2:	22ff      	movs	r2, #255	@ 0xff
 80144e4:	490d      	ldr	r1, [pc, #52]	@ (801451c <tcp_remove_listener+0x4c>)
 80144e6:	480e      	ldr	r0, [pc, #56]	@ (8014520 <tcp_remove_listener+0x50>)
 80144e8:	f009 fbf4 	bl	801dcd4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	60fb      	str	r3, [r7, #12]
 80144f0:	e00a      	b.n	8014508 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80144f6:	683a      	ldr	r2, [r7, #0]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d102      	bne.n	8014502 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	2200      	movs	r2, #0
 8014500:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	68db      	ldr	r3, [r3, #12]
 8014506:	60fb      	str	r3, [r7, #12]
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d1f1      	bne.n	80144f2 <tcp_remove_listener+0x22>
    }
  }
}
 801450e:	bf00      	nop
 8014510:	bf00      	nop
 8014512:	3710      	adds	r7, #16
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}
 8014518:	0801f954 	.word	0x0801f954
 801451c:	0801f9dc 	.word	0x0801f9dc
 8014520:	0801f998 	.word	0x0801f998

08014524 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b084      	sub	sp, #16
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d106      	bne.n	8014540 <tcp_listen_closed+0x1c>
 8014532:	4b14      	ldr	r3, [pc, #80]	@ (8014584 <tcp_listen_closed+0x60>)
 8014534:	f240 1211 	movw	r2, #273	@ 0x111
 8014538:	4913      	ldr	r1, [pc, #76]	@ (8014588 <tcp_listen_closed+0x64>)
 801453a:	4814      	ldr	r0, [pc, #80]	@ (801458c <tcp_listen_closed+0x68>)
 801453c:	f009 fbca 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	7d1b      	ldrb	r3, [r3, #20]
 8014544:	2b01      	cmp	r3, #1
 8014546:	d006      	beq.n	8014556 <tcp_listen_closed+0x32>
 8014548:	4b0e      	ldr	r3, [pc, #56]	@ (8014584 <tcp_listen_closed+0x60>)
 801454a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801454e:	4910      	ldr	r1, [pc, #64]	@ (8014590 <tcp_listen_closed+0x6c>)
 8014550:	480e      	ldr	r0, [pc, #56]	@ (801458c <tcp_listen_closed+0x68>)
 8014552:	f009 fbbf 	bl	801dcd4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014556:	2301      	movs	r3, #1
 8014558:	60fb      	str	r3, [r7, #12]
 801455a:	e00b      	b.n	8014574 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801455c:	4a0d      	ldr	r2, [pc, #52]	@ (8014594 <tcp_listen_closed+0x70>)
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	6879      	ldr	r1, [r7, #4]
 8014568:	4618      	mov	r0, r3
 801456a:	f7ff ffb1 	bl	80144d0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	3301      	adds	r3, #1
 8014572:	60fb      	str	r3, [r7, #12]
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2b03      	cmp	r3, #3
 8014578:	d9f0      	bls.n	801455c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801457a:	bf00      	nop
 801457c:	bf00      	nop
 801457e:	3710      	adds	r7, #16
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}
 8014584:	0801f954 	.word	0x0801f954
 8014588:	0801fa04 	.word	0x0801fa04
 801458c:	0801f998 	.word	0x0801f998
 8014590:	0801fa10 	.word	0x0801fa10
 8014594:	08021c6c 	.word	0x08021c6c

08014598 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014598:	b5b0      	push	{r4, r5, r7, lr}
 801459a:	b088      	sub	sp, #32
 801459c:	af04      	add	r7, sp, #16
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	460b      	mov	r3, r1
 80145a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d106      	bne.n	80145b8 <tcp_close_shutdown+0x20>
 80145aa:	4b63      	ldr	r3, [pc, #396]	@ (8014738 <tcp_close_shutdown+0x1a0>)
 80145ac:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80145b0:	4962      	ldr	r1, [pc, #392]	@ (801473c <tcp_close_shutdown+0x1a4>)
 80145b2:	4863      	ldr	r0, [pc, #396]	@ (8014740 <tcp_close_shutdown+0x1a8>)
 80145b4:	f009 fb8e 	bl	801dcd4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80145b8:	78fb      	ldrb	r3, [r7, #3]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d066      	beq.n	801468c <tcp_close_shutdown+0xf4>
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	7d1b      	ldrb	r3, [r3, #20]
 80145c2:	2b04      	cmp	r3, #4
 80145c4:	d003      	beq.n	80145ce <tcp_close_shutdown+0x36>
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	7d1b      	ldrb	r3, [r3, #20]
 80145ca:	2b07      	cmp	r3, #7
 80145cc:	d15e      	bne.n	801468c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d104      	bne.n	80145e0 <tcp_close_shutdown+0x48>
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80145da:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80145de:	d055      	beq.n	801468c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	8b5b      	ldrh	r3, [r3, #26]
 80145e4:	f003 0310 	and.w	r3, r3, #16
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d106      	bne.n	80145fa <tcp_close_shutdown+0x62>
 80145ec:	4b52      	ldr	r3, [pc, #328]	@ (8014738 <tcp_close_shutdown+0x1a0>)
 80145ee:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80145f2:	4954      	ldr	r1, [pc, #336]	@ (8014744 <tcp_close_shutdown+0x1ac>)
 80145f4:	4852      	ldr	r0, [pc, #328]	@ (8014740 <tcp_close_shutdown+0x1a8>)
 80145f6:	f009 fb6d 	bl	801dcd4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014602:	687d      	ldr	r5, [r7, #4]
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	3304      	adds	r3, #4
 8014608:	687a      	ldr	r2, [r7, #4]
 801460a:	8ad2      	ldrh	r2, [r2, #22]
 801460c:	6879      	ldr	r1, [r7, #4]
 801460e:	8b09      	ldrh	r1, [r1, #24]
 8014610:	9102      	str	r1, [sp, #8]
 8014612:	9201      	str	r2, [sp, #4]
 8014614:	9300      	str	r3, [sp, #0]
 8014616:	462b      	mov	r3, r5
 8014618:	4622      	mov	r2, r4
 801461a:	4601      	mov	r1, r0
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f004 fe8d 	bl	801933c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f001 f8c8 	bl	80157b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014628:	4b47      	ldr	r3, [pc, #284]	@ (8014748 <tcp_close_shutdown+0x1b0>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	429a      	cmp	r2, r3
 8014630:	d105      	bne.n	801463e <tcp_close_shutdown+0xa6>
 8014632:	4b45      	ldr	r3, [pc, #276]	@ (8014748 <tcp_close_shutdown+0x1b0>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	4a43      	ldr	r2, [pc, #268]	@ (8014748 <tcp_close_shutdown+0x1b0>)
 801463a:	6013      	str	r3, [r2, #0]
 801463c:	e013      	b.n	8014666 <tcp_close_shutdown+0xce>
 801463e:	4b42      	ldr	r3, [pc, #264]	@ (8014748 <tcp_close_shutdown+0x1b0>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	60fb      	str	r3, [r7, #12]
 8014644:	e00c      	b.n	8014660 <tcp_close_shutdown+0xc8>
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	68db      	ldr	r3, [r3, #12]
 801464a:	687a      	ldr	r2, [r7, #4]
 801464c:	429a      	cmp	r2, r3
 801464e:	d104      	bne.n	801465a <tcp_close_shutdown+0xc2>
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	68da      	ldr	r2, [r3, #12]
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	60da      	str	r2, [r3, #12]
 8014658:	e005      	b.n	8014666 <tcp_close_shutdown+0xce>
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	68db      	ldr	r3, [r3, #12]
 801465e:	60fb      	str	r3, [r7, #12]
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d1ef      	bne.n	8014646 <tcp_close_shutdown+0xae>
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2200      	movs	r2, #0
 801466a:	60da      	str	r2, [r3, #12]
 801466c:	4b37      	ldr	r3, [pc, #220]	@ (801474c <tcp_close_shutdown+0x1b4>)
 801466e:	2201      	movs	r2, #1
 8014670:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014672:	4b37      	ldr	r3, [pc, #220]	@ (8014750 <tcp_close_shutdown+0x1b8>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	687a      	ldr	r2, [r7, #4]
 8014678:	429a      	cmp	r2, r3
 801467a:	d102      	bne.n	8014682 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801467c:	f003 fd5c 	bl	8018138 <tcp_trigger_input_pcb_close>
 8014680:	e002      	b.n	8014688 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f7ff fed6 	bl	8014434 <tcp_free>
      }
      return ERR_OK;
 8014688:	2300      	movs	r3, #0
 801468a:	e050      	b.n	801472e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	7d1b      	ldrb	r3, [r3, #20]
 8014690:	2b02      	cmp	r3, #2
 8014692:	d03b      	beq.n	801470c <tcp_close_shutdown+0x174>
 8014694:	2b02      	cmp	r3, #2
 8014696:	dc44      	bgt.n	8014722 <tcp_close_shutdown+0x18a>
 8014698:	2b00      	cmp	r3, #0
 801469a:	d002      	beq.n	80146a2 <tcp_close_shutdown+0x10a>
 801469c:	2b01      	cmp	r3, #1
 801469e:	d02a      	beq.n	80146f6 <tcp_close_shutdown+0x15e>
 80146a0:	e03f      	b.n	8014722 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	8adb      	ldrh	r3, [r3, #22]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d021      	beq.n	80146ee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80146aa:	4b2a      	ldr	r3, [pc, #168]	@ (8014754 <tcp_close_shutdown+0x1bc>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d105      	bne.n	80146c0 <tcp_close_shutdown+0x128>
 80146b4:	4b27      	ldr	r3, [pc, #156]	@ (8014754 <tcp_close_shutdown+0x1bc>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	68db      	ldr	r3, [r3, #12]
 80146ba:	4a26      	ldr	r2, [pc, #152]	@ (8014754 <tcp_close_shutdown+0x1bc>)
 80146bc:	6013      	str	r3, [r2, #0]
 80146be:	e013      	b.n	80146e8 <tcp_close_shutdown+0x150>
 80146c0:	4b24      	ldr	r3, [pc, #144]	@ (8014754 <tcp_close_shutdown+0x1bc>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	60bb      	str	r3, [r7, #8]
 80146c6:	e00c      	b.n	80146e2 <tcp_close_shutdown+0x14a>
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	68db      	ldr	r3, [r3, #12]
 80146cc:	687a      	ldr	r2, [r7, #4]
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d104      	bne.n	80146dc <tcp_close_shutdown+0x144>
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	68da      	ldr	r2, [r3, #12]
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	60da      	str	r2, [r3, #12]
 80146da:	e005      	b.n	80146e8 <tcp_close_shutdown+0x150>
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	68db      	ldr	r3, [r3, #12]
 80146e0:	60bb      	str	r3, [r7, #8]
 80146e2:	68bb      	ldr	r3, [r7, #8]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d1ef      	bne.n	80146c8 <tcp_close_shutdown+0x130>
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2200      	movs	r2, #0
 80146ec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f7ff fea0 	bl	8014434 <tcp_free>
      break;
 80146f4:	e01a      	b.n	801472c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f7ff ff14 	bl	8014524 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80146fc:	6879      	ldr	r1, [r7, #4]
 80146fe:	4816      	ldr	r0, [pc, #88]	@ (8014758 <tcp_close_shutdown+0x1c0>)
 8014700:	f001 f8aa 	bl	8015858 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f7ff feb1 	bl	801446c <tcp_free_listen>
      break;
 801470a:	e00f      	b.n	801472c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801470c:	6879      	ldr	r1, [r7, #4]
 801470e:	480e      	ldr	r0, [pc, #56]	@ (8014748 <tcp_close_shutdown+0x1b0>)
 8014710:	f001 f8a2 	bl	8015858 <tcp_pcb_remove>
 8014714:	4b0d      	ldr	r3, [pc, #52]	@ (801474c <tcp_close_shutdown+0x1b4>)
 8014716:	2201      	movs	r2, #1
 8014718:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f7ff fe8a 	bl	8014434 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014720:	e004      	b.n	801472c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f000 f81a 	bl	801475c <tcp_close_shutdown_fin>
 8014728:	4603      	mov	r3, r0
 801472a:	e000      	b.n	801472e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801472c:	2300      	movs	r3, #0
}
 801472e:	4618      	mov	r0, r3
 8014730:	3710      	adds	r7, #16
 8014732:	46bd      	mov	sp, r7
 8014734:	bdb0      	pop	{r4, r5, r7, pc}
 8014736:	bf00      	nop
 8014738:	0801f954 	.word	0x0801f954
 801473c:	0801fa28 	.word	0x0801fa28
 8014740:	0801f998 	.word	0x0801f998
 8014744:	0801fa48 	.word	0x0801fa48
 8014748:	20027694 	.word	0x20027694
 801474c:	2002769c 	.word	0x2002769c
 8014750:	200276d4 	.word	0x200276d4
 8014754:	2002768c 	.word	0x2002768c
 8014758:	20027690 	.word	0x20027690

0801475c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b084      	sub	sp, #16
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d106      	bne.n	8014778 <tcp_close_shutdown_fin+0x1c>
 801476a:	4b2e      	ldr	r3, [pc, #184]	@ (8014824 <tcp_close_shutdown_fin+0xc8>)
 801476c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8014770:	492d      	ldr	r1, [pc, #180]	@ (8014828 <tcp_close_shutdown_fin+0xcc>)
 8014772:	482e      	ldr	r0, [pc, #184]	@ (801482c <tcp_close_shutdown_fin+0xd0>)
 8014774:	f009 faae 	bl	801dcd4 <iprintf>

  switch (pcb->state) {
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	7d1b      	ldrb	r3, [r3, #20]
 801477c:	2b07      	cmp	r3, #7
 801477e:	d020      	beq.n	80147c2 <tcp_close_shutdown_fin+0x66>
 8014780:	2b07      	cmp	r3, #7
 8014782:	dc2b      	bgt.n	80147dc <tcp_close_shutdown_fin+0x80>
 8014784:	2b03      	cmp	r3, #3
 8014786:	d002      	beq.n	801478e <tcp_close_shutdown_fin+0x32>
 8014788:	2b04      	cmp	r3, #4
 801478a:	d00d      	beq.n	80147a8 <tcp_close_shutdown_fin+0x4c>
 801478c:	e026      	b.n	80147dc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f003 fee2 	bl	8018558 <tcp_send_fin>
 8014794:	4603      	mov	r3, r0
 8014796:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d11f      	bne.n	80147e0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2205      	movs	r2, #5
 80147a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80147a6:	e01b      	b.n	80147e0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f003 fed5 	bl	8018558 <tcp_send_fin>
 80147ae:	4603      	mov	r3, r0
 80147b0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80147b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d114      	bne.n	80147e4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2205      	movs	r2, #5
 80147be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80147c0:	e010      	b.n	80147e4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f003 fec8 	bl	8018558 <tcp_send_fin>
 80147c8:	4603      	mov	r3, r0
 80147ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80147cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d109      	bne.n	80147e8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2209      	movs	r2, #9
 80147d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80147da:	e005      	b.n	80147e8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80147dc:	2300      	movs	r3, #0
 80147de:	e01c      	b.n	801481a <tcp_close_shutdown_fin+0xbe>
      break;
 80147e0:	bf00      	nop
 80147e2:	e002      	b.n	80147ea <tcp_close_shutdown_fin+0x8e>
      break;
 80147e4:	bf00      	nop
 80147e6:	e000      	b.n	80147ea <tcp_close_shutdown_fin+0x8e>
      break;
 80147e8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80147ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d103      	bne.n	80147fa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f003 ffee 	bl	80187d4 <tcp_output>
 80147f8:	e00d      	b.n	8014816 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80147fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014802:	d108      	bne.n	8014816 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	8b5b      	ldrh	r3, [r3, #26]
 8014808:	f043 0308 	orr.w	r3, r3, #8
 801480c:	b29a      	uxth	r2, r3
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014812:	2300      	movs	r3, #0
 8014814:	e001      	b.n	801481a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014816:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801481a:	4618      	mov	r0, r3
 801481c:	3710      	adds	r7, #16
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	0801f954 	.word	0x0801f954
 8014828:	0801fa04 	.word	0x0801fa04
 801482c:	0801f998 	.word	0x0801f998

08014830 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b082      	sub	sp, #8
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d109      	bne.n	8014852 <tcp_close+0x22>
 801483e:	4b0f      	ldr	r3, [pc, #60]	@ (801487c <tcp_close+0x4c>)
 8014840:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8014844:	490e      	ldr	r1, [pc, #56]	@ (8014880 <tcp_close+0x50>)
 8014846:	480f      	ldr	r0, [pc, #60]	@ (8014884 <tcp_close+0x54>)
 8014848:	f009 fa44 	bl	801dcd4 <iprintf>
 801484c:	f06f 030f 	mvn.w	r3, #15
 8014850:	e00f      	b.n	8014872 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	7d1b      	ldrb	r3, [r3, #20]
 8014856:	2b01      	cmp	r3, #1
 8014858:	d006      	beq.n	8014868 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	8b5b      	ldrh	r3, [r3, #26]
 801485e:	f043 0310 	orr.w	r3, r3, #16
 8014862:	b29a      	uxth	r2, r3
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014868:	2101      	movs	r1, #1
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f7ff fe94 	bl	8014598 <tcp_close_shutdown>
 8014870:	4603      	mov	r3, r0
}
 8014872:	4618      	mov	r0, r3
 8014874:	3708      	adds	r7, #8
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	0801f954 	.word	0x0801f954
 8014880:	0801fa64 	.word	0x0801fa64
 8014884:	0801f998 	.word	0x0801f998

08014888 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b08e      	sub	sp, #56	@ 0x38
 801488c:	af04      	add	r7, sp, #16
 801488e:	6078      	str	r0, [r7, #4]
 8014890:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d107      	bne.n	80148a8 <tcp_abandon+0x20>
 8014898:	4b52      	ldr	r3, [pc, #328]	@ (80149e4 <tcp_abandon+0x15c>)
 801489a:	f240 223d 	movw	r2, #573	@ 0x23d
 801489e:	4952      	ldr	r1, [pc, #328]	@ (80149e8 <tcp_abandon+0x160>)
 80148a0:	4852      	ldr	r0, [pc, #328]	@ (80149ec <tcp_abandon+0x164>)
 80148a2:	f009 fa17 	bl	801dcd4 <iprintf>
 80148a6:	e099      	b.n	80149dc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	7d1b      	ldrb	r3, [r3, #20]
 80148ac:	2b01      	cmp	r3, #1
 80148ae:	d106      	bne.n	80148be <tcp_abandon+0x36>
 80148b0:	4b4c      	ldr	r3, [pc, #304]	@ (80149e4 <tcp_abandon+0x15c>)
 80148b2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80148b6:	494e      	ldr	r1, [pc, #312]	@ (80149f0 <tcp_abandon+0x168>)
 80148b8:	484c      	ldr	r0, [pc, #304]	@ (80149ec <tcp_abandon+0x164>)
 80148ba:	f009 fa0b 	bl	801dcd4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	7d1b      	ldrb	r3, [r3, #20]
 80148c2:	2b0a      	cmp	r3, #10
 80148c4:	d107      	bne.n	80148d6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80148c6:	6879      	ldr	r1, [r7, #4]
 80148c8:	484a      	ldr	r0, [pc, #296]	@ (80149f4 <tcp_abandon+0x16c>)
 80148ca:	f000 ffc5 	bl	8015858 <tcp_pcb_remove>
    tcp_free(pcb);
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f7ff fdb0 	bl	8014434 <tcp_free>
 80148d4:	e082      	b.n	80149dc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80148d6:	2300      	movs	r3, #0
 80148d8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80148da:	2300      	movs	r3, #0
 80148dc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80148e2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148e8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80148f0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	691b      	ldr	r3, [r3, #16]
 80148f6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	7d1b      	ldrb	r3, [r3, #20]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d126      	bne.n	801494e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	8adb      	ldrh	r3, [r3, #22]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d02e      	beq.n	8014966 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014908:	4b3b      	ldr	r3, [pc, #236]	@ (80149f8 <tcp_abandon+0x170>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	687a      	ldr	r2, [r7, #4]
 801490e:	429a      	cmp	r2, r3
 8014910:	d105      	bne.n	801491e <tcp_abandon+0x96>
 8014912:	4b39      	ldr	r3, [pc, #228]	@ (80149f8 <tcp_abandon+0x170>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	4a37      	ldr	r2, [pc, #220]	@ (80149f8 <tcp_abandon+0x170>)
 801491a:	6013      	str	r3, [r2, #0]
 801491c:	e013      	b.n	8014946 <tcp_abandon+0xbe>
 801491e:	4b36      	ldr	r3, [pc, #216]	@ (80149f8 <tcp_abandon+0x170>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	61fb      	str	r3, [r7, #28]
 8014924:	e00c      	b.n	8014940 <tcp_abandon+0xb8>
 8014926:	69fb      	ldr	r3, [r7, #28]
 8014928:	68db      	ldr	r3, [r3, #12]
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	429a      	cmp	r2, r3
 801492e:	d104      	bne.n	801493a <tcp_abandon+0xb2>
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	68da      	ldr	r2, [r3, #12]
 8014934:	69fb      	ldr	r3, [r7, #28]
 8014936:	60da      	str	r2, [r3, #12]
 8014938:	e005      	b.n	8014946 <tcp_abandon+0xbe>
 801493a:	69fb      	ldr	r3, [r7, #28]
 801493c:	68db      	ldr	r3, [r3, #12]
 801493e:	61fb      	str	r3, [r7, #28]
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d1ef      	bne.n	8014926 <tcp_abandon+0x9e>
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2200      	movs	r2, #0
 801494a:	60da      	str	r2, [r3, #12]
 801494c:	e00b      	b.n	8014966 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	8adb      	ldrh	r3, [r3, #22]
 8014956:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014958:	6879      	ldr	r1, [r7, #4]
 801495a:	4828      	ldr	r0, [pc, #160]	@ (80149fc <tcp_abandon+0x174>)
 801495c:	f000 ff7c 	bl	8015858 <tcp_pcb_remove>
 8014960:	4b27      	ldr	r3, [pc, #156]	@ (8014a00 <tcp_abandon+0x178>)
 8014962:	2201      	movs	r2, #1
 8014964:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801496a:	2b00      	cmp	r3, #0
 801496c:	d004      	beq.n	8014978 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014972:	4618      	mov	r0, r3
 8014974:	f000 fd1e 	bl	80153b4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801497c:	2b00      	cmp	r3, #0
 801497e:	d004      	beq.n	801498a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014984:	4618      	mov	r0, r3
 8014986:	f000 fd15 	bl	80153b4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801498e:	2b00      	cmp	r3, #0
 8014990:	d004      	beq.n	801499c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014996:	4618      	mov	r0, r3
 8014998:	f000 fd0c 	bl	80153b4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d00e      	beq.n	80149c0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80149a2:	6879      	ldr	r1, [r7, #4]
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	3304      	adds	r3, #4
 80149a8:	687a      	ldr	r2, [r7, #4]
 80149aa:	8b12      	ldrh	r2, [r2, #24]
 80149ac:	9202      	str	r2, [sp, #8]
 80149ae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80149b0:	9201      	str	r2, [sp, #4]
 80149b2:	9300      	str	r3, [sp, #0]
 80149b4:	460b      	mov	r3, r1
 80149b6:	697a      	ldr	r2, [r7, #20]
 80149b8:	69b9      	ldr	r1, [r7, #24]
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f004 fcbe 	bl	801933c <tcp_rst>
    }
    last_state = pcb->state;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	7d1b      	ldrb	r3, [r3, #20]
 80149c4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f7ff fd34 	bl	8014434 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80149cc:	693b      	ldr	r3, [r7, #16]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d004      	beq.n	80149dc <tcp_abandon+0x154>
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	f06f 010c 	mvn.w	r1, #12
 80149d8:	68f8      	ldr	r0, [r7, #12]
 80149da:	4798      	blx	r3
  }
}
 80149dc:	3728      	adds	r7, #40	@ 0x28
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
 80149e2:	bf00      	nop
 80149e4:	0801f954 	.word	0x0801f954
 80149e8:	0801fa98 	.word	0x0801fa98
 80149ec:	0801f998 	.word	0x0801f998
 80149f0:	0801fab4 	.word	0x0801fab4
 80149f4:	20027698 	.word	0x20027698
 80149f8:	2002768c 	.word	0x2002768c
 80149fc:	20027694 	.word	0x20027694
 8014a00:	2002769c 	.word	0x2002769c

08014a04 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b082      	sub	sp, #8
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014a0c:	2101      	movs	r1, #1
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f7ff ff3a 	bl	8014888 <tcp_abandon>
}
 8014a14:	bf00      	nop
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b084      	sub	sp, #16
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d106      	bne.n	8014a38 <tcp_update_rcv_ann_wnd+0x1c>
 8014a2a:	4b25      	ldr	r3, [pc, #148]	@ (8014ac0 <tcp_update_rcv_ann_wnd+0xa4>)
 8014a2c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8014a30:	4924      	ldr	r1, [pc, #144]	@ (8014ac4 <tcp_update_rcv_ann_wnd+0xa8>)
 8014a32:	4825      	ldr	r0, [pc, #148]	@ (8014ac8 <tcp_update_rcv_ann_wnd+0xac>)
 8014a34:	f009 f94e 	bl	801dcd4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a3c:	687a      	ldr	r2, [r7, #4]
 8014a3e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014a40:	4413      	add	r3, r2
 8014a42:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a48:	687a      	ldr	r2, [r7, #4]
 8014a4a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8014a4c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8014a50:	bf28      	it	cs
 8014a52:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8014a56:	b292      	uxth	r2, r2
 8014a58:	4413      	add	r3, r2
 8014a5a:	68fa      	ldr	r2, [r7, #12]
 8014a5c:	1ad3      	subs	r3, r2, r3
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	db08      	blt.n	8014a74 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a6e:	68fa      	ldr	r2, [r7, #12]
 8014a70:	1ad3      	subs	r3, r2, r3
 8014a72:	e020      	b.n	8014ab6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a7c:	1ad3      	subs	r3, r2, r3
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	dd03      	ble.n	8014a8a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2200      	movs	r2, #0
 8014a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014a88:	e014      	b.n	8014ab4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a92:	1ad3      	subs	r3, r2, r3
 8014a94:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014a9c:	d306      	bcc.n	8014aac <tcp_update_rcv_ann_wnd+0x90>
 8014a9e:	4b08      	ldr	r3, [pc, #32]	@ (8014ac0 <tcp_update_rcv_ann_wnd+0xa4>)
 8014aa0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8014aa4:	4909      	ldr	r1, [pc, #36]	@ (8014acc <tcp_update_rcv_ann_wnd+0xb0>)
 8014aa6:	4808      	ldr	r0, [pc, #32]	@ (8014ac8 <tcp_update_rcv_ann_wnd+0xac>)
 8014aa8:	f009 f914 	bl	801dcd4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	b29a      	uxth	r2, r3
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8014ab4:	2300      	movs	r3, #0
  }
}
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	3710      	adds	r7, #16
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}
 8014abe:	bf00      	nop
 8014ac0:	0801f954 	.word	0x0801f954
 8014ac4:	0801fbb0 	.word	0x0801fbb0
 8014ac8:	0801f998 	.word	0x0801f998
 8014acc:	0801fbd4 	.word	0x0801fbd4

08014ad0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b084      	sub	sp, #16
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
 8014ad8:	460b      	mov	r3, r1
 8014ada:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d107      	bne.n	8014af2 <tcp_recved+0x22>
 8014ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8014b60 <tcp_recved+0x90>)
 8014ae4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8014ae8:	491e      	ldr	r1, [pc, #120]	@ (8014b64 <tcp_recved+0x94>)
 8014aea:	481f      	ldr	r0, [pc, #124]	@ (8014b68 <tcp_recved+0x98>)
 8014aec:	f009 f8f2 	bl	801dcd4 <iprintf>
 8014af0:	e032      	b.n	8014b58 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	7d1b      	ldrb	r3, [r3, #20]
 8014af6:	2b01      	cmp	r3, #1
 8014af8:	d106      	bne.n	8014b08 <tcp_recved+0x38>
 8014afa:	4b19      	ldr	r3, [pc, #100]	@ (8014b60 <tcp_recved+0x90>)
 8014afc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8014b00:	491a      	ldr	r1, [pc, #104]	@ (8014b6c <tcp_recved+0x9c>)
 8014b02:	4819      	ldr	r0, [pc, #100]	@ (8014b68 <tcp_recved+0x98>)
 8014b04:	f009 f8e6 	bl	801dcd4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014b0c:	887b      	ldrh	r3, [r7, #2]
 8014b0e:	4413      	add	r3, r2
 8014b10:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8014b12:	89fb      	ldrh	r3, [r7, #14]
 8014b14:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014b18:	d804      	bhi.n	8014b24 <tcp_recved+0x54>
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b1e:	89fa      	ldrh	r2, [r7, #14]
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d204      	bcs.n	8014b2e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014b2c:	e002      	b.n	8014b34 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	89fa      	ldrh	r2, [r7, #14]
 8014b32:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f7ff ff71 	bl	8014a1c <tcp_update_rcv_ann_wnd>
 8014b3a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014b3c:	68bb      	ldr	r3, [r7, #8]
 8014b3e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014b42:	d309      	bcc.n	8014b58 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	8b5b      	ldrh	r3, [r3, #26]
 8014b48:	f043 0302 	orr.w	r3, r3, #2
 8014b4c:	b29a      	uxth	r2, r3
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f003 fe3e 	bl	80187d4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014b58:	3710      	adds	r7, #16
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	0801f954 	.word	0x0801f954
 8014b64:	0801fbf0 	.word	0x0801fbf0
 8014b68:	0801f998 	.word	0x0801f998
 8014b6c:	0801fc08 	.word	0x0801fc08

08014b70 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8014b70:	b5b0      	push	{r4, r5, r7, lr}
 8014b72:	b090      	sub	sp, #64	@ 0x40
 8014b74:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8014b76:	2300      	movs	r3, #0
 8014b78:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8014b7c:	4b95      	ldr	r3, [pc, #596]	@ (8014dd4 <tcp_slowtmr+0x264>)
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	3301      	adds	r3, #1
 8014b82:	4a94      	ldr	r2, [pc, #592]	@ (8014dd4 <tcp_slowtmr+0x264>)
 8014b84:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8014b86:	4b94      	ldr	r3, [pc, #592]	@ (8014dd8 <tcp_slowtmr+0x268>)
 8014b88:	781b      	ldrb	r3, [r3, #0]
 8014b8a:	3301      	adds	r3, #1
 8014b8c:	b2da      	uxtb	r2, r3
 8014b8e:	4b92      	ldr	r3, [pc, #584]	@ (8014dd8 <tcp_slowtmr+0x268>)
 8014b90:	701a      	strb	r2, [r3, #0]
 8014b92:	e000      	b.n	8014b96 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8014b94:	bf00      	nop
  prev = NULL;
 8014b96:	2300      	movs	r3, #0
 8014b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8014b9a:	4b90      	ldr	r3, [pc, #576]	@ (8014ddc <tcp_slowtmr+0x26c>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014ba0:	e29d      	b.n	80150de <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8014ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ba4:	7d1b      	ldrb	r3, [r3, #20]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d106      	bne.n	8014bb8 <tcp_slowtmr+0x48>
 8014baa:	4b8d      	ldr	r3, [pc, #564]	@ (8014de0 <tcp_slowtmr+0x270>)
 8014bac:	f240 42be 	movw	r2, #1214	@ 0x4be
 8014bb0:	498c      	ldr	r1, [pc, #560]	@ (8014de4 <tcp_slowtmr+0x274>)
 8014bb2:	488d      	ldr	r0, [pc, #564]	@ (8014de8 <tcp_slowtmr+0x278>)
 8014bb4:	f009 f88e 	bl	801dcd4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8014bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bba:	7d1b      	ldrb	r3, [r3, #20]
 8014bbc:	2b01      	cmp	r3, #1
 8014bbe:	d106      	bne.n	8014bce <tcp_slowtmr+0x5e>
 8014bc0:	4b87      	ldr	r3, [pc, #540]	@ (8014de0 <tcp_slowtmr+0x270>)
 8014bc2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8014bc6:	4989      	ldr	r1, [pc, #548]	@ (8014dec <tcp_slowtmr+0x27c>)
 8014bc8:	4887      	ldr	r0, [pc, #540]	@ (8014de8 <tcp_slowtmr+0x278>)
 8014bca:	f009 f883 	bl	801dcd4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8014bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bd0:	7d1b      	ldrb	r3, [r3, #20]
 8014bd2:	2b0a      	cmp	r3, #10
 8014bd4:	d106      	bne.n	8014be4 <tcp_slowtmr+0x74>
 8014bd6:	4b82      	ldr	r3, [pc, #520]	@ (8014de0 <tcp_slowtmr+0x270>)
 8014bd8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8014bdc:	4984      	ldr	r1, [pc, #528]	@ (8014df0 <tcp_slowtmr+0x280>)
 8014bde:	4882      	ldr	r0, [pc, #520]	@ (8014de8 <tcp_slowtmr+0x278>)
 8014be0:	f009 f878 	bl	801dcd4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014be6:	7f9a      	ldrb	r2, [r3, #30]
 8014be8:	4b7b      	ldr	r3, [pc, #492]	@ (8014dd8 <tcp_slowtmr+0x268>)
 8014bea:	781b      	ldrb	r3, [r3, #0]
 8014bec:	429a      	cmp	r2, r3
 8014bee:	d105      	bne.n	8014bfc <tcp_slowtmr+0x8c>
      prev = pcb;
 8014bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bf6:	68db      	ldr	r3, [r3, #12]
 8014bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8014bfa:	e270      	b.n	80150de <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8014bfc:	4b76      	ldr	r3, [pc, #472]	@ (8014dd8 <tcp_slowtmr+0x268>)
 8014bfe:	781a      	ldrb	r2, [r3, #0]
 8014c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c02:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8014c04:	2300      	movs	r3, #0
 8014c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c12:	7d1b      	ldrb	r3, [r3, #20]
 8014c14:	2b02      	cmp	r3, #2
 8014c16:	d10a      	bne.n	8014c2e <tcp_slowtmr+0xbe>
 8014c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014c1e:	2b05      	cmp	r3, #5
 8014c20:	d905      	bls.n	8014c2e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8014c22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c26:	3301      	adds	r3, #1
 8014c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014c2c:	e11e      	b.n	8014e6c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014c34:	2b0b      	cmp	r3, #11
 8014c36:	d905      	bls.n	8014c44 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8014c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c3c:	3301      	adds	r3, #1
 8014c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014c42:	e113      	b.n	8014e6c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8014c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c46:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d075      	beq.n	8014d3a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8014c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d006      	beq.n	8014c64 <tcp_slowtmr+0xf4>
 8014c56:	4b62      	ldr	r3, [pc, #392]	@ (8014de0 <tcp_slowtmr+0x270>)
 8014c58:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8014c5c:	4965      	ldr	r1, [pc, #404]	@ (8014df4 <tcp_slowtmr+0x284>)
 8014c5e:	4862      	ldr	r0, [pc, #392]	@ (8014de8 <tcp_slowtmr+0x278>)
 8014c60:	f009 f838 	bl	801dcd4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d106      	bne.n	8014c7a <tcp_slowtmr+0x10a>
 8014c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8014de0 <tcp_slowtmr+0x270>)
 8014c6e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8014c72:	4961      	ldr	r1, [pc, #388]	@ (8014df8 <tcp_slowtmr+0x288>)
 8014c74:	485c      	ldr	r0, [pc, #368]	@ (8014de8 <tcp_slowtmr+0x278>)
 8014c76:	f009 f82d 	bl	801dcd4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8014c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c7c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014c80:	2b0b      	cmp	r3, #11
 8014c82:	d905      	bls.n	8014c90 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8014c84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c88:	3301      	adds	r3, #1
 8014c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014c8e:	e0ed      	b.n	8014e6c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8014c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c92:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014c96:	3b01      	subs	r3, #1
 8014c98:	4a58      	ldr	r2, [pc, #352]	@ (8014dfc <tcp_slowtmr+0x28c>)
 8014c9a:	5cd3      	ldrb	r3, [r2, r3]
 8014c9c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8014c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ca0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014ca4:	7c7a      	ldrb	r2, [r7, #17]
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d907      	bls.n	8014cba <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8014caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	b2da      	uxtb	r2, r3
 8014cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cb6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8014cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cbc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014cc0:	7c7a      	ldrb	r2, [r7, #17]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	f200 80d2 	bhi.w	8014e6c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8014cc8:	2301      	movs	r3, #1
 8014cca:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8014ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d108      	bne.n	8014ce8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8014cd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014cd8:	f004 fc24 	bl	8019524 <tcp_zero_window_probe>
 8014cdc:	4603      	mov	r3, r0
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d014      	beq.n	8014d0c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	623b      	str	r3, [r7, #32]
 8014ce6:	e011      	b.n	8014d0c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8014ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014cee:	4619      	mov	r1, r3
 8014cf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014cf2:	f003 fae9 	bl	80182c8 <tcp_split_unsent_seg>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d107      	bne.n	8014d0c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8014cfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014cfe:	f003 fd69 	bl	80187d4 <tcp_output>
 8014d02:	4603      	mov	r3, r0
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d101      	bne.n	8014d0c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8014d0c:	6a3b      	ldr	r3, [r7, #32]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	f000 80ac 	beq.w	8014e6c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8014d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d16:	2200      	movs	r2, #0
 8014d18:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d1e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014d22:	2b06      	cmp	r3, #6
 8014d24:	f200 80a2 	bhi.w	8014e6c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8014d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d2a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014d2e:	3301      	adds	r3, #1
 8014d30:	b2da      	uxtb	r2, r3
 8014d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d34:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8014d38:	e098      	b.n	8014e6c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	db0f      	blt.n	8014d64 <tcp_slowtmr+0x1f4>
 8014d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d46:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014d4a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014d4e:	4293      	cmp	r3, r2
 8014d50:	d008      	beq.n	8014d64 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8014d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014d58:	b29b      	uxth	r3, r3
 8014d5a:	3301      	adds	r3, #1
 8014d5c:	b29b      	uxth	r3, r3
 8014d5e:	b21a      	sxth	r2, r3
 8014d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d62:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8014d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d66:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8014d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d6c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014d70:	429a      	cmp	r2, r3
 8014d72:	db7b      	blt.n	8014e6c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8014d74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014d76:	f004 f821 	bl	8018dbc <tcp_rexmit_rto_prepare>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d007      	beq.n	8014d90 <tcp_slowtmr+0x220>
 8014d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d171      	bne.n	8014e6c <tcp_slowtmr+0x2fc>
 8014d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d06d      	beq.n	8014e6c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8014d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d92:	7d1b      	ldrb	r3, [r3, #20]
 8014d94:	2b02      	cmp	r3, #2
 8014d96:	d03a      	beq.n	8014e0e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014d9e:	2b0c      	cmp	r3, #12
 8014da0:	bf28      	it	cs
 8014da2:	230c      	movcs	r3, #12
 8014da4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8014da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014da8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014dac:	10db      	asrs	r3, r3, #3
 8014dae:	b21b      	sxth	r3, r3
 8014db0:	461a      	mov	r2, r3
 8014db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014db4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014db8:	4413      	add	r3, r2
 8014dba:	7efa      	ldrb	r2, [r7, #27]
 8014dbc:	4910      	ldr	r1, [pc, #64]	@ (8014e00 <tcp_slowtmr+0x290>)
 8014dbe:	5c8a      	ldrb	r2, [r1, r2]
 8014dc0:	4093      	lsls	r3, r2
 8014dc2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8014dca:	4293      	cmp	r3, r2
 8014dcc:	dc1a      	bgt.n	8014e04 <tcp_slowtmr+0x294>
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	b21a      	sxth	r2, r3
 8014dd2:	e019      	b.n	8014e08 <tcp_slowtmr+0x298>
 8014dd4:	20027688 	.word	0x20027688
 8014dd8:	2002769e 	.word	0x2002769e
 8014ddc:	20027694 	.word	0x20027694
 8014de0:	0801f954 	.word	0x0801f954
 8014de4:	0801fc98 	.word	0x0801fc98
 8014de8:	0801f998 	.word	0x0801f998
 8014dec:	0801fcc4 	.word	0x0801fcc4
 8014df0:	0801fcf0 	.word	0x0801fcf0
 8014df4:	0801fd20 	.word	0x0801fd20
 8014df8:	0801fd54 	.word	0x0801fd54
 8014dfc:	08021c64 	.word	0x08021c64
 8014e00:	08021c54 	.word	0x08021c54
 8014e04:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8014e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e10:	2200      	movs	r2, #0
 8014e12:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014e20:	4293      	cmp	r3, r2
 8014e22:	bf28      	it	cs
 8014e24:	4613      	movcs	r3, r2
 8014e26:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014e28:	8a7b      	ldrh	r3, [r7, #18]
 8014e2a:	085b      	lsrs	r3, r3, #1
 8014e2c:	b29a      	uxth	r2, r3
 8014e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e30:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e3e:	005b      	lsls	r3, r3, #1
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	429a      	cmp	r2, r3
 8014e44:	d206      	bcs.n	8014e54 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8014e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e4a:	005b      	lsls	r3, r3, #1
 8014e4c:	b29a      	uxth	r2, r3
 8014e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e50:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8014e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e56:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8014e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e5a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8014e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e60:	2200      	movs	r2, #0
 8014e62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8014e66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014e68:	f004 f818 	bl	8018e9c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8014e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e6e:	7d1b      	ldrb	r3, [r3, #20]
 8014e70:	2b06      	cmp	r3, #6
 8014e72:	d111      	bne.n	8014e98 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8014e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e76:	8b5b      	ldrh	r3, [r3, #26]
 8014e78:	f003 0310 	and.w	r3, r3, #16
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d00b      	beq.n	8014e98 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014e80:	4b9c      	ldr	r3, [pc, #624]	@ (80150f4 <tcp_slowtmr+0x584>)
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e86:	6a1b      	ldr	r3, [r3, #32]
 8014e88:	1ad3      	subs	r3, r2, r3
 8014e8a:	2b28      	cmp	r3, #40	@ 0x28
 8014e8c:	d904      	bls.n	8014e98 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8014e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e92:	3301      	adds	r3, #1
 8014e94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e9a:	7a5b      	ldrb	r3, [r3, #9]
 8014e9c:	f003 0308 	and.w	r3, r3, #8
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d04a      	beq.n	8014f3a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8014ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ea6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014ea8:	2b04      	cmp	r3, #4
 8014eaa:	d003      	beq.n	8014eb4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8014eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014eb0:	2b07      	cmp	r3, #7
 8014eb2:	d142      	bne.n	8014f3a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014eb4:	4b8f      	ldr	r3, [pc, #572]	@ (80150f4 <tcp_slowtmr+0x584>)
 8014eb6:	681a      	ldr	r2, [r3, #0]
 8014eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eba:	6a1b      	ldr	r3, [r3, #32]
 8014ebc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ec0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014ec4:	4b8c      	ldr	r3, [pc, #560]	@ (80150f8 <tcp_slowtmr+0x588>)
 8014ec6:	440b      	add	r3, r1
 8014ec8:	498c      	ldr	r1, [pc, #560]	@ (80150fc <tcp_slowtmr+0x58c>)
 8014eca:	fba1 1303 	umull	r1, r3, r1, r3
 8014ece:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d90a      	bls.n	8014eea <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8014ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ed8:	3301      	adds	r3, #1
 8014eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8014ede:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014ee8:	e027      	b.n	8014f3a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014eea:	4b82      	ldr	r3, [pc, #520]	@ (80150f4 <tcp_slowtmr+0x584>)
 8014eec:	681a      	ldr	r2, [r3, #0]
 8014eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ef0:	6a1b      	ldr	r3, [r3, #32]
 8014ef2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ef6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014efc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014f00:	4618      	mov	r0, r3
 8014f02:	4b7f      	ldr	r3, [pc, #508]	@ (8015100 <tcp_slowtmr+0x590>)
 8014f04:	fb00 f303 	mul.w	r3, r0, r3
 8014f08:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014f0a:	497c      	ldr	r1, [pc, #496]	@ (80150fc <tcp_slowtmr+0x58c>)
 8014f0c:	fba1 1303 	umull	r1, r3, r1, r3
 8014f10:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d911      	bls.n	8014f3a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8014f16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f18:	f004 fac4 	bl	80194a4 <tcp_keepalive>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8014f22:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d107      	bne.n	8014f3a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8014f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f2c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014f30:	3301      	adds	r3, #1
 8014f32:	b2da      	uxtb	r2, r3
 8014f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f36:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8014f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d011      	beq.n	8014f66 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014f42:	4b6c      	ldr	r3, [pc, #432]	@ (80150f4 <tcp_slowtmr+0x584>)
 8014f44:	681a      	ldr	r2, [r3, #0]
 8014f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f48:	6a1b      	ldr	r3, [r3, #32]
 8014f4a:	1ad2      	subs	r2, r2, r3
 8014f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f4e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014f52:	4619      	mov	r1, r3
 8014f54:	460b      	mov	r3, r1
 8014f56:	005b      	lsls	r3, r3, #1
 8014f58:	440b      	add	r3, r1
 8014f5a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014f5c:	429a      	cmp	r2, r3
 8014f5e:	d302      	bcc.n	8014f66 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8014f60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f62:	f000 fddd 	bl	8015b20 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8014f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f68:	7d1b      	ldrb	r3, [r3, #20]
 8014f6a:	2b03      	cmp	r3, #3
 8014f6c:	d10b      	bne.n	8014f86 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014f6e:	4b61      	ldr	r3, [pc, #388]	@ (80150f4 <tcp_slowtmr+0x584>)
 8014f70:	681a      	ldr	r2, [r3, #0]
 8014f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f74:	6a1b      	ldr	r3, [r3, #32]
 8014f76:	1ad3      	subs	r3, r2, r3
 8014f78:	2b28      	cmp	r3, #40	@ 0x28
 8014f7a:	d904      	bls.n	8014f86 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8014f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f80:	3301      	adds	r3, #1
 8014f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8014f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f88:	7d1b      	ldrb	r3, [r3, #20]
 8014f8a:	2b09      	cmp	r3, #9
 8014f8c:	d10b      	bne.n	8014fa6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014f8e:	4b59      	ldr	r3, [pc, #356]	@ (80150f4 <tcp_slowtmr+0x584>)
 8014f90:	681a      	ldr	r2, [r3, #0]
 8014f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f94:	6a1b      	ldr	r3, [r3, #32]
 8014f96:	1ad3      	subs	r3, r2, r3
 8014f98:	2bf0      	cmp	r3, #240	@ 0xf0
 8014f9a:	d904      	bls.n	8014fa6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8014f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014fa0:	3301      	adds	r3, #1
 8014fa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8014fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d060      	beq.n	8015070 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8014fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014fb4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8014fb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014fb8:	f000 fbfe 	bl	80157b8 <tcp_pcb_purge>
      if (prev != NULL) {
 8014fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d010      	beq.n	8014fe4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014fc2:	4b50      	ldr	r3, [pc, #320]	@ (8015104 <tcp_slowtmr+0x594>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d106      	bne.n	8014fda <tcp_slowtmr+0x46a>
 8014fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8015108 <tcp_slowtmr+0x598>)
 8014fce:	f240 526d 	movw	r2, #1389	@ 0x56d
 8014fd2:	494e      	ldr	r1, [pc, #312]	@ (801510c <tcp_slowtmr+0x59c>)
 8014fd4:	484e      	ldr	r0, [pc, #312]	@ (8015110 <tcp_slowtmr+0x5a0>)
 8014fd6:	f008 fe7d 	bl	801dcd4 <iprintf>
        prev->next = pcb->next;
 8014fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fdc:	68da      	ldr	r2, [r3, #12]
 8014fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fe0:	60da      	str	r2, [r3, #12]
 8014fe2:	e00f      	b.n	8015004 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014fe4:	4b47      	ldr	r3, [pc, #284]	@ (8015104 <tcp_slowtmr+0x594>)
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d006      	beq.n	8014ffc <tcp_slowtmr+0x48c>
 8014fee:	4b46      	ldr	r3, [pc, #280]	@ (8015108 <tcp_slowtmr+0x598>)
 8014ff0:	f240 5271 	movw	r2, #1393	@ 0x571
 8014ff4:	4947      	ldr	r1, [pc, #284]	@ (8015114 <tcp_slowtmr+0x5a4>)
 8014ff6:	4846      	ldr	r0, [pc, #280]	@ (8015110 <tcp_slowtmr+0x5a0>)
 8014ff8:	f008 fe6c 	bl	801dcd4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ffe:	68db      	ldr	r3, [r3, #12]
 8015000:	4a40      	ldr	r2, [pc, #256]	@ (8015104 <tcp_slowtmr+0x594>)
 8015002:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015008:	2b00      	cmp	r3, #0
 801500a:	d013      	beq.n	8015034 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801500c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801500e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015012:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015014:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8015016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015018:	3304      	adds	r3, #4
 801501a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801501c:	8ad2      	ldrh	r2, [r2, #22]
 801501e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015020:	8b09      	ldrh	r1, [r1, #24]
 8015022:	9102      	str	r1, [sp, #8]
 8015024:	9201      	str	r2, [sp, #4]
 8015026:	9300      	str	r3, [sp, #0]
 8015028:	462b      	mov	r3, r5
 801502a:	4622      	mov	r2, r4
 801502c:	4601      	mov	r1, r0
 801502e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015030:	f004 f984 	bl	801933c <tcp_rst>
      err_arg = pcb->callback_arg;
 8015034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015036:	691b      	ldr	r3, [r3, #16]
 8015038:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801503a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801503c:	7d1b      	ldrb	r3, [r3, #20]
 801503e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015042:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015046:	68db      	ldr	r3, [r3, #12]
 8015048:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801504a:	6838      	ldr	r0, [r7, #0]
 801504c:	f7ff f9f2 	bl	8014434 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015050:	4b31      	ldr	r3, [pc, #196]	@ (8015118 <tcp_slowtmr+0x5a8>)
 8015052:	2200      	movs	r2, #0
 8015054:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d004      	beq.n	8015066 <tcp_slowtmr+0x4f6>
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	f06f 010c 	mvn.w	r1, #12
 8015062:	68b8      	ldr	r0, [r7, #8]
 8015064:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015066:	4b2c      	ldr	r3, [pc, #176]	@ (8015118 <tcp_slowtmr+0x5a8>)
 8015068:	781b      	ldrb	r3, [r3, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d037      	beq.n	80150de <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801506e:	e592      	b.n	8014b96 <tcp_slowtmr+0x26>
      prev = pcb;
 8015070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015072:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015076:	68db      	ldr	r3, [r3, #12]
 8015078:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801507c:	7f1b      	ldrb	r3, [r3, #28]
 801507e:	3301      	adds	r3, #1
 8015080:	b2da      	uxtb	r2, r3
 8015082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015084:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015088:	7f1a      	ldrb	r2, [r3, #28]
 801508a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801508c:	7f5b      	ldrb	r3, [r3, #29]
 801508e:	429a      	cmp	r2, r3
 8015090:	d325      	bcc.n	80150de <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015094:	2200      	movs	r2, #0
 8015096:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8015098:	4b1f      	ldr	r3, [pc, #124]	@ (8015118 <tcp_slowtmr+0x5a8>)
 801509a:	2200      	movs	r2, #0
 801509c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d00b      	beq.n	80150c0 <tcp_slowtmr+0x550>
 80150a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80150ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80150b0:	6912      	ldr	r2, [r2, #16]
 80150b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80150b4:	4610      	mov	r0, r2
 80150b6:	4798      	blx	r3
 80150b8:	4603      	mov	r3, r0
 80150ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80150be:	e002      	b.n	80150c6 <tcp_slowtmr+0x556>
 80150c0:	2300      	movs	r3, #0
 80150c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80150c6:	4b14      	ldr	r3, [pc, #80]	@ (8015118 <tcp_slowtmr+0x5a8>)
 80150c8:	781b      	ldrb	r3, [r3, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	f47f ad62 	bne.w	8014b94 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80150d0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d102      	bne.n	80150de <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80150d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80150da:	f003 fb7b 	bl	80187d4 <tcp_output>
  while (pcb != NULL) {
 80150de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	f47f ad5e 	bne.w	8014ba2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80150e6:	2300      	movs	r3, #0
 80150e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80150ea:	4b0c      	ldr	r3, [pc, #48]	@ (801511c <tcp_slowtmr+0x5ac>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80150f0:	e069      	b.n	80151c6 <tcp_slowtmr+0x656>
 80150f2:	bf00      	nop
 80150f4:	20027688 	.word	0x20027688
 80150f8:	000a4cb8 	.word	0x000a4cb8
 80150fc:	10624dd3 	.word	0x10624dd3
 8015100:	000124f8 	.word	0x000124f8
 8015104:	20027694 	.word	0x20027694
 8015108:	0801f954 	.word	0x0801f954
 801510c:	0801fd8c 	.word	0x0801fd8c
 8015110:	0801f998 	.word	0x0801f998
 8015114:	0801fdb8 	.word	0x0801fdb8
 8015118:	2002769c 	.word	0x2002769c
 801511c:	20027698 	.word	0x20027698
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015122:	7d1b      	ldrb	r3, [r3, #20]
 8015124:	2b0a      	cmp	r3, #10
 8015126:	d006      	beq.n	8015136 <tcp_slowtmr+0x5c6>
 8015128:	4b2b      	ldr	r3, [pc, #172]	@ (80151d8 <tcp_slowtmr+0x668>)
 801512a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801512e:	492b      	ldr	r1, [pc, #172]	@ (80151dc <tcp_slowtmr+0x66c>)
 8015130:	482b      	ldr	r0, [pc, #172]	@ (80151e0 <tcp_slowtmr+0x670>)
 8015132:	f008 fdcf 	bl	801dcd4 <iprintf>
    pcb_remove = 0;
 8015136:	2300      	movs	r3, #0
 8015138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801513c:	4b29      	ldr	r3, [pc, #164]	@ (80151e4 <tcp_slowtmr+0x674>)
 801513e:	681a      	ldr	r2, [r3, #0]
 8015140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015142:	6a1b      	ldr	r3, [r3, #32]
 8015144:	1ad3      	subs	r3, r2, r3
 8015146:	2bf0      	cmp	r3, #240	@ 0xf0
 8015148:	d904      	bls.n	8015154 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801514a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801514e:	3301      	adds	r3, #1
 8015150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015158:	2b00      	cmp	r3, #0
 801515a:	d02f      	beq.n	80151bc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801515c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801515e:	f000 fb2b 	bl	80157b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015164:	2b00      	cmp	r3, #0
 8015166:	d010      	beq.n	801518a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015168:	4b1f      	ldr	r3, [pc, #124]	@ (80151e8 <tcp_slowtmr+0x678>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801516e:	429a      	cmp	r2, r3
 8015170:	d106      	bne.n	8015180 <tcp_slowtmr+0x610>
 8015172:	4b19      	ldr	r3, [pc, #100]	@ (80151d8 <tcp_slowtmr+0x668>)
 8015174:	f240 52af 	movw	r2, #1455	@ 0x5af
 8015178:	491c      	ldr	r1, [pc, #112]	@ (80151ec <tcp_slowtmr+0x67c>)
 801517a:	4819      	ldr	r0, [pc, #100]	@ (80151e0 <tcp_slowtmr+0x670>)
 801517c:	f008 fdaa 	bl	801dcd4 <iprintf>
        prev->next = pcb->next;
 8015180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015182:	68da      	ldr	r2, [r3, #12]
 8015184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015186:	60da      	str	r2, [r3, #12]
 8015188:	e00f      	b.n	80151aa <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801518a:	4b17      	ldr	r3, [pc, #92]	@ (80151e8 <tcp_slowtmr+0x678>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015190:	429a      	cmp	r2, r3
 8015192:	d006      	beq.n	80151a2 <tcp_slowtmr+0x632>
 8015194:	4b10      	ldr	r3, [pc, #64]	@ (80151d8 <tcp_slowtmr+0x668>)
 8015196:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801519a:	4915      	ldr	r1, [pc, #84]	@ (80151f0 <tcp_slowtmr+0x680>)
 801519c:	4810      	ldr	r0, [pc, #64]	@ (80151e0 <tcp_slowtmr+0x670>)
 801519e:	f008 fd99 	bl	801dcd4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80151a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a4:	68db      	ldr	r3, [r3, #12]
 80151a6:	4a10      	ldr	r2, [pc, #64]	@ (80151e8 <tcp_slowtmr+0x678>)
 80151a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80151aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80151ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151b0:	68db      	ldr	r3, [r3, #12]
 80151b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80151b4:	69f8      	ldr	r0, [r7, #28]
 80151b6:	f7ff f93d 	bl	8014434 <tcp_free>
 80151ba:	e004      	b.n	80151c6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80151bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151be:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80151c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151c2:	68db      	ldr	r3, [r3, #12]
 80151c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80151c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d1a9      	bne.n	8015120 <tcp_slowtmr+0x5b0>
    }
  }
}
 80151cc:	bf00      	nop
 80151ce:	bf00      	nop
 80151d0:	3730      	adds	r7, #48	@ 0x30
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bdb0      	pop	{r4, r5, r7, pc}
 80151d6:	bf00      	nop
 80151d8:	0801f954 	.word	0x0801f954
 80151dc:	0801fde4 	.word	0x0801fde4
 80151e0:	0801f998 	.word	0x0801f998
 80151e4:	20027688 	.word	0x20027688
 80151e8:	20027698 	.word	0x20027698
 80151ec:	0801fe14 	.word	0x0801fe14
 80151f0:	0801fe3c 	.word	0x0801fe3c

080151f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b082      	sub	sp, #8
 80151f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80151fa:	4b2d      	ldr	r3, [pc, #180]	@ (80152b0 <tcp_fasttmr+0xbc>)
 80151fc:	781b      	ldrb	r3, [r3, #0]
 80151fe:	3301      	adds	r3, #1
 8015200:	b2da      	uxtb	r2, r3
 8015202:	4b2b      	ldr	r3, [pc, #172]	@ (80152b0 <tcp_fasttmr+0xbc>)
 8015204:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015206:	4b2b      	ldr	r3, [pc, #172]	@ (80152b4 <tcp_fasttmr+0xc0>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801520c:	e048      	b.n	80152a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	7f9a      	ldrb	r2, [r3, #30]
 8015212:	4b27      	ldr	r3, [pc, #156]	@ (80152b0 <tcp_fasttmr+0xbc>)
 8015214:	781b      	ldrb	r3, [r3, #0]
 8015216:	429a      	cmp	r2, r3
 8015218:	d03f      	beq.n	801529a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801521a:	4b25      	ldr	r3, [pc, #148]	@ (80152b0 <tcp_fasttmr+0xbc>)
 801521c:	781a      	ldrb	r2, [r3, #0]
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	8b5b      	ldrh	r3, [r3, #26]
 8015226:	f003 0301 	and.w	r3, r3, #1
 801522a:	2b00      	cmp	r3, #0
 801522c:	d010      	beq.n	8015250 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	8b5b      	ldrh	r3, [r3, #26]
 8015232:	f043 0302 	orr.w	r3, r3, #2
 8015236:	b29a      	uxth	r2, r3
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801523c:	6878      	ldr	r0, [r7, #4]
 801523e:	f003 fac9 	bl	80187d4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	8b5b      	ldrh	r3, [r3, #26]
 8015246:	f023 0303 	bic.w	r3, r3, #3
 801524a:	b29a      	uxth	r2, r3
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	8b5b      	ldrh	r3, [r3, #26]
 8015254:	f003 0308 	and.w	r3, r3, #8
 8015258:	2b00      	cmp	r3, #0
 801525a:	d009      	beq.n	8015270 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	8b5b      	ldrh	r3, [r3, #26]
 8015260:	f023 0308 	bic.w	r3, r3, #8
 8015264:	b29a      	uxth	r2, r3
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f7ff fa76 	bl	801475c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	68db      	ldr	r3, [r3, #12]
 8015274:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801527a:	2b00      	cmp	r3, #0
 801527c:	d00a      	beq.n	8015294 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801527e:	4b0e      	ldr	r3, [pc, #56]	@ (80152b8 <tcp_fasttmr+0xc4>)
 8015280:	2200      	movs	r2, #0
 8015282:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f000 f819 	bl	80152bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801528a:	4b0b      	ldr	r3, [pc, #44]	@ (80152b8 <tcp_fasttmr+0xc4>)
 801528c:	781b      	ldrb	r3, [r3, #0]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d000      	beq.n	8015294 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015292:	e7b8      	b.n	8015206 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	607b      	str	r3, [r7, #4]
 8015298:	e002      	b.n	80152a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	68db      	ldr	r3, [r3, #12]
 801529e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d1b3      	bne.n	801520e <tcp_fasttmr+0x1a>
    }
  }
}
 80152a6:	bf00      	nop
 80152a8:	bf00      	nop
 80152aa:	3708      	adds	r7, #8
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}
 80152b0:	2002769e 	.word	0x2002769e
 80152b4:	20027694 	.word	0x20027694
 80152b8:	2002769c 	.word	0x2002769c

080152bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80152bc:	b590      	push	{r4, r7, lr}
 80152be:	b085      	sub	sp, #20
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d109      	bne.n	80152de <tcp_process_refused_data+0x22>
 80152ca:	4b37      	ldr	r3, [pc, #220]	@ (80153a8 <tcp_process_refused_data+0xec>)
 80152cc:	f240 6209 	movw	r2, #1545	@ 0x609
 80152d0:	4936      	ldr	r1, [pc, #216]	@ (80153ac <tcp_process_refused_data+0xf0>)
 80152d2:	4837      	ldr	r0, [pc, #220]	@ (80153b0 <tcp_process_refused_data+0xf4>)
 80152d4:	f008 fcfe 	bl	801dcd4 <iprintf>
 80152d8:	f06f 030f 	mvn.w	r3, #15
 80152dc:	e060      	b.n	80153a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80152e2:	7b5b      	ldrb	r3, [r3, #13]
 80152e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80152ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2200      	movs	r2, #0
 80152f0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d00b      	beq.n	8015314 <tcp_process_refused_data+0x58>
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	6918      	ldr	r0, [r3, #16]
 8015306:	2300      	movs	r3, #0
 8015308:	68ba      	ldr	r2, [r7, #8]
 801530a:	6879      	ldr	r1, [r7, #4]
 801530c:	47a0      	blx	r4
 801530e:	4603      	mov	r3, r0
 8015310:	73fb      	strb	r3, [r7, #15]
 8015312:	e007      	b.n	8015324 <tcp_process_refused_data+0x68>
 8015314:	2300      	movs	r3, #0
 8015316:	68ba      	ldr	r2, [r7, #8]
 8015318:	6879      	ldr	r1, [r7, #4]
 801531a:	2000      	movs	r0, #0
 801531c:	f000 f8a4 	bl	8015468 <tcp_recv_null>
 8015320:	4603      	mov	r3, r0
 8015322:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d12a      	bne.n	8015382 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801532c:	7bbb      	ldrb	r3, [r7, #14]
 801532e:	f003 0320 	and.w	r3, r3, #32
 8015332:	2b00      	cmp	r3, #0
 8015334:	d033      	beq.n	801539e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801533a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801533e:	d005      	beq.n	801534c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015344:	3301      	adds	r3, #1
 8015346:	b29a      	uxth	r2, r3
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015352:	2b00      	cmp	r3, #0
 8015354:	d00b      	beq.n	801536e <tcp_process_refused_data+0xb2>
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6918      	ldr	r0, [r3, #16]
 8015360:	2300      	movs	r3, #0
 8015362:	2200      	movs	r2, #0
 8015364:	6879      	ldr	r1, [r7, #4]
 8015366:	47a0      	blx	r4
 8015368:	4603      	mov	r3, r0
 801536a:	73fb      	strb	r3, [r7, #15]
 801536c:	e001      	b.n	8015372 <tcp_process_refused_data+0xb6>
 801536e:	2300      	movs	r3, #0
 8015370:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015376:	f113 0f0d 	cmn.w	r3, #13
 801537a:	d110      	bne.n	801539e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801537c:	f06f 030c 	mvn.w	r3, #12
 8015380:	e00e      	b.n	80153a0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015386:	f113 0f0d 	cmn.w	r3, #13
 801538a:	d102      	bne.n	8015392 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801538c:	f06f 030c 	mvn.w	r3, #12
 8015390:	e006      	b.n	80153a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	68ba      	ldr	r2, [r7, #8]
 8015396:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8015398:	f06f 0304 	mvn.w	r3, #4
 801539c:	e000      	b.n	80153a0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801539e:	2300      	movs	r3, #0
}
 80153a0:	4618      	mov	r0, r3
 80153a2:	3714      	adds	r7, #20
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd90      	pop	{r4, r7, pc}
 80153a8:	0801f954 	.word	0x0801f954
 80153ac:	0801fe64 	.word	0x0801fe64
 80153b0:	0801f998 	.word	0x0801f998

080153b4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b084      	sub	sp, #16
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80153bc:	e007      	b.n	80153ce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f000 f80a 	bl	80153de <tcp_seg_free>
    seg = next;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d1f4      	bne.n	80153be <tcp_segs_free+0xa>
  }
}
 80153d4:	bf00      	nop
 80153d6:	bf00      	nop
 80153d8:	3710      	adds	r7, #16
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}

080153de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80153de:	b580      	push	{r7, lr}
 80153e0:	b082      	sub	sp, #8
 80153e2:	af00      	add	r7, sp, #0
 80153e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d00c      	beq.n	8015406 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	685b      	ldr	r3, [r3, #4]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d004      	beq.n	80153fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	685b      	ldr	r3, [r3, #4]
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7fe fd5f 	bl	8013ebc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80153fe:	6879      	ldr	r1, [r7, #4]
 8015400:	2003      	movs	r0, #3
 8015402:	f7fd feb7 	bl	8013174 <memp_free>
  }
}
 8015406:	bf00      	nop
 8015408:	3708      	adds	r7, #8
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}
	...

08015410 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b084      	sub	sp, #16
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d106      	bne.n	801542c <tcp_seg_copy+0x1c>
 801541e:	4b0f      	ldr	r3, [pc, #60]	@ (801545c <tcp_seg_copy+0x4c>)
 8015420:	f240 6282 	movw	r2, #1666	@ 0x682
 8015424:	490e      	ldr	r1, [pc, #56]	@ (8015460 <tcp_seg_copy+0x50>)
 8015426:	480f      	ldr	r0, [pc, #60]	@ (8015464 <tcp_seg_copy+0x54>)
 8015428:	f008 fc54 	bl	801dcd4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801542c:	2003      	movs	r0, #3
 801542e:	f7fd fe2b 	bl	8013088 <memp_malloc>
 8015432:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d101      	bne.n	801543e <tcp_seg_copy+0x2e>
    return NULL;
 801543a:	2300      	movs	r3, #0
 801543c:	e00a      	b.n	8015454 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801543e:	2210      	movs	r2, #16
 8015440:	6879      	ldr	r1, [r7, #4]
 8015442:	68f8      	ldr	r0, [r7, #12]
 8015444:	f008 fd7f 	bl	801df46 <memcpy>
  pbuf_ref(cseg->p);
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	685b      	ldr	r3, [r3, #4]
 801544c:	4618      	mov	r0, r3
 801544e:	f7fe fddb 	bl	8014008 <pbuf_ref>
  return cseg;
 8015452:	68fb      	ldr	r3, [r7, #12]
}
 8015454:	4618      	mov	r0, r3
 8015456:	3710      	adds	r7, #16
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}
 801545c:	0801f954 	.word	0x0801f954
 8015460:	0801fea8 	.word	0x0801fea8
 8015464:	0801f998 	.word	0x0801f998

08015468 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
 801546e:	60f8      	str	r0, [r7, #12]
 8015470:	60b9      	str	r1, [r7, #8]
 8015472:	607a      	str	r2, [r7, #4]
 8015474:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d109      	bne.n	8015490 <tcp_recv_null+0x28>
 801547c:	4b12      	ldr	r3, [pc, #72]	@ (80154c8 <tcp_recv_null+0x60>)
 801547e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015482:	4912      	ldr	r1, [pc, #72]	@ (80154cc <tcp_recv_null+0x64>)
 8015484:	4812      	ldr	r0, [pc, #72]	@ (80154d0 <tcp_recv_null+0x68>)
 8015486:	f008 fc25 	bl	801dcd4 <iprintf>
 801548a:	f06f 030f 	mvn.w	r3, #15
 801548e:	e016      	b.n	80154be <tcp_recv_null+0x56>

  if (p != NULL) {
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d009      	beq.n	80154aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	891b      	ldrh	r3, [r3, #8]
 801549a:	4619      	mov	r1, r3
 801549c:	68b8      	ldr	r0, [r7, #8]
 801549e:	f7ff fb17 	bl	8014ad0 <tcp_recved>
    pbuf_free(p);
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f7fe fd0a 	bl	8013ebc <pbuf_free>
 80154a8:	e008      	b.n	80154bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80154aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d104      	bne.n	80154bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80154b2:	68b8      	ldr	r0, [r7, #8]
 80154b4:	f7ff f9bc 	bl	8014830 <tcp_close>
 80154b8:	4603      	mov	r3, r0
 80154ba:	e000      	b.n	80154be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80154bc:	2300      	movs	r3, #0
}
 80154be:	4618      	mov	r0, r3
 80154c0:	3710      	adds	r7, #16
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	bf00      	nop
 80154c8:	0801f954 	.word	0x0801f954
 80154cc:	0801fec4 	.word	0x0801fec4
 80154d0:	0801f998 	.word	0x0801f998

080154d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b086      	sub	sp, #24
 80154d8:	af00      	add	r7, sp, #0
 80154da:	4603      	mov	r3, r0
 80154dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80154de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	db01      	blt.n	80154ea <tcp_kill_prio+0x16>
 80154e6:	79fb      	ldrb	r3, [r7, #7]
 80154e8:	e000      	b.n	80154ec <tcp_kill_prio+0x18>
 80154ea:	237f      	movs	r3, #127	@ 0x7f
 80154ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80154ee:	7afb      	ldrb	r3, [r7, #11]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d034      	beq.n	801555e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80154f4:	7afb      	ldrb	r3, [r7, #11]
 80154f6:	3b01      	subs	r3, #1
 80154f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80154fa:	2300      	movs	r3, #0
 80154fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80154fe:	2300      	movs	r3, #0
 8015500:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015502:	4b19      	ldr	r3, [pc, #100]	@ (8015568 <tcp_kill_prio+0x94>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	617b      	str	r3, [r7, #20]
 8015508:	e01f      	b.n	801554a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	7d5b      	ldrb	r3, [r3, #21]
 801550e:	7afa      	ldrb	r2, [r7, #11]
 8015510:	429a      	cmp	r2, r3
 8015512:	d80c      	bhi.n	801552e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015518:	7afa      	ldrb	r2, [r7, #11]
 801551a:	429a      	cmp	r2, r3
 801551c:	d112      	bne.n	8015544 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801551e:	4b13      	ldr	r3, [pc, #76]	@ (801556c <tcp_kill_prio+0x98>)
 8015520:	681a      	ldr	r2, [r3, #0]
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	6a1b      	ldr	r3, [r3, #32]
 8015526:	1ad3      	subs	r3, r2, r3
 8015528:	68fa      	ldr	r2, [r7, #12]
 801552a:	429a      	cmp	r2, r3
 801552c:	d80a      	bhi.n	8015544 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801552e:	4b0f      	ldr	r3, [pc, #60]	@ (801556c <tcp_kill_prio+0x98>)
 8015530:	681a      	ldr	r2, [r3, #0]
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	6a1b      	ldr	r3, [r3, #32]
 8015536:	1ad3      	subs	r3, r2, r3
 8015538:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	7d5b      	ldrb	r3, [r3, #21]
 8015542:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	68db      	ldr	r3, [r3, #12]
 8015548:	617b      	str	r3, [r7, #20]
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d1dc      	bne.n	801550a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015550:	693b      	ldr	r3, [r7, #16]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d004      	beq.n	8015560 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015556:	6938      	ldr	r0, [r7, #16]
 8015558:	f7ff fa54 	bl	8014a04 <tcp_abort>
 801555c:	e000      	b.n	8015560 <tcp_kill_prio+0x8c>
    return;
 801555e:	bf00      	nop
  }
}
 8015560:	3718      	adds	r7, #24
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}
 8015566:	bf00      	nop
 8015568:	20027694 	.word	0x20027694
 801556c:	20027688 	.word	0x20027688

08015570 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b086      	sub	sp, #24
 8015574:	af00      	add	r7, sp, #0
 8015576:	4603      	mov	r3, r0
 8015578:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801557a:	79fb      	ldrb	r3, [r7, #7]
 801557c:	2b08      	cmp	r3, #8
 801557e:	d009      	beq.n	8015594 <tcp_kill_state+0x24>
 8015580:	79fb      	ldrb	r3, [r7, #7]
 8015582:	2b09      	cmp	r3, #9
 8015584:	d006      	beq.n	8015594 <tcp_kill_state+0x24>
 8015586:	4b1a      	ldr	r3, [pc, #104]	@ (80155f0 <tcp_kill_state+0x80>)
 8015588:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801558c:	4919      	ldr	r1, [pc, #100]	@ (80155f4 <tcp_kill_state+0x84>)
 801558e:	481a      	ldr	r0, [pc, #104]	@ (80155f8 <tcp_kill_state+0x88>)
 8015590:	f008 fba0 	bl	801dcd4 <iprintf>

  inactivity = 0;
 8015594:	2300      	movs	r3, #0
 8015596:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015598:	2300      	movs	r3, #0
 801559a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801559c:	4b17      	ldr	r3, [pc, #92]	@ (80155fc <tcp_kill_state+0x8c>)
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	617b      	str	r3, [r7, #20]
 80155a2:	e017      	b.n	80155d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	7d1b      	ldrb	r3, [r3, #20]
 80155a8:	79fa      	ldrb	r2, [r7, #7]
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d10f      	bne.n	80155ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80155ae:	4b14      	ldr	r3, [pc, #80]	@ (8015600 <tcp_kill_state+0x90>)
 80155b0:	681a      	ldr	r2, [r3, #0]
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	6a1b      	ldr	r3, [r3, #32]
 80155b6:	1ad3      	subs	r3, r2, r3
 80155b8:	68fa      	ldr	r2, [r7, #12]
 80155ba:	429a      	cmp	r2, r3
 80155bc:	d807      	bhi.n	80155ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80155be:	4b10      	ldr	r3, [pc, #64]	@ (8015600 <tcp_kill_state+0x90>)
 80155c0:	681a      	ldr	r2, [r3, #0]
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	6a1b      	ldr	r3, [r3, #32]
 80155c6:	1ad3      	subs	r3, r2, r3
 80155c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	617b      	str	r3, [r7, #20]
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d1e4      	bne.n	80155a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d003      	beq.n	80155e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80155e0:	2100      	movs	r1, #0
 80155e2:	6938      	ldr	r0, [r7, #16]
 80155e4:	f7ff f950 	bl	8014888 <tcp_abandon>
  }
}
 80155e8:	bf00      	nop
 80155ea:	3718      	adds	r7, #24
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}
 80155f0:	0801f954 	.word	0x0801f954
 80155f4:	0801fee0 	.word	0x0801fee0
 80155f8:	0801f998 	.word	0x0801f998
 80155fc:	20027694 	.word	0x20027694
 8015600:	20027688 	.word	0x20027688

08015604 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b084      	sub	sp, #16
 8015608:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801560a:	2300      	movs	r3, #0
 801560c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801560e:	2300      	movs	r3, #0
 8015610:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015612:	4b12      	ldr	r3, [pc, #72]	@ (801565c <tcp_kill_timewait+0x58>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	60fb      	str	r3, [r7, #12]
 8015618:	e012      	b.n	8015640 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801561a:	4b11      	ldr	r3, [pc, #68]	@ (8015660 <tcp_kill_timewait+0x5c>)
 801561c:	681a      	ldr	r2, [r3, #0]
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	6a1b      	ldr	r3, [r3, #32]
 8015622:	1ad3      	subs	r3, r2, r3
 8015624:	687a      	ldr	r2, [r7, #4]
 8015626:	429a      	cmp	r2, r3
 8015628:	d807      	bhi.n	801563a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801562a:	4b0d      	ldr	r3, [pc, #52]	@ (8015660 <tcp_kill_timewait+0x5c>)
 801562c:	681a      	ldr	r2, [r3, #0]
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	6a1b      	ldr	r3, [r3, #32]
 8015632:	1ad3      	subs	r3, r2, r3
 8015634:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	68db      	ldr	r3, [r3, #12]
 801563e:	60fb      	str	r3, [r7, #12]
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d1e9      	bne.n	801561a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d002      	beq.n	8015652 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801564c:	68b8      	ldr	r0, [r7, #8]
 801564e:	f7ff f9d9 	bl	8014a04 <tcp_abort>
  }
}
 8015652:	bf00      	nop
 8015654:	3710      	adds	r7, #16
 8015656:	46bd      	mov	sp, r7
 8015658:	bd80      	pop	{r7, pc}
 801565a:	bf00      	nop
 801565c:	20027698 	.word	0x20027698
 8015660:	20027688 	.word	0x20027688

08015664 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b082      	sub	sp, #8
 8015668:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801566a:	4b10      	ldr	r3, [pc, #64]	@ (80156ac <tcp_handle_closepend+0x48>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015670:	e014      	b.n	801569c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	68db      	ldr	r3, [r3, #12]
 8015676:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	8b5b      	ldrh	r3, [r3, #26]
 801567c:	f003 0308 	and.w	r3, r3, #8
 8015680:	2b00      	cmp	r3, #0
 8015682:	d009      	beq.n	8015698 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	8b5b      	ldrh	r3, [r3, #26]
 8015688:	f023 0308 	bic.w	r3, r3, #8
 801568c:	b29a      	uxth	r2, r3
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f7ff f862 	bl	801475c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d1e7      	bne.n	8015672 <tcp_handle_closepend+0xe>
  }
}
 80156a2:	bf00      	nop
 80156a4:	bf00      	nop
 80156a6:	3708      	adds	r7, #8
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}
 80156ac:	20027694 	.word	0x20027694

080156b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b084      	sub	sp, #16
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	4603      	mov	r3, r0
 80156b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80156ba:	2001      	movs	r0, #1
 80156bc:	f7fd fce4 	bl	8013088 <memp_malloc>
 80156c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d126      	bne.n	8015716 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80156c8:	f7ff ffcc 	bl	8015664 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80156cc:	f7ff ff9a 	bl	8015604 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80156d0:	2001      	movs	r0, #1
 80156d2:	f7fd fcd9 	bl	8013088 <memp_malloc>
 80156d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d11b      	bne.n	8015716 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80156de:	2009      	movs	r0, #9
 80156e0:	f7ff ff46 	bl	8015570 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80156e4:	2001      	movs	r0, #1
 80156e6:	f7fd fccf 	bl	8013088 <memp_malloc>
 80156ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d111      	bne.n	8015716 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80156f2:	2008      	movs	r0, #8
 80156f4:	f7ff ff3c 	bl	8015570 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80156f8:	2001      	movs	r0, #1
 80156fa:	f7fd fcc5 	bl	8013088 <memp_malloc>
 80156fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d107      	bne.n	8015716 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015706:	79fb      	ldrb	r3, [r7, #7]
 8015708:	4618      	mov	r0, r3
 801570a:	f7ff fee3 	bl	80154d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801570e:	2001      	movs	r0, #1
 8015710:	f7fd fcba 	bl	8013088 <memp_malloc>
 8015714:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d03f      	beq.n	801579c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801571c:	229c      	movs	r2, #156	@ 0x9c
 801571e:	2100      	movs	r1, #0
 8015720:	68f8      	ldr	r0, [r7, #12]
 8015722:	f008 fb3c 	bl	801dd9e <memset>
    pcb->prio = prio;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	79fa      	ldrb	r2, [r7, #7]
 801572a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015732:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801573c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	22ff      	movs	r2, #255	@ 0xff
 801574a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015752:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	2206      	movs	r2, #6
 8015758:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	2206      	movs	r2, #6
 8015760:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015768:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	2201      	movs	r2, #1
 801576e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8015772:	4b0d      	ldr	r3, [pc, #52]	@ (80157a8 <tcp_alloc+0xf8>)
 8015774:	681a      	ldr	r2, [r3, #0]
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801577a:	4b0c      	ldr	r3, [pc, #48]	@ (80157ac <tcp_alloc+0xfc>)
 801577c:	781a      	ldrb	r2, [r3, #0]
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015788:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	4a08      	ldr	r2, [pc, #32]	@ (80157b0 <tcp_alloc+0x100>)
 8015790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	4a07      	ldr	r2, [pc, #28]	@ (80157b4 <tcp_alloc+0x104>)
 8015798:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801579c:	68fb      	ldr	r3, [r7, #12]
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3710      	adds	r7, #16
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	bf00      	nop
 80157a8:	20027688 	.word	0x20027688
 80157ac:	2002769e 	.word	0x2002769e
 80157b0:	08015469 	.word	0x08015469
 80157b4:	006ddd00 	.word	0x006ddd00

080157b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d107      	bne.n	80157d6 <tcp_pcb_purge+0x1e>
 80157c6:	4b21      	ldr	r3, [pc, #132]	@ (801584c <tcp_pcb_purge+0x94>)
 80157c8:	f640 0251 	movw	r2, #2129	@ 0x851
 80157cc:	4920      	ldr	r1, [pc, #128]	@ (8015850 <tcp_pcb_purge+0x98>)
 80157ce:	4821      	ldr	r0, [pc, #132]	@ (8015854 <tcp_pcb_purge+0x9c>)
 80157d0:	f008 fa80 	bl	801dcd4 <iprintf>
 80157d4:	e037      	b.n	8015846 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	7d1b      	ldrb	r3, [r3, #20]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d033      	beq.n	8015846 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80157e2:	2b0a      	cmp	r3, #10
 80157e4:	d02f      	beq.n	8015846 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80157ea:	2b01      	cmp	r3, #1
 80157ec:	d02b      	beq.n	8015846 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d007      	beq.n	8015806 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157fa:	4618      	mov	r0, r3
 80157fc:	f7fe fb5e 	bl	8013ebc <pbuf_free>
      pcb->refused_data = NULL;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	2200      	movs	r2, #0
 8015804:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801580a:	2b00      	cmp	r3, #0
 801580c:	d002      	beq.n	8015814 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f000 f986 	bl	8015b20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801581a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015820:	4618      	mov	r0, r3
 8015822:	f7ff fdc7 	bl	80153b4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801582a:	4618      	mov	r0, r3
 801582c:	f7ff fdc2 	bl	80153b4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2200      	movs	r2, #0
 8015834:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	2200      	movs	r2, #0
 8015842:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015846:	3708      	adds	r7, #8
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}
 801584c:	0801f954 	.word	0x0801f954
 8015850:	0801ffa0 	.word	0x0801ffa0
 8015854:	0801f998 	.word	0x0801f998

08015858 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b084      	sub	sp, #16
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d106      	bne.n	8015876 <tcp_pcb_remove+0x1e>
 8015868:	4b3e      	ldr	r3, [pc, #248]	@ (8015964 <tcp_pcb_remove+0x10c>)
 801586a:	f640 0283 	movw	r2, #2179	@ 0x883
 801586e:	493e      	ldr	r1, [pc, #248]	@ (8015968 <tcp_pcb_remove+0x110>)
 8015870:	483e      	ldr	r0, [pc, #248]	@ (801596c <tcp_pcb_remove+0x114>)
 8015872:	f008 fa2f 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d106      	bne.n	801588a <tcp_pcb_remove+0x32>
 801587c:	4b39      	ldr	r3, [pc, #228]	@ (8015964 <tcp_pcb_remove+0x10c>)
 801587e:	f640 0284 	movw	r2, #2180	@ 0x884
 8015882:	493b      	ldr	r1, [pc, #236]	@ (8015970 <tcp_pcb_remove+0x118>)
 8015884:	4839      	ldr	r0, [pc, #228]	@ (801596c <tcp_pcb_remove+0x114>)
 8015886:	f008 fa25 	bl	801dcd4 <iprintf>

  TCP_RMV(pcblist, pcb);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	683a      	ldr	r2, [r7, #0]
 8015890:	429a      	cmp	r2, r3
 8015892:	d105      	bne.n	80158a0 <tcp_pcb_remove+0x48>
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	68da      	ldr	r2, [r3, #12]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	601a      	str	r2, [r3, #0]
 801589e:	e013      	b.n	80158c8 <tcp_pcb_remove+0x70>
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	60fb      	str	r3, [r7, #12]
 80158a6:	e00c      	b.n	80158c2 <tcp_pcb_remove+0x6a>
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	68db      	ldr	r3, [r3, #12]
 80158ac:	683a      	ldr	r2, [r7, #0]
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d104      	bne.n	80158bc <tcp_pcb_remove+0x64>
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	68da      	ldr	r2, [r3, #12]
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	60da      	str	r2, [r3, #12]
 80158ba:	e005      	b.n	80158c8 <tcp_pcb_remove+0x70>
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	68db      	ldr	r3, [r3, #12]
 80158c0:	60fb      	str	r3, [r7, #12]
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d1ef      	bne.n	80158a8 <tcp_pcb_remove+0x50>
 80158c8:	683b      	ldr	r3, [r7, #0]
 80158ca:	2200      	movs	r2, #0
 80158cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80158ce:	6838      	ldr	r0, [r7, #0]
 80158d0:	f7ff ff72 	bl	80157b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	7d1b      	ldrb	r3, [r3, #20]
 80158d8:	2b0a      	cmp	r3, #10
 80158da:	d013      	beq.n	8015904 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80158e0:	2b01      	cmp	r3, #1
 80158e2:	d00f      	beq.n	8015904 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80158e4:	683b      	ldr	r3, [r7, #0]
 80158e6:	8b5b      	ldrh	r3, [r3, #26]
 80158e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d009      	beq.n	8015904 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	8b5b      	ldrh	r3, [r3, #26]
 80158f4:	f043 0302 	orr.w	r3, r3, #2
 80158f8:	b29a      	uxth	r2, r3
 80158fa:	683b      	ldr	r3, [r7, #0]
 80158fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80158fe:	6838      	ldr	r0, [r7, #0]
 8015900:	f002 ff68 	bl	80187d4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	7d1b      	ldrb	r3, [r3, #20]
 8015908:	2b01      	cmp	r3, #1
 801590a:	d020      	beq.n	801594e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015910:	2b00      	cmp	r3, #0
 8015912:	d006      	beq.n	8015922 <tcp_pcb_remove+0xca>
 8015914:	4b13      	ldr	r3, [pc, #76]	@ (8015964 <tcp_pcb_remove+0x10c>)
 8015916:	f640 0293 	movw	r2, #2195	@ 0x893
 801591a:	4916      	ldr	r1, [pc, #88]	@ (8015974 <tcp_pcb_remove+0x11c>)
 801591c:	4813      	ldr	r0, [pc, #76]	@ (801596c <tcp_pcb_remove+0x114>)
 801591e:	f008 f9d9 	bl	801dcd4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015926:	2b00      	cmp	r3, #0
 8015928:	d006      	beq.n	8015938 <tcp_pcb_remove+0xe0>
 801592a:	4b0e      	ldr	r3, [pc, #56]	@ (8015964 <tcp_pcb_remove+0x10c>)
 801592c:	f640 0294 	movw	r2, #2196	@ 0x894
 8015930:	4911      	ldr	r1, [pc, #68]	@ (8015978 <tcp_pcb_remove+0x120>)
 8015932:	480e      	ldr	r0, [pc, #56]	@ (801596c <tcp_pcb_remove+0x114>)
 8015934:	f008 f9ce 	bl	801dcd4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801593c:	2b00      	cmp	r3, #0
 801593e:	d006      	beq.n	801594e <tcp_pcb_remove+0xf6>
 8015940:	4b08      	ldr	r3, [pc, #32]	@ (8015964 <tcp_pcb_remove+0x10c>)
 8015942:	f640 0296 	movw	r2, #2198	@ 0x896
 8015946:	490d      	ldr	r1, [pc, #52]	@ (801597c <tcp_pcb_remove+0x124>)
 8015948:	4808      	ldr	r0, [pc, #32]	@ (801596c <tcp_pcb_remove+0x114>)
 801594a:	f008 f9c3 	bl	801dcd4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	2200      	movs	r2, #0
 8015952:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015954:	683b      	ldr	r3, [r7, #0]
 8015956:	2200      	movs	r2, #0
 8015958:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801595a:	bf00      	nop
 801595c:	3710      	adds	r7, #16
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}
 8015962:	bf00      	nop
 8015964:	0801f954 	.word	0x0801f954
 8015968:	0801ffbc 	.word	0x0801ffbc
 801596c:	0801f998 	.word	0x0801f998
 8015970:	0801ffd8 	.word	0x0801ffd8
 8015974:	0801fff8 	.word	0x0801fff8
 8015978:	08020010 	.word	0x08020010
 801597c:	0802002c 	.word	0x0802002c

08015980 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d106      	bne.n	801599c <tcp_next_iss+0x1c>
 801598e:	4b0a      	ldr	r3, [pc, #40]	@ (80159b8 <tcp_next_iss+0x38>)
 8015990:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015994:	4909      	ldr	r1, [pc, #36]	@ (80159bc <tcp_next_iss+0x3c>)
 8015996:	480a      	ldr	r0, [pc, #40]	@ (80159c0 <tcp_next_iss+0x40>)
 8015998:	f008 f99c 	bl	801dcd4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801599c:	4b09      	ldr	r3, [pc, #36]	@ (80159c4 <tcp_next_iss+0x44>)
 801599e:	681a      	ldr	r2, [r3, #0]
 80159a0:	4b09      	ldr	r3, [pc, #36]	@ (80159c8 <tcp_next_iss+0x48>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	4413      	add	r3, r2
 80159a6:	4a07      	ldr	r2, [pc, #28]	@ (80159c4 <tcp_next_iss+0x44>)
 80159a8:	6013      	str	r3, [r2, #0]
  return iss;
 80159aa:	4b06      	ldr	r3, [pc, #24]	@ (80159c4 <tcp_next_iss+0x44>)
 80159ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3708      	adds	r7, #8
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}
 80159b6:	bf00      	nop
 80159b8:	0801f954 	.word	0x0801f954
 80159bc:	08020044 	.word	0x08020044
 80159c0:	0801f998 	.word	0x0801f998
 80159c4:	20000028 	.word	0x20000028
 80159c8:	20027688 	.word	0x20027688

080159cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b086      	sub	sp, #24
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	4603      	mov	r3, r0
 80159d4:	60b9      	str	r1, [r7, #8]
 80159d6:	607a      	str	r2, [r7, #4]
 80159d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d106      	bne.n	80159ee <tcp_eff_send_mss_netif+0x22>
 80159e0:	4b14      	ldr	r3, [pc, #80]	@ (8015a34 <tcp_eff_send_mss_netif+0x68>)
 80159e2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80159e6:	4914      	ldr	r1, [pc, #80]	@ (8015a38 <tcp_eff_send_mss_netif+0x6c>)
 80159e8:	4814      	ldr	r0, [pc, #80]	@ (8015a3c <tcp_eff_send_mss_netif+0x70>)
 80159ea:	f008 f973 	bl	801dcd4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d101      	bne.n	80159f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80159f4:	89fb      	ldrh	r3, [r7, #14]
 80159f6:	e019      	b.n	8015a2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80159fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80159fe:	8afb      	ldrh	r3, [r7, #22]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d012      	beq.n	8015a2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015a04:	2328      	movs	r3, #40	@ 0x28
 8015a06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015a08:	8afa      	ldrh	r2, [r7, #22]
 8015a0a:	8abb      	ldrh	r3, [r7, #20]
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d904      	bls.n	8015a1a <tcp_eff_send_mss_netif+0x4e>
 8015a10:	8afa      	ldrh	r2, [r7, #22]
 8015a12:	8abb      	ldrh	r3, [r7, #20]
 8015a14:	1ad3      	subs	r3, r2, r3
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	e000      	b.n	8015a1c <tcp_eff_send_mss_netif+0x50>
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8015a1e:	8a7a      	ldrh	r2, [r7, #18]
 8015a20:	89fb      	ldrh	r3, [r7, #14]
 8015a22:	4293      	cmp	r3, r2
 8015a24:	bf28      	it	cs
 8015a26:	4613      	movcs	r3, r2
 8015a28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8015a2a:	89fb      	ldrh	r3, [r7, #14]
}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	3718      	adds	r7, #24
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	0801f954 	.word	0x0801f954
 8015a38:	08020060 	.word	0x08020060
 8015a3c:	0801f998 	.word	0x0801f998

08015a40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b084      	sub	sp, #16
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d119      	bne.n	8015a88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015a54:	4b10      	ldr	r3, [pc, #64]	@ (8015a98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015a56:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8015a5a:	4910      	ldr	r1, [pc, #64]	@ (8015a9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8015a5c:	4810      	ldr	r0, [pc, #64]	@ (8015aa0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8015a5e:	f008 f939 	bl	801dcd4 <iprintf>

  while (pcb != NULL) {
 8015a62:	e011      	b.n	8015a88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	681a      	ldr	r2, [r3, #0]
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d108      	bne.n	8015a82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	68db      	ldr	r3, [r3, #12]
 8015a74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015a76:	68f8      	ldr	r0, [r7, #12]
 8015a78:	f7fe ffc4 	bl	8014a04 <tcp_abort>
      pcb = next;
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	60fb      	str	r3, [r7, #12]
 8015a80:	e002      	b.n	8015a88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	68db      	ldr	r3, [r3, #12]
 8015a86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d1ea      	bne.n	8015a64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8015a8e:	bf00      	nop
 8015a90:	bf00      	nop
 8015a92:	3710      	adds	r7, #16
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}
 8015a98:	0801f954 	.word	0x0801f954
 8015a9c:	08020088 	.word	0x08020088
 8015aa0:	0801f998 	.word	0x0801f998

08015aa4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
 8015aac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d02a      	beq.n	8015b0a <tcp_netif_ip_addr_changed+0x66>
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d026      	beq.n	8015b0a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015abc:	4b15      	ldr	r3, [pc, #84]	@ (8015b14 <tcp_netif_ip_addr_changed+0x70>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	6878      	ldr	r0, [r7, #4]
 8015ac4:	f7ff ffbc 	bl	8015a40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8015ac8:	4b13      	ldr	r3, [pc, #76]	@ (8015b18 <tcp_netif_ip_addr_changed+0x74>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	4619      	mov	r1, r3
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f7ff ffb6 	bl	8015a40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d017      	beq.n	8015b0a <tcp_netif_ip_addr_changed+0x66>
 8015ada:	683b      	ldr	r3, [r7, #0]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d013      	beq.n	8015b0a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8015b1c <tcp_netif_ip_addr_changed+0x78>)
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	60fb      	str	r3, [r7, #12]
 8015ae8:	e00c      	b.n	8015b04 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	681a      	ldr	r2, [r3, #0]
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d103      	bne.n	8015afe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	681a      	ldr	r2, [r3, #0]
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	68db      	ldr	r3, [r3, #12]
 8015b02:	60fb      	str	r3, [r7, #12]
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d1ef      	bne.n	8015aea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8015b0a:	bf00      	nop
 8015b0c:	3710      	adds	r7, #16
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}
 8015b12:	bf00      	nop
 8015b14:	20027694 	.word	0x20027694
 8015b18:	2002768c 	.word	0x2002768c
 8015b1c:	20027690 	.word	0x20027690

08015b20 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b082      	sub	sp, #8
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d007      	beq.n	8015b40 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b34:	4618      	mov	r0, r3
 8015b36:	f7ff fc3d 	bl	80153b4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015b40:	bf00      	nop
 8015b42:	3708      	adds	r7, #8
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}

08015b48 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015b48:	b590      	push	{r4, r7, lr}
 8015b4a:	b08d      	sub	sp, #52	@ 0x34
 8015b4c:	af04      	add	r7, sp, #16
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d105      	bne.n	8015b64 <tcp_input+0x1c>
 8015b58:	4b9b      	ldr	r3, [pc, #620]	@ (8015dc8 <tcp_input+0x280>)
 8015b5a:	2283      	movs	r2, #131	@ 0x83
 8015b5c:	499b      	ldr	r1, [pc, #620]	@ (8015dcc <tcp_input+0x284>)
 8015b5e:	489c      	ldr	r0, [pc, #624]	@ (8015dd0 <tcp_input+0x288>)
 8015b60:	f008 f8b8 	bl	801dcd4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	685b      	ldr	r3, [r3, #4]
 8015b68:	4a9a      	ldr	r2, [pc, #616]	@ (8015dd4 <tcp_input+0x28c>)
 8015b6a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	895b      	ldrh	r3, [r3, #10]
 8015b70:	2b13      	cmp	r3, #19
 8015b72:	f240 83d1 	bls.w	8016318 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015b76:	4b98      	ldr	r3, [pc, #608]	@ (8015dd8 <tcp_input+0x290>)
 8015b78:	695b      	ldr	r3, [r3, #20]
 8015b7a:	4a97      	ldr	r2, [pc, #604]	@ (8015dd8 <tcp_input+0x290>)
 8015b7c:	6812      	ldr	r2, [r2, #0]
 8015b7e:	4611      	mov	r1, r2
 8015b80:	4618      	mov	r0, r3
 8015b82:	f005 feef 	bl	801b964 <ip4_addr_isbroadcast_u32>
 8015b86:	4603      	mov	r3, r0
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	f040 83c7 	bne.w	801631c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8015b8e:	4b92      	ldr	r3, [pc, #584]	@ (8015dd8 <tcp_input+0x290>)
 8015b90:	695b      	ldr	r3, [r3, #20]
 8015b92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015b96:	2be0      	cmp	r3, #224	@ 0xe0
 8015b98:	f000 83c0 	beq.w	801631c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015b9c:	4b8d      	ldr	r3, [pc, #564]	@ (8015dd4 <tcp_input+0x28c>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	899b      	ldrh	r3, [r3, #12]
 8015ba2:	b29b      	uxth	r3, r3
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7fc fd9b 	bl	80126e0 <lwip_htons>
 8015baa:	4603      	mov	r3, r0
 8015bac:	0b1b      	lsrs	r3, r3, #12
 8015bae:	b29b      	uxth	r3, r3
 8015bb0:	b2db      	uxtb	r3, r3
 8015bb2:	009b      	lsls	r3, r3, #2
 8015bb4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015bb6:	7cbb      	ldrb	r3, [r7, #18]
 8015bb8:	2b13      	cmp	r3, #19
 8015bba:	f240 83b1 	bls.w	8016320 <tcp_input+0x7d8>
 8015bbe:	7cbb      	ldrb	r3, [r7, #18]
 8015bc0:	b29a      	uxth	r2, r3
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	891b      	ldrh	r3, [r3, #8]
 8015bc6:	429a      	cmp	r2, r3
 8015bc8:	f200 83aa 	bhi.w	8016320 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015bcc:	7cbb      	ldrb	r3, [r7, #18]
 8015bce:	b29b      	uxth	r3, r3
 8015bd0:	3b14      	subs	r3, #20
 8015bd2:	b29a      	uxth	r2, r3
 8015bd4:	4b81      	ldr	r3, [pc, #516]	@ (8015ddc <tcp_input+0x294>)
 8015bd6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015bd8:	4b81      	ldr	r3, [pc, #516]	@ (8015de0 <tcp_input+0x298>)
 8015bda:	2200      	movs	r2, #0
 8015bdc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	895a      	ldrh	r2, [r3, #10]
 8015be2:	7cbb      	ldrb	r3, [r7, #18]
 8015be4:	b29b      	uxth	r3, r3
 8015be6:	429a      	cmp	r2, r3
 8015be8:	d309      	bcc.n	8015bfe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8015bea:	4b7c      	ldr	r3, [pc, #496]	@ (8015ddc <tcp_input+0x294>)
 8015bec:	881a      	ldrh	r2, [r3, #0]
 8015bee:	4b7d      	ldr	r3, [pc, #500]	@ (8015de4 <tcp_input+0x29c>)
 8015bf0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8015bf2:	7cbb      	ldrb	r3, [r7, #18]
 8015bf4:	4619      	mov	r1, r3
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f7fe f8da 	bl	8013db0 <pbuf_remove_header>
 8015bfc:	e04e      	b.n	8015c9c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d105      	bne.n	8015c12 <tcp_input+0xca>
 8015c06:	4b70      	ldr	r3, [pc, #448]	@ (8015dc8 <tcp_input+0x280>)
 8015c08:	22c2      	movs	r2, #194	@ 0xc2
 8015c0a:	4977      	ldr	r1, [pc, #476]	@ (8015de8 <tcp_input+0x2a0>)
 8015c0c:	4870      	ldr	r0, [pc, #448]	@ (8015dd0 <tcp_input+0x288>)
 8015c0e:	f008 f861 	bl	801dcd4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8015c12:	2114      	movs	r1, #20
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f7fe f8cb 	bl	8013db0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	895a      	ldrh	r2, [r3, #10]
 8015c1e:	4b71      	ldr	r3, [pc, #452]	@ (8015de4 <tcp_input+0x29c>)
 8015c20:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015c22:	4b6e      	ldr	r3, [pc, #440]	@ (8015ddc <tcp_input+0x294>)
 8015c24:	881a      	ldrh	r2, [r3, #0]
 8015c26:	4b6f      	ldr	r3, [pc, #444]	@ (8015de4 <tcp_input+0x29c>)
 8015c28:	881b      	ldrh	r3, [r3, #0]
 8015c2a:	1ad3      	subs	r3, r2, r3
 8015c2c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8015c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8015de4 <tcp_input+0x29c>)
 8015c30:	881b      	ldrh	r3, [r3, #0]
 8015c32:	4619      	mov	r1, r3
 8015c34:	6878      	ldr	r0, [r7, #4]
 8015c36:	f7fe f8bb 	bl	8013db0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	895b      	ldrh	r3, [r3, #10]
 8015c40:	8a3a      	ldrh	r2, [r7, #16]
 8015c42:	429a      	cmp	r2, r3
 8015c44:	f200 836e 	bhi.w	8016324 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	685b      	ldr	r3, [r3, #4]
 8015c4e:	4a64      	ldr	r2, [pc, #400]	@ (8015de0 <tcp_input+0x298>)
 8015c50:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	8a3a      	ldrh	r2, [r7, #16]
 8015c58:	4611      	mov	r1, r2
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f7fe f8a8 	bl	8013db0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	891a      	ldrh	r2, [r3, #8]
 8015c64:	8a3b      	ldrh	r3, [r7, #16]
 8015c66:	1ad3      	subs	r3, r2, r3
 8015c68:	b29a      	uxth	r2, r3
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	895b      	ldrh	r3, [r3, #10]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d005      	beq.n	8015c82 <tcp_input+0x13a>
 8015c76:	4b54      	ldr	r3, [pc, #336]	@ (8015dc8 <tcp_input+0x280>)
 8015c78:	22df      	movs	r2, #223	@ 0xdf
 8015c7a:	495c      	ldr	r1, [pc, #368]	@ (8015dec <tcp_input+0x2a4>)
 8015c7c:	4854      	ldr	r0, [pc, #336]	@ (8015dd0 <tcp_input+0x288>)
 8015c7e:	f008 f829 	bl	801dcd4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	891a      	ldrh	r2, [r3, #8]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	891b      	ldrh	r3, [r3, #8]
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	d005      	beq.n	8015c9c <tcp_input+0x154>
 8015c90:	4b4d      	ldr	r3, [pc, #308]	@ (8015dc8 <tcp_input+0x280>)
 8015c92:	22e0      	movs	r2, #224	@ 0xe0
 8015c94:	4956      	ldr	r1, [pc, #344]	@ (8015df0 <tcp_input+0x2a8>)
 8015c96:	484e      	ldr	r0, [pc, #312]	@ (8015dd0 <tcp_input+0x288>)
 8015c98:	f008 f81c 	bl	801dcd4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8015dd4 <tcp_input+0x28c>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	881b      	ldrh	r3, [r3, #0]
 8015ca2:	b29b      	uxth	r3, r3
 8015ca4:	4a4b      	ldr	r2, [pc, #300]	@ (8015dd4 <tcp_input+0x28c>)
 8015ca6:	6814      	ldr	r4, [r2, #0]
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f7fc fd19 	bl	80126e0 <lwip_htons>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8015cb2:	4b48      	ldr	r3, [pc, #288]	@ (8015dd4 <tcp_input+0x28c>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	885b      	ldrh	r3, [r3, #2]
 8015cb8:	b29b      	uxth	r3, r3
 8015cba:	4a46      	ldr	r2, [pc, #280]	@ (8015dd4 <tcp_input+0x28c>)
 8015cbc:	6814      	ldr	r4, [r2, #0]
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7fc fd0e 	bl	80126e0 <lwip_htons>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015cc8:	4b42      	ldr	r3, [pc, #264]	@ (8015dd4 <tcp_input+0x28c>)
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	685b      	ldr	r3, [r3, #4]
 8015cce:	4a41      	ldr	r2, [pc, #260]	@ (8015dd4 <tcp_input+0x28c>)
 8015cd0:	6814      	ldr	r4, [r2, #0]
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	f7fc fd1a 	bl	801270c <lwip_htonl>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	6063      	str	r3, [r4, #4]
 8015cdc:	6863      	ldr	r3, [r4, #4]
 8015cde:	4a45      	ldr	r2, [pc, #276]	@ (8015df4 <tcp_input+0x2ac>)
 8015ce0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8015ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8015dd4 <tcp_input+0x28c>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	689b      	ldr	r3, [r3, #8]
 8015ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8015dd4 <tcp_input+0x28c>)
 8015cea:	6814      	ldr	r4, [r2, #0]
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7fc fd0d 	bl	801270c <lwip_htonl>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	60a3      	str	r3, [r4, #8]
 8015cf6:	68a3      	ldr	r3, [r4, #8]
 8015cf8:	4a3f      	ldr	r2, [pc, #252]	@ (8015df8 <tcp_input+0x2b0>)
 8015cfa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8015cfc:	4b35      	ldr	r3, [pc, #212]	@ (8015dd4 <tcp_input+0x28c>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	89db      	ldrh	r3, [r3, #14]
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	4a33      	ldr	r2, [pc, #204]	@ (8015dd4 <tcp_input+0x28c>)
 8015d06:	6814      	ldr	r4, [r2, #0]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7fc fce9 	bl	80126e0 <lwip_htons>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015d12:	4b30      	ldr	r3, [pc, #192]	@ (8015dd4 <tcp_input+0x28c>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	899b      	ldrh	r3, [r3, #12]
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7fc fce0 	bl	80126e0 <lwip_htons>
 8015d20:	4603      	mov	r3, r0
 8015d22:	b2db      	uxtb	r3, r3
 8015d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015d28:	b2da      	uxtb	r2, r3
 8015d2a:	4b34      	ldr	r3, [pc, #208]	@ (8015dfc <tcp_input+0x2b4>)
 8015d2c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	891a      	ldrh	r2, [r3, #8]
 8015d32:	4b33      	ldr	r3, [pc, #204]	@ (8015e00 <tcp_input+0x2b8>)
 8015d34:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015d36:	4b31      	ldr	r3, [pc, #196]	@ (8015dfc <tcp_input+0x2b4>)
 8015d38:	781b      	ldrb	r3, [r3, #0]
 8015d3a:	f003 0303 	and.w	r3, r3, #3
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d00c      	beq.n	8015d5c <tcp_input+0x214>
    tcplen++;
 8015d42:	4b2f      	ldr	r3, [pc, #188]	@ (8015e00 <tcp_input+0x2b8>)
 8015d44:	881b      	ldrh	r3, [r3, #0]
 8015d46:	3301      	adds	r3, #1
 8015d48:	b29a      	uxth	r2, r3
 8015d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8015e00 <tcp_input+0x2b8>)
 8015d4c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	891a      	ldrh	r2, [r3, #8]
 8015d52:	4b2b      	ldr	r3, [pc, #172]	@ (8015e00 <tcp_input+0x2b8>)
 8015d54:	881b      	ldrh	r3, [r3, #0]
 8015d56:	429a      	cmp	r2, r3
 8015d58:	f200 82e6 	bhi.w	8016328 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d60:	4b28      	ldr	r3, [pc, #160]	@ (8015e04 <tcp_input+0x2bc>)
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	61fb      	str	r3, [r7, #28]
 8015d66:	e09d      	b.n	8015ea4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015d68:	69fb      	ldr	r3, [r7, #28]
 8015d6a:	7d1b      	ldrb	r3, [r3, #20]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d105      	bne.n	8015d7c <tcp_input+0x234>
 8015d70:	4b15      	ldr	r3, [pc, #84]	@ (8015dc8 <tcp_input+0x280>)
 8015d72:	22fb      	movs	r2, #251	@ 0xfb
 8015d74:	4924      	ldr	r1, [pc, #144]	@ (8015e08 <tcp_input+0x2c0>)
 8015d76:	4816      	ldr	r0, [pc, #88]	@ (8015dd0 <tcp_input+0x288>)
 8015d78:	f007 ffac 	bl	801dcd4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015d7c:	69fb      	ldr	r3, [r7, #28]
 8015d7e:	7d1b      	ldrb	r3, [r3, #20]
 8015d80:	2b0a      	cmp	r3, #10
 8015d82:	d105      	bne.n	8015d90 <tcp_input+0x248>
 8015d84:	4b10      	ldr	r3, [pc, #64]	@ (8015dc8 <tcp_input+0x280>)
 8015d86:	22fc      	movs	r2, #252	@ 0xfc
 8015d88:	4920      	ldr	r1, [pc, #128]	@ (8015e0c <tcp_input+0x2c4>)
 8015d8a:	4811      	ldr	r0, [pc, #68]	@ (8015dd0 <tcp_input+0x288>)
 8015d8c:	f007 ffa2 	bl	801dcd4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015d90:	69fb      	ldr	r3, [r7, #28]
 8015d92:	7d1b      	ldrb	r3, [r3, #20]
 8015d94:	2b01      	cmp	r3, #1
 8015d96:	d105      	bne.n	8015da4 <tcp_input+0x25c>
 8015d98:	4b0b      	ldr	r3, [pc, #44]	@ (8015dc8 <tcp_input+0x280>)
 8015d9a:	22fd      	movs	r2, #253	@ 0xfd
 8015d9c:	491c      	ldr	r1, [pc, #112]	@ (8015e10 <tcp_input+0x2c8>)
 8015d9e:	480c      	ldr	r0, [pc, #48]	@ (8015dd0 <tcp_input+0x288>)
 8015da0:	f007 ff98 	bl	801dcd4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015da4:	69fb      	ldr	r3, [r7, #28]
 8015da6:	7a1b      	ldrb	r3, [r3, #8]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d033      	beq.n	8015e14 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015dac:	69fb      	ldr	r3, [r7, #28]
 8015dae:	7a1a      	ldrb	r2, [r3, #8]
 8015db0:	4b09      	ldr	r3, [pc, #36]	@ (8015dd8 <tcp_input+0x290>)
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015db8:	3301      	adds	r3, #1
 8015dba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	d029      	beq.n	8015e14 <tcp_input+0x2cc>
      prev = pcb;
 8015dc0:	69fb      	ldr	r3, [r7, #28]
 8015dc2:	61bb      	str	r3, [r7, #24]
      continue;
 8015dc4:	e06b      	b.n	8015e9e <tcp_input+0x356>
 8015dc6:	bf00      	nop
 8015dc8:	080200bc 	.word	0x080200bc
 8015dcc:	080200f0 	.word	0x080200f0
 8015dd0:	08020108 	.word	0x08020108
 8015dd4:	200276b0 	.word	0x200276b0
 8015dd8:	20024588 	.word	0x20024588
 8015ddc:	200276b4 	.word	0x200276b4
 8015de0:	200276b8 	.word	0x200276b8
 8015de4:	200276b6 	.word	0x200276b6
 8015de8:	08020130 	.word	0x08020130
 8015dec:	08020140 	.word	0x08020140
 8015df0:	0802014c 	.word	0x0802014c
 8015df4:	200276c0 	.word	0x200276c0
 8015df8:	200276c4 	.word	0x200276c4
 8015dfc:	200276cc 	.word	0x200276cc
 8015e00:	200276ca 	.word	0x200276ca
 8015e04:	20027694 	.word	0x20027694
 8015e08:	0802016c 	.word	0x0802016c
 8015e0c:	08020194 	.word	0x08020194
 8015e10:	080201c0 	.word	0x080201c0
    }

    if (pcb->remote_port == tcphdr->src &&
 8015e14:	69fb      	ldr	r3, [r7, #28]
 8015e16:	8b1a      	ldrh	r2, [r3, #24]
 8015e18:	4b72      	ldr	r3, [pc, #456]	@ (8015fe4 <tcp_input+0x49c>)
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	881b      	ldrh	r3, [r3, #0]
 8015e1e:	b29b      	uxth	r3, r3
 8015e20:	429a      	cmp	r2, r3
 8015e22:	d13a      	bne.n	8015e9a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	8ada      	ldrh	r2, [r3, #22]
 8015e28:	4b6e      	ldr	r3, [pc, #440]	@ (8015fe4 <tcp_input+0x49c>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	885b      	ldrh	r3, [r3, #2]
 8015e2e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d132      	bne.n	8015e9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015e34:	69fb      	ldr	r3, [r7, #28]
 8015e36:	685a      	ldr	r2, [r3, #4]
 8015e38:	4b6b      	ldr	r3, [pc, #428]	@ (8015fe8 <tcp_input+0x4a0>)
 8015e3a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8015e3c:	429a      	cmp	r2, r3
 8015e3e:	d12c      	bne.n	8015e9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015e40:	69fb      	ldr	r3, [r7, #28]
 8015e42:	681a      	ldr	r2, [r3, #0]
 8015e44:	4b68      	ldr	r3, [pc, #416]	@ (8015fe8 <tcp_input+0x4a0>)
 8015e46:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015e48:	429a      	cmp	r2, r3
 8015e4a:	d126      	bne.n	8015e9a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8015e4c:	69fb      	ldr	r3, [r7, #28]
 8015e4e:	68db      	ldr	r3, [r3, #12]
 8015e50:	69fa      	ldr	r2, [r7, #28]
 8015e52:	429a      	cmp	r2, r3
 8015e54:	d106      	bne.n	8015e64 <tcp_input+0x31c>
 8015e56:	4b65      	ldr	r3, [pc, #404]	@ (8015fec <tcp_input+0x4a4>)
 8015e58:	f240 120d 	movw	r2, #269	@ 0x10d
 8015e5c:	4964      	ldr	r1, [pc, #400]	@ (8015ff0 <tcp_input+0x4a8>)
 8015e5e:	4865      	ldr	r0, [pc, #404]	@ (8015ff4 <tcp_input+0x4ac>)
 8015e60:	f007 ff38 	bl	801dcd4 <iprintf>
      if (prev != NULL) {
 8015e64:	69bb      	ldr	r3, [r7, #24]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d00a      	beq.n	8015e80 <tcp_input+0x338>
        prev->next = pcb->next;
 8015e6a:	69fb      	ldr	r3, [r7, #28]
 8015e6c:	68da      	ldr	r2, [r3, #12]
 8015e6e:	69bb      	ldr	r3, [r7, #24]
 8015e70:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015e72:	4b61      	ldr	r3, [pc, #388]	@ (8015ff8 <tcp_input+0x4b0>)
 8015e74:	681a      	ldr	r2, [r3, #0]
 8015e76:	69fb      	ldr	r3, [r7, #28]
 8015e78:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8015e7a:	4a5f      	ldr	r2, [pc, #380]	@ (8015ff8 <tcp_input+0x4b0>)
 8015e7c:	69fb      	ldr	r3, [r7, #28]
 8015e7e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	69fa      	ldr	r2, [r7, #28]
 8015e86:	429a      	cmp	r2, r3
 8015e88:	d111      	bne.n	8015eae <tcp_input+0x366>
 8015e8a:	4b58      	ldr	r3, [pc, #352]	@ (8015fec <tcp_input+0x4a4>)
 8015e8c:	f240 1215 	movw	r2, #277	@ 0x115
 8015e90:	495a      	ldr	r1, [pc, #360]	@ (8015ffc <tcp_input+0x4b4>)
 8015e92:	4858      	ldr	r0, [pc, #352]	@ (8015ff4 <tcp_input+0x4ac>)
 8015e94:	f007 ff1e 	bl	801dcd4 <iprintf>
      break;
 8015e98:	e009      	b.n	8015eae <tcp_input+0x366>
    }
    prev = pcb;
 8015e9a:	69fb      	ldr	r3, [r7, #28]
 8015e9c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	68db      	ldr	r3, [r3, #12]
 8015ea2:	61fb      	str	r3, [r7, #28]
 8015ea4:	69fb      	ldr	r3, [r7, #28]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	f47f af5e 	bne.w	8015d68 <tcp_input+0x220>
 8015eac:	e000      	b.n	8015eb0 <tcp_input+0x368>
      break;
 8015eae:	bf00      	nop
  }

  if (pcb == NULL) {
 8015eb0:	69fb      	ldr	r3, [r7, #28]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	f040 80aa 	bne.w	801600c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015eb8:	4b51      	ldr	r3, [pc, #324]	@ (8016000 <tcp_input+0x4b8>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	61fb      	str	r3, [r7, #28]
 8015ebe:	e03f      	b.n	8015f40 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015ec0:	69fb      	ldr	r3, [r7, #28]
 8015ec2:	7d1b      	ldrb	r3, [r3, #20]
 8015ec4:	2b0a      	cmp	r3, #10
 8015ec6:	d006      	beq.n	8015ed6 <tcp_input+0x38e>
 8015ec8:	4b48      	ldr	r3, [pc, #288]	@ (8015fec <tcp_input+0x4a4>)
 8015eca:	f240 121f 	movw	r2, #287	@ 0x11f
 8015ece:	494d      	ldr	r1, [pc, #308]	@ (8016004 <tcp_input+0x4bc>)
 8015ed0:	4848      	ldr	r0, [pc, #288]	@ (8015ff4 <tcp_input+0x4ac>)
 8015ed2:	f007 feff 	bl	801dcd4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015ed6:	69fb      	ldr	r3, [r7, #28]
 8015ed8:	7a1b      	ldrb	r3, [r3, #8]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d009      	beq.n	8015ef2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015ede:	69fb      	ldr	r3, [r7, #28]
 8015ee0:	7a1a      	ldrb	r2, [r3, #8]
 8015ee2:	4b41      	ldr	r3, [pc, #260]	@ (8015fe8 <tcp_input+0x4a0>)
 8015ee4:	685b      	ldr	r3, [r3, #4]
 8015ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015eea:	3301      	adds	r3, #1
 8015eec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015eee:	429a      	cmp	r2, r3
 8015ef0:	d122      	bne.n	8015f38 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015ef2:	69fb      	ldr	r3, [r7, #28]
 8015ef4:	8b1a      	ldrh	r2, [r3, #24]
 8015ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8015fe4 <tcp_input+0x49c>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	881b      	ldrh	r3, [r3, #0]
 8015efc:	b29b      	uxth	r3, r3
 8015efe:	429a      	cmp	r2, r3
 8015f00:	d11b      	bne.n	8015f3a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015f02:	69fb      	ldr	r3, [r7, #28]
 8015f04:	8ada      	ldrh	r2, [r3, #22]
 8015f06:	4b37      	ldr	r3, [pc, #220]	@ (8015fe4 <tcp_input+0x49c>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	885b      	ldrh	r3, [r3, #2]
 8015f0c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	d113      	bne.n	8015f3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015f12:	69fb      	ldr	r3, [r7, #28]
 8015f14:	685a      	ldr	r2, [r3, #4]
 8015f16:	4b34      	ldr	r3, [pc, #208]	@ (8015fe8 <tcp_input+0x4a0>)
 8015f18:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8015f1a:	429a      	cmp	r2, r3
 8015f1c:	d10d      	bne.n	8015f3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015f1e:	69fb      	ldr	r3, [r7, #28]
 8015f20:	681a      	ldr	r2, [r3, #0]
 8015f22:	4b31      	ldr	r3, [pc, #196]	@ (8015fe8 <tcp_input+0x4a0>)
 8015f24:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d107      	bne.n	8015f3a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8015f2a:	69f8      	ldr	r0, [r7, #28]
 8015f2c:	f000 fb56 	bl	80165dc <tcp_timewait_input>
        }
        pbuf_free(p);
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f7fd ffc3 	bl	8013ebc <pbuf_free>
        return;
 8015f36:	e1fd      	b.n	8016334 <tcp_input+0x7ec>
        continue;
 8015f38:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f3a:	69fb      	ldr	r3, [r7, #28]
 8015f3c:	68db      	ldr	r3, [r3, #12]
 8015f3e:	61fb      	str	r3, [r7, #28]
 8015f40:	69fb      	ldr	r3, [r7, #28]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d1bc      	bne.n	8015ec0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015f46:	2300      	movs	r3, #0
 8015f48:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8016008 <tcp_input+0x4c0>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	617b      	str	r3, [r7, #20]
 8015f50:	e02a      	b.n	8015fa8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	7a1b      	ldrb	r3, [r3, #8]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d00c      	beq.n	8015f74 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	7a1a      	ldrb	r2, [r3, #8]
 8015f5e:	4b22      	ldr	r3, [pc, #136]	@ (8015fe8 <tcp_input+0x4a0>)
 8015f60:	685b      	ldr	r3, [r3, #4]
 8015f62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015f66:	3301      	adds	r3, #1
 8015f68:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	d002      	beq.n	8015f74 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8015f6e:	697b      	ldr	r3, [r7, #20]
 8015f70:	61bb      	str	r3, [r7, #24]
        continue;
 8015f72:	e016      	b.n	8015fa2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	8ada      	ldrh	r2, [r3, #22]
 8015f78:	4b1a      	ldr	r3, [pc, #104]	@ (8015fe4 <tcp_input+0x49c>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	885b      	ldrh	r3, [r3, #2]
 8015f7e:	b29b      	uxth	r3, r3
 8015f80:	429a      	cmp	r2, r3
 8015f82:	d10c      	bne.n	8015f9e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	681a      	ldr	r2, [r3, #0]
 8015f88:	4b17      	ldr	r3, [pc, #92]	@ (8015fe8 <tcp_input+0x4a0>)
 8015f8a:	695b      	ldr	r3, [r3, #20]
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	d00f      	beq.n	8015fb0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015f90:	697b      	ldr	r3, [r7, #20]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d00d      	beq.n	8015fb2 <tcp_input+0x46a>
 8015f96:	697b      	ldr	r3, [r7, #20]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d009      	beq.n	8015fb2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8015f9e:	697b      	ldr	r3, [r7, #20]
 8015fa0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015fa2:	697b      	ldr	r3, [r7, #20]
 8015fa4:	68db      	ldr	r3, [r3, #12]
 8015fa6:	617b      	str	r3, [r7, #20]
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d1d1      	bne.n	8015f52 <tcp_input+0x40a>
 8015fae:	e000      	b.n	8015fb2 <tcp_input+0x46a>
            break;
 8015fb0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d029      	beq.n	801600c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015fb8:	69bb      	ldr	r3, [r7, #24]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d00a      	beq.n	8015fd4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8015fbe:	697b      	ldr	r3, [r7, #20]
 8015fc0:	68da      	ldr	r2, [r3, #12]
 8015fc2:	69bb      	ldr	r3, [r7, #24]
 8015fc4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015fc6:	4b10      	ldr	r3, [pc, #64]	@ (8016008 <tcp_input+0x4c0>)
 8015fc8:	681a      	ldr	r2, [r3, #0]
 8015fca:	697b      	ldr	r3, [r7, #20]
 8015fcc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8015fce:	4a0e      	ldr	r2, [pc, #56]	@ (8016008 <tcp_input+0x4c0>)
 8015fd0:	697b      	ldr	r3, [r7, #20]
 8015fd2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015fd4:	6978      	ldr	r0, [r7, #20]
 8015fd6:	f000 fa03 	bl	80163e0 <tcp_listen_input>
      }
      pbuf_free(p);
 8015fda:	6878      	ldr	r0, [r7, #4]
 8015fdc:	f7fd ff6e 	bl	8013ebc <pbuf_free>
      return;
 8015fe0:	e1a8      	b.n	8016334 <tcp_input+0x7ec>
 8015fe2:	bf00      	nop
 8015fe4:	200276b0 	.word	0x200276b0
 8015fe8:	20024588 	.word	0x20024588
 8015fec:	080200bc 	.word	0x080200bc
 8015ff0:	080201e8 	.word	0x080201e8
 8015ff4:	08020108 	.word	0x08020108
 8015ff8:	20027694 	.word	0x20027694
 8015ffc:	08020214 	.word	0x08020214
 8016000:	20027698 	.word	0x20027698
 8016004:	08020240 	.word	0x08020240
 8016008:	20027690 	.word	0x20027690
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801600c:	69fb      	ldr	r3, [r7, #28]
 801600e:	2b00      	cmp	r3, #0
 8016010:	f000 8158 	beq.w	80162c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016014:	4b95      	ldr	r3, [pc, #596]	@ (801626c <tcp_input+0x724>)
 8016016:	2200      	movs	r2, #0
 8016018:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	891a      	ldrh	r2, [r3, #8]
 801601e:	4b93      	ldr	r3, [pc, #588]	@ (801626c <tcp_input+0x724>)
 8016020:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016022:	4a92      	ldr	r2, [pc, #584]	@ (801626c <tcp_input+0x724>)
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016028:	4b91      	ldr	r3, [pc, #580]	@ (8016270 <tcp_input+0x728>)
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	4a8f      	ldr	r2, [pc, #572]	@ (801626c <tcp_input+0x724>)
 801602e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016030:	4b90      	ldr	r3, [pc, #576]	@ (8016274 <tcp_input+0x72c>)
 8016032:	2200      	movs	r2, #0
 8016034:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016036:	4b90      	ldr	r3, [pc, #576]	@ (8016278 <tcp_input+0x730>)
 8016038:	2200      	movs	r2, #0
 801603a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801603c:	4b8f      	ldr	r3, [pc, #572]	@ (801627c <tcp_input+0x734>)
 801603e:	2200      	movs	r2, #0
 8016040:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016042:	4b8f      	ldr	r3, [pc, #572]	@ (8016280 <tcp_input+0x738>)
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	f003 0308 	and.w	r3, r3, #8
 801604a:	2b00      	cmp	r3, #0
 801604c:	d006      	beq.n	801605c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	7b5b      	ldrb	r3, [r3, #13]
 8016052:	f043 0301 	orr.w	r3, r3, #1
 8016056:	b2da      	uxtb	r2, r3
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801605c:	69fb      	ldr	r3, [r7, #28]
 801605e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016060:	2b00      	cmp	r3, #0
 8016062:	d017      	beq.n	8016094 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016064:	69f8      	ldr	r0, [r7, #28]
 8016066:	f7ff f929 	bl	80152bc <tcp_process_refused_data>
 801606a:	4603      	mov	r3, r0
 801606c:	f113 0f0d 	cmn.w	r3, #13
 8016070:	d007      	beq.n	8016082 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016072:	69fb      	ldr	r3, [r7, #28]
 8016074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016076:	2b00      	cmp	r3, #0
 8016078:	d00c      	beq.n	8016094 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801607a:	4b82      	ldr	r3, [pc, #520]	@ (8016284 <tcp_input+0x73c>)
 801607c:	881b      	ldrh	r3, [r3, #0]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d008      	beq.n	8016094 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016082:	69fb      	ldr	r3, [r7, #28]
 8016084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016086:	2b00      	cmp	r3, #0
 8016088:	f040 80e3 	bne.w	8016252 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801608c:	69f8      	ldr	r0, [r7, #28]
 801608e:	f003 f9a7 	bl	80193e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016092:	e0de      	b.n	8016252 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8016094:	4a7c      	ldr	r2, [pc, #496]	@ (8016288 <tcp_input+0x740>)
 8016096:	69fb      	ldr	r3, [r7, #28]
 8016098:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801609a:	69f8      	ldr	r0, [r7, #28]
 801609c:	f000 fb18 	bl	80166d0 <tcp_process>
 80160a0:	4603      	mov	r3, r0
 80160a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80160a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80160a8:	f113 0f0d 	cmn.w	r3, #13
 80160ac:	f000 80d3 	beq.w	8016256 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80160b0:	4b71      	ldr	r3, [pc, #452]	@ (8016278 <tcp_input+0x730>)
 80160b2:	781b      	ldrb	r3, [r3, #0]
 80160b4:	f003 0308 	and.w	r3, r3, #8
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d015      	beq.n	80160e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80160bc:	69fb      	ldr	r3, [r7, #28]
 80160be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d008      	beq.n	80160d8 <tcp_input+0x590>
 80160c6:	69fb      	ldr	r3, [r7, #28]
 80160c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80160cc:	69fa      	ldr	r2, [r7, #28]
 80160ce:	6912      	ldr	r2, [r2, #16]
 80160d0:	f06f 010d 	mvn.w	r1, #13
 80160d4:	4610      	mov	r0, r2
 80160d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80160d8:	69f9      	ldr	r1, [r7, #28]
 80160da:	486c      	ldr	r0, [pc, #432]	@ (801628c <tcp_input+0x744>)
 80160dc:	f7ff fbbc 	bl	8015858 <tcp_pcb_remove>
        tcp_free(pcb);
 80160e0:	69f8      	ldr	r0, [r7, #28]
 80160e2:	f7fe f9a7 	bl	8014434 <tcp_free>
 80160e6:	e0da      	b.n	801629e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80160e8:	2300      	movs	r3, #0
 80160ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80160ec:	4b63      	ldr	r3, [pc, #396]	@ (801627c <tcp_input+0x734>)
 80160ee:	881b      	ldrh	r3, [r3, #0]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d01d      	beq.n	8016130 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80160f4:	4b61      	ldr	r3, [pc, #388]	@ (801627c <tcp_input+0x734>)
 80160f6:	881b      	ldrh	r3, [r3, #0]
 80160f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80160fa:	69fb      	ldr	r3, [r7, #28]
 80160fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016100:	2b00      	cmp	r3, #0
 8016102:	d00a      	beq.n	801611a <tcp_input+0x5d2>
 8016104:	69fb      	ldr	r3, [r7, #28]
 8016106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801610a:	69fa      	ldr	r2, [r7, #28]
 801610c:	6910      	ldr	r0, [r2, #16]
 801610e:	89fa      	ldrh	r2, [r7, #14]
 8016110:	69f9      	ldr	r1, [r7, #28]
 8016112:	4798      	blx	r3
 8016114:	4603      	mov	r3, r0
 8016116:	74fb      	strb	r3, [r7, #19]
 8016118:	e001      	b.n	801611e <tcp_input+0x5d6>
 801611a:	2300      	movs	r3, #0
 801611c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801611e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016122:	f113 0f0d 	cmn.w	r3, #13
 8016126:	f000 8098 	beq.w	801625a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801612a:	4b54      	ldr	r3, [pc, #336]	@ (801627c <tcp_input+0x734>)
 801612c:	2200      	movs	r2, #0
 801612e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016130:	69f8      	ldr	r0, [r7, #28]
 8016132:	f000 f915 	bl	8016360 <tcp_input_delayed_close>
 8016136:	4603      	mov	r3, r0
 8016138:	2b00      	cmp	r3, #0
 801613a:	f040 8090 	bne.w	801625e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801613e:	4b4d      	ldr	r3, [pc, #308]	@ (8016274 <tcp_input+0x72c>)
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d041      	beq.n	80161ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016146:	69fb      	ldr	r3, [r7, #28]
 8016148:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801614a:	2b00      	cmp	r3, #0
 801614c:	d006      	beq.n	801615c <tcp_input+0x614>
 801614e:	4b50      	ldr	r3, [pc, #320]	@ (8016290 <tcp_input+0x748>)
 8016150:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016154:	494f      	ldr	r1, [pc, #316]	@ (8016294 <tcp_input+0x74c>)
 8016156:	4850      	ldr	r0, [pc, #320]	@ (8016298 <tcp_input+0x750>)
 8016158:	f007 fdbc 	bl	801dcd4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801615c:	69fb      	ldr	r3, [r7, #28]
 801615e:	8b5b      	ldrh	r3, [r3, #26]
 8016160:	f003 0310 	and.w	r3, r3, #16
 8016164:	2b00      	cmp	r3, #0
 8016166:	d008      	beq.n	801617a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016168:	4b42      	ldr	r3, [pc, #264]	@ (8016274 <tcp_input+0x72c>)
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	4618      	mov	r0, r3
 801616e:	f7fd fea5 	bl	8013ebc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016172:	69f8      	ldr	r0, [r7, #28]
 8016174:	f7fe fc46 	bl	8014a04 <tcp_abort>
            goto aborted;
 8016178:	e091      	b.n	801629e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801617a:	69fb      	ldr	r3, [r7, #28]
 801617c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016180:	2b00      	cmp	r3, #0
 8016182:	d00c      	beq.n	801619e <tcp_input+0x656>
 8016184:	69fb      	ldr	r3, [r7, #28]
 8016186:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801618a:	69fb      	ldr	r3, [r7, #28]
 801618c:	6918      	ldr	r0, [r3, #16]
 801618e:	4b39      	ldr	r3, [pc, #228]	@ (8016274 <tcp_input+0x72c>)
 8016190:	681a      	ldr	r2, [r3, #0]
 8016192:	2300      	movs	r3, #0
 8016194:	69f9      	ldr	r1, [r7, #28]
 8016196:	47a0      	blx	r4
 8016198:	4603      	mov	r3, r0
 801619a:	74fb      	strb	r3, [r7, #19]
 801619c:	e008      	b.n	80161b0 <tcp_input+0x668>
 801619e:	4b35      	ldr	r3, [pc, #212]	@ (8016274 <tcp_input+0x72c>)
 80161a0:	681a      	ldr	r2, [r3, #0]
 80161a2:	2300      	movs	r3, #0
 80161a4:	69f9      	ldr	r1, [r7, #28]
 80161a6:	2000      	movs	r0, #0
 80161a8:	f7ff f95e 	bl	8015468 <tcp_recv_null>
 80161ac:	4603      	mov	r3, r0
 80161ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80161b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80161b4:	f113 0f0d 	cmn.w	r3, #13
 80161b8:	d053      	beq.n	8016262 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80161ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d003      	beq.n	80161ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80161c2:	4b2c      	ldr	r3, [pc, #176]	@ (8016274 <tcp_input+0x72c>)
 80161c4:	681a      	ldr	r2, [r3, #0]
 80161c6:	69fb      	ldr	r3, [r7, #28]
 80161c8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80161ca:	4b2b      	ldr	r3, [pc, #172]	@ (8016278 <tcp_input+0x730>)
 80161cc:	781b      	ldrb	r3, [r3, #0]
 80161ce:	f003 0320 	and.w	r3, r3, #32
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d030      	beq.n	8016238 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80161d6:	69fb      	ldr	r3, [r7, #28]
 80161d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d009      	beq.n	80161f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80161de:	69fb      	ldr	r3, [r7, #28]
 80161e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80161e2:	7b5a      	ldrb	r2, [r3, #13]
 80161e4:	69fb      	ldr	r3, [r7, #28]
 80161e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80161e8:	f042 0220 	orr.w	r2, r2, #32
 80161ec:	b2d2      	uxtb	r2, r2
 80161ee:	735a      	strb	r2, [r3, #13]
 80161f0:	e022      	b.n	8016238 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80161f2:	69fb      	ldr	r3, [r7, #28]
 80161f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161f6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80161fa:	d005      	beq.n	8016208 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80161fc:	69fb      	ldr	r3, [r7, #28]
 80161fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016200:	3301      	adds	r3, #1
 8016202:	b29a      	uxth	r2, r3
 8016204:	69fb      	ldr	r3, [r7, #28]
 8016206:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016208:	69fb      	ldr	r3, [r7, #28]
 801620a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801620e:	2b00      	cmp	r3, #0
 8016210:	d00b      	beq.n	801622a <tcp_input+0x6e2>
 8016212:	69fb      	ldr	r3, [r7, #28]
 8016214:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016218:	69fb      	ldr	r3, [r7, #28]
 801621a:	6918      	ldr	r0, [r3, #16]
 801621c:	2300      	movs	r3, #0
 801621e:	2200      	movs	r2, #0
 8016220:	69f9      	ldr	r1, [r7, #28]
 8016222:	47a0      	blx	r4
 8016224:	4603      	mov	r3, r0
 8016226:	74fb      	strb	r3, [r7, #19]
 8016228:	e001      	b.n	801622e <tcp_input+0x6e6>
 801622a:	2300      	movs	r3, #0
 801622c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801622e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016232:	f113 0f0d 	cmn.w	r3, #13
 8016236:	d016      	beq.n	8016266 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016238:	4b13      	ldr	r3, [pc, #76]	@ (8016288 <tcp_input+0x740>)
 801623a:	2200      	movs	r2, #0
 801623c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801623e:	69f8      	ldr	r0, [r7, #28]
 8016240:	f000 f88e 	bl	8016360 <tcp_input_delayed_close>
 8016244:	4603      	mov	r3, r0
 8016246:	2b00      	cmp	r3, #0
 8016248:	d128      	bne.n	801629c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801624a:	69f8      	ldr	r0, [r7, #28]
 801624c:	f002 fac2 	bl	80187d4 <tcp_output>
 8016250:	e025      	b.n	801629e <tcp_input+0x756>
        goto aborted;
 8016252:	bf00      	nop
 8016254:	e023      	b.n	801629e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016256:	bf00      	nop
 8016258:	e021      	b.n	801629e <tcp_input+0x756>
              goto aborted;
 801625a:	bf00      	nop
 801625c:	e01f      	b.n	801629e <tcp_input+0x756>
          goto aborted;
 801625e:	bf00      	nop
 8016260:	e01d      	b.n	801629e <tcp_input+0x756>
            goto aborted;
 8016262:	bf00      	nop
 8016264:	e01b      	b.n	801629e <tcp_input+0x756>
              goto aborted;
 8016266:	bf00      	nop
 8016268:	e019      	b.n	801629e <tcp_input+0x756>
 801626a:	bf00      	nop
 801626c:	200276a0 	.word	0x200276a0
 8016270:	200276b0 	.word	0x200276b0
 8016274:	200276d0 	.word	0x200276d0
 8016278:	200276cd 	.word	0x200276cd
 801627c:	200276c8 	.word	0x200276c8
 8016280:	200276cc 	.word	0x200276cc
 8016284:	200276ca 	.word	0x200276ca
 8016288:	200276d4 	.word	0x200276d4
 801628c:	20027694 	.word	0x20027694
 8016290:	080200bc 	.word	0x080200bc
 8016294:	08020270 	.word	0x08020270
 8016298:	08020108 	.word	0x08020108
          goto aborted;
 801629c:	bf00      	nop
    tcp_input_pcb = NULL;
 801629e:	4b27      	ldr	r3, [pc, #156]	@ (801633c <tcp_input+0x7f4>)
 80162a0:	2200      	movs	r2, #0
 80162a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80162a4:	4b26      	ldr	r3, [pc, #152]	@ (8016340 <tcp_input+0x7f8>)
 80162a6:	2200      	movs	r2, #0
 80162a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80162aa:	4b26      	ldr	r3, [pc, #152]	@ (8016344 <tcp_input+0x7fc>)
 80162ac:	685b      	ldr	r3, [r3, #4]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d03f      	beq.n	8016332 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80162b2:	4b24      	ldr	r3, [pc, #144]	@ (8016344 <tcp_input+0x7fc>)
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	4618      	mov	r0, r3
 80162b8:	f7fd fe00 	bl	8013ebc <pbuf_free>
      inseg.p = NULL;
 80162bc:	4b21      	ldr	r3, [pc, #132]	@ (8016344 <tcp_input+0x7fc>)
 80162be:	2200      	movs	r2, #0
 80162c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80162c2:	e036      	b.n	8016332 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80162c4:	4b20      	ldr	r3, [pc, #128]	@ (8016348 <tcp_input+0x800>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	899b      	ldrh	r3, [r3, #12]
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7fc fa07 	bl	80126e0 <lwip_htons>
 80162d2:	4603      	mov	r3, r0
 80162d4:	b2db      	uxtb	r3, r3
 80162d6:	f003 0304 	and.w	r3, r3, #4
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d118      	bne.n	8016310 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80162de:	4b1b      	ldr	r3, [pc, #108]	@ (801634c <tcp_input+0x804>)
 80162e0:	6819      	ldr	r1, [r3, #0]
 80162e2:	4b1b      	ldr	r3, [pc, #108]	@ (8016350 <tcp_input+0x808>)
 80162e4:	881b      	ldrh	r3, [r3, #0]
 80162e6:	461a      	mov	r2, r3
 80162e8:	4b1a      	ldr	r3, [pc, #104]	@ (8016354 <tcp_input+0x80c>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80162ee:	4b16      	ldr	r3, [pc, #88]	@ (8016348 <tcp_input+0x800>)
 80162f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80162f2:	885b      	ldrh	r3, [r3, #2]
 80162f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80162f6:	4a14      	ldr	r2, [pc, #80]	@ (8016348 <tcp_input+0x800>)
 80162f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80162fa:	8812      	ldrh	r2, [r2, #0]
 80162fc:	b292      	uxth	r2, r2
 80162fe:	9202      	str	r2, [sp, #8]
 8016300:	9301      	str	r3, [sp, #4]
 8016302:	4b15      	ldr	r3, [pc, #84]	@ (8016358 <tcp_input+0x810>)
 8016304:	9300      	str	r3, [sp, #0]
 8016306:	4b15      	ldr	r3, [pc, #84]	@ (801635c <tcp_input+0x814>)
 8016308:	4602      	mov	r2, r0
 801630a:	2000      	movs	r0, #0
 801630c:	f003 f816 	bl	801933c <tcp_rst>
    pbuf_free(p);
 8016310:	6878      	ldr	r0, [r7, #4]
 8016312:	f7fd fdd3 	bl	8013ebc <pbuf_free>
  return;
 8016316:	e00c      	b.n	8016332 <tcp_input+0x7ea>
    goto dropped;
 8016318:	bf00      	nop
 801631a:	e006      	b.n	801632a <tcp_input+0x7e2>
    goto dropped;
 801631c:	bf00      	nop
 801631e:	e004      	b.n	801632a <tcp_input+0x7e2>
    goto dropped;
 8016320:	bf00      	nop
 8016322:	e002      	b.n	801632a <tcp_input+0x7e2>
      goto dropped;
 8016324:	bf00      	nop
 8016326:	e000      	b.n	801632a <tcp_input+0x7e2>
      goto dropped;
 8016328:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801632a:	6878      	ldr	r0, [r7, #4]
 801632c:	f7fd fdc6 	bl	8013ebc <pbuf_free>
 8016330:	e000      	b.n	8016334 <tcp_input+0x7ec>
  return;
 8016332:	bf00      	nop
}
 8016334:	3724      	adds	r7, #36	@ 0x24
 8016336:	46bd      	mov	sp, r7
 8016338:	bd90      	pop	{r4, r7, pc}
 801633a:	bf00      	nop
 801633c:	200276d4 	.word	0x200276d4
 8016340:	200276d0 	.word	0x200276d0
 8016344:	200276a0 	.word	0x200276a0
 8016348:	200276b0 	.word	0x200276b0
 801634c:	200276c4 	.word	0x200276c4
 8016350:	200276ca 	.word	0x200276ca
 8016354:	200276c0 	.word	0x200276c0
 8016358:	20024598 	.word	0x20024598
 801635c:	2002459c 	.word	0x2002459c

08016360 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b082      	sub	sp, #8
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d106      	bne.n	801637c <tcp_input_delayed_close+0x1c>
 801636e:	4b17      	ldr	r3, [pc, #92]	@ (80163cc <tcp_input_delayed_close+0x6c>)
 8016370:	f240 225a 	movw	r2, #602	@ 0x25a
 8016374:	4916      	ldr	r1, [pc, #88]	@ (80163d0 <tcp_input_delayed_close+0x70>)
 8016376:	4817      	ldr	r0, [pc, #92]	@ (80163d4 <tcp_input_delayed_close+0x74>)
 8016378:	f007 fcac 	bl	801dcd4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801637c:	4b16      	ldr	r3, [pc, #88]	@ (80163d8 <tcp_input_delayed_close+0x78>)
 801637e:	781b      	ldrb	r3, [r3, #0]
 8016380:	f003 0310 	and.w	r3, r3, #16
 8016384:	2b00      	cmp	r3, #0
 8016386:	d01c      	beq.n	80163c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	8b5b      	ldrh	r3, [r3, #26]
 801638c:	f003 0310 	and.w	r3, r3, #16
 8016390:	2b00      	cmp	r3, #0
 8016392:	d10d      	bne.n	80163b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801639a:	2b00      	cmp	r3, #0
 801639c:	d008      	beq.n	80163b0 <tcp_input_delayed_close+0x50>
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80163a4:	687a      	ldr	r2, [r7, #4]
 80163a6:	6912      	ldr	r2, [r2, #16]
 80163a8:	f06f 010e 	mvn.w	r1, #14
 80163ac:	4610      	mov	r0, r2
 80163ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80163b0:	6879      	ldr	r1, [r7, #4]
 80163b2:	480a      	ldr	r0, [pc, #40]	@ (80163dc <tcp_input_delayed_close+0x7c>)
 80163b4:	f7ff fa50 	bl	8015858 <tcp_pcb_remove>
    tcp_free(pcb);
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f7fe f83b 	bl	8014434 <tcp_free>
    return 1;
 80163be:	2301      	movs	r3, #1
 80163c0:	e000      	b.n	80163c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80163c2:	2300      	movs	r3, #0
}
 80163c4:	4618      	mov	r0, r3
 80163c6:	3708      	adds	r7, #8
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}
 80163cc:	080200bc 	.word	0x080200bc
 80163d0:	0802028c 	.word	0x0802028c
 80163d4:	08020108 	.word	0x08020108
 80163d8:	200276cd 	.word	0x200276cd
 80163dc:	20027694 	.word	0x20027694

080163e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80163e0:	b590      	push	{r4, r7, lr}
 80163e2:	b08b      	sub	sp, #44	@ 0x2c
 80163e4:	af04      	add	r7, sp, #16
 80163e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80163e8:	4b6f      	ldr	r3, [pc, #444]	@ (80165a8 <tcp_listen_input+0x1c8>)
 80163ea:	781b      	ldrb	r3, [r3, #0]
 80163ec:	f003 0304 	and.w	r3, r3, #4
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	f040 80d2 	bne.w	801659a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d106      	bne.n	801640a <tcp_listen_input+0x2a>
 80163fc:	4b6b      	ldr	r3, [pc, #428]	@ (80165ac <tcp_listen_input+0x1cc>)
 80163fe:	f240 2281 	movw	r2, #641	@ 0x281
 8016402:	496b      	ldr	r1, [pc, #428]	@ (80165b0 <tcp_listen_input+0x1d0>)
 8016404:	486b      	ldr	r0, [pc, #428]	@ (80165b4 <tcp_listen_input+0x1d4>)
 8016406:	f007 fc65 	bl	801dcd4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801640a:	4b67      	ldr	r3, [pc, #412]	@ (80165a8 <tcp_listen_input+0x1c8>)
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	f003 0310 	and.w	r3, r3, #16
 8016412:	2b00      	cmp	r3, #0
 8016414:	d019      	beq.n	801644a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016416:	4b68      	ldr	r3, [pc, #416]	@ (80165b8 <tcp_listen_input+0x1d8>)
 8016418:	6819      	ldr	r1, [r3, #0]
 801641a:	4b68      	ldr	r3, [pc, #416]	@ (80165bc <tcp_listen_input+0x1dc>)
 801641c:	881b      	ldrh	r3, [r3, #0]
 801641e:	461a      	mov	r2, r3
 8016420:	4b67      	ldr	r3, [pc, #412]	@ (80165c0 <tcp_listen_input+0x1e0>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016426:	4b67      	ldr	r3, [pc, #412]	@ (80165c4 <tcp_listen_input+0x1e4>)
 8016428:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801642a:	885b      	ldrh	r3, [r3, #2]
 801642c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801642e:	4a65      	ldr	r2, [pc, #404]	@ (80165c4 <tcp_listen_input+0x1e4>)
 8016430:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016432:	8812      	ldrh	r2, [r2, #0]
 8016434:	b292      	uxth	r2, r2
 8016436:	9202      	str	r2, [sp, #8]
 8016438:	9301      	str	r3, [sp, #4]
 801643a:	4b63      	ldr	r3, [pc, #396]	@ (80165c8 <tcp_listen_input+0x1e8>)
 801643c:	9300      	str	r3, [sp, #0]
 801643e:	4b63      	ldr	r3, [pc, #396]	@ (80165cc <tcp_listen_input+0x1ec>)
 8016440:	4602      	mov	r2, r0
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	f002 ff7a 	bl	801933c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016448:	e0a9      	b.n	801659e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801644a:	4b57      	ldr	r3, [pc, #348]	@ (80165a8 <tcp_listen_input+0x1c8>)
 801644c:	781b      	ldrb	r3, [r3, #0]
 801644e:	f003 0302 	and.w	r3, r3, #2
 8016452:	2b00      	cmp	r3, #0
 8016454:	f000 80a3 	beq.w	801659e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	7d5b      	ldrb	r3, [r3, #21]
 801645c:	4618      	mov	r0, r3
 801645e:	f7ff f927 	bl	80156b0 <tcp_alloc>
 8016462:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d111      	bne.n	801648e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	699b      	ldr	r3, [r3, #24]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d00a      	beq.n	8016488 <tcp_listen_input+0xa8>
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	699b      	ldr	r3, [r3, #24]
 8016476:	687a      	ldr	r2, [r7, #4]
 8016478:	6910      	ldr	r0, [r2, #16]
 801647a:	f04f 32ff 	mov.w	r2, #4294967295
 801647e:	2100      	movs	r1, #0
 8016480:	4798      	blx	r3
 8016482:	4603      	mov	r3, r0
 8016484:	73bb      	strb	r3, [r7, #14]
      return;
 8016486:	e08b      	b.n	80165a0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016488:	23f0      	movs	r3, #240	@ 0xf0
 801648a:	73bb      	strb	r3, [r7, #14]
      return;
 801648c:	e088      	b.n	80165a0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801648e:	4b50      	ldr	r3, [pc, #320]	@ (80165d0 <tcp_listen_input+0x1f0>)
 8016490:	695a      	ldr	r2, [r3, #20]
 8016492:	697b      	ldr	r3, [r7, #20]
 8016494:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016496:	4b4e      	ldr	r3, [pc, #312]	@ (80165d0 <tcp_listen_input+0x1f0>)
 8016498:	691a      	ldr	r2, [r3, #16]
 801649a:	697b      	ldr	r3, [r7, #20]
 801649c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	8ada      	ldrh	r2, [r3, #22]
 80164a2:	697b      	ldr	r3, [r7, #20]
 80164a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80164a6:	4b47      	ldr	r3, [pc, #284]	@ (80165c4 <tcp_listen_input+0x1e4>)
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	881b      	ldrh	r3, [r3, #0]
 80164ac:	b29a      	uxth	r2, r3
 80164ae:	697b      	ldr	r3, [r7, #20]
 80164b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80164b2:	697b      	ldr	r3, [r7, #20]
 80164b4:	2203      	movs	r2, #3
 80164b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80164b8:	4b41      	ldr	r3, [pc, #260]	@ (80165c0 <tcp_listen_input+0x1e0>)
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	1c5a      	adds	r2, r3, #1
 80164be:	697b      	ldr	r3, [r7, #20]
 80164c0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80164c2:	697b      	ldr	r3, [r7, #20]
 80164c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80164ca:	6978      	ldr	r0, [r7, #20]
 80164cc:	f7ff fa58 	bl	8015980 <tcp_next_iss>
 80164d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80164d2:	697b      	ldr	r3, [r7, #20]
 80164d4:	693a      	ldr	r2, [r7, #16]
 80164d6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80164d8:	697b      	ldr	r3, [r7, #20]
 80164da:	693a      	ldr	r2, [r7, #16]
 80164dc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80164de:	697b      	ldr	r3, [r7, #20]
 80164e0:	693a      	ldr	r2, [r7, #16]
 80164e2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80164e4:	697b      	ldr	r3, [r7, #20]
 80164e6:	693a      	ldr	r2, [r7, #16]
 80164e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80164ea:	4b35      	ldr	r3, [pc, #212]	@ (80165c0 <tcp_listen_input+0x1e0>)
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	1e5a      	subs	r2, r3, #1
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	691a      	ldr	r2, [r3, #16]
 80164f8:	697b      	ldr	r3, [r7, #20]
 80164fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80164fc:	697b      	ldr	r3, [r7, #20]
 80164fe:	687a      	ldr	r2, [r7, #4]
 8016500:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	7a5b      	ldrb	r3, [r3, #9]
 8016506:	f003 030c 	and.w	r3, r3, #12
 801650a:	b2da      	uxtb	r2, r3
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	7a1a      	ldrb	r2, [r3, #8]
 8016514:	697b      	ldr	r3, [r7, #20]
 8016516:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016518:	4b2e      	ldr	r3, [pc, #184]	@ (80165d4 <tcp_listen_input+0x1f4>)
 801651a:	681a      	ldr	r2, [r3, #0]
 801651c:	697b      	ldr	r3, [r7, #20]
 801651e:	60da      	str	r2, [r3, #12]
 8016520:	4a2c      	ldr	r2, [pc, #176]	@ (80165d4 <tcp_listen_input+0x1f4>)
 8016522:	697b      	ldr	r3, [r7, #20]
 8016524:	6013      	str	r3, [r2, #0]
 8016526:	f003 f8cb 	bl	80196c0 <tcp_timer_needed>
 801652a:	4b2b      	ldr	r3, [pc, #172]	@ (80165d8 <tcp_listen_input+0x1f8>)
 801652c:	2201      	movs	r2, #1
 801652e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016530:	6978      	ldr	r0, [r7, #20]
 8016532:	f001 fd8b 	bl	801804c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016536:	4b23      	ldr	r3, [pc, #140]	@ (80165c4 <tcp_listen_input+0x1e4>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	89db      	ldrh	r3, [r3, #14]
 801653c:	b29a      	uxth	r2, r3
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016544:	697b      	ldr	r3, [r7, #20]
 8016546:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016550:	697b      	ldr	r3, [r7, #20]
 8016552:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016554:	697b      	ldr	r3, [r7, #20]
 8016556:	3304      	adds	r3, #4
 8016558:	4618      	mov	r0, r3
 801655a:	f004 ff6d 	bl	801b438 <ip4_route>
 801655e:	4601      	mov	r1, r0
 8016560:	697b      	ldr	r3, [r7, #20]
 8016562:	3304      	adds	r3, #4
 8016564:	461a      	mov	r2, r3
 8016566:	4620      	mov	r0, r4
 8016568:	f7ff fa30 	bl	80159cc <tcp_eff_send_mss_netif>
 801656c:	4603      	mov	r3, r0
 801656e:	461a      	mov	r2, r3
 8016570:	697b      	ldr	r3, [r7, #20]
 8016572:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016574:	2112      	movs	r1, #18
 8016576:	6978      	ldr	r0, [r7, #20]
 8016578:	f002 f83e 	bl	80185f8 <tcp_enqueue_flags>
 801657c:	4603      	mov	r3, r0
 801657e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d004      	beq.n	8016592 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016588:	2100      	movs	r1, #0
 801658a:	6978      	ldr	r0, [r7, #20]
 801658c:	f7fe f97c 	bl	8014888 <tcp_abandon>
      return;
 8016590:	e006      	b.n	80165a0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016592:	6978      	ldr	r0, [r7, #20]
 8016594:	f002 f91e 	bl	80187d4 <tcp_output>
  return;
 8016598:	e001      	b.n	801659e <tcp_listen_input+0x1be>
    return;
 801659a:	bf00      	nop
 801659c:	e000      	b.n	80165a0 <tcp_listen_input+0x1c0>
  return;
 801659e:	bf00      	nop
}
 80165a0:	371c      	adds	r7, #28
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd90      	pop	{r4, r7, pc}
 80165a6:	bf00      	nop
 80165a8:	200276cc 	.word	0x200276cc
 80165ac:	080200bc 	.word	0x080200bc
 80165b0:	080202b4 	.word	0x080202b4
 80165b4:	08020108 	.word	0x08020108
 80165b8:	200276c4 	.word	0x200276c4
 80165bc:	200276ca 	.word	0x200276ca
 80165c0:	200276c0 	.word	0x200276c0
 80165c4:	200276b0 	.word	0x200276b0
 80165c8:	20024598 	.word	0x20024598
 80165cc:	2002459c 	.word	0x2002459c
 80165d0:	20024588 	.word	0x20024588
 80165d4:	20027694 	.word	0x20027694
 80165d8:	2002769c 	.word	0x2002769c

080165dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b086      	sub	sp, #24
 80165e0:	af04      	add	r7, sp, #16
 80165e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80165e4:	4b2f      	ldr	r3, [pc, #188]	@ (80166a4 <tcp_timewait_input+0xc8>)
 80165e6:	781b      	ldrb	r3, [r3, #0]
 80165e8:	f003 0304 	and.w	r3, r3, #4
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d153      	bne.n	8016698 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d106      	bne.n	8016604 <tcp_timewait_input+0x28>
 80165f6:	4b2c      	ldr	r3, [pc, #176]	@ (80166a8 <tcp_timewait_input+0xcc>)
 80165f8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80165fc:	492b      	ldr	r1, [pc, #172]	@ (80166ac <tcp_timewait_input+0xd0>)
 80165fe:	482c      	ldr	r0, [pc, #176]	@ (80166b0 <tcp_timewait_input+0xd4>)
 8016600:	f007 fb68 	bl	801dcd4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016604:	4b27      	ldr	r3, [pc, #156]	@ (80166a4 <tcp_timewait_input+0xc8>)
 8016606:	781b      	ldrb	r3, [r3, #0]
 8016608:	f003 0302 	and.w	r3, r3, #2
 801660c:	2b00      	cmp	r3, #0
 801660e:	d02a      	beq.n	8016666 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016610:	4b28      	ldr	r3, [pc, #160]	@ (80166b4 <tcp_timewait_input+0xd8>)
 8016612:	681a      	ldr	r2, [r3, #0]
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016618:	1ad3      	subs	r3, r2, r3
 801661a:	2b00      	cmp	r3, #0
 801661c:	db2d      	blt.n	801667a <tcp_timewait_input+0x9e>
 801661e:	4b25      	ldr	r3, [pc, #148]	@ (80166b4 <tcp_timewait_input+0xd8>)
 8016620:	681a      	ldr	r2, [r3, #0]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016626:	6879      	ldr	r1, [r7, #4]
 8016628:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801662a:	440b      	add	r3, r1
 801662c:	1ad3      	subs	r3, r2, r3
 801662e:	2b00      	cmp	r3, #0
 8016630:	dc23      	bgt.n	801667a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016632:	4b21      	ldr	r3, [pc, #132]	@ (80166b8 <tcp_timewait_input+0xdc>)
 8016634:	6819      	ldr	r1, [r3, #0]
 8016636:	4b21      	ldr	r3, [pc, #132]	@ (80166bc <tcp_timewait_input+0xe0>)
 8016638:	881b      	ldrh	r3, [r3, #0]
 801663a:	461a      	mov	r2, r3
 801663c:	4b1d      	ldr	r3, [pc, #116]	@ (80166b4 <tcp_timewait_input+0xd8>)
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016642:	4b1f      	ldr	r3, [pc, #124]	@ (80166c0 <tcp_timewait_input+0xe4>)
 8016644:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016646:	885b      	ldrh	r3, [r3, #2]
 8016648:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801664a:	4a1d      	ldr	r2, [pc, #116]	@ (80166c0 <tcp_timewait_input+0xe4>)
 801664c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801664e:	8812      	ldrh	r2, [r2, #0]
 8016650:	b292      	uxth	r2, r2
 8016652:	9202      	str	r2, [sp, #8]
 8016654:	9301      	str	r3, [sp, #4]
 8016656:	4b1b      	ldr	r3, [pc, #108]	@ (80166c4 <tcp_timewait_input+0xe8>)
 8016658:	9300      	str	r3, [sp, #0]
 801665a:	4b1b      	ldr	r3, [pc, #108]	@ (80166c8 <tcp_timewait_input+0xec>)
 801665c:	4602      	mov	r2, r0
 801665e:	6878      	ldr	r0, [r7, #4]
 8016660:	f002 fe6c 	bl	801933c <tcp_rst>
      return;
 8016664:	e01b      	b.n	801669e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016666:	4b0f      	ldr	r3, [pc, #60]	@ (80166a4 <tcp_timewait_input+0xc8>)
 8016668:	781b      	ldrb	r3, [r3, #0]
 801666a:	f003 0301 	and.w	r3, r3, #1
 801666e:	2b00      	cmp	r3, #0
 8016670:	d003      	beq.n	801667a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016672:	4b16      	ldr	r3, [pc, #88]	@ (80166cc <tcp_timewait_input+0xf0>)
 8016674:	681a      	ldr	r2, [r3, #0]
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801667a:	4b10      	ldr	r3, [pc, #64]	@ (80166bc <tcp_timewait_input+0xe0>)
 801667c:	881b      	ldrh	r3, [r3, #0]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d00c      	beq.n	801669c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	8b5b      	ldrh	r3, [r3, #26]
 8016686:	f043 0302 	orr.w	r3, r3, #2
 801668a:	b29a      	uxth	r2, r3
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f002 f89f 	bl	80187d4 <tcp_output>
  }
  return;
 8016696:	e001      	b.n	801669c <tcp_timewait_input+0xc0>
    return;
 8016698:	bf00      	nop
 801669a:	e000      	b.n	801669e <tcp_timewait_input+0xc2>
  return;
 801669c:	bf00      	nop
}
 801669e:	3708      	adds	r7, #8
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bd80      	pop	{r7, pc}
 80166a4:	200276cc 	.word	0x200276cc
 80166a8:	080200bc 	.word	0x080200bc
 80166ac:	080202d4 	.word	0x080202d4
 80166b0:	08020108 	.word	0x08020108
 80166b4:	200276c0 	.word	0x200276c0
 80166b8:	200276c4 	.word	0x200276c4
 80166bc:	200276ca 	.word	0x200276ca
 80166c0:	200276b0 	.word	0x200276b0
 80166c4:	20024598 	.word	0x20024598
 80166c8:	2002459c 	.word	0x2002459c
 80166cc:	20027688 	.word	0x20027688

080166d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80166d0:	b590      	push	{r4, r7, lr}
 80166d2:	b08d      	sub	sp, #52	@ 0x34
 80166d4:	af04      	add	r7, sp, #16
 80166d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80166d8:	2300      	movs	r3, #0
 80166da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80166dc:	2300      	movs	r3, #0
 80166de:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d106      	bne.n	80166f4 <tcp_process+0x24>
 80166e6:	4b9d      	ldr	r3, [pc, #628]	@ (801695c <tcp_process+0x28c>)
 80166e8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80166ec:	499c      	ldr	r1, [pc, #624]	@ (8016960 <tcp_process+0x290>)
 80166ee:	489d      	ldr	r0, [pc, #628]	@ (8016964 <tcp_process+0x294>)
 80166f0:	f007 faf0 	bl	801dcd4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80166f4:	4b9c      	ldr	r3, [pc, #624]	@ (8016968 <tcp_process+0x298>)
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	f003 0304 	and.w	r3, r3, #4
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d04e      	beq.n	801679e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	7d1b      	ldrb	r3, [r3, #20]
 8016704:	2b02      	cmp	r3, #2
 8016706:	d108      	bne.n	801671a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801670c:	4b97      	ldr	r3, [pc, #604]	@ (801696c <tcp_process+0x29c>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	429a      	cmp	r2, r3
 8016712:	d123      	bne.n	801675c <tcp_process+0x8c>
        acceptable = 1;
 8016714:	2301      	movs	r3, #1
 8016716:	76fb      	strb	r3, [r7, #27]
 8016718:	e020      	b.n	801675c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801671e:	4b94      	ldr	r3, [pc, #592]	@ (8016970 <tcp_process+0x2a0>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	429a      	cmp	r2, r3
 8016724:	d102      	bne.n	801672c <tcp_process+0x5c>
        acceptable = 1;
 8016726:	2301      	movs	r3, #1
 8016728:	76fb      	strb	r3, [r7, #27]
 801672a:	e017      	b.n	801675c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801672c:	4b90      	ldr	r3, [pc, #576]	@ (8016970 <tcp_process+0x2a0>)
 801672e:	681a      	ldr	r2, [r3, #0]
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016734:	1ad3      	subs	r3, r2, r3
 8016736:	2b00      	cmp	r3, #0
 8016738:	db10      	blt.n	801675c <tcp_process+0x8c>
 801673a:	4b8d      	ldr	r3, [pc, #564]	@ (8016970 <tcp_process+0x2a0>)
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016742:	6879      	ldr	r1, [r7, #4]
 8016744:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016746:	440b      	add	r3, r1
 8016748:	1ad3      	subs	r3, r2, r3
 801674a:	2b00      	cmp	r3, #0
 801674c:	dc06      	bgt.n	801675c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	8b5b      	ldrh	r3, [r3, #26]
 8016752:	f043 0302 	orr.w	r3, r3, #2
 8016756:	b29a      	uxth	r2, r3
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801675c:	7efb      	ldrb	r3, [r7, #27]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d01b      	beq.n	801679a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	7d1b      	ldrb	r3, [r3, #20]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d106      	bne.n	8016778 <tcp_process+0xa8>
 801676a:	4b7c      	ldr	r3, [pc, #496]	@ (801695c <tcp_process+0x28c>)
 801676c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8016770:	4980      	ldr	r1, [pc, #512]	@ (8016974 <tcp_process+0x2a4>)
 8016772:	487c      	ldr	r0, [pc, #496]	@ (8016964 <tcp_process+0x294>)
 8016774:	f007 faae 	bl	801dcd4 <iprintf>
      recv_flags |= TF_RESET;
 8016778:	4b7f      	ldr	r3, [pc, #508]	@ (8016978 <tcp_process+0x2a8>)
 801677a:	781b      	ldrb	r3, [r3, #0]
 801677c:	f043 0308 	orr.w	r3, r3, #8
 8016780:	b2da      	uxtb	r2, r3
 8016782:	4b7d      	ldr	r3, [pc, #500]	@ (8016978 <tcp_process+0x2a8>)
 8016784:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	8b5b      	ldrh	r3, [r3, #26]
 801678a:	f023 0301 	bic.w	r3, r3, #1
 801678e:	b29a      	uxth	r2, r3
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016794:	f06f 030d 	mvn.w	r3, #13
 8016798:	e37a      	b.n	8016e90 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801679a:	2300      	movs	r3, #0
 801679c:	e378      	b.n	8016e90 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801679e:	4b72      	ldr	r3, [pc, #456]	@ (8016968 <tcp_process+0x298>)
 80167a0:	781b      	ldrb	r3, [r3, #0]
 80167a2:	f003 0302 	and.w	r3, r3, #2
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d010      	beq.n	80167cc <tcp_process+0xfc>
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	7d1b      	ldrb	r3, [r3, #20]
 80167ae:	2b02      	cmp	r3, #2
 80167b0:	d00c      	beq.n	80167cc <tcp_process+0xfc>
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	7d1b      	ldrb	r3, [r3, #20]
 80167b6:	2b03      	cmp	r3, #3
 80167b8:	d008      	beq.n	80167cc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	8b5b      	ldrh	r3, [r3, #26]
 80167be:	f043 0302 	orr.w	r3, r3, #2
 80167c2:	b29a      	uxth	r2, r3
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80167c8:	2300      	movs	r3, #0
 80167ca:	e361      	b.n	8016e90 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	8b5b      	ldrh	r3, [r3, #26]
 80167d0:	f003 0310 	and.w	r3, r3, #16
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d103      	bne.n	80167e0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80167d8:	4b68      	ldr	r3, [pc, #416]	@ (801697c <tcp_process+0x2ac>)
 80167da:	681a      	ldr	r2, [r3, #0]
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	2200      	movs	r2, #0
 80167e4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	2200      	movs	r2, #0
 80167ec:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f001 fc2b 	bl	801804c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	7d1b      	ldrb	r3, [r3, #20]
 80167fa:	3b02      	subs	r3, #2
 80167fc:	2b07      	cmp	r3, #7
 80167fe:	f200 8337 	bhi.w	8016e70 <tcp_process+0x7a0>
 8016802:	a201      	add	r2, pc, #4	@ (adr r2, 8016808 <tcp_process+0x138>)
 8016804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016808:	08016829 	.word	0x08016829
 801680c:	08016a59 	.word	0x08016a59
 8016810:	08016bd1 	.word	0x08016bd1
 8016814:	08016bfb 	.word	0x08016bfb
 8016818:	08016d1f 	.word	0x08016d1f
 801681c:	08016bd1 	.word	0x08016bd1
 8016820:	08016dab 	.word	0x08016dab
 8016824:	08016e3b 	.word	0x08016e3b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016828:	4b4f      	ldr	r3, [pc, #316]	@ (8016968 <tcp_process+0x298>)
 801682a:	781b      	ldrb	r3, [r3, #0]
 801682c:	f003 0310 	and.w	r3, r3, #16
 8016830:	2b00      	cmp	r3, #0
 8016832:	f000 80e4 	beq.w	80169fe <tcp_process+0x32e>
 8016836:	4b4c      	ldr	r3, [pc, #304]	@ (8016968 <tcp_process+0x298>)
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	f003 0302 	and.w	r3, r3, #2
 801683e:	2b00      	cmp	r3, #0
 8016840:	f000 80dd 	beq.w	80169fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016848:	1c5a      	adds	r2, r3, #1
 801684a:	4b48      	ldr	r3, [pc, #288]	@ (801696c <tcp_process+0x29c>)
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	429a      	cmp	r2, r3
 8016850:	f040 80d5 	bne.w	80169fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016854:	4b46      	ldr	r3, [pc, #280]	@ (8016970 <tcp_process+0x2a0>)
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	1c5a      	adds	r2, r3, #1
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8016866:	4b41      	ldr	r3, [pc, #260]	@ (801696c <tcp_process+0x29c>)
 8016868:	681a      	ldr	r2, [r3, #0]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801686e:	4b44      	ldr	r3, [pc, #272]	@ (8016980 <tcp_process+0x2b0>)
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	89db      	ldrh	r3, [r3, #14]
 8016874:	b29a      	uxth	r2, r3
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016888:	4b39      	ldr	r3, [pc, #228]	@ (8016970 <tcp_process+0x2a0>)
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	1e5a      	subs	r2, r3, #1
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2204      	movs	r2, #4
 8016896:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	3304      	adds	r3, #4
 80168a0:	4618      	mov	r0, r3
 80168a2:	f004 fdc9 	bl	801b438 <ip4_route>
 80168a6:	4601      	mov	r1, r0
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	3304      	adds	r3, #4
 80168ac:	461a      	mov	r2, r3
 80168ae:	4620      	mov	r0, r4
 80168b0:	f7ff f88c 	bl	80159cc <tcp_eff_send_mss_netif>
 80168b4:	4603      	mov	r3, r0
 80168b6:	461a      	mov	r2, r3
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80168c0:	009a      	lsls	r2, r3, #2
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80168c6:	005b      	lsls	r3, r3, #1
 80168c8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80168cc:	428b      	cmp	r3, r1
 80168ce:	bf38      	it	cc
 80168d0:	460b      	movcc	r3, r1
 80168d2:	429a      	cmp	r2, r3
 80168d4:	d204      	bcs.n	80168e0 <tcp_process+0x210>
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80168da:	009b      	lsls	r3, r3, #2
 80168dc:	b29b      	uxth	r3, r3
 80168de:	e00d      	b.n	80168fc <tcp_process+0x22c>
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80168e4:	005b      	lsls	r3, r3, #1
 80168e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80168ea:	4293      	cmp	r3, r2
 80168ec:	d904      	bls.n	80168f8 <tcp_process+0x228>
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80168f2:	005b      	lsls	r3, r3, #1
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	e001      	b.n	80168fc <tcp_process+0x22c>
 80168f8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80168fc:	687a      	ldr	r2, [r7, #4]
 80168fe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016908:	2b00      	cmp	r3, #0
 801690a:	d106      	bne.n	801691a <tcp_process+0x24a>
 801690c:	4b13      	ldr	r3, [pc, #76]	@ (801695c <tcp_process+0x28c>)
 801690e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8016912:	491c      	ldr	r1, [pc, #112]	@ (8016984 <tcp_process+0x2b4>)
 8016914:	4813      	ldr	r0, [pc, #76]	@ (8016964 <tcp_process+0x294>)
 8016916:	f007 f9dd 	bl	801dcd4 <iprintf>
        --pcb->snd_queuelen;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016920:	3b01      	subs	r3, #1
 8016922:	b29a      	uxth	r2, r3
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801692e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016930:	69fb      	ldr	r3, [r7, #28]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d12a      	bne.n	801698c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801693a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801693c:	69fb      	ldr	r3, [r7, #28]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d106      	bne.n	8016950 <tcp_process+0x280>
 8016942:	4b06      	ldr	r3, [pc, #24]	@ (801695c <tcp_process+0x28c>)
 8016944:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8016948:	490f      	ldr	r1, [pc, #60]	@ (8016988 <tcp_process+0x2b8>)
 801694a:	4806      	ldr	r0, [pc, #24]	@ (8016964 <tcp_process+0x294>)
 801694c:	f007 f9c2 	bl	801dcd4 <iprintf>
          pcb->unsent = rseg->next;
 8016950:	69fb      	ldr	r3, [r7, #28]
 8016952:	681a      	ldr	r2, [r3, #0]
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016958:	e01c      	b.n	8016994 <tcp_process+0x2c4>
 801695a:	bf00      	nop
 801695c:	080200bc 	.word	0x080200bc
 8016960:	080202f4 	.word	0x080202f4
 8016964:	08020108 	.word	0x08020108
 8016968:	200276cc 	.word	0x200276cc
 801696c:	200276c4 	.word	0x200276c4
 8016970:	200276c0 	.word	0x200276c0
 8016974:	08020310 	.word	0x08020310
 8016978:	200276cd 	.word	0x200276cd
 801697c:	20027688 	.word	0x20027688
 8016980:	200276b0 	.word	0x200276b0
 8016984:	08020330 	.word	0x08020330
 8016988:	08020348 	.word	0x08020348
        } else {
          pcb->unacked = rseg->next;
 801698c:	69fb      	ldr	r3, [r7, #28]
 801698e:	681a      	ldr	r2, [r3, #0]
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016994:	69f8      	ldr	r0, [r7, #28]
 8016996:	f7fe fd22 	bl	80153de <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d104      	bne.n	80169ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80169a8:	861a      	strh	r2, [r3, #48]	@ 0x30
 80169aa:	e006      	b.n	80169ba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	2200      	movs	r2, #0
 80169b0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	2200      	movs	r2, #0
 80169b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d00a      	beq.n	80169da <tcp_process+0x30a>
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80169ca:	687a      	ldr	r2, [r7, #4]
 80169cc:	6910      	ldr	r0, [r2, #16]
 80169ce:	2200      	movs	r2, #0
 80169d0:	6879      	ldr	r1, [r7, #4]
 80169d2:	4798      	blx	r3
 80169d4:	4603      	mov	r3, r0
 80169d6:	76bb      	strb	r3, [r7, #26]
 80169d8:	e001      	b.n	80169de <tcp_process+0x30e>
 80169da:	2300      	movs	r3, #0
 80169dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80169de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80169e2:	f113 0f0d 	cmn.w	r3, #13
 80169e6:	d102      	bne.n	80169ee <tcp_process+0x31e>
          return ERR_ABRT;
 80169e8:	f06f 030c 	mvn.w	r3, #12
 80169ec:	e250      	b.n	8016e90 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	8b5b      	ldrh	r3, [r3, #26]
 80169f2:	f043 0302 	orr.w	r3, r3, #2
 80169f6:	b29a      	uxth	r2, r3
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80169fc:	e23a      	b.n	8016e74 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80169fe:	4b98      	ldr	r3, [pc, #608]	@ (8016c60 <tcp_process+0x590>)
 8016a00:	781b      	ldrb	r3, [r3, #0]
 8016a02:	f003 0310 	and.w	r3, r3, #16
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	f000 8234 	beq.w	8016e74 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a0c:	4b95      	ldr	r3, [pc, #596]	@ (8016c64 <tcp_process+0x594>)
 8016a0e:	6819      	ldr	r1, [r3, #0]
 8016a10:	4b95      	ldr	r3, [pc, #596]	@ (8016c68 <tcp_process+0x598>)
 8016a12:	881b      	ldrh	r3, [r3, #0]
 8016a14:	461a      	mov	r2, r3
 8016a16:	4b95      	ldr	r3, [pc, #596]	@ (8016c6c <tcp_process+0x59c>)
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a1c:	4b94      	ldr	r3, [pc, #592]	@ (8016c70 <tcp_process+0x5a0>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a20:	885b      	ldrh	r3, [r3, #2]
 8016a22:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a24:	4a92      	ldr	r2, [pc, #584]	@ (8016c70 <tcp_process+0x5a0>)
 8016a26:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a28:	8812      	ldrh	r2, [r2, #0]
 8016a2a:	b292      	uxth	r2, r2
 8016a2c:	9202      	str	r2, [sp, #8]
 8016a2e:	9301      	str	r3, [sp, #4]
 8016a30:	4b90      	ldr	r3, [pc, #576]	@ (8016c74 <tcp_process+0x5a4>)
 8016a32:	9300      	str	r3, [sp, #0]
 8016a34:	4b90      	ldr	r3, [pc, #576]	@ (8016c78 <tcp_process+0x5a8>)
 8016a36:	4602      	mov	r2, r0
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f002 fc7f 	bl	801933c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016a44:	2b05      	cmp	r3, #5
 8016a46:	f200 8215 	bhi.w	8016e74 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8016a50:	6878      	ldr	r0, [r7, #4]
 8016a52:	f002 fa4b 	bl	8018eec <tcp_rexmit_rto>
      break;
 8016a56:	e20d      	b.n	8016e74 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016a58:	4b81      	ldr	r3, [pc, #516]	@ (8016c60 <tcp_process+0x590>)
 8016a5a:	781b      	ldrb	r3, [r3, #0]
 8016a5c:	f003 0310 	and.w	r3, r3, #16
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	f000 80a1 	beq.w	8016ba8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016a66:	4b7f      	ldr	r3, [pc, #508]	@ (8016c64 <tcp_process+0x594>)
 8016a68:	681a      	ldr	r2, [r3, #0]
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016a6e:	1ad3      	subs	r3, r2, r3
 8016a70:	3b01      	subs	r3, #1
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	db7e      	blt.n	8016b74 <tcp_process+0x4a4>
 8016a76:	4b7b      	ldr	r3, [pc, #492]	@ (8016c64 <tcp_process+0x594>)
 8016a78:	681a      	ldr	r2, [r3, #0]
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016a7e:	1ad3      	subs	r3, r2, r3
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	dc77      	bgt.n	8016b74 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2204      	movs	r2, #4
 8016a88:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d102      	bne.n	8016a98 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8016a92:	23fa      	movs	r3, #250	@ 0xfa
 8016a94:	76bb      	strb	r3, [r7, #26]
 8016a96:	e01d      	b.n	8016ad4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016a9c:	699b      	ldr	r3, [r3, #24]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d106      	bne.n	8016ab0 <tcp_process+0x3e0>
 8016aa2:	4b76      	ldr	r3, [pc, #472]	@ (8016c7c <tcp_process+0x5ac>)
 8016aa4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8016aa8:	4975      	ldr	r1, [pc, #468]	@ (8016c80 <tcp_process+0x5b0>)
 8016aaa:	4876      	ldr	r0, [pc, #472]	@ (8016c84 <tcp_process+0x5b4>)
 8016aac:	f007 f912 	bl	801dcd4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016ab4:	699b      	ldr	r3, [r3, #24]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d00a      	beq.n	8016ad0 <tcp_process+0x400>
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016abe:	699b      	ldr	r3, [r3, #24]
 8016ac0:	687a      	ldr	r2, [r7, #4]
 8016ac2:	6910      	ldr	r0, [r2, #16]
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	6879      	ldr	r1, [r7, #4]
 8016ac8:	4798      	blx	r3
 8016aca:	4603      	mov	r3, r0
 8016acc:	76bb      	strb	r3, [r7, #26]
 8016ace:	e001      	b.n	8016ad4 <tcp_process+0x404>
 8016ad0:	23f0      	movs	r3, #240	@ 0xf0
 8016ad2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8016ad4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d00a      	beq.n	8016af2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8016adc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016ae0:	f113 0f0d 	cmn.w	r3, #13
 8016ae4:	d002      	beq.n	8016aec <tcp_process+0x41c>
              tcp_abort(pcb);
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f7fd ff8c 	bl	8014a04 <tcp_abort>
            }
            return ERR_ABRT;
 8016aec:	f06f 030c 	mvn.w	r3, #12
 8016af0:	e1ce      	b.n	8016e90 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8016af2:	6878      	ldr	r0, [r7, #4]
 8016af4:	f000 fae0 	bl	80170b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016af8:	4b63      	ldr	r3, [pc, #396]	@ (8016c88 <tcp_process+0x5b8>)
 8016afa:	881b      	ldrh	r3, [r3, #0]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d005      	beq.n	8016b0c <tcp_process+0x43c>
            recv_acked--;
 8016b00:	4b61      	ldr	r3, [pc, #388]	@ (8016c88 <tcp_process+0x5b8>)
 8016b02:	881b      	ldrh	r3, [r3, #0]
 8016b04:	3b01      	subs	r3, #1
 8016b06:	b29a      	uxth	r2, r3
 8016b08:	4b5f      	ldr	r3, [pc, #380]	@ (8016c88 <tcp_process+0x5b8>)
 8016b0a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016b10:	009a      	lsls	r2, r3, #2
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016b16:	005b      	lsls	r3, r3, #1
 8016b18:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016b1c:	428b      	cmp	r3, r1
 8016b1e:	bf38      	it	cc
 8016b20:	460b      	movcc	r3, r1
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d204      	bcs.n	8016b30 <tcp_process+0x460>
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016b2a:	009b      	lsls	r3, r3, #2
 8016b2c:	b29b      	uxth	r3, r3
 8016b2e:	e00d      	b.n	8016b4c <tcp_process+0x47c>
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016b34:	005b      	lsls	r3, r3, #1
 8016b36:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016b3a:	4293      	cmp	r3, r2
 8016b3c:	d904      	bls.n	8016b48 <tcp_process+0x478>
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016b42:	005b      	lsls	r3, r3, #1
 8016b44:	b29b      	uxth	r3, r3
 8016b46:	e001      	b.n	8016b4c <tcp_process+0x47c>
 8016b48:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016b4c:	687a      	ldr	r2, [r7, #4]
 8016b4e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016b52:	4b4e      	ldr	r3, [pc, #312]	@ (8016c8c <tcp_process+0x5bc>)
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	f003 0320 	and.w	r3, r3, #32
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d037      	beq.n	8016bce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	8b5b      	ldrh	r3, [r3, #26]
 8016b62:	f043 0302 	orr.w	r3, r3, #2
 8016b66:	b29a      	uxth	r2, r3
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2207      	movs	r2, #7
 8016b70:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016b72:	e02c      	b.n	8016bce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b74:	4b3b      	ldr	r3, [pc, #236]	@ (8016c64 <tcp_process+0x594>)
 8016b76:	6819      	ldr	r1, [r3, #0]
 8016b78:	4b3b      	ldr	r3, [pc, #236]	@ (8016c68 <tcp_process+0x598>)
 8016b7a:	881b      	ldrh	r3, [r3, #0]
 8016b7c:	461a      	mov	r2, r3
 8016b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8016c6c <tcp_process+0x59c>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b84:	4b3a      	ldr	r3, [pc, #232]	@ (8016c70 <tcp_process+0x5a0>)
 8016b86:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b88:	885b      	ldrh	r3, [r3, #2]
 8016b8a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b8c:	4a38      	ldr	r2, [pc, #224]	@ (8016c70 <tcp_process+0x5a0>)
 8016b8e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b90:	8812      	ldrh	r2, [r2, #0]
 8016b92:	b292      	uxth	r2, r2
 8016b94:	9202      	str	r2, [sp, #8]
 8016b96:	9301      	str	r3, [sp, #4]
 8016b98:	4b36      	ldr	r3, [pc, #216]	@ (8016c74 <tcp_process+0x5a4>)
 8016b9a:	9300      	str	r3, [sp, #0]
 8016b9c:	4b36      	ldr	r3, [pc, #216]	@ (8016c78 <tcp_process+0x5a8>)
 8016b9e:	4602      	mov	r2, r0
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f002 fbcb 	bl	801933c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016ba6:	e167      	b.n	8016e78 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8016c60 <tcp_process+0x590>)
 8016baa:	781b      	ldrb	r3, [r3, #0]
 8016bac:	f003 0302 	and.w	r3, r3, #2
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	f000 8161 	beq.w	8016e78 <tcp_process+0x7a8>
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bba:	1e5a      	subs	r2, r3, #1
 8016bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8016c6c <tcp_process+0x59c>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	f040 8159 	bne.w	8016e78 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8016bc6:	6878      	ldr	r0, [r7, #4]
 8016bc8:	f002 f9b2 	bl	8018f30 <tcp_rexmit>
      break;
 8016bcc:	e154      	b.n	8016e78 <tcp_process+0x7a8>
 8016bce:	e153      	b.n	8016e78 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8016bd0:	6878      	ldr	r0, [r7, #4]
 8016bd2:	f000 fa71 	bl	80170b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8016bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8016c8c <tcp_process+0x5bc>)
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	f003 0320 	and.w	r3, r3, #32
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	f000 814c 	beq.w	8016e7c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	8b5b      	ldrh	r3, [r3, #26]
 8016be8:	f043 0302 	orr.w	r3, r3, #2
 8016bec:	b29a      	uxth	r2, r3
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2207      	movs	r2, #7
 8016bf6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016bf8:	e140      	b.n	8016e7c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8016bfa:	6878      	ldr	r0, [r7, #4]
 8016bfc:	f000 fa5c 	bl	80170b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016c00:	4b22      	ldr	r3, [pc, #136]	@ (8016c8c <tcp_process+0x5bc>)
 8016c02:	781b      	ldrb	r3, [r3, #0]
 8016c04:	f003 0320 	and.w	r3, r3, #32
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d071      	beq.n	8016cf0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016c0c:	4b14      	ldr	r3, [pc, #80]	@ (8016c60 <tcp_process+0x590>)
 8016c0e:	781b      	ldrb	r3, [r3, #0]
 8016c10:	f003 0310 	and.w	r3, r3, #16
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d060      	beq.n	8016cda <tcp_process+0x60a>
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016c1c:	4b11      	ldr	r3, [pc, #68]	@ (8016c64 <tcp_process+0x594>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	429a      	cmp	r2, r3
 8016c22:	d15a      	bne.n	8016cda <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d156      	bne.n	8016cda <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	8b5b      	ldrh	r3, [r3, #26]
 8016c30:	f043 0302 	orr.w	r3, r3, #2
 8016c34:	b29a      	uxth	r2, r3
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8016c3a:	6878      	ldr	r0, [r7, #4]
 8016c3c:	f7fe fdbc 	bl	80157b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016c40:	4b13      	ldr	r3, [pc, #76]	@ (8016c90 <tcp_process+0x5c0>)
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	429a      	cmp	r2, r3
 8016c48:	d105      	bne.n	8016c56 <tcp_process+0x586>
 8016c4a:	4b11      	ldr	r3, [pc, #68]	@ (8016c90 <tcp_process+0x5c0>)
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	68db      	ldr	r3, [r3, #12]
 8016c50:	4a0f      	ldr	r2, [pc, #60]	@ (8016c90 <tcp_process+0x5c0>)
 8016c52:	6013      	str	r3, [r2, #0]
 8016c54:	e02e      	b.n	8016cb4 <tcp_process+0x5e4>
 8016c56:	4b0e      	ldr	r3, [pc, #56]	@ (8016c90 <tcp_process+0x5c0>)
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	617b      	str	r3, [r7, #20]
 8016c5c:	e027      	b.n	8016cae <tcp_process+0x5de>
 8016c5e:	bf00      	nop
 8016c60:	200276cc 	.word	0x200276cc
 8016c64:	200276c4 	.word	0x200276c4
 8016c68:	200276ca 	.word	0x200276ca
 8016c6c:	200276c0 	.word	0x200276c0
 8016c70:	200276b0 	.word	0x200276b0
 8016c74:	20024598 	.word	0x20024598
 8016c78:	2002459c 	.word	0x2002459c
 8016c7c:	080200bc 	.word	0x080200bc
 8016c80:	0802035c 	.word	0x0802035c
 8016c84:	08020108 	.word	0x08020108
 8016c88:	200276c8 	.word	0x200276c8
 8016c8c:	200276cd 	.word	0x200276cd
 8016c90:	20027694 	.word	0x20027694
 8016c94:	697b      	ldr	r3, [r7, #20]
 8016c96:	68db      	ldr	r3, [r3, #12]
 8016c98:	687a      	ldr	r2, [r7, #4]
 8016c9a:	429a      	cmp	r2, r3
 8016c9c:	d104      	bne.n	8016ca8 <tcp_process+0x5d8>
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	68da      	ldr	r2, [r3, #12]
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	60da      	str	r2, [r3, #12]
 8016ca6:	e005      	b.n	8016cb4 <tcp_process+0x5e4>
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	68db      	ldr	r3, [r3, #12]
 8016cac:	617b      	str	r3, [r7, #20]
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d1ef      	bne.n	8016c94 <tcp_process+0x5c4>
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	60da      	str	r2, [r3, #12]
 8016cba:	4b77      	ldr	r3, [pc, #476]	@ (8016e98 <tcp_process+0x7c8>)
 8016cbc:	2201      	movs	r2, #1
 8016cbe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	220a      	movs	r2, #10
 8016cc4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016cc6:	4b75      	ldr	r3, [pc, #468]	@ (8016e9c <tcp_process+0x7cc>)
 8016cc8:	681a      	ldr	r2, [r3, #0]
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	60da      	str	r2, [r3, #12]
 8016cce:	4a73      	ldr	r2, [pc, #460]	@ (8016e9c <tcp_process+0x7cc>)
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6013      	str	r3, [r2, #0]
 8016cd4:	f002 fcf4 	bl	80196c0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016cd8:	e0d2      	b.n	8016e80 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	8b5b      	ldrh	r3, [r3, #26]
 8016cde:	f043 0302 	orr.w	r3, r3, #2
 8016ce2:	b29a      	uxth	r2, r3
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	2208      	movs	r2, #8
 8016cec:	751a      	strb	r2, [r3, #20]
      break;
 8016cee:	e0c7      	b.n	8016e80 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8016ea0 <tcp_process+0x7d0>)
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	f003 0310 	and.w	r3, r3, #16
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	f000 80c1 	beq.w	8016e80 <tcp_process+0x7b0>
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016d02:	4b68      	ldr	r3, [pc, #416]	@ (8016ea4 <tcp_process+0x7d4>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	429a      	cmp	r2, r3
 8016d08:	f040 80ba 	bne.w	8016e80 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	f040 80b5 	bne.w	8016e80 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	2206      	movs	r2, #6
 8016d1a:	751a      	strb	r2, [r3, #20]
      break;
 8016d1c:	e0b0      	b.n	8016e80 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8016d1e:	6878      	ldr	r0, [r7, #4]
 8016d20:	f000 f9ca 	bl	80170b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016d24:	4b60      	ldr	r3, [pc, #384]	@ (8016ea8 <tcp_process+0x7d8>)
 8016d26:	781b      	ldrb	r3, [r3, #0]
 8016d28:	f003 0320 	and.w	r3, r3, #32
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	f000 80a9 	beq.w	8016e84 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	8b5b      	ldrh	r3, [r3, #26]
 8016d36:	f043 0302 	orr.w	r3, r3, #2
 8016d3a:	b29a      	uxth	r2, r3
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016d40:	6878      	ldr	r0, [r7, #4]
 8016d42:	f7fe fd39 	bl	80157b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016d46:	4b59      	ldr	r3, [pc, #356]	@ (8016eac <tcp_process+0x7dc>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	687a      	ldr	r2, [r7, #4]
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d105      	bne.n	8016d5c <tcp_process+0x68c>
 8016d50:	4b56      	ldr	r3, [pc, #344]	@ (8016eac <tcp_process+0x7dc>)
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	68db      	ldr	r3, [r3, #12]
 8016d56:	4a55      	ldr	r2, [pc, #340]	@ (8016eac <tcp_process+0x7dc>)
 8016d58:	6013      	str	r3, [r2, #0]
 8016d5a:	e013      	b.n	8016d84 <tcp_process+0x6b4>
 8016d5c:	4b53      	ldr	r3, [pc, #332]	@ (8016eac <tcp_process+0x7dc>)
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	613b      	str	r3, [r7, #16]
 8016d62:	e00c      	b.n	8016d7e <tcp_process+0x6ae>
 8016d64:	693b      	ldr	r3, [r7, #16]
 8016d66:	68db      	ldr	r3, [r3, #12]
 8016d68:	687a      	ldr	r2, [r7, #4]
 8016d6a:	429a      	cmp	r2, r3
 8016d6c:	d104      	bne.n	8016d78 <tcp_process+0x6a8>
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	68da      	ldr	r2, [r3, #12]
 8016d72:	693b      	ldr	r3, [r7, #16]
 8016d74:	60da      	str	r2, [r3, #12]
 8016d76:	e005      	b.n	8016d84 <tcp_process+0x6b4>
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	68db      	ldr	r3, [r3, #12]
 8016d7c:	613b      	str	r3, [r7, #16]
 8016d7e:	693b      	ldr	r3, [r7, #16]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d1ef      	bne.n	8016d64 <tcp_process+0x694>
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2200      	movs	r2, #0
 8016d88:	60da      	str	r2, [r3, #12]
 8016d8a:	4b43      	ldr	r3, [pc, #268]	@ (8016e98 <tcp_process+0x7c8>)
 8016d8c:	2201      	movs	r2, #1
 8016d8e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	220a      	movs	r2, #10
 8016d94:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016d96:	4b41      	ldr	r3, [pc, #260]	@ (8016e9c <tcp_process+0x7cc>)
 8016d98:	681a      	ldr	r2, [r3, #0]
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	60da      	str	r2, [r3, #12]
 8016d9e:	4a3f      	ldr	r2, [pc, #252]	@ (8016e9c <tcp_process+0x7cc>)
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	6013      	str	r3, [r2, #0]
 8016da4:	f002 fc8c 	bl	80196c0 <tcp_timer_needed>
      }
      break;
 8016da8:	e06c      	b.n	8016e84 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8016daa:	6878      	ldr	r0, [r7, #4]
 8016dac:	f000 f984 	bl	80170b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016db0:	4b3b      	ldr	r3, [pc, #236]	@ (8016ea0 <tcp_process+0x7d0>)
 8016db2:	781b      	ldrb	r3, [r3, #0]
 8016db4:	f003 0310 	and.w	r3, r3, #16
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d065      	beq.n	8016e88 <tcp_process+0x7b8>
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016dc0:	4b38      	ldr	r3, [pc, #224]	@ (8016ea4 <tcp_process+0x7d4>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	d15f      	bne.n	8016e88 <tcp_process+0x7b8>
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d15b      	bne.n	8016e88 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016dd0:	6878      	ldr	r0, [r7, #4]
 8016dd2:	f7fe fcf1 	bl	80157b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016dd6:	4b35      	ldr	r3, [pc, #212]	@ (8016eac <tcp_process+0x7dc>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	687a      	ldr	r2, [r7, #4]
 8016ddc:	429a      	cmp	r2, r3
 8016dde:	d105      	bne.n	8016dec <tcp_process+0x71c>
 8016de0:	4b32      	ldr	r3, [pc, #200]	@ (8016eac <tcp_process+0x7dc>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	68db      	ldr	r3, [r3, #12]
 8016de6:	4a31      	ldr	r2, [pc, #196]	@ (8016eac <tcp_process+0x7dc>)
 8016de8:	6013      	str	r3, [r2, #0]
 8016dea:	e013      	b.n	8016e14 <tcp_process+0x744>
 8016dec:	4b2f      	ldr	r3, [pc, #188]	@ (8016eac <tcp_process+0x7dc>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	60fb      	str	r3, [r7, #12]
 8016df2:	e00c      	b.n	8016e0e <tcp_process+0x73e>
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	68db      	ldr	r3, [r3, #12]
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	429a      	cmp	r2, r3
 8016dfc:	d104      	bne.n	8016e08 <tcp_process+0x738>
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	68da      	ldr	r2, [r3, #12]
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	60da      	str	r2, [r3, #12]
 8016e06:	e005      	b.n	8016e14 <tcp_process+0x744>
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	68db      	ldr	r3, [r3, #12]
 8016e0c:	60fb      	str	r3, [r7, #12]
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d1ef      	bne.n	8016df4 <tcp_process+0x724>
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	2200      	movs	r2, #0
 8016e18:	60da      	str	r2, [r3, #12]
 8016e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8016e98 <tcp_process+0x7c8>)
 8016e1c:	2201      	movs	r2, #1
 8016e1e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	220a      	movs	r2, #10
 8016e24:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016e26:	4b1d      	ldr	r3, [pc, #116]	@ (8016e9c <tcp_process+0x7cc>)
 8016e28:	681a      	ldr	r2, [r3, #0]
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	60da      	str	r2, [r3, #12]
 8016e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8016e9c <tcp_process+0x7cc>)
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6013      	str	r3, [r2, #0]
 8016e34:	f002 fc44 	bl	80196c0 <tcp_timer_needed>
      }
      break;
 8016e38:	e026      	b.n	8016e88 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f000 f93c 	bl	80170b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016e40:	4b17      	ldr	r3, [pc, #92]	@ (8016ea0 <tcp_process+0x7d0>)
 8016e42:	781b      	ldrb	r3, [r3, #0]
 8016e44:	f003 0310 	and.w	r3, r3, #16
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d01f      	beq.n	8016e8c <tcp_process+0x7bc>
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016e50:	4b14      	ldr	r3, [pc, #80]	@ (8016ea4 <tcp_process+0x7d4>)
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d119      	bne.n	8016e8c <tcp_process+0x7bc>
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d115      	bne.n	8016e8c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016e60:	4b11      	ldr	r3, [pc, #68]	@ (8016ea8 <tcp_process+0x7d8>)
 8016e62:	781b      	ldrb	r3, [r3, #0]
 8016e64:	f043 0310 	orr.w	r3, r3, #16
 8016e68:	b2da      	uxtb	r2, r3
 8016e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8016ea8 <tcp_process+0x7d8>)
 8016e6c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016e6e:	e00d      	b.n	8016e8c <tcp_process+0x7bc>
    default:
      break;
 8016e70:	bf00      	nop
 8016e72:	e00c      	b.n	8016e8e <tcp_process+0x7be>
      break;
 8016e74:	bf00      	nop
 8016e76:	e00a      	b.n	8016e8e <tcp_process+0x7be>
      break;
 8016e78:	bf00      	nop
 8016e7a:	e008      	b.n	8016e8e <tcp_process+0x7be>
      break;
 8016e7c:	bf00      	nop
 8016e7e:	e006      	b.n	8016e8e <tcp_process+0x7be>
      break;
 8016e80:	bf00      	nop
 8016e82:	e004      	b.n	8016e8e <tcp_process+0x7be>
      break;
 8016e84:	bf00      	nop
 8016e86:	e002      	b.n	8016e8e <tcp_process+0x7be>
      break;
 8016e88:	bf00      	nop
 8016e8a:	e000      	b.n	8016e8e <tcp_process+0x7be>
      break;
 8016e8c:	bf00      	nop
  }
  return ERR_OK;
 8016e8e:	2300      	movs	r3, #0
}
 8016e90:	4618      	mov	r0, r3
 8016e92:	3724      	adds	r7, #36	@ 0x24
 8016e94:	46bd      	mov	sp, r7
 8016e96:	bd90      	pop	{r4, r7, pc}
 8016e98:	2002769c 	.word	0x2002769c
 8016e9c:	20027698 	.word	0x20027698
 8016ea0:	200276cc 	.word	0x200276cc
 8016ea4:	200276c4 	.word	0x200276c4
 8016ea8:	200276cd 	.word	0x200276cd
 8016eac:	20027694 	.word	0x20027694

08016eb0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016eb0:	b590      	push	{r4, r7, lr}
 8016eb2:	b085      	sub	sp, #20
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
 8016eb8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d106      	bne.n	8016ece <tcp_oos_insert_segment+0x1e>
 8016ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8016fb0 <tcp_oos_insert_segment+0x100>)
 8016ec2:	f240 421f 	movw	r2, #1055	@ 0x41f
 8016ec6:	493b      	ldr	r1, [pc, #236]	@ (8016fb4 <tcp_oos_insert_segment+0x104>)
 8016ec8:	483b      	ldr	r0, [pc, #236]	@ (8016fb8 <tcp_oos_insert_segment+0x108>)
 8016eca:	f006 ff03 	bl	801dcd4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	68db      	ldr	r3, [r3, #12]
 8016ed2:	899b      	ldrh	r3, [r3, #12]
 8016ed4:	b29b      	uxth	r3, r3
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7fb fc02 	bl	80126e0 <lwip_htons>
 8016edc:	4603      	mov	r3, r0
 8016ede:	b2db      	uxtb	r3, r3
 8016ee0:	f003 0301 	and.w	r3, r3, #1
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d028      	beq.n	8016f3a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016ee8:	6838      	ldr	r0, [r7, #0]
 8016eea:	f7fe fa63 	bl	80153b4 <tcp_segs_free>
    next = NULL;
 8016eee:	2300      	movs	r3, #0
 8016ef0:	603b      	str	r3, [r7, #0]
 8016ef2:	e056      	b.n	8016fa2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016ef4:	683b      	ldr	r3, [r7, #0]
 8016ef6:	68db      	ldr	r3, [r3, #12]
 8016ef8:	899b      	ldrh	r3, [r3, #12]
 8016efa:	b29b      	uxth	r3, r3
 8016efc:	4618      	mov	r0, r3
 8016efe:	f7fb fbef 	bl	80126e0 <lwip_htons>
 8016f02:	4603      	mov	r3, r0
 8016f04:	b2db      	uxtb	r3, r3
 8016f06:	f003 0301 	and.w	r3, r3, #1
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d00d      	beq.n	8016f2a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	68db      	ldr	r3, [r3, #12]
 8016f12:	899b      	ldrh	r3, [r3, #12]
 8016f14:	b29c      	uxth	r4, r3
 8016f16:	2001      	movs	r0, #1
 8016f18:	f7fb fbe2 	bl	80126e0 <lwip_htons>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	461a      	mov	r2, r3
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	68db      	ldr	r3, [r3, #12]
 8016f24:	4322      	orrs	r2, r4
 8016f26:	b292      	uxth	r2, r2
 8016f28:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8016f2a:	683b      	ldr	r3, [r7, #0]
 8016f2c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8016f2e:	683b      	ldr	r3, [r7, #0]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016f34:	68f8      	ldr	r0, [r7, #12]
 8016f36:	f7fe fa52 	bl	80153de <tcp_seg_free>
    while (next &&
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d00e      	beq.n	8016f5e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	891b      	ldrh	r3, [r3, #8]
 8016f44:	461a      	mov	r2, r3
 8016f46:	4b1d      	ldr	r3, [pc, #116]	@ (8016fbc <tcp_oos_insert_segment+0x10c>)
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	441a      	add	r2, r3
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	68db      	ldr	r3, [r3, #12]
 8016f50:	685b      	ldr	r3, [r3, #4]
 8016f52:	6839      	ldr	r1, [r7, #0]
 8016f54:	8909      	ldrh	r1, [r1, #8]
 8016f56:	440b      	add	r3, r1
 8016f58:	1ad3      	subs	r3, r2, r3
    while (next &&
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	daca      	bge.n	8016ef4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8016f5e:	683b      	ldr	r3, [r7, #0]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d01e      	beq.n	8016fa2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	891b      	ldrh	r3, [r3, #8]
 8016f68:	461a      	mov	r2, r3
 8016f6a:	4b14      	ldr	r3, [pc, #80]	@ (8016fbc <tcp_oos_insert_segment+0x10c>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	441a      	add	r2, r3
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	68db      	ldr	r3, [r3, #12]
 8016f74:	685b      	ldr	r3, [r3, #4]
 8016f76:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	dd12      	ble.n	8016fa2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	68db      	ldr	r3, [r3, #12]
 8016f80:	685b      	ldr	r3, [r3, #4]
 8016f82:	b29a      	uxth	r2, r3
 8016f84:	4b0d      	ldr	r3, [pc, #52]	@ (8016fbc <tcp_oos_insert_segment+0x10c>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	b29b      	uxth	r3, r3
 8016f8a:	1ad3      	subs	r3, r2, r3
 8016f8c:	b29a      	uxth	r2, r3
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	685a      	ldr	r2, [r3, #4]
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	891b      	ldrh	r3, [r3, #8]
 8016f9a:	4619      	mov	r1, r3
 8016f9c:	4610      	mov	r0, r2
 8016f9e:	f7fc fe07 	bl	8013bb0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	683a      	ldr	r2, [r7, #0]
 8016fa6:	601a      	str	r2, [r3, #0]
}
 8016fa8:	bf00      	nop
 8016faa:	3714      	adds	r7, #20
 8016fac:	46bd      	mov	sp, r7
 8016fae:	bd90      	pop	{r4, r7, pc}
 8016fb0:	080200bc 	.word	0x080200bc
 8016fb4:	0802037c 	.word	0x0802037c
 8016fb8:	08020108 	.word	0x08020108
 8016fbc:	200276c0 	.word	0x200276c0

08016fc0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016fc0:	b5b0      	push	{r4, r5, r7, lr}
 8016fc2:	b086      	sub	sp, #24
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	60f8      	str	r0, [r7, #12]
 8016fc8:	60b9      	str	r1, [r7, #8]
 8016fca:	607a      	str	r2, [r7, #4]
 8016fcc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8016fce:	e03e      	b.n	801704e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016fd4:	68bb      	ldr	r3, [r7, #8]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8016fda:	697b      	ldr	r3, [r7, #20]
 8016fdc:	685b      	ldr	r3, [r3, #4]
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7fc fffa 	bl	8013fd8 <pbuf_clen>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016fee:	8a7a      	ldrh	r2, [r7, #18]
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d906      	bls.n	8017002 <tcp_free_acked_segments+0x42>
 8016ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80170a0 <tcp_free_acked_segments+0xe0>)
 8016ff6:	f240 4257 	movw	r2, #1111	@ 0x457
 8016ffa:	492a      	ldr	r1, [pc, #168]	@ (80170a4 <tcp_free_acked_segments+0xe4>)
 8016ffc:	482a      	ldr	r0, [pc, #168]	@ (80170a8 <tcp_free_acked_segments+0xe8>)
 8016ffe:	f006 fe69 	bl	801dcd4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017008:	8a7b      	ldrh	r3, [r7, #18]
 801700a:	1ad3      	subs	r3, r2, r3
 801700c:	b29a      	uxth	r2, r3
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017014:	697b      	ldr	r3, [r7, #20]
 8017016:	891a      	ldrh	r2, [r3, #8]
 8017018:	4b24      	ldr	r3, [pc, #144]	@ (80170ac <tcp_free_acked_segments+0xec>)
 801701a:	881b      	ldrh	r3, [r3, #0]
 801701c:	4413      	add	r3, r2
 801701e:	b29a      	uxth	r2, r3
 8017020:	4b22      	ldr	r3, [pc, #136]	@ (80170ac <tcp_free_acked_segments+0xec>)
 8017022:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017024:	6978      	ldr	r0, [r7, #20]
 8017026:	f7fe f9da 	bl	80153de <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017030:	2b00      	cmp	r3, #0
 8017032:	d00c      	beq.n	801704e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d109      	bne.n	801704e <tcp_free_acked_segments+0x8e>
 801703a:	683b      	ldr	r3, [r7, #0]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d106      	bne.n	801704e <tcp_free_acked_segments+0x8e>
 8017040:	4b17      	ldr	r3, [pc, #92]	@ (80170a0 <tcp_free_acked_segments+0xe0>)
 8017042:	f240 4261 	movw	r2, #1121	@ 0x461
 8017046:	491a      	ldr	r1, [pc, #104]	@ (80170b0 <tcp_free_acked_segments+0xf0>)
 8017048:	4817      	ldr	r0, [pc, #92]	@ (80170a8 <tcp_free_acked_segments+0xe8>)
 801704a:	f006 fe43 	bl	801dcd4 <iprintf>
  while (seg_list != NULL &&
 801704e:	68bb      	ldr	r3, [r7, #8]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d020      	beq.n	8017096 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	68db      	ldr	r3, [r3, #12]
 8017058:	685b      	ldr	r3, [r3, #4]
 801705a:	4618      	mov	r0, r3
 801705c:	f7fb fb56 	bl	801270c <lwip_htonl>
 8017060:	4604      	mov	r4, r0
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	891b      	ldrh	r3, [r3, #8]
 8017066:	461d      	mov	r5, r3
 8017068:	68bb      	ldr	r3, [r7, #8]
 801706a:	68db      	ldr	r3, [r3, #12]
 801706c:	899b      	ldrh	r3, [r3, #12]
 801706e:	b29b      	uxth	r3, r3
 8017070:	4618      	mov	r0, r3
 8017072:	f7fb fb35 	bl	80126e0 <lwip_htons>
 8017076:	4603      	mov	r3, r0
 8017078:	b2db      	uxtb	r3, r3
 801707a:	f003 0303 	and.w	r3, r3, #3
 801707e:	2b00      	cmp	r3, #0
 8017080:	d001      	beq.n	8017086 <tcp_free_acked_segments+0xc6>
 8017082:	2301      	movs	r3, #1
 8017084:	e000      	b.n	8017088 <tcp_free_acked_segments+0xc8>
 8017086:	2300      	movs	r3, #0
 8017088:	442b      	add	r3, r5
 801708a:	18e2      	adds	r2, r4, r3
 801708c:	4b09      	ldr	r3, [pc, #36]	@ (80170b4 <tcp_free_acked_segments+0xf4>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017092:	2b00      	cmp	r3, #0
 8017094:	dd9c      	ble.n	8016fd0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017096:	68bb      	ldr	r3, [r7, #8]
}
 8017098:	4618      	mov	r0, r3
 801709a:	3718      	adds	r7, #24
 801709c:	46bd      	mov	sp, r7
 801709e:	bdb0      	pop	{r4, r5, r7, pc}
 80170a0:	080200bc 	.word	0x080200bc
 80170a4:	080203a4 	.word	0x080203a4
 80170a8:	08020108 	.word	0x08020108
 80170ac:	200276c8 	.word	0x200276c8
 80170b0:	080203cc 	.word	0x080203cc
 80170b4:	200276c4 	.word	0x200276c4

080170b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80170b8:	b5b0      	push	{r4, r5, r7, lr}
 80170ba:	b094      	sub	sp, #80	@ 0x50
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80170c0:	2300      	movs	r3, #0
 80170c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d106      	bne.n	80170d8 <tcp_receive+0x20>
 80170ca:	4b91      	ldr	r3, [pc, #580]	@ (8017310 <tcp_receive+0x258>)
 80170cc:	f240 427b 	movw	r2, #1147	@ 0x47b
 80170d0:	4990      	ldr	r1, [pc, #576]	@ (8017314 <tcp_receive+0x25c>)
 80170d2:	4891      	ldr	r0, [pc, #580]	@ (8017318 <tcp_receive+0x260>)
 80170d4:	f006 fdfe 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	7d1b      	ldrb	r3, [r3, #20]
 80170dc:	2b03      	cmp	r3, #3
 80170de:	d806      	bhi.n	80170ee <tcp_receive+0x36>
 80170e0:	4b8b      	ldr	r3, [pc, #556]	@ (8017310 <tcp_receive+0x258>)
 80170e2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80170e6:	498d      	ldr	r1, [pc, #564]	@ (801731c <tcp_receive+0x264>)
 80170e8:	488b      	ldr	r0, [pc, #556]	@ (8017318 <tcp_receive+0x260>)
 80170ea:	f006 fdf3 	bl	801dcd4 <iprintf>

  if (flags & TCP_ACK) {
 80170ee:	4b8c      	ldr	r3, [pc, #560]	@ (8017320 <tcp_receive+0x268>)
 80170f0:	781b      	ldrb	r3, [r3, #0]
 80170f2:	f003 0310 	and.w	r3, r3, #16
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	f000 8264 	beq.w	80175c4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017102:	461a      	mov	r2, r3
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017108:	4413      	add	r3, r2
 801710a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017110:	4b84      	ldr	r3, [pc, #528]	@ (8017324 <tcp_receive+0x26c>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	1ad3      	subs	r3, r2, r3
 8017116:	2b00      	cmp	r3, #0
 8017118:	db1b      	blt.n	8017152 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801711e:	4b81      	ldr	r3, [pc, #516]	@ (8017324 <tcp_receive+0x26c>)
 8017120:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017122:	429a      	cmp	r2, r3
 8017124:	d106      	bne.n	8017134 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801712a:	4b7f      	ldr	r3, [pc, #508]	@ (8017328 <tcp_receive+0x270>)
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	1ad3      	subs	r3, r2, r3
 8017130:	2b00      	cmp	r3, #0
 8017132:	db0e      	blt.n	8017152 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017138:	4b7b      	ldr	r3, [pc, #492]	@ (8017328 <tcp_receive+0x270>)
 801713a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801713c:	429a      	cmp	r2, r3
 801713e:	d125      	bne.n	801718c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017140:	4b7a      	ldr	r3, [pc, #488]	@ (801732c <tcp_receive+0x274>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	89db      	ldrh	r3, [r3, #14]
 8017146:	b29a      	uxth	r2, r3
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801714e:	429a      	cmp	r2, r3
 8017150:	d91c      	bls.n	801718c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017152:	4b76      	ldr	r3, [pc, #472]	@ (801732c <tcp_receive+0x274>)
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	89db      	ldrh	r3, [r3, #14]
 8017158:	b29a      	uxth	r2, r3
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801716c:	429a      	cmp	r2, r3
 801716e:	d205      	bcs.n	801717c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801717c:	4b69      	ldr	r3, [pc, #420]	@ (8017324 <tcp_receive+0x26c>)
 801717e:	681a      	ldr	r2, [r3, #0]
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8017184:	4b68      	ldr	r3, [pc, #416]	@ (8017328 <tcp_receive+0x270>)
 8017186:	681a      	ldr	r2, [r3, #0]
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801718c:	4b66      	ldr	r3, [pc, #408]	@ (8017328 <tcp_receive+0x270>)
 801718e:	681a      	ldr	r2, [r3, #0]
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017194:	1ad3      	subs	r3, r2, r3
 8017196:	2b00      	cmp	r3, #0
 8017198:	dc58      	bgt.n	801724c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801719a:	4b65      	ldr	r3, [pc, #404]	@ (8017330 <tcp_receive+0x278>)
 801719c:	881b      	ldrh	r3, [r3, #0]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d14b      	bne.n	801723a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80171a6:	687a      	ldr	r2, [r7, #4]
 80171a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80171ac:	4413      	add	r3, r2
 80171ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80171b0:	429a      	cmp	r2, r3
 80171b2:	d142      	bne.n	801723a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	db3d      	blt.n	801723a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80171c2:	4b59      	ldr	r3, [pc, #356]	@ (8017328 <tcp_receive+0x270>)
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	429a      	cmp	r2, r3
 80171c8:	d137      	bne.n	801723a <tcp_receive+0x182>
              found_dupack = 1;
 80171ca:	2301      	movs	r3, #1
 80171cc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80171d4:	2bff      	cmp	r3, #255	@ 0xff
 80171d6:	d007      	beq.n	80171e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80171de:	3301      	adds	r3, #1
 80171e0:	b2da      	uxtb	r2, r3
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80171ee:	2b03      	cmp	r3, #3
 80171f0:	d91b      	bls.n	801722a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80171fc:	4413      	add	r3, r2
 80171fe:	b29a      	uxth	r2, r3
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017206:	429a      	cmp	r2, r3
 8017208:	d30a      	bcc.n	8017220 <tcp_receive+0x168>
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017214:	4413      	add	r3, r2
 8017216:	b29a      	uxth	r2, r3
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801721e:	e004      	b.n	801722a <tcp_receive+0x172>
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017226:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017230:	2b02      	cmp	r3, #2
 8017232:	d902      	bls.n	801723a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017234:	6878      	ldr	r0, [r7, #4]
 8017236:	f001 fee7 	bl	8019008 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801723a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801723c:	2b00      	cmp	r3, #0
 801723e:	f040 8161 	bne.w	8017504 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	2200      	movs	r2, #0
 8017246:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801724a:	e15b      	b.n	8017504 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801724c:	4b36      	ldr	r3, [pc, #216]	@ (8017328 <tcp_receive+0x270>)
 801724e:	681a      	ldr	r2, [r3, #0]
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017254:	1ad3      	subs	r3, r2, r3
 8017256:	3b01      	subs	r3, #1
 8017258:	2b00      	cmp	r3, #0
 801725a:	f2c0 814e 	blt.w	80174fa <tcp_receive+0x442>
 801725e:	4b32      	ldr	r3, [pc, #200]	@ (8017328 <tcp_receive+0x270>)
 8017260:	681a      	ldr	r2, [r3, #0]
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017266:	1ad3      	subs	r3, r2, r3
 8017268:	2b00      	cmp	r3, #0
 801726a:	f300 8146 	bgt.w	80174fa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	8b5b      	ldrh	r3, [r3, #26]
 8017272:	f003 0304 	and.w	r3, r3, #4
 8017276:	2b00      	cmp	r3, #0
 8017278:	d010      	beq.n	801729c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	8b5b      	ldrh	r3, [r3, #26]
 801727e:	f023 0304 	bic.w	r3, r3, #4
 8017282:	b29a      	uxth	r2, r3
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	2200      	movs	r2, #0
 8017298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	2200      	movs	r2, #0
 80172a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80172aa:	10db      	asrs	r3, r3, #3
 80172ac:	b21b      	sxth	r3, r3
 80172ae:	b29a      	uxth	r2, r3
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80172b6:	b29b      	uxth	r3, r3
 80172b8:	4413      	add	r3, r2
 80172ba:	b29b      	uxth	r3, r3
 80172bc:	b21a      	sxth	r2, r3
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80172c4:	4b18      	ldr	r3, [pc, #96]	@ (8017328 <tcp_receive+0x270>)
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	b29a      	uxth	r2, r3
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80172ce:	b29b      	uxth	r3, r3
 80172d0:	1ad3      	subs	r3, r2, r3
 80172d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	2200      	movs	r2, #0
 80172d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80172dc:	4b12      	ldr	r3, [pc, #72]	@ (8017328 <tcp_receive+0x270>)
 80172de:	681a      	ldr	r2, [r3, #0]
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	7d1b      	ldrb	r3, [r3, #20]
 80172e8:	2b03      	cmp	r3, #3
 80172ea:	f240 8097 	bls.w	801741c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80172fa:	429a      	cmp	r2, r3
 80172fc:	d245      	bcs.n	801738a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	8b5b      	ldrh	r3, [r3, #26]
 8017302:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017306:	2b00      	cmp	r3, #0
 8017308:	d014      	beq.n	8017334 <tcp_receive+0x27c>
 801730a:	2301      	movs	r3, #1
 801730c:	e013      	b.n	8017336 <tcp_receive+0x27e>
 801730e:	bf00      	nop
 8017310:	080200bc 	.word	0x080200bc
 8017314:	080203ec 	.word	0x080203ec
 8017318:	08020108 	.word	0x08020108
 801731c:	08020408 	.word	0x08020408
 8017320:	200276cc 	.word	0x200276cc
 8017324:	200276c0 	.word	0x200276c0
 8017328:	200276c4 	.word	0x200276c4
 801732c:	200276b0 	.word	0x200276b0
 8017330:	200276ca 	.word	0x200276ca
 8017334:	2302      	movs	r3, #2
 8017336:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801733a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801733e:	b29a      	uxth	r2, r3
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017344:	fb12 f303 	smulbb	r3, r2, r3
 8017348:	b29b      	uxth	r3, r3
 801734a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801734c:	4293      	cmp	r3, r2
 801734e:	bf28      	it	cs
 8017350:	4613      	movcs	r3, r2
 8017352:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801735a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801735c:	4413      	add	r3, r2
 801735e:	b29a      	uxth	r2, r3
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017366:	429a      	cmp	r2, r3
 8017368:	d309      	bcc.n	801737e <tcp_receive+0x2c6>
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017370:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017372:	4413      	add	r3, r2
 8017374:	b29a      	uxth	r2, r3
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801737c:	e04e      	b.n	801741c <tcp_receive+0x364>
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017384:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017388:	e048      	b.n	801741c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017390:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017392:	4413      	add	r3, r2
 8017394:	b29a      	uxth	r2, r3
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801739c:	429a      	cmp	r2, r3
 801739e:	d309      	bcc.n	80173b4 <tcp_receive+0x2fc>
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80173a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80173a8:	4413      	add	r3, r2
 80173aa:	b29a      	uxth	r2, r3
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80173b2:	e004      	b.n	80173be <tcp_receive+0x306>
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80173ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80173ca:	429a      	cmp	r2, r3
 80173cc:	d326      	bcc.n	801741c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80173da:	1ad3      	subs	r3, r2, r3
 80173dc:	b29a      	uxth	r2, r3
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80173ee:	4413      	add	r3, r2
 80173f0:	b29a      	uxth	r2, r3
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80173f8:	429a      	cmp	r2, r3
 80173fa:	d30a      	bcc.n	8017412 <tcp_receive+0x35a>
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017406:	4413      	add	r3, r2
 8017408:	b29a      	uxth	r2, r3
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017410:	e004      	b.n	801741c <tcp_receive+0x364>
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017418:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017424:	4a98      	ldr	r2, [pc, #608]	@ (8017688 <tcp_receive+0x5d0>)
 8017426:	6878      	ldr	r0, [r7, #4]
 8017428:	f7ff fdca 	bl	8016fc0 <tcp_free_acked_segments>
 801742c:	4602      	mov	r2, r0
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801743a:	4a94      	ldr	r2, [pc, #592]	@ (801768c <tcp_receive+0x5d4>)
 801743c:	6878      	ldr	r0, [r7, #4]
 801743e:	f7ff fdbf 	bl	8016fc0 <tcp_free_acked_segments>
 8017442:	4602      	mov	r2, r0
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801744c:	2b00      	cmp	r3, #0
 801744e:	d104      	bne.n	801745a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017456:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017458:	e002      	b.n	8017460 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	2200      	movs	r2, #0
 801745e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	2200      	movs	r2, #0
 8017464:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801746a:	2b00      	cmp	r3, #0
 801746c:	d103      	bne.n	8017476 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	2200      	movs	r2, #0
 8017472:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801747c:	4b84      	ldr	r3, [pc, #528]	@ (8017690 <tcp_receive+0x5d8>)
 801747e:	881b      	ldrh	r3, [r3, #0]
 8017480:	4413      	add	r3, r2
 8017482:	b29a      	uxth	r2, r3
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	8b5b      	ldrh	r3, [r3, #26]
 801748e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017492:	2b00      	cmp	r3, #0
 8017494:	d035      	beq.n	8017502 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801749a:	2b00      	cmp	r3, #0
 801749c:	d118      	bne.n	80174d0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d00c      	beq.n	80174c0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80174ae:	68db      	ldr	r3, [r3, #12]
 80174b0:	685b      	ldr	r3, [r3, #4]
 80174b2:	4618      	mov	r0, r3
 80174b4:	f7fb f92a 	bl	801270c <lwip_htonl>
 80174b8:	4603      	mov	r3, r0
 80174ba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80174bc:	2b00      	cmp	r3, #0
 80174be:	dc20      	bgt.n	8017502 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	8b5b      	ldrh	r3, [r3, #26]
 80174c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80174c8:	b29a      	uxth	r2, r3
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80174ce:	e018      	b.n	8017502 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80174d8:	68db      	ldr	r3, [r3, #12]
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	4618      	mov	r0, r3
 80174de:	f7fb f915 	bl	801270c <lwip_htonl>
 80174e2:	4603      	mov	r3, r0
 80174e4:	1ae3      	subs	r3, r4, r3
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	dc0b      	bgt.n	8017502 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	8b5b      	ldrh	r3, [r3, #26]
 80174ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80174f2:	b29a      	uxth	r2, r3
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80174f8:	e003      	b.n	8017502 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f001 ff70 	bl	80193e0 <tcp_send_empty_ack>
 8017500:	e000      	b.n	8017504 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017502:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017508:	2b00      	cmp	r3, #0
 801750a:	d05b      	beq.n	80175c4 <tcp_receive+0x50c>
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017510:	4b60      	ldr	r3, [pc, #384]	@ (8017694 <tcp_receive+0x5dc>)
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	1ad3      	subs	r3, r2, r3
 8017516:	2b00      	cmp	r3, #0
 8017518:	da54      	bge.n	80175c4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801751a:	4b5f      	ldr	r3, [pc, #380]	@ (8017698 <tcp_receive+0x5e0>)
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	b29a      	uxth	r2, r3
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017524:	b29b      	uxth	r3, r3
 8017526:	1ad3      	subs	r3, r2, r3
 8017528:	b29b      	uxth	r3, r3
 801752a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801752e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017538:	10db      	asrs	r3, r3, #3
 801753a:	b21b      	sxth	r3, r3
 801753c:	b29b      	uxth	r3, r3
 801753e:	1ad3      	subs	r3, r2, r3
 8017540:	b29b      	uxth	r3, r3
 8017542:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801754c:	b29a      	uxth	r2, r3
 801754e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017552:	4413      	add	r3, r2
 8017554:	b29b      	uxth	r3, r3
 8017556:	b21a      	sxth	r2, r3
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801755c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8017560:	2b00      	cmp	r3, #0
 8017562:	da05      	bge.n	8017570 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017564:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017568:	425b      	negs	r3, r3
 801756a:	b29b      	uxth	r3, r3
 801756c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017570:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801757a:	109b      	asrs	r3, r3, #2
 801757c:	b21b      	sxth	r3, r3
 801757e:	b29b      	uxth	r3, r3
 8017580:	1ad3      	subs	r3, r2, r3
 8017582:	b29b      	uxth	r3, r3
 8017584:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801758e:	b29a      	uxth	r2, r3
 8017590:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017594:	4413      	add	r3, r2
 8017596:	b29b      	uxth	r3, r3
 8017598:	b21a      	sxth	r2, r3
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80175a4:	10db      	asrs	r3, r3, #3
 80175a6:	b21b      	sxth	r3, r3
 80175a8:	b29a      	uxth	r2, r3
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80175b0:	b29b      	uxth	r3, r3
 80175b2:	4413      	add	r3, r2
 80175b4:	b29b      	uxth	r3, r3
 80175b6:	b21a      	sxth	r2, r3
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	2200      	movs	r2, #0
 80175c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80175c4:	4b35      	ldr	r3, [pc, #212]	@ (801769c <tcp_receive+0x5e4>)
 80175c6:	881b      	ldrh	r3, [r3, #0]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	f000 84df 	beq.w	8017f8c <tcp_receive+0xed4>
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	7d1b      	ldrb	r3, [r3, #20]
 80175d2:	2b06      	cmp	r3, #6
 80175d4:	f200 84da 	bhi.w	8017f8c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80175dc:	4b30      	ldr	r3, [pc, #192]	@ (80176a0 <tcp_receive+0x5e8>)
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	1ad3      	subs	r3, r2, r3
 80175e2:	3b01      	subs	r3, #1
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	f2c0 808f 	blt.w	8017708 <tcp_receive+0x650>
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80175ee:	4b2b      	ldr	r3, [pc, #172]	@ (801769c <tcp_receive+0x5e4>)
 80175f0:	881b      	ldrh	r3, [r3, #0]
 80175f2:	4619      	mov	r1, r3
 80175f4:	4b2a      	ldr	r3, [pc, #168]	@ (80176a0 <tcp_receive+0x5e8>)
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	440b      	add	r3, r1
 80175fa:	1ad3      	subs	r3, r2, r3
 80175fc:	3301      	adds	r3, #1
 80175fe:	2b00      	cmp	r3, #0
 8017600:	f300 8082 	bgt.w	8017708 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017604:	4b27      	ldr	r3, [pc, #156]	@ (80176a4 <tcp_receive+0x5ec>)
 8017606:	685b      	ldr	r3, [r3, #4]
 8017608:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801760e:	4b24      	ldr	r3, [pc, #144]	@ (80176a0 <tcp_receive+0x5e8>)
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	1ad3      	subs	r3, r2, r3
 8017614:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017616:	4b23      	ldr	r3, [pc, #140]	@ (80176a4 <tcp_receive+0x5ec>)
 8017618:	685b      	ldr	r3, [r3, #4]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d106      	bne.n	801762c <tcp_receive+0x574>
 801761e:	4b22      	ldr	r3, [pc, #136]	@ (80176a8 <tcp_receive+0x5f0>)
 8017620:	f240 5294 	movw	r2, #1428	@ 0x594
 8017624:	4921      	ldr	r1, [pc, #132]	@ (80176ac <tcp_receive+0x5f4>)
 8017626:	4822      	ldr	r0, [pc, #136]	@ (80176b0 <tcp_receive+0x5f8>)
 8017628:	f006 fb54 	bl	801dcd4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801762e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017632:	4293      	cmp	r3, r2
 8017634:	d906      	bls.n	8017644 <tcp_receive+0x58c>
 8017636:	4b1c      	ldr	r3, [pc, #112]	@ (80176a8 <tcp_receive+0x5f0>)
 8017638:	f240 5295 	movw	r2, #1429	@ 0x595
 801763c:	491d      	ldr	r1, [pc, #116]	@ (80176b4 <tcp_receive+0x5fc>)
 801763e:	481c      	ldr	r0, [pc, #112]	@ (80176b0 <tcp_receive+0x5f8>)
 8017640:	f006 fb48 	bl	801dcd4 <iprintf>
      off = (u16_t)off32;
 8017644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017646:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801764a:	4b16      	ldr	r3, [pc, #88]	@ (80176a4 <tcp_receive+0x5ec>)
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	891b      	ldrh	r3, [r3, #8]
 8017650:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017654:	429a      	cmp	r2, r3
 8017656:	d906      	bls.n	8017666 <tcp_receive+0x5ae>
 8017658:	4b13      	ldr	r3, [pc, #76]	@ (80176a8 <tcp_receive+0x5f0>)
 801765a:	f240 5297 	movw	r2, #1431	@ 0x597
 801765e:	4916      	ldr	r1, [pc, #88]	@ (80176b8 <tcp_receive+0x600>)
 8017660:	4813      	ldr	r0, [pc, #76]	@ (80176b0 <tcp_receive+0x5f8>)
 8017662:	f006 fb37 	bl	801dcd4 <iprintf>
      inseg.len -= off;
 8017666:	4b0f      	ldr	r3, [pc, #60]	@ (80176a4 <tcp_receive+0x5ec>)
 8017668:	891a      	ldrh	r2, [r3, #8]
 801766a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801766e:	1ad3      	subs	r3, r2, r3
 8017670:	b29a      	uxth	r2, r3
 8017672:	4b0c      	ldr	r3, [pc, #48]	@ (80176a4 <tcp_receive+0x5ec>)
 8017674:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017676:	4b0b      	ldr	r3, [pc, #44]	@ (80176a4 <tcp_receive+0x5ec>)
 8017678:	685b      	ldr	r3, [r3, #4]
 801767a:	891a      	ldrh	r2, [r3, #8]
 801767c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017680:	1ad3      	subs	r3, r2, r3
 8017682:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017684:	e02a      	b.n	80176dc <tcp_receive+0x624>
 8017686:	bf00      	nop
 8017688:	08020424 	.word	0x08020424
 801768c:	0802042c 	.word	0x0802042c
 8017690:	200276c8 	.word	0x200276c8
 8017694:	200276c4 	.word	0x200276c4
 8017698:	20027688 	.word	0x20027688
 801769c:	200276ca 	.word	0x200276ca
 80176a0:	200276c0 	.word	0x200276c0
 80176a4:	200276a0 	.word	0x200276a0
 80176a8:	080200bc 	.word	0x080200bc
 80176ac:	08020434 	.word	0x08020434
 80176b0:	08020108 	.word	0x08020108
 80176b4:	08020444 	.word	0x08020444
 80176b8:	08020454 	.word	0x08020454
        off -= p->len;
 80176bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80176be:	895b      	ldrh	r3, [r3, #10]
 80176c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80176c4:	1ad3      	subs	r3, r2, r3
 80176c6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80176ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80176cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80176ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80176d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80176d2:	2200      	movs	r2, #0
 80176d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80176d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80176dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80176de:	895b      	ldrh	r3, [r3, #10]
 80176e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80176e4:	429a      	cmp	r2, r3
 80176e6:	d8e9      	bhi.n	80176bc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80176e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80176ec:	4619      	mov	r1, r3
 80176ee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80176f0:	f7fc fb5e 	bl	8013db0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176f8:	4a90      	ldr	r2, [pc, #576]	@ (801793c <tcp_receive+0x884>)
 80176fa:	6013      	str	r3, [r2, #0]
 80176fc:	4b90      	ldr	r3, [pc, #576]	@ (8017940 <tcp_receive+0x888>)
 80176fe:	68db      	ldr	r3, [r3, #12]
 8017700:	4a8e      	ldr	r2, [pc, #568]	@ (801793c <tcp_receive+0x884>)
 8017702:	6812      	ldr	r2, [r2, #0]
 8017704:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017706:	e00d      	b.n	8017724 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017708:	4b8c      	ldr	r3, [pc, #560]	@ (801793c <tcp_receive+0x884>)
 801770a:	681a      	ldr	r2, [r3, #0]
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017710:	1ad3      	subs	r3, r2, r3
 8017712:	2b00      	cmp	r3, #0
 8017714:	da06      	bge.n	8017724 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	8b5b      	ldrh	r3, [r3, #26]
 801771a:	f043 0302 	orr.w	r3, r3, #2
 801771e:	b29a      	uxth	r2, r3
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017724:	4b85      	ldr	r3, [pc, #532]	@ (801793c <tcp_receive+0x884>)
 8017726:	681a      	ldr	r2, [r3, #0]
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801772c:	1ad3      	subs	r3, r2, r3
 801772e:	2b00      	cmp	r3, #0
 8017730:	f2c0 8427 	blt.w	8017f82 <tcp_receive+0xeca>
 8017734:	4b81      	ldr	r3, [pc, #516]	@ (801793c <tcp_receive+0x884>)
 8017736:	681a      	ldr	r2, [r3, #0]
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801773c:	6879      	ldr	r1, [r7, #4]
 801773e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017740:	440b      	add	r3, r1
 8017742:	1ad3      	subs	r3, r2, r3
 8017744:	3301      	adds	r3, #1
 8017746:	2b00      	cmp	r3, #0
 8017748:	f300 841b 	bgt.w	8017f82 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017750:	4b7a      	ldr	r3, [pc, #488]	@ (801793c <tcp_receive+0x884>)
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	429a      	cmp	r2, r3
 8017756:	f040 8298 	bne.w	8017c8a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801775a:	4b79      	ldr	r3, [pc, #484]	@ (8017940 <tcp_receive+0x888>)
 801775c:	891c      	ldrh	r4, [r3, #8]
 801775e:	4b78      	ldr	r3, [pc, #480]	@ (8017940 <tcp_receive+0x888>)
 8017760:	68db      	ldr	r3, [r3, #12]
 8017762:	899b      	ldrh	r3, [r3, #12]
 8017764:	b29b      	uxth	r3, r3
 8017766:	4618      	mov	r0, r3
 8017768:	f7fa ffba 	bl	80126e0 <lwip_htons>
 801776c:	4603      	mov	r3, r0
 801776e:	b2db      	uxtb	r3, r3
 8017770:	f003 0303 	and.w	r3, r3, #3
 8017774:	2b00      	cmp	r3, #0
 8017776:	d001      	beq.n	801777c <tcp_receive+0x6c4>
 8017778:	2301      	movs	r3, #1
 801777a:	e000      	b.n	801777e <tcp_receive+0x6c6>
 801777c:	2300      	movs	r3, #0
 801777e:	4423      	add	r3, r4
 8017780:	b29a      	uxth	r2, r3
 8017782:	4b70      	ldr	r3, [pc, #448]	@ (8017944 <tcp_receive+0x88c>)
 8017784:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801778a:	4b6e      	ldr	r3, [pc, #440]	@ (8017944 <tcp_receive+0x88c>)
 801778c:	881b      	ldrh	r3, [r3, #0]
 801778e:	429a      	cmp	r2, r3
 8017790:	d274      	bcs.n	801787c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017792:	4b6b      	ldr	r3, [pc, #428]	@ (8017940 <tcp_receive+0x888>)
 8017794:	68db      	ldr	r3, [r3, #12]
 8017796:	899b      	ldrh	r3, [r3, #12]
 8017798:	b29b      	uxth	r3, r3
 801779a:	4618      	mov	r0, r3
 801779c:	f7fa ffa0 	bl	80126e0 <lwip_htons>
 80177a0:	4603      	mov	r3, r0
 80177a2:	b2db      	uxtb	r3, r3
 80177a4:	f003 0301 	and.w	r3, r3, #1
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d01e      	beq.n	80177ea <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80177ac:	4b64      	ldr	r3, [pc, #400]	@ (8017940 <tcp_receive+0x888>)
 80177ae:	68db      	ldr	r3, [r3, #12]
 80177b0:	899b      	ldrh	r3, [r3, #12]
 80177b2:	b29b      	uxth	r3, r3
 80177b4:	b21b      	sxth	r3, r3
 80177b6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80177ba:	b21c      	sxth	r4, r3
 80177bc:	4b60      	ldr	r3, [pc, #384]	@ (8017940 <tcp_receive+0x888>)
 80177be:	68db      	ldr	r3, [r3, #12]
 80177c0:	899b      	ldrh	r3, [r3, #12]
 80177c2:	b29b      	uxth	r3, r3
 80177c4:	4618      	mov	r0, r3
 80177c6:	f7fa ff8b 	bl	80126e0 <lwip_htons>
 80177ca:	4603      	mov	r3, r0
 80177cc:	b2db      	uxtb	r3, r3
 80177ce:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80177d2:	b29b      	uxth	r3, r3
 80177d4:	4618      	mov	r0, r3
 80177d6:	f7fa ff83 	bl	80126e0 <lwip_htons>
 80177da:	4603      	mov	r3, r0
 80177dc:	b21b      	sxth	r3, r3
 80177de:	4323      	orrs	r3, r4
 80177e0:	b21a      	sxth	r2, r3
 80177e2:	4b57      	ldr	r3, [pc, #348]	@ (8017940 <tcp_receive+0x888>)
 80177e4:	68db      	ldr	r3, [r3, #12]
 80177e6:	b292      	uxth	r2, r2
 80177e8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80177ee:	4b54      	ldr	r3, [pc, #336]	@ (8017940 <tcp_receive+0x888>)
 80177f0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80177f2:	4b53      	ldr	r3, [pc, #332]	@ (8017940 <tcp_receive+0x888>)
 80177f4:	68db      	ldr	r3, [r3, #12]
 80177f6:	899b      	ldrh	r3, [r3, #12]
 80177f8:	b29b      	uxth	r3, r3
 80177fa:	4618      	mov	r0, r3
 80177fc:	f7fa ff70 	bl	80126e0 <lwip_htons>
 8017800:	4603      	mov	r3, r0
 8017802:	b2db      	uxtb	r3, r3
 8017804:	f003 0302 	and.w	r3, r3, #2
 8017808:	2b00      	cmp	r3, #0
 801780a:	d005      	beq.n	8017818 <tcp_receive+0x760>
            inseg.len -= 1;
 801780c:	4b4c      	ldr	r3, [pc, #304]	@ (8017940 <tcp_receive+0x888>)
 801780e:	891b      	ldrh	r3, [r3, #8]
 8017810:	3b01      	subs	r3, #1
 8017812:	b29a      	uxth	r2, r3
 8017814:	4b4a      	ldr	r3, [pc, #296]	@ (8017940 <tcp_receive+0x888>)
 8017816:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017818:	4b49      	ldr	r3, [pc, #292]	@ (8017940 <tcp_receive+0x888>)
 801781a:	685b      	ldr	r3, [r3, #4]
 801781c:	4a48      	ldr	r2, [pc, #288]	@ (8017940 <tcp_receive+0x888>)
 801781e:	8912      	ldrh	r2, [r2, #8]
 8017820:	4611      	mov	r1, r2
 8017822:	4618      	mov	r0, r3
 8017824:	f7fc f9c4 	bl	8013bb0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017828:	4b45      	ldr	r3, [pc, #276]	@ (8017940 <tcp_receive+0x888>)
 801782a:	891c      	ldrh	r4, [r3, #8]
 801782c:	4b44      	ldr	r3, [pc, #272]	@ (8017940 <tcp_receive+0x888>)
 801782e:	68db      	ldr	r3, [r3, #12]
 8017830:	899b      	ldrh	r3, [r3, #12]
 8017832:	b29b      	uxth	r3, r3
 8017834:	4618      	mov	r0, r3
 8017836:	f7fa ff53 	bl	80126e0 <lwip_htons>
 801783a:	4603      	mov	r3, r0
 801783c:	b2db      	uxtb	r3, r3
 801783e:	f003 0303 	and.w	r3, r3, #3
 8017842:	2b00      	cmp	r3, #0
 8017844:	d001      	beq.n	801784a <tcp_receive+0x792>
 8017846:	2301      	movs	r3, #1
 8017848:	e000      	b.n	801784c <tcp_receive+0x794>
 801784a:	2300      	movs	r3, #0
 801784c:	4423      	add	r3, r4
 801784e:	b29a      	uxth	r2, r3
 8017850:	4b3c      	ldr	r3, [pc, #240]	@ (8017944 <tcp_receive+0x88c>)
 8017852:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017854:	4b3b      	ldr	r3, [pc, #236]	@ (8017944 <tcp_receive+0x88c>)
 8017856:	881b      	ldrh	r3, [r3, #0]
 8017858:	461a      	mov	r2, r3
 801785a:	4b38      	ldr	r3, [pc, #224]	@ (801793c <tcp_receive+0x884>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	441a      	add	r2, r3
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017864:	6879      	ldr	r1, [r7, #4]
 8017866:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017868:	440b      	add	r3, r1
 801786a:	429a      	cmp	r2, r3
 801786c:	d006      	beq.n	801787c <tcp_receive+0x7c4>
 801786e:	4b36      	ldr	r3, [pc, #216]	@ (8017948 <tcp_receive+0x890>)
 8017870:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8017874:	4935      	ldr	r1, [pc, #212]	@ (801794c <tcp_receive+0x894>)
 8017876:	4836      	ldr	r0, [pc, #216]	@ (8017950 <tcp_receive+0x898>)
 8017878:	f006 fa2c 	bl	801dcd4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017880:	2b00      	cmp	r3, #0
 8017882:	f000 80e6 	beq.w	8017a52 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017886:	4b2e      	ldr	r3, [pc, #184]	@ (8017940 <tcp_receive+0x888>)
 8017888:	68db      	ldr	r3, [r3, #12]
 801788a:	899b      	ldrh	r3, [r3, #12]
 801788c:	b29b      	uxth	r3, r3
 801788e:	4618      	mov	r0, r3
 8017890:	f7fa ff26 	bl	80126e0 <lwip_htons>
 8017894:	4603      	mov	r3, r0
 8017896:	b2db      	uxtb	r3, r3
 8017898:	f003 0301 	and.w	r3, r3, #1
 801789c:	2b00      	cmp	r3, #0
 801789e:	d010      	beq.n	80178c2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80178a0:	e00a      	b.n	80178b8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80178a6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80178ac:	681a      	ldr	r2, [r3, #0]
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80178b2:	68f8      	ldr	r0, [r7, #12]
 80178b4:	f7fd fd93 	bl	80153de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d1f0      	bne.n	80178a2 <tcp_receive+0x7ea>
 80178c0:	e0c7      	b.n	8017a52 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80178c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80178c8:	e051      	b.n	801796e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80178ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80178cc:	68db      	ldr	r3, [r3, #12]
 80178ce:	899b      	ldrh	r3, [r3, #12]
 80178d0:	b29b      	uxth	r3, r3
 80178d2:	4618      	mov	r0, r3
 80178d4:	f7fa ff04 	bl	80126e0 <lwip_htons>
 80178d8:	4603      	mov	r3, r0
 80178da:	b2db      	uxtb	r3, r3
 80178dc:	f003 0301 	and.w	r3, r3, #1
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d03c      	beq.n	801795e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80178e4:	4b16      	ldr	r3, [pc, #88]	@ (8017940 <tcp_receive+0x888>)
 80178e6:	68db      	ldr	r3, [r3, #12]
 80178e8:	899b      	ldrh	r3, [r3, #12]
 80178ea:	b29b      	uxth	r3, r3
 80178ec:	4618      	mov	r0, r3
 80178ee:	f7fa fef7 	bl	80126e0 <lwip_htons>
 80178f2:	4603      	mov	r3, r0
 80178f4:	b2db      	uxtb	r3, r3
 80178f6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d12f      	bne.n	801795e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80178fe:	4b10      	ldr	r3, [pc, #64]	@ (8017940 <tcp_receive+0x888>)
 8017900:	68db      	ldr	r3, [r3, #12]
 8017902:	899b      	ldrh	r3, [r3, #12]
 8017904:	b29c      	uxth	r4, r3
 8017906:	2001      	movs	r0, #1
 8017908:	f7fa feea 	bl	80126e0 <lwip_htons>
 801790c:	4603      	mov	r3, r0
 801790e:	461a      	mov	r2, r3
 8017910:	4b0b      	ldr	r3, [pc, #44]	@ (8017940 <tcp_receive+0x888>)
 8017912:	68db      	ldr	r3, [r3, #12]
 8017914:	4322      	orrs	r2, r4
 8017916:	b292      	uxth	r2, r2
 8017918:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801791a:	4b09      	ldr	r3, [pc, #36]	@ (8017940 <tcp_receive+0x888>)
 801791c:	891c      	ldrh	r4, [r3, #8]
 801791e:	4b08      	ldr	r3, [pc, #32]	@ (8017940 <tcp_receive+0x888>)
 8017920:	68db      	ldr	r3, [r3, #12]
 8017922:	899b      	ldrh	r3, [r3, #12]
 8017924:	b29b      	uxth	r3, r3
 8017926:	4618      	mov	r0, r3
 8017928:	f7fa feda 	bl	80126e0 <lwip_htons>
 801792c:	4603      	mov	r3, r0
 801792e:	b2db      	uxtb	r3, r3
 8017930:	f003 0303 	and.w	r3, r3, #3
 8017934:	2b00      	cmp	r3, #0
 8017936:	d00d      	beq.n	8017954 <tcp_receive+0x89c>
 8017938:	2301      	movs	r3, #1
 801793a:	e00c      	b.n	8017956 <tcp_receive+0x89e>
 801793c:	200276c0 	.word	0x200276c0
 8017940:	200276a0 	.word	0x200276a0
 8017944:	200276ca 	.word	0x200276ca
 8017948:	080200bc 	.word	0x080200bc
 801794c:	08020464 	.word	0x08020464
 8017950:	08020108 	.word	0x08020108
 8017954:	2300      	movs	r3, #0
 8017956:	4423      	add	r3, r4
 8017958:	b29a      	uxth	r2, r3
 801795a:	4b98      	ldr	r3, [pc, #608]	@ (8017bbc <tcp_receive+0xb04>)
 801795c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801795e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017960:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8017968:	6938      	ldr	r0, [r7, #16]
 801796a:	f7fd fd38 	bl	80153de <tcp_seg_free>
            while (next &&
 801796e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017970:	2b00      	cmp	r3, #0
 8017972:	d00e      	beq.n	8017992 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017974:	4b91      	ldr	r3, [pc, #580]	@ (8017bbc <tcp_receive+0xb04>)
 8017976:	881b      	ldrh	r3, [r3, #0]
 8017978:	461a      	mov	r2, r3
 801797a:	4b91      	ldr	r3, [pc, #580]	@ (8017bc0 <tcp_receive+0xb08>)
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	441a      	add	r2, r3
 8017980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017982:	68db      	ldr	r3, [r3, #12]
 8017984:	685b      	ldr	r3, [r3, #4]
 8017986:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017988:	8909      	ldrh	r1, [r1, #8]
 801798a:	440b      	add	r3, r1
 801798c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801798e:	2b00      	cmp	r3, #0
 8017990:	da9b      	bge.n	80178ca <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017994:	2b00      	cmp	r3, #0
 8017996:	d059      	beq.n	8017a4c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017998:	4b88      	ldr	r3, [pc, #544]	@ (8017bbc <tcp_receive+0xb04>)
 801799a:	881b      	ldrh	r3, [r3, #0]
 801799c:	461a      	mov	r2, r3
 801799e:	4b88      	ldr	r3, [pc, #544]	@ (8017bc0 <tcp_receive+0xb08>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	441a      	add	r2, r3
 80179a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80179a6:	68db      	ldr	r3, [r3, #12]
 80179a8:	685b      	ldr	r3, [r3, #4]
 80179aa:	1ad3      	subs	r3, r2, r3
            if (next &&
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	dd4d      	ble.n	8017a4c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80179b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80179b2:	68db      	ldr	r3, [r3, #12]
 80179b4:	685b      	ldr	r3, [r3, #4]
 80179b6:	b29a      	uxth	r2, r3
 80179b8:	4b81      	ldr	r3, [pc, #516]	@ (8017bc0 <tcp_receive+0xb08>)
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	b29b      	uxth	r3, r3
 80179be:	1ad3      	subs	r3, r2, r3
 80179c0:	b29a      	uxth	r2, r3
 80179c2:	4b80      	ldr	r3, [pc, #512]	@ (8017bc4 <tcp_receive+0xb0c>)
 80179c4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80179c6:	4b7f      	ldr	r3, [pc, #508]	@ (8017bc4 <tcp_receive+0xb0c>)
 80179c8:	68db      	ldr	r3, [r3, #12]
 80179ca:	899b      	ldrh	r3, [r3, #12]
 80179cc:	b29b      	uxth	r3, r3
 80179ce:	4618      	mov	r0, r3
 80179d0:	f7fa fe86 	bl	80126e0 <lwip_htons>
 80179d4:	4603      	mov	r3, r0
 80179d6:	b2db      	uxtb	r3, r3
 80179d8:	f003 0302 	and.w	r3, r3, #2
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d005      	beq.n	80179ec <tcp_receive+0x934>
                inseg.len -= 1;
 80179e0:	4b78      	ldr	r3, [pc, #480]	@ (8017bc4 <tcp_receive+0xb0c>)
 80179e2:	891b      	ldrh	r3, [r3, #8]
 80179e4:	3b01      	subs	r3, #1
 80179e6:	b29a      	uxth	r2, r3
 80179e8:	4b76      	ldr	r3, [pc, #472]	@ (8017bc4 <tcp_receive+0xb0c>)
 80179ea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80179ec:	4b75      	ldr	r3, [pc, #468]	@ (8017bc4 <tcp_receive+0xb0c>)
 80179ee:	685b      	ldr	r3, [r3, #4]
 80179f0:	4a74      	ldr	r2, [pc, #464]	@ (8017bc4 <tcp_receive+0xb0c>)
 80179f2:	8912      	ldrh	r2, [r2, #8]
 80179f4:	4611      	mov	r1, r2
 80179f6:	4618      	mov	r0, r3
 80179f8:	f7fc f8da 	bl	8013bb0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80179fc:	4b71      	ldr	r3, [pc, #452]	@ (8017bc4 <tcp_receive+0xb0c>)
 80179fe:	891c      	ldrh	r4, [r3, #8]
 8017a00:	4b70      	ldr	r3, [pc, #448]	@ (8017bc4 <tcp_receive+0xb0c>)
 8017a02:	68db      	ldr	r3, [r3, #12]
 8017a04:	899b      	ldrh	r3, [r3, #12]
 8017a06:	b29b      	uxth	r3, r3
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f7fa fe69 	bl	80126e0 <lwip_htons>
 8017a0e:	4603      	mov	r3, r0
 8017a10:	b2db      	uxtb	r3, r3
 8017a12:	f003 0303 	and.w	r3, r3, #3
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d001      	beq.n	8017a1e <tcp_receive+0x966>
 8017a1a:	2301      	movs	r3, #1
 8017a1c:	e000      	b.n	8017a20 <tcp_receive+0x968>
 8017a1e:	2300      	movs	r3, #0
 8017a20:	4423      	add	r3, r4
 8017a22:	b29a      	uxth	r2, r3
 8017a24:	4b65      	ldr	r3, [pc, #404]	@ (8017bbc <tcp_receive+0xb04>)
 8017a26:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017a28:	4b64      	ldr	r3, [pc, #400]	@ (8017bbc <tcp_receive+0xb04>)
 8017a2a:	881b      	ldrh	r3, [r3, #0]
 8017a2c:	461a      	mov	r2, r3
 8017a2e:	4b64      	ldr	r3, [pc, #400]	@ (8017bc0 <tcp_receive+0xb08>)
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	441a      	add	r2, r3
 8017a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a36:	68db      	ldr	r3, [r3, #12]
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	429a      	cmp	r2, r3
 8017a3c:	d006      	beq.n	8017a4c <tcp_receive+0x994>
 8017a3e:	4b62      	ldr	r3, [pc, #392]	@ (8017bc8 <tcp_receive+0xb10>)
 8017a40:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8017a44:	4961      	ldr	r1, [pc, #388]	@ (8017bcc <tcp_receive+0xb14>)
 8017a46:	4862      	ldr	r0, [pc, #392]	@ (8017bd0 <tcp_receive+0xb18>)
 8017a48:	f006 f944 	bl	801dcd4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017a50:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017a52:	4b5a      	ldr	r3, [pc, #360]	@ (8017bbc <tcp_receive+0xb04>)
 8017a54:	881b      	ldrh	r3, [r3, #0]
 8017a56:	461a      	mov	r2, r3
 8017a58:	4b59      	ldr	r3, [pc, #356]	@ (8017bc0 <tcp_receive+0xb08>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	441a      	add	r2, r3
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017a66:	4b55      	ldr	r3, [pc, #340]	@ (8017bbc <tcp_receive+0xb04>)
 8017a68:	881b      	ldrh	r3, [r3, #0]
 8017a6a:	429a      	cmp	r2, r3
 8017a6c:	d206      	bcs.n	8017a7c <tcp_receive+0x9c4>
 8017a6e:	4b56      	ldr	r3, [pc, #344]	@ (8017bc8 <tcp_receive+0xb10>)
 8017a70:	f240 6207 	movw	r2, #1543	@ 0x607
 8017a74:	4957      	ldr	r1, [pc, #348]	@ (8017bd4 <tcp_receive+0xb1c>)
 8017a76:	4856      	ldr	r0, [pc, #344]	@ (8017bd0 <tcp_receive+0xb18>)
 8017a78:	f006 f92c 	bl	801dcd4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017a80:	4b4e      	ldr	r3, [pc, #312]	@ (8017bbc <tcp_receive+0xb04>)
 8017a82:	881b      	ldrh	r3, [r3, #0]
 8017a84:	1ad3      	subs	r3, r2, r3
 8017a86:	b29a      	uxth	r2, r3
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017a8c:	6878      	ldr	r0, [r7, #4]
 8017a8e:	f7fc ffc5 	bl	8014a1c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8017a92:	4b4c      	ldr	r3, [pc, #304]	@ (8017bc4 <tcp_receive+0xb0c>)
 8017a94:	685b      	ldr	r3, [r3, #4]
 8017a96:	891b      	ldrh	r3, [r3, #8]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d006      	beq.n	8017aaa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8017a9c:	4b49      	ldr	r3, [pc, #292]	@ (8017bc4 <tcp_receive+0xb0c>)
 8017a9e:	685b      	ldr	r3, [r3, #4]
 8017aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8017bd8 <tcp_receive+0xb20>)
 8017aa2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017aa4:	4b47      	ldr	r3, [pc, #284]	@ (8017bc4 <tcp_receive+0xb0c>)
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017aaa:	4b46      	ldr	r3, [pc, #280]	@ (8017bc4 <tcp_receive+0xb0c>)
 8017aac:	68db      	ldr	r3, [r3, #12]
 8017aae:	899b      	ldrh	r3, [r3, #12]
 8017ab0:	b29b      	uxth	r3, r3
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7fa fe14 	bl	80126e0 <lwip_htons>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	b2db      	uxtb	r3, r3
 8017abc:	f003 0301 	and.w	r3, r3, #1
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	f000 80b8 	beq.w	8017c36 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8017ac6:	4b45      	ldr	r3, [pc, #276]	@ (8017bdc <tcp_receive+0xb24>)
 8017ac8:	781b      	ldrb	r3, [r3, #0]
 8017aca:	f043 0320 	orr.w	r3, r3, #32
 8017ace:	b2da      	uxtb	r2, r3
 8017ad0:	4b42      	ldr	r3, [pc, #264]	@ (8017bdc <tcp_receive+0xb24>)
 8017ad2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8017ad4:	e0af      	b.n	8017c36 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ada:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ae0:	68db      	ldr	r3, [r3, #12]
 8017ae2:	685b      	ldr	r3, [r3, #4]
 8017ae4:	4a36      	ldr	r2, [pc, #216]	@ (8017bc0 <tcp_receive+0xb08>)
 8017ae6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	891b      	ldrh	r3, [r3, #8]
 8017aec:	461c      	mov	r4, r3
 8017aee:	68bb      	ldr	r3, [r7, #8]
 8017af0:	68db      	ldr	r3, [r3, #12]
 8017af2:	899b      	ldrh	r3, [r3, #12]
 8017af4:	b29b      	uxth	r3, r3
 8017af6:	4618      	mov	r0, r3
 8017af8:	f7fa fdf2 	bl	80126e0 <lwip_htons>
 8017afc:	4603      	mov	r3, r0
 8017afe:	b2db      	uxtb	r3, r3
 8017b00:	f003 0303 	and.w	r3, r3, #3
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d001      	beq.n	8017b0c <tcp_receive+0xa54>
 8017b08:	2301      	movs	r3, #1
 8017b0a:	e000      	b.n	8017b0e <tcp_receive+0xa56>
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	191a      	adds	r2, r3, r4
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b14:	441a      	add	r2, r3
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017b1e:	461c      	mov	r4, r3
 8017b20:	68bb      	ldr	r3, [r7, #8]
 8017b22:	891b      	ldrh	r3, [r3, #8]
 8017b24:	461d      	mov	r5, r3
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	68db      	ldr	r3, [r3, #12]
 8017b2a:	899b      	ldrh	r3, [r3, #12]
 8017b2c:	b29b      	uxth	r3, r3
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f7fa fdd6 	bl	80126e0 <lwip_htons>
 8017b34:	4603      	mov	r3, r0
 8017b36:	b2db      	uxtb	r3, r3
 8017b38:	f003 0303 	and.w	r3, r3, #3
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d001      	beq.n	8017b44 <tcp_receive+0xa8c>
 8017b40:	2301      	movs	r3, #1
 8017b42:	e000      	b.n	8017b46 <tcp_receive+0xa8e>
 8017b44:	2300      	movs	r3, #0
 8017b46:	442b      	add	r3, r5
 8017b48:	429c      	cmp	r4, r3
 8017b4a:	d206      	bcs.n	8017b5a <tcp_receive+0xaa2>
 8017b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8017bc8 <tcp_receive+0xb10>)
 8017b4e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8017b52:	4923      	ldr	r1, [pc, #140]	@ (8017be0 <tcp_receive+0xb28>)
 8017b54:	481e      	ldr	r0, [pc, #120]	@ (8017bd0 <tcp_receive+0xb18>)
 8017b56:	f006 f8bd 	bl	801dcd4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	891b      	ldrh	r3, [r3, #8]
 8017b5e:	461c      	mov	r4, r3
 8017b60:	68bb      	ldr	r3, [r7, #8]
 8017b62:	68db      	ldr	r3, [r3, #12]
 8017b64:	899b      	ldrh	r3, [r3, #12]
 8017b66:	b29b      	uxth	r3, r3
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7fa fdb9 	bl	80126e0 <lwip_htons>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	b2db      	uxtb	r3, r3
 8017b72:	f003 0303 	and.w	r3, r3, #3
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d001      	beq.n	8017b7e <tcp_receive+0xac6>
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	e000      	b.n	8017b80 <tcp_receive+0xac8>
 8017b7e:	2300      	movs	r3, #0
 8017b80:	1919      	adds	r1, r3, r4
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017b86:	b28b      	uxth	r3, r1
 8017b88:	1ad3      	subs	r3, r2, r3
 8017b8a:	b29a      	uxth	r2, r3
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017b90:	6878      	ldr	r0, [r7, #4]
 8017b92:	f7fc ff43 	bl	8014a1c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	685b      	ldr	r3, [r3, #4]
 8017b9a:	891b      	ldrh	r3, [r3, #8]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d028      	beq.n	8017bf2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8017bd8 <tcp_receive+0xb20>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d01d      	beq.n	8017be4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8017bd8 <tcp_receive+0xb20>)
 8017baa:	681a      	ldr	r2, [r3, #0]
 8017bac:	68bb      	ldr	r3, [r7, #8]
 8017bae:	685b      	ldr	r3, [r3, #4]
 8017bb0:	4619      	mov	r1, r3
 8017bb2:	4610      	mov	r0, r2
 8017bb4:	f7fc fa50 	bl	8014058 <pbuf_cat>
 8017bb8:	e018      	b.n	8017bec <tcp_receive+0xb34>
 8017bba:	bf00      	nop
 8017bbc:	200276ca 	.word	0x200276ca
 8017bc0:	200276c0 	.word	0x200276c0
 8017bc4:	200276a0 	.word	0x200276a0
 8017bc8:	080200bc 	.word	0x080200bc
 8017bcc:	0802049c 	.word	0x0802049c
 8017bd0:	08020108 	.word	0x08020108
 8017bd4:	080204d8 	.word	0x080204d8
 8017bd8:	200276d0 	.word	0x200276d0
 8017bdc:	200276cd 	.word	0x200276cd
 8017be0:	080204f8 	.word	0x080204f8
            } else {
              recv_data = cseg->p;
 8017be4:	68bb      	ldr	r3, [r7, #8]
 8017be6:	685b      	ldr	r3, [r3, #4]
 8017be8:	4a70      	ldr	r2, [pc, #448]	@ (8017dac <tcp_receive+0xcf4>)
 8017bea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8017bec:	68bb      	ldr	r3, [r7, #8]
 8017bee:	2200      	movs	r2, #0
 8017bf0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017bf2:	68bb      	ldr	r3, [r7, #8]
 8017bf4:	68db      	ldr	r3, [r3, #12]
 8017bf6:	899b      	ldrh	r3, [r3, #12]
 8017bf8:	b29b      	uxth	r3, r3
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7fa fd70 	bl	80126e0 <lwip_htons>
 8017c00:	4603      	mov	r3, r0
 8017c02:	b2db      	uxtb	r3, r3
 8017c04:	f003 0301 	and.w	r3, r3, #1
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d00d      	beq.n	8017c28 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8017c0c:	4b68      	ldr	r3, [pc, #416]	@ (8017db0 <tcp_receive+0xcf8>)
 8017c0e:	781b      	ldrb	r3, [r3, #0]
 8017c10:	f043 0320 	orr.w	r3, r3, #32
 8017c14:	b2da      	uxtb	r2, r3
 8017c16:	4b66      	ldr	r3, [pc, #408]	@ (8017db0 <tcp_receive+0xcf8>)
 8017c18:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	7d1b      	ldrb	r3, [r3, #20]
 8017c1e:	2b04      	cmp	r3, #4
 8017c20:	d102      	bne.n	8017c28 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	2207      	movs	r2, #7
 8017c26:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	681a      	ldr	r2, [r3, #0]
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8017c30:	68b8      	ldr	r0, [r7, #8]
 8017c32:	f7fd fbd4 	bl	80153de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d008      	beq.n	8017c50 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c42:	68db      	ldr	r3, [r3, #12]
 8017c44:	685a      	ldr	r2, [r3, #4]
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8017c4a:	429a      	cmp	r2, r3
 8017c4c:	f43f af43 	beq.w	8017ad6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	8b5b      	ldrh	r3, [r3, #26]
 8017c54:	f003 0301 	and.w	r3, r3, #1
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d00e      	beq.n	8017c7a <tcp_receive+0xbc2>
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	8b5b      	ldrh	r3, [r3, #26]
 8017c60:	f023 0301 	bic.w	r3, r3, #1
 8017c64:	b29a      	uxth	r2, r3
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	835a      	strh	r2, [r3, #26]
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	8b5b      	ldrh	r3, [r3, #26]
 8017c6e:	f043 0302 	orr.w	r3, r3, #2
 8017c72:	b29a      	uxth	r2, r3
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017c78:	e187      	b.n	8017f8a <tcp_receive+0xed2>
        tcp_ack(pcb);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	8b5b      	ldrh	r3, [r3, #26]
 8017c7e:	f043 0301 	orr.w	r3, r3, #1
 8017c82:	b29a      	uxth	r2, r3
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017c88:	e17f      	b.n	8017f8a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d106      	bne.n	8017ca0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017c92:	4848      	ldr	r0, [pc, #288]	@ (8017db4 <tcp_receive+0xcfc>)
 8017c94:	f7fd fbbc 	bl	8015410 <tcp_seg_copy>
 8017c98:	4602      	mov	r2, r0
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	675a      	str	r2, [r3, #116]	@ 0x74
 8017c9e:	e16c      	b.n	8017f7a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017caa:	e156      	b.n	8017f5a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8017cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cae:	68db      	ldr	r3, [r3, #12]
 8017cb0:	685a      	ldr	r2, [r3, #4]
 8017cb2:	4b41      	ldr	r3, [pc, #260]	@ (8017db8 <tcp_receive+0xd00>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	d11d      	bne.n	8017cf6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8017cba:	4b3e      	ldr	r3, [pc, #248]	@ (8017db4 <tcp_receive+0xcfc>)
 8017cbc:	891a      	ldrh	r2, [r3, #8]
 8017cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cc0:	891b      	ldrh	r3, [r3, #8]
 8017cc2:	429a      	cmp	r2, r3
 8017cc4:	f240 814e 	bls.w	8017f64 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017cc8:	483a      	ldr	r0, [pc, #232]	@ (8017db4 <tcp_receive+0xcfc>)
 8017cca:	f7fd fba1 	bl	8015410 <tcp_seg_copy>
 8017cce:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017cd0:	697b      	ldr	r3, [r7, #20]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	f000 8148 	beq.w	8017f68 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8017cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d003      	beq.n	8017ce6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8017cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ce0:	697a      	ldr	r2, [r7, #20]
 8017ce2:	601a      	str	r2, [r3, #0]
 8017ce4:	e002      	b.n	8017cec <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	697a      	ldr	r2, [r7, #20]
 8017cea:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8017cec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017cee:	6978      	ldr	r0, [r7, #20]
 8017cf0:	f7ff f8de 	bl	8016eb0 <tcp_oos_insert_segment>
                }
                break;
 8017cf4:	e138      	b.n	8017f68 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d117      	bne.n	8017d2c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8017db8 <tcp_receive+0xd00>)
 8017cfe:	681a      	ldr	r2, [r3, #0]
 8017d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d02:	68db      	ldr	r3, [r3, #12]
 8017d04:	685b      	ldr	r3, [r3, #4]
 8017d06:	1ad3      	subs	r3, r2, r3
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	da57      	bge.n	8017dbc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017d0c:	4829      	ldr	r0, [pc, #164]	@ (8017db4 <tcp_receive+0xcfc>)
 8017d0e:	f7fd fb7f 	bl	8015410 <tcp_seg_copy>
 8017d12:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017d14:	69bb      	ldr	r3, [r7, #24]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	f000 8128 	beq.w	8017f6c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	69ba      	ldr	r2, [r7, #24]
 8017d20:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017d22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017d24:	69b8      	ldr	r0, [r7, #24]
 8017d26:	f7ff f8c3 	bl	8016eb0 <tcp_oos_insert_segment>
                  }
                  break;
 8017d2a:	e11f      	b.n	8017f6c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017d2c:	4b22      	ldr	r3, [pc, #136]	@ (8017db8 <tcp_receive+0xd00>)
 8017d2e:	681a      	ldr	r2, [r3, #0]
 8017d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d32:	68db      	ldr	r3, [r3, #12]
 8017d34:	685b      	ldr	r3, [r3, #4]
 8017d36:	1ad3      	subs	r3, r2, r3
 8017d38:	3b01      	subs	r3, #1
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	db3e      	blt.n	8017dbc <tcp_receive+0xd04>
 8017d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8017db8 <tcp_receive+0xd00>)
 8017d40:	681a      	ldr	r2, [r3, #0]
 8017d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d44:	68db      	ldr	r3, [r3, #12]
 8017d46:	685b      	ldr	r3, [r3, #4]
 8017d48:	1ad3      	subs	r3, r2, r3
 8017d4a:	3301      	adds	r3, #1
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	dc35      	bgt.n	8017dbc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017d50:	4818      	ldr	r0, [pc, #96]	@ (8017db4 <tcp_receive+0xcfc>)
 8017d52:	f7fd fb5d 	bl	8015410 <tcp_seg_copy>
 8017d56:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017d58:	69fb      	ldr	r3, [r7, #28]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	f000 8108 	beq.w	8017f70 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d62:	68db      	ldr	r3, [r3, #12]
 8017d64:	685b      	ldr	r3, [r3, #4]
 8017d66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017d68:	8912      	ldrh	r2, [r2, #8]
 8017d6a:	441a      	add	r2, r3
 8017d6c:	4b12      	ldr	r3, [pc, #72]	@ (8017db8 <tcp_receive+0xd00>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	1ad3      	subs	r3, r2, r3
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	dd12      	ble.n	8017d9c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017d76:	4b10      	ldr	r3, [pc, #64]	@ (8017db8 <tcp_receive+0xd00>)
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	b29a      	uxth	r2, r3
 8017d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d7e:	68db      	ldr	r3, [r3, #12]
 8017d80:	685b      	ldr	r3, [r3, #4]
 8017d82:	b29b      	uxth	r3, r3
 8017d84:	1ad3      	subs	r3, r2, r3
 8017d86:	b29a      	uxth	r2, r3
 8017d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d8a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d8e:	685a      	ldr	r2, [r3, #4]
 8017d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d92:	891b      	ldrh	r3, [r3, #8]
 8017d94:	4619      	mov	r1, r3
 8017d96:	4610      	mov	r0, r2
 8017d98:	f7fb ff0a 	bl	8013bb0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d9e:	69fa      	ldr	r2, [r7, #28]
 8017da0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017da2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017da4:	69f8      	ldr	r0, [r7, #28]
 8017da6:	f7ff f883 	bl	8016eb0 <tcp_oos_insert_segment>
                  }
                  break;
 8017daa:	e0e1      	b.n	8017f70 <tcp_receive+0xeb8>
 8017dac:	200276d0 	.word	0x200276d0
 8017db0:	200276cd 	.word	0x200276cd
 8017db4:	200276a0 	.word	0x200276a0
 8017db8:	200276c0 	.word	0x200276c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8017dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dbe:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	f040 80c5 	bne.w	8017f54 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8017dca:	4b7f      	ldr	r3, [pc, #508]	@ (8017fc8 <tcp_receive+0xf10>)
 8017dcc:	681a      	ldr	r2, [r3, #0]
 8017dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dd0:	68db      	ldr	r3, [r3, #12]
 8017dd2:	685b      	ldr	r3, [r3, #4]
 8017dd4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	f340 80bc 	ble.w	8017f54 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dde:	68db      	ldr	r3, [r3, #12]
 8017de0:	899b      	ldrh	r3, [r3, #12]
 8017de2:	b29b      	uxth	r3, r3
 8017de4:	4618      	mov	r0, r3
 8017de6:	f7fa fc7b 	bl	80126e0 <lwip_htons>
 8017dea:	4603      	mov	r3, r0
 8017dec:	b2db      	uxtb	r3, r3
 8017dee:	f003 0301 	and.w	r3, r3, #1
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	f040 80be 	bne.w	8017f74 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017df8:	4874      	ldr	r0, [pc, #464]	@ (8017fcc <tcp_receive+0xf14>)
 8017dfa:	f7fd fb09 	bl	8015410 <tcp_seg_copy>
 8017dfe:	4602      	mov	r2, r0
 8017e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e02:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	f000 80b5 	beq.w	8017f78 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8017e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e10:	68db      	ldr	r3, [r3, #12]
 8017e12:	685b      	ldr	r3, [r3, #4]
 8017e14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017e16:	8912      	ldrh	r2, [r2, #8]
 8017e18:	441a      	add	r2, r3
 8017e1a:	4b6b      	ldr	r3, [pc, #428]	@ (8017fc8 <tcp_receive+0xf10>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	1ad3      	subs	r3, r2, r3
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	dd12      	ble.n	8017e4a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017e24:	4b68      	ldr	r3, [pc, #416]	@ (8017fc8 <tcp_receive+0xf10>)
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	b29a      	uxth	r2, r3
 8017e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e2c:	68db      	ldr	r3, [r3, #12]
 8017e2e:	685b      	ldr	r3, [r3, #4]
 8017e30:	b29b      	uxth	r3, r3
 8017e32:	1ad3      	subs	r3, r2, r3
 8017e34:	b29a      	uxth	r2, r3
 8017e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e38:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8017e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e3c:	685a      	ldr	r2, [r3, #4]
 8017e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e40:	891b      	ldrh	r3, [r3, #8]
 8017e42:	4619      	mov	r1, r3
 8017e44:	4610      	mov	r0, r2
 8017e46:	f7fb feb3 	bl	8013bb0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8017e4a:	4b61      	ldr	r3, [pc, #388]	@ (8017fd0 <tcp_receive+0xf18>)
 8017e4c:	881b      	ldrh	r3, [r3, #0]
 8017e4e:	461a      	mov	r2, r3
 8017e50:	4b5d      	ldr	r3, [pc, #372]	@ (8017fc8 <tcp_receive+0xf10>)
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	441a      	add	r2, r3
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e5a:	6879      	ldr	r1, [r7, #4]
 8017e5c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017e5e:	440b      	add	r3, r1
 8017e60:	1ad3      	subs	r3, r2, r3
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	f340 8088 	ble.w	8017f78 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	68db      	ldr	r3, [r3, #12]
 8017e6e:	899b      	ldrh	r3, [r3, #12]
 8017e70:	b29b      	uxth	r3, r3
 8017e72:	4618      	mov	r0, r3
 8017e74:	f7fa fc34 	bl	80126e0 <lwip_htons>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	b2db      	uxtb	r3, r3
 8017e7c:	f003 0301 	and.w	r3, r3, #1
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d021      	beq.n	8017ec8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	68db      	ldr	r3, [r3, #12]
 8017e8a:	899b      	ldrh	r3, [r3, #12]
 8017e8c:	b29b      	uxth	r3, r3
 8017e8e:	b21b      	sxth	r3, r3
 8017e90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017e94:	b21c      	sxth	r4, r3
 8017e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	68db      	ldr	r3, [r3, #12]
 8017e9c:	899b      	ldrh	r3, [r3, #12]
 8017e9e:	b29b      	uxth	r3, r3
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f7fa fc1d 	bl	80126e0 <lwip_htons>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	b2db      	uxtb	r3, r3
 8017eaa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017eae:	b29b      	uxth	r3, r3
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f7fa fc15 	bl	80126e0 <lwip_htons>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	b21b      	sxth	r3, r3
 8017eba:	4323      	orrs	r3, r4
 8017ebc:	b21a      	sxth	r2, r3
 8017ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	68db      	ldr	r3, [r3, #12]
 8017ec4:	b292      	uxth	r2, r2
 8017ec6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ecc:	b29a      	uxth	r2, r3
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017ed2:	4413      	add	r3, r2
 8017ed4:	b299      	uxth	r1, r3
 8017ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8017fc8 <tcp_receive+0xf10>)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	b29a      	uxth	r2, r3
 8017edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	1a8a      	subs	r2, r1, r2
 8017ee2:	b292      	uxth	r2, r2
 8017ee4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	685a      	ldr	r2, [r3, #4]
 8017eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	891b      	ldrh	r3, [r3, #8]
 8017ef2:	4619      	mov	r1, r3
 8017ef4:	4610      	mov	r0, r2
 8017ef6:	f7fb fe5b 	bl	8013bb0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	891c      	ldrh	r4, [r3, #8]
 8017f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	68db      	ldr	r3, [r3, #12]
 8017f06:	899b      	ldrh	r3, [r3, #12]
 8017f08:	b29b      	uxth	r3, r3
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f7fa fbe8 	bl	80126e0 <lwip_htons>
 8017f10:	4603      	mov	r3, r0
 8017f12:	b2db      	uxtb	r3, r3
 8017f14:	f003 0303 	and.w	r3, r3, #3
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d001      	beq.n	8017f20 <tcp_receive+0xe68>
 8017f1c:	2301      	movs	r3, #1
 8017f1e:	e000      	b.n	8017f22 <tcp_receive+0xe6a>
 8017f20:	2300      	movs	r3, #0
 8017f22:	4423      	add	r3, r4
 8017f24:	b29a      	uxth	r2, r3
 8017f26:	4b2a      	ldr	r3, [pc, #168]	@ (8017fd0 <tcp_receive+0xf18>)
 8017f28:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017f2a:	4b29      	ldr	r3, [pc, #164]	@ (8017fd0 <tcp_receive+0xf18>)
 8017f2c:	881b      	ldrh	r3, [r3, #0]
 8017f2e:	461a      	mov	r2, r3
 8017f30:	4b25      	ldr	r3, [pc, #148]	@ (8017fc8 <tcp_receive+0xf10>)
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	441a      	add	r2, r3
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f3a:	6879      	ldr	r1, [r7, #4]
 8017f3c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017f3e:	440b      	add	r3, r1
 8017f40:	429a      	cmp	r2, r3
 8017f42:	d019      	beq.n	8017f78 <tcp_receive+0xec0>
 8017f44:	4b23      	ldr	r3, [pc, #140]	@ (8017fd4 <tcp_receive+0xf1c>)
 8017f46:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8017f4a:	4923      	ldr	r1, [pc, #140]	@ (8017fd8 <tcp_receive+0xf20>)
 8017f4c:	4823      	ldr	r0, [pc, #140]	@ (8017fdc <tcp_receive+0xf24>)
 8017f4e:	f005 fec1 	bl	801dcd4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017f52:	e011      	b.n	8017f78 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	f47f aea5 	bne.w	8017cac <tcp_receive+0xbf4>
 8017f62:	e00a      	b.n	8017f7a <tcp_receive+0xec2>
                break;
 8017f64:	bf00      	nop
 8017f66:	e008      	b.n	8017f7a <tcp_receive+0xec2>
                break;
 8017f68:	bf00      	nop
 8017f6a:	e006      	b.n	8017f7a <tcp_receive+0xec2>
                  break;
 8017f6c:	bf00      	nop
 8017f6e:	e004      	b.n	8017f7a <tcp_receive+0xec2>
                  break;
 8017f70:	bf00      	nop
 8017f72:	e002      	b.n	8017f7a <tcp_receive+0xec2>
                  break;
 8017f74:	bf00      	nop
 8017f76:	e000      	b.n	8017f7a <tcp_receive+0xec2>
                break;
 8017f78:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8017f7a:	6878      	ldr	r0, [r7, #4]
 8017f7c:	f001 fa30 	bl	80193e0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017f80:	e003      	b.n	8017f8a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017f82:	6878      	ldr	r0, [r7, #4]
 8017f84:	f001 fa2c 	bl	80193e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017f88:	e01a      	b.n	8017fc0 <tcp_receive+0xf08>
 8017f8a:	e019      	b.n	8017fc0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8017f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8017fc8 <tcp_receive+0xf10>)
 8017f8e:	681a      	ldr	r2, [r3, #0]
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f94:	1ad3      	subs	r3, r2, r3
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	db0a      	blt.n	8017fb0 <tcp_receive+0xef8>
 8017f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8017fc8 <tcp_receive+0xf10>)
 8017f9c:	681a      	ldr	r2, [r3, #0]
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fa2:	6879      	ldr	r1, [r7, #4]
 8017fa4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017fa6:	440b      	add	r3, r1
 8017fa8:	1ad3      	subs	r3, r2, r3
 8017faa:	3301      	adds	r3, #1
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	dd07      	ble.n	8017fc0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	8b5b      	ldrh	r3, [r3, #26]
 8017fb4:	f043 0302 	orr.w	r3, r3, #2
 8017fb8:	b29a      	uxth	r2, r3
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8017fbe:	e7ff      	b.n	8017fc0 <tcp_receive+0xf08>
 8017fc0:	bf00      	nop
 8017fc2:	3750      	adds	r7, #80	@ 0x50
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8017fc8:	200276c0 	.word	0x200276c0
 8017fcc:	200276a0 	.word	0x200276a0
 8017fd0:	200276ca 	.word	0x200276ca
 8017fd4:	080200bc 	.word	0x080200bc
 8017fd8:	08020464 	.word	0x08020464
 8017fdc:	08020108 	.word	0x08020108

08017fe0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8017fe0:	b480      	push	{r7}
 8017fe2:	b083      	sub	sp, #12
 8017fe4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017fe6:	4b15      	ldr	r3, [pc, #84]	@ (801803c <tcp_get_next_optbyte+0x5c>)
 8017fe8:	881b      	ldrh	r3, [r3, #0]
 8017fea:	1c5a      	adds	r2, r3, #1
 8017fec:	b291      	uxth	r1, r2
 8017fee:	4a13      	ldr	r2, [pc, #76]	@ (801803c <tcp_get_next_optbyte+0x5c>)
 8017ff0:	8011      	strh	r1, [r2, #0]
 8017ff2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017ff4:	4b12      	ldr	r3, [pc, #72]	@ (8018040 <tcp_get_next_optbyte+0x60>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d004      	beq.n	8018006 <tcp_get_next_optbyte+0x26>
 8017ffc:	4b11      	ldr	r3, [pc, #68]	@ (8018044 <tcp_get_next_optbyte+0x64>)
 8017ffe:	881b      	ldrh	r3, [r3, #0]
 8018000:	88fa      	ldrh	r2, [r7, #6]
 8018002:	429a      	cmp	r2, r3
 8018004:	d208      	bcs.n	8018018 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018006:	4b10      	ldr	r3, [pc, #64]	@ (8018048 <tcp_get_next_optbyte+0x68>)
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	3314      	adds	r3, #20
 801800c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801800e:	88fb      	ldrh	r3, [r7, #6]
 8018010:	683a      	ldr	r2, [r7, #0]
 8018012:	4413      	add	r3, r2
 8018014:	781b      	ldrb	r3, [r3, #0]
 8018016:	e00b      	b.n	8018030 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018018:	88fb      	ldrh	r3, [r7, #6]
 801801a:	b2da      	uxtb	r2, r3
 801801c:	4b09      	ldr	r3, [pc, #36]	@ (8018044 <tcp_get_next_optbyte+0x64>)
 801801e:	881b      	ldrh	r3, [r3, #0]
 8018020:	b2db      	uxtb	r3, r3
 8018022:	1ad3      	subs	r3, r2, r3
 8018024:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018026:	4b06      	ldr	r3, [pc, #24]	@ (8018040 <tcp_get_next_optbyte+0x60>)
 8018028:	681a      	ldr	r2, [r3, #0]
 801802a:	797b      	ldrb	r3, [r7, #5]
 801802c:	4413      	add	r3, r2
 801802e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018030:	4618      	mov	r0, r3
 8018032:	370c      	adds	r7, #12
 8018034:	46bd      	mov	sp, r7
 8018036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803a:	4770      	bx	lr
 801803c:	200276bc 	.word	0x200276bc
 8018040:	200276b8 	.word	0x200276b8
 8018044:	200276b6 	.word	0x200276b6
 8018048:	200276b0 	.word	0x200276b0

0801804c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b084      	sub	sp, #16
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d106      	bne.n	8018068 <tcp_parseopt+0x1c>
 801805a:	4b32      	ldr	r3, [pc, #200]	@ (8018124 <tcp_parseopt+0xd8>)
 801805c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8018060:	4931      	ldr	r1, [pc, #196]	@ (8018128 <tcp_parseopt+0xdc>)
 8018062:	4832      	ldr	r0, [pc, #200]	@ (801812c <tcp_parseopt+0xe0>)
 8018064:	f005 fe36 	bl	801dcd4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018068:	4b31      	ldr	r3, [pc, #196]	@ (8018130 <tcp_parseopt+0xe4>)
 801806a:	881b      	ldrh	r3, [r3, #0]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d056      	beq.n	801811e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018070:	4b30      	ldr	r3, [pc, #192]	@ (8018134 <tcp_parseopt+0xe8>)
 8018072:	2200      	movs	r2, #0
 8018074:	801a      	strh	r2, [r3, #0]
 8018076:	e046      	b.n	8018106 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8018078:	f7ff ffb2 	bl	8017fe0 <tcp_get_next_optbyte>
 801807c:	4603      	mov	r3, r0
 801807e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018080:	7bfb      	ldrb	r3, [r7, #15]
 8018082:	2b02      	cmp	r3, #2
 8018084:	d006      	beq.n	8018094 <tcp_parseopt+0x48>
 8018086:	2b02      	cmp	r3, #2
 8018088:	dc2a      	bgt.n	80180e0 <tcp_parseopt+0x94>
 801808a:	2b00      	cmp	r3, #0
 801808c:	d042      	beq.n	8018114 <tcp_parseopt+0xc8>
 801808e:	2b01      	cmp	r3, #1
 8018090:	d038      	beq.n	8018104 <tcp_parseopt+0xb8>
 8018092:	e025      	b.n	80180e0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018094:	f7ff ffa4 	bl	8017fe0 <tcp_get_next_optbyte>
 8018098:	4603      	mov	r3, r0
 801809a:	2b04      	cmp	r3, #4
 801809c:	d13c      	bne.n	8018118 <tcp_parseopt+0xcc>
 801809e:	4b25      	ldr	r3, [pc, #148]	@ (8018134 <tcp_parseopt+0xe8>)
 80180a0:	881b      	ldrh	r3, [r3, #0]
 80180a2:	3301      	adds	r3, #1
 80180a4:	4a22      	ldr	r2, [pc, #136]	@ (8018130 <tcp_parseopt+0xe4>)
 80180a6:	8812      	ldrh	r2, [r2, #0]
 80180a8:	4293      	cmp	r3, r2
 80180aa:	da35      	bge.n	8018118 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80180ac:	f7ff ff98 	bl	8017fe0 <tcp_get_next_optbyte>
 80180b0:	4603      	mov	r3, r0
 80180b2:	021b      	lsls	r3, r3, #8
 80180b4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80180b6:	f7ff ff93 	bl	8017fe0 <tcp_get_next_optbyte>
 80180ba:	4603      	mov	r3, r0
 80180bc:	461a      	mov	r2, r3
 80180be:	89bb      	ldrh	r3, [r7, #12]
 80180c0:	4313      	orrs	r3, r2
 80180c2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80180c4:	89bb      	ldrh	r3, [r7, #12]
 80180c6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80180ca:	d804      	bhi.n	80180d6 <tcp_parseopt+0x8a>
 80180cc:	89bb      	ldrh	r3, [r7, #12]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d001      	beq.n	80180d6 <tcp_parseopt+0x8a>
 80180d2:	89ba      	ldrh	r2, [r7, #12]
 80180d4:	e001      	b.n	80180da <tcp_parseopt+0x8e>
 80180d6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80180de:	e012      	b.n	8018106 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80180e0:	f7ff ff7e 	bl	8017fe0 <tcp_get_next_optbyte>
 80180e4:	4603      	mov	r3, r0
 80180e6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80180e8:	7afb      	ldrb	r3, [r7, #11]
 80180ea:	2b01      	cmp	r3, #1
 80180ec:	d916      	bls.n	801811c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80180ee:	7afb      	ldrb	r3, [r7, #11]
 80180f0:	b29a      	uxth	r2, r3
 80180f2:	4b10      	ldr	r3, [pc, #64]	@ (8018134 <tcp_parseopt+0xe8>)
 80180f4:	881b      	ldrh	r3, [r3, #0]
 80180f6:	4413      	add	r3, r2
 80180f8:	b29b      	uxth	r3, r3
 80180fa:	3b02      	subs	r3, #2
 80180fc:	b29a      	uxth	r2, r3
 80180fe:	4b0d      	ldr	r3, [pc, #52]	@ (8018134 <tcp_parseopt+0xe8>)
 8018100:	801a      	strh	r2, [r3, #0]
 8018102:	e000      	b.n	8018106 <tcp_parseopt+0xba>
          break;
 8018104:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018106:	4b0b      	ldr	r3, [pc, #44]	@ (8018134 <tcp_parseopt+0xe8>)
 8018108:	881a      	ldrh	r2, [r3, #0]
 801810a:	4b09      	ldr	r3, [pc, #36]	@ (8018130 <tcp_parseopt+0xe4>)
 801810c:	881b      	ldrh	r3, [r3, #0]
 801810e:	429a      	cmp	r2, r3
 8018110:	d3b2      	bcc.n	8018078 <tcp_parseopt+0x2c>
 8018112:	e004      	b.n	801811e <tcp_parseopt+0xd2>
          return;
 8018114:	bf00      	nop
 8018116:	e002      	b.n	801811e <tcp_parseopt+0xd2>
            return;
 8018118:	bf00      	nop
 801811a:	e000      	b.n	801811e <tcp_parseopt+0xd2>
            return;
 801811c:	bf00      	nop
      }
    }
  }
}
 801811e:	3710      	adds	r7, #16
 8018120:	46bd      	mov	sp, r7
 8018122:	bd80      	pop	{r7, pc}
 8018124:	080200bc 	.word	0x080200bc
 8018128:	08020520 	.word	0x08020520
 801812c:	08020108 	.word	0x08020108
 8018130:	200276b4 	.word	0x200276b4
 8018134:	200276bc 	.word	0x200276bc

08018138 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018138:	b480      	push	{r7}
 801813a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801813c:	4b05      	ldr	r3, [pc, #20]	@ (8018154 <tcp_trigger_input_pcb_close+0x1c>)
 801813e:	781b      	ldrb	r3, [r3, #0]
 8018140:	f043 0310 	orr.w	r3, r3, #16
 8018144:	b2da      	uxtb	r2, r3
 8018146:	4b03      	ldr	r3, [pc, #12]	@ (8018154 <tcp_trigger_input_pcb_close+0x1c>)
 8018148:	701a      	strb	r2, [r3, #0]
}
 801814a:	bf00      	nop
 801814c:	46bd      	mov	sp, r7
 801814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018152:	4770      	bx	lr
 8018154:	200276cd 	.word	0x200276cd

08018158 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b084      	sub	sp, #16
 801815c:	af00      	add	r7, sp, #0
 801815e:	60f8      	str	r0, [r7, #12]
 8018160:	60b9      	str	r1, [r7, #8]
 8018162:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d00a      	beq.n	8018180 <tcp_route+0x28>
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	7a1b      	ldrb	r3, [r3, #8]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d006      	beq.n	8018180 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	7a1b      	ldrb	r3, [r3, #8]
 8018176:	4618      	mov	r0, r3
 8018178:	f7fb fb12 	bl	80137a0 <netif_get_by_index>
 801817c:	4603      	mov	r3, r0
 801817e:	e003      	b.n	8018188 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018180:	6878      	ldr	r0, [r7, #4]
 8018182:	f003 f959 	bl	801b438 <ip4_route>
 8018186:	4603      	mov	r3, r0
  }
}
 8018188:	4618      	mov	r0, r3
 801818a:	3710      	adds	r7, #16
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}

08018190 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018190:	b590      	push	{r4, r7, lr}
 8018192:	b087      	sub	sp, #28
 8018194:	af00      	add	r7, sp, #0
 8018196:	60f8      	str	r0, [r7, #12]
 8018198:	60b9      	str	r1, [r7, #8]
 801819a:	603b      	str	r3, [r7, #0]
 801819c:	4613      	mov	r3, r2
 801819e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d105      	bne.n	80181b2 <tcp_create_segment+0x22>
 80181a6:	4b43      	ldr	r3, [pc, #268]	@ (80182b4 <tcp_create_segment+0x124>)
 80181a8:	22a3      	movs	r2, #163	@ 0xa3
 80181aa:	4943      	ldr	r1, [pc, #268]	@ (80182b8 <tcp_create_segment+0x128>)
 80181ac:	4843      	ldr	r0, [pc, #268]	@ (80182bc <tcp_create_segment+0x12c>)
 80181ae:	f005 fd91 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80181b2:	68bb      	ldr	r3, [r7, #8]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d105      	bne.n	80181c4 <tcp_create_segment+0x34>
 80181b8:	4b3e      	ldr	r3, [pc, #248]	@ (80182b4 <tcp_create_segment+0x124>)
 80181ba:	22a4      	movs	r2, #164	@ 0xa4
 80181bc:	4940      	ldr	r1, [pc, #256]	@ (80182c0 <tcp_create_segment+0x130>)
 80181be:	483f      	ldr	r0, [pc, #252]	@ (80182bc <tcp_create_segment+0x12c>)
 80181c0:	f005 fd88 	bl	801dcd4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80181c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80181c8:	009b      	lsls	r3, r3, #2
 80181ca:	b2db      	uxtb	r3, r3
 80181cc:	f003 0304 	and.w	r3, r3, #4
 80181d0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80181d2:	2003      	movs	r0, #3
 80181d4:	f7fa ff58 	bl	8013088 <memp_malloc>
 80181d8:	6138      	str	r0, [r7, #16]
 80181da:	693b      	ldr	r3, [r7, #16]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d104      	bne.n	80181ea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80181e0:	68b8      	ldr	r0, [r7, #8]
 80181e2:	f7fb fe6b 	bl	8013ebc <pbuf_free>
    return NULL;
 80181e6:	2300      	movs	r3, #0
 80181e8:	e060      	b.n	80182ac <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80181ea:	693b      	ldr	r3, [r7, #16]
 80181ec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80181f0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80181f2:	693b      	ldr	r3, [r7, #16]
 80181f4:	2200      	movs	r2, #0
 80181f6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80181f8:	693b      	ldr	r3, [r7, #16]
 80181fa:	68ba      	ldr	r2, [r7, #8]
 80181fc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80181fe:	68bb      	ldr	r3, [r7, #8]
 8018200:	891a      	ldrh	r2, [r3, #8]
 8018202:	7dfb      	ldrb	r3, [r7, #23]
 8018204:	b29b      	uxth	r3, r3
 8018206:	429a      	cmp	r2, r3
 8018208:	d205      	bcs.n	8018216 <tcp_create_segment+0x86>
 801820a:	4b2a      	ldr	r3, [pc, #168]	@ (80182b4 <tcp_create_segment+0x124>)
 801820c:	22b0      	movs	r2, #176	@ 0xb0
 801820e:	492d      	ldr	r1, [pc, #180]	@ (80182c4 <tcp_create_segment+0x134>)
 8018210:	482a      	ldr	r0, [pc, #168]	@ (80182bc <tcp_create_segment+0x12c>)
 8018212:	f005 fd5f 	bl	801dcd4 <iprintf>
  seg->len = p->tot_len - optlen;
 8018216:	68bb      	ldr	r3, [r7, #8]
 8018218:	891a      	ldrh	r2, [r3, #8]
 801821a:	7dfb      	ldrb	r3, [r7, #23]
 801821c:	b29b      	uxth	r3, r3
 801821e:	1ad3      	subs	r3, r2, r3
 8018220:	b29a      	uxth	r2, r3
 8018222:	693b      	ldr	r3, [r7, #16]
 8018224:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018226:	2114      	movs	r1, #20
 8018228:	68b8      	ldr	r0, [r7, #8]
 801822a:	f7fb fdb1 	bl	8013d90 <pbuf_add_header>
 801822e:	4603      	mov	r3, r0
 8018230:	2b00      	cmp	r3, #0
 8018232:	d004      	beq.n	801823e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018234:	6938      	ldr	r0, [r7, #16]
 8018236:	f7fd f8d2 	bl	80153de <tcp_seg_free>
    return NULL;
 801823a:	2300      	movs	r3, #0
 801823c:	e036      	b.n	80182ac <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801823e:	693b      	ldr	r3, [r7, #16]
 8018240:	685b      	ldr	r3, [r3, #4]
 8018242:	685a      	ldr	r2, [r3, #4]
 8018244:	693b      	ldr	r3, [r7, #16]
 8018246:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	8ada      	ldrh	r2, [r3, #22]
 801824c:	693b      	ldr	r3, [r7, #16]
 801824e:	68dc      	ldr	r4, [r3, #12]
 8018250:	4610      	mov	r0, r2
 8018252:	f7fa fa45 	bl	80126e0 <lwip_htons>
 8018256:	4603      	mov	r3, r0
 8018258:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	8b1a      	ldrh	r2, [r3, #24]
 801825e:	693b      	ldr	r3, [r7, #16]
 8018260:	68dc      	ldr	r4, [r3, #12]
 8018262:	4610      	mov	r0, r2
 8018264:	f7fa fa3c 	bl	80126e0 <lwip_htons>
 8018268:	4603      	mov	r3, r0
 801826a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801826c:	693b      	ldr	r3, [r7, #16]
 801826e:	68dc      	ldr	r4, [r3, #12]
 8018270:	6838      	ldr	r0, [r7, #0]
 8018272:	f7fa fa4b 	bl	801270c <lwip_htonl>
 8018276:	4603      	mov	r3, r0
 8018278:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801827a:	7dfb      	ldrb	r3, [r7, #23]
 801827c:	089b      	lsrs	r3, r3, #2
 801827e:	b2db      	uxtb	r3, r3
 8018280:	3305      	adds	r3, #5
 8018282:	b29b      	uxth	r3, r3
 8018284:	031b      	lsls	r3, r3, #12
 8018286:	b29a      	uxth	r2, r3
 8018288:	79fb      	ldrb	r3, [r7, #7]
 801828a:	b29b      	uxth	r3, r3
 801828c:	4313      	orrs	r3, r2
 801828e:	b29a      	uxth	r2, r3
 8018290:	693b      	ldr	r3, [r7, #16]
 8018292:	68dc      	ldr	r4, [r3, #12]
 8018294:	4610      	mov	r0, r2
 8018296:	f7fa fa23 	bl	80126e0 <lwip_htons>
 801829a:	4603      	mov	r3, r0
 801829c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801829e:	693b      	ldr	r3, [r7, #16]
 80182a0:	68db      	ldr	r3, [r3, #12]
 80182a2:	2200      	movs	r2, #0
 80182a4:	749a      	strb	r2, [r3, #18]
 80182a6:	2200      	movs	r2, #0
 80182a8:	74da      	strb	r2, [r3, #19]
  return seg;
 80182aa:	693b      	ldr	r3, [r7, #16]
}
 80182ac:	4618      	mov	r0, r3
 80182ae:	371c      	adds	r7, #28
 80182b0:	46bd      	mov	sp, r7
 80182b2:	bd90      	pop	{r4, r7, pc}
 80182b4:	0802053c 	.word	0x0802053c
 80182b8:	08020570 	.word	0x08020570
 80182bc:	08020590 	.word	0x08020590
 80182c0:	080205b8 	.word	0x080205b8
 80182c4:	080205dc 	.word	0x080205dc

080182c8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80182c8:	b590      	push	{r4, r7, lr}
 80182ca:	b08b      	sub	sp, #44	@ 0x2c
 80182cc:	af02      	add	r7, sp, #8
 80182ce:	6078      	str	r0, [r7, #4]
 80182d0:	460b      	mov	r3, r1
 80182d2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80182d4:	2300      	movs	r3, #0
 80182d6:	61fb      	str	r3, [r7, #28]
 80182d8:	2300      	movs	r3, #0
 80182da:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80182dc:	2300      	movs	r3, #0
 80182de:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d106      	bne.n	80182f4 <tcp_split_unsent_seg+0x2c>
 80182e6:	4b95      	ldr	r3, [pc, #596]	@ (801853c <tcp_split_unsent_seg+0x274>)
 80182e8:	f240 324b 	movw	r2, #843	@ 0x34b
 80182ec:	4994      	ldr	r1, [pc, #592]	@ (8018540 <tcp_split_unsent_seg+0x278>)
 80182ee:	4895      	ldr	r0, [pc, #596]	@ (8018544 <tcp_split_unsent_seg+0x27c>)
 80182f0:	f005 fcf0 	bl	801dcd4 <iprintf>

  useg = pcb->unsent;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80182f8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80182fa:	697b      	ldr	r3, [r7, #20]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d102      	bne.n	8018306 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018300:	f04f 33ff 	mov.w	r3, #4294967295
 8018304:	e116      	b.n	8018534 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018306:	887b      	ldrh	r3, [r7, #2]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d109      	bne.n	8018320 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801830c:	4b8b      	ldr	r3, [pc, #556]	@ (801853c <tcp_split_unsent_seg+0x274>)
 801830e:	f240 3253 	movw	r2, #851	@ 0x353
 8018312:	498d      	ldr	r1, [pc, #564]	@ (8018548 <tcp_split_unsent_seg+0x280>)
 8018314:	488b      	ldr	r0, [pc, #556]	@ (8018544 <tcp_split_unsent_seg+0x27c>)
 8018316:	f005 fcdd 	bl	801dcd4 <iprintf>
    return ERR_VAL;
 801831a:	f06f 0305 	mvn.w	r3, #5
 801831e:	e109      	b.n	8018534 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018320:	697b      	ldr	r3, [r7, #20]
 8018322:	891b      	ldrh	r3, [r3, #8]
 8018324:	887a      	ldrh	r2, [r7, #2]
 8018326:	429a      	cmp	r2, r3
 8018328:	d301      	bcc.n	801832e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801832a:	2300      	movs	r3, #0
 801832c:	e102      	b.n	8018534 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018332:	887a      	ldrh	r2, [r7, #2]
 8018334:	429a      	cmp	r2, r3
 8018336:	d906      	bls.n	8018346 <tcp_split_unsent_seg+0x7e>
 8018338:	4b80      	ldr	r3, [pc, #512]	@ (801853c <tcp_split_unsent_seg+0x274>)
 801833a:	f240 325b 	movw	r2, #859	@ 0x35b
 801833e:	4983      	ldr	r1, [pc, #524]	@ (801854c <tcp_split_unsent_seg+0x284>)
 8018340:	4880      	ldr	r0, [pc, #512]	@ (8018544 <tcp_split_unsent_seg+0x27c>)
 8018342:	f005 fcc7 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8018346:	697b      	ldr	r3, [r7, #20]
 8018348:	891b      	ldrh	r3, [r3, #8]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d106      	bne.n	801835c <tcp_split_unsent_seg+0x94>
 801834e:	4b7b      	ldr	r3, [pc, #492]	@ (801853c <tcp_split_unsent_seg+0x274>)
 8018350:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8018354:	497e      	ldr	r1, [pc, #504]	@ (8018550 <tcp_split_unsent_seg+0x288>)
 8018356:	487b      	ldr	r0, [pc, #492]	@ (8018544 <tcp_split_unsent_seg+0x27c>)
 8018358:	f005 fcbc 	bl	801dcd4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	7a9b      	ldrb	r3, [r3, #10]
 8018360:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8018362:	7bfb      	ldrb	r3, [r7, #15]
 8018364:	009b      	lsls	r3, r3, #2
 8018366:	b2db      	uxtb	r3, r3
 8018368:	f003 0304 	and.w	r3, r3, #4
 801836c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801836e:	697b      	ldr	r3, [r7, #20]
 8018370:	891a      	ldrh	r2, [r3, #8]
 8018372:	887b      	ldrh	r3, [r7, #2]
 8018374:	1ad3      	subs	r3, r2, r3
 8018376:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018378:	7bbb      	ldrb	r3, [r7, #14]
 801837a:	b29a      	uxth	r2, r3
 801837c:	89bb      	ldrh	r3, [r7, #12]
 801837e:	4413      	add	r3, r2
 8018380:	b29b      	uxth	r3, r3
 8018382:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018386:	4619      	mov	r1, r3
 8018388:	2036      	movs	r0, #54	@ 0x36
 801838a:	f7fb fab3 	bl	80138f4 <pbuf_alloc>
 801838e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018390:	693b      	ldr	r3, [r7, #16]
 8018392:	2b00      	cmp	r3, #0
 8018394:	f000 80b7 	beq.w	8018506 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018398:	697b      	ldr	r3, [r7, #20]
 801839a:	685b      	ldr	r3, [r3, #4]
 801839c:	891a      	ldrh	r2, [r3, #8]
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	891b      	ldrh	r3, [r3, #8]
 80183a2:	1ad3      	subs	r3, r2, r3
 80183a4:	b29a      	uxth	r2, r3
 80183a6:	887b      	ldrh	r3, [r7, #2]
 80183a8:	4413      	add	r3, r2
 80183aa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80183ac:	697b      	ldr	r3, [r7, #20]
 80183ae:	6858      	ldr	r0, [r3, #4]
 80183b0:	693b      	ldr	r3, [r7, #16]
 80183b2:	685a      	ldr	r2, [r3, #4]
 80183b4:	7bbb      	ldrb	r3, [r7, #14]
 80183b6:	18d1      	adds	r1, r2, r3
 80183b8:	897b      	ldrh	r3, [r7, #10]
 80183ba:	89ba      	ldrh	r2, [r7, #12]
 80183bc:	f7fb ff84 	bl	80142c8 <pbuf_copy_partial>
 80183c0:	4603      	mov	r3, r0
 80183c2:	461a      	mov	r2, r3
 80183c4:	89bb      	ldrh	r3, [r7, #12]
 80183c6:	4293      	cmp	r3, r2
 80183c8:	f040 809f 	bne.w	801850a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80183cc:	697b      	ldr	r3, [r7, #20]
 80183ce:	68db      	ldr	r3, [r3, #12]
 80183d0:	899b      	ldrh	r3, [r3, #12]
 80183d2:	b29b      	uxth	r3, r3
 80183d4:	4618      	mov	r0, r3
 80183d6:	f7fa f983 	bl	80126e0 <lwip_htons>
 80183da:	4603      	mov	r3, r0
 80183dc:	b2db      	uxtb	r3, r3
 80183de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80183e2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80183e4:	2300      	movs	r3, #0
 80183e6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80183e8:	7efb      	ldrb	r3, [r7, #27]
 80183ea:	f003 0308 	and.w	r3, r3, #8
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d007      	beq.n	8018402 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80183f2:	7efb      	ldrb	r3, [r7, #27]
 80183f4:	f023 0308 	bic.w	r3, r3, #8
 80183f8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80183fa:	7ebb      	ldrb	r3, [r7, #26]
 80183fc:	f043 0308 	orr.w	r3, r3, #8
 8018400:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018402:	7efb      	ldrb	r3, [r7, #27]
 8018404:	f003 0301 	and.w	r3, r3, #1
 8018408:	2b00      	cmp	r3, #0
 801840a:	d007      	beq.n	801841c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801840c:	7efb      	ldrb	r3, [r7, #27]
 801840e:	f023 0301 	bic.w	r3, r3, #1
 8018412:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018414:	7ebb      	ldrb	r3, [r7, #26]
 8018416:	f043 0301 	orr.w	r3, r3, #1
 801841a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801841c:	697b      	ldr	r3, [r7, #20]
 801841e:	68db      	ldr	r3, [r3, #12]
 8018420:	685b      	ldr	r3, [r3, #4]
 8018422:	4618      	mov	r0, r3
 8018424:	f7fa f972 	bl	801270c <lwip_htonl>
 8018428:	4602      	mov	r2, r0
 801842a:	887b      	ldrh	r3, [r7, #2]
 801842c:	18d1      	adds	r1, r2, r3
 801842e:	7eba      	ldrb	r2, [r7, #26]
 8018430:	7bfb      	ldrb	r3, [r7, #15]
 8018432:	9300      	str	r3, [sp, #0]
 8018434:	460b      	mov	r3, r1
 8018436:	6939      	ldr	r1, [r7, #16]
 8018438:	6878      	ldr	r0, [r7, #4]
 801843a:	f7ff fea9 	bl	8018190 <tcp_create_segment>
 801843e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018440:	69fb      	ldr	r3, [r7, #28]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d063      	beq.n	801850e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018446:	697b      	ldr	r3, [r7, #20]
 8018448:	685b      	ldr	r3, [r3, #4]
 801844a:	4618      	mov	r0, r3
 801844c:	f7fb fdc4 	bl	8013fd8 <pbuf_clen>
 8018450:	4603      	mov	r3, r0
 8018452:	461a      	mov	r2, r3
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801845a:	1a9b      	subs	r3, r3, r2
 801845c:	b29a      	uxth	r2, r3
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018464:	697b      	ldr	r3, [r7, #20]
 8018466:	6858      	ldr	r0, [r3, #4]
 8018468:	697b      	ldr	r3, [r7, #20]
 801846a:	685b      	ldr	r3, [r3, #4]
 801846c:	891a      	ldrh	r2, [r3, #8]
 801846e:	89bb      	ldrh	r3, [r7, #12]
 8018470:	1ad3      	subs	r3, r2, r3
 8018472:	b29b      	uxth	r3, r3
 8018474:	4619      	mov	r1, r3
 8018476:	f7fb fb9b 	bl	8013bb0 <pbuf_realloc>
  useg->len -= remainder;
 801847a:	697b      	ldr	r3, [r7, #20]
 801847c:	891a      	ldrh	r2, [r3, #8]
 801847e:	89bb      	ldrh	r3, [r7, #12]
 8018480:	1ad3      	subs	r3, r2, r3
 8018482:	b29a      	uxth	r2, r3
 8018484:	697b      	ldr	r3, [r7, #20]
 8018486:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018488:	697b      	ldr	r3, [r7, #20]
 801848a:	68db      	ldr	r3, [r3, #12]
 801848c:	899b      	ldrh	r3, [r3, #12]
 801848e:	b29c      	uxth	r4, r3
 8018490:	7efb      	ldrb	r3, [r7, #27]
 8018492:	b29b      	uxth	r3, r3
 8018494:	4618      	mov	r0, r3
 8018496:	f7fa f923 	bl	80126e0 <lwip_htons>
 801849a:	4603      	mov	r3, r0
 801849c:	461a      	mov	r2, r3
 801849e:	697b      	ldr	r3, [r7, #20]
 80184a0:	68db      	ldr	r3, [r3, #12]
 80184a2:	4322      	orrs	r2, r4
 80184a4:	b292      	uxth	r2, r2
 80184a6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80184a8:	697b      	ldr	r3, [r7, #20]
 80184aa:	685b      	ldr	r3, [r3, #4]
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7fb fd93 	bl	8013fd8 <pbuf_clen>
 80184b2:	4603      	mov	r3, r0
 80184b4:	461a      	mov	r2, r3
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80184bc:	4413      	add	r3, r2
 80184be:	b29a      	uxth	r2, r3
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80184c6:	69fb      	ldr	r3, [r7, #28]
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	4618      	mov	r0, r3
 80184cc:	f7fb fd84 	bl	8013fd8 <pbuf_clen>
 80184d0:	4603      	mov	r3, r0
 80184d2:	461a      	mov	r2, r3
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80184da:	4413      	add	r3, r2
 80184dc:	b29a      	uxth	r2, r3
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	681a      	ldr	r2, [r3, #0]
 80184e8:	69fb      	ldr	r3, [r7, #28]
 80184ea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80184ec:	697b      	ldr	r3, [r7, #20]
 80184ee:	69fa      	ldr	r2, [r7, #28]
 80184f0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80184f2:	69fb      	ldr	r3, [r7, #28]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d103      	bne.n	8018502 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	2200      	movs	r2, #0
 80184fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018502:	2300      	movs	r3, #0
 8018504:	e016      	b.n	8018534 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018506:	bf00      	nop
 8018508:	e002      	b.n	8018510 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801850a:	bf00      	nop
 801850c:	e000      	b.n	8018510 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801850e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018510:	69fb      	ldr	r3, [r7, #28]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d006      	beq.n	8018524 <tcp_split_unsent_seg+0x25c>
 8018516:	4b09      	ldr	r3, [pc, #36]	@ (801853c <tcp_split_unsent_seg+0x274>)
 8018518:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801851c:	490d      	ldr	r1, [pc, #52]	@ (8018554 <tcp_split_unsent_seg+0x28c>)
 801851e:	4809      	ldr	r0, [pc, #36]	@ (8018544 <tcp_split_unsent_seg+0x27c>)
 8018520:	f005 fbd8 	bl	801dcd4 <iprintf>
  if (p != NULL) {
 8018524:	693b      	ldr	r3, [r7, #16]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d002      	beq.n	8018530 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801852a:	6938      	ldr	r0, [r7, #16]
 801852c:	f7fb fcc6 	bl	8013ebc <pbuf_free>
  }

  return ERR_MEM;
 8018530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018534:	4618      	mov	r0, r3
 8018536:	3724      	adds	r7, #36	@ 0x24
 8018538:	46bd      	mov	sp, r7
 801853a:	bd90      	pop	{r4, r7, pc}
 801853c:	0802053c 	.word	0x0802053c
 8018540:	080208d0 	.word	0x080208d0
 8018544:	08020590 	.word	0x08020590
 8018548:	080208f4 	.word	0x080208f4
 801854c:	08020918 	.word	0x08020918
 8018550:	08020928 	.word	0x08020928
 8018554:	08020938 	.word	0x08020938

08018558 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018558:	b590      	push	{r4, r7, lr}
 801855a:	b085      	sub	sp, #20
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d106      	bne.n	8018574 <tcp_send_fin+0x1c>
 8018566:	4b21      	ldr	r3, [pc, #132]	@ (80185ec <tcp_send_fin+0x94>)
 8018568:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801856c:	4920      	ldr	r1, [pc, #128]	@ (80185f0 <tcp_send_fin+0x98>)
 801856e:	4821      	ldr	r0, [pc, #132]	@ (80185f4 <tcp_send_fin+0x9c>)
 8018570:	f005 fbb0 	bl	801dcd4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018578:	2b00      	cmp	r3, #0
 801857a:	d02e      	beq.n	80185da <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018580:	60fb      	str	r3, [r7, #12]
 8018582:	e002      	b.n	801858a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d1f8      	bne.n	8018584 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	68db      	ldr	r3, [r3, #12]
 8018596:	899b      	ldrh	r3, [r3, #12]
 8018598:	b29b      	uxth	r3, r3
 801859a:	4618      	mov	r0, r3
 801859c:	f7fa f8a0 	bl	80126e0 <lwip_htons>
 80185a0:	4603      	mov	r3, r0
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	f003 0307 	and.w	r3, r3, #7
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d116      	bne.n	80185da <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	68db      	ldr	r3, [r3, #12]
 80185b0:	899b      	ldrh	r3, [r3, #12]
 80185b2:	b29c      	uxth	r4, r3
 80185b4:	2001      	movs	r0, #1
 80185b6:	f7fa f893 	bl	80126e0 <lwip_htons>
 80185ba:	4603      	mov	r3, r0
 80185bc:	461a      	mov	r2, r3
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	68db      	ldr	r3, [r3, #12]
 80185c2:	4322      	orrs	r2, r4
 80185c4:	b292      	uxth	r2, r2
 80185c6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	8b5b      	ldrh	r3, [r3, #26]
 80185cc:	f043 0320 	orr.w	r3, r3, #32
 80185d0:	b29a      	uxth	r2, r3
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80185d6:	2300      	movs	r3, #0
 80185d8:	e004      	b.n	80185e4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80185da:	2101      	movs	r1, #1
 80185dc:	6878      	ldr	r0, [r7, #4]
 80185de:	f000 f80b 	bl	80185f8 <tcp_enqueue_flags>
 80185e2:	4603      	mov	r3, r0
}
 80185e4:	4618      	mov	r0, r3
 80185e6:	3714      	adds	r7, #20
 80185e8:	46bd      	mov	sp, r7
 80185ea:	bd90      	pop	{r4, r7, pc}
 80185ec:	0802053c 	.word	0x0802053c
 80185f0:	08020944 	.word	0x08020944
 80185f4:	08020590 	.word	0x08020590

080185f8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b08a      	sub	sp, #40	@ 0x28
 80185fc:	af02      	add	r7, sp, #8
 80185fe:	6078      	str	r0, [r7, #4]
 8018600:	460b      	mov	r3, r1
 8018602:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018604:	2300      	movs	r3, #0
 8018606:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018608:	2300      	movs	r3, #0
 801860a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801860c:	78fb      	ldrb	r3, [r7, #3]
 801860e:	f003 0303 	and.w	r3, r3, #3
 8018612:	2b00      	cmp	r3, #0
 8018614:	d106      	bne.n	8018624 <tcp_enqueue_flags+0x2c>
 8018616:	4b67      	ldr	r3, [pc, #412]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 8018618:	f240 4211 	movw	r2, #1041	@ 0x411
 801861c:	4966      	ldr	r1, [pc, #408]	@ (80187b8 <tcp_enqueue_flags+0x1c0>)
 801861e:	4867      	ldr	r0, [pc, #412]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 8018620:	f005 fb58 	bl	801dcd4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d106      	bne.n	8018638 <tcp_enqueue_flags+0x40>
 801862a:	4b62      	ldr	r3, [pc, #392]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 801862c:	f240 4213 	movw	r2, #1043	@ 0x413
 8018630:	4963      	ldr	r1, [pc, #396]	@ (80187c0 <tcp_enqueue_flags+0x1c8>)
 8018632:	4862      	ldr	r0, [pc, #392]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 8018634:	f005 fb4e 	bl	801dcd4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018638:	78fb      	ldrb	r3, [r7, #3]
 801863a:	f003 0302 	and.w	r3, r3, #2
 801863e:	2b00      	cmp	r3, #0
 8018640:	d001      	beq.n	8018646 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018642:	2301      	movs	r3, #1
 8018644:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018646:	7ffb      	ldrb	r3, [r7, #31]
 8018648:	009b      	lsls	r3, r3, #2
 801864a:	b2db      	uxtb	r3, r3
 801864c:	f003 0304 	and.w	r3, r3, #4
 8018650:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018652:	7dfb      	ldrb	r3, [r7, #23]
 8018654:	b29b      	uxth	r3, r3
 8018656:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801865a:	4619      	mov	r1, r3
 801865c:	2036      	movs	r0, #54	@ 0x36
 801865e:	f7fb f949 	bl	80138f4 <pbuf_alloc>
 8018662:	6138      	str	r0, [r7, #16]
 8018664:	693b      	ldr	r3, [r7, #16]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d109      	bne.n	801867e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	8b5b      	ldrh	r3, [r3, #26]
 801866e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018672:	b29a      	uxth	r2, r3
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018678:	f04f 33ff 	mov.w	r3, #4294967295
 801867c:	e095      	b.n	80187aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801867e:	693b      	ldr	r3, [r7, #16]
 8018680:	895a      	ldrh	r2, [r3, #10]
 8018682:	7dfb      	ldrb	r3, [r7, #23]
 8018684:	b29b      	uxth	r3, r3
 8018686:	429a      	cmp	r2, r3
 8018688:	d206      	bcs.n	8018698 <tcp_enqueue_flags+0xa0>
 801868a:	4b4a      	ldr	r3, [pc, #296]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 801868c:	f240 4239 	movw	r2, #1081	@ 0x439
 8018690:	494c      	ldr	r1, [pc, #304]	@ (80187c4 <tcp_enqueue_flags+0x1cc>)
 8018692:	484a      	ldr	r0, [pc, #296]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 8018694:	f005 fb1e 	bl	801dcd4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801869c:	78fa      	ldrb	r2, [r7, #3]
 801869e:	7ffb      	ldrb	r3, [r7, #31]
 80186a0:	9300      	str	r3, [sp, #0]
 80186a2:	460b      	mov	r3, r1
 80186a4:	6939      	ldr	r1, [r7, #16]
 80186a6:	6878      	ldr	r0, [r7, #4]
 80186a8:	f7ff fd72 	bl	8018190 <tcp_create_segment>
 80186ac:	60f8      	str	r0, [r7, #12]
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d109      	bne.n	80186c8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	8b5b      	ldrh	r3, [r3, #26]
 80186b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80186bc:	b29a      	uxth	r2, r3
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80186c2:	f04f 33ff 	mov.w	r3, #4294967295
 80186c6:	e070      	b.n	80187aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	f003 0303 	and.w	r3, r3, #3
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d006      	beq.n	80186e2 <tcp_enqueue_flags+0xea>
 80186d4:	4b37      	ldr	r3, [pc, #220]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 80186d6:	f240 4242 	movw	r2, #1090	@ 0x442
 80186da:	493b      	ldr	r1, [pc, #236]	@ (80187c8 <tcp_enqueue_flags+0x1d0>)
 80186dc:	4837      	ldr	r0, [pc, #220]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 80186de:	f005 faf9 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	891b      	ldrh	r3, [r3, #8]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d006      	beq.n	80186f8 <tcp_enqueue_flags+0x100>
 80186ea:	4b32      	ldr	r3, [pc, #200]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 80186ec:	f240 4243 	movw	r2, #1091	@ 0x443
 80186f0:	4936      	ldr	r1, [pc, #216]	@ (80187cc <tcp_enqueue_flags+0x1d4>)
 80186f2:	4832      	ldr	r0, [pc, #200]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 80186f4:	f005 faee 	bl	801dcd4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d103      	bne.n	8018708 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	68fa      	ldr	r2, [r7, #12]
 8018704:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018706:	e00d      	b.n	8018724 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801870c:	61bb      	str	r3, [r7, #24]
 801870e:	e002      	b.n	8018716 <tcp_enqueue_flags+0x11e>
 8018710:	69bb      	ldr	r3, [r7, #24]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	61bb      	str	r3, [r7, #24]
 8018716:	69bb      	ldr	r3, [r7, #24]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d1f8      	bne.n	8018710 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801871e:	69bb      	ldr	r3, [r7, #24]
 8018720:	68fa      	ldr	r2, [r7, #12]
 8018722:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	2200      	movs	r2, #0
 8018728:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801872c:	78fb      	ldrb	r3, [r7, #3]
 801872e:	f003 0302 	and.w	r3, r3, #2
 8018732:	2b00      	cmp	r3, #0
 8018734:	d104      	bne.n	8018740 <tcp_enqueue_flags+0x148>
 8018736:	78fb      	ldrb	r3, [r7, #3]
 8018738:	f003 0301 	and.w	r3, r3, #1
 801873c:	2b00      	cmp	r3, #0
 801873e:	d004      	beq.n	801874a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018744:	1c5a      	adds	r2, r3, #1
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801874a:	78fb      	ldrb	r3, [r7, #3]
 801874c:	f003 0301 	and.w	r3, r3, #1
 8018750:	2b00      	cmp	r3, #0
 8018752:	d006      	beq.n	8018762 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	8b5b      	ldrh	r3, [r3, #26]
 8018758:	f043 0320 	orr.w	r3, r3, #32
 801875c:	b29a      	uxth	r2, r3
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	685b      	ldr	r3, [r3, #4]
 8018766:	4618      	mov	r0, r3
 8018768:	f7fb fc36 	bl	8013fd8 <pbuf_clen>
 801876c:	4603      	mov	r3, r0
 801876e:	461a      	mov	r2, r3
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018776:	4413      	add	r3, r2
 8018778:	b29a      	uxth	r2, r3
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018786:	2b00      	cmp	r3, #0
 8018788:	d00e      	beq.n	80187a8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801878e:	2b00      	cmp	r3, #0
 8018790:	d10a      	bne.n	80187a8 <tcp_enqueue_flags+0x1b0>
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018796:	2b00      	cmp	r3, #0
 8018798:	d106      	bne.n	80187a8 <tcp_enqueue_flags+0x1b0>
 801879a:	4b06      	ldr	r3, [pc, #24]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 801879c:	f240 4265 	movw	r2, #1125	@ 0x465
 80187a0:	490b      	ldr	r1, [pc, #44]	@ (80187d0 <tcp_enqueue_flags+0x1d8>)
 80187a2:	4806      	ldr	r0, [pc, #24]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 80187a4:	f005 fa96 	bl	801dcd4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80187a8:	2300      	movs	r3, #0
}
 80187aa:	4618      	mov	r0, r3
 80187ac:	3720      	adds	r7, #32
 80187ae:	46bd      	mov	sp, r7
 80187b0:	bd80      	pop	{r7, pc}
 80187b2:	bf00      	nop
 80187b4:	0802053c 	.word	0x0802053c
 80187b8:	08020960 	.word	0x08020960
 80187bc:	08020590 	.word	0x08020590
 80187c0:	080209b8 	.word	0x080209b8
 80187c4:	080209d8 	.word	0x080209d8
 80187c8:	08020a14 	.word	0x08020a14
 80187cc:	08020a2c 	.word	0x08020a2c
 80187d0:	08020a58 	.word	0x08020a58

080187d4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80187d4:	b5b0      	push	{r4, r5, r7, lr}
 80187d6:	b08a      	sub	sp, #40	@ 0x28
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d106      	bne.n	80187f0 <tcp_output+0x1c>
 80187e2:	4b8a      	ldr	r3, [pc, #552]	@ (8018a0c <tcp_output+0x238>)
 80187e4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80187e8:	4989      	ldr	r1, [pc, #548]	@ (8018a10 <tcp_output+0x23c>)
 80187ea:	488a      	ldr	r0, [pc, #552]	@ (8018a14 <tcp_output+0x240>)
 80187ec:	f005 fa72 	bl	801dcd4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	7d1b      	ldrb	r3, [r3, #20]
 80187f4:	2b01      	cmp	r3, #1
 80187f6:	d106      	bne.n	8018806 <tcp_output+0x32>
 80187f8:	4b84      	ldr	r3, [pc, #528]	@ (8018a0c <tcp_output+0x238>)
 80187fa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80187fe:	4986      	ldr	r1, [pc, #536]	@ (8018a18 <tcp_output+0x244>)
 8018800:	4884      	ldr	r0, [pc, #528]	@ (8018a14 <tcp_output+0x240>)
 8018802:	f005 fa67 	bl	801dcd4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018806:	4b85      	ldr	r3, [pc, #532]	@ (8018a1c <tcp_output+0x248>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	687a      	ldr	r2, [r7, #4]
 801880c:	429a      	cmp	r2, r3
 801880e:	d101      	bne.n	8018814 <tcp_output+0x40>
    return ERR_OK;
 8018810:	2300      	movs	r3, #0
 8018812:	e1ce      	b.n	8018bb2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018820:	4293      	cmp	r3, r2
 8018822:	bf28      	it	cs
 8018824:	4613      	movcs	r3, r2
 8018826:	b29b      	uxth	r3, r3
 8018828:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801882e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8018830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018832:	2b00      	cmp	r3, #0
 8018834:	d10b      	bne.n	801884e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	8b5b      	ldrh	r3, [r3, #26]
 801883a:	f003 0302 	and.w	r3, r3, #2
 801883e:	2b00      	cmp	r3, #0
 8018840:	f000 81aa 	beq.w	8018b98 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018844:	6878      	ldr	r0, [r7, #4]
 8018846:	f000 fdcb 	bl	80193e0 <tcp_send_empty_ack>
 801884a:	4603      	mov	r3, r0
 801884c:	e1b1      	b.n	8018bb2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801884e:	6879      	ldr	r1, [r7, #4]
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	3304      	adds	r3, #4
 8018854:	461a      	mov	r2, r3
 8018856:	6878      	ldr	r0, [r7, #4]
 8018858:	f7ff fc7e 	bl	8018158 <tcp_route>
 801885c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801885e:	697b      	ldr	r3, [r7, #20]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d102      	bne.n	801886a <tcp_output+0x96>
    return ERR_RTE;
 8018864:	f06f 0303 	mvn.w	r3, #3
 8018868:	e1a3      	b.n	8018bb2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d003      	beq.n	8018878 <tcp_output+0xa4>
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d111      	bne.n	801889c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018878:	697b      	ldr	r3, [r7, #20]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d002      	beq.n	8018884 <tcp_output+0xb0>
 801887e:	697b      	ldr	r3, [r7, #20]
 8018880:	3304      	adds	r3, #4
 8018882:	e000      	b.n	8018886 <tcp_output+0xb2>
 8018884:	2300      	movs	r3, #0
 8018886:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018888:	693b      	ldr	r3, [r7, #16]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d102      	bne.n	8018894 <tcp_output+0xc0>
      return ERR_RTE;
 801888e:	f06f 0303 	mvn.w	r3, #3
 8018892:	e18e      	b.n	8018bb2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018894:	693b      	ldr	r3, [r7, #16]
 8018896:	681a      	ldr	r2, [r3, #0]
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801889e:	68db      	ldr	r3, [r3, #12]
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	4618      	mov	r0, r3
 80188a4:	f7f9 ff32 	bl	801270c <lwip_htonl>
 80188a8:	4602      	mov	r2, r0
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80188ae:	1ad3      	subs	r3, r2, r3
 80188b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80188b2:	8912      	ldrh	r2, [r2, #8]
 80188b4:	4413      	add	r3, r2
 80188b6:	69ba      	ldr	r2, [r7, #24]
 80188b8:	429a      	cmp	r2, r3
 80188ba:	d227      	bcs.n	801890c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80188c2:	461a      	mov	r2, r3
 80188c4:	69bb      	ldr	r3, [r7, #24]
 80188c6:	4293      	cmp	r3, r2
 80188c8:	d114      	bne.n	80188f4 <tcp_output+0x120>
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d110      	bne.n	80188f4 <tcp_output+0x120>
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d10b      	bne.n	80188f4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2200      	movs	r2, #0
 80188e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	2201      	movs	r2, #1
 80188e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	2200      	movs	r2, #0
 80188f0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	8b5b      	ldrh	r3, [r3, #26]
 80188f8:	f003 0302 	and.w	r3, r3, #2
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	f000 814d 	beq.w	8018b9c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018902:	6878      	ldr	r0, [r7, #4]
 8018904:	f000 fd6c 	bl	80193e0 <tcp_send_empty_ack>
 8018908:	4603      	mov	r3, r0
 801890a:	e152      	b.n	8018bb2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	2200      	movs	r2, #0
 8018910:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018918:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801891a:	6a3b      	ldr	r3, [r7, #32]
 801891c:	2b00      	cmp	r3, #0
 801891e:	f000 811c 	beq.w	8018b5a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018922:	e002      	b.n	801892a <tcp_output+0x156>
 8018924:	6a3b      	ldr	r3, [r7, #32]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	623b      	str	r3, [r7, #32]
 801892a:	6a3b      	ldr	r3, [r7, #32]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d1f8      	bne.n	8018924 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018932:	e112      	b.n	8018b5a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018936:	68db      	ldr	r3, [r3, #12]
 8018938:	899b      	ldrh	r3, [r3, #12]
 801893a:	b29b      	uxth	r3, r3
 801893c:	4618      	mov	r0, r3
 801893e:	f7f9 fecf 	bl	80126e0 <lwip_htons>
 8018942:	4603      	mov	r3, r0
 8018944:	b2db      	uxtb	r3, r3
 8018946:	f003 0304 	and.w	r3, r3, #4
 801894a:	2b00      	cmp	r3, #0
 801894c:	d006      	beq.n	801895c <tcp_output+0x188>
 801894e:	4b2f      	ldr	r3, [pc, #188]	@ (8018a0c <tcp_output+0x238>)
 8018950:	f240 5236 	movw	r2, #1334	@ 0x536
 8018954:	4932      	ldr	r1, [pc, #200]	@ (8018a20 <tcp_output+0x24c>)
 8018956:	482f      	ldr	r0, [pc, #188]	@ (8018a14 <tcp_output+0x240>)
 8018958:	f005 f9bc 	bl	801dcd4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018960:	2b00      	cmp	r3, #0
 8018962:	d01f      	beq.n	80189a4 <tcp_output+0x1d0>
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	8b5b      	ldrh	r3, [r3, #26]
 8018968:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801896c:	2b00      	cmp	r3, #0
 801896e:	d119      	bne.n	80189a4 <tcp_output+0x1d0>
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018974:	2b00      	cmp	r3, #0
 8018976:	d00b      	beq.n	8018990 <tcp_output+0x1bc>
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d110      	bne.n	80189a4 <tcp_output+0x1d0>
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018986:	891a      	ldrh	r2, [r3, #8]
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801898c:	429a      	cmp	r2, r3
 801898e:	d209      	bcs.n	80189a4 <tcp_output+0x1d0>
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018996:	2b00      	cmp	r3, #0
 8018998:	d004      	beq.n	80189a4 <tcp_output+0x1d0>
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80189a0:	2b08      	cmp	r3, #8
 80189a2:	d901      	bls.n	80189a8 <tcp_output+0x1d4>
 80189a4:	2301      	movs	r3, #1
 80189a6:	e000      	b.n	80189aa <tcp_output+0x1d6>
 80189a8:	2300      	movs	r3, #0
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d106      	bne.n	80189bc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	8b5b      	ldrh	r3, [r3, #26]
 80189b2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	f000 80e4 	beq.w	8018b84 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	7d1b      	ldrb	r3, [r3, #20]
 80189c0:	2b02      	cmp	r3, #2
 80189c2:	d00d      	beq.n	80189e0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80189c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189c6:	68db      	ldr	r3, [r3, #12]
 80189c8:	899b      	ldrh	r3, [r3, #12]
 80189ca:	b29c      	uxth	r4, r3
 80189cc:	2010      	movs	r0, #16
 80189ce:	f7f9 fe87 	bl	80126e0 <lwip_htons>
 80189d2:	4603      	mov	r3, r0
 80189d4:	461a      	mov	r2, r3
 80189d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189d8:	68db      	ldr	r3, [r3, #12]
 80189da:	4322      	orrs	r2, r4
 80189dc:	b292      	uxth	r2, r2
 80189de:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80189e0:	697a      	ldr	r2, [r7, #20]
 80189e2:	6879      	ldr	r1, [r7, #4]
 80189e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80189e6:	f000 f909 	bl	8018bfc <tcp_output_segment>
 80189ea:	4603      	mov	r3, r0
 80189ec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80189ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d016      	beq.n	8018a24 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	8b5b      	ldrh	r3, [r3, #26]
 80189fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80189fe:	b29a      	uxth	r2, r3
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	835a      	strh	r2, [r3, #26]
      return err;
 8018a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a08:	e0d3      	b.n	8018bb2 <tcp_output+0x3de>
 8018a0a:	bf00      	nop
 8018a0c:	0802053c 	.word	0x0802053c
 8018a10:	08020a80 	.word	0x08020a80
 8018a14:	08020590 	.word	0x08020590
 8018a18:	08020a98 	.word	0x08020a98
 8018a1c:	200276d4 	.word	0x200276d4
 8018a20:	08020ac0 	.word	0x08020ac0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a26:	681a      	ldr	r2, [r3, #0]
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	7d1b      	ldrb	r3, [r3, #20]
 8018a30:	2b02      	cmp	r3, #2
 8018a32:	d006      	beq.n	8018a42 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	8b5b      	ldrh	r3, [r3, #26]
 8018a38:	f023 0303 	bic.w	r3, r3, #3
 8018a3c:	b29a      	uxth	r2, r3
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a44:	68db      	ldr	r3, [r3, #12]
 8018a46:	685b      	ldr	r3, [r3, #4]
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f7f9 fe5f 	bl	801270c <lwip_htonl>
 8018a4e:	4604      	mov	r4, r0
 8018a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a52:	891b      	ldrh	r3, [r3, #8]
 8018a54:	461d      	mov	r5, r3
 8018a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a58:	68db      	ldr	r3, [r3, #12]
 8018a5a:	899b      	ldrh	r3, [r3, #12]
 8018a5c:	b29b      	uxth	r3, r3
 8018a5e:	4618      	mov	r0, r3
 8018a60:	f7f9 fe3e 	bl	80126e0 <lwip_htons>
 8018a64:	4603      	mov	r3, r0
 8018a66:	b2db      	uxtb	r3, r3
 8018a68:	f003 0303 	and.w	r3, r3, #3
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d001      	beq.n	8018a74 <tcp_output+0x2a0>
 8018a70:	2301      	movs	r3, #1
 8018a72:	e000      	b.n	8018a76 <tcp_output+0x2a2>
 8018a74:	2300      	movs	r3, #0
 8018a76:	442b      	add	r3, r5
 8018a78:	4423      	add	r3, r4
 8018a7a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018a80:	68bb      	ldr	r3, [r7, #8]
 8018a82:	1ad3      	subs	r3, r2, r3
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	da02      	bge.n	8018a8e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	68ba      	ldr	r2, [r7, #8]
 8018a8c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8018a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a90:	891b      	ldrh	r3, [r3, #8]
 8018a92:	461c      	mov	r4, r3
 8018a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a96:	68db      	ldr	r3, [r3, #12]
 8018a98:	899b      	ldrh	r3, [r3, #12]
 8018a9a:	b29b      	uxth	r3, r3
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f7f9 fe1f 	bl	80126e0 <lwip_htons>
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	b2db      	uxtb	r3, r3
 8018aa6:	f003 0303 	and.w	r3, r3, #3
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d001      	beq.n	8018ab2 <tcp_output+0x2de>
 8018aae:	2301      	movs	r3, #1
 8018ab0:	e000      	b.n	8018ab4 <tcp_output+0x2e0>
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	4423      	add	r3, r4
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d049      	beq.n	8018b4e <tcp_output+0x37a>
      seg->next = NULL;
 8018aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018abc:	2200      	movs	r2, #0
 8018abe:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d105      	bne.n	8018ad4 <tcp_output+0x300>
        pcb->unacked = seg;
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018acc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8018ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ad0:	623b      	str	r3, [r7, #32]
 8018ad2:	e03f      	b.n	8018b54 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ad6:	68db      	ldr	r3, [r3, #12]
 8018ad8:	685b      	ldr	r3, [r3, #4]
 8018ada:	4618      	mov	r0, r3
 8018adc:	f7f9 fe16 	bl	801270c <lwip_htonl>
 8018ae0:	4604      	mov	r4, r0
 8018ae2:	6a3b      	ldr	r3, [r7, #32]
 8018ae4:	68db      	ldr	r3, [r3, #12]
 8018ae6:	685b      	ldr	r3, [r3, #4]
 8018ae8:	4618      	mov	r0, r3
 8018aea:	f7f9 fe0f 	bl	801270c <lwip_htonl>
 8018aee:	4603      	mov	r3, r0
 8018af0:	1ae3      	subs	r3, r4, r3
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	da24      	bge.n	8018b40 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	3370      	adds	r3, #112	@ 0x70
 8018afa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018afc:	e002      	b.n	8018b04 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018afe:	69fb      	ldr	r3, [r7, #28]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018b04:	69fb      	ldr	r3, [r7, #28]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d011      	beq.n	8018b30 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018b0c:	69fb      	ldr	r3, [r7, #28]
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	68db      	ldr	r3, [r3, #12]
 8018b12:	685b      	ldr	r3, [r3, #4]
 8018b14:	4618      	mov	r0, r3
 8018b16:	f7f9 fdf9 	bl	801270c <lwip_htonl>
 8018b1a:	4604      	mov	r4, r0
 8018b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b1e:	68db      	ldr	r3, [r3, #12]
 8018b20:	685b      	ldr	r3, [r3, #4]
 8018b22:	4618      	mov	r0, r3
 8018b24:	f7f9 fdf2 	bl	801270c <lwip_htonl>
 8018b28:	4603      	mov	r3, r0
 8018b2a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	dbe6      	blt.n	8018afe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018b30:	69fb      	ldr	r3, [r7, #28]
 8018b32:	681a      	ldr	r2, [r3, #0]
 8018b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b36:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018b38:	69fb      	ldr	r3, [r7, #28]
 8018b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b3c:	601a      	str	r2, [r3, #0]
 8018b3e:	e009      	b.n	8018b54 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018b40:	6a3b      	ldr	r3, [r7, #32]
 8018b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b44:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018b46:	6a3b      	ldr	r3, [r7, #32]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	623b      	str	r3, [r7, #32]
 8018b4c:	e002      	b.n	8018b54 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018b4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018b50:	f7fc fc45 	bl	80153de <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b58:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8018b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d012      	beq.n	8018b86 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b62:	68db      	ldr	r3, [r3, #12]
 8018b64:	685b      	ldr	r3, [r3, #4]
 8018b66:	4618      	mov	r0, r3
 8018b68:	f7f9 fdd0 	bl	801270c <lwip_htonl>
 8018b6c:	4602      	mov	r2, r0
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b72:	1ad3      	subs	r3, r2, r3
 8018b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b76:	8912      	ldrh	r2, [r2, #8]
 8018b78:	4413      	add	r3, r2
  while (seg != NULL &&
 8018b7a:	69ba      	ldr	r2, [r7, #24]
 8018b7c:	429a      	cmp	r2, r3
 8018b7e:	f4bf aed9 	bcs.w	8018934 <tcp_output+0x160>
 8018b82:	e000      	b.n	8018b86 <tcp_output+0x3b2>
      break;
 8018b84:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d108      	bne.n	8018ba0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2200      	movs	r2, #0
 8018b92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8018b96:	e004      	b.n	8018ba2 <tcp_output+0x3ce>
    goto output_done;
 8018b98:	bf00      	nop
 8018b9a:	e002      	b.n	8018ba2 <tcp_output+0x3ce>
    goto output_done;
 8018b9c:	bf00      	nop
 8018b9e:	e000      	b.n	8018ba2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018ba0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	8b5b      	ldrh	r3, [r3, #26]
 8018ba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018baa:	b29a      	uxth	r2, r3
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018bb0:	2300      	movs	r3, #0
}
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	3728      	adds	r7, #40	@ 0x28
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8018bba:	bf00      	nop

08018bbc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b082      	sub	sp, #8
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d106      	bne.n	8018bd8 <tcp_output_segment_busy+0x1c>
 8018bca:	4b09      	ldr	r3, [pc, #36]	@ (8018bf0 <tcp_output_segment_busy+0x34>)
 8018bcc:	f240 529a 	movw	r2, #1434	@ 0x59a
 8018bd0:	4908      	ldr	r1, [pc, #32]	@ (8018bf4 <tcp_output_segment_busy+0x38>)
 8018bd2:	4809      	ldr	r0, [pc, #36]	@ (8018bf8 <tcp_output_segment_busy+0x3c>)
 8018bd4:	f005 f87e 	bl	801dcd4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	685b      	ldr	r3, [r3, #4]
 8018bdc:	7b9b      	ldrb	r3, [r3, #14]
 8018bde:	2b01      	cmp	r3, #1
 8018be0:	d001      	beq.n	8018be6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018be2:	2301      	movs	r3, #1
 8018be4:	e000      	b.n	8018be8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018be6:	2300      	movs	r3, #0
}
 8018be8:	4618      	mov	r0, r3
 8018bea:	3708      	adds	r7, #8
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	0802053c 	.word	0x0802053c
 8018bf4:	08020ad8 	.word	0x08020ad8
 8018bf8:	08020590 	.word	0x08020590

08018bfc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018bfc:	b5b0      	push	{r4, r5, r7, lr}
 8018bfe:	b08c      	sub	sp, #48	@ 0x30
 8018c00:	af04      	add	r7, sp, #16
 8018c02:	60f8      	str	r0, [r7, #12]
 8018c04:	60b9      	str	r1, [r7, #8]
 8018c06:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d106      	bne.n	8018c1c <tcp_output_segment+0x20>
 8018c0e:	4b64      	ldr	r3, [pc, #400]	@ (8018da0 <tcp_output_segment+0x1a4>)
 8018c10:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8018c14:	4963      	ldr	r1, [pc, #396]	@ (8018da4 <tcp_output_segment+0x1a8>)
 8018c16:	4864      	ldr	r0, [pc, #400]	@ (8018da8 <tcp_output_segment+0x1ac>)
 8018c18:	f005 f85c 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018c1c:	68bb      	ldr	r3, [r7, #8]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d106      	bne.n	8018c30 <tcp_output_segment+0x34>
 8018c22:	4b5f      	ldr	r3, [pc, #380]	@ (8018da0 <tcp_output_segment+0x1a4>)
 8018c24:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8018c28:	4960      	ldr	r1, [pc, #384]	@ (8018dac <tcp_output_segment+0x1b0>)
 8018c2a:	485f      	ldr	r0, [pc, #380]	@ (8018da8 <tcp_output_segment+0x1ac>)
 8018c2c:	f005 f852 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d106      	bne.n	8018c44 <tcp_output_segment+0x48>
 8018c36:	4b5a      	ldr	r3, [pc, #360]	@ (8018da0 <tcp_output_segment+0x1a4>)
 8018c38:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8018c3c:	495c      	ldr	r1, [pc, #368]	@ (8018db0 <tcp_output_segment+0x1b4>)
 8018c3e:	485a      	ldr	r0, [pc, #360]	@ (8018da8 <tcp_output_segment+0x1ac>)
 8018c40:	f005 f848 	bl	801dcd4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018c44:	68f8      	ldr	r0, [r7, #12]
 8018c46:	f7ff ffb9 	bl	8018bbc <tcp_output_segment_busy>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d001      	beq.n	8018c54 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018c50:	2300      	movs	r3, #0
 8018c52:	e0a1      	b.n	8018d98 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018c54:	68bb      	ldr	r3, [r7, #8]
 8018c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	68dc      	ldr	r4, [r3, #12]
 8018c5c:	4610      	mov	r0, r2
 8018c5e:	f7f9 fd55 	bl	801270c <lwip_htonl>
 8018c62:	4603      	mov	r3, r0
 8018c64:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018c66:	68bb      	ldr	r3, [r7, #8]
 8018c68:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	68dc      	ldr	r4, [r3, #12]
 8018c6e:	4610      	mov	r0, r2
 8018c70:	f7f9 fd36 	bl	80126e0 <lwip_htons>
 8018c74:	4603      	mov	r3, r0
 8018c76:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018c78:	68bb      	ldr	r3, [r7, #8]
 8018c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c7c:	68ba      	ldr	r2, [r7, #8]
 8018c7e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018c80:	441a      	add	r2, r3
 8018c82:	68bb      	ldr	r3, [r7, #8]
 8018c84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	68db      	ldr	r3, [r3, #12]
 8018c8a:	3314      	adds	r3, #20
 8018c8c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	7a9b      	ldrb	r3, [r3, #10]
 8018c92:	f003 0301 	and.w	r3, r3, #1
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d015      	beq.n	8018cc6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8018c9a:	68bb      	ldr	r3, [r7, #8]
 8018c9c:	3304      	adds	r3, #4
 8018c9e:	461a      	mov	r2, r3
 8018ca0:	6879      	ldr	r1, [r7, #4]
 8018ca2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8018ca6:	f7fc fe91 	bl	80159cc <tcp_eff_send_mss_netif>
 8018caa:	4603      	mov	r3, r0
 8018cac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018cae:	8b7b      	ldrh	r3, [r7, #26]
 8018cb0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	f7f9 fd29 	bl	801270c <lwip_htonl>
 8018cba:	4602      	mov	r2, r0
 8018cbc:	69fb      	ldr	r3, [r7, #28]
 8018cbe:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018cc0:	69fb      	ldr	r3, [r7, #28]
 8018cc2:	3304      	adds	r3, #4
 8018cc4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018cc6:	68bb      	ldr	r3, [r7, #8]
 8018cc8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	da02      	bge.n	8018cd6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018cd0:	68bb      	ldr	r3, [r7, #8]
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8018cd6:	68bb      	ldr	r3, [r7, #8]
 8018cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d10c      	bne.n	8018cf8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018cde:	4b35      	ldr	r3, [pc, #212]	@ (8018db4 <tcp_output_segment+0x1b8>)
 8018ce0:	681a      	ldr	r2, [r3, #0]
 8018ce2:	68bb      	ldr	r3, [r7, #8]
 8018ce4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	68db      	ldr	r3, [r3, #12]
 8018cea:	685b      	ldr	r3, [r3, #4]
 8018cec:	4618      	mov	r0, r3
 8018cee:	f7f9 fd0d 	bl	801270c <lwip_htonl>
 8018cf2:	4602      	mov	r2, r0
 8018cf4:	68bb      	ldr	r3, [r7, #8]
 8018cf6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	68da      	ldr	r2, [r3, #12]
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	685b      	ldr	r3, [r3, #4]
 8018d00:	685b      	ldr	r3, [r3, #4]
 8018d02:	1ad3      	subs	r3, r2, r3
 8018d04:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	685b      	ldr	r3, [r3, #4]
 8018d0a:	8959      	ldrh	r1, [r3, #10]
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	685b      	ldr	r3, [r3, #4]
 8018d10:	8b3a      	ldrh	r2, [r7, #24]
 8018d12:	1a8a      	subs	r2, r1, r2
 8018d14:	b292      	uxth	r2, r2
 8018d16:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	685b      	ldr	r3, [r3, #4]
 8018d1c:	8919      	ldrh	r1, [r3, #8]
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	685b      	ldr	r3, [r3, #4]
 8018d22:	8b3a      	ldrh	r2, [r7, #24]
 8018d24:	1a8a      	subs	r2, r1, r2
 8018d26:	b292      	uxth	r2, r2
 8018d28:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	685b      	ldr	r3, [r3, #4]
 8018d2e:	68fa      	ldr	r2, [r7, #12]
 8018d30:	68d2      	ldr	r2, [r2, #12]
 8018d32:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	68db      	ldr	r3, [r3, #12]
 8018d38:	2200      	movs	r2, #0
 8018d3a:	741a      	strb	r2, [r3, #16]
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	68da      	ldr	r2, [r3, #12]
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	7a9b      	ldrb	r3, [r3, #10]
 8018d48:	f003 0301 	and.w	r3, r3, #1
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d001      	beq.n	8018d54 <tcp_output_segment+0x158>
 8018d50:	2318      	movs	r3, #24
 8018d52:	e000      	b.n	8018d56 <tcp_output_segment+0x15a>
 8018d54:	2314      	movs	r3, #20
 8018d56:	4413      	add	r3, r2
 8018d58:	69fa      	ldr	r2, [r7, #28]
 8018d5a:	429a      	cmp	r2, r3
 8018d5c:	d006      	beq.n	8018d6c <tcp_output_segment+0x170>
 8018d5e:	4b10      	ldr	r3, [pc, #64]	@ (8018da0 <tcp_output_segment+0x1a4>)
 8018d60:	f240 621c 	movw	r2, #1564	@ 0x61c
 8018d64:	4914      	ldr	r1, [pc, #80]	@ (8018db8 <tcp_output_segment+0x1bc>)
 8018d66:	4810      	ldr	r0, [pc, #64]	@ (8018da8 <tcp_output_segment+0x1ac>)
 8018d68:	f004 ffb4 	bl	801dcd4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	6858      	ldr	r0, [r3, #4]
 8018d70:	68b9      	ldr	r1, [r7, #8]
 8018d72:	68bb      	ldr	r3, [r7, #8]
 8018d74:	1d1c      	adds	r4, r3, #4
 8018d76:	68bb      	ldr	r3, [r7, #8]
 8018d78:	7add      	ldrb	r5, [r3, #11]
 8018d7a:	68bb      	ldr	r3, [r7, #8]
 8018d7c:	7a9b      	ldrb	r3, [r3, #10]
 8018d7e:	687a      	ldr	r2, [r7, #4]
 8018d80:	9202      	str	r2, [sp, #8]
 8018d82:	2206      	movs	r2, #6
 8018d84:	9201      	str	r2, [sp, #4]
 8018d86:	9300      	str	r3, [sp, #0]
 8018d88:	462b      	mov	r3, r5
 8018d8a:	4622      	mov	r2, r4
 8018d8c:	f002 fd12 	bl	801b7b4 <ip4_output_if>
 8018d90:	4603      	mov	r3, r0
 8018d92:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018d94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3720      	adds	r7, #32
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8018da0:	0802053c 	.word	0x0802053c
 8018da4:	08020b00 	.word	0x08020b00
 8018da8:	08020590 	.word	0x08020590
 8018dac:	08020b20 	.word	0x08020b20
 8018db0:	08020b40 	.word	0x08020b40
 8018db4:	20027688 	.word	0x20027688
 8018db8:	08020b64 	.word	0x08020b64

08018dbc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018dbc:	b5b0      	push	{r4, r5, r7, lr}
 8018dbe:	b084      	sub	sp, #16
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d106      	bne.n	8018dd8 <tcp_rexmit_rto_prepare+0x1c>
 8018dca:	4b31      	ldr	r3, [pc, #196]	@ (8018e90 <tcp_rexmit_rto_prepare+0xd4>)
 8018dcc:	f240 6263 	movw	r2, #1635	@ 0x663
 8018dd0:	4930      	ldr	r1, [pc, #192]	@ (8018e94 <tcp_rexmit_rto_prepare+0xd8>)
 8018dd2:	4831      	ldr	r0, [pc, #196]	@ (8018e98 <tcp_rexmit_rto_prepare+0xdc>)
 8018dd4:	f004 ff7e 	bl	801dcd4 <iprintf>

  if (pcb->unacked == NULL) {
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d102      	bne.n	8018de6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018de0:	f06f 0305 	mvn.w	r3, #5
 8018de4:	e050      	b.n	8018e88 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018dea:	60fb      	str	r3, [r7, #12]
 8018dec:	e00b      	b.n	8018e06 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018dee:	68f8      	ldr	r0, [r7, #12]
 8018df0:	f7ff fee4 	bl	8018bbc <tcp_output_segment_busy>
 8018df4:	4603      	mov	r3, r0
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d002      	beq.n	8018e00 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018dfa:	f06f 0305 	mvn.w	r3, #5
 8018dfe:	e043      	b.n	8018e88 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	60fb      	str	r3, [r7, #12]
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d1ef      	bne.n	8018dee <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018e0e:	68f8      	ldr	r0, [r7, #12]
 8018e10:	f7ff fed4 	bl	8018bbc <tcp_output_segment_busy>
 8018e14:	4603      	mov	r3, r0
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d002      	beq.n	8018e20 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018e1a:	f06f 0305 	mvn.w	r3, #5
 8018e1e:	e033      	b.n	8018e88 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	2200      	movs	r2, #0
 8018e34:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	8b5b      	ldrh	r3, [r3, #26]
 8018e3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8018e3e:	b29a      	uxth	r2, r3
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	68db      	ldr	r3, [r3, #12]
 8018e48:	685b      	ldr	r3, [r3, #4]
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7f9 fc5e 	bl	801270c <lwip_htonl>
 8018e50:	4604      	mov	r4, r0
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	891b      	ldrh	r3, [r3, #8]
 8018e56:	461d      	mov	r5, r3
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	68db      	ldr	r3, [r3, #12]
 8018e5c:	899b      	ldrh	r3, [r3, #12]
 8018e5e:	b29b      	uxth	r3, r3
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7f9 fc3d 	bl	80126e0 <lwip_htons>
 8018e66:	4603      	mov	r3, r0
 8018e68:	b2db      	uxtb	r3, r3
 8018e6a:	f003 0303 	and.w	r3, r3, #3
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d001      	beq.n	8018e76 <tcp_rexmit_rto_prepare+0xba>
 8018e72:	2301      	movs	r3, #1
 8018e74:	e000      	b.n	8018e78 <tcp_rexmit_rto_prepare+0xbc>
 8018e76:	2300      	movs	r3, #0
 8018e78:	442b      	add	r3, r5
 8018e7a:	18e2      	adds	r2, r4, r3
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	2200      	movs	r2, #0
 8018e84:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8018e86:	2300      	movs	r3, #0
}
 8018e88:	4618      	mov	r0, r3
 8018e8a:	3710      	adds	r7, #16
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8018e90:	0802053c 	.word	0x0802053c
 8018e94:	08020b78 	.word	0x08020b78
 8018e98:	08020590 	.word	0x08020590

08018e9c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b082      	sub	sp, #8
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d106      	bne.n	8018eb8 <tcp_rexmit_rto_commit+0x1c>
 8018eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8018ee0 <tcp_rexmit_rto_commit+0x44>)
 8018eac:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8018eb0:	490c      	ldr	r1, [pc, #48]	@ (8018ee4 <tcp_rexmit_rto_commit+0x48>)
 8018eb2:	480d      	ldr	r0, [pc, #52]	@ (8018ee8 <tcp_rexmit_rto_commit+0x4c>)
 8018eb4:	f004 ff0e 	bl	801dcd4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018ebe:	2bff      	cmp	r3, #255	@ 0xff
 8018ec0:	d007      	beq.n	8018ed2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018ec8:	3301      	adds	r3, #1
 8018eca:	b2da      	uxtb	r2, r3
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018ed2:	6878      	ldr	r0, [r7, #4]
 8018ed4:	f7ff fc7e 	bl	80187d4 <tcp_output>
}
 8018ed8:	bf00      	nop
 8018eda:	3708      	adds	r7, #8
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}
 8018ee0:	0802053c 	.word	0x0802053c
 8018ee4:	08020b9c 	.word	0x08020b9c
 8018ee8:	08020590 	.word	0x08020590

08018eec <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b082      	sub	sp, #8
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d106      	bne.n	8018f08 <tcp_rexmit_rto+0x1c>
 8018efa:	4b0a      	ldr	r3, [pc, #40]	@ (8018f24 <tcp_rexmit_rto+0x38>)
 8018efc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8018f00:	4909      	ldr	r1, [pc, #36]	@ (8018f28 <tcp_rexmit_rto+0x3c>)
 8018f02:	480a      	ldr	r0, [pc, #40]	@ (8018f2c <tcp_rexmit_rto+0x40>)
 8018f04:	f004 fee6 	bl	801dcd4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018f08:	6878      	ldr	r0, [r7, #4]
 8018f0a:	f7ff ff57 	bl	8018dbc <tcp_rexmit_rto_prepare>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d102      	bne.n	8018f1a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018f14:	6878      	ldr	r0, [r7, #4]
 8018f16:	f7ff ffc1 	bl	8018e9c <tcp_rexmit_rto_commit>
  }
}
 8018f1a:	bf00      	nop
 8018f1c:	3708      	adds	r7, #8
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}
 8018f22:	bf00      	nop
 8018f24:	0802053c 	.word	0x0802053c
 8018f28:	08020bc0 	.word	0x08020bc0
 8018f2c:	08020590 	.word	0x08020590

08018f30 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018f30:	b590      	push	{r4, r7, lr}
 8018f32:	b085      	sub	sp, #20
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d106      	bne.n	8018f4c <tcp_rexmit+0x1c>
 8018f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8018ffc <tcp_rexmit+0xcc>)
 8018f40:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8018f44:	492e      	ldr	r1, [pc, #184]	@ (8019000 <tcp_rexmit+0xd0>)
 8018f46:	482f      	ldr	r0, [pc, #188]	@ (8019004 <tcp_rexmit+0xd4>)
 8018f48:	f004 fec4 	bl	801dcd4 <iprintf>

  if (pcb->unacked == NULL) {
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d102      	bne.n	8018f5a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018f54:	f06f 0305 	mvn.w	r3, #5
 8018f58:	e04c      	b.n	8018ff4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f5e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018f60:	68b8      	ldr	r0, [r7, #8]
 8018f62:	f7ff fe2b 	bl	8018bbc <tcp_output_segment_busy>
 8018f66:	4603      	mov	r3, r0
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d002      	beq.n	8018f72 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018f6c:	f06f 0305 	mvn.w	r3, #5
 8018f70:	e040      	b.n	8018ff4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018f72:	68bb      	ldr	r3, [r7, #8]
 8018f74:	681a      	ldr	r2, [r3, #0]
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	336c      	adds	r3, #108	@ 0x6c
 8018f7e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018f80:	e002      	b.n	8018f88 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d011      	beq.n	8018fb4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	68db      	ldr	r3, [r3, #12]
 8018f96:	685b      	ldr	r3, [r3, #4]
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f7f9 fbb7 	bl	801270c <lwip_htonl>
 8018f9e:	4604      	mov	r4, r0
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	68db      	ldr	r3, [r3, #12]
 8018fa4:	685b      	ldr	r3, [r3, #4]
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f7f9 fbb0 	bl	801270c <lwip_htonl>
 8018fac:	4603      	mov	r3, r0
 8018fae:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	dbe6      	blt.n	8018f82 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	681a      	ldr	r2, [r3, #0]
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	68ba      	ldr	r2, [r7, #8]
 8018fc0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018fc2:	68bb      	ldr	r3, [r7, #8]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d103      	bne.n	8018fd2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	2200      	movs	r2, #0
 8018fce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018fd8:	2bff      	cmp	r3, #255	@ 0xff
 8018fda:	d007      	beq.n	8018fec <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018fe2:	3301      	adds	r3, #1
 8018fe4:	b2da      	uxtb	r2, r3
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	2200      	movs	r2, #0
 8018ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018ff2:	2300      	movs	r3, #0
}
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	3714      	adds	r7, #20
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	bd90      	pop	{r4, r7, pc}
 8018ffc:	0802053c 	.word	0x0802053c
 8019000:	08020bdc 	.word	0x08020bdc
 8019004:	08020590 	.word	0x08020590

08019008 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b082      	sub	sp, #8
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d106      	bne.n	8019024 <tcp_rexmit_fast+0x1c>
 8019016:	4b2a      	ldr	r3, [pc, #168]	@ (80190c0 <tcp_rexmit_fast+0xb8>)
 8019018:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801901c:	4929      	ldr	r1, [pc, #164]	@ (80190c4 <tcp_rexmit_fast+0xbc>)
 801901e:	482a      	ldr	r0, [pc, #168]	@ (80190c8 <tcp_rexmit_fast+0xc0>)
 8019020:	f004 fe58 	bl	801dcd4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019028:	2b00      	cmp	r3, #0
 801902a:	d045      	beq.n	80190b8 <tcp_rexmit_fast+0xb0>
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	8b5b      	ldrh	r3, [r3, #26]
 8019030:	f003 0304 	and.w	r3, r3, #4
 8019034:	2b00      	cmp	r3, #0
 8019036:	d13f      	bne.n	80190b8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019038:	6878      	ldr	r0, [r7, #4]
 801903a:	f7ff ff79 	bl	8018f30 <tcp_rexmit>
 801903e:	4603      	mov	r3, r0
 8019040:	2b00      	cmp	r3, #0
 8019042:	d139      	bne.n	80190b8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019050:	4293      	cmp	r3, r2
 8019052:	bf28      	it	cs
 8019054:	4613      	movcs	r3, r2
 8019056:	b29b      	uxth	r3, r3
 8019058:	2b00      	cmp	r3, #0
 801905a:	da00      	bge.n	801905e <tcp_rexmit_fast+0x56>
 801905c:	3301      	adds	r3, #1
 801905e:	105b      	asrs	r3, r3, #1
 8019060:	b29a      	uxth	r2, r3
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801906e:	461a      	mov	r2, r3
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019074:	005b      	lsls	r3, r3, #1
 8019076:	429a      	cmp	r2, r3
 8019078:	d206      	bcs.n	8019088 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801907e:	005b      	lsls	r3, r3, #1
 8019080:	b29a      	uxth	r2, r3
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019092:	4619      	mov	r1, r3
 8019094:	0049      	lsls	r1, r1, #1
 8019096:	440b      	add	r3, r1
 8019098:	b29b      	uxth	r3, r3
 801909a:	4413      	add	r3, r2
 801909c:	b29a      	uxth	r2, r3
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	8b5b      	ldrh	r3, [r3, #26]
 80190a8:	f043 0304 	orr.w	r3, r3, #4
 80190ac:	b29a      	uxth	r2, r3
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	2200      	movs	r2, #0
 80190b6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80190b8:	bf00      	nop
 80190ba:	3708      	adds	r7, #8
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	0802053c 	.word	0x0802053c
 80190c4:	08020bf4 	.word	0x08020bf4
 80190c8:	08020590 	.word	0x08020590

080190cc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b086      	sub	sp, #24
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	60f8      	str	r0, [r7, #12]
 80190d4:	607b      	str	r3, [r7, #4]
 80190d6:	460b      	mov	r3, r1
 80190d8:	817b      	strh	r3, [r7, #10]
 80190da:	4613      	mov	r3, r2
 80190dc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80190de:	897a      	ldrh	r2, [r7, #10]
 80190e0:	893b      	ldrh	r3, [r7, #8]
 80190e2:	4413      	add	r3, r2
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	3314      	adds	r3, #20
 80190e8:	b29b      	uxth	r3, r3
 80190ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80190ee:	4619      	mov	r1, r3
 80190f0:	2022      	movs	r0, #34	@ 0x22
 80190f2:	f7fa fbff 	bl	80138f4 <pbuf_alloc>
 80190f6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80190f8:	697b      	ldr	r3, [r7, #20]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d04d      	beq.n	801919a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80190fe:	897b      	ldrh	r3, [r7, #10]
 8019100:	3313      	adds	r3, #19
 8019102:	697a      	ldr	r2, [r7, #20]
 8019104:	8952      	ldrh	r2, [r2, #10]
 8019106:	4293      	cmp	r3, r2
 8019108:	db06      	blt.n	8019118 <tcp_output_alloc_header_common+0x4c>
 801910a:	4b26      	ldr	r3, [pc, #152]	@ (80191a4 <tcp_output_alloc_header_common+0xd8>)
 801910c:	f240 7223 	movw	r2, #1827	@ 0x723
 8019110:	4925      	ldr	r1, [pc, #148]	@ (80191a8 <tcp_output_alloc_header_common+0xdc>)
 8019112:	4826      	ldr	r0, [pc, #152]	@ (80191ac <tcp_output_alloc_header_common+0xe0>)
 8019114:	f004 fdde 	bl	801dcd4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019118:	697b      	ldr	r3, [r7, #20]
 801911a:	685b      	ldr	r3, [r3, #4]
 801911c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801911e:	8c3b      	ldrh	r3, [r7, #32]
 8019120:	4618      	mov	r0, r3
 8019122:	f7f9 fadd 	bl	80126e0 <lwip_htons>
 8019126:	4603      	mov	r3, r0
 8019128:	461a      	mov	r2, r3
 801912a:	693b      	ldr	r3, [r7, #16]
 801912c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801912e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019130:	4618      	mov	r0, r3
 8019132:	f7f9 fad5 	bl	80126e0 <lwip_htons>
 8019136:	4603      	mov	r3, r0
 8019138:	461a      	mov	r2, r3
 801913a:	693b      	ldr	r3, [r7, #16]
 801913c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801913e:	693b      	ldr	r3, [r7, #16]
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019144:	68f8      	ldr	r0, [r7, #12]
 8019146:	f7f9 fae1 	bl	801270c <lwip_htonl>
 801914a:	4602      	mov	r2, r0
 801914c:	693b      	ldr	r3, [r7, #16]
 801914e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019150:	897b      	ldrh	r3, [r7, #10]
 8019152:	089b      	lsrs	r3, r3, #2
 8019154:	b29b      	uxth	r3, r3
 8019156:	3305      	adds	r3, #5
 8019158:	b29b      	uxth	r3, r3
 801915a:	031b      	lsls	r3, r3, #12
 801915c:	b29a      	uxth	r2, r3
 801915e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019162:	b29b      	uxth	r3, r3
 8019164:	4313      	orrs	r3, r2
 8019166:	b29b      	uxth	r3, r3
 8019168:	4618      	mov	r0, r3
 801916a:	f7f9 fab9 	bl	80126e0 <lwip_htons>
 801916e:	4603      	mov	r3, r0
 8019170:	461a      	mov	r2, r3
 8019172:	693b      	ldr	r3, [r7, #16]
 8019174:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019176:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019178:	4618      	mov	r0, r3
 801917a:	f7f9 fab1 	bl	80126e0 <lwip_htons>
 801917e:	4603      	mov	r3, r0
 8019180:	461a      	mov	r2, r3
 8019182:	693b      	ldr	r3, [r7, #16]
 8019184:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8019186:	693b      	ldr	r3, [r7, #16]
 8019188:	2200      	movs	r2, #0
 801918a:	741a      	strb	r2, [r3, #16]
 801918c:	2200      	movs	r2, #0
 801918e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	2200      	movs	r2, #0
 8019194:	749a      	strb	r2, [r3, #18]
 8019196:	2200      	movs	r2, #0
 8019198:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801919a:	697b      	ldr	r3, [r7, #20]
}
 801919c:	4618      	mov	r0, r3
 801919e:	3718      	adds	r7, #24
 80191a0:	46bd      	mov	sp, r7
 80191a2:	bd80      	pop	{r7, pc}
 80191a4:	0802053c 	.word	0x0802053c
 80191a8:	08020c14 	.word	0x08020c14
 80191ac:	08020590 	.word	0x08020590

080191b0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80191b0:	b5b0      	push	{r4, r5, r7, lr}
 80191b2:	b08a      	sub	sp, #40	@ 0x28
 80191b4:	af04      	add	r7, sp, #16
 80191b6:	60f8      	str	r0, [r7, #12]
 80191b8:	607b      	str	r3, [r7, #4]
 80191ba:	460b      	mov	r3, r1
 80191bc:	817b      	strh	r3, [r7, #10]
 80191be:	4613      	mov	r3, r2
 80191c0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d106      	bne.n	80191d6 <tcp_output_alloc_header+0x26>
 80191c8:	4b15      	ldr	r3, [pc, #84]	@ (8019220 <tcp_output_alloc_header+0x70>)
 80191ca:	f240 7242 	movw	r2, #1858	@ 0x742
 80191ce:	4915      	ldr	r1, [pc, #84]	@ (8019224 <tcp_output_alloc_header+0x74>)
 80191d0:	4815      	ldr	r0, [pc, #84]	@ (8019228 <tcp_output_alloc_header+0x78>)
 80191d2:	f004 fd7f 	bl	801dcd4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	8adb      	ldrh	r3, [r3, #22]
 80191de:	68fa      	ldr	r2, [r7, #12]
 80191e0:	8b12      	ldrh	r2, [r2, #24]
 80191e2:	68f9      	ldr	r1, [r7, #12]
 80191e4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80191e6:	893d      	ldrh	r5, [r7, #8]
 80191e8:	897c      	ldrh	r4, [r7, #10]
 80191ea:	9103      	str	r1, [sp, #12]
 80191ec:	2110      	movs	r1, #16
 80191ee:	9102      	str	r1, [sp, #8]
 80191f0:	9201      	str	r2, [sp, #4]
 80191f2:	9300      	str	r3, [sp, #0]
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	462a      	mov	r2, r5
 80191f8:	4621      	mov	r1, r4
 80191fa:	f7ff ff67 	bl	80190cc <tcp_output_alloc_header_common>
 80191fe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019200:	697b      	ldr	r3, [r7, #20]
 8019202:	2b00      	cmp	r3, #0
 8019204:	d006      	beq.n	8019214 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801920a:	68fa      	ldr	r2, [r7, #12]
 801920c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801920e:	441a      	add	r2, r3
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8019214:	697b      	ldr	r3, [r7, #20]
}
 8019216:	4618      	mov	r0, r3
 8019218:	3718      	adds	r7, #24
 801921a:	46bd      	mov	sp, r7
 801921c:	bdb0      	pop	{r4, r5, r7, pc}
 801921e:	bf00      	nop
 8019220:	0802053c 	.word	0x0802053c
 8019224:	08020c44 	.word	0x08020c44
 8019228:	08020590 	.word	0x08020590

0801922c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801922c:	b580      	push	{r7, lr}
 801922e:	b088      	sub	sp, #32
 8019230:	af00      	add	r7, sp, #0
 8019232:	60f8      	str	r0, [r7, #12]
 8019234:	60b9      	str	r1, [r7, #8]
 8019236:	4611      	mov	r1, r2
 8019238:	461a      	mov	r2, r3
 801923a:	460b      	mov	r3, r1
 801923c:	71fb      	strb	r3, [r7, #7]
 801923e:	4613      	mov	r3, r2
 8019240:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019242:	2300      	movs	r3, #0
 8019244:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019246:	68bb      	ldr	r3, [r7, #8]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d106      	bne.n	801925a <tcp_output_fill_options+0x2e>
 801924c:	4b12      	ldr	r3, [pc, #72]	@ (8019298 <tcp_output_fill_options+0x6c>)
 801924e:	f240 7256 	movw	r2, #1878	@ 0x756
 8019252:	4912      	ldr	r1, [pc, #72]	@ (801929c <tcp_output_fill_options+0x70>)
 8019254:	4812      	ldr	r0, [pc, #72]	@ (80192a0 <tcp_output_fill_options+0x74>)
 8019256:	f004 fd3d 	bl	801dcd4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801925a:	68bb      	ldr	r3, [r7, #8]
 801925c:	685b      	ldr	r3, [r3, #4]
 801925e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019260:	69bb      	ldr	r3, [r7, #24]
 8019262:	3314      	adds	r3, #20
 8019264:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8019266:	8bfb      	ldrh	r3, [r7, #30]
 8019268:	009b      	lsls	r3, r3, #2
 801926a:	461a      	mov	r2, r3
 801926c:	79fb      	ldrb	r3, [r7, #7]
 801926e:	009b      	lsls	r3, r3, #2
 8019270:	f003 0304 	and.w	r3, r3, #4
 8019274:	4413      	add	r3, r2
 8019276:	3314      	adds	r3, #20
 8019278:	69ba      	ldr	r2, [r7, #24]
 801927a:	4413      	add	r3, r2
 801927c:	697a      	ldr	r2, [r7, #20]
 801927e:	429a      	cmp	r2, r3
 8019280:	d006      	beq.n	8019290 <tcp_output_fill_options+0x64>
 8019282:	4b05      	ldr	r3, [pc, #20]	@ (8019298 <tcp_output_fill_options+0x6c>)
 8019284:	f240 7275 	movw	r2, #1909	@ 0x775
 8019288:	4906      	ldr	r1, [pc, #24]	@ (80192a4 <tcp_output_fill_options+0x78>)
 801928a:	4805      	ldr	r0, [pc, #20]	@ (80192a0 <tcp_output_fill_options+0x74>)
 801928c:	f004 fd22 	bl	801dcd4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8019290:	bf00      	nop
 8019292:	3720      	adds	r7, #32
 8019294:	46bd      	mov	sp, r7
 8019296:	bd80      	pop	{r7, pc}
 8019298:	0802053c 	.word	0x0802053c
 801929c:	08020c6c 	.word	0x08020c6c
 80192a0:	08020590 	.word	0x08020590
 80192a4:	08020b64 	.word	0x08020b64

080192a8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b08a      	sub	sp, #40	@ 0x28
 80192ac:	af04      	add	r7, sp, #16
 80192ae:	60f8      	str	r0, [r7, #12]
 80192b0:	60b9      	str	r1, [r7, #8]
 80192b2:	607a      	str	r2, [r7, #4]
 80192b4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80192b6:	68bb      	ldr	r3, [r7, #8]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d106      	bne.n	80192ca <tcp_output_control_segment+0x22>
 80192bc:	4b1c      	ldr	r3, [pc, #112]	@ (8019330 <tcp_output_control_segment+0x88>)
 80192be:	f240 7287 	movw	r2, #1927	@ 0x787
 80192c2:	491c      	ldr	r1, [pc, #112]	@ (8019334 <tcp_output_control_segment+0x8c>)
 80192c4:	481c      	ldr	r0, [pc, #112]	@ (8019338 <tcp_output_control_segment+0x90>)
 80192c6:	f004 fd05 	bl	801dcd4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80192ca:	683a      	ldr	r2, [r7, #0]
 80192cc:	6879      	ldr	r1, [r7, #4]
 80192ce:	68f8      	ldr	r0, [r7, #12]
 80192d0:	f7fe ff42 	bl	8018158 <tcp_route>
 80192d4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80192d6:	693b      	ldr	r3, [r7, #16]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d102      	bne.n	80192e2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80192dc:	23fc      	movs	r3, #252	@ 0xfc
 80192de:	75fb      	strb	r3, [r7, #23]
 80192e0:	e01c      	b.n	801931c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d006      	beq.n	80192f6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	7adb      	ldrb	r3, [r3, #11]
 80192ec:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	7a9b      	ldrb	r3, [r3, #10]
 80192f2:	757b      	strb	r3, [r7, #21]
 80192f4:	e003      	b.n	80192fe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80192f6:	23ff      	movs	r3, #255	@ 0xff
 80192f8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80192fa:	2300      	movs	r3, #0
 80192fc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80192fe:	7dba      	ldrb	r2, [r7, #22]
 8019300:	693b      	ldr	r3, [r7, #16]
 8019302:	9302      	str	r3, [sp, #8]
 8019304:	2306      	movs	r3, #6
 8019306:	9301      	str	r3, [sp, #4]
 8019308:	7d7b      	ldrb	r3, [r7, #21]
 801930a:	9300      	str	r3, [sp, #0]
 801930c:	4613      	mov	r3, r2
 801930e:	683a      	ldr	r2, [r7, #0]
 8019310:	6879      	ldr	r1, [r7, #4]
 8019312:	68b8      	ldr	r0, [r7, #8]
 8019314:	f002 fa4e 	bl	801b7b4 <ip4_output_if>
 8019318:	4603      	mov	r3, r0
 801931a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801931c:	68b8      	ldr	r0, [r7, #8]
 801931e:	f7fa fdcd 	bl	8013ebc <pbuf_free>
  return err;
 8019322:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019326:	4618      	mov	r0, r3
 8019328:	3718      	adds	r7, #24
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}
 801932e:	bf00      	nop
 8019330:	0802053c 	.word	0x0802053c
 8019334:	08020c94 	.word	0x08020c94
 8019338:	08020590 	.word	0x08020590

0801933c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801933c:	b590      	push	{r4, r7, lr}
 801933e:	b08b      	sub	sp, #44	@ 0x2c
 8019340:	af04      	add	r7, sp, #16
 8019342:	60f8      	str	r0, [r7, #12]
 8019344:	60b9      	str	r1, [r7, #8]
 8019346:	607a      	str	r2, [r7, #4]
 8019348:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801934a:	683b      	ldr	r3, [r7, #0]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d106      	bne.n	801935e <tcp_rst+0x22>
 8019350:	4b1f      	ldr	r3, [pc, #124]	@ (80193d0 <tcp_rst+0x94>)
 8019352:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8019356:	491f      	ldr	r1, [pc, #124]	@ (80193d4 <tcp_rst+0x98>)
 8019358:	481f      	ldr	r0, [pc, #124]	@ (80193d8 <tcp_rst+0x9c>)
 801935a:	f004 fcbb 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801935e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019360:	2b00      	cmp	r3, #0
 8019362:	d106      	bne.n	8019372 <tcp_rst+0x36>
 8019364:	4b1a      	ldr	r3, [pc, #104]	@ (80193d0 <tcp_rst+0x94>)
 8019366:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801936a:	491c      	ldr	r1, [pc, #112]	@ (80193dc <tcp_rst+0xa0>)
 801936c:	481a      	ldr	r0, [pc, #104]	@ (80193d8 <tcp_rst+0x9c>)
 801936e:	f004 fcb1 	bl	801dcd4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019372:	2300      	movs	r3, #0
 8019374:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8019376:	f246 0308 	movw	r3, #24584	@ 0x6008
 801937a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801937c:	7dfb      	ldrb	r3, [r7, #23]
 801937e:	b29c      	uxth	r4, r3
 8019380:	68b8      	ldr	r0, [r7, #8]
 8019382:	f7f9 f9c3 	bl	801270c <lwip_htonl>
 8019386:	4602      	mov	r2, r0
 8019388:	8abb      	ldrh	r3, [r7, #20]
 801938a:	9303      	str	r3, [sp, #12]
 801938c:	2314      	movs	r3, #20
 801938e:	9302      	str	r3, [sp, #8]
 8019390:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8019392:	9301      	str	r3, [sp, #4]
 8019394:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019396:	9300      	str	r3, [sp, #0]
 8019398:	4613      	mov	r3, r2
 801939a:	2200      	movs	r2, #0
 801939c:	4621      	mov	r1, r4
 801939e:	6878      	ldr	r0, [r7, #4]
 80193a0:	f7ff fe94 	bl	80190cc <tcp_output_alloc_header_common>
 80193a4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80193a6:	693b      	ldr	r3, [r7, #16]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d00c      	beq.n	80193c6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80193ac:	7dfb      	ldrb	r3, [r7, #23]
 80193ae:	2200      	movs	r2, #0
 80193b0:	6939      	ldr	r1, [r7, #16]
 80193b2:	68f8      	ldr	r0, [r7, #12]
 80193b4:	f7ff ff3a 	bl	801922c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80193b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193ba:	683a      	ldr	r2, [r7, #0]
 80193bc:	6939      	ldr	r1, [r7, #16]
 80193be:	68f8      	ldr	r0, [r7, #12]
 80193c0:	f7ff ff72 	bl	80192a8 <tcp_output_control_segment>
 80193c4:	e000      	b.n	80193c8 <tcp_rst+0x8c>
    return;
 80193c6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80193c8:	371c      	adds	r7, #28
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd90      	pop	{r4, r7, pc}
 80193ce:	bf00      	nop
 80193d0:	0802053c 	.word	0x0802053c
 80193d4:	08020cc0 	.word	0x08020cc0
 80193d8:	08020590 	.word	0x08020590
 80193dc:	08020cdc 	.word	0x08020cdc

080193e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80193e0:	b590      	push	{r4, r7, lr}
 80193e2:	b087      	sub	sp, #28
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80193e8:	2300      	movs	r3, #0
 80193ea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80193ec:	2300      	movs	r3, #0
 80193ee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d106      	bne.n	8019404 <tcp_send_empty_ack+0x24>
 80193f6:	4b28      	ldr	r3, [pc, #160]	@ (8019498 <tcp_send_empty_ack+0xb8>)
 80193f8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80193fc:	4927      	ldr	r1, [pc, #156]	@ (801949c <tcp_send_empty_ack+0xbc>)
 80193fe:	4828      	ldr	r0, [pc, #160]	@ (80194a0 <tcp_send_empty_ack+0xc0>)
 8019400:	f004 fc68 	bl	801dcd4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019404:	7dfb      	ldrb	r3, [r7, #23]
 8019406:	009b      	lsls	r3, r3, #2
 8019408:	b2db      	uxtb	r3, r3
 801940a:	f003 0304 	and.w	r3, r3, #4
 801940e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019410:	7d7b      	ldrb	r3, [r7, #21]
 8019412:	b29c      	uxth	r4, r3
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019418:	4618      	mov	r0, r3
 801941a:	f7f9 f977 	bl	801270c <lwip_htonl>
 801941e:	4603      	mov	r3, r0
 8019420:	2200      	movs	r2, #0
 8019422:	4621      	mov	r1, r4
 8019424:	6878      	ldr	r0, [r7, #4]
 8019426:	f7ff fec3 	bl	80191b0 <tcp_output_alloc_header>
 801942a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801942c:	693b      	ldr	r3, [r7, #16]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d109      	bne.n	8019446 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	8b5b      	ldrh	r3, [r3, #26]
 8019436:	f043 0303 	orr.w	r3, r3, #3
 801943a:	b29a      	uxth	r2, r3
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019440:	f06f 0301 	mvn.w	r3, #1
 8019444:	e023      	b.n	801948e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019446:	7dbb      	ldrb	r3, [r7, #22]
 8019448:	7dfa      	ldrb	r2, [r7, #23]
 801944a:	6939      	ldr	r1, [r7, #16]
 801944c:	6878      	ldr	r0, [r7, #4]
 801944e:	f7ff feed 	bl	801922c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019452:	687a      	ldr	r2, [r7, #4]
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	3304      	adds	r3, #4
 8019458:	6939      	ldr	r1, [r7, #16]
 801945a:	6878      	ldr	r0, [r7, #4]
 801945c:	f7ff ff24 	bl	80192a8 <tcp_output_control_segment>
 8019460:	4603      	mov	r3, r0
 8019462:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d007      	beq.n	801947c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	8b5b      	ldrh	r3, [r3, #26]
 8019470:	f043 0303 	orr.w	r3, r3, #3
 8019474:	b29a      	uxth	r2, r3
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	835a      	strh	r2, [r3, #26]
 801947a:	e006      	b.n	801948a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	8b5b      	ldrh	r3, [r3, #26]
 8019480:	f023 0303 	bic.w	r3, r3, #3
 8019484:	b29a      	uxth	r2, r3
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801948a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801948e:	4618      	mov	r0, r3
 8019490:	371c      	adds	r7, #28
 8019492:	46bd      	mov	sp, r7
 8019494:	bd90      	pop	{r4, r7, pc}
 8019496:	bf00      	nop
 8019498:	0802053c 	.word	0x0802053c
 801949c:	08020cf8 	.word	0x08020cf8
 80194a0:	08020590 	.word	0x08020590

080194a4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80194a4:	b590      	push	{r4, r7, lr}
 80194a6:	b087      	sub	sp, #28
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80194ac:	2300      	movs	r3, #0
 80194ae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d106      	bne.n	80194c4 <tcp_keepalive+0x20>
 80194b6:	4b18      	ldr	r3, [pc, #96]	@ (8019518 <tcp_keepalive+0x74>)
 80194b8:	f640 0224 	movw	r2, #2084	@ 0x824
 80194bc:	4917      	ldr	r1, [pc, #92]	@ (801951c <tcp_keepalive+0x78>)
 80194be:	4818      	ldr	r0, [pc, #96]	@ (8019520 <tcp_keepalive+0x7c>)
 80194c0:	f004 fc08 	bl	801dcd4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80194c4:	7dfb      	ldrb	r3, [r7, #23]
 80194c6:	b29c      	uxth	r4, r3
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80194cc:	3b01      	subs	r3, #1
 80194ce:	4618      	mov	r0, r3
 80194d0:	f7f9 f91c 	bl	801270c <lwip_htonl>
 80194d4:	4603      	mov	r3, r0
 80194d6:	2200      	movs	r2, #0
 80194d8:	4621      	mov	r1, r4
 80194da:	6878      	ldr	r0, [r7, #4]
 80194dc:	f7ff fe68 	bl	80191b0 <tcp_output_alloc_header>
 80194e0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80194e2:	693b      	ldr	r3, [r7, #16]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d102      	bne.n	80194ee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80194e8:	f04f 33ff 	mov.w	r3, #4294967295
 80194ec:	e010      	b.n	8019510 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80194ee:	7dfb      	ldrb	r3, [r7, #23]
 80194f0:	2200      	movs	r2, #0
 80194f2:	6939      	ldr	r1, [r7, #16]
 80194f4:	6878      	ldr	r0, [r7, #4]
 80194f6:	f7ff fe99 	bl	801922c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80194fa:	687a      	ldr	r2, [r7, #4]
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	3304      	adds	r3, #4
 8019500:	6939      	ldr	r1, [r7, #16]
 8019502:	6878      	ldr	r0, [r7, #4]
 8019504:	f7ff fed0 	bl	80192a8 <tcp_output_control_segment>
 8019508:	4603      	mov	r3, r0
 801950a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801950c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019510:	4618      	mov	r0, r3
 8019512:	371c      	adds	r7, #28
 8019514:	46bd      	mov	sp, r7
 8019516:	bd90      	pop	{r4, r7, pc}
 8019518:	0802053c 	.word	0x0802053c
 801951c:	08020d18 	.word	0x08020d18
 8019520:	08020590 	.word	0x08020590

08019524 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019524:	b590      	push	{r4, r7, lr}
 8019526:	b08b      	sub	sp, #44	@ 0x2c
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801952c:	2300      	movs	r3, #0
 801952e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d106      	bne.n	8019546 <tcp_zero_window_probe+0x22>
 8019538:	4b4c      	ldr	r3, [pc, #304]	@ (801966c <tcp_zero_window_probe+0x148>)
 801953a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801953e:	494c      	ldr	r1, [pc, #304]	@ (8019670 <tcp_zero_window_probe+0x14c>)
 8019540:	484c      	ldr	r0, [pc, #304]	@ (8019674 <tcp_zero_window_probe+0x150>)
 8019542:	f004 fbc7 	bl	801dcd4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801954a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801954c:	6a3b      	ldr	r3, [r7, #32]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d101      	bne.n	8019556 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019552:	2300      	movs	r3, #0
 8019554:	e086      	b.n	8019664 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801955c:	2bff      	cmp	r3, #255	@ 0xff
 801955e:	d007      	beq.n	8019570 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019566:	3301      	adds	r3, #1
 8019568:	b2da      	uxtb	r2, r3
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019570:	6a3b      	ldr	r3, [r7, #32]
 8019572:	68db      	ldr	r3, [r3, #12]
 8019574:	899b      	ldrh	r3, [r3, #12]
 8019576:	b29b      	uxth	r3, r3
 8019578:	4618      	mov	r0, r3
 801957a:	f7f9 f8b1 	bl	80126e0 <lwip_htons>
 801957e:	4603      	mov	r3, r0
 8019580:	b2db      	uxtb	r3, r3
 8019582:	f003 0301 	and.w	r3, r3, #1
 8019586:	2b00      	cmp	r3, #0
 8019588:	d005      	beq.n	8019596 <tcp_zero_window_probe+0x72>
 801958a:	6a3b      	ldr	r3, [r7, #32]
 801958c:	891b      	ldrh	r3, [r3, #8]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d101      	bne.n	8019596 <tcp_zero_window_probe+0x72>
 8019592:	2301      	movs	r3, #1
 8019594:	e000      	b.n	8019598 <tcp_zero_window_probe+0x74>
 8019596:	2300      	movs	r3, #0
 8019598:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801959a:	7ffb      	ldrb	r3, [r7, #31]
 801959c:	2b00      	cmp	r3, #0
 801959e:	bf0c      	ite	eq
 80195a0:	2301      	moveq	r3, #1
 80195a2:	2300      	movne	r3, #0
 80195a4:	b2db      	uxtb	r3, r3
 80195a6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80195a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80195ac:	b299      	uxth	r1, r3
 80195ae:	6a3b      	ldr	r3, [r7, #32]
 80195b0:	68db      	ldr	r3, [r3, #12]
 80195b2:	685b      	ldr	r3, [r3, #4]
 80195b4:	8bba      	ldrh	r2, [r7, #28]
 80195b6:	6878      	ldr	r0, [r7, #4]
 80195b8:	f7ff fdfa 	bl	80191b0 <tcp_output_alloc_header>
 80195bc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80195be:	69bb      	ldr	r3, [r7, #24]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d102      	bne.n	80195ca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80195c4:	f04f 33ff 	mov.w	r3, #4294967295
 80195c8:	e04c      	b.n	8019664 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80195ca:	69bb      	ldr	r3, [r7, #24]
 80195cc:	685b      	ldr	r3, [r3, #4]
 80195ce:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80195d0:	7ffb      	ldrb	r3, [r7, #31]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d011      	beq.n	80195fa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80195d6:	697b      	ldr	r3, [r7, #20]
 80195d8:	899b      	ldrh	r3, [r3, #12]
 80195da:	b29b      	uxth	r3, r3
 80195dc:	b21b      	sxth	r3, r3
 80195de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80195e2:	b21c      	sxth	r4, r3
 80195e4:	2011      	movs	r0, #17
 80195e6:	f7f9 f87b 	bl	80126e0 <lwip_htons>
 80195ea:	4603      	mov	r3, r0
 80195ec:	b21b      	sxth	r3, r3
 80195ee:	4323      	orrs	r3, r4
 80195f0:	b21b      	sxth	r3, r3
 80195f2:	b29a      	uxth	r2, r3
 80195f4:	697b      	ldr	r3, [r7, #20]
 80195f6:	819a      	strh	r2, [r3, #12]
 80195f8:	e010      	b.n	801961c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80195fa:	69bb      	ldr	r3, [r7, #24]
 80195fc:	685b      	ldr	r3, [r3, #4]
 80195fe:	3314      	adds	r3, #20
 8019600:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019602:	6a3b      	ldr	r3, [r7, #32]
 8019604:	6858      	ldr	r0, [r3, #4]
 8019606:	6a3b      	ldr	r3, [r7, #32]
 8019608:	685b      	ldr	r3, [r3, #4]
 801960a:	891a      	ldrh	r2, [r3, #8]
 801960c:	6a3b      	ldr	r3, [r7, #32]
 801960e:	891b      	ldrh	r3, [r3, #8]
 8019610:	1ad3      	subs	r3, r2, r3
 8019612:	b29b      	uxth	r3, r3
 8019614:	2201      	movs	r2, #1
 8019616:	6939      	ldr	r1, [r7, #16]
 8019618:	f7fa fe56 	bl	80142c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801961c:	6a3b      	ldr	r3, [r7, #32]
 801961e:	68db      	ldr	r3, [r3, #12]
 8019620:	685b      	ldr	r3, [r3, #4]
 8019622:	4618      	mov	r0, r3
 8019624:	f7f9 f872 	bl	801270c <lwip_htonl>
 8019628:	4603      	mov	r3, r0
 801962a:	3301      	adds	r3, #1
 801962c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	1ad3      	subs	r3, r2, r3
 8019636:	2b00      	cmp	r3, #0
 8019638:	da02      	bge.n	8019640 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	68fa      	ldr	r2, [r7, #12]
 801963e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019644:	2200      	movs	r2, #0
 8019646:	69b9      	ldr	r1, [r7, #24]
 8019648:	6878      	ldr	r0, [r7, #4]
 801964a:	f7ff fdef 	bl	801922c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801964e:	687a      	ldr	r2, [r7, #4]
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	3304      	adds	r3, #4
 8019654:	69b9      	ldr	r1, [r7, #24]
 8019656:	6878      	ldr	r0, [r7, #4]
 8019658:	f7ff fe26 	bl	80192a8 <tcp_output_control_segment>
 801965c:	4603      	mov	r3, r0
 801965e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019660:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019664:	4618      	mov	r0, r3
 8019666:	372c      	adds	r7, #44	@ 0x2c
 8019668:	46bd      	mov	sp, r7
 801966a:	bd90      	pop	{r4, r7, pc}
 801966c:	0802053c 	.word	0x0802053c
 8019670:	08020d34 	.word	0x08020d34
 8019674:	08020590 	.word	0x08020590

08019678 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019678:	b580      	push	{r7, lr}
 801967a:	b082      	sub	sp, #8
 801967c:	af00      	add	r7, sp, #0
 801967e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019680:	f7fa ff10 	bl	80144a4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019684:	4b0a      	ldr	r3, [pc, #40]	@ (80196b0 <tcpip_tcp_timer+0x38>)
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d103      	bne.n	8019694 <tcpip_tcp_timer+0x1c>
 801968c:	4b09      	ldr	r3, [pc, #36]	@ (80196b4 <tcpip_tcp_timer+0x3c>)
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d005      	beq.n	80196a0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019694:	2200      	movs	r2, #0
 8019696:	4908      	ldr	r1, [pc, #32]	@ (80196b8 <tcpip_tcp_timer+0x40>)
 8019698:	20fa      	movs	r0, #250	@ 0xfa
 801969a:	f000 f8f3 	bl	8019884 <sys_timeout>
 801969e:	e003      	b.n	80196a8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80196a0:	4b06      	ldr	r3, [pc, #24]	@ (80196bc <tcpip_tcp_timer+0x44>)
 80196a2:	2200      	movs	r2, #0
 80196a4:	601a      	str	r2, [r3, #0]
  }
}
 80196a6:	bf00      	nop
 80196a8:	bf00      	nop
 80196aa:	3708      	adds	r7, #8
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bd80      	pop	{r7, pc}
 80196b0:	20027694 	.word	0x20027694
 80196b4:	20027698 	.word	0x20027698
 80196b8:	08019679 	.word	0x08019679
 80196bc:	200276e0 	.word	0x200276e0

080196c0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80196c0:	b580      	push	{r7, lr}
 80196c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80196c4:	4b0a      	ldr	r3, [pc, #40]	@ (80196f0 <tcp_timer_needed+0x30>)
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d10f      	bne.n	80196ec <tcp_timer_needed+0x2c>
 80196cc:	4b09      	ldr	r3, [pc, #36]	@ (80196f4 <tcp_timer_needed+0x34>)
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d103      	bne.n	80196dc <tcp_timer_needed+0x1c>
 80196d4:	4b08      	ldr	r3, [pc, #32]	@ (80196f8 <tcp_timer_needed+0x38>)
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d007      	beq.n	80196ec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80196dc:	4b04      	ldr	r3, [pc, #16]	@ (80196f0 <tcp_timer_needed+0x30>)
 80196de:	2201      	movs	r2, #1
 80196e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80196e2:	2200      	movs	r2, #0
 80196e4:	4905      	ldr	r1, [pc, #20]	@ (80196fc <tcp_timer_needed+0x3c>)
 80196e6:	20fa      	movs	r0, #250	@ 0xfa
 80196e8:	f000 f8cc 	bl	8019884 <sys_timeout>
  }
}
 80196ec:	bf00      	nop
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	200276e0 	.word	0x200276e0
 80196f4:	20027694 	.word	0x20027694
 80196f8:	20027698 	.word	0x20027698
 80196fc:	08019679 	.word	0x08019679

08019700 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b086      	sub	sp, #24
 8019704:	af00      	add	r7, sp, #0
 8019706:	60f8      	str	r0, [r7, #12]
 8019708:	60b9      	str	r1, [r7, #8]
 801970a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801970c:	200a      	movs	r0, #10
 801970e:	f7f9 fcbb 	bl	8013088 <memp_malloc>
 8019712:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019714:	693b      	ldr	r3, [r7, #16]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d109      	bne.n	801972e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801971a:	693b      	ldr	r3, [r7, #16]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d151      	bne.n	80197c4 <sys_timeout_abs+0xc4>
 8019720:	4b2a      	ldr	r3, [pc, #168]	@ (80197cc <sys_timeout_abs+0xcc>)
 8019722:	22be      	movs	r2, #190	@ 0xbe
 8019724:	492a      	ldr	r1, [pc, #168]	@ (80197d0 <sys_timeout_abs+0xd0>)
 8019726:	482b      	ldr	r0, [pc, #172]	@ (80197d4 <sys_timeout_abs+0xd4>)
 8019728:	f004 fad4 	bl	801dcd4 <iprintf>
    return;
 801972c:	e04a      	b.n	80197c4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801972e:	693b      	ldr	r3, [r7, #16]
 8019730:	2200      	movs	r2, #0
 8019732:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019734:	693b      	ldr	r3, [r7, #16]
 8019736:	68ba      	ldr	r2, [r7, #8]
 8019738:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801973a:	693b      	ldr	r3, [r7, #16]
 801973c:	687a      	ldr	r2, [r7, #4]
 801973e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019740:	693b      	ldr	r3, [r7, #16]
 8019742:	68fa      	ldr	r2, [r7, #12]
 8019744:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019746:	4b24      	ldr	r3, [pc, #144]	@ (80197d8 <sys_timeout_abs+0xd8>)
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d103      	bne.n	8019756 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801974e:	4a22      	ldr	r2, [pc, #136]	@ (80197d8 <sys_timeout_abs+0xd8>)
 8019750:	693b      	ldr	r3, [r7, #16]
 8019752:	6013      	str	r3, [r2, #0]
    return;
 8019754:	e037      	b.n	80197c6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019756:	693b      	ldr	r3, [r7, #16]
 8019758:	685a      	ldr	r2, [r3, #4]
 801975a:	4b1f      	ldr	r3, [pc, #124]	@ (80197d8 <sys_timeout_abs+0xd8>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	685b      	ldr	r3, [r3, #4]
 8019760:	1ad3      	subs	r3, r2, r3
 8019762:	0fdb      	lsrs	r3, r3, #31
 8019764:	f003 0301 	and.w	r3, r3, #1
 8019768:	b2db      	uxtb	r3, r3
 801976a:	2b00      	cmp	r3, #0
 801976c:	d007      	beq.n	801977e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801976e:	4b1a      	ldr	r3, [pc, #104]	@ (80197d8 <sys_timeout_abs+0xd8>)
 8019770:	681a      	ldr	r2, [r3, #0]
 8019772:	693b      	ldr	r3, [r7, #16]
 8019774:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019776:	4a18      	ldr	r2, [pc, #96]	@ (80197d8 <sys_timeout_abs+0xd8>)
 8019778:	693b      	ldr	r3, [r7, #16]
 801977a:	6013      	str	r3, [r2, #0]
 801977c:	e023      	b.n	80197c6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801977e:	4b16      	ldr	r3, [pc, #88]	@ (80197d8 <sys_timeout_abs+0xd8>)
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	617b      	str	r3, [r7, #20]
 8019784:	e01a      	b.n	80197bc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019786:	697b      	ldr	r3, [r7, #20]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d00b      	beq.n	80197a6 <sys_timeout_abs+0xa6>
 801978e:	693b      	ldr	r3, [r7, #16]
 8019790:	685a      	ldr	r2, [r3, #4]
 8019792:	697b      	ldr	r3, [r7, #20]
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	685b      	ldr	r3, [r3, #4]
 8019798:	1ad3      	subs	r3, r2, r3
 801979a:	0fdb      	lsrs	r3, r3, #31
 801979c:	f003 0301 	and.w	r3, r3, #1
 80197a0:	b2db      	uxtb	r3, r3
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d007      	beq.n	80197b6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80197a6:	697b      	ldr	r3, [r7, #20]
 80197a8:	681a      	ldr	r2, [r3, #0]
 80197aa:	693b      	ldr	r3, [r7, #16]
 80197ac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80197ae:	697b      	ldr	r3, [r7, #20]
 80197b0:	693a      	ldr	r2, [r7, #16]
 80197b2:	601a      	str	r2, [r3, #0]
        break;
 80197b4:	e007      	b.n	80197c6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80197b6:	697b      	ldr	r3, [r7, #20]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	617b      	str	r3, [r7, #20]
 80197bc:	697b      	ldr	r3, [r7, #20]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d1e1      	bne.n	8019786 <sys_timeout_abs+0x86>
 80197c2:	e000      	b.n	80197c6 <sys_timeout_abs+0xc6>
    return;
 80197c4:	bf00      	nop
      }
    }
  }
}
 80197c6:	3718      	adds	r7, #24
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bd80      	pop	{r7, pc}
 80197cc:	08020d58 	.word	0x08020d58
 80197d0:	08020d8c 	.word	0x08020d8c
 80197d4:	08020dcc 	.word	0x08020dcc
 80197d8:	200276d8 	.word	0x200276d8

080197dc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b086      	sub	sp, #24
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	685b      	ldr	r3, [r3, #4]
 80197ec:	4798      	blx	r3

  now = sys_now();
 80197ee:	f7f4 facf 	bl	800dd90 <sys_now>
 80197f2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80197f4:	697b      	ldr	r3, [r7, #20]
 80197f6:	681a      	ldr	r2, [r3, #0]
 80197f8:	4b0f      	ldr	r3, [pc, #60]	@ (8019838 <lwip_cyclic_timer+0x5c>)
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	4413      	add	r3, r2
 80197fe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019800:	68fa      	ldr	r2, [r7, #12]
 8019802:	693b      	ldr	r3, [r7, #16]
 8019804:	1ad3      	subs	r3, r2, r3
 8019806:	0fdb      	lsrs	r3, r3, #31
 8019808:	f003 0301 	and.w	r3, r3, #1
 801980c:	b2db      	uxtb	r3, r3
 801980e:	2b00      	cmp	r3, #0
 8019810:	d009      	beq.n	8019826 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019812:	697b      	ldr	r3, [r7, #20]
 8019814:	681a      	ldr	r2, [r3, #0]
 8019816:	693b      	ldr	r3, [r7, #16]
 8019818:	4413      	add	r3, r2
 801981a:	687a      	ldr	r2, [r7, #4]
 801981c:	4907      	ldr	r1, [pc, #28]	@ (801983c <lwip_cyclic_timer+0x60>)
 801981e:	4618      	mov	r0, r3
 8019820:	f7ff ff6e 	bl	8019700 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019824:	e004      	b.n	8019830 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019826:	687a      	ldr	r2, [r7, #4]
 8019828:	4904      	ldr	r1, [pc, #16]	@ (801983c <lwip_cyclic_timer+0x60>)
 801982a:	68f8      	ldr	r0, [r7, #12]
 801982c:	f7ff ff68 	bl	8019700 <sys_timeout_abs>
}
 8019830:	bf00      	nop
 8019832:	3718      	adds	r7, #24
 8019834:	46bd      	mov	sp, r7
 8019836:	bd80      	pop	{r7, pc}
 8019838:	200276dc 	.word	0x200276dc
 801983c:	080197dd 	.word	0x080197dd

08019840 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b082      	sub	sp, #8
 8019844:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019846:	2301      	movs	r3, #1
 8019848:	607b      	str	r3, [r7, #4]
 801984a:	e00e      	b.n	801986a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801984c:	4a0b      	ldr	r2, [pc, #44]	@ (801987c <sys_timeouts_init+0x3c>)
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	00db      	lsls	r3, r3, #3
 8019858:	4a08      	ldr	r2, [pc, #32]	@ (801987c <sys_timeouts_init+0x3c>)
 801985a:	4413      	add	r3, r2
 801985c:	461a      	mov	r2, r3
 801985e:	4908      	ldr	r1, [pc, #32]	@ (8019880 <sys_timeouts_init+0x40>)
 8019860:	f000 f810 	bl	8019884 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	3301      	adds	r3, #1
 8019868:	607b      	str	r3, [r7, #4]
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	2b02      	cmp	r3, #2
 801986e:	d9ed      	bls.n	801984c <sys_timeouts_init+0xc>
  }
}
 8019870:	bf00      	nop
 8019872:	bf00      	nop
 8019874:	3708      	adds	r7, #8
 8019876:	46bd      	mov	sp, r7
 8019878:	bd80      	pop	{r7, pc}
 801987a:	bf00      	nop
 801987c:	08021c7c 	.word	0x08021c7c
 8019880:	080197dd 	.word	0x080197dd

08019884 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019884:	b580      	push	{r7, lr}
 8019886:	b086      	sub	sp, #24
 8019888:	af00      	add	r7, sp, #0
 801988a:	60f8      	str	r0, [r7, #12]
 801988c:	60b9      	str	r1, [r7, #8]
 801988e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019896:	d306      	bcc.n	80198a6 <sys_timeout+0x22>
 8019898:	4b0a      	ldr	r3, [pc, #40]	@ (80198c4 <sys_timeout+0x40>)
 801989a:	f240 1229 	movw	r2, #297	@ 0x129
 801989e:	490a      	ldr	r1, [pc, #40]	@ (80198c8 <sys_timeout+0x44>)
 80198a0:	480a      	ldr	r0, [pc, #40]	@ (80198cc <sys_timeout+0x48>)
 80198a2:	f004 fa17 	bl	801dcd4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80198a6:	f7f4 fa73 	bl	800dd90 <sys_now>
 80198aa:	4602      	mov	r2, r0
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	4413      	add	r3, r2
 80198b0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80198b2:	687a      	ldr	r2, [r7, #4]
 80198b4:	68b9      	ldr	r1, [r7, #8]
 80198b6:	6978      	ldr	r0, [r7, #20]
 80198b8:	f7ff ff22 	bl	8019700 <sys_timeout_abs>
#endif
}
 80198bc:	bf00      	nop
 80198be:	3718      	adds	r7, #24
 80198c0:	46bd      	mov	sp, r7
 80198c2:	bd80      	pop	{r7, pc}
 80198c4:	08020d58 	.word	0x08020d58
 80198c8:	08020df4 	.word	0x08020df4
 80198cc:	08020dcc 	.word	0x08020dcc

080198d0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b084      	sub	sp, #16
 80198d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80198d6:	f7f4 fa5b 	bl	800dd90 <sys_now>
 80198da:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80198dc:	4b17      	ldr	r3, [pc, #92]	@ (801993c <sys_check_timeouts+0x6c>)
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80198e2:	68bb      	ldr	r3, [r7, #8]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d022      	beq.n	801992e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80198e8:	68bb      	ldr	r3, [r7, #8]
 80198ea:	685b      	ldr	r3, [r3, #4]
 80198ec:	68fa      	ldr	r2, [r7, #12]
 80198ee:	1ad3      	subs	r3, r2, r3
 80198f0:	0fdb      	lsrs	r3, r3, #31
 80198f2:	f003 0301 	and.w	r3, r3, #1
 80198f6:	b2db      	uxtb	r3, r3
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d11a      	bne.n	8019932 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80198fc:	68bb      	ldr	r3, [r7, #8]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	4a0e      	ldr	r2, [pc, #56]	@ (801993c <sys_check_timeouts+0x6c>)
 8019902:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019904:	68bb      	ldr	r3, [r7, #8]
 8019906:	689b      	ldr	r3, [r3, #8]
 8019908:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801990a:	68bb      	ldr	r3, [r7, #8]
 801990c:	68db      	ldr	r3, [r3, #12]
 801990e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019910:	68bb      	ldr	r3, [r7, #8]
 8019912:	685b      	ldr	r3, [r3, #4]
 8019914:	4a0a      	ldr	r2, [pc, #40]	@ (8019940 <sys_check_timeouts+0x70>)
 8019916:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019918:	68b9      	ldr	r1, [r7, #8]
 801991a:	200a      	movs	r0, #10
 801991c:	f7f9 fc2a 	bl	8013174 <memp_free>
    if (handler != NULL) {
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d0da      	beq.n	80198dc <sys_check_timeouts+0xc>
      handler(arg);
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	6838      	ldr	r0, [r7, #0]
 801992a:	4798      	blx	r3
  do {
 801992c:	e7d6      	b.n	80198dc <sys_check_timeouts+0xc>
      return;
 801992e:	bf00      	nop
 8019930:	e000      	b.n	8019934 <sys_check_timeouts+0x64>
      return;
 8019932:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019934:	3710      	adds	r7, #16
 8019936:	46bd      	mov	sp, r7
 8019938:	bd80      	pop	{r7, pc}
 801993a:	bf00      	nop
 801993c:	200276d8 	.word	0x200276d8
 8019940:	200276dc 	.word	0x200276dc

08019944 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019944:	b580      	push	{r7, lr}
 8019946:	b082      	sub	sp, #8
 8019948:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801994a:	4b16      	ldr	r3, [pc, #88]	@ (80199a4 <sys_timeouts_sleeptime+0x60>)
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d102      	bne.n	8019958 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019952:	f04f 33ff 	mov.w	r3, #4294967295
 8019956:	e020      	b.n	801999a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019958:	f7f4 fa1a 	bl	800dd90 <sys_now>
 801995c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801995e:	4b11      	ldr	r3, [pc, #68]	@ (80199a4 <sys_timeouts_sleeptime+0x60>)
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	685a      	ldr	r2, [r3, #4]
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	1ad3      	subs	r3, r2, r3
 8019968:	0fdb      	lsrs	r3, r3, #31
 801996a:	f003 0301 	and.w	r3, r3, #1
 801996e:	b2db      	uxtb	r3, r3
 8019970:	2b00      	cmp	r3, #0
 8019972:	d001      	beq.n	8019978 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019974:	2300      	movs	r3, #0
 8019976:	e010      	b.n	801999a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019978:	4b0a      	ldr	r3, [pc, #40]	@ (80199a4 <sys_timeouts_sleeptime+0x60>)
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	685a      	ldr	r2, [r3, #4]
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	1ad3      	subs	r3, r2, r3
 8019982:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	2b00      	cmp	r3, #0
 8019988:	da06      	bge.n	8019998 <sys_timeouts_sleeptime+0x54>
 801998a:	4b07      	ldr	r3, [pc, #28]	@ (80199a8 <sys_timeouts_sleeptime+0x64>)
 801998c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8019990:	4906      	ldr	r1, [pc, #24]	@ (80199ac <sys_timeouts_sleeptime+0x68>)
 8019992:	4807      	ldr	r0, [pc, #28]	@ (80199b0 <sys_timeouts_sleeptime+0x6c>)
 8019994:	f004 f99e 	bl	801dcd4 <iprintf>
    return ret;
 8019998:	683b      	ldr	r3, [r7, #0]
  }
}
 801999a:	4618      	mov	r0, r3
 801999c:	3708      	adds	r7, #8
 801999e:	46bd      	mov	sp, r7
 80199a0:	bd80      	pop	{r7, pc}
 80199a2:	bf00      	nop
 80199a4:	200276d8 	.word	0x200276d8
 80199a8:	08020d58 	.word	0x08020d58
 80199ac:	08020e2c 	.word	0x08020e2c
 80199b0:	08020dcc 	.word	0x08020dcc

080199b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80199b8:	f004 f88c 	bl	801dad4 <rand>
 80199bc:	4603      	mov	r3, r0
 80199be:	b29b      	uxth	r3, r3
 80199c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80199c4:	b29b      	uxth	r3, r3
 80199c6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80199ca:	b29a      	uxth	r2, r3
 80199cc:	4b01      	ldr	r3, [pc, #4]	@ (80199d4 <udp_init+0x20>)
 80199ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80199d0:	bf00      	nop
 80199d2:	bd80      	pop	{r7, pc}
 80199d4:	2000002c 	.word	0x2000002c

080199d8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80199d8:	b480      	push	{r7}
 80199da:	b083      	sub	sp, #12
 80199dc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80199de:	2300      	movs	r3, #0
 80199e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80199e2:	4b17      	ldr	r3, [pc, #92]	@ (8019a40 <udp_new_port+0x68>)
 80199e4:	881b      	ldrh	r3, [r3, #0]
 80199e6:	1c5a      	adds	r2, r3, #1
 80199e8:	b291      	uxth	r1, r2
 80199ea:	4a15      	ldr	r2, [pc, #84]	@ (8019a40 <udp_new_port+0x68>)
 80199ec:	8011      	strh	r1, [r2, #0]
 80199ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80199f2:	4293      	cmp	r3, r2
 80199f4:	d103      	bne.n	80199fe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80199f6:	4b12      	ldr	r3, [pc, #72]	@ (8019a40 <udp_new_port+0x68>)
 80199f8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80199fc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80199fe:	4b11      	ldr	r3, [pc, #68]	@ (8019a44 <udp_new_port+0x6c>)
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	603b      	str	r3, [r7, #0]
 8019a04:	e011      	b.n	8019a2a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8019a06:	683b      	ldr	r3, [r7, #0]
 8019a08:	8a5a      	ldrh	r2, [r3, #18]
 8019a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8019a40 <udp_new_port+0x68>)
 8019a0c:	881b      	ldrh	r3, [r3, #0]
 8019a0e:	429a      	cmp	r2, r3
 8019a10:	d108      	bne.n	8019a24 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019a12:	88fb      	ldrh	r3, [r7, #6]
 8019a14:	3301      	adds	r3, #1
 8019a16:	80fb      	strh	r3, [r7, #6]
 8019a18:	88fb      	ldrh	r3, [r7, #6]
 8019a1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019a1e:	d3e0      	bcc.n	80199e2 <udp_new_port+0xa>
        return 0;
 8019a20:	2300      	movs	r3, #0
 8019a22:	e007      	b.n	8019a34 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	68db      	ldr	r3, [r3, #12]
 8019a28:	603b      	str	r3, [r7, #0]
 8019a2a:	683b      	ldr	r3, [r7, #0]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d1ea      	bne.n	8019a06 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019a30:	4b03      	ldr	r3, [pc, #12]	@ (8019a40 <udp_new_port+0x68>)
 8019a32:	881b      	ldrh	r3, [r3, #0]
}
 8019a34:	4618      	mov	r0, r3
 8019a36:	370c      	adds	r7, #12
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3e:	4770      	bx	lr
 8019a40:	2000002c 	.word	0x2000002c
 8019a44:	200276e4 	.word	0x200276e4

08019a48 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b084      	sub	sp, #16
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	60f8      	str	r0, [r7, #12]
 8019a50:	60b9      	str	r1, [r7, #8]
 8019a52:	4613      	mov	r3, r2
 8019a54:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d105      	bne.n	8019a68 <udp_input_local_match+0x20>
 8019a5c:	4b27      	ldr	r3, [pc, #156]	@ (8019afc <udp_input_local_match+0xb4>)
 8019a5e:	2287      	movs	r2, #135	@ 0x87
 8019a60:	4927      	ldr	r1, [pc, #156]	@ (8019b00 <udp_input_local_match+0xb8>)
 8019a62:	4828      	ldr	r0, [pc, #160]	@ (8019b04 <udp_input_local_match+0xbc>)
 8019a64:	f004 f936 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019a68:	68bb      	ldr	r3, [r7, #8]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d105      	bne.n	8019a7a <udp_input_local_match+0x32>
 8019a6e:	4b23      	ldr	r3, [pc, #140]	@ (8019afc <udp_input_local_match+0xb4>)
 8019a70:	2288      	movs	r2, #136	@ 0x88
 8019a72:	4925      	ldr	r1, [pc, #148]	@ (8019b08 <udp_input_local_match+0xc0>)
 8019a74:	4823      	ldr	r0, [pc, #140]	@ (8019b04 <udp_input_local_match+0xbc>)
 8019a76:	f004 f92d 	bl	801dcd4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	7a1b      	ldrb	r3, [r3, #8]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d00b      	beq.n	8019a9a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	7a1a      	ldrb	r2, [r3, #8]
 8019a86:	4b21      	ldr	r3, [pc, #132]	@ (8019b0c <udp_input_local_match+0xc4>)
 8019a88:	685b      	ldr	r3, [r3, #4]
 8019a8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019a8e:	3301      	adds	r3, #1
 8019a90:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019a92:	429a      	cmp	r2, r3
 8019a94:	d001      	beq.n	8019a9a <udp_input_local_match+0x52>
    return 0;
 8019a96:	2300      	movs	r3, #0
 8019a98:	e02b      	b.n	8019af2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8019a9a:	79fb      	ldrb	r3, [r7, #7]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d018      	beq.n	8019ad2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d013      	beq.n	8019ace <udp_input_local_match+0x86>
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d00f      	beq.n	8019ace <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019aae:	4b17      	ldr	r3, [pc, #92]	@ (8019b0c <udp_input_local_match+0xc4>)
 8019ab0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ab6:	d00a      	beq.n	8019ace <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	681a      	ldr	r2, [r3, #0]
 8019abc:	4b13      	ldr	r3, [pc, #76]	@ (8019b0c <udp_input_local_match+0xc4>)
 8019abe:	695b      	ldr	r3, [r3, #20]
 8019ac0:	405a      	eors	r2, r3
 8019ac2:	68bb      	ldr	r3, [r7, #8]
 8019ac4:	3308      	adds	r3, #8
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d110      	bne.n	8019af0 <udp_input_local_match+0xa8>
          return 1;
 8019ace:	2301      	movs	r3, #1
 8019ad0:	e00f      	b.n	8019af2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d009      	beq.n	8019aec <udp_input_local_match+0xa4>
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d005      	beq.n	8019aec <udp_input_local_match+0xa4>
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	681a      	ldr	r2, [r3, #0]
 8019ae4:	4b09      	ldr	r3, [pc, #36]	@ (8019b0c <udp_input_local_match+0xc4>)
 8019ae6:	695b      	ldr	r3, [r3, #20]
 8019ae8:	429a      	cmp	r2, r3
 8019aea:	d101      	bne.n	8019af0 <udp_input_local_match+0xa8>
        return 1;
 8019aec:	2301      	movs	r3, #1
 8019aee:	e000      	b.n	8019af2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019af0:	2300      	movs	r3, #0
}
 8019af2:	4618      	mov	r0, r3
 8019af4:	3710      	adds	r7, #16
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bd80      	pop	{r7, pc}
 8019afa:	bf00      	nop
 8019afc:	08020e40 	.word	0x08020e40
 8019b00:	08020e70 	.word	0x08020e70
 8019b04:	08020e94 	.word	0x08020e94
 8019b08:	08020ebc 	.word	0x08020ebc
 8019b0c:	20024588 	.word	0x20024588

08019b10 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019b10:	b590      	push	{r4, r7, lr}
 8019b12:	b08d      	sub	sp, #52	@ 0x34
 8019b14:	af02      	add	r7, sp, #8
 8019b16:	6078      	str	r0, [r7, #4]
 8019b18:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d105      	bne.n	8019b30 <udp_input+0x20>
 8019b24:	4b7c      	ldr	r3, [pc, #496]	@ (8019d18 <udp_input+0x208>)
 8019b26:	22cf      	movs	r2, #207	@ 0xcf
 8019b28:	497c      	ldr	r1, [pc, #496]	@ (8019d1c <udp_input+0x20c>)
 8019b2a:	487d      	ldr	r0, [pc, #500]	@ (8019d20 <udp_input+0x210>)
 8019b2c:	f004 f8d2 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019b30:	683b      	ldr	r3, [r7, #0]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d105      	bne.n	8019b42 <udp_input+0x32>
 8019b36:	4b78      	ldr	r3, [pc, #480]	@ (8019d18 <udp_input+0x208>)
 8019b38:	22d0      	movs	r2, #208	@ 0xd0
 8019b3a:	497a      	ldr	r1, [pc, #488]	@ (8019d24 <udp_input+0x214>)
 8019b3c:	4878      	ldr	r0, [pc, #480]	@ (8019d20 <udp_input+0x210>)
 8019b3e:	f004 f8c9 	bl	801dcd4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	895b      	ldrh	r3, [r3, #10]
 8019b46:	2b07      	cmp	r3, #7
 8019b48:	d803      	bhi.n	8019b52 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019b4a:	6878      	ldr	r0, [r7, #4]
 8019b4c:	f7fa f9b6 	bl	8013ebc <pbuf_free>
    goto end;
 8019b50:	e0de      	b.n	8019d10 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	685b      	ldr	r3, [r3, #4]
 8019b56:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019b58:	4b73      	ldr	r3, [pc, #460]	@ (8019d28 <udp_input+0x218>)
 8019b5a:	695b      	ldr	r3, [r3, #20]
 8019b5c:	4a72      	ldr	r2, [pc, #456]	@ (8019d28 <udp_input+0x218>)
 8019b5e:	6812      	ldr	r2, [r2, #0]
 8019b60:	4611      	mov	r1, r2
 8019b62:	4618      	mov	r0, r3
 8019b64:	f001 fefe 	bl	801b964 <ip4_addr_isbroadcast_u32>
 8019b68:	4603      	mov	r3, r0
 8019b6a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019b6c:	697b      	ldr	r3, [r7, #20]
 8019b6e:	881b      	ldrh	r3, [r3, #0]
 8019b70:	b29b      	uxth	r3, r3
 8019b72:	4618      	mov	r0, r3
 8019b74:	f7f8 fdb4 	bl	80126e0 <lwip_htons>
 8019b78:	4603      	mov	r3, r0
 8019b7a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019b7c:	697b      	ldr	r3, [r7, #20]
 8019b7e:	885b      	ldrh	r3, [r3, #2]
 8019b80:	b29b      	uxth	r3, r3
 8019b82:	4618      	mov	r0, r3
 8019b84:	f7f8 fdac 	bl	80126e0 <lwip_htons>
 8019b88:	4603      	mov	r3, r0
 8019b8a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019b8c:	2300      	movs	r3, #0
 8019b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8019b90:	2300      	movs	r3, #0
 8019b92:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019b94:	2300      	movs	r3, #0
 8019b96:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019b98:	4b64      	ldr	r3, [pc, #400]	@ (8019d2c <udp_input+0x21c>)
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019b9e:	e054      	b.n	8019c4a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ba2:	8a5b      	ldrh	r3, [r3, #18]
 8019ba4:	89fa      	ldrh	r2, [r7, #14]
 8019ba6:	429a      	cmp	r2, r3
 8019ba8:	d14a      	bne.n	8019c40 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019baa:	7cfb      	ldrb	r3, [r7, #19]
 8019bac:	461a      	mov	r2, r3
 8019bae:	6839      	ldr	r1, [r7, #0]
 8019bb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019bb2:	f7ff ff49 	bl	8019a48 <udp_input_local_match>
 8019bb6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d041      	beq.n	8019c40 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bbe:	7c1b      	ldrb	r3, [r3, #16]
 8019bc0:	f003 0304 	and.w	r3, r3, #4
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d11d      	bne.n	8019c04 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019bc8:	69fb      	ldr	r3, [r7, #28]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d102      	bne.n	8019bd4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bd0:	61fb      	str	r3, [r7, #28]
 8019bd2:	e017      	b.n	8019c04 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019bd4:	7cfb      	ldrb	r3, [r7, #19]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d014      	beq.n	8019c04 <udp_input+0xf4>
 8019bda:	4b53      	ldr	r3, [pc, #332]	@ (8019d28 <udp_input+0x218>)
 8019bdc:	695b      	ldr	r3, [r3, #20]
 8019bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019be2:	d10f      	bne.n	8019c04 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019be4:	69fb      	ldr	r3, [r7, #28]
 8019be6:	681a      	ldr	r2, [r3, #0]
 8019be8:	683b      	ldr	r3, [r7, #0]
 8019bea:	3304      	adds	r3, #4
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	429a      	cmp	r2, r3
 8019bf0:	d008      	beq.n	8019c04 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bf4:	681a      	ldr	r2, [r3, #0]
 8019bf6:	683b      	ldr	r3, [r7, #0]
 8019bf8:	3304      	adds	r3, #4
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	429a      	cmp	r2, r3
 8019bfe:	d101      	bne.n	8019c04 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c02:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c06:	8a9b      	ldrh	r3, [r3, #20]
 8019c08:	8a3a      	ldrh	r2, [r7, #16]
 8019c0a:	429a      	cmp	r2, r3
 8019c0c:	d118      	bne.n	8019c40 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c10:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d005      	beq.n	8019c22 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c18:	685a      	ldr	r2, [r3, #4]
 8019c1a:	4b43      	ldr	r3, [pc, #268]	@ (8019d28 <udp_input+0x218>)
 8019c1c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019c1e:	429a      	cmp	r2, r3
 8019c20:	d10e      	bne.n	8019c40 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019c22:	6a3b      	ldr	r3, [r7, #32]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d014      	beq.n	8019c52 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c2a:	68da      	ldr	r2, [r3, #12]
 8019c2c:	6a3b      	ldr	r3, [r7, #32]
 8019c2e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019c30:	4b3e      	ldr	r3, [pc, #248]	@ (8019d2c <udp_input+0x21c>)
 8019c32:	681a      	ldr	r2, [r3, #0]
 8019c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c36:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019c38:	4a3c      	ldr	r2, [pc, #240]	@ (8019d2c <udp_input+0x21c>)
 8019c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c3c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019c3e:	e008      	b.n	8019c52 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c42:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c46:	68db      	ldr	r3, [r3, #12]
 8019c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8019c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d1a7      	bne.n	8019ba0 <udp_input+0x90>
 8019c50:	e000      	b.n	8019c54 <udp_input+0x144>
        break;
 8019c52:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d101      	bne.n	8019c5e <udp_input+0x14e>
    pcb = uncon_pcb;
 8019c5a:	69fb      	ldr	r3, [r7, #28]
 8019c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d002      	beq.n	8019c6a <udp_input+0x15a>
    for_us = 1;
 8019c64:	2301      	movs	r3, #1
 8019c66:	76fb      	strb	r3, [r7, #27]
 8019c68:	e00a      	b.n	8019c80 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	3304      	adds	r3, #4
 8019c6e:	681a      	ldr	r2, [r3, #0]
 8019c70:	4b2d      	ldr	r3, [pc, #180]	@ (8019d28 <udp_input+0x218>)
 8019c72:	695b      	ldr	r3, [r3, #20]
 8019c74:	429a      	cmp	r2, r3
 8019c76:	bf0c      	ite	eq
 8019c78:	2301      	moveq	r3, #1
 8019c7a:	2300      	movne	r3, #0
 8019c7c:	b2db      	uxtb	r3, r3
 8019c7e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019c80:	7efb      	ldrb	r3, [r7, #27]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d041      	beq.n	8019d0a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019c86:	2108      	movs	r1, #8
 8019c88:	6878      	ldr	r0, [r7, #4]
 8019c8a:	f7fa f891 	bl	8013db0 <pbuf_remove_header>
 8019c8e:	4603      	mov	r3, r0
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d00a      	beq.n	8019caa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019c94:	4b20      	ldr	r3, [pc, #128]	@ (8019d18 <udp_input+0x208>)
 8019c96:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8019c9a:	4925      	ldr	r1, [pc, #148]	@ (8019d30 <udp_input+0x220>)
 8019c9c:	4820      	ldr	r0, [pc, #128]	@ (8019d20 <udp_input+0x210>)
 8019c9e:	f004 f819 	bl	801dcd4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019ca2:	6878      	ldr	r0, [r7, #4]
 8019ca4:	f7fa f90a 	bl	8013ebc <pbuf_free>
      goto end;
 8019ca8:	e032      	b.n	8019d10 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d012      	beq.n	8019cd6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cb2:	699b      	ldr	r3, [r3, #24]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d00a      	beq.n	8019cce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cba:	699c      	ldr	r4, [r3, #24]
 8019cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cbe:	69d8      	ldr	r0, [r3, #28]
 8019cc0:	8a3b      	ldrh	r3, [r7, #16]
 8019cc2:	9300      	str	r3, [sp, #0]
 8019cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8019d34 <udp_input+0x224>)
 8019cc6:	687a      	ldr	r2, [r7, #4]
 8019cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019cca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019ccc:	e021      	b.n	8019d12 <udp_input+0x202>
        pbuf_free(p);
 8019cce:	6878      	ldr	r0, [r7, #4]
 8019cd0:	f7fa f8f4 	bl	8013ebc <pbuf_free>
        goto end;
 8019cd4:	e01c      	b.n	8019d10 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019cd6:	7cfb      	ldrb	r3, [r7, #19]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d112      	bne.n	8019d02 <udp_input+0x1f2>
 8019cdc:	4b12      	ldr	r3, [pc, #72]	@ (8019d28 <udp_input+0x218>)
 8019cde:	695b      	ldr	r3, [r3, #20]
 8019ce0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019ce4:	2be0      	cmp	r3, #224	@ 0xe0
 8019ce6:	d00c      	beq.n	8019d02 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8019d28 <udp_input+0x218>)
 8019cea:	899b      	ldrh	r3, [r3, #12]
 8019cec:	3308      	adds	r3, #8
 8019cee:	b29b      	uxth	r3, r3
 8019cf0:	b21b      	sxth	r3, r3
 8019cf2:	4619      	mov	r1, r3
 8019cf4:	6878      	ldr	r0, [r7, #4]
 8019cf6:	f7fa f8ce 	bl	8013e96 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019cfa:	2103      	movs	r1, #3
 8019cfc:	6878      	ldr	r0, [r7, #4]
 8019cfe:	f001 fb11 	bl	801b324 <icmp_dest_unreach>
      pbuf_free(p);
 8019d02:	6878      	ldr	r0, [r7, #4]
 8019d04:	f7fa f8da 	bl	8013ebc <pbuf_free>
  return;
 8019d08:	e003      	b.n	8019d12 <udp_input+0x202>
    pbuf_free(p);
 8019d0a:	6878      	ldr	r0, [r7, #4]
 8019d0c:	f7fa f8d6 	bl	8013ebc <pbuf_free>
  return;
 8019d10:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019d12:	372c      	adds	r7, #44	@ 0x2c
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd90      	pop	{r4, r7, pc}
 8019d18:	08020e40 	.word	0x08020e40
 8019d1c:	08020ee4 	.word	0x08020ee4
 8019d20:	08020e94 	.word	0x08020e94
 8019d24:	08020efc 	.word	0x08020efc
 8019d28:	20024588 	.word	0x20024588
 8019d2c:	200276e4 	.word	0x200276e4
 8019d30:	08020f18 	.word	0x08020f18
 8019d34:	20024598 	.word	0x20024598

08019d38 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b088      	sub	sp, #32
 8019d3c:	af02      	add	r7, sp, #8
 8019d3e:	60f8      	str	r0, [r7, #12]
 8019d40:	60b9      	str	r1, [r7, #8]
 8019d42:	607a      	str	r2, [r7, #4]
 8019d44:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d109      	bne.n	8019d60 <udp_sendto+0x28>
 8019d4c:	4b23      	ldr	r3, [pc, #140]	@ (8019ddc <udp_sendto+0xa4>)
 8019d4e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8019d52:	4923      	ldr	r1, [pc, #140]	@ (8019de0 <udp_sendto+0xa8>)
 8019d54:	4823      	ldr	r0, [pc, #140]	@ (8019de4 <udp_sendto+0xac>)
 8019d56:	f003 ffbd 	bl	801dcd4 <iprintf>
 8019d5a:	f06f 030f 	mvn.w	r3, #15
 8019d5e:	e038      	b.n	8019dd2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019d60:	68bb      	ldr	r3, [r7, #8]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d109      	bne.n	8019d7a <udp_sendto+0x42>
 8019d66:	4b1d      	ldr	r3, [pc, #116]	@ (8019ddc <udp_sendto+0xa4>)
 8019d68:	f240 2219 	movw	r2, #537	@ 0x219
 8019d6c:	491e      	ldr	r1, [pc, #120]	@ (8019de8 <udp_sendto+0xb0>)
 8019d6e:	481d      	ldr	r0, [pc, #116]	@ (8019de4 <udp_sendto+0xac>)
 8019d70:	f003 ffb0 	bl	801dcd4 <iprintf>
 8019d74:	f06f 030f 	mvn.w	r3, #15
 8019d78:	e02b      	b.n	8019dd2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d109      	bne.n	8019d94 <udp_sendto+0x5c>
 8019d80:	4b16      	ldr	r3, [pc, #88]	@ (8019ddc <udp_sendto+0xa4>)
 8019d82:	f240 221a 	movw	r2, #538	@ 0x21a
 8019d86:	4919      	ldr	r1, [pc, #100]	@ (8019dec <udp_sendto+0xb4>)
 8019d88:	4816      	ldr	r0, [pc, #88]	@ (8019de4 <udp_sendto+0xac>)
 8019d8a:	f003 ffa3 	bl	801dcd4 <iprintf>
 8019d8e:	f06f 030f 	mvn.w	r3, #15
 8019d92:	e01e      	b.n	8019dd2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	7a1b      	ldrb	r3, [r3, #8]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d006      	beq.n	8019daa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	7a1b      	ldrb	r3, [r3, #8]
 8019da0:	4618      	mov	r0, r3
 8019da2:	f7f9 fcfd 	bl	80137a0 <netif_get_by_index>
 8019da6:	6178      	str	r0, [r7, #20]
 8019da8:	e003      	b.n	8019db2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8019daa:	6878      	ldr	r0, [r7, #4]
 8019dac:	f001 fb44 	bl	801b438 <ip4_route>
 8019db0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8019db2:	697b      	ldr	r3, [r7, #20]
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d102      	bne.n	8019dbe <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8019db8:	f06f 0303 	mvn.w	r3, #3
 8019dbc:	e009      	b.n	8019dd2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8019dbe:	887a      	ldrh	r2, [r7, #2]
 8019dc0:	697b      	ldr	r3, [r7, #20]
 8019dc2:	9300      	str	r3, [sp, #0]
 8019dc4:	4613      	mov	r3, r2
 8019dc6:	687a      	ldr	r2, [r7, #4]
 8019dc8:	68b9      	ldr	r1, [r7, #8]
 8019dca:	68f8      	ldr	r0, [r7, #12]
 8019dcc:	f000 f810 	bl	8019df0 <udp_sendto_if>
 8019dd0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	3718      	adds	r7, #24
 8019dd6:	46bd      	mov	sp, r7
 8019dd8:	bd80      	pop	{r7, pc}
 8019dda:	bf00      	nop
 8019ddc:	08020e40 	.word	0x08020e40
 8019de0:	08020f64 	.word	0x08020f64
 8019de4:	08020e94 	.word	0x08020e94
 8019de8:	08020f7c 	.word	0x08020f7c
 8019dec:	08020f98 	.word	0x08020f98

08019df0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b088      	sub	sp, #32
 8019df4:	af02      	add	r7, sp, #8
 8019df6:	60f8      	str	r0, [r7, #12]
 8019df8:	60b9      	str	r1, [r7, #8]
 8019dfa:	607a      	str	r2, [r7, #4]
 8019dfc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d109      	bne.n	8019e18 <udp_sendto_if+0x28>
 8019e04:	4b2e      	ldr	r3, [pc, #184]	@ (8019ec0 <udp_sendto_if+0xd0>)
 8019e06:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019e0a:	492e      	ldr	r1, [pc, #184]	@ (8019ec4 <udp_sendto_if+0xd4>)
 8019e0c:	482e      	ldr	r0, [pc, #184]	@ (8019ec8 <udp_sendto_if+0xd8>)
 8019e0e:	f003 ff61 	bl	801dcd4 <iprintf>
 8019e12:	f06f 030f 	mvn.w	r3, #15
 8019e16:	e04f      	b.n	8019eb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019e18:	68bb      	ldr	r3, [r7, #8]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d109      	bne.n	8019e32 <udp_sendto_if+0x42>
 8019e1e:	4b28      	ldr	r3, [pc, #160]	@ (8019ec0 <udp_sendto_if+0xd0>)
 8019e20:	f240 2281 	movw	r2, #641	@ 0x281
 8019e24:	4929      	ldr	r1, [pc, #164]	@ (8019ecc <udp_sendto_if+0xdc>)
 8019e26:	4828      	ldr	r0, [pc, #160]	@ (8019ec8 <udp_sendto_if+0xd8>)
 8019e28:	f003 ff54 	bl	801dcd4 <iprintf>
 8019e2c:	f06f 030f 	mvn.w	r3, #15
 8019e30:	e042      	b.n	8019eb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d109      	bne.n	8019e4c <udp_sendto_if+0x5c>
 8019e38:	4b21      	ldr	r3, [pc, #132]	@ (8019ec0 <udp_sendto_if+0xd0>)
 8019e3a:	f240 2282 	movw	r2, #642	@ 0x282
 8019e3e:	4924      	ldr	r1, [pc, #144]	@ (8019ed0 <udp_sendto_if+0xe0>)
 8019e40:	4821      	ldr	r0, [pc, #132]	@ (8019ec8 <udp_sendto_if+0xd8>)
 8019e42:	f003 ff47 	bl	801dcd4 <iprintf>
 8019e46:	f06f 030f 	mvn.w	r3, #15
 8019e4a:	e035      	b.n	8019eb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019e4c:	6a3b      	ldr	r3, [r7, #32]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d109      	bne.n	8019e66 <udp_sendto_if+0x76>
 8019e52:	4b1b      	ldr	r3, [pc, #108]	@ (8019ec0 <udp_sendto_if+0xd0>)
 8019e54:	f240 2283 	movw	r2, #643	@ 0x283
 8019e58:	491e      	ldr	r1, [pc, #120]	@ (8019ed4 <udp_sendto_if+0xe4>)
 8019e5a:	481b      	ldr	r0, [pc, #108]	@ (8019ec8 <udp_sendto_if+0xd8>)
 8019e5c:	f003 ff3a 	bl	801dcd4 <iprintf>
 8019e60:	f06f 030f 	mvn.w	r3, #15
 8019e64:	e028      	b.n	8019eb8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d009      	beq.n	8019e80 <udp_sendto_if+0x90>
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d005      	beq.n	8019e80 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019e7c:	2be0      	cmp	r3, #224	@ 0xe0
 8019e7e:	d103      	bne.n	8019e88 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019e80:	6a3b      	ldr	r3, [r7, #32]
 8019e82:	3304      	adds	r3, #4
 8019e84:	617b      	str	r3, [r7, #20]
 8019e86:	e00b      	b.n	8019ea0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	681a      	ldr	r2, [r3, #0]
 8019e8c:	6a3b      	ldr	r3, [r7, #32]
 8019e8e:	3304      	adds	r3, #4
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	429a      	cmp	r2, r3
 8019e94:	d002      	beq.n	8019e9c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019e96:	f06f 0303 	mvn.w	r3, #3
 8019e9a:	e00d      	b.n	8019eb8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019ea0:	887a      	ldrh	r2, [r7, #2]
 8019ea2:	697b      	ldr	r3, [r7, #20]
 8019ea4:	9301      	str	r3, [sp, #4]
 8019ea6:	6a3b      	ldr	r3, [r7, #32]
 8019ea8:	9300      	str	r3, [sp, #0]
 8019eaa:	4613      	mov	r3, r2
 8019eac:	687a      	ldr	r2, [r7, #4]
 8019eae:	68b9      	ldr	r1, [r7, #8]
 8019eb0:	68f8      	ldr	r0, [r7, #12]
 8019eb2:	f000 f811 	bl	8019ed8 <udp_sendto_if_src>
 8019eb6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019eb8:	4618      	mov	r0, r3
 8019eba:	3718      	adds	r7, #24
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	bd80      	pop	{r7, pc}
 8019ec0:	08020e40 	.word	0x08020e40
 8019ec4:	08020fb4 	.word	0x08020fb4
 8019ec8:	08020e94 	.word	0x08020e94
 8019ecc:	08020fd0 	.word	0x08020fd0
 8019ed0:	08020fec 	.word	0x08020fec
 8019ed4:	0802100c 	.word	0x0802100c

08019ed8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b08c      	sub	sp, #48	@ 0x30
 8019edc:	af04      	add	r7, sp, #16
 8019ede:	60f8      	str	r0, [r7, #12]
 8019ee0:	60b9      	str	r1, [r7, #8]
 8019ee2:	607a      	str	r2, [r7, #4]
 8019ee4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d109      	bne.n	8019f00 <udp_sendto_if_src+0x28>
 8019eec:	4b65      	ldr	r3, [pc, #404]	@ (801a084 <udp_sendto_if_src+0x1ac>)
 8019eee:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8019ef2:	4965      	ldr	r1, [pc, #404]	@ (801a088 <udp_sendto_if_src+0x1b0>)
 8019ef4:	4865      	ldr	r0, [pc, #404]	@ (801a08c <udp_sendto_if_src+0x1b4>)
 8019ef6:	f003 feed 	bl	801dcd4 <iprintf>
 8019efa:	f06f 030f 	mvn.w	r3, #15
 8019efe:	e0bc      	b.n	801a07a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019f00:	68bb      	ldr	r3, [r7, #8]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d109      	bne.n	8019f1a <udp_sendto_if_src+0x42>
 8019f06:	4b5f      	ldr	r3, [pc, #380]	@ (801a084 <udp_sendto_if_src+0x1ac>)
 8019f08:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8019f0c:	4960      	ldr	r1, [pc, #384]	@ (801a090 <udp_sendto_if_src+0x1b8>)
 8019f0e:	485f      	ldr	r0, [pc, #380]	@ (801a08c <udp_sendto_if_src+0x1b4>)
 8019f10:	f003 fee0 	bl	801dcd4 <iprintf>
 8019f14:	f06f 030f 	mvn.w	r3, #15
 8019f18:	e0af      	b.n	801a07a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d109      	bne.n	8019f34 <udp_sendto_if_src+0x5c>
 8019f20:	4b58      	ldr	r3, [pc, #352]	@ (801a084 <udp_sendto_if_src+0x1ac>)
 8019f22:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8019f26:	495b      	ldr	r1, [pc, #364]	@ (801a094 <udp_sendto_if_src+0x1bc>)
 8019f28:	4858      	ldr	r0, [pc, #352]	@ (801a08c <udp_sendto_if_src+0x1b4>)
 8019f2a:	f003 fed3 	bl	801dcd4 <iprintf>
 8019f2e:	f06f 030f 	mvn.w	r3, #15
 8019f32:	e0a2      	b.n	801a07a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d109      	bne.n	8019f4e <udp_sendto_if_src+0x76>
 8019f3a:	4b52      	ldr	r3, [pc, #328]	@ (801a084 <udp_sendto_if_src+0x1ac>)
 8019f3c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8019f40:	4955      	ldr	r1, [pc, #340]	@ (801a098 <udp_sendto_if_src+0x1c0>)
 8019f42:	4852      	ldr	r0, [pc, #328]	@ (801a08c <udp_sendto_if_src+0x1b4>)
 8019f44:	f003 fec6 	bl	801dcd4 <iprintf>
 8019f48:	f06f 030f 	mvn.w	r3, #15
 8019f4c:	e095      	b.n	801a07a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d109      	bne.n	8019f68 <udp_sendto_if_src+0x90>
 8019f54:	4b4b      	ldr	r3, [pc, #300]	@ (801a084 <udp_sendto_if_src+0x1ac>)
 8019f56:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8019f5a:	4950      	ldr	r1, [pc, #320]	@ (801a09c <udp_sendto_if_src+0x1c4>)
 8019f5c:	484b      	ldr	r0, [pc, #300]	@ (801a08c <udp_sendto_if_src+0x1b4>)
 8019f5e:	f003 feb9 	bl	801dcd4 <iprintf>
 8019f62:	f06f 030f 	mvn.w	r3, #15
 8019f66:	e088      	b.n	801a07a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	8a5b      	ldrh	r3, [r3, #18]
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d10f      	bne.n	8019f90 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019f70:	68f9      	ldr	r1, [r7, #12]
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	8a5b      	ldrh	r3, [r3, #18]
 8019f76:	461a      	mov	r2, r3
 8019f78:	68f8      	ldr	r0, [r7, #12]
 8019f7a:	f000 f893 	bl	801a0a4 <udp_bind>
 8019f7e:	4603      	mov	r3, r0
 8019f80:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019f82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d002      	beq.n	8019f90 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019f8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019f8e:	e074      	b.n	801a07a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019f90:	68bb      	ldr	r3, [r7, #8]
 8019f92:	891b      	ldrh	r3, [r3, #8]
 8019f94:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8019f98:	4293      	cmp	r3, r2
 8019f9a:	d902      	bls.n	8019fa2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8019fa0:	e06b      	b.n	801a07a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019fa2:	2108      	movs	r1, #8
 8019fa4:	68b8      	ldr	r0, [r7, #8]
 8019fa6:	f7f9 fef3 	bl	8013d90 <pbuf_add_header>
 8019faa:	4603      	mov	r3, r0
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d015      	beq.n	8019fdc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019fb0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019fb4:	2108      	movs	r1, #8
 8019fb6:	2022      	movs	r0, #34	@ 0x22
 8019fb8:	f7f9 fc9c 	bl	80138f4 <pbuf_alloc>
 8019fbc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019fbe:	69fb      	ldr	r3, [r7, #28]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d102      	bne.n	8019fca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8019fc8:	e057      	b.n	801a07a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019fca:	68bb      	ldr	r3, [r7, #8]
 8019fcc:	891b      	ldrh	r3, [r3, #8]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d006      	beq.n	8019fe0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019fd2:	68b9      	ldr	r1, [r7, #8]
 8019fd4:	69f8      	ldr	r0, [r7, #28]
 8019fd6:	f7fa f895 	bl	8014104 <pbuf_chain>
 8019fda:	e001      	b.n	8019fe0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019fdc:	68bb      	ldr	r3, [r7, #8]
 8019fde:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019fe0:	69fb      	ldr	r3, [r7, #28]
 8019fe2:	895b      	ldrh	r3, [r3, #10]
 8019fe4:	2b07      	cmp	r3, #7
 8019fe6:	d806      	bhi.n	8019ff6 <udp_sendto_if_src+0x11e>
 8019fe8:	4b26      	ldr	r3, [pc, #152]	@ (801a084 <udp_sendto_if_src+0x1ac>)
 8019fea:	f240 320d 	movw	r2, #781	@ 0x30d
 8019fee:	492c      	ldr	r1, [pc, #176]	@ (801a0a0 <udp_sendto_if_src+0x1c8>)
 8019ff0:	4826      	ldr	r0, [pc, #152]	@ (801a08c <udp_sendto_if_src+0x1b4>)
 8019ff2:	f003 fe6f 	bl	801dcd4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019ff6:	69fb      	ldr	r3, [r7, #28]
 8019ff8:	685b      	ldr	r3, [r3, #4]
 8019ffa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	8a5b      	ldrh	r3, [r3, #18]
 801a000:	4618      	mov	r0, r3
 801a002:	f7f8 fb6d 	bl	80126e0 <lwip_htons>
 801a006:	4603      	mov	r3, r0
 801a008:	461a      	mov	r2, r3
 801a00a:	697b      	ldr	r3, [r7, #20]
 801a00c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801a00e:	887b      	ldrh	r3, [r7, #2]
 801a010:	4618      	mov	r0, r3
 801a012:	f7f8 fb65 	bl	80126e0 <lwip_htons>
 801a016:	4603      	mov	r3, r0
 801a018:	461a      	mov	r2, r3
 801a01a:	697b      	ldr	r3, [r7, #20]
 801a01c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801a01e:	697b      	ldr	r3, [r7, #20]
 801a020:	2200      	movs	r2, #0
 801a022:	719a      	strb	r2, [r3, #6]
 801a024:	2200      	movs	r2, #0
 801a026:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801a028:	69fb      	ldr	r3, [r7, #28]
 801a02a:	891b      	ldrh	r3, [r3, #8]
 801a02c:	4618      	mov	r0, r3
 801a02e:	f7f8 fb57 	bl	80126e0 <lwip_htons>
 801a032:	4603      	mov	r3, r0
 801a034:	461a      	mov	r2, r3
 801a036:	697b      	ldr	r3, [r7, #20]
 801a038:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801a03a:	2311      	movs	r3, #17
 801a03c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	7adb      	ldrb	r3, [r3, #11]
 801a042:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	7a9b      	ldrb	r3, [r3, #10]
 801a048:	7cb9      	ldrb	r1, [r7, #18]
 801a04a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a04c:	9202      	str	r2, [sp, #8]
 801a04e:	7cfa      	ldrb	r2, [r7, #19]
 801a050:	9201      	str	r2, [sp, #4]
 801a052:	9300      	str	r3, [sp, #0]
 801a054:	460b      	mov	r3, r1
 801a056:	687a      	ldr	r2, [r7, #4]
 801a058:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a05a:	69f8      	ldr	r0, [r7, #28]
 801a05c:	f001 fbd4 	bl	801b808 <ip4_output_if_src>
 801a060:	4603      	mov	r3, r0
 801a062:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801a064:	69fa      	ldr	r2, [r7, #28]
 801a066:	68bb      	ldr	r3, [r7, #8]
 801a068:	429a      	cmp	r2, r3
 801a06a:	d004      	beq.n	801a076 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801a06c:	69f8      	ldr	r0, [r7, #28]
 801a06e:	f7f9 ff25 	bl	8013ebc <pbuf_free>
    q = NULL;
 801a072:	2300      	movs	r3, #0
 801a074:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801a076:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801a07a:	4618      	mov	r0, r3
 801a07c:	3720      	adds	r7, #32
 801a07e:	46bd      	mov	sp, r7
 801a080:	bd80      	pop	{r7, pc}
 801a082:	bf00      	nop
 801a084:	08020e40 	.word	0x08020e40
 801a088:	0802102c 	.word	0x0802102c
 801a08c:	08020e94 	.word	0x08020e94
 801a090:	0802104c 	.word	0x0802104c
 801a094:	0802106c 	.word	0x0802106c
 801a098:	08021090 	.word	0x08021090
 801a09c:	080210b4 	.word	0x080210b4
 801a0a0:	080210d8 	.word	0x080210d8

0801a0a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b086      	sub	sp, #24
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	60f8      	str	r0, [r7, #12]
 801a0ac:	60b9      	str	r1, [r7, #8]
 801a0ae:	4613      	mov	r3, r2
 801a0b0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a0b2:	68bb      	ldr	r3, [r7, #8]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d101      	bne.n	801a0bc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801a0b8:	4b39      	ldr	r3, [pc, #228]	@ (801a1a0 <udp_bind+0xfc>)
 801a0ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d109      	bne.n	801a0d6 <udp_bind+0x32>
 801a0c2:	4b38      	ldr	r3, [pc, #224]	@ (801a1a4 <udp_bind+0x100>)
 801a0c4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801a0c8:	4937      	ldr	r1, [pc, #220]	@ (801a1a8 <udp_bind+0x104>)
 801a0ca:	4838      	ldr	r0, [pc, #224]	@ (801a1ac <udp_bind+0x108>)
 801a0cc:	f003 fe02 	bl	801dcd4 <iprintf>
 801a0d0:	f06f 030f 	mvn.w	r3, #15
 801a0d4:	e060      	b.n	801a198 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a0da:	4b35      	ldr	r3, [pc, #212]	@ (801a1b0 <udp_bind+0x10c>)
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	617b      	str	r3, [r7, #20]
 801a0e0:	e009      	b.n	801a0f6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801a0e2:	68fa      	ldr	r2, [r7, #12]
 801a0e4:	697b      	ldr	r3, [r7, #20]
 801a0e6:	429a      	cmp	r2, r3
 801a0e8:	d102      	bne.n	801a0f0 <udp_bind+0x4c>
      rebind = 1;
 801a0ea:	2301      	movs	r3, #1
 801a0ec:	74fb      	strb	r3, [r7, #19]
      break;
 801a0ee:	e005      	b.n	801a0fc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a0f0:	697b      	ldr	r3, [r7, #20]
 801a0f2:	68db      	ldr	r3, [r3, #12]
 801a0f4:	617b      	str	r3, [r7, #20]
 801a0f6:	697b      	ldr	r3, [r7, #20]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d1f2      	bne.n	801a0e2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801a0fc:	88fb      	ldrh	r3, [r7, #6]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d109      	bne.n	801a116 <udp_bind+0x72>
    port = udp_new_port();
 801a102:	f7ff fc69 	bl	80199d8 <udp_new_port>
 801a106:	4603      	mov	r3, r0
 801a108:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a10a:	88fb      	ldrh	r3, [r7, #6]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d12c      	bne.n	801a16a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801a110:	f06f 0307 	mvn.w	r3, #7
 801a114:	e040      	b.n	801a198 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a116:	4b26      	ldr	r3, [pc, #152]	@ (801a1b0 <udp_bind+0x10c>)
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	617b      	str	r3, [r7, #20]
 801a11c:	e022      	b.n	801a164 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801a11e:	68fa      	ldr	r2, [r7, #12]
 801a120:	697b      	ldr	r3, [r7, #20]
 801a122:	429a      	cmp	r2, r3
 801a124:	d01b      	beq.n	801a15e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a126:	697b      	ldr	r3, [r7, #20]
 801a128:	8a5b      	ldrh	r3, [r3, #18]
 801a12a:	88fa      	ldrh	r2, [r7, #6]
 801a12c:	429a      	cmp	r2, r3
 801a12e:	d116      	bne.n	801a15e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a130:	697b      	ldr	r3, [r7, #20]
 801a132:	681a      	ldr	r2, [r3, #0]
 801a134:	68bb      	ldr	r3, [r7, #8]
 801a136:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801a138:	429a      	cmp	r2, r3
 801a13a:	d00d      	beq.n	801a158 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a13c:	68bb      	ldr	r3, [r7, #8]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d00a      	beq.n	801a158 <udp_bind+0xb4>
 801a142:	68bb      	ldr	r3, [r7, #8]
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	2b00      	cmp	r3, #0
 801a148:	d006      	beq.n	801a158 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a14a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d003      	beq.n	801a158 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a150:	697b      	ldr	r3, [r7, #20]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	2b00      	cmp	r3, #0
 801a156:	d102      	bne.n	801a15e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801a158:	f06f 0307 	mvn.w	r3, #7
 801a15c:	e01c      	b.n	801a198 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a15e:	697b      	ldr	r3, [r7, #20]
 801a160:	68db      	ldr	r3, [r3, #12]
 801a162:	617b      	str	r3, [r7, #20]
 801a164:	697b      	ldr	r3, [r7, #20]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d1d9      	bne.n	801a11e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a16a:	68bb      	ldr	r3, [r7, #8]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d002      	beq.n	801a176 <udp_bind+0xd2>
 801a170:	68bb      	ldr	r3, [r7, #8]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	e000      	b.n	801a178 <udp_bind+0xd4>
 801a176:	2300      	movs	r3, #0
 801a178:	68fa      	ldr	r2, [r7, #12]
 801a17a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	88fa      	ldrh	r2, [r7, #6]
 801a180:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a182:	7cfb      	ldrb	r3, [r7, #19]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d106      	bne.n	801a196 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a188:	4b09      	ldr	r3, [pc, #36]	@ (801a1b0 <udp_bind+0x10c>)
 801a18a:	681a      	ldr	r2, [r3, #0]
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801a190:	4a07      	ldr	r2, [pc, #28]	@ (801a1b0 <udp_bind+0x10c>)
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a196:	2300      	movs	r3, #0
}
 801a198:	4618      	mov	r0, r3
 801a19a:	3718      	adds	r7, #24
 801a19c:	46bd      	mov	sp, r7
 801a19e:	bd80      	pop	{r7, pc}
 801a1a0:	08021c94 	.word	0x08021c94
 801a1a4:	08020e40 	.word	0x08020e40
 801a1a8:	08021108 	.word	0x08021108
 801a1ac:	08020e94 	.word	0x08020e94
 801a1b0:	200276e4 	.word	0x200276e4

0801a1b4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b084      	sub	sp, #16
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	60f8      	str	r0, [r7, #12]
 801a1bc:	60b9      	str	r1, [r7, #8]
 801a1be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d107      	bne.n	801a1d6 <udp_recv+0x22>
 801a1c6:	4b08      	ldr	r3, [pc, #32]	@ (801a1e8 <udp_recv+0x34>)
 801a1c8:	f240 428a 	movw	r2, #1162	@ 0x48a
 801a1cc:	4907      	ldr	r1, [pc, #28]	@ (801a1ec <udp_recv+0x38>)
 801a1ce:	4808      	ldr	r0, [pc, #32]	@ (801a1f0 <udp_recv+0x3c>)
 801a1d0:	f003 fd80 	bl	801dcd4 <iprintf>
 801a1d4:	e005      	b.n	801a1e2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	68ba      	ldr	r2, [r7, #8]
 801a1da:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	687a      	ldr	r2, [r7, #4]
 801a1e0:	61da      	str	r2, [r3, #28]
}
 801a1e2:	3710      	adds	r7, #16
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}
 801a1e8:	08020e40 	.word	0x08020e40
 801a1ec:	08021174 	.word	0x08021174
 801a1f0:	08020e94 	.word	0x08020e94

0801a1f4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a1f4:	b580      	push	{r7, lr}
 801a1f6:	b082      	sub	sp, #8
 801a1f8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a1fa:	2000      	movs	r0, #0
 801a1fc:	f7f8 ff44 	bl	8013088 <memp_malloc>
 801a200:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d007      	beq.n	801a218 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a208:	2220      	movs	r2, #32
 801a20a:	2100      	movs	r1, #0
 801a20c:	6878      	ldr	r0, [r7, #4]
 801a20e:	f003 fdc6 	bl	801dd9e <memset>
    pcb->ttl = UDP_TTL;
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	22ff      	movs	r2, #255	@ 0xff
 801a216:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a218:	687b      	ldr	r3, [r7, #4]
}
 801a21a:	4618      	mov	r0, r3
 801a21c:	3708      	adds	r7, #8
 801a21e:	46bd      	mov	sp, r7
 801a220:	bd80      	pop	{r7, pc}
	...

0801a224 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a224:	b480      	push	{r7}
 801a226:	b085      	sub	sp, #20
 801a228:	af00      	add	r7, sp, #0
 801a22a:	6078      	str	r0, [r7, #4]
 801a22c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	2b00      	cmp	r3, #0
 801a232:	d01e      	beq.n	801a272 <udp_netif_ip_addr_changed+0x4e>
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d01a      	beq.n	801a272 <udp_netif_ip_addr_changed+0x4e>
 801a23c:	683b      	ldr	r3, [r7, #0]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d017      	beq.n	801a272 <udp_netif_ip_addr_changed+0x4e>
 801a242:	683b      	ldr	r3, [r7, #0]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d013      	beq.n	801a272 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a24a:	4b0d      	ldr	r3, [pc, #52]	@ (801a280 <udp_netif_ip_addr_changed+0x5c>)
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	60fb      	str	r3, [r7, #12]
 801a250:	e00c      	b.n	801a26c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	681a      	ldr	r2, [r3, #0]
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	429a      	cmp	r2, r3
 801a25c:	d103      	bne.n	801a266 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a25e:	683b      	ldr	r3, [r7, #0]
 801a260:	681a      	ldr	r2, [r3, #0]
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	68db      	ldr	r3, [r3, #12]
 801a26a:	60fb      	str	r3, [r7, #12]
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d1ef      	bne.n	801a252 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a272:	bf00      	nop
 801a274:	3714      	adds	r7, #20
 801a276:	46bd      	mov	sp, r7
 801a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a27c:	4770      	bx	lr
 801a27e:	bf00      	nop
 801a280:	200276e4 	.word	0x200276e4

0801a284 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a284:	b580      	push	{r7, lr}
 801a286:	b082      	sub	sp, #8
 801a288:	af00      	add	r7, sp, #0
 801a28a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a28c:	4915      	ldr	r1, [pc, #84]	@ (801a2e4 <etharp_free_entry+0x60>)
 801a28e:	687a      	ldr	r2, [r7, #4]
 801a290:	4613      	mov	r3, r2
 801a292:	005b      	lsls	r3, r3, #1
 801a294:	4413      	add	r3, r2
 801a296:	00db      	lsls	r3, r3, #3
 801a298:	440b      	add	r3, r1
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d013      	beq.n	801a2c8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a2a0:	4910      	ldr	r1, [pc, #64]	@ (801a2e4 <etharp_free_entry+0x60>)
 801a2a2:	687a      	ldr	r2, [r7, #4]
 801a2a4:	4613      	mov	r3, r2
 801a2a6:	005b      	lsls	r3, r3, #1
 801a2a8:	4413      	add	r3, r2
 801a2aa:	00db      	lsls	r3, r3, #3
 801a2ac:	440b      	add	r3, r1
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	f7f9 fe03 	bl	8013ebc <pbuf_free>
    arp_table[i].q = NULL;
 801a2b6:	490b      	ldr	r1, [pc, #44]	@ (801a2e4 <etharp_free_entry+0x60>)
 801a2b8:	687a      	ldr	r2, [r7, #4]
 801a2ba:	4613      	mov	r3, r2
 801a2bc:	005b      	lsls	r3, r3, #1
 801a2be:	4413      	add	r3, r2
 801a2c0:	00db      	lsls	r3, r3, #3
 801a2c2:	440b      	add	r3, r1
 801a2c4:	2200      	movs	r2, #0
 801a2c6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a2c8:	4906      	ldr	r1, [pc, #24]	@ (801a2e4 <etharp_free_entry+0x60>)
 801a2ca:	687a      	ldr	r2, [r7, #4]
 801a2cc:	4613      	mov	r3, r2
 801a2ce:	005b      	lsls	r3, r3, #1
 801a2d0:	4413      	add	r3, r2
 801a2d2:	00db      	lsls	r3, r3, #3
 801a2d4:	440b      	add	r3, r1
 801a2d6:	3314      	adds	r3, #20
 801a2d8:	2200      	movs	r2, #0
 801a2da:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a2dc:	bf00      	nop
 801a2de:	3708      	adds	r7, #8
 801a2e0:	46bd      	mov	sp, r7
 801a2e2:	bd80      	pop	{r7, pc}
 801a2e4:	200276e8 	.word	0x200276e8

0801a2e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b082      	sub	sp, #8
 801a2ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	607b      	str	r3, [r7, #4]
 801a2f2:	e096      	b.n	801a422 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a2f4:	494f      	ldr	r1, [pc, #316]	@ (801a434 <etharp_tmr+0x14c>)
 801a2f6:	687a      	ldr	r2, [r7, #4]
 801a2f8:	4613      	mov	r3, r2
 801a2fa:	005b      	lsls	r3, r3, #1
 801a2fc:	4413      	add	r3, r2
 801a2fe:	00db      	lsls	r3, r3, #3
 801a300:	440b      	add	r3, r1
 801a302:	3314      	adds	r3, #20
 801a304:	781b      	ldrb	r3, [r3, #0]
 801a306:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a308:	78fb      	ldrb	r3, [r7, #3]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	f000 8086 	beq.w	801a41c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a310:	4948      	ldr	r1, [pc, #288]	@ (801a434 <etharp_tmr+0x14c>)
 801a312:	687a      	ldr	r2, [r7, #4]
 801a314:	4613      	mov	r3, r2
 801a316:	005b      	lsls	r3, r3, #1
 801a318:	4413      	add	r3, r2
 801a31a:	00db      	lsls	r3, r3, #3
 801a31c:	440b      	add	r3, r1
 801a31e:	3312      	adds	r3, #18
 801a320:	881b      	ldrh	r3, [r3, #0]
 801a322:	3301      	adds	r3, #1
 801a324:	b298      	uxth	r0, r3
 801a326:	4943      	ldr	r1, [pc, #268]	@ (801a434 <etharp_tmr+0x14c>)
 801a328:	687a      	ldr	r2, [r7, #4]
 801a32a:	4613      	mov	r3, r2
 801a32c:	005b      	lsls	r3, r3, #1
 801a32e:	4413      	add	r3, r2
 801a330:	00db      	lsls	r3, r3, #3
 801a332:	440b      	add	r3, r1
 801a334:	3312      	adds	r3, #18
 801a336:	4602      	mov	r2, r0
 801a338:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a33a:	493e      	ldr	r1, [pc, #248]	@ (801a434 <etharp_tmr+0x14c>)
 801a33c:	687a      	ldr	r2, [r7, #4]
 801a33e:	4613      	mov	r3, r2
 801a340:	005b      	lsls	r3, r3, #1
 801a342:	4413      	add	r3, r2
 801a344:	00db      	lsls	r3, r3, #3
 801a346:	440b      	add	r3, r1
 801a348:	3312      	adds	r3, #18
 801a34a:	881b      	ldrh	r3, [r3, #0]
 801a34c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a350:	d215      	bcs.n	801a37e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a352:	4938      	ldr	r1, [pc, #224]	@ (801a434 <etharp_tmr+0x14c>)
 801a354:	687a      	ldr	r2, [r7, #4]
 801a356:	4613      	mov	r3, r2
 801a358:	005b      	lsls	r3, r3, #1
 801a35a:	4413      	add	r3, r2
 801a35c:	00db      	lsls	r3, r3, #3
 801a35e:	440b      	add	r3, r1
 801a360:	3314      	adds	r3, #20
 801a362:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a364:	2b01      	cmp	r3, #1
 801a366:	d10e      	bne.n	801a386 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a368:	4932      	ldr	r1, [pc, #200]	@ (801a434 <etharp_tmr+0x14c>)
 801a36a:	687a      	ldr	r2, [r7, #4]
 801a36c:	4613      	mov	r3, r2
 801a36e:	005b      	lsls	r3, r3, #1
 801a370:	4413      	add	r3, r2
 801a372:	00db      	lsls	r3, r3, #3
 801a374:	440b      	add	r3, r1
 801a376:	3312      	adds	r3, #18
 801a378:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a37a:	2b04      	cmp	r3, #4
 801a37c:	d903      	bls.n	801a386 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a37e:	6878      	ldr	r0, [r7, #4]
 801a380:	f7ff ff80 	bl	801a284 <etharp_free_entry>
 801a384:	e04a      	b.n	801a41c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a386:	492b      	ldr	r1, [pc, #172]	@ (801a434 <etharp_tmr+0x14c>)
 801a388:	687a      	ldr	r2, [r7, #4]
 801a38a:	4613      	mov	r3, r2
 801a38c:	005b      	lsls	r3, r3, #1
 801a38e:	4413      	add	r3, r2
 801a390:	00db      	lsls	r3, r3, #3
 801a392:	440b      	add	r3, r1
 801a394:	3314      	adds	r3, #20
 801a396:	781b      	ldrb	r3, [r3, #0]
 801a398:	2b03      	cmp	r3, #3
 801a39a:	d10a      	bne.n	801a3b2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a39c:	4925      	ldr	r1, [pc, #148]	@ (801a434 <etharp_tmr+0x14c>)
 801a39e:	687a      	ldr	r2, [r7, #4]
 801a3a0:	4613      	mov	r3, r2
 801a3a2:	005b      	lsls	r3, r3, #1
 801a3a4:	4413      	add	r3, r2
 801a3a6:	00db      	lsls	r3, r3, #3
 801a3a8:	440b      	add	r3, r1
 801a3aa:	3314      	adds	r3, #20
 801a3ac:	2204      	movs	r2, #4
 801a3ae:	701a      	strb	r2, [r3, #0]
 801a3b0:	e034      	b.n	801a41c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a3b2:	4920      	ldr	r1, [pc, #128]	@ (801a434 <etharp_tmr+0x14c>)
 801a3b4:	687a      	ldr	r2, [r7, #4]
 801a3b6:	4613      	mov	r3, r2
 801a3b8:	005b      	lsls	r3, r3, #1
 801a3ba:	4413      	add	r3, r2
 801a3bc:	00db      	lsls	r3, r3, #3
 801a3be:	440b      	add	r3, r1
 801a3c0:	3314      	adds	r3, #20
 801a3c2:	781b      	ldrb	r3, [r3, #0]
 801a3c4:	2b04      	cmp	r3, #4
 801a3c6:	d10a      	bne.n	801a3de <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a3c8:	491a      	ldr	r1, [pc, #104]	@ (801a434 <etharp_tmr+0x14c>)
 801a3ca:	687a      	ldr	r2, [r7, #4]
 801a3cc:	4613      	mov	r3, r2
 801a3ce:	005b      	lsls	r3, r3, #1
 801a3d0:	4413      	add	r3, r2
 801a3d2:	00db      	lsls	r3, r3, #3
 801a3d4:	440b      	add	r3, r1
 801a3d6:	3314      	adds	r3, #20
 801a3d8:	2202      	movs	r2, #2
 801a3da:	701a      	strb	r2, [r3, #0]
 801a3dc:	e01e      	b.n	801a41c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a3de:	4915      	ldr	r1, [pc, #84]	@ (801a434 <etharp_tmr+0x14c>)
 801a3e0:	687a      	ldr	r2, [r7, #4]
 801a3e2:	4613      	mov	r3, r2
 801a3e4:	005b      	lsls	r3, r3, #1
 801a3e6:	4413      	add	r3, r2
 801a3e8:	00db      	lsls	r3, r3, #3
 801a3ea:	440b      	add	r3, r1
 801a3ec:	3314      	adds	r3, #20
 801a3ee:	781b      	ldrb	r3, [r3, #0]
 801a3f0:	2b01      	cmp	r3, #1
 801a3f2:	d113      	bne.n	801a41c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a3f4:	490f      	ldr	r1, [pc, #60]	@ (801a434 <etharp_tmr+0x14c>)
 801a3f6:	687a      	ldr	r2, [r7, #4]
 801a3f8:	4613      	mov	r3, r2
 801a3fa:	005b      	lsls	r3, r3, #1
 801a3fc:	4413      	add	r3, r2
 801a3fe:	00db      	lsls	r3, r3, #3
 801a400:	440b      	add	r3, r1
 801a402:	3308      	adds	r3, #8
 801a404:	6818      	ldr	r0, [r3, #0]
 801a406:	687a      	ldr	r2, [r7, #4]
 801a408:	4613      	mov	r3, r2
 801a40a:	005b      	lsls	r3, r3, #1
 801a40c:	4413      	add	r3, r2
 801a40e:	00db      	lsls	r3, r3, #3
 801a410:	4a08      	ldr	r2, [pc, #32]	@ (801a434 <etharp_tmr+0x14c>)
 801a412:	4413      	add	r3, r2
 801a414:	3304      	adds	r3, #4
 801a416:	4619      	mov	r1, r3
 801a418:	f000 fe6e 	bl	801b0f8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	3301      	adds	r3, #1
 801a420:	607b      	str	r3, [r7, #4]
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	2b09      	cmp	r3, #9
 801a426:	f77f af65 	ble.w	801a2f4 <etharp_tmr+0xc>
      }
    }
  }
}
 801a42a:	bf00      	nop
 801a42c:	bf00      	nop
 801a42e:	3708      	adds	r7, #8
 801a430:	46bd      	mov	sp, r7
 801a432:	bd80      	pop	{r7, pc}
 801a434:	200276e8 	.word	0x200276e8

0801a438 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a438:	b580      	push	{r7, lr}
 801a43a:	b08a      	sub	sp, #40	@ 0x28
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	60f8      	str	r0, [r7, #12]
 801a440:	460b      	mov	r3, r1
 801a442:	607a      	str	r2, [r7, #4]
 801a444:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a446:	230a      	movs	r3, #10
 801a448:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a44a:	230a      	movs	r3, #10
 801a44c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a44e:	230a      	movs	r3, #10
 801a450:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a452:	2300      	movs	r3, #0
 801a454:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a456:	230a      	movs	r3, #10
 801a458:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a45a:	2300      	movs	r3, #0
 801a45c:	83bb      	strh	r3, [r7, #28]
 801a45e:	2300      	movs	r3, #0
 801a460:	837b      	strh	r3, [r7, #26]
 801a462:	2300      	movs	r3, #0
 801a464:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a466:	2300      	movs	r3, #0
 801a468:	843b      	strh	r3, [r7, #32]
 801a46a:	e0ae      	b.n	801a5ca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a46c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a470:	49a6      	ldr	r1, [pc, #664]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a472:	4613      	mov	r3, r2
 801a474:	005b      	lsls	r3, r3, #1
 801a476:	4413      	add	r3, r2
 801a478:	00db      	lsls	r3, r3, #3
 801a47a:	440b      	add	r3, r1
 801a47c:	3314      	adds	r3, #20
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a482:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a486:	2b0a      	cmp	r3, #10
 801a488:	d105      	bne.n	801a496 <etharp_find_entry+0x5e>
 801a48a:	7dfb      	ldrb	r3, [r7, #23]
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d102      	bne.n	801a496 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a490:	8c3b      	ldrh	r3, [r7, #32]
 801a492:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a494:	e095      	b.n	801a5c2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a496:	7dfb      	ldrb	r3, [r7, #23]
 801a498:	2b00      	cmp	r3, #0
 801a49a:	f000 8092 	beq.w	801a5c2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a49e:	7dfb      	ldrb	r3, [r7, #23]
 801a4a0:	2b01      	cmp	r3, #1
 801a4a2:	d009      	beq.n	801a4b8 <etharp_find_entry+0x80>
 801a4a4:	7dfb      	ldrb	r3, [r7, #23]
 801a4a6:	2b01      	cmp	r3, #1
 801a4a8:	d806      	bhi.n	801a4b8 <etharp_find_entry+0x80>
 801a4aa:	4b99      	ldr	r3, [pc, #612]	@ (801a710 <etharp_find_entry+0x2d8>)
 801a4ac:	f240 1223 	movw	r2, #291	@ 0x123
 801a4b0:	4998      	ldr	r1, [pc, #608]	@ (801a714 <etharp_find_entry+0x2dc>)
 801a4b2:	4899      	ldr	r0, [pc, #612]	@ (801a718 <etharp_find_entry+0x2e0>)
 801a4b4:	f003 fc0e 	bl	801dcd4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d020      	beq.n	801a500 <etharp_find_entry+0xc8>
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	6819      	ldr	r1, [r3, #0]
 801a4c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4c6:	4891      	ldr	r0, [pc, #580]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a4c8:	4613      	mov	r3, r2
 801a4ca:	005b      	lsls	r3, r3, #1
 801a4cc:	4413      	add	r3, r2
 801a4ce:	00db      	lsls	r3, r3, #3
 801a4d0:	4403      	add	r3, r0
 801a4d2:	3304      	adds	r3, #4
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	4299      	cmp	r1, r3
 801a4d8:	d112      	bne.n	801a500 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d00c      	beq.n	801a4fa <etharp_find_entry+0xc2>
 801a4e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4e4:	4989      	ldr	r1, [pc, #548]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a4e6:	4613      	mov	r3, r2
 801a4e8:	005b      	lsls	r3, r3, #1
 801a4ea:	4413      	add	r3, r2
 801a4ec:	00db      	lsls	r3, r3, #3
 801a4ee:	440b      	add	r3, r1
 801a4f0:	3308      	adds	r3, #8
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	687a      	ldr	r2, [r7, #4]
 801a4f6:	429a      	cmp	r2, r3
 801a4f8:	d102      	bne.n	801a500 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a4fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a4fe:	e100      	b.n	801a702 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a500:	7dfb      	ldrb	r3, [r7, #23]
 801a502:	2b01      	cmp	r3, #1
 801a504:	d140      	bne.n	801a588 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a506:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a50a:	4980      	ldr	r1, [pc, #512]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a50c:	4613      	mov	r3, r2
 801a50e:	005b      	lsls	r3, r3, #1
 801a510:	4413      	add	r3, r2
 801a512:	00db      	lsls	r3, r3, #3
 801a514:	440b      	add	r3, r1
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d01a      	beq.n	801a552 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a51c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a520:	497a      	ldr	r1, [pc, #488]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a522:	4613      	mov	r3, r2
 801a524:	005b      	lsls	r3, r3, #1
 801a526:	4413      	add	r3, r2
 801a528:	00db      	lsls	r3, r3, #3
 801a52a:	440b      	add	r3, r1
 801a52c:	3312      	adds	r3, #18
 801a52e:	881b      	ldrh	r3, [r3, #0]
 801a530:	8bba      	ldrh	r2, [r7, #28]
 801a532:	429a      	cmp	r2, r3
 801a534:	d845      	bhi.n	801a5c2 <etharp_find_entry+0x18a>
            old_queue = i;
 801a536:	8c3b      	ldrh	r3, [r7, #32]
 801a538:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a53a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a53e:	4973      	ldr	r1, [pc, #460]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a540:	4613      	mov	r3, r2
 801a542:	005b      	lsls	r3, r3, #1
 801a544:	4413      	add	r3, r2
 801a546:	00db      	lsls	r3, r3, #3
 801a548:	440b      	add	r3, r1
 801a54a:	3312      	adds	r3, #18
 801a54c:	881b      	ldrh	r3, [r3, #0]
 801a54e:	83bb      	strh	r3, [r7, #28]
 801a550:	e037      	b.n	801a5c2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a552:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a556:	496d      	ldr	r1, [pc, #436]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a558:	4613      	mov	r3, r2
 801a55a:	005b      	lsls	r3, r3, #1
 801a55c:	4413      	add	r3, r2
 801a55e:	00db      	lsls	r3, r3, #3
 801a560:	440b      	add	r3, r1
 801a562:	3312      	adds	r3, #18
 801a564:	881b      	ldrh	r3, [r3, #0]
 801a566:	8b7a      	ldrh	r2, [r7, #26]
 801a568:	429a      	cmp	r2, r3
 801a56a:	d82a      	bhi.n	801a5c2 <etharp_find_entry+0x18a>
            old_pending = i;
 801a56c:	8c3b      	ldrh	r3, [r7, #32]
 801a56e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a570:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a574:	4965      	ldr	r1, [pc, #404]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a576:	4613      	mov	r3, r2
 801a578:	005b      	lsls	r3, r3, #1
 801a57a:	4413      	add	r3, r2
 801a57c:	00db      	lsls	r3, r3, #3
 801a57e:	440b      	add	r3, r1
 801a580:	3312      	adds	r3, #18
 801a582:	881b      	ldrh	r3, [r3, #0]
 801a584:	837b      	strh	r3, [r7, #26]
 801a586:	e01c      	b.n	801a5c2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a588:	7dfb      	ldrb	r3, [r7, #23]
 801a58a:	2b01      	cmp	r3, #1
 801a58c:	d919      	bls.n	801a5c2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a58e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a592:	495e      	ldr	r1, [pc, #376]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a594:	4613      	mov	r3, r2
 801a596:	005b      	lsls	r3, r3, #1
 801a598:	4413      	add	r3, r2
 801a59a:	00db      	lsls	r3, r3, #3
 801a59c:	440b      	add	r3, r1
 801a59e:	3312      	adds	r3, #18
 801a5a0:	881b      	ldrh	r3, [r3, #0]
 801a5a2:	8b3a      	ldrh	r2, [r7, #24]
 801a5a4:	429a      	cmp	r2, r3
 801a5a6:	d80c      	bhi.n	801a5c2 <etharp_find_entry+0x18a>
            old_stable = i;
 801a5a8:	8c3b      	ldrh	r3, [r7, #32]
 801a5aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a5ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5b0:	4956      	ldr	r1, [pc, #344]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a5b2:	4613      	mov	r3, r2
 801a5b4:	005b      	lsls	r3, r3, #1
 801a5b6:	4413      	add	r3, r2
 801a5b8:	00db      	lsls	r3, r3, #3
 801a5ba:	440b      	add	r3, r1
 801a5bc:	3312      	adds	r3, #18
 801a5be:	881b      	ldrh	r3, [r3, #0]
 801a5c0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a5c2:	8c3b      	ldrh	r3, [r7, #32]
 801a5c4:	3301      	adds	r3, #1
 801a5c6:	b29b      	uxth	r3, r3
 801a5c8:	843b      	strh	r3, [r7, #32]
 801a5ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a5ce:	2b09      	cmp	r3, #9
 801a5d0:	f77f af4c 	ble.w	801a46c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a5d4:	7afb      	ldrb	r3, [r7, #11]
 801a5d6:	f003 0302 	and.w	r3, r3, #2
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d108      	bne.n	801a5f0 <etharp_find_entry+0x1b8>
 801a5de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a5e2:	2b0a      	cmp	r3, #10
 801a5e4:	d107      	bne.n	801a5f6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a5e6:	7afb      	ldrb	r3, [r7, #11]
 801a5e8:	f003 0301 	and.w	r3, r3, #1
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d102      	bne.n	801a5f6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a5f0:	f04f 33ff 	mov.w	r3, #4294967295
 801a5f4:	e085      	b.n	801a702 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a5f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a5fa:	2b09      	cmp	r3, #9
 801a5fc:	dc02      	bgt.n	801a604 <etharp_find_entry+0x1cc>
    i = empty;
 801a5fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a600:	843b      	strh	r3, [r7, #32]
 801a602:	e039      	b.n	801a678 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a604:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a608:	2b09      	cmp	r3, #9
 801a60a:	dc14      	bgt.n	801a636 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a60c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a60e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a610:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a614:	493d      	ldr	r1, [pc, #244]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a616:	4613      	mov	r3, r2
 801a618:	005b      	lsls	r3, r3, #1
 801a61a:	4413      	add	r3, r2
 801a61c:	00db      	lsls	r3, r3, #3
 801a61e:	440b      	add	r3, r1
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d018      	beq.n	801a658 <etharp_find_entry+0x220>
 801a626:	4b3a      	ldr	r3, [pc, #232]	@ (801a710 <etharp_find_entry+0x2d8>)
 801a628:	f240 126d 	movw	r2, #365	@ 0x16d
 801a62c:	493b      	ldr	r1, [pc, #236]	@ (801a71c <etharp_find_entry+0x2e4>)
 801a62e:	483a      	ldr	r0, [pc, #232]	@ (801a718 <etharp_find_entry+0x2e0>)
 801a630:	f003 fb50 	bl	801dcd4 <iprintf>
 801a634:	e010      	b.n	801a658 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a636:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a63a:	2b09      	cmp	r3, #9
 801a63c:	dc02      	bgt.n	801a644 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a63e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a640:	843b      	strh	r3, [r7, #32]
 801a642:	e009      	b.n	801a658 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a644:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a648:	2b09      	cmp	r3, #9
 801a64a:	dc02      	bgt.n	801a652 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a64c:	8bfb      	ldrh	r3, [r7, #30]
 801a64e:	843b      	strh	r3, [r7, #32]
 801a650:	e002      	b.n	801a658 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a652:	f04f 33ff 	mov.w	r3, #4294967295
 801a656:	e054      	b.n	801a702 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a658:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a65c:	2b09      	cmp	r3, #9
 801a65e:	dd06      	ble.n	801a66e <etharp_find_entry+0x236>
 801a660:	4b2b      	ldr	r3, [pc, #172]	@ (801a710 <etharp_find_entry+0x2d8>)
 801a662:	f240 127f 	movw	r2, #383	@ 0x17f
 801a666:	492e      	ldr	r1, [pc, #184]	@ (801a720 <etharp_find_entry+0x2e8>)
 801a668:	482b      	ldr	r0, [pc, #172]	@ (801a718 <etharp_find_entry+0x2e0>)
 801a66a:	f003 fb33 	bl	801dcd4 <iprintf>
    etharp_free_entry(i);
 801a66e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a672:	4618      	mov	r0, r3
 801a674:	f7ff fe06 	bl	801a284 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a678:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a67c:	2b09      	cmp	r3, #9
 801a67e:	dd06      	ble.n	801a68e <etharp_find_entry+0x256>
 801a680:	4b23      	ldr	r3, [pc, #140]	@ (801a710 <etharp_find_entry+0x2d8>)
 801a682:	f240 1283 	movw	r2, #387	@ 0x183
 801a686:	4926      	ldr	r1, [pc, #152]	@ (801a720 <etharp_find_entry+0x2e8>)
 801a688:	4823      	ldr	r0, [pc, #140]	@ (801a718 <etharp_find_entry+0x2e0>)
 801a68a:	f003 fb23 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a68e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a692:	491e      	ldr	r1, [pc, #120]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a694:	4613      	mov	r3, r2
 801a696:	005b      	lsls	r3, r3, #1
 801a698:	4413      	add	r3, r2
 801a69a:	00db      	lsls	r3, r3, #3
 801a69c:	440b      	add	r3, r1
 801a69e:	3314      	adds	r3, #20
 801a6a0:	781b      	ldrb	r3, [r3, #0]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d006      	beq.n	801a6b4 <etharp_find_entry+0x27c>
 801a6a6:	4b1a      	ldr	r3, [pc, #104]	@ (801a710 <etharp_find_entry+0x2d8>)
 801a6a8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801a6ac:	491d      	ldr	r1, [pc, #116]	@ (801a724 <etharp_find_entry+0x2ec>)
 801a6ae:	481a      	ldr	r0, [pc, #104]	@ (801a718 <etharp_find_entry+0x2e0>)
 801a6b0:	f003 fb10 	bl	801dcd4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d00b      	beq.n	801a6d2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a6ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	6819      	ldr	r1, [r3, #0]
 801a6c2:	4812      	ldr	r0, [pc, #72]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a6c4:	4613      	mov	r3, r2
 801a6c6:	005b      	lsls	r3, r3, #1
 801a6c8:	4413      	add	r3, r2
 801a6ca:	00db      	lsls	r3, r3, #3
 801a6cc:	4403      	add	r3, r0
 801a6ce:	3304      	adds	r3, #4
 801a6d0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a6d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a6d6:	490d      	ldr	r1, [pc, #52]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a6d8:	4613      	mov	r3, r2
 801a6da:	005b      	lsls	r3, r3, #1
 801a6dc:	4413      	add	r3, r2
 801a6de:	00db      	lsls	r3, r3, #3
 801a6e0:	440b      	add	r3, r1
 801a6e2:	3312      	adds	r3, #18
 801a6e4:	2200      	movs	r2, #0
 801a6e6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a6e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a6ec:	4907      	ldr	r1, [pc, #28]	@ (801a70c <etharp_find_entry+0x2d4>)
 801a6ee:	4613      	mov	r3, r2
 801a6f0:	005b      	lsls	r3, r3, #1
 801a6f2:	4413      	add	r3, r2
 801a6f4:	00db      	lsls	r3, r3, #3
 801a6f6:	440b      	add	r3, r1
 801a6f8:	3308      	adds	r3, #8
 801a6fa:	687a      	ldr	r2, [r7, #4]
 801a6fc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a6fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a702:	4618      	mov	r0, r3
 801a704:	3728      	adds	r7, #40	@ 0x28
 801a706:	46bd      	mov	sp, r7
 801a708:	bd80      	pop	{r7, pc}
 801a70a:	bf00      	nop
 801a70c:	200276e8 	.word	0x200276e8
 801a710:	080211a4 	.word	0x080211a4
 801a714:	080211dc 	.word	0x080211dc
 801a718:	0802121c 	.word	0x0802121c
 801a71c:	08021244 	.word	0x08021244
 801a720:	0802125c 	.word	0x0802125c
 801a724:	08021270 	.word	0x08021270

0801a728 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b088      	sub	sp, #32
 801a72c:	af02      	add	r7, sp, #8
 801a72e:	60f8      	str	r0, [r7, #12]
 801a730:	60b9      	str	r1, [r7, #8]
 801a732:	607a      	str	r2, [r7, #4]
 801a734:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a73c:	2b06      	cmp	r3, #6
 801a73e:	d006      	beq.n	801a74e <etharp_update_arp_entry+0x26>
 801a740:	4b48      	ldr	r3, [pc, #288]	@ (801a864 <etharp_update_arp_entry+0x13c>)
 801a742:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a746:	4948      	ldr	r1, [pc, #288]	@ (801a868 <etharp_update_arp_entry+0x140>)
 801a748:	4848      	ldr	r0, [pc, #288]	@ (801a86c <etharp_update_arp_entry+0x144>)
 801a74a:	f003 fac3 	bl	801dcd4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a74e:	68bb      	ldr	r3, [r7, #8]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d012      	beq.n	801a77a <etharp_update_arp_entry+0x52>
 801a754:	68bb      	ldr	r3, [r7, #8]
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d00e      	beq.n	801a77a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a75c:	68bb      	ldr	r3, [r7, #8]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	68f9      	ldr	r1, [r7, #12]
 801a762:	4618      	mov	r0, r3
 801a764:	f001 f8fe 	bl	801b964 <ip4_addr_isbroadcast_u32>
 801a768:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d105      	bne.n	801a77a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a76e:	68bb      	ldr	r3, [r7, #8]
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a776:	2be0      	cmp	r3, #224	@ 0xe0
 801a778:	d102      	bne.n	801a780 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a77a:	f06f 030f 	mvn.w	r3, #15
 801a77e:	e06c      	b.n	801a85a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a780:	78fb      	ldrb	r3, [r7, #3]
 801a782:	68fa      	ldr	r2, [r7, #12]
 801a784:	4619      	mov	r1, r3
 801a786:	68b8      	ldr	r0, [r7, #8]
 801a788:	f7ff fe56 	bl	801a438 <etharp_find_entry>
 801a78c:	4603      	mov	r3, r0
 801a78e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a790:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a794:	2b00      	cmp	r3, #0
 801a796:	da02      	bge.n	801a79e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a798:	8afb      	ldrh	r3, [r7, #22]
 801a79a:	b25b      	sxtb	r3, r3
 801a79c:	e05d      	b.n	801a85a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a79e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7a2:	4933      	ldr	r1, [pc, #204]	@ (801a870 <etharp_update_arp_entry+0x148>)
 801a7a4:	4613      	mov	r3, r2
 801a7a6:	005b      	lsls	r3, r3, #1
 801a7a8:	4413      	add	r3, r2
 801a7aa:	00db      	lsls	r3, r3, #3
 801a7ac:	440b      	add	r3, r1
 801a7ae:	3314      	adds	r3, #20
 801a7b0:	2202      	movs	r2, #2
 801a7b2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a7b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7b8:	492d      	ldr	r1, [pc, #180]	@ (801a870 <etharp_update_arp_entry+0x148>)
 801a7ba:	4613      	mov	r3, r2
 801a7bc:	005b      	lsls	r3, r3, #1
 801a7be:	4413      	add	r3, r2
 801a7c0:	00db      	lsls	r3, r3, #3
 801a7c2:	440b      	add	r3, r1
 801a7c4:	3308      	adds	r3, #8
 801a7c6:	68fa      	ldr	r2, [r7, #12]
 801a7c8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a7ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7ce:	4613      	mov	r3, r2
 801a7d0:	005b      	lsls	r3, r3, #1
 801a7d2:	4413      	add	r3, r2
 801a7d4:	00db      	lsls	r3, r3, #3
 801a7d6:	3308      	adds	r3, #8
 801a7d8:	4a25      	ldr	r2, [pc, #148]	@ (801a870 <etharp_update_arp_entry+0x148>)
 801a7da:	4413      	add	r3, r2
 801a7dc:	3304      	adds	r3, #4
 801a7de:	2206      	movs	r2, #6
 801a7e0:	6879      	ldr	r1, [r7, #4]
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f003 fbaf 	bl	801df46 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a7e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7ec:	4920      	ldr	r1, [pc, #128]	@ (801a870 <etharp_update_arp_entry+0x148>)
 801a7ee:	4613      	mov	r3, r2
 801a7f0:	005b      	lsls	r3, r3, #1
 801a7f2:	4413      	add	r3, r2
 801a7f4:	00db      	lsls	r3, r3, #3
 801a7f6:	440b      	add	r3, r1
 801a7f8:	3312      	adds	r3, #18
 801a7fa:	2200      	movs	r2, #0
 801a7fc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a7fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a802:	491b      	ldr	r1, [pc, #108]	@ (801a870 <etharp_update_arp_entry+0x148>)
 801a804:	4613      	mov	r3, r2
 801a806:	005b      	lsls	r3, r3, #1
 801a808:	4413      	add	r3, r2
 801a80a:	00db      	lsls	r3, r3, #3
 801a80c:	440b      	add	r3, r1
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	2b00      	cmp	r3, #0
 801a812:	d021      	beq.n	801a858 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a814:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a818:	4915      	ldr	r1, [pc, #84]	@ (801a870 <etharp_update_arp_entry+0x148>)
 801a81a:	4613      	mov	r3, r2
 801a81c:	005b      	lsls	r3, r3, #1
 801a81e:	4413      	add	r3, r2
 801a820:	00db      	lsls	r3, r3, #3
 801a822:	440b      	add	r3, r1
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a828:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a82c:	4910      	ldr	r1, [pc, #64]	@ (801a870 <etharp_update_arp_entry+0x148>)
 801a82e:	4613      	mov	r3, r2
 801a830:	005b      	lsls	r3, r3, #1
 801a832:	4413      	add	r3, r2
 801a834:	00db      	lsls	r3, r3, #3
 801a836:	440b      	add	r3, r1
 801a838:	2200      	movs	r2, #0
 801a83a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a842:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a846:	9300      	str	r3, [sp, #0]
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	6939      	ldr	r1, [r7, #16]
 801a84c:	68f8      	ldr	r0, [r7, #12]
 801a84e:	f001 ff97 	bl	801c780 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a852:	6938      	ldr	r0, [r7, #16]
 801a854:	f7f9 fb32 	bl	8013ebc <pbuf_free>
  }
  return ERR_OK;
 801a858:	2300      	movs	r3, #0
}
 801a85a:	4618      	mov	r0, r3
 801a85c:	3718      	adds	r7, #24
 801a85e:	46bd      	mov	sp, r7
 801a860:	bd80      	pop	{r7, pc}
 801a862:	bf00      	nop
 801a864:	080211a4 	.word	0x080211a4
 801a868:	0802129c 	.word	0x0802129c
 801a86c:	0802121c 	.word	0x0802121c
 801a870:	200276e8 	.word	0x200276e8

0801a874 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a874:	b580      	push	{r7, lr}
 801a876:	b084      	sub	sp, #16
 801a878:	af00      	add	r7, sp, #0
 801a87a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a87c:	2300      	movs	r3, #0
 801a87e:	60fb      	str	r3, [r7, #12]
 801a880:	e01e      	b.n	801a8c0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a882:	4913      	ldr	r1, [pc, #76]	@ (801a8d0 <etharp_cleanup_netif+0x5c>)
 801a884:	68fa      	ldr	r2, [r7, #12]
 801a886:	4613      	mov	r3, r2
 801a888:	005b      	lsls	r3, r3, #1
 801a88a:	4413      	add	r3, r2
 801a88c:	00db      	lsls	r3, r3, #3
 801a88e:	440b      	add	r3, r1
 801a890:	3314      	adds	r3, #20
 801a892:	781b      	ldrb	r3, [r3, #0]
 801a894:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a896:	7afb      	ldrb	r3, [r7, #11]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d00e      	beq.n	801a8ba <etharp_cleanup_netif+0x46>
 801a89c:	490c      	ldr	r1, [pc, #48]	@ (801a8d0 <etharp_cleanup_netif+0x5c>)
 801a89e:	68fa      	ldr	r2, [r7, #12]
 801a8a0:	4613      	mov	r3, r2
 801a8a2:	005b      	lsls	r3, r3, #1
 801a8a4:	4413      	add	r3, r2
 801a8a6:	00db      	lsls	r3, r3, #3
 801a8a8:	440b      	add	r3, r1
 801a8aa:	3308      	adds	r3, #8
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	687a      	ldr	r2, [r7, #4]
 801a8b0:	429a      	cmp	r2, r3
 801a8b2:	d102      	bne.n	801a8ba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a8b4:	68f8      	ldr	r0, [r7, #12]
 801a8b6:	f7ff fce5 	bl	801a284 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	3301      	adds	r3, #1
 801a8be:	60fb      	str	r3, [r7, #12]
 801a8c0:	68fb      	ldr	r3, [r7, #12]
 801a8c2:	2b09      	cmp	r3, #9
 801a8c4:	dddd      	ble.n	801a882 <etharp_cleanup_netif+0xe>
    }
  }
}
 801a8c6:	bf00      	nop
 801a8c8:	bf00      	nop
 801a8ca:	3710      	adds	r7, #16
 801a8cc:	46bd      	mov	sp, r7
 801a8ce:	bd80      	pop	{r7, pc}
 801a8d0:	200276e8 	.word	0x200276e8

0801a8d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a8d4:	b5b0      	push	{r4, r5, r7, lr}
 801a8d6:	b08a      	sub	sp, #40	@ 0x28
 801a8d8:	af04      	add	r7, sp, #16
 801a8da:	6078      	str	r0, [r7, #4]
 801a8dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a8de:	683b      	ldr	r3, [r7, #0]
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d107      	bne.n	801a8f4 <etharp_input+0x20>
 801a8e4:	4b3d      	ldr	r3, [pc, #244]	@ (801a9dc <etharp_input+0x108>)
 801a8e6:	f240 228a 	movw	r2, #650	@ 0x28a
 801a8ea:	493d      	ldr	r1, [pc, #244]	@ (801a9e0 <etharp_input+0x10c>)
 801a8ec:	483d      	ldr	r0, [pc, #244]	@ (801a9e4 <etharp_input+0x110>)
 801a8ee:	f003 f9f1 	bl	801dcd4 <iprintf>
 801a8f2:	e06f      	b.n	801a9d4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	685b      	ldr	r3, [r3, #4]
 801a8f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a8fa:	693b      	ldr	r3, [r7, #16]
 801a8fc:	881b      	ldrh	r3, [r3, #0]
 801a8fe:	b29b      	uxth	r3, r3
 801a900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a904:	d10c      	bne.n	801a920 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a906:	693b      	ldr	r3, [r7, #16]
 801a908:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a90a:	2b06      	cmp	r3, #6
 801a90c:	d108      	bne.n	801a920 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a90e:	693b      	ldr	r3, [r7, #16]
 801a910:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a912:	2b04      	cmp	r3, #4
 801a914:	d104      	bne.n	801a920 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a916:	693b      	ldr	r3, [r7, #16]
 801a918:	885b      	ldrh	r3, [r3, #2]
 801a91a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a91c:	2b08      	cmp	r3, #8
 801a91e:	d003      	beq.n	801a928 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a920:	6878      	ldr	r0, [r7, #4]
 801a922:	f7f9 facb 	bl	8013ebc <pbuf_free>
    return;
 801a926:	e055      	b.n	801a9d4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a928:	693b      	ldr	r3, [r7, #16]
 801a92a:	330e      	adds	r3, #14
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a930:	693b      	ldr	r3, [r7, #16]
 801a932:	3318      	adds	r3, #24
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a938:	683b      	ldr	r3, [r7, #0]
 801a93a:	3304      	adds	r3, #4
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d102      	bne.n	801a948 <etharp_input+0x74>
    for_us = 0;
 801a942:	2300      	movs	r3, #0
 801a944:	75fb      	strb	r3, [r7, #23]
 801a946:	e009      	b.n	801a95c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a948:	68ba      	ldr	r2, [r7, #8]
 801a94a:	683b      	ldr	r3, [r7, #0]
 801a94c:	3304      	adds	r3, #4
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	429a      	cmp	r2, r3
 801a952:	bf0c      	ite	eq
 801a954:	2301      	moveq	r3, #1
 801a956:	2300      	movne	r3, #0
 801a958:	b2db      	uxtb	r3, r3
 801a95a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a95c:	693b      	ldr	r3, [r7, #16]
 801a95e:	f103 0208 	add.w	r2, r3, #8
 801a962:	7dfb      	ldrb	r3, [r7, #23]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d001      	beq.n	801a96c <etharp_input+0x98>
 801a968:	2301      	movs	r3, #1
 801a96a:	e000      	b.n	801a96e <etharp_input+0x9a>
 801a96c:	2302      	movs	r3, #2
 801a96e:	f107 010c 	add.w	r1, r7, #12
 801a972:	6838      	ldr	r0, [r7, #0]
 801a974:	f7ff fed8 	bl	801a728 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a978:	693b      	ldr	r3, [r7, #16]
 801a97a:	88db      	ldrh	r3, [r3, #6]
 801a97c:	b29b      	uxth	r3, r3
 801a97e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a982:	d003      	beq.n	801a98c <etharp_input+0xb8>
 801a984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a988:	d01e      	beq.n	801a9c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a98a:	e020      	b.n	801a9ce <etharp_input+0xfa>
      if (for_us) {
 801a98c:	7dfb      	ldrb	r3, [r7, #23]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d01c      	beq.n	801a9cc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a992:	683b      	ldr	r3, [r7, #0]
 801a994:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801a998:	693b      	ldr	r3, [r7, #16]
 801a99a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a99e:	683b      	ldr	r3, [r7, #0]
 801a9a0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801a9a4:	683b      	ldr	r3, [r7, #0]
 801a9a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a9a8:	693a      	ldr	r2, [r7, #16]
 801a9aa:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a9ac:	2102      	movs	r1, #2
 801a9ae:	9103      	str	r1, [sp, #12]
 801a9b0:	f107 010c 	add.w	r1, r7, #12
 801a9b4:	9102      	str	r1, [sp, #8]
 801a9b6:	9201      	str	r2, [sp, #4]
 801a9b8:	9300      	str	r3, [sp, #0]
 801a9ba:	462b      	mov	r3, r5
 801a9bc:	4622      	mov	r2, r4
 801a9be:	4601      	mov	r1, r0
 801a9c0:	6838      	ldr	r0, [r7, #0]
 801a9c2:	f000 faeb 	bl	801af9c <etharp_raw>
      break;
 801a9c6:	e001      	b.n	801a9cc <etharp_input+0xf8>
      break;
 801a9c8:	bf00      	nop
 801a9ca:	e000      	b.n	801a9ce <etharp_input+0xfa>
      break;
 801a9cc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a9ce:	6878      	ldr	r0, [r7, #4]
 801a9d0:	f7f9 fa74 	bl	8013ebc <pbuf_free>
}
 801a9d4:	3718      	adds	r7, #24
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	bdb0      	pop	{r4, r5, r7, pc}
 801a9da:	bf00      	nop
 801a9dc:	080211a4 	.word	0x080211a4
 801a9e0:	080212f4 	.word	0x080212f4
 801a9e4:	0802121c 	.word	0x0802121c

0801a9e8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b086      	sub	sp, #24
 801a9ec:	af02      	add	r7, sp, #8
 801a9ee:	60f8      	str	r0, [r7, #12]
 801a9f0:	60b9      	str	r1, [r7, #8]
 801a9f2:	4613      	mov	r3, r2
 801a9f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a9f6:	79fa      	ldrb	r2, [r7, #7]
 801a9f8:	4944      	ldr	r1, [pc, #272]	@ (801ab0c <etharp_output_to_arp_index+0x124>)
 801a9fa:	4613      	mov	r3, r2
 801a9fc:	005b      	lsls	r3, r3, #1
 801a9fe:	4413      	add	r3, r2
 801aa00:	00db      	lsls	r3, r3, #3
 801aa02:	440b      	add	r3, r1
 801aa04:	3314      	adds	r3, #20
 801aa06:	781b      	ldrb	r3, [r3, #0]
 801aa08:	2b01      	cmp	r3, #1
 801aa0a:	d806      	bhi.n	801aa1a <etharp_output_to_arp_index+0x32>
 801aa0c:	4b40      	ldr	r3, [pc, #256]	@ (801ab10 <etharp_output_to_arp_index+0x128>)
 801aa0e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801aa12:	4940      	ldr	r1, [pc, #256]	@ (801ab14 <etharp_output_to_arp_index+0x12c>)
 801aa14:	4840      	ldr	r0, [pc, #256]	@ (801ab18 <etharp_output_to_arp_index+0x130>)
 801aa16:	f003 f95d 	bl	801dcd4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801aa1a:	79fa      	ldrb	r2, [r7, #7]
 801aa1c:	493b      	ldr	r1, [pc, #236]	@ (801ab0c <etharp_output_to_arp_index+0x124>)
 801aa1e:	4613      	mov	r3, r2
 801aa20:	005b      	lsls	r3, r3, #1
 801aa22:	4413      	add	r3, r2
 801aa24:	00db      	lsls	r3, r3, #3
 801aa26:	440b      	add	r3, r1
 801aa28:	3314      	adds	r3, #20
 801aa2a:	781b      	ldrb	r3, [r3, #0]
 801aa2c:	2b02      	cmp	r3, #2
 801aa2e:	d153      	bne.n	801aad8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801aa30:	79fa      	ldrb	r2, [r7, #7]
 801aa32:	4936      	ldr	r1, [pc, #216]	@ (801ab0c <etharp_output_to_arp_index+0x124>)
 801aa34:	4613      	mov	r3, r2
 801aa36:	005b      	lsls	r3, r3, #1
 801aa38:	4413      	add	r3, r2
 801aa3a:	00db      	lsls	r3, r3, #3
 801aa3c:	440b      	add	r3, r1
 801aa3e:	3312      	adds	r3, #18
 801aa40:	881b      	ldrh	r3, [r3, #0]
 801aa42:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801aa46:	d919      	bls.n	801aa7c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801aa48:	79fa      	ldrb	r2, [r7, #7]
 801aa4a:	4613      	mov	r3, r2
 801aa4c:	005b      	lsls	r3, r3, #1
 801aa4e:	4413      	add	r3, r2
 801aa50:	00db      	lsls	r3, r3, #3
 801aa52:	4a2e      	ldr	r2, [pc, #184]	@ (801ab0c <etharp_output_to_arp_index+0x124>)
 801aa54:	4413      	add	r3, r2
 801aa56:	3304      	adds	r3, #4
 801aa58:	4619      	mov	r1, r3
 801aa5a:	68f8      	ldr	r0, [r7, #12]
 801aa5c:	f000 fb4c 	bl	801b0f8 <etharp_request>
 801aa60:	4603      	mov	r3, r0
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d138      	bne.n	801aad8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801aa66:	79fa      	ldrb	r2, [r7, #7]
 801aa68:	4928      	ldr	r1, [pc, #160]	@ (801ab0c <etharp_output_to_arp_index+0x124>)
 801aa6a:	4613      	mov	r3, r2
 801aa6c:	005b      	lsls	r3, r3, #1
 801aa6e:	4413      	add	r3, r2
 801aa70:	00db      	lsls	r3, r3, #3
 801aa72:	440b      	add	r3, r1
 801aa74:	3314      	adds	r3, #20
 801aa76:	2203      	movs	r2, #3
 801aa78:	701a      	strb	r2, [r3, #0]
 801aa7a:	e02d      	b.n	801aad8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801aa7c:	79fa      	ldrb	r2, [r7, #7]
 801aa7e:	4923      	ldr	r1, [pc, #140]	@ (801ab0c <etharp_output_to_arp_index+0x124>)
 801aa80:	4613      	mov	r3, r2
 801aa82:	005b      	lsls	r3, r3, #1
 801aa84:	4413      	add	r3, r2
 801aa86:	00db      	lsls	r3, r3, #3
 801aa88:	440b      	add	r3, r1
 801aa8a:	3312      	adds	r3, #18
 801aa8c:	881b      	ldrh	r3, [r3, #0]
 801aa8e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801aa92:	d321      	bcc.n	801aad8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801aa94:	79fa      	ldrb	r2, [r7, #7]
 801aa96:	4613      	mov	r3, r2
 801aa98:	005b      	lsls	r3, r3, #1
 801aa9a:	4413      	add	r3, r2
 801aa9c:	00db      	lsls	r3, r3, #3
 801aa9e:	4a1b      	ldr	r2, [pc, #108]	@ (801ab0c <etharp_output_to_arp_index+0x124>)
 801aaa0:	4413      	add	r3, r2
 801aaa2:	1d19      	adds	r1, r3, #4
 801aaa4:	79fa      	ldrb	r2, [r7, #7]
 801aaa6:	4613      	mov	r3, r2
 801aaa8:	005b      	lsls	r3, r3, #1
 801aaaa:	4413      	add	r3, r2
 801aaac:	00db      	lsls	r3, r3, #3
 801aaae:	3308      	adds	r3, #8
 801aab0:	4a16      	ldr	r2, [pc, #88]	@ (801ab0c <etharp_output_to_arp_index+0x124>)
 801aab2:	4413      	add	r3, r2
 801aab4:	3304      	adds	r3, #4
 801aab6:	461a      	mov	r2, r3
 801aab8:	68f8      	ldr	r0, [r7, #12]
 801aaba:	f000 fafb 	bl	801b0b4 <etharp_request_dst>
 801aabe:	4603      	mov	r3, r0
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d109      	bne.n	801aad8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801aac4:	79fa      	ldrb	r2, [r7, #7]
 801aac6:	4911      	ldr	r1, [pc, #68]	@ (801ab0c <etharp_output_to_arp_index+0x124>)
 801aac8:	4613      	mov	r3, r2
 801aaca:	005b      	lsls	r3, r3, #1
 801aacc:	4413      	add	r3, r2
 801aace:	00db      	lsls	r3, r3, #3
 801aad0:	440b      	add	r3, r1
 801aad2:	3314      	adds	r3, #20
 801aad4:	2203      	movs	r2, #3
 801aad6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801aade:	79fa      	ldrb	r2, [r7, #7]
 801aae0:	4613      	mov	r3, r2
 801aae2:	005b      	lsls	r3, r3, #1
 801aae4:	4413      	add	r3, r2
 801aae6:	00db      	lsls	r3, r3, #3
 801aae8:	3308      	adds	r3, #8
 801aaea:	4a08      	ldr	r2, [pc, #32]	@ (801ab0c <etharp_output_to_arp_index+0x124>)
 801aaec:	4413      	add	r3, r2
 801aaee:	3304      	adds	r3, #4
 801aaf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801aaf4:	9200      	str	r2, [sp, #0]
 801aaf6:	460a      	mov	r2, r1
 801aaf8:	68b9      	ldr	r1, [r7, #8]
 801aafa:	68f8      	ldr	r0, [r7, #12]
 801aafc:	f001 fe40 	bl	801c780 <ethernet_output>
 801ab00:	4603      	mov	r3, r0
}
 801ab02:	4618      	mov	r0, r3
 801ab04:	3710      	adds	r7, #16
 801ab06:	46bd      	mov	sp, r7
 801ab08:	bd80      	pop	{r7, pc}
 801ab0a:	bf00      	nop
 801ab0c:	200276e8 	.word	0x200276e8
 801ab10:	080211a4 	.word	0x080211a4
 801ab14:	08021314 	.word	0x08021314
 801ab18:	0802121c 	.word	0x0802121c

0801ab1c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ab1c:	b580      	push	{r7, lr}
 801ab1e:	b08a      	sub	sp, #40	@ 0x28
 801ab20:	af02      	add	r7, sp, #8
 801ab22:	60f8      	str	r0, [r7, #12]
 801ab24:	60b9      	str	r1, [r7, #8]
 801ab26:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d106      	bne.n	801ab40 <etharp_output+0x24>
 801ab32:	4b73      	ldr	r3, [pc, #460]	@ (801ad00 <etharp_output+0x1e4>)
 801ab34:	f240 321e 	movw	r2, #798	@ 0x31e
 801ab38:	4972      	ldr	r1, [pc, #456]	@ (801ad04 <etharp_output+0x1e8>)
 801ab3a:	4873      	ldr	r0, [pc, #460]	@ (801ad08 <etharp_output+0x1ec>)
 801ab3c:	f003 f8ca 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ab40:	68bb      	ldr	r3, [r7, #8]
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d106      	bne.n	801ab54 <etharp_output+0x38>
 801ab46:	4b6e      	ldr	r3, [pc, #440]	@ (801ad00 <etharp_output+0x1e4>)
 801ab48:	f240 321f 	movw	r2, #799	@ 0x31f
 801ab4c:	496f      	ldr	r1, [pc, #444]	@ (801ad0c <etharp_output+0x1f0>)
 801ab4e:	486e      	ldr	r0, [pc, #440]	@ (801ad08 <etharp_output+0x1ec>)
 801ab50:	f003 f8c0 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d106      	bne.n	801ab68 <etharp_output+0x4c>
 801ab5a:	4b69      	ldr	r3, [pc, #420]	@ (801ad00 <etharp_output+0x1e4>)
 801ab5c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801ab60:	496b      	ldr	r1, [pc, #428]	@ (801ad10 <etharp_output+0x1f4>)
 801ab62:	4869      	ldr	r0, [pc, #420]	@ (801ad08 <etharp_output+0x1ec>)
 801ab64:	f003 f8b6 	bl	801dcd4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	68f9      	ldr	r1, [r7, #12]
 801ab6e:	4618      	mov	r0, r3
 801ab70:	f000 fef8 	bl	801b964 <ip4_addr_isbroadcast_u32>
 801ab74:	4603      	mov	r3, r0
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d002      	beq.n	801ab80 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801ab7a:	4b66      	ldr	r3, [pc, #408]	@ (801ad14 <etharp_output+0x1f8>)
 801ab7c:	61fb      	str	r3, [r7, #28]
 801ab7e:	e0af      	b.n	801ace0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ab88:	2be0      	cmp	r3, #224	@ 0xe0
 801ab8a:	d118      	bne.n	801abbe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ab8c:	2301      	movs	r3, #1
 801ab8e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ab90:	2300      	movs	r3, #0
 801ab92:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ab94:	235e      	movs	r3, #94	@ 0x5e
 801ab96:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	3301      	adds	r3, #1
 801ab9c:	781b      	ldrb	r3, [r3, #0]
 801ab9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aba2:	b2db      	uxtb	r3, r3
 801aba4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	3302      	adds	r3, #2
 801abaa:	781b      	ldrb	r3, [r3, #0]
 801abac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	3303      	adds	r3, #3
 801abb2:	781b      	ldrb	r3, [r3, #0]
 801abb4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801abb6:	f107 0310 	add.w	r3, r7, #16
 801abba:	61fb      	str	r3, [r7, #28]
 801abbc:	e090      	b.n	801ace0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	681a      	ldr	r2, [r3, #0]
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	3304      	adds	r3, #4
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	405a      	eors	r2, r3
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	3308      	adds	r3, #8
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	4013      	ands	r3, r2
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d012      	beq.n	801abfc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801abdc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801abe0:	4293      	cmp	r3, r2
 801abe2:	d00b      	beq.n	801abfc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	330c      	adds	r3, #12
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	2b00      	cmp	r3, #0
 801abec:	d003      	beq.n	801abf6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	330c      	adds	r3, #12
 801abf2:	61bb      	str	r3, [r7, #24]
 801abf4:	e002      	b.n	801abfc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801abf6:	f06f 0303 	mvn.w	r3, #3
 801abfa:	e07d      	b.n	801acf8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801abfc:	4b46      	ldr	r3, [pc, #280]	@ (801ad18 <etharp_output+0x1fc>)
 801abfe:	781b      	ldrb	r3, [r3, #0]
 801ac00:	4619      	mov	r1, r3
 801ac02:	4a46      	ldr	r2, [pc, #280]	@ (801ad1c <etharp_output+0x200>)
 801ac04:	460b      	mov	r3, r1
 801ac06:	005b      	lsls	r3, r3, #1
 801ac08:	440b      	add	r3, r1
 801ac0a:	00db      	lsls	r3, r3, #3
 801ac0c:	4413      	add	r3, r2
 801ac0e:	3314      	adds	r3, #20
 801ac10:	781b      	ldrb	r3, [r3, #0]
 801ac12:	2b01      	cmp	r3, #1
 801ac14:	d925      	bls.n	801ac62 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ac16:	4b40      	ldr	r3, [pc, #256]	@ (801ad18 <etharp_output+0x1fc>)
 801ac18:	781b      	ldrb	r3, [r3, #0]
 801ac1a:	4619      	mov	r1, r3
 801ac1c:	4a3f      	ldr	r2, [pc, #252]	@ (801ad1c <etharp_output+0x200>)
 801ac1e:	460b      	mov	r3, r1
 801ac20:	005b      	lsls	r3, r3, #1
 801ac22:	440b      	add	r3, r1
 801ac24:	00db      	lsls	r3, r3, #3
 801ac26:	4413      	add	r3, r2
 801ac28:	3308      	adds	r3, #8
 801ac2a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ac2c:	68fa      	ldr	r2, [r7, #12]
 801ac2e:	429a      	cmp	r2, r3
 801ac30:	d117      	bne.n	801ac62 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ac32:	69bb      	ldr	r3, [r7, #24]
 801ac34:	681a      	ldr	r2, [r3, #0]
 801ac36:	4b38      	ldr	r3, [pc, #224]	@ (801ad18 <etharp_output+0x1fc>)
 801ac38:	781b      	ldrb	r3, [r3, #0]
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	4937      	ldr	r1, [pc, #220]	@ (801ad1c <etharp_output+0x200>)
 801ac3e:	4603      	mov	r3, r0
 801ac40:	005b      	lsls	r3, r3, #1
 801ac42:	4403      	add	r3, r0
 801ac44:	00db      	lsls	r3, r3, #3
 801ac46:	440b      	add	r3, r1
 801ac48:	3304      	adds	r3, #4
 801ac4a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ac4c:	429a      	cmp	r2, r3
 801ac4e:	d108      	bne.n	801ac62 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ac50:	4b31      	ldr	r3, [pc, #196]	@ (801ad18 <etharp_output+0x1fc>)
 801ac52:	781b      	ldrb	r3, [r3, #0]
 801ac54:	461a      	mov	r2, r3
 801ac56:	68b9      	ldr	r1, [r7, #8]
 801ac58:	68f8      	ldr	r0, [r7, #12]
 801ac5a:	f7ff fec5 	bl	801a9e8 <etharp_output_to_arp_index>
 801ac5e:	4603      	mov	r3, r0
 801ac60:	e04a      	b.n	801acf8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ac62:	2300      	movs	r3, #0
 801ac64:	75fb      	strb	r3, [r7, #23]
 801ac66:	e031      	b.n	801accc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ac68:	7dfa      	ldrb	r2, [r7, #23]
 801ac6a:	492c      	ldr	r1, [pc, #176]	@ (801ad1c <etharp_output+0x200>)
 801ac6c:	4613      	mov	r3, r2
 801ac6e:	005b      	lsls	r3, r3, #1
 801ac70:	4413      	add	r3, r2
 801ac72:	00db      	lsls	r3, r3, #3
 801ac74:	440b      	add	r3, r1
 801ac76:	3314      	adds	r3, #20
 801ac78:	781b      	ldrb	r3, [r3, #0]
 801ac7a:	2b01      	cmp	r3, #1
 801ac7c:	d923      	bls.n	801acc6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ac7e:	7dfa      	ldrb	r2, [r7, #23]
 801ac80:	4926      	ldr	r1, [pc, #152]	@ (801ad1c <etharp_output+0x200>)
 801ac82:	4613      	mov	r3, r2
 801ac84:	005b      	lsls	r3, r3, #1
 801ac86:	4413      	add	r3, r2
 801ac88:	00db      	lsls	r3, r3, #3
 801ac8a:	440b      	add	r3, r1
 801ac8c:	3308      	adds	r3, #8
 801ac8e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ac90:	68fa      	ldr	r2, [r7, #12]
 801ac92:	429a      	cmp	r2, r3
 801ac94:	d117      	bne.n	801acc6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ac96:	69bb      	ldr	r3, [r7, #24]
 801ac98:	6819      	ldr	r1, [r3, #0]
 801ac9a:	7dfa      	ldrb	r2, [r7, #23]
 801ac9c:	481f      	ldr	r0, [pc, #124]	@ (801ad1c <etharp_output+0x200>)
 801ac9e:	4613      	mov	r3, r2
 801aca0:	005b      	lsls	r3, r3, #1
 801aca2:	4413      	add	r3, r2
 801aca4:	00db      	lsls	r3, r3, #3
 801aca6:	4403      	add	r3, r0
 801aca8:	3304      	adds	r3, #4
 801acaa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801acac:	4299      	cmp	r1, r3
 801acae:	d10a      	bne.n	801acc6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801acb0:	4a19      	ldr	r2, [pc, #100]	@ (801ad18 <etharp_output+0x1fc>)
 801acb2:	7dfb      	ldrb	r3, [r7, #23]
 801acb4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801acb6:	7dfb      	ldrb	r3, [r7, #23]
 801acb8:	461a      	mov	r2, r3
 801acba:	68b9      	ldr	r1, [r7, #8]
 801acbc:	68f8      	ldr	r0, [r7, #12]
 801acbe:	f7ff fe93 	bl	801a9e8 <etharp_output_to_arp_index>
 801acc2:	4603      	mov	r3, r0
 801acc4:	e018      	b.n	801acf8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801acc6:	7dfb      	ldrb	r3, [r7, #23]
 801acc8:	3301      	adds	r3, #1
 801acca:	75fb      	strb	r3, [r7, #23]
 801accc:	7dfb      	ldrb	r3, [r7, #23]
 801acce:	2b09      	cmp	r3, #9
 801acd0:	d9ca      	bls.n	801ac68 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801acd2:	68ba      	ldr	r2, [r7, #8]
 801acd4:	69b9      	ldr	r1, [r7, #24]
 801acd6:	68f8      	ldr	r0, [r7, #12]
 801acd8:	f000 f822 	bl	801ad20 <etharp_query>
 801acdc:	4603      	mov	r3, r0
 801acde:	e00b      	b.n	801acf8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801ace6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801acea:	9300      	str	r3, [sp, #0]
 801acec:	69fb      	ldr	r3, [r7, #28]
 801acee:	68b9      	ldr	r1, [r7, #8]
 801acf0:	68f8      	ldr	r0, [r7, #12]
 801acf2:	f001 fd45 	bl	801c780 <ethernet_output>
 801acf6:	4603      	mov	r3, r0
}
 801acf8:	4618      	mov	r0, r3
 801acfa:	3720      	adds	r7, #32
 801acfc:	46bd      	mov	sp, r7
 801acfe:	bd80      	pop	{r7, pc}
 801ad00:	080211a4 	.word	0x080211a4
 801ad04:	080212f4 	.word	0x080212f4
 801ad08:	0802121c 	.word	0x0802121c
 801ad0c:	08021344 	.word	0x08021344
 801ad10:	080212e4 	.word	0x080212e4
 801ad14:	08021c98 	.word	0x08021c98
 801ad18:	200277d8 	.word	0x200277d8
 801ad1c:	200276e8 	.word	0x200276e8

0801ad20 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b08c      	sub	sp, #48	@ 0x30
 801ad24:	af02      	add	r7, sp, #8
 801ad26:	60f8      	str	r0, [r7, #12]
 801ad28:	60b9      	str	r1, [r7, #8]
 801ad2a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	3326      	adds	r3, #38	@ 0x26
 801ad30:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ad32:	23ff      	movs	r3, #255	@ 0xff
 801ad34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801ad38:	2300      	movs	r3, #0
 801ad3a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ad3c:	68bb      	ldr	r3, [r7, #8]
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	68f9      	ldr	r1, [r7, #12]
 801ad42:	4618      	mov	r0, r3
 801ad44:	f000 fe0e 	bl	801b964 <ip4_addr_isbroadcast_u32>
 801ad48:	4603      	mov	r3, r0
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d10c      	bne.n	801ad68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ad4e:	68bb      	ldr	r3, [r7, #8]
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ad56:	2be0      	cmp	r3, #224	@ 0xe0
 801ad58:	d006      	beq.n	801ad68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ad5a:	68bb      	ldr	r3, [r7, #8]
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d003      	beq.n	801ad68 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ad60:	68bb      	ldr	r3, [r7, #8]
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d102      	bne.n	801ad6e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ad68:	f06f 030f 	mvn.w	r3, #15
 801ad6c:	e101      	b.n	801af72 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ad6e:	68fa      	ldr	r2, [r7, #12]
 801ad70:	2101      	movs	r1, #1
 801ad72:	68b8      	ldr	r0, [r7, #8]
 801ad74:	f7ff fb60 	bl	801a438 <etharp_find_entry>
 801ad78:	4603      	mov	r3, r0
 801ad7a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ad7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	da02      	bge.n	801ad8a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ad84:	8a7b      	ldrh	r3, [r7, #18]
 801ad86:	b25b      	sxtb	r3, r3
 801ad88:	e0f3      	b.n	801af72 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ad8a:	8a7b      	ldrh	r3, [r7, #18]
 801ad8c:	2b7e      	cmp	r3, #126	@ 0x7e
 801ad8e:	d906      	bls.n	801ad9e <etharp_query+0x7e>
 801ad90:	4b7a      	ldr	r3, [pc, #488]	@ (801af7c <etharp_query+0x25c>)
 801ad92:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801ad96:	497a      	ldr	r1, [pc, #488]	@ (801af80 <etharp_query+0x260>)
 801ad98:	487a      	ldr	r0, [pc, #488]	@ (801af84 <etharp_query+0x264>)
 801ad9a:	f002 ff9b 	bl	801dcd4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ad9e:	8a7b      	ldrh	r3, [r7, #18]
 801ada0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ada2:	7c7a      	ldrb	r2, [r7, #17]
 801ada4:	4978      	ldr	r1, [pc, #480]	@ (801af88 <etharp_query+0x268>)
 801ada6:	4613      	mov	r3, r2
 801ada8:	005b      	lsls	r3, r3, #1
 801adaa:	4413      	add	r3, r2
 801adac:	00db      	lsls	r3, r3, #3
 801adae:	440b      	add	r3, r1
 801adb0:	3314      	adds	r3, #20
 801adb2:	781b      	ldrb	r3, [r3, #0]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d115      	bne.n	801ade4 <etharp_query+0xc4>
    is_new_entry = 1;
 801adb8:	2301      	movs	r3, #1
 801adba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801adbc:	7c7a      	ldrb	r2, [r7, #17]
 801adbe:	4972      	ldr	r1, [pc, #456]	@ (801af88 <etharp_query+0x268>)
 801adc0:	4613      	mov	r3, r2
 801adc2:	005b      	lsls	r3, r3, #1
 801adc4:	4413      	add	r3, r2
 801adc6:	00db      	lsls	r3, r3, #3
 801adc8:	440b      	add	r3, r1
 801adca:	3314      	adds	r3, #20
 801adcc:	2201      	movs	r2, #1
 801adce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801add0:	7c7a      	ldrb	r2, [r7, #17]
 801add2:	496d      	ldr	r1, [pc, #436]	@ (801af88 <etharp_query+0x268>)
 801add4:	4613      	mov	r3, r2
 801add6:	005b      	lsls	r3, r3, #1
 801add8:	4413      	add	r3, r2
 801adda:	00db      	lsls	r3, r3, #3
 801addc:	440b      	add	r3, r1
 801adde:	3308      	adds	r3, #8
 801ade0:	68fa      	ldr	r2, [r7, #12]
 801ade2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ade4:	7c7a      	ldrb	r2, [r7, #17]
 801ade6:	4968      	ldr	r1, [pc, #416]	@ (801af88 <etharp_query+0x268>)
 801ade8:	4613      	mov	r3, r2
 801adea:	005b      	lsls	r3, r3, #1
 801adec:	4413      	add	r3, r2
 801adee:	00db      	lsls	r3, r3, #3
 801adf0:	440b      	add	r3, r1
 801adf2:	3314      	adds	r3, #20
 801adf4:	781b      	ldrb	r3, [r3, #0]
 801adf6:	2b01      	cmp	r3, #1
 801adf8:	d011      	beq.n	801ae1e <etharp_query+0xfe>
 801adfa:	7c7a      	ldrb	r2, [r7, #17]
 801adfc:	4962      	ldr	r1, [pc, #392]	@ (801af88 <etharp_query+0x268>)
 801adfe:	4613      	mov	r3, r2
 801ae00:	005b      	lsls	r3, r3, #1
 801ae02:	4413      	add	r3, r2
 801ae04:	00db      	lsls	r3, r3, #3
 801ae06:	440b      	add	r3, r1
 801ae08:	3314      	adds	r3, #20
 801ae0a:	781b      	ldrb	r3, [r3, #0]
 801ae0c:	2b01      	cmp	r3, #1
 801ae0e:	d806      	bhi.n	801ae1e <etharp_query+0xfe>
 801ae10:	4b5a      	ldr	r3, [pc, #360]	@ (801af7c <etharp_query+0x25c>)
 801ae12:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801ae16:	495d      	ldr	r1, [pc, #372]	@ (801af8c <etharp_query+0x26c>)
 801ae18:	485a      	ldr	r0, [pc, #360]	@ (801af84 <etharp_query+0x264>)
 801ae1a:	f002 ff5b 	bl	801dcd4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ae1e:	6a3b      	ldr	r3, [r7, #32]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d102      	bne.n	801ae2a <etharp_query+0x10a>
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d10c      	bne.n	801ae44 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ae2a:	68b9      	ldr	r1, [r7, #8]
 801ae2c:	68f8      	ldr	r0, [r7, #12]
 801ae2e:	f000 f963 	bl	801b0f8 <etharp_request>
 801ae32:	4603      	mov	r3, r0
 801ae34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d102      	bne.n	801ae44 <etharp_query+0x124>
      return result;
 801ae3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801ae42:	e096      	b.n	801af72 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d106      	bne.n	801ae58 <etharp_query+0x138>
 801ae4a:	4b4c      	ldr	r3, [pc, #304]	@ (801af7c <etharp_query+0x25c>)
 801ae4c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801ae50:	494f      	ldr	r1, [pc, #316]	@ (801af90 <etharp_query+0x270>)
 801ae52:	484c      	ldr	r0, [pc, #304]	@ (801af84 <etharp_query+0x264>)
 801ae54:	f002 ff3e 	bl	801dcd4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ae58:	7c7a      	ldrb	r2, [r7, #17]
 801ae5a:	494b      	ldr	r1, [pc, #300]	@ (801af88 <etharp_query+0x268>)
 801ae5c:	4613      	mov	r3, r2
 801ae5e:	005b      	lsls	r3, r3, #1
 801ae60:	4413      	add	r3, r2
 801ae62:	00db      	lsls	r3, r3, #3
 801ae64:	440b      	add	r3, r1
 801ae66:	3314      	adds	r3, #20
 801ae68:	781b      	ldrb	r3, [r3, #0]
 801ae6a:	2b01      	cmp	r3, #1
 801ae6c:	d917      	bls.n	801ae9e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ae6e:	4a49      	ldr	r2, [pc, #292]	@ (801af94 <etharp_query+0x274>)
 801ae70:	7c7b      	ldrb	r3, [r7, #17]
 801ae72:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ae74:	7c7a      	ldrb	r2, [r7, #17]
 801ae76:	4613      	mov	r3, r2
 801ae78:	005b      	lsls	r3, r3, #1
 801ae7a:	4413      	add	r3, r2
 801ae7c:	00db      	lsls	r3, r3, #3
 801ae7e:	3308      	adds	r3, #8
 801ae80:	4a41      	ldr	r2, [pc, #260]	@ (801af88 <etharp_query+0x268>)
 801ae82:	4413      	add	r3, r2
 801ae84:	3304      	adds	r3, #4
 801ae86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ae8a:	9200      	str	r2, [sp, #0]
 801ae8c:	697a      	ldr	r2, [r7, #20]
 801ae8e:	6879      	ldr	r1, [r7, #4]
 801ae90:	68f8      	ldr	r0, [r7, #12]
 801ae92:	f001 fc75 	bl	801c780 <ethernet_output>
 801ae96:	4603      	mov	r3, r0
 801ae98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ae9c:	e067      	b.n	801af6e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ae9e:	7c7a      	ldrb	r2, [r7, #17]
 801aea0:	4939      	ldr	r1, [pc, #228]	@ (801af88 <etharp_query+0x268>)
 801aea2:	4613      	mov	r3, r2
 801aea4:	005b      	lsls	r3, r3, #1
 801aea6:	4413      	add	r3, r2
 801aea8:	00db      	lsls	r3, r3, #3
 801aeaa:	440b      	add	r3, r1
 801aeac:	3314      	adds	r3, #20
 801aeae:	781b      	ldrb	r3, [r3, #0]
 801aeb0:	2b01      	cmp	r3, #1
 801aeb2:	d15c      	bne.n	801af6e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801aeb4:	2300      	movs	r3, #0
 801aeb6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	61fb      	str	r3, [r7, #28]
    while (p) {
 801aebc:	e01c      	b.n	801aef8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801aebe:	69fb      	ldr	r3, [r7, #28]
 801aec0:	895a      	ldrh	r2, [r3, #10]
 801aec2:	69fb      	ldr	r3, [r7, #28]
 801aec4:	891b      	ldrh	r3, [r3, #8]
 801aec6:	429a      	cmp	r2, r3
 801aec8:	d10a      	bne.n	801aee0 <etharp_query+0x1c0>
 801aeca:	69fb      	ldr	r3, [r7, #28]
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d006      	beq.n	801aee0 <etharp_query+0x1c0>
 801aed2:	4b2a      	ldr	r3, [pc, #168]	@ (801af7c <etharp_query+0x25c>)
 801aed4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801aed8:	492f      	ldr	r1, [pc, #188]	@ (801af98 <etharp_query+0x278>)
 801aeda:	482a      	ldr	r0, [pc, #168]	@ (801af84 <etharp_query+0x264>)
 801aedc:	f002 fefa 	bl	801dcd4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801aee0:	69fb      	ldr	r3, [r7, #28]
 801aee2:	7b1b      	ldrb	r3, [r3, #12]
 801aee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d002      	beq.n	801aef2 <etharp_query+0x1d2>
        copy_needed = 1;
 801aeec:	2301      	movs	r3, #1
 801aeee:	61bb      	str	r3, [r7, #24]
        break;
 801aef0:	e005      	b.n	801aefe <etharp_query+0x1de>
      }
      p = p->next;
 801aef2:	69fb      	ldr	r3, [r7, #28]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801aef8:	69fb      	ldr	r3, [r7, #28]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d1df      	bne.n	801aebe <etharp_query+0x19e>
    }
    if (copy_needed) {
 801aefe:	69bb      	ldr	r3, [r7, #24]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d007      	beq.n	801af14 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801af04:	687a      	ldr	r2, [r7, #4]
 801af06:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801af0a:	200e      	movs	r0, #14
 801af0c:	f7f9 fa4e 	bl	80143ac <pbuf_clone>
 801af10:	61f8      	str	r0, [r7, #28]
 801af12:	e004      	b.n	801af1e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801af18:	69f8      	ldr	r0, [r7, #28]
 801af1a:	f7f9 f875 	bl	8014008 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801af1e:	69fb      	ldr	r3, [r7, #28]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d021      	beq.n	801af68 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801af24:	7c7a      	ldrb	r2, [r7, #17]
 801af26:	4918      	ldr	r1, [pc, #96]	@ (801af88 <etharp_query+0x268>)
 801af28:	4613      	mov	r3, r2
 801af2a:	005b      	lsls	r3, r3, #1
 801af2c:	4413      	add	r3, r2
 801af2e:	00db      	lsls	r3, r3, #3
 801af30:	440b      	add	r3, r1
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d00a      	beq.n	801af4e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801af38:	7c7a      	ldrb	r2, [r7, #17]
 801af3a:	4913      	ldr	r1, [pc, #76]	@ (801af88 <etharp_query+0x268>)
 801af3c:	4613      	mov	r3, r2
 801af3e:	005b      	lsls	r3, r3, #1
 801af40:	4413      	add	r3, r2
 801af42:	00db      	lsls	r3, r3, #3
 801af44:	440b      	add	r3, r1
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	4618      	mov	r0, r3
 801af4a:	f7f8 ffb7 	bl	8013ebc <pbuf_free>
      }
      arp_table[i].q = p;
 801af4e:	7c7a      	ldrb	r2, [r7, #17]
 801af50:	490d      	ldr	r1, [pc, #52]	@ (801af88 <etharp_query+0x268>)
 801af52:	4613      	mov	r3, r2
 801af54:	005b      	lsls	r3, r3, #1
 801af56:	4413      	add	r3, r2
 801af58:	00db      	lsls	r3, r3, #3
 801af5a:	440b      	add	r3, r1
 801af5c:	69fa      	ldr	r2, [r7, #28]
 801af5e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801af60:	2300      	movs	r3, #0
 801af62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801af66:	e002      	b.n	801af6e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801af68:	23ff      	movs	r3, #255	@ 0xff
 801af6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801af6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801af72:	4618      	mov	r0, r3
 801af74:	3728      	adds	r7, #40	@ 0x28
 801af76:	46bd      	mov	sp, r7
 801af78:	bd80      	pop	{r7, pc}
 801af7a:	bf00      	nop
 801af7c:	080211a4 	.word	0x080211a4
 801af80:	08021350 	.word	0x08021350
 801af84:	0802121c 	.word	0x0802121c
 801af88:	200276e8 	.word	0x200276e8
 801af8c:	08021360 	.word	0x08021360
 801af90:	08021344 	.word	0x08021344
 801af94:	200277d8 	.word	0x200277d8
 801af98:	08021388 	.word	0x08021388

0801af9c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	b08a      	sub	sp, #40	@ 0x28
 801afa0:	af02      	add	r7, sp, #8
 801afa2:	60f8      	str	r0, [r7, #12]
 801afa4:	60b9      	str	r1, [r7, #8]
 801afa6:	607a      	str	r2, [r7, #4]
 801afa8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801afaa:	2300      	movs	r3, #0
 801afac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d106      	bne.n	801afc2 <etharp_raw+0x26>
 801afb4:	4b3a      	ldr	r3, [pc, #232]	@ (801b0a0 <etharp_raw+0x104>)
 801afb6:	f240 4257 	movw	r2, #1111	@ 0x457
 801afba:	493a      	ldr	r1, [pc, #232]	@ (801b0a4 <etharp_raw+0x108>)
 801afbc:	483a      	ldr	r0, [pc, #232]	@ (801b0a8 <etharp_raw+0x10c>)
 801afbe:	f002 fe89 	bl	801dcd4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801afc2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801afc6:	211c      	movs	r1, #28
 801afc8:	200e      	movs	r0, #14
 801afca:	f7f8 fc93 	bl	80138f4 <pbuf_alloc>
 801afce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801afd0:	69bb      	ldr	r3, [r7, #24]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d102      	bne.n	801afdc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801afd6:	f04f 33ff 	mov.w	r3, #4294967295
 801afda:	e05d      	b.n	801b098 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801afdc:	69bb      	ldr	r3, [r7, #24]
 801afde:	895b      	ldrh	r3, [r3, #10]
 801afe0:	2b1b      	cmp	r3, #27
 801afe2:	d806      	bhi.n	801aff2 <etharp_raw+0x56>
 801afe4:	4b2e      	ldr	r3, [pc, #184]	@ (801b0a0 <etharp_raw+0x104>)
 801afe6:	f240 4262 	movw	r2, #1122	@ 0x462
 801afea:	4930      	ldr	r1, [pc, #192]	@ (801b0ac <etharp_raw+0x110>)
 801afec:	482e      	ldr	r0, [pc, #184]	@ (801b0a8 <etharp_raw+0x10c>)
 801afee:	f002 fe71 	bl	801dcd4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801aff2:	69bb      	ldr	r3, [r7, #24]
 801aff4:	685b      	ldr	r3, [r3, #4]
 801aff6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801aff8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801affa:	4618      	mov	r0, r3
 801affc:	f7f7 fb70 	bl	80126e0 <lwip_htons>
 801b000:	4603      	mov	r3, r0
 801b002:	461a      	mov	r2, r3
 801b004:	697b      	ldr	r3, [r7, #20]
 801b006:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b00e:	2b06      	cmp	r3, #6
 801b010:	d006      	beq.n	801b020 <etharp_raw+0x84>
 801b012:	4b23      	ldr	r3, [pc, #140]	@ (801b0a0 <etharp_raw+0x104>)
 801b014:	f240 4269 	movw	r2, #1129	@ 0x469
 801b018:	4925      	ldr	r1, [pc, #148]	@ (801b0b0 <etharp_raw+0x114>)
 801b01a:	4823      	ldr	r0, [pc, #140]	@ (801b0a8 <etharp_raw+0x10c>)
 801b01c:	f002 fe5a 	bl	801dcd4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b020:	697b      	ldr	r3, [r7, #20]
 801b022:	3308      	adds	r3, #8
 801b024:	2206      	movs	r2, #6
 801b026:	6839      	ldr	r1, [r7, #0]
 801b028:	4618      	mov	r0, r3
 801b02a:	f002 ff8c 	bl	801df46 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b02e:	697b      	ldr	r3, [r7, #20]
 801b030:	3312      	adds	r3, #18
 801b032:	2206      	movs	r2, #6
 801b034:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b036:	4618      	mov	r0, r3
 801b038:	f002 ff85 	bl	801df46 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b03c:	697b      	ldr	r3, [r7, #20]
 801b03e:	330e      	adds	r3, #14
 801b040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b042:	6812      	ldr	r2, [r2, #0]
 801b044:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b046:	697b      	ldr	r3, [r7, #20]
 801b048:	3318      	adds	r3, #24
 801b04a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b04c:	6812      	ldr	r2, [r2, #0]
 801b04e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b050:	697b      	ldr	r3, [r7, #20]
 801b052:	2200      	movs	r2, #0
 801b054:	701a      	strb	r2, [r3, #0]
 801b056:	2200      	movs	r2, #0
 801b058:	f042 0201 	orr.w	r2, r2, #1
 801b05c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b05e:	697b      	ldr	r3, [r7, #20]
 801b060:	2200      	movs	r2, #0
 801b062:	f042 0208 	orr.w	r2, r2, #8
 801b066:	709a      	strb	r2, [r3, #2]
 801b068:	2200      	movs	r2, #0
 801b06a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b06c:	697b      	ldr	r3, [r7, #20]
 801b06e:	2206      	movs	r2, #6
 801b070:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b072:	697b      	ldr	r3, [r7, #20]
 801b074:	2204      	movs	r2, #4
 801b076:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b078:	f640 0306 	movw	r3, #2054	@ 0x806
 801b07c:	9300      	str	r3, [sp, #0]
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	68ba      	ldr	r2, [r7, #8]
 801b082:	69b9      	ldr	r1, [r7, #24]
 801b084:	68f8      	ldr	r0, [r7, #12]
 801b086:	f001 fb7b 	bl	801c780 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b08a:	69b8      	ldr	r0, [r7, #24]
 801b08c:	f7f8 ff16 	bl	8013ebc <pbuf_free>
  p = NULL;
 801b090:	2300      	movs	r3, #0
 801b092:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b094:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b098:	4618      	mov	r0, r3
 801b09a:	3720      	adds	r7, #32
 801b09c:	46bd      	mov	sp, r7
 801b09e:	bd80      	pop	{r7, pc}
 801b0a0:	080211a4 	.word	0x080211a4
 801b0a4:	080212f4 	.word	0x080212f4
 801b0a8:	0802121c 	.word	0x0802121c
 801b0ac:	080213a4 	.word	0x080213a4
 801b0b0:	080213d8 	.word	0x080213d8

0801b0b4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b088      	sub	sp, #32
 801b0b8:	af04      	add	r7, sp, #16
 801b0ba:	60f8      	str	r0, [r7, #12]
 801b0bc:	60b9      	str	r1, [r7, #8]
 801b0be:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b0d0:	2201      	movs	r2, #1
 801b0d2:	9203      	str	r2, [sp, #12]
 801b0d4:	68ba      	ldr	r2, [r7, #8]
 801b0d6:	9202      	str	r2, [sp, #8]
 801b0d8:	4a06      	ldr	r2, [pc, #24]	@ (801b0f4 <etharp_request_dst+0x40>)
 801b0da:	9201      	str	r2, [sp, #4]
 801b0dc:	9300      	str	r3, [sp, #0]
 801b0de:	4603      	mov	r3, r0
 801b0e0:	687a      	ldr	r2, [r7, #4]
 801b0e2:	68f8      	ldr	r0, [r7, #12]
 801b0e4:	f7ff ff5a 	bl	801af9c <etharp_raw>
 801b0e8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	3710      	adds	r7, #16
 801b0ee:	46bd      	mov	sp, r7
 801b0f0:	bd80      	pop	{r7, pc}
 801b0f2:	bf00      	nop
 801b0f4:	08021ca0 	.word	0x08021ca0

0801b0f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b082      	sub	sp, #8
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
 801b100:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b102:	4a05      	ldr	r2, [pc, #20]	@ (801b118 <etharp_request+0x20>)
 801b104:	6839      	ldr	r1, [r7, #0]
 801b106:	6878      	ldr	r0, [r7, #4]
 801b108:	f7ff ffd4 	bl	801b0b4 <etharp_request_dst>
 801b10c:	4603      	mov	r3, r0
}
 801b10e:	4618      	mov	r0, r3
 801b110:	3708      	adds	r7, #8
 801b112:	46bd      	mov	sp, r7
 801b114:	bd80      	pop	{r7, pc}
 801b116:	bf00      	nop
 801b118:	08021c98 	.word	0x08021c98

0801b11c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b11c:	b580      	push	{r7, lr}
 801b11e:	b08e      	sub	sp, #56	@ 0x38
 801b120:	af04      	add	r7, sp, #16
 801b122:	6078      	str	r0, [r7, #4]
 801b124:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b126:	4b79      	ldr	r3, [pc, #484]	@ (801b30c <icmp_input+0x1f0>)
 801b128:	689b      	ldr	r3, [r3, #8]
 801b12a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b12e:	781b      	ldrb	r3, [r3, #0]
 801b130:	f003 030f 	and.w	r3, r3, #15
 801b134:	b2db      	uxtb	r3, r3
 801b136:	009b      	lsls	r3, r3, #2
 801b138:	b2db      	uxtb	r3, r3
 801b13a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b13c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b13e:	2b13      	cmp	r3, #19
 801b140:	f240 80cd 	bls.w	801b2de <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	895b      	ldrh	r3, [r3, #10]
 801b148:	2b03      	cmp	r3, #3
 801b14a:	f240 80ca 	bls.w	801b2e2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	685b      	ldr	r3, [r3, #4]
 801b152:	781b      	ldrb	r3, [r3, #0]
 801b154:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b158:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	f000 80b7 	beq.w	801b2d0 <icmp_input+0x1b4>
 801b162:	2b08      	cmp	r3, #8
 801b164:	f040 80b7 	bne.w	801b2d6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b168:	4b69      	ldr	r3, [pc, #420]	@ (801b310 <icmp_input+0x1f4>)
 801b16a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b16c:	4b67      	ldr	r3, [pc, #412]	@ (801b30c <icmp_input+0x1f0>)
 801b16e:	695b      	ldr	r3, [r3, #20]
 801b170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b174:	2be0      	cmp	r3, #224	@ 0xe0
 801b176:	f000 80bb 	beq.w	801b2f0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b17a:	4b64      	ldr	r3, [pc, #400]	@ (801b30c <icmp_input+0x1f0>)
 801b17c:	695b      	ldr	r3, [r3, #20]
 801b17e:	4a63      	ldr	r2, [pc, #396]	@ (801b30c <icmp_input+0x1f0>)
 801b180:	6812      	ldr	r2, [r2, #0]
 801b182:	4611      	mov	r1, r2
 801b184:	4618      	mov	r0, r3
 801b186:	f000 fbed 	bl	801b964 <ip4_addr_isbroadcast_u32>
 801b18a:	4603      	mov	r3, r0
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	f040 80b1 	bne.w	801b2f4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	891b      	ldrh	r3, [r3, #8]
 801b196:	2b07      	cmp	r3, #7
 801b198:	f240 80a5 	bls.w	801b2e6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b19c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b19e:	330e      	adds	r3, #14
 801b1a0:	4619      	mov	r1, r3
 801b1a2:	6878      	ldr	r0, [r7, #4]
 801b1a4:	f7f8 fdf4 	bl	8013d90 <pbuf_add_header>
 801b1a8:	4603      	mov	r3, r0
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	d04b      	beq.n	801b246 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	891a      	ldrh	r2, [r3, #8]
 801b1b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b1b4:	4413      	add	r3, r2
 801b1b6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	891b      	ldrh	r3, [r3, #8]
 801b1bc:	8b7a      	ldrh	r2, [r7, #26]
 801b1be:	429a      	cmp	r2, r3
 801b1c0:	f0c0 809a 	bcc.w	801b2f8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b1c4:	8b7b      	ldrh	r3, [r7, #26]
 801b1c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b1ca:	4619      	mov	r1, r3
 801b1cc:	200e      	movs	r0, #14
 801b1ce:	f7f8 fb91 	bl	80138f4 <pbuf_alloc>
 801b1d2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b1d4:	697b      	ldr	r3, [r7, #20]
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	f000 8090 	beq.w	801b2fc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b1dc:	697b      	ldr	r3, [r7, #20]
 801b1de:	895b      	ldrh	r3, [r3, #10]
 801b1e0:	461a      	mov	r2, r3
 801b1e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b1e4:	3308      	adds	r3, #8
 801b1e6:	429a      	cmp	r2, r3
 801b1e8:	d203      	bcs.n	801b1f2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b1ea:	6978      	ldr	r0, [r7, #20]
 801b1ec:	f7f8 fe66 	bl	8013ebc <pbuf_free>
          goto icmperr;
 801b1f0:	e085      	b.n	801b2fe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b1f2:	697b      	ldr	r3, [r7, #20]
 801b1f4:	685b      	ldr	r3, [r3, #4]
 801b1f6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b1f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f002 fea3 	bl	801df46 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b200:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b202:	4619      	mov	r1, r3
 801b204:	6978      	ldr	r0, [r7, #20]
 801b206:	f7f8 fdd3 	bl	8013db0 <pbuf_remove_header>
 801b20a:	4603      	mov	r3, r0
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d009      	beq.n	801b224 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b210:	4b40      	ldr	r3, [pc, #256]	@ (801b314 <icmp_input+0x1f8>)
 801b212:	22b6      	movs	r2, #182	@ 0xb6
 801b214:	4940      	ldr	r1, [pc, #256]	@ (801b318 <icmp_input+0x1fc>)
 801b216:	4841      	ldr	r0, [pc, #260]	@ (801b31c <icmp_input+0x200>)
 801b218:	f002 fd5c 	bl	801dcd4 <iprintf>
          pbuf_free(r);
 801b21c:	6978      	ldr	r0, [r7, #20]
 801b21e:	f7f8 fe4d 	bl	8013ebc <pbuf_free>
          goto icmperr;
 801b222:	e06c      	b.n	801b2fe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b224:	6879      	ldr	r1, [r7, #4]
 801b226:	6978      	ldr	r0, [r7, #20]
 801b228:	f7f8 ff7c 	bl	8014124 <pbuf_copy>
 801b22c:	4603      	mov	r3, r0
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d003      	beq.n	801b23a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b232:	6978      	ldr	r0, [r7, #20]
 801b234:	f7f8 fe42 	bl	8013ebc <pbuf_free>
          goto icmperr;
 801b238:	e061      	b.n	801b2fe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b23a:	6878      	ldr	r0, [r7, #4]
 801b23c:	f7f8 fe3e 	bl	8013ebc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b240:	697b      	ldr	r3, [r7, #20]
 801b242:	607b      	str	r3, [r7, #4]
 801b244:	e00f      	b.n	801b266 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b246:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b248:	330e      	adds	r3, #14
 801b24a:	4619      	mov	r1, r3
 801b24c:	6878      	ldr	r0, [r7, #4]
 801b24e:	f7f8 fdaf 	bl	8013db0 <pbuf_remove_header>
 801b252:	4603      	mov	r3, r0
 801b254:	2b00      	cmp	r3, #0
 801b256:	d006      	beq.n	801b266 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b258:	4b2e      	ldr	r3, [pc, #184]	@ (801b314 <icmp_input+0x1f8>)
 801b25a:	22c7      	movs	r2, #199	@ 0xc7
 801b25c:	4930      	ldr	r1, [pc, #192]	@ (801b320 <icmp_input+0x204>)
 801b25e:	482f      	ldr	r0, [pc, #188]	@ (801b31c <icmp_input+0x200>)
 801b260:	f002 fd38 	bl	801dcd4 <iprintf>
          goto icmperr;
 801b264:	e04b      	b.n	801b2fe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	685b      	ldr	r3, [r3, #4]
 801b26a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b26c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b26e:	4619      	mov	r1, r3
 801b270:	6878      	ldr	r0, [r7, #4]
 801b272:	f7f8 fd8d 	bl	8013d90 <pbuf_add_header>
 801b276:	4603      	mov	r3, r0
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d12b      	bne.n	801b2d4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	685b      	ldr	r3, [r3, #4]
 801b280:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b282:	69fb      	ldr	r3, [r7, #28]
 801b284:	681a      	ldr	r2, [r3, #0]
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b28a:	4b20      	ldr	r3, [pc, #128]	@ (801b30c <icmp_input+0x1f0>)
 801b28c:	691a      	ldr	r2, [r3, #16]
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b292:	693b      	ldr	r3, [r7, #16]
 801b294:	2200      	movs	r2, #0
 801b296:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b298:	693b      	ldr	r3, [r7, #16]
 801b29a:	2200      	movs	r2, #0
 801b29c:	709a      	strb	r2, [r3, #2]
 801b29e:	2200      	movs	r2, #0
 801b2a0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	22ff      	movs	r2, #255	@ 0xff
 801b2a6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b2a8:	68fb      	ldr	r3, [r7, #12]
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	729a      	strb	r2, [r3, #10]
 801b2ae:	2200      	movs	r2, #0
 801b2b0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b2b2:	683b      	ldr	r3, [r7, #0]
 801b2b4:	9302      	str	r3, [sp, #8]
 801b2b6:	2301      	movs	r3, #1
 801b2b8:	9301      	str	r3, [sp, #4]
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	9300      	str	r3, [sp, #0]
 801b2be:	23ff      	movs	r3, #255	@ 0xff
 801b2c0:	2200      	movs	r2, #0
 801b2c2:	69f9      	ldr	r1, [r7, #28]
 801b2c4:	6878      	ldr	r0, [r7, #4]
 801b2c6:	f000 fa75 	bl	801b7b4 <ip4_output_if>
 801b2ca:	4603      	mov	r3, r0
 801b2cc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b2ce:	e001      	b.n	801b2d4 <icmp_input+0x1b8>
      break;
 801b2d0:	bf00      	nop
 801b2d2:	e000      	b.n	801b2d6 <icmp_input+0x1ba>
      break;
 801b2d4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b2d6:	6878      	ldr	r0, [r7, #4]
 801b2d8:	f7f8 fdf0 	bl	8013ebc <pbuf_free>
  return;
 801b2dc:	e013      	b.n	801b306 <icmp_input+0x1ea>
    goto lenerr;
 801b2de:	bf00      	nop
 801b2e0:	e002      	b.n	801b2e8 <icmp_input+0x1cc>
    goto lenerr;
 801b2e2:	bf00      	nop
 801b2e4:	e000      	b.n	801b2e8 <icmp_input+0x1cc>
        goto lenerr;
 801b2e6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b2e8:	6878      	ldr	r0, [r7, #4]
 801b2ea:	f7f8 fde7 	bl	8013ebc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b2ee:	e00a      	b.n	801b306 <icmp_input+0x1ea>
        goto icmperr;
 801b2f0:	bf00      	nop
 801b2f2:	e004      	b.n	801b2fe <icmp_input+0x1e2>
        goto icmperr;
 801b2f4:	bf00      	nop
 801b2f6:	e002      	b.n	801b2fe <icmp_input+0x1e2>
          goto icmperr;
 801b2f8:	bf00      	nop
 801b2fa:	e000      	b.n	801b2fe <icmp_input+0x1e2>
          goto icmperr;
 801b2fc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b2fe:	6878      	ldr	r0, [r7, #4]
 801b300:	f7f8 fddc 	bl	8013ebc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b304:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b306:	3728      	adds	r7, #40	@ 0x28
 801b308:	46bd      	mov	sp, r7
 801b30a:	bd80      	pop	{r7, pc}
 801b30c:	20024588 	.word	0x20024588
 801b310:	2002459c 	.word	0x2002459c
 801b314:	0802141c 	.word	0x0802141c
 801b318:	08021454 	.word	0x08021454
 801b31c:	0802148c 	.word	0x0802148c
 801b320:	080214b4 	.word	0x080214b4

0801b324 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b324:	b580      	push	{r7, lr}
 801b326:	b082      	sub	sp, #8
 801b328:	af00      	add	r7, sp, #0
 801b32a:	6078      	str	r0, [r7, #4]
 801b32c:	460b      	mov	r3, r1
 801b32e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b330:	78fb      	ldrb	r3, [r7, #3]
 801b332:	461a      	mov	r2, r3
 801b334:	2103      	movs	r1, #3
 801b336:	6878      	ldr	r0, [r7, #4]
 801b338:	f000 f814 	bl	801b364 <icmp_send_response>
}
 801b33c:	bf00      	nop
 801b33e:	3708      	adds	r7, #8
 801b340:	46bd      	mov	sp, r7
 801b342:	bd80      	pop	{r7, pc}

0801b344 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b344:	b580      	push	{r7, lr}
 801b346:	b082      	sub	sp, #8
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
 801b34c:	460b      	mov	r3, r1
 801b34e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b350:	78fb      	ldrb	r3, [r7, #3]
 801b352:	461a      	mov	r2, r3
 801b354:	210b      	movs	r1, #11
 801b356:	6878      	ldr	r0, [r7, #4]
 801b358:	f000 f804 	bl	801b364 <icmp_send_response>
}
 801b35c:	bf00      	nop
 801b35e:	3708      	adds	r7, #8
 801b360:	46bd      	mov	sp, r7
 801b362:	bd80      	pop	{r7, pc}

0801b364 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b364:	b580      	push	{r7, lr}
 801b366:	b08c      	sub	sp, #48	@ 0x30
 801b368:	af04      	add	r7, sp, #16
 801b36a:	6078      	str	r0, [r7, #4]
 801b36c:	460b      	mov	r3, r1
 801b36e:	70fb      	strb	r3, [r7, #3]
 801b370:	4613      	mov	r3, r2
 801b372:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b374:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b378:	2124      	movs	r1, #36	@ 0x24
 801b37a:	2022      	movs	r0, #34	@ 0x22
 801b37c:	f7f8 faba 	bl	80138f4 <pbuf_alloc>
 801b380:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b382:	69fb      	ldr	r3, [r7, #28]
 801b384:	2b00      	cmp	r3, #0
 801b386:	d04c      	beq.n	801b422 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b388:	69fb      	ldr	r3, [r7, #28]
 801b38a:	895b      	ldrh	r3, [r3, #10]
 801b38c:	2b23      	cmp	r3, #35	@ 0x23
 801b38e:	d806      	bhi.n	801b39e <icmp_send_response+0x3a>
 801b390:	4b26      	ldr	r3, [pc, #152]	@ (801b42c <icmp_send_response+0xc8>)
 801b392:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b396:	4926      	ldr	r1, [pc, #152]	@ (801b430 <icmp_send_response+0xcc>)
 801b398:	4826      	ldr	r0, [pc, #152]	@ (801b434 <icmp_send_response+0xd0>)
 801b39a:	f002 fc9b 	bl	801dcd4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	685b      	ldr	r3, [r3, #4]
 801b3a2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b3a4:	69fb      	ldr	r3, [r7, #28]
 801b3a6:	685b      	ldr	r3, [r3, #4]
 801b3a8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b3aa:	697b      	ldr	r3, [r7, #20]
 801b3ac:	78fa      	ldrb	r2, [r7, #3]
 801b3ae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b3b0:	697b      	ldr	r3, [r7, #20]
 801b3b2:	78ba      	ldrb	r2, [r7, #2]
 801b3b4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b3b6:	697b      	ldr	r3, [r7, #20]
 801b3b8:	2200      	movs	r2, #0
 801b3ba:	711a      	strb	r2, [r3, #4]
 801b3bc:	2200      	movs	r2, #0
 801b3be:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b3c0:	697b      	ldr	r3, [r7, #20]
 801b3c2:	2200      	movs	r2, #0
 801b3c4:	719a      	strb	r2, [r3, #6]
 801b3c6:	2200      	movs	r2, #0
 801b3c8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b3ca:	69fb      	ldr	r3, [r7, #28]
 801b3cc:	685b      	ldr	r3, [r3, #4]
 801b3ce:	f103 0008 	add.w	r0, r3, #8
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	685b      	ldr	r3, [r3, #4]
 801b3d6:	221c      	movs	r2, #28
 801b3d8:	4619      	mov	r1, r3
 801b3da:	f002 fdb4 	bl	801df46 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b3de:	69bb      	ldr	r3, [r7, #24]
 801b3e0:	68db      	ldr	r3, [r3, #12]
 801b3e2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b3e4:	f107 030c 	add.w	r3, r7, #12
 801b3e8:	4618      	mov	r0, r3
 801b3ea:	f000 f825 	bl	801b438 <ip4_route>
 801b3ee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b3f0:	693b      	ldr	r3, [r7, #16]
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	d011      	beq.n	801b41a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b3f6:	697b      	ldr	r3, [r7, #20]
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	709a      	strb	r2, [r3, #2]
 801b3fc:	2200      	movs	r2, #0
 801b3fe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b400:	f107 020c 	add.w	r2, r7, #12
 801b404:	693b      	ldr	r3, [r7, #16]
 801b406:	9302      	str	r3, [sp, #8]
 801b408:	2301      	movs	r3, #1
 801b40a:	9301      	str	r3, [sp, #4]
 801b40c:	2300      	movs	r3, #0
 801b40e:	9300      	str	r3, [sp, #0]
 801b410:	23ff      	movs	r3, #255	@ 0xff
 801b412:	2100      	movs	r1, #0
 801b414:	69f8      	ldr	r0, [r7, #28]
 801b416:	f000 f9cd 	bl	801b7b4 <ip4_output_if>
  }
  pbuf_free(q);
 801b41a:	69f8      	ldr	r0, [r7, #28]
 801b41c:	f7f8 fd4e 	bl	8013ebc <pbuf_free>
 801b420:	e000      	b.n	801b424 <icmp_send_response+0xc0>
    return;
 801b422:	bf00      	nop
}
 801b424:	3720      	adds	r7, #32
 801b426:	46bd      	mov	sp, r7
 801b428:	bd80      	pop	{r7, pc}
 801b42a:	bf00      	nop
 801b42c:	0802141c 	.word	0x0802141c
 801b430:	080214e8 	.word	0x080214e8
 801b434:	0802148c 	.word	0x0802148c

0801b438 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b438:	b480      	push	{r7}
 801b43a:	b085      	sub	sp, #20
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b440:	4b33      	ldr	r3, [pc, #204]	@ (801b510 <ip4_route+0xd8>)
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	60fb      	str	r3, [r7, #12]
 801b446:	e036      	b.n	801b4b6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b44e:	f003 0301 	and.w	r3, r3, #1
 801b452:	b2db      	uxtb	r3, r3
 801b454:	2b00      	cmp	r3, #0
 801b456:	d02b      	beq.n	801b4b0 <ip4_route+0x78>
 801b458:	68fb      	ldr	r3, [r7, #12]
 801b45a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b45e:	089b      	lsrs	r3, r3, #2
 801b460:	f003 0301 	and.w	r3, r3, #1
 801b464:	b2db      	uxtb	r3, r3
 801b466:	2b00      	cmp	r3, #0
 801b468:	d022      	beq.n	801b4b0 <ip4_route+0x78>
 801b46a:	68fb      	ldr	r3, [r7, #12]
 801b46c:	3304      	adds	r3, #4
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	2b00      	cmp	r3, #0
 801b472:	d01d      	beq.n	801b4b0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	681a      	ldr	r2, [r3, #0]
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	3304      	adds	r3, #4
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	405a      	eors	r2, r3
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	3308      	adds	r3, #8
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	4013      	ands	r3, r2
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d101      	bne.n	801b490 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	e038      	b.n	801b502 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b490:	68fb      	ldr	r3, [r7, #12]
 801b492:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b496:	f003 0302 	and.w	r3, r3, #2
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d108      	bne.n	801b4b0 <ip4_route+0x78>
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	681a      	ldr	r2, [r3, #0]
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	330c      	adds	r3, #12
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	429a      	cmp	r2, r3
 801b4aa:	d101      	bne.n	801b4b0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	e028      	b.n	801b502 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b4b0:	68fb      	ldr	r3, [r7, #12]
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	60fb      	str	r3, [r7, #12]
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d1c5      	bne.n	801b448 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b4bc:	4b15      	ldr	r3, [pc, #84]	@ (801b514 <ip4_route+0xdc>)
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d01a      	beq.n	801b4fa <ip4_route+0xc2>
 801b4c4:	4b13      	ldr	r3, [pc, #76]	@ (801b514 <ip4_route+0xdc>)
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b4cc:	f003 0301 	and.w	r3, r3, #1
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d012      	beq.n	801b4fa <ip4_route+0xc2>
 801b4d4:	4b0f      	ldr	r3, [pc, #60]	@ (801b514 <ip4_route+0xdc>)
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b4dc:	f003 0304 	and.w	r3, r3, #4
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d00a      	beq.n	801b4fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b4e4:	4b0b      	ldr	r3, [pc, #44]	@ (801b514 <ip4_route+0xdc>)
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	3304      	adds	r3, #4
 801b4ea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d004      	beq.n	801b4fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	b2db      	uxtb	r3, r3
 801b4f6:	2b7f      	cmp	r3, #127	@ 0x7f
 801b4f8:	d101      	bne.n	801b4fe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	e001      	b.n	801b502 <ip4_route+0xca>
  }

  return netif_default;
 801b4fe:	4b05      	ldr	r3, [pc, #20]	@ (801b514 <ip4_route+0xdc>)
 801b500:	681b      	ldr	r3, [r3, #0]
}
 801b502:	4618      	mov	r0, r3
 801b504:	3714      	adds	r7, #20
 801b506:	46bd      	mov	sp, r7
 801b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b50c:	4770      	bx	lr
 801b50e:	bf00      	nop
 801b510:	2002767c 	.word	0x2002767c
 801b514:	20027680 	.word	0x20027680

0801b518 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b518:	b580      	push	{r7, lr}
 801b51a:	b082      	sub	sp, #8
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b526:	f003 0301 	and.w	r3, r3, #1
 801b52a:	b2db      	uxtb	r3, r3
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d016      	beq.n	801b55e <ip4_input_accept+0x46>
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	3304      	adds	r3, #4
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d011      	beq.n	801b55e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b53a:	4b0b      	ldr	r3, [pc, #44]	@ (801b568 <ip4_input_accept+0x50>)
 801b53c:	695a      	ldr	r2, [r3, #20]
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	3304      	adds	r3, #4
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	429a      	cmp	r2, r3
 801b546:	d008      	beq.n	801b55a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b548:	4b07      	ldr	r3, [pc, #28]	@ (801b568 <ip4_input_accept+0x50>)
 801b54a:	695b      	ldr	r3, [r3, #20]
 801b54c:	6879      	ldr	r1, [r7, #4]
 801b54e:	4618      	mov	r0, r3
 801b550:	f000 fa08 	bl	801b964 <ip4_addr_isbroadcast_u32>
 801b554:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b556:	2b00      	cmp	r3, #0
 801b558:	d001      	beq.n	801b55e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b55a:	2301      	movs	r3, #1
 801b55c:	e000      	b.n	801b560 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b55e:	2300      	movs	r3, #0
}
 801b560:	4618      	mov	r0, r3
 801b562:	3708      	adds	r7, #8
 801b564:	46bd      	mov	sp, r7
 801b566:	bd80      	pop	{r7, pc}
 801b568:	20024588 	.word	0x20024588

0801b56c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b086      	sub	sp, #24
 801b570:	af00      	add	r7, sp, #0
 801b572:	6078      	str	r0, [r7, #4]
 801b574:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	685b      	ldr	r3, [r3, #4]
 801b57a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b57c:	697b      	ldr	r3, [r7, #20]
 801b57e:	781b      	ldrb	r3, [r3, #0]
 801b580:	091b      	lsrs	r3, r3, #4
 801b582:	b2db      	uxtb	r3, r3
 801b584:	2b04      	cmp	r3, #4
 801b586:	d004      	beq.n	801b592 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b588:	6878      	ldr	r0, [r7, #4]
 801b58a:	f7f8 fc97 	bl	8013ebc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b58e:	2300      	movs	r3, #0
 801b590:	e107      	b.n	801b7a2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b592:	697b      	ldr	r3, [r7, #20]
 801b594:	781b      	ldrb	r3, [r3, #0]
 801b596:	f003 030f 	and.w	r3, r3, #15
 801b59a:	b2db      	uxtb	r3, r3
 801b59c:	009b      	lsls	r3, r3, #2
 801b59e:	b2db      	uxtb	r3, r3
 801b5a0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b5a2:	697b      	ldr	r3, [r7, #20]
 801b5a4:	885b      	ldrh	r3, [r3, #2]
 801b5a6:	b29b      	uxth	r3, r3
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	f7f7 f899 	bl	80126e0 <lwip_htons>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	891b      	ldrh	r3, [r3, #8]
 801b5b6:	89ba      	ldrh	r2, [r7, #12]
 801b5b8:	429a      	cmp	r2, r3
 801b5ba:	d204      	bcs.n	801b5c6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b5bc:	89bb      	ldrh	r3, [r7, #12]
 801b5be:	4619      	mov	r1, r3
 801b5c0:	6878      	ldr	r0, [r7, #4]
 801b5c2:	f7f8 faf5 	bl	8013bb0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	895b      	ldrh	r3, [r3, #10]
 801b5ca:	89fa      	ldrh	r2, [r7, #14]
 801b5cc:	429a      	cmp	r2, r3
 801b5ce:	d807      	bhi.n	801b5e0 <ip4_input+0x74>
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	891b      	ldrh	r3, [r3, #8]
 801b5d4:	89ba      	ldrh	r2, [r7, #12]
 801b5d6:	429a      	cmp	r2, r3
 801b5d8:	d802      	bhi.n	801b5e0 <ip4_input+0x74>
 801b5da:	89fb      	ldrh	r3, [r7, #14]
 801b5dc:	2b13      	cmp	r3, #19
 801b5de:	d804      	bhi.n	801b5ea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b5e0:	6878      	ldr	r0, [r7, #4]
 801b5e2:	f7f8 fc6b 	bl	8013ebc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	e0db      	b.n	801b7a2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b5ea:	697b      	ldr	r3, [r7, #20]
 801b5ec:	691b      	ldr	r3, [r3, #16]
 801b5ee:	4a6f      	ldr	r2, [pc, #444]	@ (801b7ac <ip4_input+0x240>)
 801b5f0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b5f2:	697b      	ldr	r3, [r7, #20]
 801b5f4:	68db      	ldr	r3, [r3, #12]
 801b5f6:	4a6d      	ldr	r2, [pc, #436]	@ (801b7ac <ip4_input+0x240>)
 801b5f8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b5fa:	4b6c      	ldr	r3, [pc, #432]	@ (801b7ac <ip4_input+0x240>)
 801b5fc:	695b      	ldr	r3, [r3, #20]
 801b5fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b602:	2be0      	cmp	r3, #224	@ 0xe0
 801b604:	d112      	bne.n	801b62c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b606:	683b      	ldr	r3, [r7, #0]
 801b608:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b60c:	f003 0301 	and.w	r3, r3, #1
 801b610:	b2db      	uxtb	r3, r3
 801b612:	2b00      	cmp	r3, #0
 801b614:	d007      	beq.n	801b626 <ip4_input+0xba>
 801b616:	683b      	ldr	r3, [r7, #0]
 801b618:	3304      	adds	r3, #4
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d002      	beq.n	801b626 <ip4_input+0xba>
      netif = inp;
 801b620:	683b      	ldr	r3, [r7, #0]
 801b622:	613b      	str	r3, [r7, #16]
 801b624:	e02a      	b.n	801b67c <ip4_input+0x110>
    } else {
      netif = NULL;
 801b626:	2300      	movs	r3, #0
 801b628:	613b      	str	r3, [r7, #16]
 801b62a:	e027      	b.n	801b67c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b62c:	6838      	ldr	r0, [r7, #0]
 801b62e:	f7ff ff73 	bl	801b518 <ip4_input_accept>
 801b632:	4603      	mov	r3, r0
 801b634:	2b00      	cmp	r3, #0
 801b636:	d002      	beq.n	801b63e <ip4_input+0xd2>
      netif = inp;
 801b638:	683b      	ldr	r3, [r7, #0]
 801b63a:	613b      	str	r3, [r7, #16]
 801b63c:	e01e      	b.n	801b67c <ip4_input+0x110>
    } else {
      netif = NULL;
 801b63e:	2300      	movs	r3, #0
 801b640:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b642:	4b5a      	ldr	r3, [pc, #360]	@ (801b7ac <ip4_input+0x240>)
 801b644:	695b      	ldr	r3, [r3, #20]
 801b646:	b2db      	uxtb	r3, r3
 801b648:	2b7f      	cmp	r3, #127	@ 0x7f
 801b64a:	d017      	beq.n	801b67c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b64c:	4b58      	ldr	r3, [pc, #352]	@ (801b7b0 <ip4_input+0x244>)
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	613b      	str	r3, [r7, #16]
 801b652:	e00e      	b.n	801b672 <ip4_input+0x106>
          if (netif == inp) {
 801b654:	693a      	ldr	r2, [r7, #16]
 801b656:	683b      	ldr	r3, [r7, #0]
 801b658:	429a      	cmp	r2, r3
 801b65a:	d006      	beq.n	801b66a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b65c:	6938      	ldr	r0, [r7, #16]
 801b65e:	f7ff ff5b 	bl	801b518 <ip4_input_accept>
 801b662:	4603      	mov	r3, r0
 801b664:	2b00      	cmp	r3, #0
 801b666:	d108      	bne.n	801b67a <ip4_input+0x10e>
 801b668:	e000      	b.n	801b66c <ip4_input+0x100>
            continue;
 801b66a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b66c:	693b      	ldr	r3, [r7, #16]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	613b      	str	r3, [r7, #16]
 801b672:	693b      	ldr	r3, [r7, #16]
 801b674:	2b00      	cmp	r3, #0
 801b676:	d1ed      	bne.n	801b654 <ip4_input+0xe8>
 801b678:	e000      	b.n	801b67c <ip4_input+0x110>
            break;
 801b67a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b67c:	4b4b      	ldr	r3, [pc, #300]	@ (801b7ac <ip4_input+0x240>)
 801b67e:	691b      	ldr	r3, [r3, #16]
 801b680:	6839      	ldr	r1, [r7, #0]
 801b682:	4618      	mov	r0, r3
 801b684:	f000 f96e 	bl	801b964 <ip4_addr_isbroadcast_u32>
 801b688:	4603      	mov	r3, r0
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d105      	bne.n	801b69a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b68e:	4b47      	ldr	r3, [pc, #284]	@ (801b7ac <ip4_input+0x240>)
 801b690:	691b      	ldr	r3, [r3, #16]
 801b692:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b696:	2be0      	cmp	r3, #224	@ 0xe0
 801b698:	d104      	bne.n	801b6a4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b69a:	6878      	ldr	r0, [r7, #4]
 801b69c:	f7f8 fc0e 	bl	8013ebc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b6a0:	2300      	movs	r3, #0
 801b6a2:	e07e      	b.n	801b7a2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b6a4:	693b      	ldr	r3, [r7, #16]
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d104      	bne.n	801b6b4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b6aa:	6878      	ldr	r0, [r7, #4]
 801b6ac:	f7f8 fc06 	bl	8013ebc <pbuf_free>
    return ERR_OK;
 801b6b0:	2300      	movs	r3, #0
 801b6b2:	e076      	b.n	801b7a2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b6b4:	697b      	ldr	r3, [r7, #20]
 801b6b6:	88db      	ldrh	r3, [r3, #6]
 801b6b8:	b29b      	uxth	r3, r3
 801b6ba:	461a      	mov	r2, r3
 801b6bc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801b6c0:	4013      	ands	r3, r2
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d00b      	beq.n	801b6de <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b6c6:	6878      	ldr	r0, [r7, #4]
 801b6c8:	f000 fc92 	bl	801bff0 <ip4_reass>
 801b6cc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d101      	bne.n	801b6d8 <ip4_input+0x16c>
      return ERR_OK;
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	e064      	b.n	801b7a2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	685b      	ldr	r3, [r3, #4]
 801b6dc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b6de:	4a33      	ldr	r2, [pc, #204]	@ (801b7ac <ip4_input+0x240>)
 801b6e0:	693b      	ldr	r3, [r7, #16]
 801b6e2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b6e4:	4a31      	ldr	r2, [pc, #196]	@ (801b7ac <ip4_input+0x240>)
 801b6e6:	683b      	ldr	r3, [r7, #0]
 801b6e8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b6ea:	4a30      	ldr	r2, [pc, #192]	@ (801b7ac <ip4_input+0x240>)
 801b6ec:	697b      	ldr	r3, [r7, #20]
 801b6ee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b6f0:	697b      	ldr	r3, [r7, #20]
 801b6f2:	781b      	ldrb	r3, [r3, #0]
 801b6f4:	f003 030f 	and.w	r3, r3, #15
 801b6f8:	b2db      	uxtb	r3, r3
 801b6fa:	009b      	lsls	r3, r3, #2
 801b6fc:	b2db      	uxtb	r3, r3
 801b6fe:	461a      	mov	r2, r3
 801b700:	4b2a      	ldr	r3, [pc, #168]	@ (801b7ac <ip4_input+0x240>)
 801b702:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b704:	89fb      	ldrh	r3, [r7, #14]
 801b706:	4619      	mov	r1, r3
 801b708:	6878      	ldr	r0, [r7, #4]
 801b70a:	f7f8 fb51 	bl	8013db0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b70e:	697b      	ldr	r3, [r7, #20]
 801b710:	7a5b      	ldrb	r3, [r3, #9]
 801b712:	2b11      	cmp	r3, #17
 801b714:	d006      	beq.n	801b724 <ip4_input+0x1b8>
 801b716:	2b11      	cmp	r3, #17
 801b718:	dc13      	bgt.n	801b742 <ip4_input+0x1d6>
 801b71a:	2b01      	cmp	r3, #1
 801b71c:	d00c      	beq.n	801b738 <ip4_input+0x1cc>
 801b71e:	2b06      	cmp	r3, #6
 801b720:	d005      	beq.n	801b72e <ip4_input+0x1c2>
 801b722:	e00e      	b.n	801b742 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b724:	6839      	ldr	r1, [r7, #0]
 801b726:	6878      	ldr	r0, [r7, #4]
 801b728:	f7fe f9f2 	bl	8019b10 <udp_input>
        break;
 801b72c:	e026      	b.n	801b77c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b72e:	6839      	ldr	r1, [r7, #0]
 801b730:	6878      	ldr	r0, [r7, #4]
 801b732:	f7fa fa09 	bl	8015b48 <tcp_input>
        break;
 801b736:	e021      	b.n	801b77c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b738:	6839      	ldr	r1, [r7, #0]
 801b73a:	6878      	ldr	r0, [r7, #4]
 801b73c:	f7ff fcee 	bl	801b11c <icmp_input>
        break;
 801b740:	e01c      	b.n	801b77c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b742:	4b1a      	ldr	r3, [pc, #104]	@ (801b7ac <ip4_input+0x240>)
 801b744:	695b      	ldr	r3, [r3, #20]
 801b746:	6939      	ldr	r1, [r7, #16]
 801b748:	4618      	mov	r0, r3
 801b74a:	f000 f90b 	bl	801b964 <ip4_addr_isbroadcast_u32>
 801b74e:	4603      	mov	r3, r0
 801b750:	2b00      	cmp	r3, #0
 801b752:	d10f      	bne.n	801b774 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b754:	4b15      	ldr	r3, [pc, #84]	@ (801b7ac <ip4_input+0x240>)
 801b756:	695b      	ldr	r3, [r3, #20]
 801b758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b75c:	2be0      	cmp	r3, #224	@ 0xe0
 801b75e:	d009      	beq.n	801b774 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b760:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b764:	4619      	mov	r1, r3
 801b766:	6878      	ldr	r0, [r7, #4]
 801b768:	f7f8 fb95 	bl	8013e96 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b76c:	2102      	movs	r1, #2
 801b76e:	6878      	ldr	r0, [r7, #4]
 801b770:	f7ff fdd8 	bl	801b324 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b774:	6878      	ldr	r0, [r7, #4]
 801b776:	f7f8 fba1 	bl	8013ebc <pbuf_free>
        break;
 801b77a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b77c:	4b0b      	ldr	r3, [pc, #44]	@ (801b7ac <ip4_input+0x240>)
 801b77e:	2200      	movs	r2, #0
 801b780:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b782:	4b0a      	ldr	r3, [pc, #40]	@ (801b7ac <ip4_input+0x240>)
 801b784:	2200      	movs	r2, #0
 801b786:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b788:	4b08      	ldr	r3, [pc, #32]	@ (801b7ac <ip4_input+0x240>)
 801b78a:	2200      	movs	r2, #0
 801b78c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b78e:	4b07      	ldr	r3, [pc, #28]	@ (801b7ac <ip4_input+0x240>)
 801b790:	2200      	movs	r2, #0
 801b792:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b794:	4b05      	ldr	r3, [pc, #20]	@ (801b7ac <ip4_input+0x240>)
 801b796:	2200      	movs	r2, #0
 801b798:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b79a:	4b04      	ldr	r3, [pc, #16]	@ (801b7ac <ip4_input+0x240>)
 801b79c:	2200      	movs	r2, #0
 801b79e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b7a0:	2300      	movs	r3, #0
}
 801b7a2:	4618      	mov	r0, r3
 801b7a4:	3718      	adds	r7, #24
 801b7a6:	46bd      	mov	sp, r7
 801b7a8:	bd80      	pop	{r7, pc}
 801b7aa:	bf00      	nop
 801b7ac:	20024588 	.word	0x20024588
 801b7b0:	2002767c 	.word	0x2002767c

0801b7b4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b08a      	sub	sp, #40	@ 0x28
 801b7b8:	af04      	add	r7, sp, #16
 801b7ba:	60f8      	str	r0, [r7, #12]
 801b7bc:	60b9      	str	r1, [r7, #8]
 801b7be:	607a      	str	r2, [r7, #4]
 801b7c0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b7c2:	68bb      	ldr	r3, [r7, #8]
 801b7c4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d009      	beq.n	801b7e0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b7cc:	68bb      	ldr	r3, [r7, #8]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d003      	beq.n	801b7da <ip4_output_if+0x26>
 801b7d2:	68bb      	ldr	r3, [r7, #8]
 801b7d4:	681b      	ldr	r3, [r3, #0]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d102      	bne.n	801b7e0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7dc:	3304      	adds	r3, #4
 801b7de:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b7e0:	78fa      	ldrb	r2, [r7, #3]
 801b7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7e4:	9302      	str	r3, [sp, #8]
 801b7e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b7ea:	9301      	str	r3, [sp, #4]
 801b7ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b7f0:	9300      	str	r3, [sp, #0]
 801b7f2:	4613      	mov	r3, r2
 801b7f4:	687a      	ldr	r2, [r7, #4]
 801b7f6:	6979      	ldr	r1, [r7, #20]
 801b7f8:	68f8      	ldr	r0, [r7, #12]
 801b7fa:	f000 f805 	bl	801b808 <ip4_output_if_src>
 801b7fe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b800:	4618      	mov	r0, r3
 801b802:	3718      	adds	r7, #24
 801b804:	46bd      	mov	sp, r7
 801b806:	bd80      	pop	{r7, pc}

0801b808 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b808:	b580      	push	{r7, lr}
 801b80a:	b088      	sub	sp, #32
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	60f8      	str	r0, [r7, #12]
 801b810:	60b9      	str	r1, [r7, #8]
 801b812:	607a      	str	r2, [r7, #4]
 801b814:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	7b9b      	ldrb	r3, [r3, #14]
 801b81a:	2b01      	cmp	r3, #1
 801b81c:	d006      	beq.n	801b82c <ip4_output_if_src+0x24>
 801b81e:	4b4b      	ldr	r3, [pc, #300]	@ (801b94c <ip4_output_if_src+0x144>)
 801b820:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b824:	494a      	ldr	r1, [pc, #296]	@ (801b950 <ip4_output_if_src+0x148>)
 801b826:	484b      	ldr	r0, [pc, #300]	@ (801b954 <ip4_output_if_src+0x14c>)
 801b828:	f002 fa54 	bl	801dcd4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d060      	beq.n	801b8f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b832:	2314      	movs	r3, #20
 801b834:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b836:	2114      	movs	r1, #20
 801b838:	68f8      	ldr	r0, [r7, #12]
 801b83a:	f7f8 faa9 	bl	8013d90 <pbuf_add_header>
 801b83e:	4603      	mov	r3, r0
 801b840:	2b00      	cmp	r3, #0
 801b842:	d002      	beq.n	801b84a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b844:	f06f 0301 	mvn.w	r3, #1
 801b848:	e07c      	b.n	801b944 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b84a:	68fb      	ldr	r3, [r7, #12]
 801b84c:	685b      	ldr	r3, [r3, #4]
 801b84e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	895b      	ldrh	r3, [r3, #10]
 801b854:	2b13      	cmp	r3, #19
 801b856:	d806      	bhi.n	801b866 <ip4_output_if_src+0x5e>
 801b858:	4b3c      	ldr	r3, [pc, #240]	@ (801b94c <ip4_output_if_src+0x144>)
 801b85a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b85e:	493e      	ldr	r1, [pc, #248]	@ (801b958 <ip4_output_if_src+0x150>)
 801b860:	483c      	ldr	r0, [pc, #240]	@ (801b954 <ip4_output_if_src+0x14c>)
 801b862:	f002 fa37 	bl	801dcd4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b866:	69fb      	ldr	r3, [r7, #28]
 801b868:	78fa      	ldrb	r2, [r7, #3]
 801b86a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b86c:	69fb      	ldr	r3, [r7, #28]
 801b86e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b872:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	681a      	ldr	r2, [r3, #0]
 801b878:	69fb      	ldr	r3, [r7, #28]
 801b87a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b87c:	8b7b      	ldrh	r3, [r7, #26]
 801b87e:	089b      	lsrs	r3, r3, #2
 801b880:	b29b      	uxth	r3, r3
 801b882:	b2db      	uxtb	r3, r3
 801b884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b888:	b2da      	uxtb	r2, r3
 801b88a:	69fb      	ldr	r3, [r7, #28]
 801b88c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b88e:	69fb      	ldr	r3, [r7, #28]
 801b890:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b894:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	891b      	ldrh	r3, [r3, #8]
 801b89a:	4618      	mov	r0, r3
 801b89c:	f7f6 ff20 	bl	80126e0 <lwip_htons>
 801b8a0:	4603      	mov	r3, r0
 801b8a2:	461a      	mov	r2, r3
 801b8a4:	69fb      	ldr	r3, [r7, #28]
 801b8a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b8a8:	69fb      	ldr	r3, [r7, #28]
 801b8aa:	2200      	movs	r2, #0
 801b8ac:	719a      	strb	r2, [r3, #6]
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b8b2:	4b2a      	ldr	r3, [pc, #168]	@ (801b95c <ip4_output_if_src+0x154>)
 801b8b4:	881b      	ldrh	r3, [r3, #0]
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	f7f6 ff12 	bl	80126e0 <lwip_htons>
 801b8bc:	4603      	mov	r3, r0
 801b8be:	461a      	mov	r2, r3
 801b8c0:	69fb      	ldr	r3, [r7, #28]
 801b8c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b8c4:	4b25      	ldr	r3, [pc, #148]	@ (801b95c <ip4_output_if_src+0x154>)
 801b8c6:	881b      	ldrh	r3, [r3, #0]
 801b8c8:	3301      	adds	r3, #1
 801b8ca:	b29a      	uxth	r2, r3
 801b8cc:	4b23      	ldr	r3, [pc, #140]	@ (801b95c <ip4_output_if_src+0x154>)
 801b8ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b8d0:	68bb      	ldr	r3, [r7, #8]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d104      	bne.n	801b8e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b8d6:	4b22      	ldr	r3, [pc, #136]	@ (801b960 <ip4_output_if_src+0x158>)
 801b8d8:	681a      	ldr	r2, [r3, #0]
 801b8da:	69fb      	ldr	r3, [r7, #28]
 801b8dc:	60da      	str	r2, [r3, #12]
 801b8de:	e003      	b.n	801b8e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b8e0:	68bb      	ldr	r3, [r7, #8]
 801b8e2:	681a      	ldr	r2, [r3, #0]
 801b8e4:	69fb      	ldr	r3, [r7, #28]
 801b8e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b8e8:	69fb      	ldr	r3, [r7, #28]
 801b8ea:	2200      	movs	r2, #0
 801b8ec:	729a      	strb	r2, [r3, #10]
 801b8ee:	2200      	movs	r2, #0
 801b8f0:	72da      	strb	r2, [r3, #11]
 801b8f2:	e00f      	b.n	801b914 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	895b      	ldrh	r3, [r3, #10]
 801b8f8:	2b13      	cmp	r3, #19
 801b8fa:	d802      	bhi.n	801b902 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b8fc:	f06f 0301 	mvn.w	r3, #1
 801b900:	e020      	b.n	801b944 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	685b      	ldr	r3, [r3, #4]
 801b906:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b908:	69fb      	ldr	r3, [r7, #28]
 801b90a:	691b      	ldr	r3, [r3, #16]
 801b90c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b90e:	f107 0314 	add.w	r3, r7, #20
 801b912:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b916:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d00c      	beq.n	801b936 <ip4_output_if_src+0x12e>
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	891a      	ldrh	r2, [r3, #8]
 801b920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b922:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b924:	429a      	cmp	r2, r3
 801b926:	d906      	bls.n	801b936 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b928:	687a      	ldr	r2, [r7, #4]
 801b92a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b92c:	68f8      	ldr	r0, [r7, #12]
 801b92e:	f000 fd53 	bl	801c3d8 <ip4_frag>
 801b932:	4603      	mov	r3, r0
 801b934:	e006      	b.n	801b944 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b938:	695b      	ldr	r3, [r3, #20]
 801b93a:	687a      	ldr	r2, [r7, #4]
 801b93c:	68f9      	ldr	r1, [r7, #12]
 801b93e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b940:	4798      	blx	r3
 801b942:	4603      	mov	r3, r0
}
 801b944:	4618      	mov	r0, r3
 801b946:	3720      	adds	r7, #32
 801b948:	46bd      	mov	sp, r7
 801b94a:	bd80      	pop	{r7, pc}
 801b94c:	08021514 	.word	0x08021514
 801b950:	08021548 	.word	0x08021548
 801b954:	08021554 	.word	0x08021554
 801b958:	0802157c 	.word	0x0802157c
 801b95c:	200277da 	.word	0x200277da
 801b960:	08021c94 	.word	0x08021c94

0801b964 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b964:	b480      	push	{r7}
 801b966:	b085      	sub	sp, #20
 801b968:	af00      	add	r7, sp, #0
 801b96a:	6078      	str	r0, [r7, #4]
 801b96c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b978:	d002      	beq.n	801b980 <ip4_addr_isbroadcast_u32+0x1c>
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d101      	bne.n	801b984 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b980:	2301      	movs	r3, #1
 801b982:	e02a      	b.n	801b9da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b984:	683b      	ldr	r3, [r7, #0]
 801b986:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b98a:	f003 0302 	and.w	r3, r3, #2
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d101      	bne.n	801b996 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b992:	2300      	movs	r3, #0
 801b994:	e021      	b.n	801b9da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b996:	683b      	ldr	r3, [r7, #0]
 801b998:	3304      	adds	r3, #4
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	687a      	ldr	r2, [r7, #4]
 801b99e:	429a      	cmp	r2, r3
 801b9a0:	d101      	bne.n	801b9a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	e019      	b.n	801b9da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b9a6:	68fa      	ldr	r2, [r7, #12]
 801b9a8:	683b      	ldr	r3, [r7, #0]
 801b9aa:	3304      	adds	r3, #4
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	405a      	eors	r2, r3
 801b9b0:	683b      	ldr	r3, [r7, #0]
 801b9b2:	3308      	adds	r3, #8
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	4013      	ands	r3, r2
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d10d      	bne.n	801b9d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b9bc:	683b      	ldr	r3, [r7, #0]
 801b9be:	3308      	adds	r3, #8
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	43da      	mvns	r2, r3
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b9c8:	683b      	ldr	r3, [r7, #0]
 801b9ca:	3308      	adds	r3, #8
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b9d0:	429a      	cmp	r2, r3
 801b9d2:	d101      	bne.n	801b9d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b9d4:	2301      	movs	r3, #1
 801b9d6:	e000      	b.n	801b9da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b9d8:	2300      	movs	r3, #0
  }
}
 801b9da:	4618      	mov	r0, r3
 801b9dc:	3714      	adds	r7, #20
 801b9de:	46bd      	mov	sp, r7
 801b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9e4:	4770      	bx	lr
	...

0801b9e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b084      	sub	sp, #16
 801b9ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b9f2:	4b12      	ldr	r3, [pc, #72]	@ (801ba3c <ip_reass_tmr+0x54>)
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b9f8:	e018      	b.n	801ba2c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	7fdb      	ldrb	r3, [r3, #31]
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d00b      	beq.n	801ba1a <ip_reass_tmr+0x32>
      r->timer--;
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	7fdb      	ldrb	r3, [r3, #31]
 801ba06:	3b01      	subs	r3, #1
 801ba08:	b2da      	uxtb	r2, r3
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	60fb      	str	r3, [r7, #12]
 801ba18:	e008      	b.n	801ba2c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ba1e:	68fb      	ldr	r3, [r7, #12]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ba24:	68b9      	ldr	r1, [r7, #8]
 801ba26:	6878      	ldr	r0, [r7, #4]
 801ba28:	f000 f80a 	bl	801ba40 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	d1e3      	bne.n	801b9fa <ip_reass_tmr+0x12>
    }
  }
}
 801ba32:	bf00      	nop
 801ba34:	bf00      	nop
 801ba36:	3710      	adds	r7, #16
 801ba38:	46bd      	mov	sp, r7
 801ba3a:	bd80      	pop	{r7, pc}
 801ba3c:	200277dc 	.word	0x200277dc

0801ba40 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ba40:	b580      	push	{r7, lr}
 801ba42:	b088      	sub	sp, #32
 801ba44:	af00      	add	r7, sp, #0
 801ba46:	6078      	str	r0, [r7, #4]
 801ba48:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ba4e:	683a      	ldr	r2, [r7, #0]
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	429a      	cmp	r2, r3
 801ba54:	d105      	bne.n	801ba62 <ip_reass_free_complete_datagram+0x22>
 801ba56:	4b45      	ldr	r3, [pc, #276]	@ (801bb6c <ip_reass_free_complete_datagram+0x12c>)
 801ba58:	22ab      	movs	r2, #171	@ 0xab
 801ba5a:	4945      	ldr	r1, [pc, #276]	@ (801bb70 <ip_reass_free_complete_datagram+0x130>)
 801ba5c:	4845      	ldr	r0, [pc, #276]	@ (801bb74 <ip_reass_free_complete_datagram+0x134>)
 801ba5e:	f002 f939 	bl	801dcd4 <iprintf>
  if (prev != NULL) {
 801ba62:	683b      	ldr	r3, [r7, #0]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d00a      	beq.n	801ba7e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ba68:	683b      	ldr	r3, [r7, #0]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	687a      	ldr	r2, [r7, #4]
 801ba6e:	429a      	cmp	r2, r3
 801ba70:	d005      	beq.n	801ba7e <ip_reass_free_complete_datagram+0x3e>
 801ba72:	4b3e      	ldr	r3, [pc, #248]	@ (801bb6c <ip_reass_free_complete_datagram+0x12c>)
 801ba74:	22ad      	movs	r2, #173	@ 0xad
 801ba76:	4940      	ldr	r1, [pc, #256]	@ (801bb78 <ip_reass_free_complete_datagram+0x138>)
 801ba78:	483e      	ldr	r0, [pc, #248]	@ (801bb74 <ip_reass_free_complete_datagram+0x134>)
 801ba7a:	f002 f92b 	bl	801dcd4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	685b      	ldr	r3, [r3, #4]
 801ba82:	685b      	ldr	r3, [r3, #4]
 801ba84:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ba86:	697b      	ldr	r3, [r7, #20]
 801ba88:	889b      	ldrh	r3, [r3, #4]
 801ba8a:	b29b      	uxth	r3, r3
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d12a      	bne.n	801bae6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	685b      	ldr	r3, [r3, #4]
 801ba94:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ba96:	697b      	ldr	r3, [r7, #20]
 801ba98:	681a      	ldr	r2, [r3, #0]
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ba9e:	69bb      	ldr	r3, [r7, #24]
 801baa0:	6858      	ldr	r0, [r3, #4]
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	3308      	adds	r3, #8
 801baa6:	2214      	movs	r2, #20
 801baa8:	4619      	mov	r1, r3
 801baaa:	f002 fa4c 	bl	801df46 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801baae:	2101      	movs	r1, #1
 801bab0:	69b8      	ldr	r0, [r7, #24]
 801bab2:	f7ff fc47 	bl	801b344 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801bab6:	69b8      	ldr	r0, [r7, #24]
 801bab8:	f7f8 fa8e 	bl	8013fd8 <pbuf_clen>
 801babc:	4603      	mov	r3, r0
 801babe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bac0:	8bfa      	ldrh	r2, [r7, #30]
 801bac2:	8a7b      	ldrh	r3, [r7, #18]
 801bac4:	4413      	add	r3, r2
 801bac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801baca:	db05      	blt.n	801bad8 <ip_reass_free_complete_datagram+0x98>
 801bacc:	4b27      	ldr	r3, [pc, #156]	@ (801bb6c <ip_reass_free_complete_datagram+0x12c>)
 801bace:	22bc      	movs	r2, #188	@ 0xbc
 801bad0:	492a      	ldr	r1, [pc, #168]	@ (801bb7c <ip_reass_free_complete_datagram+0x13c>)
 801bad2:	4828      	ldr	r0, [pc, #160]	@ (801bb74 <ip_reass_free_complete_datagram+0x134>)
 801bad4:	f002 f8fe 	bl	801dcd4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801bad8:	8bfa      	ldrh	r2, [r7, #30]
 801bada:	8a7b      	ldrh	r3, [r7, #18]
 801badc:	4413      	add	r3, r2
 801bade:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801bae0:	69b8      	ldr	r0, [r7, #24]
 801bae2:	f7f8 f9eb 	bl	8013ebc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	685b      	ldr	r3, [r3, #4]
 801baea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801baec:	e01f      	b.n	801bb2e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801baee:	69bb      	ldr	r3, [r7, #24]
 801baf0:	685b      	ldr	r3, [r3, #4]
 801baf2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801baf4:	69bb      	ldr	r3, [r7, #24]
 801baf6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801baf8:	697b      	ldr	r3, [r7, #20]
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801bafe:	68f8      	ldr	r0, [r7, #12]
 801bb00:	f7f8 fa6a 	bl	8013fd8 <pbuf_clen>
 801bb04:	4603      	mov	r3, r0
 801bb06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bb08:	8bfa      	ldrh	r2, [r7, #30]
 801bb0a:	8a7b      	ldrh	r3, [r7, #18]
 801bb0c:	4413      	add	r3, r2
 801bb0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bb12:	db05      	blt.n	801bb20 <ip_reass_free_complete_datagram+0xe0>
 801bb14:	4b15      	ldr	r3, [pc, #84]	@ (801bb6c <ip_reass_free_complete_datagram+0x12c>)
 801bb16:	22cc      	movs	r2, #204	@ 0xcc
 801bb18:	4918      	ldr	r1, [pc, #96]	@ (801bb7c <ip_reass_free_complete_datagram+0x13c>)
 801bb1a:	4816      	ldr	r0, [pc, #88]	@ (801bb74 <ip_reass_free_complete_datagram+0x134>)
 801bb1c:	f002 f8da 	bl	801dcd4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801bb20:	8bfa      	ldrh	r2, [r7, #30]
 801bb22:	8a7b      	ldrh	r3, [r7, #18]
 801bb24:	4413      	add	r3, r2
 801bb26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801bb28:	68f8      	ldr	r0, [r7, #12]
 801bb2a:	f7f8 f9c7 	bl	8013ebc <pbuf_free>
  while (p != NULL) {
 801bb2e:	69bb      	ldr	r3, [r7, #24]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d1dc      	bne.n	801baee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801bb34:	6839      	ldr	r1, [r7, #0]
 801bb36:	6878      	ldr	r0, [r7, #4]
 801bb38:	f000 f8c2 	bl	801bcc0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801bb3c:	4b10      	ldr	r3, [pc, #64]	@ (801bb80 <ip_reass_free_complete_datagram+0x140>)
 801bb3e:	881b      	ldrh	r3, [r3, #0]
 801bb40:	8bfa      	ldrh	r2, [r7, #30]
 801bb42:	429a      	cmp	r2, r3
 801bb44:	d905      	bls.n	801bb52 <ip_reass_free_complete_datagram+0x112>
 801bb46:	4b09      	ldr	r3, [pc, #36]	@ (801bb6c <ip_reass_free_complete_datagram+0x12c>)
 801bb48:	22d2      	movs	r2, #210	@ 0xd2
 801bb4a:	490e      	ldr	r1, [pc, #56]	@ (801bb84 <ip_reass_free_complete_datagram+0x144>)
 801bb4c:	4809      	ldr	r0, [pc, #36]	@ (801bb74 <ip_reass_free_complete_datagram+0x134>)
 801bb4e:	f002 f8c1 	bl	801dcd4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801bb52:	4b0b      	ldr	r3, [pc, #44]	@ (801bb80 <ip_reass_free_complete_datagram+0x140>)
 801bb54:	881a      	ldrh	r2, [r3, #0]
 801bb56:	8bfb      	ldrh	r3, [r7, #30]
 801bb58:	1ad3      	subs	r3, r2, r3
 801bb5a:	b29a      	uxth	r2, r3
 801bb5c:	4b08      	ldr	r3, [pc, #32]	@ (801bb80 <ip_reass_free_complete_datagram+0x140>)
 801bb5e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801bb60:	8bfb      	ldrh	r3, [r7, #30]
}
 801bb62:	4618      	mov	r0, r3
 801bb64:	3720      	adds	r7, #32
 801bb66:	46bd      	mov	sp, r7
 801bb68:	bd80      	pop	{r7, pc}
 801bb6a:	bf00      	nop
 801bb6c:	080215ac 	.word	0x080215ac
 801bb70:	080215e8 	.word	0x080215e8
 801bb74:	080215f4 	.word	0x080215f4
 801bb78:	0802161c 	.word	0x0802161c
 801bb7c:	08021630 	.word	0x08021630
 801bb80:	200277e0 	.word	0x200277e0
 801bb84:	08021650 	.word	0x08021650

0801bb88 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801bb88:	b580      	push	{r7, lr}
 801bb8a:	b08a      	sub	sp, #40	@ 0x28
 801bb8c:	af00      	add	r7, sp, #0
 801bb8e:	6078      	str	r0, [r7, #4]
 801bb90:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801bb92:	2300      	movs	r3, #0
 801bb94:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801bb96:	2300      	movs	r3, #0
 801bb98:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801bb9a:	2300      	movs	r3, #0
 801bb9c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801bb9e:	2300      	movs	r3, #0
 801bba0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801bba2:	2300      	movs	r3, #0
 801bba4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801bba6:	4b28      	ldr	r3, [pc, #160]	@ (801bc48 <ip_reass_remove_oldest_datagram+0xc0>)
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bbac:	e030      	b.n	801bc10 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbb0:	695a      	ldr	r2, [r3, #20]
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	68db      	ldr	r3, [r3, #12]
 801bbb6:	429a      	cmp	r2, r3
 801bbb8:	d10c      	bne.n	801bbd4 <ip_reass_remove_oldest_datagram+0x4c>
 801bbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbbc:	699a      	ldr	r2, [r3, #24]
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	691b      	ldr	r3, [r3, #16]
 801bbc2:	429a      	cmp	r2, r3
 801bbc4:	d106      	bne.n	801bbd4 <ip_reass_remove_oldest_datagram+0x4c>
 801bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbc8:	899a      	ldrh	r2, [r3, #12]
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	889b      	ldrh	r3, [r3, #4]
 801bbce:	b29b      	uxth	r3, r3
 801bbd0:	429a      	cmp	r2, r3
 801bbd2:	d014      	beq.n	801bbfe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801bbd4:	693b      	ldr	r3, [r7, #16]
 801bbd6:	3301      	adds	r3, #1
 801bbd8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801bbda:	6a3b      	ldr	r3, [r7, #32]
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	d104      	bne.n	801bbea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801bbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbe2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bbe4:	69fb      	ldr	r3, [r7, #28]
 801bbe6:	61bb      	str	r3, [r7, #24]
 801bbe8:	e009      	b.n	801bbfe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801bbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbec:	7fda      	ldrb	r2, [r3, #31]
 801bbee:	6a3b      	ldr	r3, [r7, #32]
 801bbf0:	7fdb      	ldrb	r3, [r3, #31]
 801bbf2:	429a      	cmp	r2, r3
 801bbf4:	d803      	bhi.n	801bbfe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbf8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bbfa:	69fb      	ldr	r3, [r7, #28]
 801bbfc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801bbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d001      	beq.n	801bc0a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801bc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc08:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801bc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d1cb      	bne.n	801bbae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801bc16:	6a3b      	ldr	r3, [r7, #32]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d008      	beq.n	801bc2e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801bc1c:	69b9      	ldr	r1, [r7, #24]
 801bc1e:	6a38      	ldr	r0, [r7, #32]
 801bc20:	f7ff ff0e 	bl	801ba40 <ip_reass_free_complete_datagram>
 801bc24:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801bc26:	697a      	ldr	r2, [r7, #20]
 801bc28:	68fb      	ldr	r3, [r7, #12]
 801bc2a:	4413      	add	r3, r2
 801bc2c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801bc2e:	697a      	ldr	r2, [r7, #20]
 801bc30:	683b      	ldr	r3, [r7, #0]
 801bc32:	429a      	cmp	r2, r3
 801bc34:	da02      	bge.n	801bc3c <ip_reass_remove_oldest_datagram+0xb4>
 801bc36:	693b      	ldr	r3, [r7, #16]
 801bc38:	2b01      	cmp	r3, #1
 801bc3a:	dcac      	bgt.n	801bb96 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801bc3c:	697b      	ldr	r3, [r7, #20]
}
 801bc3e:	4618      	mov	r0, r3
 801bc40:	3728      	adds	r7, #40	@ 0x28
 801bc42:	46bd      	mov	sp, r7
 801bc44:	bd80      	pop	{r7, pc}
 801bc46:	bf00      	nop
 801bc48:	200277dc 	.word	0x200277dc

0801bc4c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801bc4c:	b580      	push	{r7, lr}
 801bc4e:	b084      	sub	sp, #16
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	6078      	str	r0, [r7, #4]
 801bc54:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bc56:	2004      	movs	r0, #4
 801bc58:	f7f7 fa16 	bl	8013088 <memp_malloc>
 801bc5c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d110      	bne.n	801bc86 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801bc64:	6839      	ldr	r1, [r7, #0]
 801bc66:	6878      	ldr	r0, [r7, #4]
 801bc68:	f7ff ff8e 	bl	801bb88 <ip_reass_remove_oldest_datagram>
 801bc6c:	4602      	mov	r2, r0
 801bc6e:	683b      	ldr	r3, [r7, #0]
 801bc70:	4293      	cmp	r3, r2
 801bc72:	dc03      	bgt.n	801bc7c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bc74:	2004      	movs	r0, #4
 801bc76:	f7f7 fa07 	bl	8013088 <memp_malloc>
 801bc7a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d101      	bne.n	801bc86 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801bc82:	2300      	movs	r3, #0
 801bc84:	e016      	b.n	801bcb4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801bc86:	2220      	movs	r2, #32
 801bc88:	2100      	movs	r1, #0
 801bc8a:	68f8      	ldr	r0, [r7, #12]
 801bc8c:	f002 f887 	bl	801dd9e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	220f      	movs	r2, #15
 801bc94:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801bc96:	4b09      	ldr	r3, [pc, #36]	@ (801bcbc <ip_reass_enqueue_new_datagram+0x70>)
 801bc98:	681a      	ldr	r2, [r3, #0]
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801bc9e:	4a07      	ldr	r2, [pc, #28]	@ (801bcbc <ip_reass_enqueue_new_datagram+0x70>)
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	3308      	adds	r3, #8
 801bca8:	2214      	movs	r2, #20
 801bcaa:	6879      	ldr	r1, [r7, #4]
 801bcac:	4618      	mov	r0, r3
 801bcae:	f002 f94a 	bl	801df46 <memcpy>
  return ipr;
 801bcb2:	68fb      	ldr	r3, [r7, #12]
}
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	3710      	adds	r7, #16
 801bcb8:	46bd      	mov	sp, r7
 801bcba:	bd80      	pop	{r7, pc}
 801bcbc:	200277dc 	.word	0x200277dc

0801bcc0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bcc0:	b580      	push	{r7, lr}
 801bcc2:	b082      	sub	sp, #8
 801bcc4:	af00      	add	r7, sp, #0
 801bcc6:	6078      	str	r0, [r7, #4]
 801bcc8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bcca:	4b10      	ldr	r3, [pc, #64]	@ (801bd0c <ip_reass_dequeue_datagram+0x4c>)
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	687a      	ldr	r2, [r7, #4]
 801bcd0:	429a      	cmp	r2, r3
 801bcd2:	d104      	bne.n	801bcde <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	4a0c      	ldr	r2, [pc, #48]	@ (801bd0c <ip_reass_dequeue_datagram+0x4c>)
 801bcda:	6013      	str	r3, [r2, #0]
 801bcdc:	e00d      	b.n	801bcfa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bcde:	683b      	ldr	r3, [r7, #0]
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	d106      	bne.n	801bcf2 <ip_reass_dequeue_datagram+0x32>
 801bce4:	4b0a      	ldr	r3, [pc, #40]	@ (801bd10 <ip_reass_dequeue_datagram+0x50>)
 801bce6:	f240 1245 	movw	r2, #325	@ 0x145
 801bcea:	490a      	ldr	r1, [pc, #40]	@ (801bd14 <ip_reass_dequeue_datagram+0x54>)
 801bcec:	480a      	ldr	r0, [pc, #40]	@ (801bd18 <ip_reass_dequeue_datagram+0x58>)
 801bcee:	f001 fff1 	bl	801dcd4 <iprintf>
    prev->next = ipr->next;
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	681a      	ldr	r2, [r3, #0]
 801bcf6:	683b      	ldr	r3, [r7, #0]
 801bcf8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bcfa:	6879      	ldr	r1, [r7, #4]
 801bcfc:	2004      	movs	r0, #4
 801bcfe:	f7f7 fa39 	bl	8013174 <memp_free>
}
 801bd02:	bf00      	nop
 801bd04:	3708      	adds	r7, #8
 801bd06:	46bd      	mov	sp, r7
 801bd08:	bd80      	pop	{r7, pc}
 801bd0a:	bf00      	nop
 801bd0c:	200277dc 	.word	0x200277dc
 801bd10:	080215ac 	.word	0x080215ac
 801bd14:	08021674 	.word	0x08021674
 801bd18:	080215f4 	.word	0x080215f4

0801bd1c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	b08c      	sub	sp, #48	@ 0x30
 801bd20:	af00      	add	r7, sp, #0
 801bd22:	60f8      	str	r0, [r7, #12]
 801bd24:	60b9      	str	r1, [r7, #8]
 801bd26:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bd28:	2300      	movs	r3, #0
 801bd2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bd2c:	2301      	movs	r3, #1
 801bd2e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bd30:	68bb      	ldr	r3, [r7, #8]
 801bd32:	685b      	ldr	r3, [r3, #4]
 801bd34:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bd36:	69fb      	ldr	r3, [r7, #28]
 801bd38:	885b      	ldrh	r3, [r3, #2]
 801bd3a:	b29b      	uxth	r3, r3
 801bd3c:	4618      	mov	r0, r3
 801bd3e:	f7f6 fccf 	bl	80126e0 <lwip_htons>
 801bd42:	4603      	mov	r3, r0
 801bd44:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bd46:	69fb      	ldr	r3, [r7, #28]
 801bd48:	781b      	ldrb	r3, [r3, #0]
 801bd4a:	f003 030f 	and.w	r3, r3, #15
 801bd4e:	b2db      	uxtb	r3, r3
 801bd50:	009b      	lsls	r3, r3, #2
 801bd52:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bd54:	7e7b      	ldrb	r3, [r7, #25]
 801bd56:	b29b      	uxth	r3, r3
 801bd58:	8b7a      	ldrh	r2, [r7, #26]
 801bd5a:	429a      	cmp	r2, r3
 801bd5c:	d202      	bcs.n	801bd64 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd5e:	f04f 33ff 	mov.w	r3, #4294967295
 801bd62:	e135      	b.n	801bfd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bd64:	7e7b      	ldrb	r3, [r7, #25]
 801bd66:	b29b      	uxth	r3, r3
 801bd68:	8b7a      	ldrh	r2, [r7, #26]
 801bd6a:	1ad3      	subs	r3, r2, r3
 801bd6c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bd6e:	69fb      	ldr	r3, [r7, #28]
 801bd70:	88db      	ldrh	r3, [r3, #6]
 801bd72:	b29b      	uxth	r3, r3
 801bd74:	4618      	mov	r0, r3
 801bd76:	f7f6 fcb3 	bl	80126e0 <lwip_htons>
 801bd7a:	4603      	mov	r3, r0
 801bd7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bd80:	b29b      	uxth	r3, r3
 801bd82:	00db      	lsls	r3, r3, #3
 801bd84:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bd86:	68bb      	ldr	r3, [r7, #8]
 801bd88:	685b      	ldr	r3, [r3, #4]
 801bd8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801bd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd8e:	2200      	movs	r2, #0
 801bd90:	701a      	strb	r2, [r3, #0]
 801bd92:	2200      	movs	r2, #0
 801bd94:	705a      	strb	r2, [r3, #1]
 801bd96:	2200      	movs	r2, #0
 801bd98:	709a      	strb	r2, [r3, #2]
 801bd9a:	2200      	movs	r2, #0
 801bd9c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bda0:	8afa      	ldrh	r2, [r7, #22]
 801bda2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bda4:	8afa      	ldrh	r2, [r7, #22]
 801bda6:	8b7b      	ldrh	r3, [r7, #26]
 801bda8:	4413      	add	r3, r2
 801bdaa:	b29a      	uxth	r2, r3
 801bdac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdb2:	88db      	ldrh	r3, [r3, #6]
 801bdb4:	b29b      	uxth	r3, r3
 801bdb6:	8afa      	ldrh	r2, [r7, #22]
 801bdb8:	429a      	cmp	r2, r3
 801bdba:	d902      	bls.n	801bdc2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bdbc:	f04f 33ff 	mov.w	r3, #4294967295
 801bdc0:	e106      	b.n	801bfd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bdc2:	68fb      	ldr	r3, [r7, #12]
 801bdc4:	685b      	ldr	r3, [r3, #4]
 801bdc6:	627b      	str	r3, [r7, #36]	@ 0x24
 801bdc8:	e068      	b.n	801be9c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdcc:	685b      	ldr	r3, [r3, #4]
 801bdce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdd2:	889b      	ldrh	r3, [r3, #4]
 801bdd4:	b29a      	uxth	r2, r3
 801bdd6:	693b      	ldr	r3, [r7, #16]
 801bdd8:	889b      	ldrh	r3, [r3, #4]
 801bdda:	b29b      	uxth	r3, r3
 801bddc:	429a      	cmp	r2, r3
 801bdde:	d235      	bcs.n	801be4c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801bde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bde2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bde4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801bde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d020      	beq.n	801be2e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bdec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdee:	889b      	ldrh	r3, [r3, #4]
 801bdf0:	b29a      	uxth	r2, r3
 801bdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdf4:	88db      	ldrh	r3, [r3, #6]
 801bdf6:	b29b      	uxth	r3, r3
 801bdf8:	429a      	cmp	r2, r3
 801bdfa:	d307      	bcc.n	801be0c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdfe:	88db      	ldrh	r3, [r3, #6]
 801be00:	b29a      	uxth	r2, r3
 801be02:	693b      	ldr	r3, [r7, #16]
 801be04:	889b      	ldrh	r3, [r3, #4]
 801be06:	b29b      	uxth	r3, r3
 801be08:	429a      	cmp	r2, r3
 801be0a:	d902      	bls.n	801be12 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be0c:	f04f 33ff 	mov.w	r3, #4294967295
 801be10:	e0de      	b.n	801bfd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801be12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be14:	68ba      	ldr	r2, [r7, #8]
 801be16:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801be18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be1a:	88db      	ldrh	r3, [r3, #6]
 801be1c:	b29a      	uxth	r2, r3
 801be1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be20:	889b      	ldrh	r3, [r3, #4]
 801be22:	b29b      	uxth	r3, r3
 801be24:	429a      	cmp	r2, r3
 801be26:	d03d      	beq.n	801bea4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801be28:	2300      	movs	r3, #0
 801be2a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801be2c:	e03a      	b.n	801bea4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801be2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be30:	88db      	ldrh	r3, [r3, #6]
 801be32:	b29a      	uxth	r2, r3
 801be34:	693b      	ldr	r3, [r7, #16]
 801be36:	889b      	ldrh	r3, [r3, #4]
 801be38:	b29b      	uxth	r3, r3
 801be3a:	429a      	cmp	r2, r3
 801be3c:	d902      	bls.n	801be44 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be3e:	f04f 33ff 	mov.w	r3, #4294967295
 801be42:	e0c5      	b.n	801bfd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801be44:	68fb      	ldr	r3, [r7, #12]
 801be46:	68ba      	ldr	r2, [r7, #8]
 801be48:	605a      	str	r2, [r3, #4]
      break;
 801be4a:	e02b      	b.n	801bea4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801be4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be4e:	889b      	ldrh	r3, [r3, #4]
 801be50:	b29a      	uxth	r2, r3
 801be52:	693b      	ldr	r3, [r7, #16]
 801be54:	889b      	ldrh	r3, [r3, #4]
 801be56:	b29b      	uxth	r3, r3
 801be58:	429a      	cmp	r2, r3
 801be5a:	d102      	bne.n	801be62 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be5c:	f04f 33ff 	mov.w	r3, #4294967295
 801be60:	e0b6      	b.n	801bfd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801be62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be64:	889b      	ldrh	r3, [r3, #4]
 801be66:	b29a      	uxth	r2, r3
 801be68:	693b      	ldr	r3, [r7, #16]
 801be6a:	88db      	ldrh	r3, [r3, #6]
 801be6c:	b29b      	uxth	r3, r3
 801be6e:	429a      	cmp	r2, r3
 801be70:	d202      	bcs.n	801be78 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be72:	f04f 33ff 	mov.w	r3, #4294967295
 801be76:	e0ab      	b.n	801bfd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801be78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d009      	beq.n	801be92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801be7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be80:	88db      	ldrh	r3, [r3, #6]
 801be82:	b29a      	uxth	r2, r3
 801be84:	693b      	ldr	r3, [r7, #16]
 801be86:	889b      	ldrh	r3, [r3, #4]
 801be88:	b29b      	uxth	r3, r3
 801be8a:	429a      	cmp	r2, r3
 801be8c:	d001      	beq.n	801be92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801be8e:	2300      	movs	r3, #0
 801be90:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801be92:	693b      	ldr	r3, [r7, #16]
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801be98:	693b      	ldr	r3, [r7, #16]
 801be9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801be9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d193      	bne.n	801bdca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801bea2:	e000      	b.n	801bea6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801bea4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801bea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d12d      	bne.n	801bf08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801beac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d01c      	beq.n	801beec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801beb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beb4:	88db      	ldrh	r3, [r3, #6]
 801beb6:	b29a      	uxth	r2, r3
 801beb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801beba:	889b      	ldrh	r3, [r3, #4]
 801bebc:	b29b      	uxth	r3, r3
 801bebe:	429a      	cmp	r2, r3
 801bec0:	d906      	bls.n	801bed0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801bec2:	4b45      	ldr	r3, [pc, #276]	@ (801bfd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bec4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801bec8:	4944      	ldr	r1, [pc, #272]	@ (801bfdc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801beca:	4845      	ldr	r0, [pc, #276]	@ (801bfe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801becc:	f001 ff02 	bl	801dcd4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801bed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bed2:	68ba      	ldr	r2, [r7, #8]
 801bed4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801bed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bed8:	88db      	ldrh	r3, [r3, #6]
 801beda:	b29a      	uxth	r2, r3
 801bedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bede:	889b      	ldrh	r3, [r3, #4]
 801bee0:	b29b      	uxth	r3, r3
 801bee2:	429a      	cmp	r2, r3
 801bee4:	d010      	beq.n	801bf08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801bee6:	2300      	movs	r3, #0
 801bee8:	623b      	str	r3, [r7, #32]
 801beea:	e00d      	b.n	801bf08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	685b      	ldr	r3, [r3, #4]
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d006      	beq.n	801bf02 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801bef4:	4b38      	ldr	r3, [pc, #224]	@ (801bfd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bef6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801befa:	493a      	ldr	r1, [pc, #232]	@ (801bfe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801befc:	4838      	ldr	r0, [pc, #224]	@ (801bfe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801befe:	f001 fee9 	bl	801dcd4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	68ba      	ldr	r2, [r7, #8]
 801bf06:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d105      	bne.n	801bf1a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801bf0e:	68fb      	ldr	r3, [r7, #12]
 801bf10:	7f9b      	ldrb	r3, [r3, #30]
 801bf12:	f003 0301 	and.w	r3, r3, #1
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d059      	beq.n	801bfce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801bf1a:	6a3b      	ldr	r3, [r7, #32]
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d04f      	beq.n	801bfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	685b      	ldr	r3, [r3, #4]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d006      	beq.n	801bf36 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	685b      	ldr	r3, [r3, #4]
 801bf2c:	685b      	ldr	r3, [r3, #4]
 801bf2e:	889b      	ldrh	r3, [r3, #4]
 801bf30:	b29b      	uxth	r3, r3
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d002      	beq.n	801bf3c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801bf36:	2300      	movs	r3, #0
 801bf38:	623b      	str	r3, [r7, #32]
 801bf3a:	e041      	b.n	801bfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801bf3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf3e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801bf40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bf46:	e012      	b.n	801bf6e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bf48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf4a:	685b      	ldr	r3, [r3, #4]
 801bf4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801bf4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf50:	88db      	ldrh	r3, [r3, #6]
 801bf52:	b29a      	uxth	r2, r3
 801bf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf56:	889b      	ldrh	r3, [r3, #4]
 801bf58:	b29b      	uxth	r3, r3
 801bf5a:	429a      	cmp	r2, r3
 801bf5c:	d002      	beq.n	801bf64 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801bf5e:	2300      	movs	r3, #0
 801bf60:	623b      	str	r3, [r7, #32]
            break;
 801bf62:	e007      	b.n	801bf74 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bf64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf66:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801bf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bf6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d1e9      	bne.n	801bf48 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bf74:	6a3b      	ldr	r3, [r7, #32]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d022      	beq.n	801bfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801bf7a:	68fb      	ldr	r3, [r7, #12]
 801bf7c:	685b      	ldr	r3, [r3, #4]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d106      	bne.n	801bf90 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bf82:	4b15      	ldr	r3, [pc, #84]	@ (801bfd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf84:	f240 12df 	movw	r2, #479	@ 0x1df
 801bf88:	4917      	ldr	r1, [pc, #92]	@ (801bfe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bf8a:	4815      	ldr	r0, [pc, #84]	@ (801bfe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf8c:	f001 fea2 	bl	801dcd4 <iprintf>
          LWIP_ASSERT("sanity check",
 801bf90:	68fb      	ldr	r3, [r7, #12]
 801bf92:	685b      	ldr	r3, [r3, #4]
 801bf94:	685b      	ldr	r3, [r3, #4]
 801bf96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bf98:	429a      	cmp	r2, r3
 801bf9a:	d106      	bne.n	801bfaa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801bf9c:	4b0e      	ldr	r3, [pc, #56]	@ (801bfd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf9e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801bfa2:	4911      	ldr	r1, [pc, #68]	@ (801bfe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bfa4:	480e      	ldr	r0, [pc, #56]	@ (801bfe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bfa6:	f001 fe95 	bl	801dcd4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801bfaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d006      	beq.n	801bfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801bfb2:	4b09      	ldr	r3, [pc, #36]	@ (801bfd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bfb4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801bfb8:	490c      	ldr	r1, [pc, #48]	@ (801bfec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801bfba:	4809      	ldr	r0, [pc, #36]	@ (801bfe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bfbc:	f001 fe8a 	bl	801dcd4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801bfc0:	6a3b      	ldr	r3, [r7, #32]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	bf14      	ite	ne
 801bfc6:	2301      	movne	r3, #1
 801bfc8:	2300      	moveq	r3, #0
 801bfca:	b2db      	uxtb	r3, r3
 801bfcc:	e000      	b.n	801bfd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801bfce:	2300      	movs	r3, #0
}
 801bfd0:	4618      	mov	r0, r3
 801bfd2:	3730      	adds	r7, #48	@ 0x30
 801bfd4:	46bd      	mov	sp, r7
 801bfd6:	bd80      	pop	{r7, pc}
 801bfd8:	080215ac 	.word	0x080215ac
 801bfdc:	08021690 	.word	0x08021690
 801bfe0:	080215f4 	.word	0x080215f4
 801bfe4:	080216b0 	.word	0x080216b0
 801bfe8:	080216e8 	.word	0x080216e8
 801bfec:	080216f8 	.word	0x080216f8

0801bff0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801bff0:	b580      	push	{r7, lr}
 801bff2:	b08e      	sub	sp, #56	@ 0x38
 801bff4:	af00      	add	r7, sp, #0
 801bff6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	685b      	ldr	r3, [r3, #4]
 801bffc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801bffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c000:	781b      	ldrb	r3, [r3, #0]
 801c002:	f003 030f 	and.w	r3, r3, #15
 801c006:	b2db      	uxtb	r3, r3
 801c008:	009b      	lsls	r3, r3, #2
 801c00a:	b2db      	uxtb	r3, r3
 801c00c:	2b14      	cmp	r3, #20
 801c00e:	f040 8171 	bne.w	801c2f4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c014:	88db      	ldrh	r3, [r3, #6]
 801c016:	b29b      	uxth	r3, r3
 801c018:	4618      	mov	r0, r3
 801c01a:	f7f6 fb61 	bl	80126e0 <lwip_htons>
 801c01e:	4603      	mov	r3, r0
 801c020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c024:	b29b      	uxth	r3, r3
 801c026:	00db      	lsls	r3, r3, #3
 801c028:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c02c:	885b      	ldrh	r3, [r3, #2]
 801c02e:	b29b      	uxth	r3, r3
 801c030:	4618      	mov	r0, r3
 801c032:	f7f6 fb55 	bl	80126e0 <lwip_htons>
 801c036:	4603      	mov	r3, r0
 801c038:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c03c:	781b      	ldrb	r3, [r3, #0]
 801c03e:	f003 030f 	and.w	r3, r3, #15
 801c042:	b2db      	uxtb	r3, r3
 801c044:	009b      	lsls	r3, r3, #2
 801c046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c04a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c04e:	b29b      	uxth	r3, r3
 801c050:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c052:	429a      	cmp	r2, r3
 801c054:	f0c0 8150 	bcc.w	801c2f8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c058:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c05c:	b29b      	uxth	r3, r3
 801c05e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c060:	1ad3      	subs	r3, r2, r3
 801c062:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c064:	6878      	ldr	r0, [r7, #4]
 801c066:	f7f7 ffb7 	bl	8013fd8 <pbuf_clen>
 801c06a:	4603      	mov	r3, r0
 801c06c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c06e:	4b8c      	ldr	r3, [pc, #560]	@ (801c2a0 <ip4_reass+0x2b0>)
 801c070:	881b      	ldrh	r3, [r3, #0]
 801c072:	461a      	mov	r2, r3
 801c074:	8c3b      	ldrh	r3, [r7, #32]
 801c076:	4413      	add	r3, r2
 801c078:	2b0a      	cmp	r3, #10
 801c07a:	dd10      	ble.n	801c09e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c07c:	8c3b      	ldrh	r3, [r7, #32]
 801c07e:	4619      	mov	r1, r3
 801c080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c082:	f7ff fd81 	bl	801bb88 <ip_reass_remove_oldest_datagram>
 801c086:	4603      	mov	r3, r0
 801c088:	2b00      	cmp	r3, #0
 801c08a:	f000 8137 	beq.w	801c2fc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c08e:	4b84      	ldr	r3, [pc, #528]	@ (801c2a0 <ip4_reass+0x2b0>)
 801c090:	881b      	ldrh	r3, [r3, #0]
 801c092:	461a      	mov	r2, r3
 801c094:	8c3b      	ldrh	r3, [r7, #32]
 801c096:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c098:	2b0a      	cmp	r3, #10
 801c09a:	f300 812f 	bgt.w	801c2fc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c09e:	4b81      	ldr	r3, [pc, #516]	@ (801c2a4 <ip4_reass+0x2b4>)
 801c0a0:	681b      	ldr	r3, [r3, #0]
 801c0a2:	633b      	str	r3, [r7, #48]	@ 0x30
 801c0a4:	e015      	b.n	801c0d2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0a8:	695a      	ldr	r2, [r3, #20]
 801c0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0ac:	68db      	ldr	r3, [r3, #12]
 801c0ae:	429a      	cmp	r2, r3
 801c0b0:	d10c      	bne.n	801c0cc <ip4_reass+0xdc>
 801c0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0b4:	699a      	ldr	r2, [r3, #24]
 801c0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0b8:	691b      	ldr	r3, [r3, #16]
 801c0ba:	429a      	cmp	r2, r3
 801c0bc:	d106      	bne.n	801c0cc <ip4_reass+0xdc>
 801c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0c0:	899a      	ldrh	r2, [r3, #12]
 801c0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0c4:	889b      	ldrh	r3, [r3, #4]
 801c0c6:	b29b      	uxth	r3, r3
 801c0c8:	429a      	cmp	r2, r3
 801c0ca:	d006      	beq.n	801c0da <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	633b      	str	r3, [r7, #48]	@ 0x30
 801c0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d1e6      	bne.n	801c0a6 <ip4_reass+0xb6>
 801c0d8:	e000      	b.n	801c0dc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c0da:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d109      	bne.n	801c0f6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c0e2:	8c3b      	ldrh	r3, [r7, #32]
 801c0e4:	4619      	mov	r1, r3
 801c0e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c0e8:	f7ff fdb0 	bl	801bc4c <ip_reass_enqueue_new_datagram>
 801c0ec:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d11c      	bne.n	801c12e <ip4_reass+0x13e>
      goto nullreturn;
 801c0f4:	e105      	b.n	801c302 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0f8:	88db      	ldrh	r3, [r3, #6]
 801c0fa:	b29b      	uxth	r3, r3
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	f7f6 faef 	bl	80126e0 <lwip_htons>
 801c102:	4603      	mov	r3, r0
 801c104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d110      	bne.n	801c12e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c10e:	89db      	ldrh	r3, [r3, #14]
 801c110:	4618      	mov	r0, r3
 801c112:	f7f6 fae5 	bl	80126e0 <lwip_htons>
 801c116:	4603      	mov	r3, r0
 801c118:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d006      	beq.n	801c12e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c122:	3308      	adds	r3, #8
 801c124:	2214      	movs	r2, #20
 801c126:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c128:	4618      	mov	r0, r3
 801c12a:	f001 ff0c 	bl	801df46 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c130:	88db      	ldrh	r3, [r3, #6]
 801c132:	b29b      	uxth	r3, r3
 801c134:	f003 0320 	and.w	r3, r3, #32
 801c138:	2b00      	cmp	r3, #0
 801c13a:	bf0c      	ite	eq
 801c13c:	2301      	moveq	r3, #1
 801c13e:	2300      	movne	r3, #0
 801c140:	b2db      	uxtb	r3, r3
 801c142:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c144:	69fb      	ldr	r3, [r7, #28]
 801c146:	2b00      	cmp	r3, #0
 801c148:	d00e      	beq.n	801c168 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c14a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c14c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c14e:	4413      	add	r3, r2
 801c150:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c152:	8b7a      	ldrh	r2, [r7, #26]
 801c154:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c156:	429a      	cmp	r2, r3
 801c158:	f0c0 80a0 	bcc.w	801c29c <ip4_reass+0x2ac>
 801c15c:	8b7b      	ldrh	r3, [r7, #26]
 801c15e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c162:	4293      	cmp	r3, r2
 801c164:	f200 809a 	bhi.w	801c29c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c168:	69fa      	ldr	r2, [r7, #28]
 801c16a:	6879      	ldr	r1, [r7, #4]
 801c16c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c16e:	f7ff fdd5 	bl	801bd1c <ip_reass_chain_frag_into_datagram_and_validate>
 801c172:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c174:	697b      	ldr	r3, [r7, #20]
 801c176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c17a:	f000 809b 	beq.w	801c2b4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c17e:	4b48      	ldr	r3, [pc, #288]	@ (801c2a0 <ip4_reass+0x2b0>)
 801c180:	881a      	ldrh	r2, [r3, #0]
 801c182:	8c3b      	ldrh	r3, [r7, #32]
 801c184:	4413      	add	r3, r2
 801c186:	b29a      	uxth	r2, r3
 801c188:	4b45      	ldr	r3, [pc, #276]	@ (801c2a0 <ip4_reass+0x2b0>)
 801c18a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c18c:	69fb      	ldr	r3, [r7, #28]
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d00d      	beq.n	801c1ae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c192:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c194:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c196:	4413      	add	r3, r2
 801c198:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c19c:	8a7a      	ldrh	r2, [r7, #18]
 801c19e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1a2:	7f9b      	ldrb	r3, [r3, #30]
 801c1a4:	f043 0301 	orr.w	r3, r3, #1
 801c1a8:	b2da      	uxtb	r2, r3
 801c1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1ac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c1ae:	697b      	ldr	r3, [r7, #20]
 801c1b0:	2b01      	cmp	r3, #1
 801c1b2:	d171      	bne.n	801c298 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1b6:	8b9b      	ldrh	r3, [r3, #28]
 801c1b8:	3314      	adds	r3, #20
 801c1ba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1be:	685b      	ldr	r3, [r3, #4]
 801c1c0:	685b      	ldr	r3, [r3, #4]
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1c8:	685b      	ldr	r3, [r3, #4]
 801c1ca:	685b      	ldr	r3, [r3, #4]
 801c1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1d0:	3308      	adds	r3, #8
 801c1d2:	2214      	movs	r2, #20
 801c1d4:	4619      	mov	r1, r3
 801c1d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c1d8:	f001 feb5 	bl	801df46 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c1dc:	8a3b      	ldrh	r3, [r7, #16]
 801c1de:	4618      	mov	r0, r3
 801c1e0:	f7f6 fa7e 	bl	80126e0 <lwip_htons>
 801c1e4:	4603      	mov	r3, r0
 801c1e6:	461a      	mov	r2, r3
 801c1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1ea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1ee:	2200      	movs	r2, #0
 801c1f0:	719a      	strb	r2, [r3, #6]
 801c1f2:	2200      	movs	r2, #0
 801c1f4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1f8:	2200      	movs	r2, #0
 801c1fa:	729a      	strb	r2, [r3, #10]
 801c1fc:	2200      	movs	r2, #0
 801c1fe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c202:	685b      	ldr	r3, [r3, #4]
 801c204:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c206:	e00d      	b.n	801c224 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c20a:	685b      	ldr	r3, [r3, #4]
 801c20c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c20e:	2114      	movs	r1, #20
 801c210:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c212:	f7f7 fdcd 	bl	8013db0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801c216:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c218:	6878      	ldr	r0, [r7, #4]
 801c21a:	f7f7 ff1d 	bl	8014058 <pbuf_cat>
      r = iprh->next_pbuf;
 801c21e:	68fb      	ldr	r3, [r7, #12]
 801c220:	681b      	ldr	r3, [r3, #0]
 801c222:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c226:	2b00      	cmp	r3, #0
 801c228:	d1ee      	bne.n	801c208 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c22a:	4b1e      	ldr	r3, [pc, #120]	@ (801c2a4 <ip4_reass+0x2b4>)
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c230:	429a      	cmp	r2, r3
 801c232:	d102      	bne.n	801c23a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c234:	2300      	movs	r3, #0
 801c236:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c238:	e010      	b.n	801c25c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c23a:	4b1a      	ldr	r3, [pc, #104]	@ (801c2a4 <ip4_reass+0x2b4>)
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c240:	e007      	b.n	801c252 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c248:	429a      	cmp	r2, r3
 801c24a:	d006      	beq.n	801c25a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c254:	2b00      	cmp	r3, #0
 801c256:	d1f4      	bne.n	801c242 <ip4_reass+0x252>
 801c258:	e000      	b.n	801c25c <ip4_reass+0x26c>
          break;
 801c25a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c25c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c25e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c260:	f7ff fd2e 	bl	801bcc0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c264:	6878      	ldr	r0, [r7, #4]
 801c266:	f7f7 feb7 	bl	8013fd8 <pbuf_clen>
 801c26a:	4603      	mov	r3, r0
 801c26c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c26e:	4b0c      	ldr	r3, [pc, #48]	@ (801c2a0 <ip4_reass+0x2b0>)
 801c270:	881b      	ldrh	r3, [r3, #0]
 801c272:	8c3a      	ldrh	r2, [r7, #32]
 801c274:	429a      	cmp	r2, r3
 801c276:	d906      	bls.n	801c286 <ip4_reass+0x296>
 801c278:	4b0b      	ldr	r3, [pc, #44]	@ (801c2a8 <ip4_reass+0x2b8>)
 801c27a:	f240 229b 	movw	r2, #667	@ 0x29b
 801c27e:	490b      	ldr	r1, [pc, #44]	@ (801c2ac <ip4_reass+0x2bc>)
 801c280:	480b      	ldr	r0, [pc, #44]	@ (801c2b0 <ip4_reass+0x2c0>)
 801c282:	f001 fd27 	bl	801dcd4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c286:	4b06      	ldr	r3, [pc, #24]	@ (801c2a0 <ip4_reass+0x2b0>)
 801c288:	881a      	ldrh	r2, [r3, #0]
 801c28a:	8c3b      	ldrh	r3, [r7, #32]
 801c28c:	1ad3      	subs	r3, r2, r3
 801c28e:	b29a      	uxth	r2, r3
 801c290:	4b03      	ldr	r3, [pc, #12]	@ (801c2a0 <ip4_reass+0x2b0>)
 801c292:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	e038      	b.n	801c30a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c298:	2300      	movs	r3, #0
 801c29a:	e036      	b.n	801c30a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c29c:	bf00      	nop
 801c29e:	e00a      	b.n	801c2b6 <ip4_reass+0x2c6>
 801c2a0:	200277e0 	.word	0x200277e0
 801c2a4:	200277dc 	.word	0x200277dc
 801c2a8:	080215ac 	.word	0x080215ac
 801c2ac:	0802171c 	.word	0x0802171c
 801c2b0:	080215f4 	.word	0x080215f4
    goto nullreturn_ipr;
 801c2b4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d106      	bne.n	801c2ca <ip4_reass+0x2da>
 801c2bc:	4b15      	ldr	r3, [pc, #84]	@ (801c314 <ip4_reass+0x324>)
 801c2be:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c2c2:	4915      	ldr	r1, [pc, #84]	@ (801c318 <ip4_reass+0x328>)
 801c2c4:	4815      	ldr	r0, [pc, #84]	@ (801c31c <ip4_reass+0x32c>)
 801c2c6:	f001 fd05 	bl	801dcd4 <iprintf>
  if (ipr->p == NULL) {
 801c2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2cc:	685b      	ldr	r3, [r3, #4]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d116      	bne.n	801c300 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c2d2:	4b13      	ldr	r3, [pc, #76]	@ (801c320 <ip4_reass+0x330>)
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c2d8:	429a      	cmp	r2, r3
 801c2da:	d006      	beq.n	801c2ea <ip4_reass+0x2fa>
 801c2dc:	4b0d      	ldr	r3, [pc, #52]	@ (801c314 <ip4_reass+0x324>)
 801c2de:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c2e2:	4910      	ldr	r1, [pc, #64]	@ (801c324 <ip4_reass+0x334>)
 801c2e4:	480d      	ldr	r0, [pc, #52]	@ (801c31c <ip4_reass+0x32c>)
 801c2e6:	f001 fcf5 	bl	801dcd4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c2ea:	2100      	movs	r1, #0
 801c2ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c2ee:	f7ff fce7 	bl	801bcc0 <ip_reass_dequeue_datagram>
 801c2f2:	e006      	b.n	801c302 <ip4_reass+0x312>
    goto nullreturn;
 801c2f4:	bf00      	nop
 801c2f6:	e004      	b.n	801c302 <ip4_reass+0x312>
    goto nullreturn;
 801c2f8:	bf00      	nop
 801c2fa:	e002      	b.n	801c302 <ip4_reass+0x312>
      goto nullreturn;
 801c2fc:	bf00      	nop
 801c2fe:	e000      	b.n	801c302 <ip4_reass+0x312>
  }

nullreturn:
 801c300:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c302:	6878      	ldr	r0, [r7, #4]
 801c304:	f7f7 fdda 	bl	8013ebc <pbuf_free>
  return NULL;
 801c308:	2300      	movs	r3, #0
}
 801c30a:	4618      	mov	r0, r3
 801c30c:	3738      	adds	r7, #56	@ 0x38
 801c30e:	46bd      	mov	sp, r7
 801c310:	bd80      	pop	{r7, pc}
 801c312:	bf00      	nop
 801c314:	080215ac 	.word	0x080215ac
 801c318:	08021738 	.word	0x08021738
 801c31c:	080215f4 	.word	0x080215f4
 801c320:	200277dc 	.word	0x200277dc
 801c324:	08021744 	.word	0x08021744

0801c328 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c328:	b580      	push	{r7, lr}
 801c32a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c32c:	2005      	movs	r0, #5
 801c32e:	f7f6 feab 	bl	8013088 <memp_malloc>
 801c332:	4603      	mov	r3, r0
}
 801c334:	4618      	mov	r0, r3
 801c336:	bd80      	pop	{r7, pc}

0801c338 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	b082      	sub	sp, #8
 801c33c:	af00      	add	r7, sp, #0
 801c33e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	2b00      	cmp	r3, #0
 801c344:	d106      	bne.n	801c354 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c346:	4b07      	ldr	r3, [pc, #28]	@ (801c364 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c348:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c34c:	4906      	ldr	r1, [pc, #24]	@ (801c368 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c34e:	4807      	ldr	r0, [pc, #28]	@ (801c36c <ip_frag_free_pbuf_custom_ref+0x34>)
 801c350:	f001 fcc0 	bl	801dcd4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c354:	6879      	ldr	r1, [r7, #4]
 801c356:	2005      	movs	r0, #5
 801c358:	f7f6 ff0c 	bl	8013174 <memp_free>
}
 801c35c:	bf00      	nop
 801c35e:	3708      	adds	r7, #8
 801c360:	46bd      	mov	sp, r7
 801c362:	bd80      	pop	{r7, pc}
 801c364:	080215ac 	.word	0x080215ac
 801c368:	08021764 	.word	0x08021764
 801c36c:	080215f4 	.word	0x080215f4

0801c370 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c370:	b580      	push	{r7, lr}
 801c372:	b084      	sub	sp, #16
 801c374:	af00      	add	r7, sp, #0
 801c376:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d106      	bne.n	801c390 <ipfrag_free_pbuf_custom+0x20>
 801c382:	4b11      	ldr	r3, [pc, #68]	@ (801c3c8 <ipfrag_free_pbuf_custom+0x58>)
 801c384:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c388:	4910      	ldr	r1, [pc, #64]	@ (801c3cc <ipfrag_free_pbuf_custom+0x5c>)
 801c38a:	4811      	ldr	r0, [pc, #68]	@ (801c3d0 <ipfrag_free_pbuf_custom+0x60>)
 801c38c:	f001 fca2 	bl	801dcd4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c390:	68fa      	ldr	r2, [r7, #12]
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	429a      	cmp	r2, r3
 801c396:	d006      	beq.n	801c3a6 <ipfrag_free_pbuf_custom+0x36>
 801c398:	4b0b      	ldr	r3, [pc, #44]	@ (801c3c8 <ipfrag_free_pbuf_custom+0x58>)
 801c39a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c39e:	490d      	ldr	r1, [pc, #52]	@ (801c3d4 <ipfrag_free_pbuf_custom+0x64>)
 801c3a0:	480b      	ldr	r0, [pc, #44]	@ (801c3d0 <ipfrag_free_pbuf_custom+0x60>)
 801c3a2:	f001 fc97 	bl	801dcd4 <iprintf>
  if (pcr->original != NULL) {
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	695b      	ldr	r3, [r3, #20]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d004      	beq.n	801c3b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	695b      	ldr	r3, [r3, #20]
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	f7f7 fd82 	bl	8013ebc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c3b8:	68f8      	ldr	r0, [r7, #12]
 801c3ba:	f7ff ffbd 	bl	801c338 <ip_frag_free_pbuf_custom_ref>
}
 801c3be:	bf00      	nop
 801c3c0:	3710      	adds	r7, #16
 801c3c2:	46bd      	mov	sp, r7
 801c3c4:	bd80      	pop	{r7, pc}
 801c3c6:	bf00      	nop
 801c3c8:	080215ac 	.word	0x080215ac
 801c3cc:	08021770 	.word	0x08021770
 801c3d0:	080215f4 	.word	0x080215f4
 801c3d4:	0802177c 	.word	0x0802177c

0801c3d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c3d8:	b580      	push	{r7, lr}
 801c3da:	b094      	sub	sp, #80	@ 0x50
 801c3dc:	af02      	add	r7, sp, #8
 801c3de:	60f8      	str	r0, [r7, #12]
 801c3e0:	60b9      	str	r1, [r7, #8]
 801c3e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c3ea:	68bb      	ldr	r3, [r7, #8]
 801c3ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c3ee:	3b14      	subs	r3, #20
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	da00      	bge.n	801c3f6 <ip4_frag+0x1e>
 801c3f4:	3307      	adds	r3, #7
 801c3f6:	10db      	asrs	r3, r3, #3
 801c3f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c3fa:	2314      	movs	r3, #20
 801c3fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c3fe:	68fb      	ldr	r3, [r7, #12]
 801c400:	685b      	ldr	r3, [r3, #4]
 801c402:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801c404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c406:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c40a:	781b      	ldrb	r3, [r3, #0]
 801c40c:	f003 030f 	and.w	r3, r3, #15
 801c410:	b2db      	uxtb	r3, r3
 801c412:	009b      	lsls	r3, r3, #2
 801c414:	b2db      	uxtb	r3, r3
 801c416:	2b14      	cmp	r3, #20
 801c418:	d002      	beq.n	801c420 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c41a:	f06f 0305 	mvn.w	r3, #5
 801c41e:	e110      	b.n	801c642 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	895b      	ldrh	r3, [r3, #10]
 801c424:	2b13      	cmp	r3, #19
 801c426:	d809      	bhi.n	801c43c <ip4_frag+0x64>
 801c428:	4b88      	ldr	r3, [pc, #544]	@ (801c64c <ip4_frag+0x274>)
 801c42a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c42e:	4988      	ldr	r1, [pc, #544]	@ (801c650 <ip4_frag+0x278>)
 801c430:	4888      	ldr	r0, [pc, #544]	@ (801c654 <ip4_frag+0x27c>)
 801c432:	f001 fc4f 	bl	801dcd4 <iprintf>
 801c436:	f06f 0305 	mvn.w	r3, #5
 801c43a:	e102      	b.n	801c642 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c43e:	88db      	ldrh	r3, [r3, #6]
 801c440:	b29b      	uxth	r3, r3
 801c442:	4618      	mov	r0, r3
 801c444:	f7f6 f94c 	bl	80126e0 <lwip_htons>
 801c448:	4603      	mov	r3, r0
 801c44a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801c44c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c44e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c452:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c456:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c45c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	891b      	ldrh	r3, [r3, #8]
 801c462:	3b14      	subs	r3, #20
 801c464:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801c468:	e0e1      	b.n	801c62e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c46a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c46c:	00db      	lsls	r3, r3, #3
 801c46e:	b29b      	uxth	r3, r3
 801c470:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c474:	4293      	cmp	r3, r2
 801c476:	bf28      	it	cs
 801c478:	4613      	movcs	r3, r2
 801c47a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c47c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c480:	2114      	movs	r1, #20
 801c482:	200e      	movs	r0, #14
 801c484:	f7f7 fa36 	bl	80138f4 <pbuf_alloc>
 801c488:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801c48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	f000 80d5 	beq.w	801c63c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c494:	895b      	ldrh	r3, [r3, #10]
 801c496:	2b13      	cmp	r3, #19
 801c498:	d806      	bhi.n	801c4a8 <ip4_frag+0xd0>
 801c49a:	4b6c      	ldr	r3, [pc, #432]	@ (801c64c <ip4_frag+0x274>)
 801c49c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c4a0:	496d      	ldr	r1, [pc, #436]	@ (801c658 <ip4_frag+0x280>)
 801c4a2:	486c      	ldr	r0, [pc, #432]	@ (801c654 <ip4_frag+0x27c>)
 801c4a4:	f001 fc16 	bl	801dcd4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4aa:	685b      	ldr	r3, [r3, #4]
 801c4ac:	2214      	movs	r2, #20
 801c4ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	f001 fd48 	bl	801df46 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4b8:	685b      	ldr	r3, [r3, #4]
 801c4ba:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801c4bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c4be:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801c4c2:	e064      	b.n	801c58e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	895a      	ldrh	r2, [r3, #10]
 801c4c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c4ca:	1ad3      	subs	r3, r2, r3
 801c4cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	895b      	ldrh	r3, [r3, #10]
 801c4d2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c4d4:	429a      	cmp	r2, r3
 801c4d6:	d906      	bls.n	801c4e6 <ip4_frag+0x10e>
 801c4d8:	4b5c      	ldr	r3, [pc, #368]	@ (801c64c <ip4_frag+0x274>)
 801c4da:	f240 322d 	movw	r2, #813	@ 0x32d
 801c4de:	495f      	ldr	r1, [pc, #380]	@ (801c65c <ip4_frag+0x284>)
 801c4e0:	485c      	ldr	r0, [pc, #368]	@ (801c654 <ip4_frag+0x27c>)
 801c4e2:	f001 fbf7 	bl	801dcd4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c4e6:	8bfa      	ldrh	r2, [r7, #30]
 801c4e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c4ec:	4293      	cmp	r3, r2
 801c4ee:	bf28      	it	cs
 801c4f0:	4613      	movcs	r3, r2
 801c4f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c4f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d105      	bne.n	801c50a <ip4_frag+0x132>
        poff = 0;
 801c4fe:	2300      	movs	r3, #0
 801c500:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	60fb      	str	r3, [r7, #12]
        continue;
 801c508:	e041      	b.n	801c58e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c50a:	f7ff ff0d 	bl	801c328 <ip_frag_alloc_pbuf_custom_ref>
 801c50e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c510:	69bb      	ldr	r3, [r7, #24]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d103      	bne.n	801c51e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c516:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c518:	f7f7 fcd0 	bl	8013ebc <pbuf_free>
        goto memerr;
 801c51c:	e08f      	b.n	801c63e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c51e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c524:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c526:	4413      	add	r3, r2
 801c528:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c52c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c530:	9201      	str	r2, [sp, #4]
 801c532:	9300      	str	r3, [sp, #0]
 801c534:	4603      	mov	r3, r0
 801c536:	2241      	movs	r2, #65	@ 0x41
 801c538:	2000      	movs	r0, #0
 801c53a:	f7f7 fb05 	bl	8013b48 <pbuf_alloced_custom>
 801c53e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c540:	697b      	ldr	r3, [r7, #20]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d106      	bne.n	801c554 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c546:	69b8      	ldr	r0, [r7, #24]
 801c548:	f7ff fef6 	bl	801c338 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c54c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c54e:	f7f7 fcb5 	bl	8013ebc <pbuf_free>
        goto memerr;
 801c552:	e074      	b.n	801c63e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c554:	68f8      	ldr	r0, [r7, #12]
 801c556:	f7f7 fd57 	bl	8014008 <pbuf_ref>
      pcr->original = p;
 801c55a:	69bb      	ldr	r3, [r7, #24]
 801c55c:	68fa      	ldr	r2, [r7, #12]
 801c55e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c560:	69bb      	ldr	r3, [r7, #24]
 801c562:	4a3f      	ldr	r2, [pc, #252]	@ (801c660 <ip4_frag+0x288>)
 801c564:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c566:	6979      	ldr	r1, [r7, #20]
 801c568:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c56a:	f7f7 fd75 	bl	8014058 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c56e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c572:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c576:	1ad3      	subs	r3, r2, r3
 801c578:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801c57c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c580:	2b00      	cmp	r3, #0
 801c582:	d004      	beq.n	801c58e <ip4_frag+0x1b6>
        poff = 0;
 801c584:	2300      	movs	r3, #0
 801c586:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c58e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c592:	2b00      	cmp	r3, #0
 801c594:	d196      	bne.n	801c4c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c596:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c598:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c59c:	4413      	add	r3, r2
 801c59e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c5a0:	68bb      	ldr	r3, [r7, #8]
 801c5a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c5a4:	f1a3 0213 	sub.w	r2, r3, #19
 801c5a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c5ac:	429a      	cmp	r2, r3
 801c5ae:	bfcc      	ite	gt
 801c5b0:	2301      	movgt	r3, #1
 801c5b2:	2300      	movle	r3, #0
 801c5b4:	b2db      	uxtb	r3, r3
 801c5b6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c5b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c5bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c5c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801c5c2:	6a3b      	ldr	r3, [r7, #32]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d002      	beq.n	801c5ce <ip4_frag+0x1f6>
 801c5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d003      	beq.n	801c5d6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c5ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c5d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c5d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c5d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c5d8:	4618      	mov	r0, r3
 801c5da:	f7f6 f881 	bl	80126e0 <lwip_htons>
 801c5de:	4603      	mov	r3, r0
 801c5e0:	461a      	mov	r2, r3
 801c5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5e4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c5e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c5e8:	3314      	adds	r3, #20
 801c5ea:	b29b      	uxth	r3, r3
 801c5ec:	4618      	mov	r0, r3
 801c5ee:	f7f6 f877 	bl	80126e0 <lwip_htons>
 801c5f2:	4603      	mov	r3, r0
 801c5f4:	461a      	mov	r2, r3
 801c5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5f8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5fc:	2200      	movs	r2, #0
 801c5fe:	729a      	strb	r2, [r3, #10]
 801c600:	2200      	movs	r2, #0
 801c602:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c604:	68bb      	ldr	r3, [r7, #8]
 801c606:	695b      	ldr	r3, [r3, #20]
 801c608:	687a      	ldr	r2, [r7, #4]
 801c60a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c60c:	68b8      	ldr	r0, [r7, #8]
 801c60e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c610:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c612:	f7f7 fc53 	bl	8013ebc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c616:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c61a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c61c:	1ad3      	subs	r3, r2, r3
 801c61e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801c622:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801c626:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c628:	4413      	add	r3, r2
 801c62a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801c62e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c632:	2b00      	cmp	r3, #0
 801c634:	f47f af19 	bne.w	801c46a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c638:	2300      	movs	r3, #0
 801c63a:	e002      	b.n	801c642 <ip4_frag+0x26a>
      goto memerr;
 801c63c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c63e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c642:	4618      	mov	r0, r3
 801c644:	3748      	adds	r7, #72	@ 0x48
 801c646:	46bd      	mov	sp, r7
 801c648:	bd80      	pop	{r7, pc}
 801c64a:	bf00      	nop
 801c64c:	080215ac 	.word	0x080215ac
 801c650:	08021788 	.word	0x08021788
 801c654:	080215f4 	.word	0x080215f4
 801c658:	080217a4 	.word	0x080217a4
 801c65c:	080217c4 	.word	0x080217c4
 801c660:	0801c371 	.word	0x0801c371

0801c664 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c664:	b580      	push	{r7, lr}
 801c666:	b086      	sub	sp, #24
 801c668:	af00      	add	r7, sp, #0
 801c66a:	6078      	str	r0, [r7, #4]
 801c66c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c66e:	230e      	movs	r3, #14
 801c670:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	895b      	ldrh	r3, [r3, #10]
 801c676:	2b0e      	cmp	r3, #14
 801c678:	d96e      	bls.n	801c758 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	7bdb      	ldrb	r3, [r3, #15]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d106      	bne.n	801c690 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c682:	683b      	ldr	r3, [r7, #0]
 801c684:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c688:	3301      	adds	r3, #1
 801c68a:	b2da      	uxtb	r2, r3
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	685b      	ldr	r3, [r3, #4]
 801c694:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c696:	693b      	ldr	r3, [r7, #16]
 801c698:	7b1a      	ldrb	r2, [r3, #12]
 801c69a:	7b5b      	ldrb	r3, [r3, #13]
 801c69c:	021b      	lsls	r3, r3, #8
 801c69e:	4313      	orrs	r3, r2
 801c6a0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c6a2:	693b      	ldr	r3, [r7, #16]
 801c6a4:	781b      	ldrb	r3, [r3, #0]
 801c6a6:	f003 0301 	and.w	r3, r3, #1
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d023      	beq.n	801c6f6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c6ae:	693b      	ldr	r3, [r7, #16]
 801c6b0:	781b      	ldrb	r3, [r3, #0]
 801c6b2:	2b01      	cmp	r3, #1
 801c6b4:	d10f      	bne.n	801c6d6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c6b6:	693b      	ldr	r3, [r7, #16]
 801c6b8:	785b      	ldrb	r3, [r3, #1]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d11b      	bne.n	801c6f6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c6be:	693b      	ldr	r3, [r7, #16]
 801c6c0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c6c2:	2b5e      	cmp	r3, #94	@ 0x5e
 801c6c4:	d117      	bne.n	801c6f6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	7b5b      	ldrb	r3, [r3, #13]
 801c6ca:	f043 0310 	orr.w	r3, r3, #16
 801c6ce:	b2da      	uxtb	r2, r3
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	735a      	strb	r2, [r3, #13]
 801c6d4:	e00f      	b.n	801c6f6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c6d6:	693b      	ldr	r3, [r7, #16]
 801c6d8:	2206      	movs	r2, #6
 801c6da:	4928      	ldr	r1, [pc, #160]	@ (801c77c <ethernet_input+0x118>)
 801c6dc:	4618      	mov	r0, r3
 801c6de:	f001 fb4e 	bl	801dd7e <memcmp>
 801c6e2:	4603      	mov	r3, r0
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d106      	bne.n	801c6f6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	7b5b      	ldrb	r3, [r3, #13]
 801c6ec:	f043 0308 	orr.w	r3, r3, #8
 801c6f0:	b2da      	uxtb	r2, r3
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c6f6:	89fb      	ldrh	r3, [r7, #14]
 801c6f8:	2b08      	cmp	r3, #8
 801c6fa:	d003      	beq.n	801c704 <ethernet_input+0xa0>
 801c6fc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801c700:	d014      	beq.n	801c72c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c702:	e032      	b.n	801c76a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c704:	683b      	ldr	r3, [r7, #0]
 801c706:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c70a:	f003 0308 	and.w	r3, r3, #8
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d024      	beq.n	801c75c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c712:	8afb      	ldrh	r3, [r7, #22]
 801c714:	4619      	mov	r1, r3
 801c716:	6878      	ldr	r0, [r7, #4]
 801c718:	f7f7 fb4a 	bl	8013db0 <pbuf_remove_header>
 801c71c:	4603      	mov	r3, r0
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d11e      	bne.n	801c760 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c722:	6839      	ldr	r1, [r7, #0]
 801c724:	6878      	ldr	r0, [r7, #4]
 801c726:	f7fe ff21 	bl	801b56c <ip4_input>
      break;
 801c72a:	e013      	b.n	801c754 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c72c:	683b      	ldr	r3, [r7, #0]
 801c72e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c732:	f003 0308 	and.w	r3, r3, #8
 801c736:	2b00      	cmp	r3, #0
 801c738:	d014      	beq.n	801c764 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c73a:	8afb      	ldrh	r3, [r7, #22]
 801c73c:	4619      	mov	r1, r3
 801c73e:	6878      	ldr	r0, [r7, #4]
 801c740:	f7f7 fb36 	bl	8013db0 <pbuf_remove_header>
 801c744:	4603      	mov	r3, r0
 801c746:	2b00      	cmp	r3, #0
 801c748:	d10e      	bne.n	801c768 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c74a:	6839      	ldr	r1, [r7, #0]
 801c74c:	6878      	ldr	r0, [r7, #4]
 801c74e:	f7fe f8c1 	bl	801a8d4 <etharp_input>
      break;
 801c752:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c754:	2300      	movs	r3, #0
 801c756:	e00c      	b.n	801c772 <ethernet_input+0x10e>
    goto free_and_return;
 801c758:	bf00      	nop
 801c75a:	e006      	b.n	801c76a <ethernet_input+0x106>
        goto free_and_return;
 801c75c:	bf00      	nop
 801c75e:	e004      	b.n	801c76a <ethernet_input+0x106>
        goto free_and_return;
 801c760:	bf00      	nop
 801c762:	e002      	b.n	801c76a <ethernet_input+0x106>
        goto free_and_return;
 801c764:	bf00      	nop
 801c766:	e000      	b.n	801c76a <ethernet_input+0x106>
        goto free_and_return;
 801c768:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c76a:	6878      	ldr	r0, [r7, #4]
 801c76c:	f7f7 fba6 	bl	8013ebc <pbuf_free>
  return ERR_OK;
 801c770:	2300      	movs	r3, #0
}
 801c772:	4618      	mov	r0, r3
 801c774:	3718      	adds	r7, #24
 801c776:	46bd      	mov	sp, r7
 801c778:	bd80      	pop	{r7, pc}
 801c77a:	bf00      	nop
 801c77c:	08021c98 	.word	0x08021c98

0801c780 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c780:	b580      	push	{r7, lr}
 801c782:	b086      	sub	sp, #24
 801c784:	af00      	add	r7, sp, #0
 801c786:	60f8      	str	r0, [r7, #12]
 801c788:	60b9      	str	r1, [r7, #8]
 801c78a:	607a      	str	r2, [r7, #4]
 801c78c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c78e:	8c3b      	ldrh	r3, [r7, #32]
 801c790:	4618      	mov	r0, r3
 801c792:	f7f5 ffa5 	bl	80126e0 <lwip_htons>
 801c796:	4603      	mov	r3, r0
 801c798:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c79a:	210e      	movs	r1, #14
 801c79c:	68b8      	ldr	r0, [r7, #8]
 801c79e:	f7f7 faf7 	bl	8013d90 <pbuf_add_header>
 801c7a2:	4603      	mov	r3, r0
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d125      	bne.n	801c7f4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c7a8:	68bb      	ldr	r3, [r7, #8]
 801c7aa:	685b      	ldr	r3, [r3, #4]
 801c7ac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c7ae:	693b      	ldr	r3, [r7, #16]
 801c7b0:	8afa      	ldrh	r2, [r7, #22]
 801c7b2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c7b4:	693b      	ldr	r3, [r7, #16]
 801c7b6:	2206      	movs	r2, #6
 801c7b8:	6839      	ldr	r1, [r7, #0]
 801c7ba:	4618      	mov	r0, r3
 801c7bc:	f001 fbc3 	bl	801df46 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c7c0:	693b      	ldr	r3, [r7, #16]
 801c7c2:	3306      	adds	r3, #6
 801c7c4:	2206      	movs	r2, #6
 801c7c6:	6879      	ldr	r1, [r7, #4]
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	f001 fbbc 	bl	801df46 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c7d4:	2b06      	cmp	r3, #6
 801c7d6:	d006      	beq.n	801c7e6 <ethernet_output+0x66>
 801c7d8:	4b0a      	ldr	r3, [pc, #40]	@ (801c804 <ethernet_output+0x84>)
 801c7da:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801c7de:	490a      	ldr	r1, [pc, #40]	@ (801c808 <ethernet_output+0x88>)
 801c7e0:	480a      	ldr	r0, [pc, #40]	@ (801c80c <ethernet_output+0x8c>)
 801c7e2:	f001 fa77 	bl	801dcd4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	699b      	ldr	r3, [r3, #24]
 801c7ea:	68b9      	ldr	r1, [r7, #8]
 801c7ec:	68f8      	ldr	r0, [r7, #12]
 801c7ee:	4798      	blx	r3
 801c7f0:	4603      	mov	r3, r0
 801c7f2:	e002      	b.n	801c7fa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c7f4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c7f6:	f06f 0301 	mvn.w	r3, #1
}
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	3718      	adds	r7, #24
 801c7fe:	46bd      	mov	sp, r7
 801c800:	bd80      	pop	{r7, pc}
 801c802:	bf00      	nop
 801c804:	080217d4 	.word	0x080217d4
 801c808:	0802180c 	.word	0x0802180c
 801c80c:	08021840 	.word	0x08021840

0801c810 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c810:	b580      	push	{r7, lr}
 801c812:	b082      	sub	sp, #8
 801c814:	af00      	add	r7, sp, #0
 801c816:	6078      	str	r0, [r7, #4]
 801c818:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801c81a:	683b      	ldr	r3, [r7, #0]
 801c81c:	2200      	movs	r2, #0
 801c81e:	2104      	movs	r1, #4
 801c820:	4618      	mov	r0, r3
 801c822:	f7f2 f8ed 	bl	800ea00 <osMessageQueueNew>
 801c826:	4602      	mov	r2, r0
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	2b00      	cmp	r3, #0
 801c832:	d102      	bne.n	801c83a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801c834:	f04f 33ff 	mov.w	r3, #4294967295
 801c838:	e000      	b.n	801c83c <sys_mbox_new+0x2c>

  return ERR_OK;
 801c83a:	2300      	movs	r3, #0
}
 801c83c:	4618      	mov	r0, r3
 801c83e:	3708      	adds	r7, #8
 801c840:	46bd      	mov	sp, r7
 801c842:	bd80      	pop	{r7, pc}

0801c844 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c844:	b580      	push	{r7, lr}
 801c846:	b084      	sub	sp, #16
 801c848:	af00      	add	r7, sp, #0
 801c84a:	6078      	str	r0, [r7, #4]
 801c84c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	6818      	ldr	r0, [r3, #0]
 801c852:	4639      	mov	r1, r7
 801c854:	2300      	movs	r3, #0
 801c856:	2200      	movs	r2, #0
 801c858:	f7f2 f958 	bl	800eb0c <osMessageQueuePut>
 801c85c:	4603      	mov	r3, r0
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d102      	bne.n	801c868 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801c862:	2300      	movs	r3, #0
 801c864:	73fb      	strb	r3, [r7, #15]
 801c866:	e001      	b.n	801c86c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c868:	23ff      	movs	r3, #255	@ 0xff
 801c86a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c86c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c870:	4618      	mov	r0, r3
 801c872:	3710      	adds	r7, #16
 801c874:	46bd      	mov	sp, r7
 801c876:	bd80      	pop	{r7, pc}

0801c878 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c878:	b580      	push	{r7, lr}
 801c87a:	b086      	sub	sp, #24
 801c87c:	af00      	add	r7, sp, #0
 801c87e:	60f8      	str	r0, [r7, #12]
 801c880:	60b9      	str	r1, [r7, #8]
 801c882:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801c884:	f7f1 fd1e 	bl	800e2c4 <osKernelGetTickCount>
 801c888:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d013      	beq.n	801c8b8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	6818      	ldr	r0, [r3, #0]
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	2200      	movs	r2, #0
 801c898:	68b9      	ldr	r1, [r7, #8]
 801c89a:	f7f2 f9ab 	bl	800ebf4 <osMessageQueueGet>
 801c89e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801c8a0:	693b      	ldr	r3, [r7, #16]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d105      	bne.n	801c8b2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801c8a6:	f7f1 fd0d 	bl	800e2c4 <osKernelGetTickCount>
 801c8aa:	4602      	mov	r2, r0
 801c8ac:	697b      	ldr	r3, [r7, #20]
 801c8ae:	1ad3      	subs	r3, r2, r3
 801c8b0:	e00f      	b.n	801c8d2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c8b2:	f04f 33ff 	mov.w	r3, #4294967295
 801c8b6:	e00c      	b.n	801c8d2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	6818      	ldr	r0, [r3, #0]
 801c8bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c8c0:	2200      	movs	r2, #0
 801c8c2:	68b9      	ldr	r1, [r7, #8]
 801c8c4:	f7f2 f996 	bl	800ebf4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801c8c8:	f7f1 fcfc 	bl	800e2c4 <osKernelGetTickCount>
 801c8cc:	4602      	mov	r2, r0
 801c8ce:	697b      	ldr	r3, [r7, #20]
 801c8d0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	3718      	adds	r7, #24
 801c8d6:	46bd      	mov	sp, r7
 801c8d8:	bd80      	pop	{r7, pc}

0801c8da <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c8da:	b480      	push	{r7}
 801c8dc:	b083      	sub	sp, #12
 801c8de:	af00      	add	r7, sp, #0
 801c8e0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	d101      	bne.n	801c8ee <sys_mbox_valid+0x14>
    return 0;
 801c8ea:	2300      	movs	r3, #0
 801c8ec:	e000      	b.n	801c8f0 <sys_mbox_valid+0x16>
  else
    return 1;
 801c8ee:	2301      	movs	r3, #1
}
 801c8f0:	4618      	mov	r0, r3
 801c8f2:	370c      	adds	r7, #12
 801c8f4:	46bd      	mov	sp, r7
 801c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8fa:	4770      	bx	lr

0801c8fc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801c900:	2000      	movs	r0, #0
 801c902:	f7f1 fddb 	bl	800e4bc <osMutexNew>
 801c906:	4603      	mov	r3, r0
 801c908:	4a01      	ldr	r2, [pc, #4]	@ (801c910 <sys_init+0x14>)
 801c90a:	6013      	str	r3, [r2, #0]
#endif
}
 801c90c:	bf00      	nop
 801c90e:	bd80      	pop	{r7, pc}
 801c910:	200277e4 	.word	0x200277e4

0801c914 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c914:	b580      	push	{r7, lr}
 801c916:	b082      	sub	sp, #8
 801c918:	af00      	add	r7, sp, #0
 801c91a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801c91c:	2000      	movs	r0, #0
 801c91e:	f7f1 fdcd 	bl	800e4bc <osMutexNew>
 801c922:	4602      	mov	r2, r0
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d102      	bne.n	801c936 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c930:	f04f 33ff 	mov.w	r3, #4294967295
 801c934:	e000      	b.n	801c938 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c936:	2300      	movs	r3, #0
}
 801c938:	4618      	mov	r0, r3
 801c93a:	3708      	adds	r7, #8
 801c93c:	46bd      	mov	sp, r7
 801c93e:	bd80      	pop	{r7, pc}

0801c940 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c940:	b580      	push	{r7, lr}
 801c942:	b082      	sub	sp, #8
 801c944:	af00      	add	r7, sp, #0
 801c946:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	f04f 31ff 	mov.w	r1, #4294967295
 801c950:	4618      	mov	r0, r3
 801c952:	f7f1 fe4d 	bl	800e5f0 <osMutexAcquire>
#endif
}
 801c956:	bf00      	nop
 801c958:	3708      	adds	r7, #8
 801c95a:	46bd      	mov	sp, r7
 801c95c:	bd80      	pop	{r7, pc}

0801c95e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c95e:	b580      	push	{r7, lr}
 801c960:	b082      	sub	sp, #8
 801c962:	af00      	add	r7, sp, #0
 801c964:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	4618      	mov	r0, r3
 801c96c:	f7f1 fe9e 	bl	800e6ac <osMutexRelease>
}
 801c970:	bf00      	nop
 801c972:	3708      	adds	r7, #8
 801c974:	46bd      	mov	sp, r7
 801c976:	bd80      	pop	{r7, pc}

0801c978 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c978:	b580      	push	{r7, lr}
 801c97a:	b08e      	sub	sp, #56	@ 0x38
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	60f8      	str	r0, [r7, #12]
 801c980:	60b9      	str	r1, [r7, #8]
 801c982:	607a      	str	r2, [r7, #4]
 801c984:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801c986:	f107 0314 	add.w	r3, r7, #20
 801c98a:	2224      	movs	r2, #36	@ 0x24
 801c98c:	2100      	movs	r1, #0
 801c98e:	4618      	mov	r0, r3
 801c990:	f001 fa05 	bl	801dd9e <memset>
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	617b      	str	r3, [r7, #20]
 801c998:	683b      	ldr	r3, [r7, #0]
 801c99a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c99c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c99e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801c9a0:	f107 0314 	add.w	r3, r7, #20
 801c9a4:	461a      	mov	r2, r3
 801c9a6:	6879      	ldr	r1, [r7, #4]
 801c9a8:	68b8      	ldr	r0, [r7, #8]
 801c9aa:	f7f1 fcb3 	bl	800e314 <osThreadNew>
 801c9ae:	4603      	mov	r3, r0
#endif
}
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	3738      	adds	r7, #56	@ 0x38
 801c9b4:	46bd      	mov	sp, r7
 801c9b6:	bd80      	pop	{r7, pc}

0801c9b8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801c9bc:	4b04      	ldr	r3, [pc, #16]	@ (801c9d0 <sys_arch_protect+0x18>)
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	f04f 31ff 	mov.w	r1, #4294967295
 801c9c4:	4618      	mov	r0, r3
 801c9c6:	f7f1 fe13 	bl	800e5f0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801c9ca:	2301      	movs	r3, #1
}
 801c9cc:	4618      	mov	r0, r3
 801c9ce:	bd80      	pop	{r7, pc}
 801c9d0:	200277e4 	.word	0x200277e4

0801c9d4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c9d4:	b580      	push	{r7, lr}
 801c9d6:	b082      	sub	sp, #8
 801c9d8:	af00      	add	r7, sp, #0
 801c9da:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c9dc:	4b04      	ldr	r3, [pc, #16]	@ (801c9f0 <sys_arch_unprotect+0x1c>)
 801c9de:	681b      	ldr	r3, [r3, #0]
 801c9e0:	4618      	mov	r0, r3
 801c9e2:	f7f1 fe63 	bl	800e6ac <osMutexRelease>
}
 801c9e6:	bf00      	nop
 801c9e8:	3708      	adds	r7, #8
 801c9ea:	46bd      	mov	sp, r7
 801c9ec:	bd80      	pop	{r7, pc}
 801c9ee:	bf00      	nop
 801c9f0:	200277e4 	.word	0x200277e4

0801c9f4 <adc_testing>:
/*
 * @brief Performs a test on the ADC peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
result_pro_t adc_testing(test_command_t* command){
 801c9f4:	b580      	push	{r7, lr}
 801c9f6:	b08c      	sub	sp, #48	@ 0x30
 801c9f8:	af00      	add	r7, sp, #0
 801c9fa:	60f8      	str	r0, [r7, #12]
 801c9fc:	60b9      	str	r1, [r7, #8]
	uint32_t adc_value;
    int32_t difference;
    HAL_StatusTypeDef status;

    // Check for valid command and bit pattern length
	if (command == NULL) {
 801c9fe:	68bb      	ldr	r3, [r7, #8]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d10b      	bne.n	801ca1c <adc_testing+0x28>
//        printf("ADC_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
        response.test_result = TEST_ERR;
 801ca04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ca08:	833b      	strh	r3, [r7, #24]
        return response;
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	461a      	mov	r2, r3
 801ca0e:	f107 0314 	add.w	r3, r7, #20
 801ca12:	6818      	ldr	r0, [r3, #0]
 801ca14:	6010      	str	r0, [r2, #0]
 801ca16:	889b      	ldrh	r3, [r3, #4]
 801ca18:	8093      	strh	r3, [r2, #4]
 801ca1a:	e0df      	b.n	801cbdc <adc_testing+0x1e8>
	}
	response.test_id = command->test_id;
 801ca1c:	68bb      	ldr	r3, [r7, #8]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	617b      	str	r3, [r7, #20]

	uint32_t expected_adc_result = command->bit_pattern[0];
 801ca22:	68bb      	ldr	r3, [r7, #8]
 801ca24:	79db      	ldrb	r3, [r3, #7]
 801ca26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t adc_tolerance = (uint32_t)(expected_adc_result * TOLERANCE_PERCENT);
 801ca28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca2a:	ee07 3a90 	vmov	s15, r3
 801ca2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ca32:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 801cbe4 <adc_testing+0x1f0>
 801ca36:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ca3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ca3e:	ee17 3a90 	vmov	r3, s15
 801ca42:	62bb      	str	r3, [r7, #40]	@ 0x28

    status = HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 801ca44:	2100      	movs	r1, #0
 801ca46:	4868      	ldr	r0, [pc, #416]	@ (801cbe8 <adc_testing+0x1f4>)
 801ca48:	f7e6 fe34 	bl	80036b4 <HAL_DAC_Start>
 801ca4c:	4603      	mov	r3, r0
 801ca4e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (status != HAL_OK) {
 801ca52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	d00d      	beq.n	801ca76 <adc_testing+0x82>
//        printf("Error: Failed to start DAC conversion. Status: %d\n\r", status); // Debug printf
    	response.test_result = TEST_FAIL;
 801ca5a:	23ff      	movs	r3, #255	@ 0xff
 801ca5c:	833b      	strh	r3, [r7, #24]
        vPortFree(command);
 801ca5e:	68b8      	ldr	r0, [r7, #8]
 801ca60:	f7f5 fb80 	bl	8012164 <vPortFree>
        return response;
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	461a      	mov	r2, r3
 801ca68:	f107 0314 	add.w	r3, r7, #20
 801ca6c:	6818      	ldr	r0, [r3, #0]
 801ca6e:	6010      	str	r0, [r2, #0]
 801ca70:	889b      	ldrh	r3, [r3, #4]
 801ca72:	8093      	strh	r3, [r2, #4]
 801ca74:	e0b2      	b.n	801cbdc <adc_testing+0x1e8>
    }

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801ca76:	2300      	movs	r3, #0
 801ca78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ca7c:	e09a      	b.n	801cbb4 <adc_testing+0x1c0>

		if(i < command->bit_pattern_length){
 801ca7e:	68bb      	ldr	r3, [r7, #8]
 801ca80:	799b      	ldrb	r3, [r3, #6]
 801ca82:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ca86:	429a      	cmp	r2, r3
 801ca88:	d215      	bcs.n	801cab6 <adc_testing+0xc2>
			// Extract the 8-bit expected ADC value from the command's bit pattern
		    expected_adc_result = command->bit_pattern[i];
 801ca8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ca8e:	68ba      	ldr	r2, [r7, #8]
 801ca90:	4413      	add	r3, r2
 801ca92:	79db      	ldrb	r3, [r3, #7]
 801ca94:	62fb      	str	r3, [r7, #44]	@ 0x2c
		    // Define a tolerance based on the expected result.
		    adc_tolerance = (uint8_t)(expected_adc_result * TOLERANCE_PERCENT);
 801ca96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca98:	ee07 3a90 	vmov	s15, r3
 801ca9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801caa0:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 801cbe4 <adc_testing+0x1f0>
 801caa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801caa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801caac:	edc7 7a01 	vstr	s15, [r7, #4]
 801cab0:	793b      	ldrb	r3, [r7, #4]
 801cab2:	b2db      	uxtb	r3, r3
 801cab4:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

	    // Set value to DAC and run
	    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, expected_adc_result);
 801cab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cab8:	2208      	movs	r2, #8
 801caba:	2100      	movs	r1, #0
 801cabc:	484a      	ldr	r0, [pc, #296]	@ (801cbe8 <adc_testing+0x1f4>)
 801cabe:	f7e6 fea6 	bl	800380e <HAL_DAC_SetValue>
	    HAL_Delay(1); // allow DAC to settle
 801cac2:	2001      	movs	r0, #1
 801cac4:	f7e5 fdb2 	bl	800262c <HAL_Delay>

	    // Start ADC conversion
	    status = HAL_ADC_Start_IT(&hadc1);
 801cac8:	4848      	ldr	r0, [pc, #288]	@ (801cbec <adc_testing+0x1f8>)
 801caca:	f7e5 fe4b 	bl	8002764 <HAL_ADC_Start_IT>
 801cace:	4603      	mov	r3, r0
 801cad0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	    if (status != HAL_OK) {
 801cad4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d010      	beq.n	801cafe <adc_testing+0x10a>
//	        printf("Error: Failed to start ADC conversion. Status: %d\n\r", status); // Debug printf
	    	HAL_ADC_Stop(&hadc1);
 801cadc:	4843      	ldr	r0, [pc, #268]	@ (801cbec <adc_testing+0x1f8>)
 801cade:	f7e5 fe0d 	bl	80026fc <HAL_ADC_Stop>
	    	response.test_result = TEST_FAIL;
 801cae2:	23ff      	movs	r3, #255	@ 0xff
 801cae4:	833b      	strh	r3, [r7, #24]
	        vPortFree(command);
 801cae6:	68b8      	ldr	r0, [r7, #8]
 801cae8:	f7f5 fb3c 	bl	8012164 <vPortFree>
	        return response;
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	461a      	mov	r2, r3
 801caf0:	f107 0314 	add.w	r3, r7, #20
 801caf4:	6818      	ldr	r0, [r3, #0]
 801caf6:	6010      	str	r0, [r2, #0]
 801caf8:	889b      	ldrh	r3, [r3, #4]
 801cafa:	8093      	strh	r3, [r2, #4]
 801cafc:	e06e      	b.n	801cbdc <adc_testing+0x1e8>
	    }

	    // waiting for the ADC conversion to complete and give a semaphore
	    if (xSemaphoreTake(AdcSemHandle, HAL_MAX_DELAY) == pdPASS){
 801cafe:	4b3c      	ldr	r3, [pc, #240]	@ (801cbf0 <adc_testing+0x1fc>)
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	f04f 31ff 	mov.w	r1, #4294967295
 801cb06:	4618      	mov	r0, r3
 801cb08:	f7f2 ff88 	bl	800fa1c <xQueueSemaphoreTake>
 801cb0c:	4603      	mov	r3, r0
 801cb0e:	2b01      	cmp	r3, #1
 801cb10:	d111      	bne.n	801cb36 <adc_testing+0x142>
		  // Get the converted value
		  adc_value = HAL_ADC_GetValue(&hadc1);
 801cb12:	4836      	ldr	r0, [pc, #216]	@ (801cbec <adc_testing+0x1f8>)
 801cb14:	f7e6 f80e 	bl	8002b34 <HAL_ADC_GetValue>
 801cb18:	6238      	str	r0, [r7, #32]
	         vPortFree(command);
	         return response;
		}

		// Compare the result with the expected value, within a tolerance
		difference = adc_value - expected_adc_result;
 801cb1a:	6a3a      	ldr	r2, [r7, #32]
 801cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb1e:	1ad3      	subs	r3, r2, r3
 801cb20:	61fb      	str	r3, [r7, #28]
		difference = (difference < 0) ? -difference : difference; //absolute value of the difference
 801cb22:	69fb      	ldr	r3, [r7, #28]
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	bfb8      	it	lt
 801cb28:	425b      	neglt	r3, r3
 801cb2a:	61fb      	str	r3, [r7, #28]

		if (difference > adc_tolerance)
 801cb2c:	69fb      	ldr	r3, [r7, #28]
 801cb2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cb30:	429a      	cmp	r2, r3
 801cb32:	d222      	bcs.n	801cb7a <adc_testing+0x186>
 801cb34:	e010      	b.n	801cb58 <adc_testing+0x164>
	         HAL_ADC_Stop(&hadc1);
 801cb36:	482d      	ldr	r0, [pc, #180]	@ (801cbec <adc_testing+0x1f8>)
 801cb38:	f7e5 fde0 	bl	80026fc <HAL_ADC_Stop>
	         response.test_result = TEST_FAIL;
 801cb3c:	23ff      	movs	r3, #255	@ 0xff
 801cb3e:	833b      	strh	r3, [r7, #24]
	         vPortFree(command);
 801cb40:	68b8      	ldr	r0, [r7, #8]
 801cb42:	f7f5 fb0f 	bl	8012164 <vPortFree>
	         return response;
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	461a      	mov	r2, r3
 801cb4a:	f107 0314 	add.w	r3, r7, #20
 801cb4e:	6818      	ldr	r0, [r3, #0]
 801cb50:	6010      	str	r0, [r2, #0]
 801cb52:	889b      	ldrh	r3, [r3, #4]
 801cb54:	8093      	strh	r3, [r2, #4]
 801cb56:	e041      	b.n	801cbdc <adc_testing+0x1e8>
		{
//			  printf("Test failed on iteration %u- Expected Value: %u, ADC value: %lu.\n\r",i+1, expected_adc_result, adc_value); // Debug printf
			  HAL_ADC_Stop(&hadc1);
 801cb58:	4824      	ldr	r0, [pc, #144]	@ (801cbec <adc_testing+0x1f8>)
 801cb5a:	f7e5 fdcf 	bl	80026fc <HAL_ADC_Stop>
			  response.test_result = TEST_FAIL;
 801cb5e:	23ff      	movs	r3, #255	@ 0xff
 801cb60:	833b      	strh	r3, [r7, #24]
			  vPortFree(command);
 801cb62:	68b8      	ldr	r0, [r7, #8]
 801cb64:	f7f5 fafe 	bl	8012164 <vPortFree>
			  return response;
 801cb68:	68fb      	ldr	r3, [r7, #12]
 801cb6a:	461a      	mov	r2, r3
 801cb6c:	f107 0314 	add.w	r3, r7, #20
 801cb70:	6818      	ldr	r0, [r3, #0]
 801cb72:	6010      	str	r0, [r2, #0]
 801cb74:	889b      	ldrh	r3, [r3, #4]
 801cb76:	8093      	strh	r3, [r2, #4]
 801cb78:	e030      	b.n	801cbdc <adc_testing+0x1e8>
//				// Debug printf
//			  printf("ADC value is within tolerance for iteration %u\n\r", i+1);
//			  printf("Expected value=%d >> ADC value =%ld \n\r", expected_adc_result, adc_value);
		}
		// Stop the ADC conversion
		status = HAL_ADC_Stop(&hadc1);
 801cb7a:	481c      	ldr	r0, [pc, #112]	@ (801cbec <adc_testing+0x1f8>)
 801cb7c:	f7e5 fdbe 	bl	80026fc <HAL_ADC_Stop>
 801cb80:	4603      	mov	r3, r0
 801cb82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (status != HAL_OK) {
 801cb86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d00d      	beq.n	801cbaa <adc_testing+0x1b6>
//			printf("Warning: Failed to stop ADC conversion. Status: %d\n\r", status); // Debug printf
	         response.test_result = TEST_FAIL;
 801cb8e:	23ff      	movs	r3, #255	@ 0xff
 801cb90:	833b      	strh	r3, [r7, #24]
	         vPortFree(command);
 801cb92:	68b8      	ldr	r0, [r7, #8]
 801cb94:	f7f5 fae6 	bl	8012164 <vPortFree>
	         return response;
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	461a      	mov	r2, r3
 801cb9c:	f107 0314 	add.w	r3, r7, #20
 801cba0:	6818      	ldr	r0, [r3, #0]
 801cba2:	6010      	str	r0, [r2, #0]
 801cba4:	889b      	ldrh	r3, [r3, #4]
 801cba6:	8093      	strh	r3, [r2, #4]
 801cba8:	e018      	b.n	801cbdc <adc_testing+0x1e8>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801cbaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbae:	3301      	adds	r3, #1
 801cbb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbb4:	68bb      	ldr	r3, [r7, #8]
 801cbb6:	795b      	ldrb	r3, [r3, #5]
 801cbb8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801cbbc:	429a      	cmp	r2, r3
 801cbbe:	f4ff af5e 	bcc.w	801ca7e <adc_testing+0x8a>
		}
	} // end of iterations

	response.test_result = TEST_PASS;
 801cbc2:	2301      	movs	r3, #1
 801cbc4:	833b      	strh	r3, [r7, #24]
	vPortFree(command);
 801cbc6:	68b8      	ldr	r0, [r7, #8]
 801cbc8:	f7f5 facc 	bl	8012164 <vPortFree>
	return response;
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	461a      	mov	r2, r3
 801cbd0:	f107 0314 	add.w	r3, r7, #20
 801cbd4:	6818      	ldr	r0, [r3, #0]
 801cbd6:	6010      	str	r0, [r2, #0]
 801cbd8:	889b      	ldrh	r3, [r3, #4]
 801cbda:	8093      	strh	r3, [r2, #4]
}
 801cbdc:	68f8      	ldr	r0, [r7, #12]
 801cbde:	3730      	adds	r7, #48	@ 0x30
 801cbe0:	46bd      	mov	sp, r7
 801cbe2:	bd80      	pop	{r7, pc}
 801cbe4:	3dcccccd 	.word	0x3dcccccd
 801cbe8:	20000254 	.word	0x20000254
 801cbec:	200001e8 	.word	0x200001e8
 801cbf0:	20000ca4 	.word	0x20000ca4

0801cbf4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	b084      	sub	sp, #16
 801cbf8:	af00      	add	r7, sp, #0
 801cbfa:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801cbfc:	2300      	movs	r3, #0
 801cbfe:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(AdcSemHandle, &xHigherPriorityTaskWoken);
 801cc00:	4b0b      	ldr	r3, [pc, #44]	@ (801cc30 <HAL_ADC_ConvCpltCallback+0x3c>)
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	f107 020c 	add.w	r2, r7, #12
 801cc08:	4611      	mov	r1, r2
 801cc0a:	4618      	mov	r0, r3
 801cc0c:	f7f2 fd85 	bl	800f71a <xQueueGiveFromISR>
//	printf("ADC complete callback fired and gave a semaphore\n\r"); // Debug printf
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d007      	beq.n	801cc26 <HAL_ADC_ConvCpltCallback+0x32>
 801cc16:	4b07      	ldr	r3, [pc, #28]	@ (801cc34 <HAL_ADC_ConvCpltCallback+0x40>)
 801cc18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801cc1c:	601a      	str	r2, [r3, #0]
 801cc1e:	f3bf 8f4f 	dsb	sy
 801cc22:	f3bf 8f6f 	isb	sy
}
 801cc26:	bf00      	nop
 801cc28:	3710      	adds	r7, #16
 801cc2a:	46bd      	mov	sp, r7
 801cc2c:	bd80      	pop	{r7, pc}
 801cc2e:	bf00      	nop
 801cc30:	20000ca4 	.word	0x20000ca4
 801cc34:	e000ed04 	.word	0xe000ed04

0801cc38 <i2c_testing>:
#define I2C_SENDER 		(&hi2c4)   // Master
#define I2C_RECEIVER 	(&hi2c1)   // Slave
#define I2C_SLAVE_ADDR  (120 << 1) // left-shifted 7-bit address


result_pro_t i2c_testing(test_command_t* command){
 801cc38:	b580      	push	{r7, lr}
 801cc3a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801cc3e:	af00      	add	r7, sp, #0
 801cc40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cc44:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cc48:	6018      	str	r0, [r3, #0]
 801cc4a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cc4e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cc52:	6019      	str	r1, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801cc54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cc58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801cc62:	461a      	mov	r2, r3
 801cc64:	2100      	movs	r1, #0
 801cc66:	f001 f89a 	bl	801dd9e <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801cc6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cc6e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801cc72:	4618      	mov	r0, r3
 801cc74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801cc78:	461a      	mov	r2, r3
 801cc7a:	2100      	movs	r1, #0
 801cc7c:	f001 f88f 	bl	801dd9e <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801cc80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cc84:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cc88:	681b      	ldr	r3, [r3, #0]
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	d115      	bne.n	801ccba <i2c_testing+0x82>
//        printf("I2C_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
        response.test_result = TEST_ERR;
 801cc8e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cc92:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cc96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cc9a:	809a      	strh	r2, [r3, #4]
        return response;
 801cc9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cca0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cca4:	6819      	ldr	r1, [r3, #0]
 801cca6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ccaa:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801ccae:	460b      	mov	r3, r1
 801ccb0:	6810      	ldr	r0, [r2, #0]
 801ccb2:	6018      	str	r0, [r3, #0]
 801ccb4:	8892      	ldrh	r2, [r2, #4]
 801ccb6:	809a      	strh	r2, [r3, #4]
 801ccb8:	e180      	b.n	801cfbc <i2c_testing+0x384>
	}

	response.test_id = command->test_id;
 801ccba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ccbe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	681a      	ldr	r2, [r3, #0]
 801ccc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ccca:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801ccce:	601a      	str	r2, [r3, #0]
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801ccd0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ccd4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	1dd9      	adds	r1, r3, #7
 801ccdc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cce0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	799b      	ldrb	r3, [r3, #6]
 801cce8:	461a      	mov	r2, r3
 801ccea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801ccee:	4618      	mov	r0, r3
 801ccf0:	f001 f929 	bl	801df46 <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801ccf4:	2300      	movs	r3, #0
 801ccf6:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801ccfa:	e139      	b.n	801cf70 <i2c_testing+0x338>
//	    printf("I2C_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations); // Debug printf
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801ccfc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd00:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	799b      	ldrb	r3, [r3, #6]
 801cd08:	461a      	mov	r2, r3
 801cd0a:	f107 0310 	add.w	r3, r7, #16
 801cd0e:	2100      	movs	r1, #0
 801cd10:	4618      	mov	r0, r3
 801cd12:	f001 f844 	bl	801dd9e <memset>

	    // --- 1. START RECEIVE DMA FIRST (SLAVE) ---
	    rx_status = HAL_I2C_Slave_Receive_DMA(I2C_RECEIVER, rx_buffer, command->bit_pattern_length);
 801cd16:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd1a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cd1e:	681b      	ldr	r3, [r3, #0]
 801cd20:	799b      	ldrb	r3, [r3, #6]
 801cd22:	461a      	mov	r2, r3
 801cd24:	f107 0310 	add.w	r3, r7, #16
 801cd28:	4619      	mov	r1, r3
 801cd2a:	48a9      	ldr	r0, [pc, #676]	@ (801cfd0 <i2c_testing+0x398>)
 801cd2c:	f7e9 f9ee 	bl	800610c <HAL_I2C_Slave_Receive_DMA>
 801cd30:	4603      	mov	r3, r0
 801cd32:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 801cd36:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d01b      	beq.n	801cd76 <i2c_testing+0x13e>
//	        printf("Failed to start slave receive DMA: %d\n\r", rx_status); // Debug printf
	        response.test_result = TEST_FAIL;
 801cd3e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd42:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cd46:	22ff      	movs	r2, #255	@ 0xff
 801cd48:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801cd4a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd4e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cd52:	6818      	ldr	r0, [r3, #0]
 801cd54:	f7f5 fa06 	bl	8012164 <vPortFree>
	        return response;
 801cd58:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd5c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cd60:	6819      	ldr	r1, [r3, #0]
 801cd62:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd66:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cd6a:	460b      	mov	r3, r1
 801cd6c:	6810      	ldr	r0, [r2, #0]
 801cd6e:	6018      	str	r0, [r3, #0]
 801cd70:	8892      	ldrh	r2, [r2, #4]
 801cd72:	809a      	strh	r2, [r3, #4]
 801cd74:	e122      	b.n	801cfbc <i2c_testing+0x384>
	    }

	    // --- 2. TRANSMIT a block of data via DMA (MASTER) ---
	    tx_status = HAL_I2C_Master_Transmit_DMA(I2C_SENDER, I2C_SLAVE_ADDR, tx_buffer, command->bit_pattern_length);
 801cd76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cd7a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	799b      	ldrb	r3, [r3, #6]
 801cd82:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 801cd86:	21f0      	movs	r1, #240	@ 0xf0
 801cd88:	4892      	ldr	r0, [pc, #584]	@ (801cfd4 <i2c_testing+0x39c>)
 801cd8a:	f7e9 f8ab 	bl	8005ee4 <HAL_I2C_Master_Transmit_DMA>
 801cd8e:	4603      	mov	r3, r0
 801cd90:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 801cd94:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d021      	beq.n	801cde0 <i2c_testing+0x1a8>
//	        printf("Failed to send DMA on I2C sender: %d\n\r", tx_status); // Debug printf
	        response.test_result = TEST_FAIL;
 801cd9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cda0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cda4:	22ff      	movs	r2, #255	@ 0xff
 801cda6:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801cda8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cdac:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cdb0:	6818      	ldr	r0, [r3, #0]
 801cdb2:	f7f5 f9d7 	bl	8012164 <vPortFree>
	        i2c_reset(I2C_SENDER); // Reset the Master on error
 801cdb6:	4887      	ldr	r0, [pc, #540]	@ (801cfd4 <i2c_testing+0x39c>)
 801cdb8:	f000 f966 	bl	801d088 <i2c_reset>
	        i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801cdbc:	4884      	ldr	r0, [pc, #528]	@ (801cfd0 <i2c_testing+0x398>)
 801cdbe:	f000 f963 	bl	801d088 <i2c_reset>
	        return response;
 801cdc2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cdc6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cdca:	6819      	ldr	r1, [r3, #0]
 801cdcc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cdd0:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cdd4:	460b      	mov	r3, r1
 801cdd6:	6810      	ldr	r0, [r2, #0]
 801cdd8:	6018      	str	r0, [r3, #0]
 801cdda:	8892      	ldrh	r2, [r2, #4]
 801cddc:	809a      	strh	r2, [r3, #4]
 801cdde:	e0ed      	b.n	801cfbc <i2c_testing+0x384>
	    }

	    // --- 3. WAIT FOR BOTH TX AND RX DMA COMPLETION ---
	    if (xSemaphoreTake(I2cTxHandle, TIMEOUT) != pdPASS) {
 801cde0:	4b7d      	ldr	r3, [pc, #500]	@ (801cfd8 <i2c_testing+0x3a0>)
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801cde8:	4618      	mov	r0, r3
 801cdea:	f7f2 fe17 	bl	800fa1c <xQueueSemaphoreTake>
 801cdee:	4603      	mov	r3, r0
 801cdf0:	2b01      	cmp	r3, #1
 801cdf2:	d021      	beq.n	801ce38 <i2c_testing+0x200>
//	         printf("Master TX timeout\n\r"); // Debug printf
	         response.test_result = TEST_FAIL;
 801cdf4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cdf8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cdfc:	22ff      	movs	r2, #255	@ 0xff
 801cdfe:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801ce00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce04:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ce08:	6818      	ldr	r0, [r3, #0]
 801ce0a:	f7f5 f9ab 	bl	8012164 <vPortFree>
	         i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801ce0e:	4871      	ldr	r0, [pc, #452]	@ (801cfd4 <i2c_testing+0x39c>)
 801ce10:	f000 f93a 	bl	801d088 <i2c_reset>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801ce14:	486e      	ldr	r0, [pc, #440]	@ (801cfd0 <i2c_testing+0x398>)
 801ce16:	f000 f937 	bl	801d088 <i2c_reset>
	         return response;
 801ce1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce1e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801ce22:	6819      	ldr	r1, [r3, #0]
 801ce24:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce28:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801ce2c:	460b      	mov	r3, r1
 801ce2e:	6810      	ldr	r0, [r2, #0]
 801ce30:	6018      	str	r0, [r3, #0]
 801ce32:	8892      	ldrh	r2, [r2, #4]
 801ce34:	809a      	strh	r2, [r3, #4]
 801ce36:	e0c1      	b.n	801cfbc <i2c_testing+0x384>
	    }

	    if (xSemaphoreTake(I2cRxHandle, TIMEOUT) != pdPASS) {
 801ce38:	4b68      	ldr	r3, [pc, #416]	@ (801cfdc <i2c_testing+0x3a4>)
 801ce3a:	681b      	ldr	r3, [r3, #0]
 801ce3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801ce40:	4618      	mov	r0, r3
 801ce42:	f7f2 fdeb 	bl	800fa1c <xQueueSemaphoreTake>
 801ce46:	4603      	mov	r3, r0
 801ce48:	2b01      	cmp	r3, #1
 801ce4a:	d00f      	beq.n	801ce6c <i2c_testing+0x234>
//	         printf("Slave RX timeout\n\r"); // Debug printf
	         response.test_result = TEST_FAIL;
 801ce4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce50:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801ce54:	22ff      	movs	r2, #255	@ 0xff
 801ce56:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801ce58:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce5c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ce60:	6818      	ldr	r0, [r3, #0]
 801ce62:	f7f5 f97f 	bl	8012164 <vPortFree>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution	         return response;
 801ce66:	485a      	ldr	r0, [pc, #360]	@ (801cfd0 <i2c_testing+0x398>)
 801ce68:	f000 f90e 	bl	801d088 <i2c_reset>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801ce6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce70:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	799b      	ldrb	r3, [r3, #6]
 801ce78:	2b64      	cmp	r3, #100	@ 0x64
 801ce7a:	d941      	bls.n	801cf00 <i2c_testing+0x2c8>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801ce7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ce80:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	799b      	ldrb	r3, [r3, #6]
 801ce88:	461a      	mov	r2, r3
 801ce8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801ce8e:	4611      	mov	r1, r2
 801ce90:	4618      	mov	r0, r3
 801ce92:	f7e4 f93b 	bl	800110c <calculate_crc>
 801ce96:	4603      	mov	r3, r0
 801ce98:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801ce9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cea0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	799b      	ldrb	r3, [r3, #6]
 801cea8:	461a      	mov	r2, r3
 801ceaa:	f107 0310 	add.w	r3, r7, #16
 801ceae:	4611      	mov	r1, r2
 801ceb0:	4618      	mov	r0, r3
 801ceb2:	f7e4 f92b 	bl	800110c <calculate_crc>
 801ceb6:	4603      	mov	r3, r0
 801ceb8:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	        if (sent_crc != received_crc) {
 801cebc:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801cec0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801cec4:	429a      	cmp	r2, r3
 801cec6:	d04b      	beq.n	801cf60 <i2c_testing+0x328>
//	            printf("I2C_TEST: CRC mismatch on iteration %u.\n\r", i + 1); // Debug printf
	            response.test_result = TEST_FAIL;
 801cec8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cecc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801ced0:	22ff      	movs	r2, #255	@ 0xff
 801ced2:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801ced4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ced8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cedc:	6818      	ldr	r0, [r3, #0]
 801cede:	f7f5 f941 	bl	8012164 <vPortFree>
	            return response;
 801cee2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cee6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801ceea:	6819      	ldr	r1, [r3, #0]
 801ceec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cef0:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cef4:	460b      	mov	r3, r1
 801cef6:	6810      	ldr	r0, [r2, #0]
 801cef8:	6018      	str	r0, [r3, #0]
 801cefa:	8892      	ldrh	r2, [r2, #4]
 801cefc:	809a      	strh	r2, [r3, #4]
 801cefe:	e05d      	b.n	801cfbc <i2c_testing+0x384>
	        }
	    } else {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801cf00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf04:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	799b      	ldrb	r3, [r3, #6]
 801cf0c:	461a      	mov	r2, r3
 801cf0e:	f107 0110 	add.w	r1, r7, #16
 801cf12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801cf16:	4618      	mov	r0, r3
 801cf18:	f000 ff31 	bl	801dd7e <memcmp>
 801cf1c:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	        if (comp != 0) {
 801cf20:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d01b      	beq.n	801cf60 <i2c_testing+0x328>
//	            printf("Data mismatch on iteration %u.\n\r", i + 1); // Debug printf
	            response.test_result = TEST_FAIL;
 801cf28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf2c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cf30:	22ff      	movs	r2, #255	@ 0xff
 801cf32:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801cf34:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf38:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cf3c:	6818      	ldr	r0, [r3, #0]
 801cf3e:	f7f5 f911 	bl	8012164 <vPortFree>
	            return response;
 801cf42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf46:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cf4a:	6819      	ldr	r1, [r3, #0]
 801cf4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf50:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cf54:	460b      	mov	r3, r1
 801cf56:	6810      	ldr	r0, [r2, #0]
 801cf58:	6018      	str	r0, [r3, #0]
 801cf5a:	8892      	ldrh	r2, [r2, #4]
 801cf5c:	809a      	strh	r2, [r3, #4]
 801cf5e:	e02d      	b.n	801cfbc <i2c_testing+0x384>
	        }
	    }
//	    printf("Data Match on iteration %u.\n\r", i + 1); // Debug printf

        osDelay(10);
 801cf60:	200a      	movs	r0, #10
 801cf62:	f7f1 fa7d 	bl	800e460 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801cf66:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801cf6a:	3301      	adds	r3, #1
 801cf6c:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801cf70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf74:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	795b      	ldrb	r3, [r3, #5]
 801cf7c:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 801cf80:	429a      	cmp	r2, r3
 801cf82:	f4ff aebb 	bcc.w	801ccfc <i2c_testing+0xc4>
	}
    response.test_result = TEST_PASS;
 801cf86:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf8a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801cf8e:	2201      	movs	r2, #1
 801cf90:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 801cf92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cf96:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801cf9a:	6818      	ldr	r0, [r3, #0]
 801cf9c:	f7f5 f8e2 	bl	8012164 <vPortFree>
    return response;
 801cfa0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cfa4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cfa8:	6819      	ldr	r1, [r3, #0]
 801cfaa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cfae:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801cfb2:	460b      	mov	r3, r1
 801cfb4:	6810      	ldr	r0, [r2, #0]
 801cfb6:	6018      	str	r0, [r3, #0]
 801cfb8:	8892      	ldrh	r2, [r2, #4]
 801cfba:	809a      	strh	r2, [r3, #4]
}
 801cfbc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801cfc0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801cfc4:	6818      	ldr	r0, [r3, #0]
 801cfc6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	bd80      	pop	{r7, pc}
 801cfce:	bf00      	nop
 801cfd0:	20000268 	.word	0x20000268
 801cfd4:	200002bc 	.word	0x200002bc
 801cfd8:	20000c9c 	.word	0x20000c9c
 801cfdc:	20000c98 	.word	0x20000c98

0801cfe0 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801cfe0:	b580      	push	{r7, lr}
 801cfe2:	b084      	sub	sp, #16
 801cfe4:	af00      	add	r7, sp, #0
 801cfe6:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801cfe8:	2300      	movs	r3, #0
 801cfea:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	681a      	ldr	r2, [r3, #0]
 801cff0:	4b0d      	ldr	r3, [pc, #52]	@ (801d028 <HAL_I2C_MasterTxCpltCallback+0x48>)
 801cff2:	681b      	ldr	r3, [r3, #0]
 801cff4:	429a      	cmp	r2, r3
 801cff6:	d107      	bne.n	801d008 <HAL_I2C_MasterTxCpltCallback+0x28>
    {
        xSemaphoreGiveFromISR(I2cTxHandle, &xHigherPriorityTaskWoken);
 801cff8:	4b0c      	ldr	r3, [pc, #48]	@ (801d02c <HAL_I2C_MasterTxCpltCallback+0x4c>)
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	f107 020c 	add.w	r2, r7, #12
 801d000:	4611      	mov	r1, r2
 801d002:	4618      	mov	r0, r3
 801d004:	f7f2 fb89 	bl	800f71a <xQueueGiveFromISR>
//        printf("TX callback fired and freed the semaphore\n\r"); // Debug printf
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	d007      	beq.n	801d01e <HAL_I2C_MasterTxCpltCallback+0x3e>
 801d00e:	4b08      	ldr	r3, [pc, #32]	@ (801d030 <HAL_I2C_MasterTxCpltCallback+0x50>)
 801d010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d014:	601a      	str	r2, [r3, #0]
 801d016:	f3bf 8f4f 	dsb	sy
 801d01a:	f3bf 8f6f 	isb	sy

}
 801d01e:	bf00      	nop
 801d020:	3710      	adds	r7, #16
 801d022:	46bd      	mov	sp, r7
 801d024:	bd80      	pop	{r7, pc}
 801d026:	bf00      	nop
 801d028:	200002bc 	.word	0x200002bc
 801d02c:	20000c9c 	.word	0x20000c9c
 801d030:	e000ed04 	.word	0xe000ed04

0801d034 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d034:	b580      	push	{r7, lr}
 801d036:	b084      	sub	sp, #16
 801d038:	af00      	add	r7, sp, #0
 801d03a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d03c:	2300      	movs	r3, #0
 801d03e:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_RECEIVER->Instance) // Check the instance of your receiver UART
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	681a      	ldr	r2, [r3, #0]
 801d044:	4b0d      	ldr	r3, [pc, #52]	@ (801d07c <HAL_I2C_SlaveRxCpltCallback+0x48>)
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	429a      	cmp	r2, r3
 801d04a:	d107      	bne.n	801d05c <HAL_I2C_SlaveRxCpltCallback+0x28>
    {
        xSemaphoreGiveFromISR(I2cRxHandle, &xHigherPriorityTaskWoken);
 801d04c:	4b0c      	ldr	r3, [pc, #48]	@ (801d080 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 801d04e:	681b      	ldr	r3, [r3, #0]
 801d050:	f107 020c 	add.w	r2, r7, #12
 801d054:	4611      	mov	r1, r2
 801d056:	4618      	mov	r0, r3
 801d058:	f7f2 fb5f 	bl	800f71a <xQueueGiveFromISR>
//        printf("RX callback fired and freed the semaphore\n\r"); // Debug printf
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d05c:	68fb      	ldr	r3, [r7, #12]
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d007      	beq.n	801d072 <HAL_I2C_SlaveRxCpltCallback+0x3e>
 801d062:	4b08      	ldr	r3, [pc, #32]	@ (801d084 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 801d064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d068:	601a      	str	r2, [r3, #0]
 801d06a:	f3bf 8f4f 	dsb	sy
 801d06e:	f3bf 8f6f 	isb	sy
}
 801d072:	bf00      	nop
 801d074:	3710      	adds	r7, #16
 801d076:	46bd      	mov	sp, r7
 801d078:	bd80      	pop	{r7, pc}
 801d07a:	bf00      	nop
 801d07c:	20000268 	.word	0x20000268
 801d080:	20000c98 	.word	0x20000c98
 801d084:	e000ed04 	.word	0xe000ed04

0801d088 <i2c_reset>:

// Create a function to reset the I2C peripheral
void i2c_reset(I2C_HandleTypeDef *hi2c) {
 801d088:	b580      	push	{r7, lr}
 801d08a:	b082      	sub	sp, #8
 801d08c:	af00      	add	r7, sp, #0
 801d08e:	6078      	str	r0, [r7, #4]
    if (HAL_I2C_DeInit(hi2c) != HAL_OK) {
 801d090:	6878      	ldr	r0, [r7, #4]
 801d092:	f7e8 fef7 	bl	8005e84 <HAL_I2C_DeInit>
 801d096:	4603      	mov	r3, r0
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d001      	beq.n	801d0a0 <i2c_reset+0x18>
        // Log a fatal error, the peripheral is in an unrecoverable state
        Error_Handler();
 801d09c:	f7e4 f968 	bl	8001370 <Error_Handler>
//        printf("Failed to de-initialize I2C peripheral!\n\r"); // Debug printf
    }
    if (HAL_I2C_Init(hi2c) != HAL_OK) {
 801d0a0:	6878      	ldr	r0, [r7, #4]
 801d0a2:	f7e8 fe53 	bl	8005d4c <HAL_I2C_Init>
 801d0a6:	4603      	mov	r3, r0
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	d001      	beq.n	801d0b0 <i2c_reset+0x28>
        // Log a fatal error
        Error_Handler();
 801d0ac:	f7e4 f960 	bl	8001370 <Error_Handler>
//        printf("Failed to re-initialize I2C peripheral!\n\r"); // Debug printf
    }
}
 801d0b0:	bf00      	nop
 801d0b2:	3708      	adds	r7, #8
 801d0b4:	46bd      	mov	sp, r7
 801d0b6:	bd80      	pop	{r7, pc}

0801d0b8 <spi_testing>:
 */
#define SPI_SENDER 		(&hspi1) // Master
#define SPI_RECEIVER 	(&hspi2) // Slave


result_pro_t spi_testing(test_command_t* command){
 801d0b8:	b580      	push	{r7, lr}
 801d0ba:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801d0be:	af00      	add	r7, sp, #0
 801d0c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d0c4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d0c8:	6018      	str	r0, [r3, #0]
 801d0ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d0ce:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d0d2:	6019      	str	r1, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d0d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d0d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801d0dc:	4618      	mov	r0, r3
 801d0de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d0e2:	461a      	mov	r2, r3
 801d0e4:	2100      	movs	r1, #0
 801d0e6:	f000 fe5a 	bl	801dd9e <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d0ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d0ee:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801d0f2:	4618      	mov	r0, r3
 801d0f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d0f8:	461a      	mov	r2, r3
 801d0fa:	2100      	movs	r1, #0
 801d0fc:	f000 fe4f 	bl	801dd9e <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801d100:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d104:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	d115      	bne.n	801d13a <spi_testing+0x82>
//        printf("SPI_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
        response.test_result = TEST_ERR;
 801d10e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d112:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d116:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d11a:	809a      	strh	r2, [r3, #4]
        return response;
 801d11c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d120:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d124:	6819      	ldr	r1, [r3, #0]
 801d126:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d12a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d12e:	460b      	mov	r3, r1
 801d130:	6810      	ldr	r0, [r2, #0]
 801d132:	6018      	str	r0, [r3, #0]
 801d134:	8892      	ldrh	r2, [r2, #4]
 801d136:	809a      	strh	r2, [r3, #4]
 801d138:	e165      	b.n	801d406 <spi_testing+0x34e>
	}

	response.test_id = command->test_id;
 801d13a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d13e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d142:	681b      	ldr	r3, [r3, #0]
 801d144:	681a      	ldr	r2, [r3, #0]
 801d146:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d14a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d14e:	601a      	str	r2, [r3, #0]

    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801d150:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d154:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	1dd9      	adds	r1, r3, #7
 801d15c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d160:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d164:	681b      	ldr	r3, [r3, #0]
 801d166:	799b      	ldrb	r3, [r3, #6]
 801d168:	461a      	mov	r2, r3
 801d16a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801d16e:	4618      	mov	r0, r3
 801d170:	f000 fee9 	bl	801df46 <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d174:	2300      	movs	r3, #0
 801d176:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801d17a:	e11e      	b.n	801d3ba <spi_testing+0x302>
//	    printf("SPI_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations); // Debug printf
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801d17c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d180:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	799b      	ldrb	r3, [r3, #6]
 801d188:	461a      	mov	r2, r3
 801d18a:	f107 0310 	add.w	r3, r7, #16
 801d18e:	2100      	movs	r1, #0
 801d190:	4618      	mov	r0, r3
 801d192:	f000 fe04 	bl	801dd9e <memset>

	    // START RECEIVE DMA FIRST (SLAVE)
	    rx_status = HAL_SPI_Receive_IT(SPI_RECEIVER, rx_buffer, command->bit_pattern_length);
 801d196:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d19a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	799b      	ldrb	r3, [r3, #6]
 801d1a2:	461a      	mov	r2, r3
 801d1a4:	f107 0310 	add.w	r3, r7, #16
 801d1a8:	4619      	mov	r1, r3
 801d1aa:	489b      	ldr	r0, [pc, #620]	@ (801d418 <spi_testing+0x360>)
 801d1ac:	f7ec fa5a 	bl	8009664 <HAL_SPI_Receive_IT>
 801d1b0:	4603      	mov	r3, r0
 801d1b2:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 801d1b6:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	d01b      	beq.n	801d1f6 <spi_testing+0x13e>
//	        printf("Failed to start slave receive DMA: %d\n\r", rx_status); // Debug printf
	        response.test_result = TEST_FAIL;
 801d1be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d1c2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d1c6:	22ff      	movs	r2, #255	@ 0xff
 801d1c8:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801d1ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d1ce:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d1d2:	6818      	ldr	r0, [r3, #0]
 801d1d4:	f7f4 ffc6 	bl	8012164 <vPortFree>
	        return response;
 801d1d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d1dc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d1e0:	6819      	ldr	r1, [r3, #0]
 801d1e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d1e6:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d1ea:	460b      	mov	r3, r1
 801d1ec:	6810      	ldr	r0, [r2, #0]
 801d1ee:	6018      	str	r0, [r3, #0]
 801d1f0:	8892      	ldrh	r2, [r2, #4]
 801d1f2:	809a      	strh	r2, [r3, #4]
 801d1f4:	e107      	b.n	801d406 <spi_testing+0x34e>
	    }

	    // TRANSMIT a block of data via DMA (MASTER)
	    tx_status = HAL_SPI_Transmit(SPI_SENDER, tx_buffer, command->bit_pattern_length,TIMEOUT);
 801d1f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d1fa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	799b      	ldrb	r3, [r3, #6]
 801d202:	461a      	mov	r2, r3
 801d204:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801d208:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801d20c:	4883      	ldr	r0, [pc, #524]	@ (801d41c <spi_testing+0x364>)
 801d20e:	f7ec f8b2 	bl	8009376 <HAL_SPI_Transmit>
 801d212:	4603      	mov	r3, r0
 801d214:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 801d218:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	d021      	beq.n	801d264 <spi_testing+0x1ac>
//	        printf("Failed to send DMA on SPI sender: %d\n\r", tx_status); // Debug printf
	        response.test_result = TEST_FAIL;
 801d220:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d224:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d228:	22ff      	movs	r2, #255	@ 0xff
 801d22a:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801d22c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d230:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d234:	6818      	ldr	r0, [r3, #0]
 801d236:	f7f4 ff95 	bl	8012164 <vPortFree>
	        HAL_SPI_Abort_IT(SPI_SENDER); // Stop the stuck sending
 801d23a:	4878      	ldr	r0, [pc, #480]	@ (801d41c <spi_testing+0x364>)
 801d23c:	f7ec fb66 	bl	800990c <HAL_SPI_Abort_IT>
		    HAL_SPI_Abort_IT(SPI_RECEIVER); // Stop the pending receive
 801d240:	4875      	ldr	r0, [pc, #468]	@ (801d418 <spi_testing+0x360>)
 801d242:	f7ec fb63 	bl	800990c <HAL_SPI_Abort_IT>

	        return response;
 801d246:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d24a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d24e:	6819      	ldr	r1, [r3, #0]
 801d250:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d254:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d258:	460b      	mov	r3, r1
 801d25a:	6810      	ldr	r0, [r2, #0]
 801d25c:	6018      	str	r0, [r3, #0]
 801d25e:	8892      	ldrh	r2, [r2, #4]
 801d260:	809a      	strh	r2, [r3, #4]
 801d262:	e0d0      	b.n	801d406 <spi_testing+0x34e>
	    }

	    // WAIT FOR RX DMA COMPLETION
	    if (xSemaphoreTake(SpiRxHandle, TIMEOUT) != pdPASS) {
 801d264:	4b6e      	ldr	r3, [pc, #440]	@ (801d420 <spi_testing+0x368>)
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 801d26c:	4618      	mov	r0, r3
 801d26e:	f7f2 fbd5 	bl	800fa1c <xQueueSemaphoreTake>
 801d272:	4603      	mov	r3, r0
 801d274:	2b01      	cmp	r3, #1
 801d276:	d01e      	beq.n	801d2b6 <spi_testing+0x1fe>
//	         printf("Slave RX timeout\n\r"); // Debug printf
	         response.test_result = TEST_FAIL;
 801d278:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d27c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d280:	22ff      	movs	r2, #255	@ 0xff
 801d282:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801d284:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d288:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d28c:	6818      	ldr	r0, [r3, #0]
 801d28e:	f7f4 ff69 	bl	8012164 <vPortFree>
	         HAL_SPI_Abort_IT(SPI_RECEIVER);
 801d292:	4861      	ldr	r0, [pc, #388]	@ (801d418 <spi_testing+0x360>)
 801d294:	f7ec fb3a 	bl	800990c <HAL_SPI_Abort_IT>
	         return response;
 801d298:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d29c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d2a0:	6819      	ldr	r1, [r3, #0]
 801d2a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d2a6:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d2aa:	460b      	mov	r3, r1
 801d2ac:	6810      	ldr	r0, [r2, #0]
 801d2ae:	6018      	str	r0, [r3, #0]
 801d2b0:	8892      	ldrh	r2, [r2, #4]
 801d2b2:	809a      	strh	r2, [r3, #4]
 801d2b4:	e0a7      	b.n	801d406 <spi_testing+0x34e>
	    }

		// COMPARE SENT vs. RECEIVED data
	    if (command->bit_pattern_length > 100) {
 801d2b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d2ba:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	799b      	ldrb	r3, [r3, #6]
 801d2c2:	2b64      	cmp	r3, #100	@ 0x64
 801d2c4:	d941      	bls.n	801d34a <spi_testing+0x292>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801d2c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d2ca:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	799b      	ldrb	r3, [r3, #6]
 801d2d2:	461a      	mov	r2, r3
 801d2d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801d2d8:	4611      	mov	r1, r2
 801d2da:	4618      	mov	r0, r3
 801d2dc:	f7e3 ff16 	bl	800110c <calculate_crc>
 801d2e0:	4603      	mov	r3, r0
 801d2e2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801d2e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d2ea:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d2ee:	681b      	ldr	r3, [r3, #0]
 801d2f0:	799b      	ldrb	r3, [r3, #6]
 801d2f2:	461a      	mov	r2, r3
 801d2f4:	f107 0310 	add.w	r3, r7, #16
 801d2f8:	4611      	mov	r1, r2
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f7e3 ff06 	bl	800110c <calculate_crc>
 801d300:	4603      	mov	r3, r0
 801d302:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	        if (sent_crc != received_crc) {
 801d306:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801d30a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801d30e:	429a      	cmp	r2, r3
 801d310:	d04b      	beq.n	801d3aa <spi_testing+0x2f2>
//	            printf("SPI_TEST: CRC mismatch on iteration %u.\n\r", i + 1); // Debug printf
	            response.test_result = TEST_FAIL;
 801d312:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d316:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d31a:	22ff      	movs	r2, #255	@ 0xff
 801d31c:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801d31e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d322:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d326:	6818      	ldr	r0, [r3, #0]
 801d328:	f7f4 ff1c 	bl	8012164 <vPortFree>
	            return response;
 801d32c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d330:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d334:	6819      	ldr	r1, [r3, #0]
 801d336:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d33a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d33e:	460b      	mov	r3, r1
 801d340:	6810      	ldr	r0, [r2, #0]
 801d342:	6018      	str	r0, [r3, #0]
 801d344:	8892      	ldrh	r2, [r2, #4]
 801d346:	809a      	strh	r2, [r3, #4]
 801d348:	e05d      	b.n	801d406 <spi_testing+0x34e>
	        }
	    } else {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801d34a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d34e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	799b      	ldrb	r3, [r3, #6]
 801d356:	461a      	mov	r2, r3
 801d358:	f107 0110 	add.w	r1, r7, #16
 801d35c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801d360:	4618      	mov	r0, r3
 801d362:	f000 fd0c 	bl	801dd7e <memcmp>
 801d366:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	        if (comp != 0) {
 801d36a:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d01b      	beq.n	801d3aa <spi_testing+0x2f2>
//	            printf("Data mismatch on iteration %u.\n\r", i + 1); // Debug printf
	            response.test_result = TEST_FAIL;
 801d372:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d376:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d37a:	22ff      	movs	r2, #255	@ 0xff
 801d37c:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 801d37e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d382:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d386:	6818      	ldr	r0, [r3, #0]
 801d388:	f7f4 feec 	bl	8012164 <vPortFree>
	            return response;
 801d38c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d390:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d394:	6819      	ldr	r1, [r3, #0]
 801d396:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d39a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d39e:	460b      	mov	r3, r1
 801d3a0:	6810      	ldr	r0, [r2, #0]
 801d3a2:	6018      	str	r0, [r3, #0]
 801d3a4:	8892      	ldrh	r2, [r2, #4]
 801d3a6:	809a      	strh	r2, [r3, #4]
 801d3a8:	e02d      	b.n	801d406 <spi_testing+0x34e>
	        }
	    }
//	    printf("Data Match on iteration %u.\n\r", i + 1); // Debug printf

        osDelay(10);
 801d3aa:	200a      	movs	r0, #10
 801d3ac:	f7f1 f858 	bl	800e460 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d3b0:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801d3b4:	3301      	adds	r3, #1
 801d3b6:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801d3ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d3be:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	795b      	ldrb	r3, [r3, #5]
 801d3c6:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 801d3ca:	429a      	cmp	r2, r3
 801d3cc:	f4ff aed6 	bcc.w	801d17c <spi_testing+0xc4>
	}
    response.test_result = TEST_PASS;
 801d3d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d3d4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d3d8:	2201      	movs	r2, #1
 801d3da:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 801d3dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d3e0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d3e4:	6818      	ldr	r0, [r3, #0]
 801d3e6:	f7f4 febd 	bl	8012164 <vPortFree>
    return response;
 801d3ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d3ee:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d3f2:	6819      	ldr	r1, [r3, #0]
 801d3f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d3f8:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d3fc:	460b      	mov	r3, r1
 801d3fe:	6810      	ldr	r0, [r2, #0]
 801d400:	6018      	str	r0, [r3, #0]
 801d402:	8892      	ldrh	r2, [r2, #4]
 801d404:	809a      	strh	r2, [r3, #4]
}
 801d406:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d40a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d40e:	6818      	ldr	r0, [r3, #0]
 801d410:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 801d414:	46bd      	mov	sp, r7
 801d416:	bd80      	pop	{r7, pc}
 801d418:	20000434 	.word	0x20000434
 801d41c:	200003d0 	.word	0x200003d0
 801d420:	20000ca0 	.word	0x20000ca0

0801d424 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 801d424:	b580      	push	{r7, lr}
 801d426:	b084      	sub	sp, #16
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d42c:	2300      	movs	r3, #0
 801d42e:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_RECEIVER->Instance) {
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	681a      	ldr	r2, [r3, #0]
 801d434:	4b0d      	ldr	r3, [pc, #52]	@ (801d46c <HAL_SPI_RxCpltCallback+0x48>)
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	429a      	cmp	r2, r3
 801d43a:	d107      	bne.n	801d44c <HAL_SPI_RxCpltCallback+0x28>
        xSemaphoreGiveFromISR(SpiRxHandle, &xHigherPriorityTaskWoken);
 801d43c:	4b0c      	ldr	r3, [pc, #48]	@ (801d470 <HAL_SPI_RxCpltCallback+0x4c>)
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	f107 020c 	add.w	r2, r7, #12
 801d444:	4611      	mov	r1, r2
 801d446:	4618      	mov	r0, r3
 801d448:	f7f2 f967 	bl	800f71a <xQueueGiveFromISR>
//        printf("Slave Rx callback fired and gave a semaphore\n\r"); // Debug printf
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d007      	beq.n	801d462 <HAL_SPI_RxCpltCallback+0x3e>
 801d452:	4b08      	ldr	r3, [pc, #32]	@ (801d474 <HAL_SPI_RxCpltCallback+0x50>)
 801d454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d458:	601a      	str	r2, [r3, #0]
 801d45a:	f3bf 8f4f 	dsb	sy
 801d45e:	f3bf 8f6f 	isb	sy
}
 801d462:	bf00      	nop
 801d464:	3710      	adds	r7, #16
 801d466:	46bd      	mov	sp, r7
 801d468:	bd80      	pop	{r7, pc}
 801d46a:	bf00      	nop
 801d46c:	20000434 	.word	0x20000434
 801d470:	20000ca0 	.word	0x20000ca0
 801d474:	e000ed04 	.word	0xe000ed04

0801d478 <timer_testing>:
#include "timer_test.h"

uint16_t tick_count = 0;

result_pro_t timer_testing(test_command_t* command){
 801d478:	b580      	push	{r7, lr}
 801d47a:	b084      	sub	sp, #16
 801d47c:	af00      	add	r7, sp, #0
 801d47e:	6078      	str	r0, [r7, #4]
 801d480:	6039      	str	r1, [r7, #0]

	result_pro_t response;
	uint16_t start_val ,end_val;

	if (command == NULL) {
 801d482:	683b      	ldr	r3, [r7, #0]
 801d484:	2b00      	cmp	r3, #0
 801d486:	d10b      	bne.n	801d4a0 <timer_testing+0x28>
//        printf("Received NULL command pointer. Skipping.\n\r"); // Debug printf
        response.test_result = TEST_ERR;
 801d488:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d48c:	81bb      	strh	r3, [r7, #12]
        return response;
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	461a      	mov	r2, r3
 801d492:	f107 0308 	add.w	r3, r7, #8
 801d496:	6818      	ldr	r0, [r3, #0]
 801d498:	6010      	str	r0, [r2, #0]
 801d49a:	889b      	ldrh	r3, [r3, #4]
 801d49c:	8093      	strh	r3, [r2, #4]
 801d49e:	e03a      	b.n	801d516 <timer_testing+0x9e>
	}

	response.test_id = command->test_id;
 801d4a0:	683b      	ldr	r3, [r7, #0]
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	60bb      	str	r3, [r7, #8]

	// Start Timer
	HAL_TIM_Base_Start_IT(&htim7);
 801d4a6:	481e      	ldr	r0, [pc, #120]	@ (801d520 <timer_testing+0xa8>)
 801d4a8:	f7ed fa66 	bl	800a978 <HAL_TIM_Base_Start_IT>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	73fb      	strb	r3, [r7, #15]
 801d4b0:	e01c      	b.n	801d4ec <timer_testing+0x74>

	    if (xSemaphoreTake(TimSemHandle, pdMS_TO_TICKS(200)) != pdPASS) {
 801d4b2:	4b1c      	ldr	r3, [pc, #112]	@ (801d524 <timer_testing+0xac>)
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	21c8      	movs	r1, #200	@ 0xc8
 801d4b8:	4618      	mov	r0, r3
 801d4ba:	f7f2 faaf 	bl	800fa1c <xQueueSemaphoreTake>
 801d4be:	4603      	mov	r3, r0
 801d4c0:	2b01      	cmp	r3, #1
 801d4c2:	d00d      	beq.n	801d4e0 <timer_testing+0x68>
//			printf("Fail on iteration %u.\n\r",i+1); // Debug printf
			response.test_result = TEST_FAIL;
 801d4c4:	23ff      	movs	r3, #255	@ 0xff
 801d4c6:	81bb      	strh	r3, [r7, #12]
	         vPortFree(command);
 801d4c8:	6838      	ldr	r0, [r7, #0]
 801d4ca:	f7f4 fe4b 	bl	8012164 <vPortFree>
	         return response;
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	461a      	mov	r2, r3
 801d4d2:	f107 0308 	add.w	r3, r7, #8
 801d4d6:	6818      	ldr	r0, [r3, #0]
 801d4d8:	6010      	str	r0, [r2, #0]
 801d4da:	889b      	ldrh	r3, [r3, #4]
 801d4dc:	8093      	strh	r3, [r2, #4]
 801d4de:	e01a      	b.n	801d516 <timer_testing+0x9e>
	    }

//		printf("success on iteration %u.\n\r", i + 1); // Debug printf
        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801d4e0:	200a      	movs	r0, #10
 801d4e2:	f7f0 ffbd 	bl	800e460 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d4e6:	7bfb      	ldrb	r3, [r7, #15]
 801d4e8:	3301      	adds	r3, #1
 801d4ea:	73fb      	strb	r3, [r7, #15]
 801d4ec:	683b      	ldr	r3, [r7, #0]
 801d4ee:	795b      	ldrb	r3, [r3, #5]
 801d4f0:	7bfa      	ldrb	r2, [r7, #15]
 801d4f2:	429a      	cmp	r2, r3
 801d4f4:	d3dd      	bcc.n	801d4b2 <timer_testing+0x3a>
	}// end of iterations

    // Stop Timer after the test is complete
	HAL_TIM_Base_Stop_IT(&htim7);
 801d4f6:	480a      	ldr	r0, [pc, #40]	@ (801d520 <timer_testing+0xa8>)
 801d4f8:	f7ed fab6 	bl	800aa68 <HAL_TIM_Base_Stop_IT>

    response.test_result = TEST_PASS;
 801d4fc:	2301      	movs	r3, #1
 801d4fe:	81bb      	strh	r3, [r7, #12]
    vPortFree(command);
 801d500:	6838      	ldr	r0, [r7, #0]
 801d502:	f7f4 fe2f 	bl	8012164 <vPortFree>
    return response;
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	461a      	mov	r2, r3
 801d50a:	f107 0308 	add.w	r3, r7, #8
 801d50e:	6818      	ldr	r0, [r3, #0]
 801d510:	6010      	str	r0, [r2, #0]
 801d512:	889b      	ldrh	r3, [r3, #4]
 801d514:	8093      	strh	r3, [r2, #4]
}
 801d516:	6878      	ldr	r0, [r7, #4]
 801d518:	3710      	adds	r7, #16
 801d51a:	46bd      	mov	sp, r7
 801d51c:	bd80      	pop	{r7, pc}
 801d51e:	bf00      	nop
 801d520:	20000498 	.word	0x20000498
 801d524:	20000ca8 	.word	0x20000ca8

0801d528 <uart_testing>:

#define UART_SENDER 		(&huart2)
#define UART_RECEIVER 		(&huart4)
uint8_t g_rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};

result_pro_t uart_testing(test_command_t* command){
 801d528:	b580      	push	{r7, lr}
 801d52a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801d52e:	af00      	add	r7, sp, #0
 801d530:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d534:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d538:	6018      	str	r0, [r3, #0]
 801d53a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d53e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d542:	6019      	str	r1, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d544:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d548:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801d54c:	4618      	mov	r0, r3
 801d54e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d552:	461a      	mov	r2, r3
 801d554:	2100      	movs	r1, #0
 801d556:	f000 fc22 	bl	801dd9e <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d55a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d55e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801d562:	4618      	mov	r0, r3
 801d564:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d568:	461a      	mov	r2, r3
 801d56a:	2100      	movs	r1, #0
 801d56c:	f000 fc17 	bl	801dd9e <memset>


	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801d570:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d574:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d118      	bne.n	801d5b0 <uart_testing+0x88>
        printf("UART_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
 801d57e:	48cc      	ldr	r0, [pc, #816]	@ (801d8b0 <uart_testing+0x388>)
 801d580:	f000 fba8 	bl	801dcd4 <iprintf>
        response.test_result = TEST_ERR;
 801d584:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d588:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d58c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d590:	809a      	strh	r2, [r3, #4]
        return response;
 801d592:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d596:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d59a:	6819      	ldr	r1, [r3, #0]
 801d59c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d5a0:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d5a4:	460b      	mov	r3, r1
 801d5a6:	6810      	ldr	r0, [r2, #0]
 801d5a8:	6018      	str	r0, [r3, #0]
 801d5aa:	8892      	ldrh	r2, [r2, #4]
 801d5ac:	809a      	strh	r2, [r3, #4]
 801d5ae:	e1fc      	b.n	801d9aa <uart_testing+0x482>
	}

	response.test_id = command->test_id;
 801d5b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d5b4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d5b8:	681b      	ldr	r3, [r3, #0]
 801d5ba:	681a      	ldr	r2, [r3, #0]
 801d5bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d5c0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d5c4:	601a      	str	r2, [r3, #0]
	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801d5c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d5ca:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d5ce:	681b      	ldr	r3, [r3, #0]
 801d5d0:	1dd9      	adds	r1, r3, #7
 801d5d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d5d6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	799b      	ldrb	r3, [r3, #6]
 801d5de:	461a      	mov	r2, r3
 801d5e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801d5e4:	4618      	mov	r0, r3
 801d5e6:	f000 fcae 	bl	801df46 <memcpy>

    for(uint8_t i=0 ; i< command->iterations ; i++){
 801d5ea:	2300      	movs	r3, #0
 801d5ec:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801d5f0:	e1b5      	b.n	801d95e <uart_testing+0x436>
        printf("UART_TEST: Iteration %u/%u:\n\r", i + 1, command->iterations);
 801d5f2:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801d5f6:	1c59      	adds	r1, r3, #1
 801d5f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d5fc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	795b      	ldrb	r3, [r3, #5]
 801d604:	461a      	mov	r2, r3
 801d606:	48ab      	ldr	r0, [pc, #684]	@ (801d8b4 <uart_testing+0x38c>)
 801d608:	f000 fb64 	bl	801dcd4 <iprintf>
        memset(rx_buffer, 0, command->bit_pattern_length);
 801d60c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d610:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d614:	681b      	ldr	r3, [r3, #0]
 801d616:	799b      	ldrb	r3, [r3, #6]
 801d618:	461a      	mov	r2, r3
 801d61a:	f107 0310 	add.w	r3, r7, #16
 801d61e:	2100      	movs	r1, #0
 801d620:	4618      	mov	r0, r3
 801d622:	f000 fbbc 	bl	801dd9e <memset>

        // RECEIVER start to RECEIVE DMA
        rx_status = HAL_UART_Receive_DMA(UART_RECEIVER, g_rx_buffer, command->bit_pattern_length);
 801d626:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d62a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	799b      	ldrb	r3, [r3, #6]
 801d632:	461a      	mov	r2, r3
 801d634:	49a0      	ldr	r1, [pc, #640]	@ (801d8b8 <uart_testing+0x390>)
 801d636:	48a1      	ldr	r0, [pc, #644]	@ (801d8bc <uart_testing+0x394>)
 801d638:	f7ed febe 	bl	800b3b8 <HAL_UART_Receive_DMA>
 801d63c:	4603      	mov	r3, r0
 801d63e:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
        if (rx_status != HAL_OK) {
 801d642:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801d646:	2b00      	cmp	r3, #0
 801d648:	d021      	beq.n	801d68e <uart_testing+0x166>
            printf("Receiver Failed to start receive: %d\n\r", rx_status);
 801d64a:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801d64e:	4619      	mov	r1, r3
 801d650:	489b      	ldr	r0, [pc, #620]	@ (801d8c0 <uart_testing+0x398>)
 801d652:	f000 fb3f 	bl	801dcd4 <iprintf>
            response.test_result = TEST_FAIL;
 801d656:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d65a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d65e:	22ff      	movs	r2, #255	@ 0xff
 801d660:	809a      	strh	r2, [r3, #4]
            vPortFree(command);
 801d662:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d666:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d66a:	6818      	ldr	r0, [r3, #0]
 801d66c:	f7f4 fd7a 	bl	8012164 <vPortFree>
            return response;
 801d670:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d674:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d678:	6819      	ldr	r1, [r3, #0]
 801d67a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d67e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d682:	460b      	mov	r3, r1
 801d684:	6810      	ldr	r0, [r2, #0]
 801d686:	6018      	str	r0, [r3, #0]
 801d688:	8892      	ldrh	r2, [r2, #4]
 801d68a:	809a      	strh	r2, [r3, #4]
 801d68c:	e18d      	b.n	801d9aa <uart_testing+0x482>
        }
        // Arm sender receive before receiver transmits back
        if (HAL_UART_Receive_IT(UART_SENDER, rx_buffer, command->bit_pattern_length) != HAL_OK) {
 801d68e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d692:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	799b      	ldrb	r3, [r3, #6]
 801d69a:	461a      	mov	r2, r3
 801d69c:	f107 0310 	add.w	r3, r7, #16
 801d6a0:	4619      	mov	r1, r3
 801d6a2:	4888      	ldr	r0, [pc, #544]	@ (801d8c4 <uart_testing+0x39c>)
 801d6a4:	f7ed fdc8 	bl	800b238 <HAL_UART_Receive_IT>
 801d6a8:	4603      	mov	r3, r0
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d01e      	beq.n	801d6ec <uart_testing+0x1c4>
            printf("Sender Failed to start receive back\n\r");
 801d6ae:	4886      	ldr	r0, [pc, #536]	@ (801d8c8 <uart_testing+0x3a0>)
 801d6b0:	f000 fb10 	bl	801dcd4 <iprintf>
            response.test_result = TEST_FAIL;
 801d6b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d6b8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d6bc:	22ff      	movs	r2, #255	@ 0xff
 801d6be:	809a      	strh	r2, [r3, #4]
            vPortFree(command);
 801d6c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d6c4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d6c8:	6818      	ldr	r0, [r3, #0]
 801d6ca:	f7f4 fd4b 	bl	8012164 <vPortFree>
            return response;
 801d6ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d6d2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d6d6:	6819      	ldr	r1, [r3, #0]
 801d6d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d6dc:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d6e0:	460b      	mov	r3, r1
 801d6e2:	6810      	ldr	r0, [r2, #0]
 801d6e4:	6018      	str	r0, [r3, #0]
 801d6e6:	8892      	ldrh	r2, [r2, #4]
 801d6e8:	809a      	strh	r2, [r3, #4]
 801d6ea:	e15e      	b.n	801d9aa <uart_testing+0x482>
        }

        // SENDER TRANSMIT a block of data via DMA
        tx_status = HAL_UART_Transmit_DMA(UART_SENDER, tx_buffer, command->bit_pattern_length);
 801d6ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d6f0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	799b      	ldrb	r3, [r3, #6]
 801d6f8:	461a      	mov	r2, r3
 801d6fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801d6fe:	4619      	mov	r1, r3
 801d700:	4870      	ldr	r0, [pc, #448]	@ (801d8c4 <uart_testing+0x39c>)
 801d702:	f7ed fddd 	bl	800b2c0 <HAL_UART_Transmit_DMA>
 801d706:	4603      	mov	r3, r0
 801d708:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
        if (tx_status != HAL_OK) {
 801d70c:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801d710:	2b00      	cmp	r3, #0
 801d712:	d024      	beq.n	801d75e <uart_testing+0x236>
            printf("Failed to send on UART sender: %d\n\r", tx_status);
 801d714:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801d718:	4619      	mov	r1, r3
 801d71a:	486c      	ldr	r0, [pc, #432]	@ (801d8cc <uart_testing+0x3a4>)
 801d71c:	f000 fada 	bl	801dcd4 <iprintf>
            response.test_result = TEST_FAIL;
 801d720:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d724:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d728:	22ff      	movs	r2, #255	@ 0xff
 801d72a:	809a      	strh	r2, [r3, #4]
            vPortFree(command);
 801d72c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d730:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d734:	6818      	ldr	r0, [r3, #0]
 801d736:	f7f4 fd15 	bl	8012164 <vPortFree>
            HAL_UART_DMAStop(UART_RECEIVER);
 801d73a:	4860      	ldr	r0, [pc, #384]	@ (801d8bc <uart_testing+0x394>)
 801d73c:	f7ed fe80 	bl	800b440 <HAL_UART_DMAStop>
            return response;
 801d740:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d744:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d748:	6819      	ldr	r1, [r3, #0]
 801d74a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d74e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d752:	460b      	mov	r3, r1
 801d754:	6810      	ldr	r0, [r2, #0]
 801d756:	6018      	str	r0, [r3, #0]
 801d758:	8892      	ldrh	r2, [r2, #4]
 801d75a:	809a      	strh	r2, [r3, #4]
 801d75c:	e125      	b.n	801d9aa <uart_testing+0x482>
        }

        // WAIT FOR RECEIVER RX COMPLETION
        if (xSemaphoreTake(UartRxHandle, TIMEOUT) != pdPASS) {
 801d75e:	4b5c      	ldr	r3, [pc, #368]	@ (801d8d0 <uart_testing+0x3a8>)
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d766:	4618      	mov	r0, r3
 801d768:	f7f2 f958 	bl	800fa1c <xQueueSemaphoreTake>
 801d76c:	4603      	mov	r3, r0
 801d76e:	2b01      	cmp	r3, #1
 801d770:	d024      	beq.n	801d7bc <uart_testing+0x294>
            printf("fail to get RxSemaphore\n\r");
 801d772:	4858      	ldr	r0, [pc, #352]	@ (801d8d4 <uart_testing+0x3ac>)
 801d774:	f000 faae 	bl	801dcd4 <iprintf>
            response.test_result = TEST_FAIL;
 801d778:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d77c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d780:	22ff      	movs	r2, #255	@ 0xff
 801d782:	809a      	strh	r2, [r3, #4]
            vPortFree(command);
 801d784:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d788:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d78c:	6818      	ldr	r0, [r3, #0]
 801d78e:	f7f4 fce9 	bl	8012164 <vPortFree>
            HAL_UART_DMAStop(UART_SENDER);
 801d792:	484c      	ldr	r0, [pc, #304]	@ (801d8c4 <uart_testing+0x39c>)
 801d794:	f7ed fe54 	bl	800b440 <HAL_UART_DMAStop>
            HAL_UART_DMAStop(UART_RECEIVER);
 801d798:	4848      	ldr	r0, [pc, #288]	@ (801d8bc <uart_testing+0x394>)
 801d79a:	f7ed fe51 	bl	800b440 <HAL_UART_DMAStop>
            return response;
 801d79e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d7a2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d7a6:	6819      	ldr	r1, [r3, #0]
 801d7a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d7ac:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d7b0:	460b      	mov	r3, r1
 801d7b2:	6810      	ldr	r0, [r2, #0]
 801d7b4:	6018      	str	r0, [r3, #0]
 801d7b6:	8892      	ldrh	r2, [r2, #4]
 801d7b8:	809a      	strh	r2, [r3, #4]
 801d7ba:	e0f6      	b.n	801d9aa <uart_testing+0x482>
//            vPortFree(command);
//            return response;
//        }

        // WAIT FOR TX COMPLETION
        if (xSemaphoreTake(UartTxHandle, TIMEOUT) != pdPASS) {
 801d7bc:	4b46      	ldr	r3, [pc, #280]	@ (801d8d8 <uart_testing+0x3b0>)
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d7c4:	4618      	mov	r0, r3
 801d7c6:	f7f2 f929 	bl	800fa1c <xQueueSemaphoreTake>
 801d7ca:	4603      	mov	r3, r0
 801d7cc:	2b01      	cmp	r3, #1
 801d7ce:	d024      	beq.n	801d81a <uart_testing+0x2f2>
             printf("fail to get TxSemaphore\n\r");
 801d7d0:	4842      	ldr	r0, [pc, #264]	@ (801d8dc <uart_testing+0x3b4>)
 801d7d2:	f000 fa7f 	bl	801dcd4 <iprintf>
             response.test_result = TEST_FAIL;
 801d7d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d7da:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d7de:	22ff      	movs	r2, #255	@ 0xff
 801d7e0:	809a      	strh	r2, [r3, #4]
             vPortFree(command);
 801d7e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d7e6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d7ea:	6818      	ldr	r0, [r3, #0]
 801d7ec:	f7f4 fcba 	bl	8012164 <vPortFree>
             HAL_UART_DMAStop(UART_RECEIVER);
 801d7f0:	4832      	ldr	r0, [pc, #200]	@ (801d8bc <uart_testing+0x394>)
 801d7f2:	f7ed fe25 	bl	800b440 <HAL_UART_DMAStop>
             HAL_UART_DMAStop(UART_SENDER);
 801d7f6:	4833      	ldr	r0, [pc, #204]	@ (801d8c4 <uart_testing+0x39c>)
 801d7f8:	f7ed fe22 	bl	800b440 <HAL_UART_DMAStop>
             return response;
 801d7fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d800:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d804:	6819      	ldr	r1, [r3, #0]
 801d806:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d80a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d80e:	460b      	mov	r3, r1
 801d810:	6810      	ldr	r0, [r2, #0]
 801d812:	6018      	str	r0, [r3, #0]
 801d814:	8892      	ldrh	r2, [r2, #4]
 801d816:	809a      	strh	r2, [r3, #4]
 801d818:	e0c7      	b.n	801d9aa <uart_testing+0x482>
        }

	    // COMPARE SENT vs. RECEIVED data
	    if (command->bit_pattern_length > 100) {
 801d81a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d81e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d822:	681b      	ldr	r3, [r3, #0]
 801d824:	799b      	ldrb	r3, [r3, #6]
 801d826:	2b64      	cmp	r3, #100	@ 0x64
 801d828:	d95a      	bls.n	801d8e0 <uart_testing+0x3b8>
//			printf("bit_pattern_length more than 100\n\r"); // Debug printf

			// Use CRC comparison for large data
			uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801d82a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d82e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	799b      	ldrb	r3, [r3, #6]
 801d836:	461a      	mov	r2, r3
 801d838:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801d83c:	4611      	mov	r1, r2
 801d83e:	4618      	mov	r0, r3
 801d840:	f7e3 fc64 	bl	800110c <calculate_crc>
 801d844:	4603      	mov	r3, r0
 801d846:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
			uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801d84a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d84e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	799b      	ldrb	r3, [r3, #6]
 801d856:	461a      	mov	r2, r3
 801d858:	f107 0310 	add.w	r3, r7, #16
 801d85c:	4611      	mov	r1, r2
 801d85e:	4618      	mov	r0, r3
 801d860:	f7e3 fc54 	bl	800110c <calculate_crc>
 801d864:	4603      	mov	r3, r0
 801d866:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
			if (sent_crc != received_crc) {
 801d86a:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801d86e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801d872:	429a      	cmp	r2, r3
 801d874:	d064      	beq.n	801d940 <uart_testing+0x418>
				// Debug printf
//				printf("UART_TEST: CRC mismatch on iteration %u. Sent CRC: 0x%lX, Received CRC: 0x%lX\n\r",
//					   i + 1, sent_crc, received_crc);
				response.test_result = TEST_FAIL;
 801d876:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d87a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d87e:	22ff      	movs	r2, #255	@ 0xff
 801d880:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 801d882:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d886:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d88a:	6818      	ldr	r0, [r3, #0]
 801d88c:	f7f4 fc6a 	bl	8012164 <vPortFree>
				return response;
 801d890:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d894:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d898:	6819      	ldr	r1, [r3, #0]
 801d89a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d89e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d8a2:	460b      	mov	r3, r1
 801d8a4:	6810      	ldr	r0, [r2, #0]
 801d8a6:	6018      	str	r0, [r3, #0]
 801d8a8:	8892      	ldrh	r2, [r2, #4]
 801d8aa:	809a      	strh	r2, [r3, #4]
 801d8ac:	e07d      	b.n	801d9aa <uart_testing+0x482>
 801d8ae:	bf00      	nop
 801d8b0:	08021868 	.word	0x08021868
 801d8b4:	080218a0 	.word	0x080218a0
 801d8b8:	200277e8 	.word	0x200277e8
 801d8bc:	200004e4 	.word	0x200004e4
 801d8c0:	080218c0 	.word	0x080218c0
 801d8c4:	2000056c 	.word	0x2000056c
 801d8c8:	080218e8 	.word	0x080218e8
 801d8cc:	08021910 	.word	0x08021910
 801d8d0:	20000c90 	.word	0x20000c90
 801d8d4:	08021934 	.word	0x08021934
 801d8d8:	20000c94 	.word	0x20000c94
 801d8dc:	08021950 	.word	0x08021950
			}
	    }
	    else {
			int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801d8e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d8e4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	799b      	ldrb	r3, [r3, #6]
 801d8ec:	461a      	mov	r2, r3
 801d8ee:	f107 0110 	add.w	r1, r7, #16
 801d8f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801d8f6:	4618      	mov	r0, r3
 801d8f8:	f000 fa41 	bl	801dd7e <memcmp>
 801d8fc:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
			if (comp != 0) {
 801d900:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801d904:	2b00      	cmp	r3, #0
 801d906:	d01b      	beq.n	801d940 <uart_testing+0x418>
//				// Debug printf
//				printf("Data mismatch on iteration %u.\n\r", i + 1);
//				printf("Sent: %.*s\n\r", command->bit_pattern_length, tx_buffer);
//				printf("Recv: %.*s\n\r", command->bit_pattern_length, rx_buffer);
				response.test_result = TEST_FAIL;
 801d908:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d90c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d910:	22ff      	movs	r2, #255	@ 0xff
 801d912:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 801d914:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d918:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d91c:	6818      	ldr	r0, [r3, #0]
 801d91e:	f7f4 fc21 	bl	8012164 <vPortFree>
				return response;
 801d922:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d926:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d92a:	6819      	ldr	r1, [r3, #0]
 801d92c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d930:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d934:	460b      	mov	r3, r1
 801d936:	6810      	ldr	r0, [r2, #0]
 801d938:	6018      	str	r0, [r3, #0]
 801d93a:	8892      	ldrh	r2, [r2, #4]
 801d93c:	809a      	strh	r2, [r3, #4]
 801d93e:	e034      	b.n	801d9aa <uart_testing+0x482>
			}
	    }
	    printf("Data Match on iteration %u.\n\r", i + 1); // Debug printf
 801d940:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801d944:	3301      	adds	r3, #1
 801d946:	4619      	mov	r1, r3
 801d948:	481c      	ldr	r0, [pc, #112]	@ (801d9bc <uart_testing+0x494>)
 801d94a:	f000 f9c3 	bl	801dcd4 <iprintf>

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801d94e:	200a      	movs	r0, #10
 801d950:	f7f0 fd86 	bl	800e460 <osDelay>
    for(uint8_t i=0 ; i< command->iterations ; i++){
 801d954:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801d958:	3301      	adds	r3, #1
 801d95a:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801d95e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d962:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d966:	681b      	ldr	r3, [r3, #0]
 801d968:	795b      	ldrb	r3, [r3, #5]
 801d96a:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 801d96e:	429a      	cmp	r2, r3
 801d970:	f4ff ae3f 	bcc.w	801d5f2 <uart_testing+0xca>
	}
    response.test_result = TEST_PASS;
 801d974:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d978:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801d97c:	2201      	movs	r2, #1
 801d97e:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 801d980:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d984:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801d988:	6818      	ldr	r0, [r3, #0]
 801d98a:	f7f4 fbeb 	bl	8012164 <vPortFree>
    return response;
 801d98e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d992:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d996:	6819      	ldr	r1, [r3, #0]
 801d998:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d99c:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801d9a0:	460b      	mov	r3, r1
 801d9a2:	6810      	ldr	r0, [r2, #0]
 801d9a4:	6018      	str	r0, [r3, #0]
 801d9a6:	8892      	ldrh	r2, [r2, #4]
 801d9a8:	809a      	strh	r2, [r3, #4]
}
 801d9aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801d9ae:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801d9b2:	6818      	ldr	r0, [r3, #0]
 801d9b4:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 801d9b8:	46bd      	mov	sp, r7
 801d9ba:	bd80      	pop	{r7, pc}
 801d9bc:	0802196c 	.word	0x0802196c

0801d9c0 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801d9c0:	b580      	push	{r7, lr}
 801d9c2:	b084      	sub	sp, #16
 801d9c4:	af00      	add	r7, sp, #0
 801d9c6:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d9c8:	2300      	movs	r3, #0
 801d9ca:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance)
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	681a      	ldr	r2, [r3, #0]
 801d9d0:	4b13      	ldr	r3, [pc, #76]	@ (801da20 <HAL_UART_TxCpltCallback+0x60>)
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	429a      	cmp	r2, r3
 801d9d6:	d103      	bne.n	801d9e0 <HAL_UART_TxCpltCallback+0x20>
    {
        printf("Receiver Tx callback fired\n\r");
 801d9d8:	4812      	ldr	r0, [pc, #72]	@ (801da24 <HAL_UART_TxCpltCallback+0x64>)
 801d9da:	f000 f97b 	bl	801dcd4 <iprintf>
 801d9de:	e010      	b.n	801da02 <HAL_UART_TxCpltCallback+0x42>
    }
    else if (huart->Instance == UART_SENDER->Instance)
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	681a      	ldr	r2, [r3, #0]
 801d9e4:	4b10      	ldr	r3, [pc, #64]	@ (801da28 <HAL_UART_TxCpltCallback+0x68>)
 801d9e6:	681b      	ldr	r3, [r3, #0]
 801d9e8:	429a      	cmp	r2, r3
 801d9ea:	d10a      	bne.n	801da02 <HAL_UART_TxCpltCallback+0x42>
    {
        xSemaphoreGiveFromISR(UartTxHandle, &xHigherPriorityTaskWoken);
 801d9ec:	4b0f      	ldr	r3, [pc, #60]	@ (801da2c <HAL_UART_TxCpltCallback+0x6c>)
 801d9ee:	681b      	ldr	r3, [r3, #0]
 801d9f0:	f107 020c 	add.w	r2, r7, #12
 801d9f4:	4611      	mov	r1, r2
 801d9f6:	4618      	mov	r0, r3
 801d9f8:	f7f1 fe8f 	bl	800f71a <xQueueGiveFromISR>
        printf("Sender Tx callback fired\n\r");
 801d9fc:	480c      	ldr	r0, [pc, #48]	@ (801da30 <HAL_UART_TxCpltCallback+0x70>)
 801d9fe:	f000 f969 	bl	801dcd4 <iprintf>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	2b00      	cmp	r3, #0
 801da06:	d007      	beq.n	801da18 <HAL_UART_TxCpltCallback+0x58>
 801da08:	4b0a      	ldr	r3, [pc, #40]	@ (801da34 <HAL_UART_TxCpltCallback+0x74>)
 801da0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801da0e:	601a      	str	r2, [r3, #0]
 801da10:	f3bf 8f4f 	dsb	sy
 801da14:	f3bf 8f6f 	isb	sy
}
 801da18:	bf00      	nop
 801da1a:	3710      	adds	r7, #16
 801da1c:	46bd      	mov	sp, r7
 801da1e:	bd80      	pop	{r7, pc}
 801da20:	200004e4 	.word	0x200004e4
 801da24:	0802198c 	.word	0x0802198c
 801da28:	2000056c 	.word	0x2000056c
 801da2c:	20000c94 	.word	0x20000c94
 801da30:	080219ac 	.word	0x080219ac
 801da34:	e000ed04 	.word	0xe000ed04

0801da38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801da38:	b580      	push	{r7, lr}
 801da3a:	b084      	sub	sp, #16
 801da3c:	af00      	add	r7, sp, #0
 801da3e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801da40:	2300      	movs	r3, #0
 801da42:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance)
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	681a      	ldr	r2, [r3, #0]
 801da48:	4b1b      	ldr	r3, [pc, #108]	@ (801dab8 <HAL_UART_RxCpltCallback+0x80>)
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	429a      	cmp	r2, r3
 801da4e:	d112      	bne.n	801da76 <HAL_UART_RxCpltCallback+0x3e>
    {
    	 if (HAL_UART_Transmit_IT(UART_RECEIVER, UART_RECEIVER->pRxBuffPtr, UART_RECEIVER->RxXferSize) != HAL_OK){
 801da50:	4b19      	ldr	r3, [pc, #100]	@ (801dab8 <HAL_UART_RxCpltCallback+0x80>)
 801da52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801da54:	4a18      	ldr	r2, [pc, #96]	@ (801dab8 <HAL_UART_RxCpltCallback+0x80>)
 801da56:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
 801da5a:	4619      	mov	r1, r3
 801da5c:	4816      	ldr	r0, [pc, #88]	@ (801dab8 <HAL_UART_RxCpltCallback+0x80>)
 801da5e:	f7ed fb8d 	bl	800b17c <HAL_UART_Transmit_IT>
 801da62:	4603      	mov	r3, r0
 801da64:	2b00      	cmp	r3, #0
 801da66:	d002      	beq.n	801da6e <HAL_UART_RxCpltCallback+0x36>
             printf("Receiver Failed to start transmit back\n\r");
 801da68:	4814      	ldr	r0, [pc, #80]	@ (801dabc <HAL_UART_RxCpltCallback+0x84>)
 801da6a:	f000 f933 	bl	801dcd4 <iprintf>
    	 }
        printf("Receiver Rx callback fired \n\r");
 801da6e:	4814      	ldr	r0, [pc, #80]	@ (801dac0 <HAL_UART_RxCpltCallback+0x88>)
 801da70:	f000 f930 	bl	801dcd4 <iprintf>
 801da74:	e010      	b.n	801da98 <HAL_UART_RxCpltCallback+0x60>
    }
    else if (huart->Instance == UART_SENDER->Instance)
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	681a      	ldr	r2, [r3, #0]
 801da7a:	4b12      	ldr	r3, [pc, #72]	@ (801dac4 <HAL_UART_RxCpltCallback+0x8c>)
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	429a      	cmp	r2, r3
 801da80:	d10a      	bne.n	801da98 <HAL_UART_RxCpltCallback+0x60>
    {
        xSemaphoreGiveFromISR(UartRxHandle, &xHigherPriorityTaskWoken);
 801da82:	4b11      	ldr	r3, [pc, #68]	@ (801dac8 <HAL_UART_RxCpltCallback+0x90>)
 801da84:	681b      	ldr	r3, [r3, #0]
 801da86:	f107 020c 	add.w	r2, r7, #12
 801da8a:	4611      	mov	r1, r2
 801da8c:	4618      	mov	r0, r3
 801da8e:	f7f1 fe44 	bl	800f71a <xQueueGiveFromISR>
        printf("Sender Rx callback fired (received back)\n\r");
 801da92:	480e      	ldr	r0, [pc, #56]	@ (801dacc <HAL_UART_RxCpltCallback+0x94>)
 801da94:	f000 f91e 	bl	801dcd4 <iprintf>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801da98:	68fb      	ldr	r3, [r7, #12]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d007      	beq.n	801daae <HAL_UART_RxCpltCallback+0x76>
 801da9e:	4b0c      	ldr	r3, [pc, #48]	@ (801dad0 <HAL_UART_RxCpltCallback+0x98>)
 801daa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801daa4:	601a      	str	r2, [r3, #0]
 801daa6:	f3bf 8f4f 	dsb	sy
 801daaa:	f3bf 8f6f 	isb	sy
}
 801daae:	bf00      	nop
 801dab0:	3710      	adds	r7, #16
 801dab2:	46bd      	mov	sp, r7
 801dab4:	bd80      	pop	{r7, pc}
 801dab6:	bf00      	nop
 801dab8:	200004e4 	.word	0x200004e4
 801dabc:	080219c8 	.word	0x080219c8
 801dac0:	080219f4 	.word	0x080219f4
 801dac4:	2000056c 	.word	0x2000056c
 801dac8:	20000c90 	.word	0x20000c90
 801dacc:	08021a14 	.word	0x08021a14
 801dad0:	e000ed04 	.word	0xe000ed04

0801dad4 <rand>:
 801dad4:	4b16      	ldr	r3, [pc, #88]	@ (801db30 <rand+0x5c>)
 801dad6:	b510      	push	{r4, lr}
 801dad8:	681c      	ldr	r4, [r3, #0]
 801dada:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dadc:	b9b3      	cbnz	r3, 801db0c <rand+0x38>
 801dade:	2018      	movs	r0, #24
 801dae0:	f000 faa8 	bl	801e034 <malloc>
 801dae4:	4602      	mov	r2, r0
 801dae6:	6320      	str	r0, [r4, #48]	@ 0x30
 801dae8:	b920      	cbnz	r0, 801daf4 <rand+0x20>
 801daea:	4b12      	ldr	r3, [pc, #72]	@ (801db34 <rand+0x60>)
 801daec:	4812      	ldr	r0, [pc, #72]	@ (801db38 <rand+0x64>)
 801daee:	2152      	movs	r1, #82	@ 0x52
 801daf0:	f000 fa38 	bl	801df64 <__assert_func>
 801daf4:	4911      	ldr	r1, [pc, #68]	@ (801db3c <rand+0x68>)
 801daf6:	4b12      	ldr	r3, [pc, #72]	@ (801db40 <rand+0x6c>)
 801daf8:	e9c0 1300 	strd	r1, r3, [r0]
 801dafc:	4b11      	ldr	r3, [pc, #68]	@ (801db44 <rand+0x70>)
 801dafe:	6083      	str	r3, [r0, #8]
 801db00:	230b      	movs	r3, #11
 801db02:	8183      	strh	r3, [r0, #12]
 801db04:	2100      	movs	r1, #0
 801db06:	2001      	movs	r0, #1
 801db08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801db0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801db0e:	480e      	ldr	r0, [pc, #56]	@ (801db48 <rand+0x74>)
 801db10:	690b      	ldr	r3, [r1, #16]
 801db12:	694c      	ldr	r4, [r1, #20]
 801db14:	4a0d      	ldr	r2, [pc, #52]	@ (801db4c <rand+0x78>)
 801db16:	4358      	muls	r0, r3
 801db18:	fb02 0004 	mla	r0, r2, r4, r0
 801db1c:	fba3 3202 	umull	r3, r2, r3, r2
 801db20:	3301      	adds	r3, #1
 801db22:	eb40 0002 	adc.w	r0, r0, r2
 801db26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801db2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801db2e:	bd10      	pop	{r4, pc}
 801db30:	2000003c 	.word	0x2000003c
 801db34:	08021ca6 	.word	0x08021ca6
 801db38:	08021cbd 	.word	0x08021cbd
 801db3c:	abcd330e 	.word	0xabcd330e
 801db40:	e66d1234 	.word	0xe66d1234
 801db44:	0005deec 	.word	0x0005deec
 801db48:	5851f42d 	.word	0x5851f42d
 801db4c:	4c957f2d 	.word	0x4c957f2d

0801db50 <std>:
 801db50:	2300      	movs	r3, #0
 801db52:	b510      	push	{r4, lr}
 801db54:	4604      	mov	r4, r0
 801db56:	e9c0 3300 	strd	r3, r3, [r0]
 801db5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801db5e:	6083      	str	r3, [r0, #8]
 801db60:	8181      	strh	r1, [r0, #12]
 801db62:	6643      	str	r3, [r0, #100]	@ 0x64
 801db64:	81c2      	strh	r2, [r0, #14]
 801db66:	6183      	str	r3, [r0, #24]
 801db68:	4619      	mov	r1, r3
 801db6a:	2208      	movs	r2, #8
 801db6c:	305c      	adds	r0, #92	@ 0x5c
 801db6e:	f000 f916 	bl	801dd9e <memset>
 801db72:	4b0d      	ldr	r3, [pc, #52]	@ (801dba8 <std+0x58>)
 801db74:	6263      	str	r3, [r4, #36]	@ 0x24
 801db76:	4b0d      	ldr	r3, [pc, #52]	@ (801dbac <std+0x5c>)
 801db78:	62a3      	str	r3, [r4, #40]	@ 0x28
 801db7a:	4b0d      	ldr	r3, [pc, #52]	@ (801dbb0 <std+0x60>)
 801db7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801db7e:	4b0d      	ldr	r3, [pc, #52]	@ (801dbb4 <std+0x64>)
 801db80:	6323      	str	r3, [r4, #48]	@ 0x30
 801db82:	4b0d      	ldr	r3, [pc, #52]	@ (801dbb8 <std+0x68>)
 801db84:	6224      	str	r4, [r4, #32]
 801db86:	429c      	cmp	r4, r3
 801db88:	d006      	beq.n	801db98 <std+0x48>
 801db8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801db8e:	4294      	cmp	r4, r2
 801db90:	d002      	beq.n	801db98 <std+0x48>
 801db92:	33d0      	adds	r3, #208	@ 0xd0
 801db94:	429c      	cmp	r4, r3
 801db96:	d105      	bne.n	801dba4 <std+0x54>
 801db98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801db9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dba0:	f000 b9ce 	b.w	801df40 <__retarget_lock_init_recursive>
 801dba4:	bd10      	pop	{r4, pc}
 801dba6:	bf00      	nop
 801dba8:	0801dcf9 	.word	0x0801dcf9
 801dbac:	0801dd1b 	.word	0x0801dd1b
 801dbb0:	0801dd53 	.word	0x0801dd53
 801dbb4:	0801dd77 	.word	0x0801dd77
 801dbb8:	200278e8 	.word	0x200278e8

0801dbbc <stdio_exit_handler>:
 801dbbc:	4a02      	ldr	r2, [pc, #8]	@ (801dbc8 <stdio_exit_handler+0xc>)
 801dbbe:	4903      	ldr	r1, [pc, #12]	@ (801dbcc <stdio_exit_handler+0x10>)
 801dbc0:	4803      	ldr	r0, [pc, #12]	@ (801dbd0 <stdio_exit_handler+0x14>)
 801dbc2:	f000 b869 	b.w	801dc98 <_fwalk_sglue>
 801dbc6:	bf00      	nop
 801dbc8:	20000030 	.word	0x20000030
 801dbcc:	0801e845 	.word	0x0801e845
 801dbd0:	20000040 	.word	0x20000040

0801dbd4 <cleanup_stdio>:
 801dbd4:	6841      	ldr	r1, [r0, #4]
 801dbd6:	4b0c      	ldr	r3, [pc, #48]	@ (801dc08 <cleanup_stdio+0x34>)
 801dbd8:	4299      	cmp	r1, r3
 801dbda:	b510      	push	{r4, lr}
 801dbdc:	4604      	mov	r4, r0
 801dbde:	d001      	beq.n	801dbe4 <cleanup_stdio+0x10>
 801dbe0:	f000 fe30 	bl	801e844 <_fflush_r>
 801dbe4:	68a1      	ldr	r1, [r4, #8]
 801dbe6:	4b09      	ldr	r3, [pc, #36]	@ (801dc0c <cleanup_stdio+0x38>)
 801dbe8:	4299      	cmp	r1, r3
 801dbea:	d002      	beq.n	801dbf2 <cleanup_stdio+0x1e>
 801dbec:	4620      	mov	r0, r4
 801dbee:	f000 fe29 	bl	801e844 <_fflush_r>
 801dbf2:	68e1      	ldr	r1, [r4, #12]
 801dbf4:	4b06      	ldr	r3, [pc, #24]	@ (801dc10 <cleanup_stdio+0x3c>)
 801dbf6:	4299      	cmp	r1, r3
 801dbf8:	d004      	beq.n	801dc04 <cleanup_stdio+0x30>
 801dbfa:	4620      	mov	r0, r4
 801dbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc00:	f000 be20 	b.w	801e844 <_fflush_r>
 801dc04:	bd10      	pop	{r4, pc}
 801dc06:	bf00      	nop
 801dc08:	200278e8 	.word	0x200278e8
 801dc0c:	20027950 	.word	0x20027950
 801dc10:	200279b8 	.word	0x200279b8

0801dc14 <global_stdio_init.part.0>:
 801dc14:	b510      	push	{r4, lr}
 801dc16:	4b0b      	ldr	r3, [pc, #44]	@ (801dc44 <global_stdio_init.part.0+0x30>)
 801dc18:	4c0b      	ldr	r4, [pc, #44]	@ (801dc48 <global_stdio_init.part.0+0x34>)
 801dc1a:	4a0c      	ldr	r2, [pc, #48]	@ (801dc4c <global_stdio_init.part.0+0x38>)
 801dc1c:	601a      	str	r2, [r3, #0]
 801dc1e:	4620      	mov	r0, r4
 801dc20:	2200      	movs	r2, #0
 801dc22:	2104      	movs	r1, #4
 801dc24:	f7ff ff94 	bl	801db50 <std>
 801dc28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801dc2c:	2201      	movs	r2, #1
 801dc2e:	2109      	movs	r1, #9
 801dc30:	f7ff ff8e 	bl	801db50 <std>
 801dc34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801dc38:	2202      	movs	r2, #2
 801dc3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc3e:	2112      	movs	r1, #18
 801dc40:	f7ff bf86 	b.w	801db50 <std>
 801dc44:	20027a20 	.word	0x20027a20
 801dc48:	200278e8 	.word	0x200278e8
 801dc4c:	0801dbbd 	.word	0x0801dbbd

0801dc50 <__sfp_lock_acquire>:
 801dc50:	4801      	ldr	r0, [pc, #4]	@ (801dc58 <__sfp_lock_acquire+0x8>)
 801dc52:	f000 b976 	b.w	801df42 <__retarget_lock_acquire_recursive>
 801dc56:	bf00      	nop
 801dc58:	20027a29 	.word	0x20027a29

0801dc5c <__sfp_lock_release>:
 801dc5c:	4801      	ldr	r0, [pc, #4]	@ (801dc64 <__sfp_lock_release+0x8>)
 801dc5e:	f000 b971 	b.w	801df44 <__retarget_lock_release_recursive>
 801dc62:	bf00      	nop
 801dc64:	20027a29 	.word	0x20027a29

0801dc68 <__sinit>:
 801dc68:	b510      	push	{r4, lr}
 801dc6a:	4604      	mov	r4, r0
 801dc6c:	f7ff fff0 	bl	801dc50 <__sfp_lock_acquire>
 801dc70:	6a23      	ldr	r3, [r4, #32]
 801dc72:	b11b      	cbz	r3, 801dc7c <__sinit+0x14>
 801dc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc78:	f7ff bff0 	b.w	801dc5c <__sfp_lock_release>
 801dc7c:	4b04      	ldr	r3, [pc, #16]	@ (801dc90 <__sinit+0x28>)
 801dc7e:	6223      	str	r3, [r4, #32]
 801dc80:	4b04      	ldr	r3, [pc, #16]	@ (801dc94 <__sinit+0x2c>)
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	d1f5      	bne.n	801dc74 <__sinit+0xc>
 801dc88:	f7ff ffc4 	bl	801dc14 <global_stdio_init.part.0>
 801dc8c:	e7f2      	b.n	801dc74 <__sinit+0xc>
 801dc8e:	bf00      	nop
 801dc90:	0801dbd5 	.word	0x0801dbd5
 801dc94:	20027a20 	.word	0x20027a20

0801dc98 <_fwalk_sglue>:
 801dc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc9c:	4607      	mov	r7, r0
 801dc9e:	4688      	mov	r8, r1
 801dca0:	4614      	mov	r4, r2
 801dca2:	2600      	movs	r6, #0
 801dca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dca8:	f1b9 0901 	subs.w	r9, r9, #1
 801dcac:	d505      	bpl.n	801dcba <_fwalk_sglue+0x22>
 801dcae:	6824      	ldr	r4, [r4, #0]
 801dcb0:	2c00      	cmp	r4, #0
 801dcb2:	d1f7      	bne.n	801dca4 <_fwalk_sglue+0xc>
 801dcb4:	4630      	mov	r0, r6
 801dcb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dcba:	89ab      	ldrh	r3, [r5, #12]
 801dcbc:	2b01      	cmp	r3, #1
 801dcbe:	d907      	bls.n	801dcd0 <_fwalk_sglue+0x38>
 801dcc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dcc4:	3301      	adds	r3, #1
 801dcc6:	d003      	beq.n	801dcd0 <_fwalk_sglue+0x38>
 801dcc8:	4629      	mov	r1, r5
 801dcca:	4638      	mov	r0, r7
 801dccc:	47c0      	blx	r8
 801dcce:	4306      	orrs	r6, r0
 801dcd0:	3568      	adds	r5, #104	@ 0x68
 801dcd2:	e7e9      	b.n	801dca8 <_fwalk_sglue+0x10>

0801dcd4 <iprintf>:
 801dcd4:	b40f      	push	{r0, r1, r2, r3}
 801dcd6:	b507      	push	{r0, r1, r2, lr}
 801dcd8:	4906      	ldr	r1, [pc, #24]	@ (801dcf4 <iprintf+0x20>)
 801dcda:	ab04      	add	r3, sp, #16
 801dcdc:	6808      	ldr	r0, [r1, #0]
 801dcde:	f853 2b04 	ldr.w	r2, [r3], #4
 801dce2:	6881      	ldr	r1, [r0, #8]
 801dce4:	9301      	str	r3, [sp, #4]
 801dce6:	f000 fa85 	bl	801e1f4 <_vfiprintf_r>
 801dcea:	b003      	add	sp, #12
 801dcec:	f85d eb04 	ldr.w	lr, [sp], #4
 801dcf0:	b004      	add	sp, #16
 801dcf2:	4770      	bx	lr
 801dcf4:	2000003c 	.word	0x2000003c

0801dcf8 <__sread>:
 801dcf8:	b510      	push	{r4, lr}
 801dcfa:	460c      	mov	r4, r1
 801dcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd00:	f000 f8d6 	bl	801deb0 <_read_r>
 801dd04:	2800      	cmp	r0, #0
 801dd06:	bfab      	itete	ge
 801dd08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801dd0a:	89a3      	ldrhlt	r3, [r4, #12]
 801dd0c:	181b      	addge	r3, r3, r0
 801dd0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801dd12:	bfac      	ite	ge
 801dd14:	6563      	strge	r3, [r4, #84]	@ 0x54
 801dd16:	81a3      	strhlt	r3, [r4, #12]
 801dd18:	bd10      	pop	{r4, pc}

0801dd1a <__swrite>:
 801dd1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd1e:	461f      	mov	r7, r3
 801dd20:	898b      	ldrh	r3, [r1, #12]
 801dd22:	05db      	lsls	r3, r3, #23
 801dd24:	4605      	mov	r5, r0
 801dd26:	460c      	mov	r4, r1
 801dd28:	4616      	mov	r6, r2
 801dd2a:	d505      	bpl.n	801dd38 <__swrite+0x1e>
 801dd2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd30:	2302      	movs	r3, #2
 801dd32:	2200      	movs	r2, #0
 801dd34:	f000 f8aa 	bl	801de8c <_lseek_r>
 801dd38:	89a3      	ldrh	r3, [r4, #12]
 801dd3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dd3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801dd42:	81a3      	strh	r3, [r4, #12]
 801dd44:	4632      	mov	r2, r6
 801dd46:	463b      	mov	r3, r7
 801dd48:	4628      	mov	r0, r5
 801dd4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dd4e:	f000 b8c1 	b.w	801ded4 <_write_r>

0801dd52 <__sseek>:
 801dd52:	b510      	push	{r4, lr}
 801dd54:	460c      	mov	r4, r1
 801dd56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd5a:	f000 f897 	bl	801de8c <_lseek_r>
 801dd5e:	1c43      	adds	r3, r0, #1
 801dd60:	89a3      	ldrh	r3, [r4, #12]
 801dd62:	bf15      	itete	ne
 801dd64:	6560      	strne	r0, [r4, #84]	@ 0x54
 801dd66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801dd6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801dd6e:	81a3      	strheq	r3, [r4, #12]
 801dd70:	bf18      	it	ne
 801dd72:	81a3      	strhne	r3, [r4, #12]
 801dd74:	bd10      	pop	{r4, pc}

0801dd76 <__sclose>:
 801dd76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd7a:	f000 b819 	b.w	801ddb0 <_close_r>

0801dd7e <memcmp>:
 801dd7e:	b510      	push	{r4, lr}
 801dd80:	3901      	subs	r1, #1
 801dd82:	4402      	add	r2, r0
 801dd84:	4290      	cmp	r0, r2
 801dd86:	d101      	bne.n	801dd8c <memcmp+0xe>
 801dd88:	2000      	movs	r0, #0
 801dd8a:	e005      	b.n	801dd98 <memcmp+0x1a>
 801dd8c:	7803      	ldrb	r3, [r0, #0]
 801dd8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dd92:	42a3      	cmp	r3, r4
 801dd94:	d001      	beq.n	801dd9a <memcmp+0x1c>
 801dd96:	1b18      	subs	r0, r3, r4
 801dd98:	bd10      	pop	{r4, pc}
 801dd9a:	3001      	adds	r0, #1
 801dd9c:	e7f2      	b.n	801dd84 <memcmp+0x6>

0801dd9e <memset>:
 801dd9e:	4402      	add	r2, r0
 801dda0:	4603      	mov	r3, r0
 801dda2:	4293      	cmp	r3, r2
 801dda4:	d100      	bne.n	801dda8 <memset+0xa>
 801dda6:	4770      	bx	lr
 801dda8:	f803 1b01 	strb.w	r1, [r3], #1
 801ddac:	e7f9      	b.n	801dda2 <memset+0x4>
	...

0801ddb0 <_close_r>:
 801ddb0:	b538      	push	{r3, r4, r5, lr}
 801ddb2:	4d06      	ldr	r5, [pc, #24]	@ (801ddcc <_close_r+0x1c>)
 801ddb4:	2300      	movs	r3, #0
 801ddb6:	4604      	mov	r4, r0
 801ddb8:	4608      	mov	r0, r1
 801ddba:	602b      	str	r3, [r5, #0]
 801ddbc:	f7e4 fa5c 	bl	8002278 <_close>
 801ddc0:	1c43      	adds	r3, r0, #1
 801ddc2:	d102      	bne.n	801ddca <_close_r+0x1a>
 801ddc4:	682b      	ldr	r3, [r5, #0]
 801ddc6:	b103      	cbz	r3, 801ddca <_close_r+0x1a>
 801ddc8:	6023      	str	r3, [r4, #0]
 801ddca:	bd38      	pop	{r3, r4, r5, pc}
 801ddcc:	20027a24 	.word	0x20027a24

0801ddd0 <_reclaim_reent>:
 801ddd0:	4b2d      	ldr	r3, [pc, #180]	@ (801de88 <_reclaim_reent+0xb8>)
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	4283      	cmp	r3, r0
 801ddd6:	b570      	push	{r4, r5, r6, lr}
 801ddd8:	4604      	mov	r4, r0
 801ddda:	d053      	beq.n	801de84 <_reclaim_reent+0xb4>
 801dddc:	69c3      	ldr	r3, [r0, #28]
 801ddde:	b31b      	cbz	r3, 801de28 <_reclaim_reent+0x58>
 801dde0:	68db      	ldr	r3, [r3, #12]
 801dde2:	b163      	cbz	r3, 801ddfe <_reclaim_reent+0x2e>
 801dde4:	2500      	movs	r5, #0
 801dde6:	69e3      	ldr	r3, [r4, #28]
 801dde8:	68db      	ldr	r3, [r3, #12]
 801ddea:	5959      	ldr	r1, [r3, r5]
 801ddec:	b9b1      	cbnz	r1, 801de1c <_reclaim_reent+0x4c>
 801ddee:	3504      	adds	r5, #4
 801ddf0:	2d80      	cmp	r5, #128	@ 0x80
 801ddf2:	d1f8      	bne.n	801dde6 <_reclaim_reent+0x16>
 801ddf4:	69e3      	ldr	r3, [r4, #28]
 801ddf6:	4620      	mov	r0, r4
 801ddf8:	68d9      	ldr	r1, [r3, #12]
 801ddfa:	f000 f8d1 	bl	801dfa0 <_free_r>
 801ddfe:	69e3      	ldr	r3, [r4, #28]
 801de00:	6819      	ldr	r1, [r3, #0]
 801de02:	b111      	cbz	r1, 801de0a <_reclaim_reent+0x3a>
 801de04:	4620      	mov	r0, r4
 801de06:	f000 f8cb 	bl	801dfa0 <_free_r>
 801de0a:	69e3      	ldr	r3, [r4, #28]
 801de0c:	689d      	ldr	r5, [r3, #8]
 801de0e:	b15d      	cbz	r5, 801de28 <_reclaim_reent+0x58>
 801de10:	4629      	mov	r1, r5
 801de12:	4620      	mov	r0, r4
 801de14:	682d      	ldr	r5, [r5, #0]
 801de16:	f000 f8c3 	bl	801dfa0 <_free_r>
 801de1a:	e7f8      	b.n	801de0e <_reclaim_reent+0x3e>
 801de1c:	680e      	ldr	r6, [r1, #0]
 801de1e:	4620      	mov	r0, r4
 801de20:	f000 f8be 	bl	801dfa0 <_free_r>
 801de24:	4631      	mov	r1, r6
 801de26:	e7e1      	b.n	801ddec <_reclaim_reent+0x1c>
 801de28:	6961      	ldr	r1, [r4, #20]
 801de2a:	b111      	cbz	r1, 801de32 <_reclaim_reent+0x62>
 801de2c:	4620      	mov	r0, r4
 801de2e:	f000 f8b7 	bl	801dfa0 <_free_r>
 801de32:	69e1      	ldr	r1, [r4, #28]
 801de34:	b111      	cbz	r1, 801de3c <_reclaim_reent+0x6c>
 801de36:	4620      	mov	r0, r4
 801de38:	f000 f8b2 	bl	801dfa0 <_free_r>
 801de3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801de3e:	b111      	cbz	r1, 801de46 <_reclaim_reent+0x76>
 801de40:	4620      	mov	r0, r4
 801de42:	f000 f8ad 	bl	801dfa0 <_free_r>
 801de46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801de48:	b111      	cbz	r1, 801de50 <_reclaim_reent+0x80>
 801de4a:	4620      	mov	r0, r4
 801de4c:	f000 f8a8 	bl	801dfa0 <_free_r>
 801de50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801de52:	b111      	cbz	r1, 801de5a <_reclaim_reent+0x8a>
 801de54:	4620      	mov	r0, r4
 801de56:	f000 f8a3 	bl	801dfa0 <_free_r>
 801de5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801de5c:	b111      	cbz	r1, 801de64 <_reclaim_reent+0x94>
 801de5e:	4620      	mov	r0, r4
 801de60:	f000 f89e 	bl	801dfa0 <_free_r>
 801de64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801de66:	b111      	cbz	r1, 801de6e <_reclaim_reent+0x9e>
 801de68:	4620      	mov	r0, r4
 801de6a:	f000 f899 	bl	801dfa0 <_free_r>
 801de6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801de70:	b111      	cbz	r1, 801de78 <_reclaim_reent+0xa8>
 801de72:	4620      	mov	r0, r4
 801de74:	f000 f894 	bl	801dfa0 <_free_r>
 801de78:	6a23      	ldr	r3, [r4, #32]
 801de7a:	b11b      	cbz	r3, 801de84 <_reclaim_reent+0xb4>
 801de7c:	4620      	mov	r0, r4
 801de7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de82:	4718      	bx	r3
 801de84:	bd70      	pop	{r4, r5, r6, pc}
 801de86:	bf00      	nop
 801de88:	2000003c 	.word	0x2000003c

0801de8c <_lseek_r>:
 801de8c:	b538      	push	{r3, r4, r5, lr}
 801de8e:	4d07      	ldr	r5, [pc, #28]	@ (801deac <_lseek_r+0x20>)
 801de90:	4604      	mov	r4, r0
 801de92:	4608      	mov	r0, r1
 801de94:	4611      	mov	r1, r2
 801de96:	2200      	movs	r2, #0
 801de98:	602a      	str	r2, [r5, #0]
 801de9a:	461a      	mov	r2, r3
 801de9c:	f7e4 fa13 	bl	80022c6 <_lseek>
 801dea0:	1c43      	adds	r3, r0, #1
 801dea2:	d102      	bne.n	801deaa <_lseek_r+0x1e>
 801dea4:	682b      	ldr	r3, [r5, #0]
 801dea6:	b103      	cbz	r3, 801deaa <_lseek_r+0x1e>
 801dea8:	6023      	str	r3, [r4, #0]
 801deaa:	bd38      	pop	{r3, r4, r5, pc}
 801deac:	20027a24 	.word	0x20027a24

0801deb0 <_read_r>:
 801deb0:	b538      	push	{r3, r4, r5, lr}
 801deb2:	4d07      	ldr	r5, [pc, #28]	@ (801ded0 <_read_r+0x20>)
 801deb4:	4604      	mov	r4, r0
 801deb6:	4608      	mov	r0, r1
 801deb8:	4611      	mov	r1, r2
 801deba:	2200      	movs	r2, #0
 801debc:	602a      	str	r2, [r5, #0]
 801debe:	461a      	mov	r2, r3
 801dec0:	f7e4 f9a1 	bl	8002206 <_read>
 801dec4:	1c43      	adds	r3, r0, #1
 801dec6:	d102      	bne.n	801dece <_read_r+0x1e>
 801dec8:	682b      	ldr	r3, [r5, #0]
 801deca:	b103      	cbz	r3, 801dece <_read_r+0x1e>
 801decc:	6023      	str	r3, [r4, #0]
 801dece:	bd38      	pop	{r3, r4, r5, pc}
 801ded0:	20027a24 	.word	0x20027a24

0801ded4 <_write_r>:
 801ded4:	b538      	push	{r3, r4, r5, lr}
 801ded6:	4d07      	ldr	r5, [pc, #28]	@ (801def4 <_write_r+0x20>)
 801ded8:	4604      	mov	r4, r0
 801deda:	4608      	mov	r0, r1
 801dedc:	4611      	mov	r1, r2
 801dede:	2200      	movs	r2, #0
 801dee0:	602a      	str	r2, [r5, #0]
 801dee2:	461a      	mov	r2, r3
 801dee4:	f7e4 f9ac 	bl	8002240 <_write>
 801dee8:	1c43      	adds	r3, r0, #1
 801deea:	d102      	bne.n	801def2 <_write_r+0x1e>
 801deec:	682b      	ldr	r3, [r5, #0]
 801deee:	b103      	cbz	r3, 801def2 <_write_r+0x1e>
 801def0:	6023      	str	r3, [r4, #0]
 801def2:	bd38      	pop	{r3, r4, r5, pc}
 801def4:	20027a24 	.word	0x20027a24

0801def8 <__libc_init_array>:
 801def8:	b570      	push	{r4, r5, r6, lr}
 801defa:	4d0d      	ldr	r5, [pc, #52]	@ (801df30 <__libc_init_array+0x38>)
 801defc:	4c0d      	ldr	r4, [pc, #52]	@ (801df34 <__libc_init_array+0x3c>)
 801defe:	1b64      	subs	r4, r4, r5
 801df00:	10a4      	asrs	r4, r4, #2
 801df02:	2600      	movs	r6, #0
 801df04:	42a6      	cmp	r6, r4
 801df06:	d109      	bne.n	801df1c <__libc_init_array+0x24>
 801df08:	4d0b      	ldr	r5, [pc, #44]	@ (801df38 <__libc_init_array+0x40>)
 801df0a:	4c0c      	ldr	r4, [pc, #48]	@ (801df3c <__libc_init_array+0x44>)
 801df0c:	f000 fe48 	bl	801eba0 <_init>
 801df10:	1b64      	subs	r4, r4, r5
 801df12:	10a4      	asrs	r4, r4, #2
 801df14:	2600      	movs	r6, #0
 801df16:	42a6      	cmp	r6, r4
 801df18:	d105      	bne.n	801df26 <__libc_init_array+0x2e>
 801df1a:	bd70      	pop	{r4, r5, r6, pc}
 801df1c:	f855 3b04 	ldr.w	r3, [r5], #4
 801df20:	4798      	blx	r3
 801df22:	3601      	adds	r6, #1
 801df24:	e7ee      	b.n	801df04 <__libc_init_array+0xc>
 801df26:	f855 3b04 	ldr.w	r3, [r5], #4
 801df2a:	4798      	blx	r3
 801df2c:	3601      	adds	r6, #1
 801df2e:	e7f2      	b.n	801df16 <__libc_init_array+0x1e>
 801df30:	08021d8c 	.word	0x08021d8c
 801df34:	08021d8c 	.word	0x08021d8c
 801df38:	08021d8c 	.word	0x08021d8c
 801df3c:	08021d90 	.word	0x08021d90

0801df40 <__retarget_lock_init_recursive>:
 801df40:	4770      	bx	lr

0801df42 <__retarget_lock_acquire_recursive>:
 801df42:	4770      	bx	lr

0801df44 <__retarget_lock_release_recursive>:
 801df44:	4770      	bx	lr

0801df46 <memcpy>:
 801df46:	440a      	add	r2, r1
 801df48:	4291      	cmp	r1, r2
 801df4a:	f100 33ff 	add.w	r3, r0, #4294967295
 801df4e:	d100      	bne.n	801df52 <memcpy+0xc>
 801df50:	4770      	bx	lr
 801df52:	b510      	push	{r4, lr}
 801df54:	f811 4b01 	ldrb.w	r4, [r1], #1
 801df58:	f803 4f01 	strb.w	r4, [r3, #1]!
 801df5c:	4291      	cmp	r1, r2
 801df5e:	d1f9      	bne.n	801df54 <memcpy+0xe>
 801df60:	bd10      	pop	{r4, pc}
	...

0801df64 <__assert_func>:
 801df64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801df66:	4614      	mov	r4, r2
 801df68:	461a      	mov	r2, r3
 801df6a:	4b09      	ldr	r3, [pc, #36]	@ (801df90 <__assert_func+0x2c>)
 801df6c:	681b      	ldr	r3, [r3, #0]
 801df6e:	4605      	mov	r5, r0
 801df70:	68d8      	ldr	r0, [r3, #12]
 801df72:	b14c      	cbz	r4, 801df88 <__assert_func+0x24>
 801df74:	4b07      	ldr	r3, [pc, #28]	@ (801df94 <__assert_func+0x30>)
 801df76:	9100      	str	r1, [sp, #0]
 801df78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801df7c:	4906      	ldr	r1, [pc, #24]	@ (801df98 <__assert_func+0x34>)
 801df7e:	462b      	mov	r3, r5
 801df80:	f000 fc88 	bl	801e894 <fiprintf>
 801df84:	f000 fd3c 	bl	801ea00 <abort>
 801df88:	4b04      	ldr	r3, [pc, #16]	@ (801df9c <__assert_func+0x38>)
 801df8a:	461c      	mov	r4, r3
 801df8c:	e7f3      	b.n	801df76 <__assert_func+0x12>
 801df8e:	bf00      	nop
 801df90:	2000003c 	.word	0x2000003c
 801df94:	08021d15 	.word	0x08021d15
 801df98:	08021d22 	.word	0x08021d22
 801df9c:	08021d50 	.word	0x08021d50

0801dfa0 <_free_r>:
 801dfa0:	b538      	push	{r3, r4, r5, lr}
 801dfa2:	4605      	mov	r5, r0
 801dfa4:	2900      	cmp	r1, #0
 801dfa6:	d041      	beq.n	801e02c <_free_r+0x8c>
 801dfa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dfac:	1f0c      	subs	r4, r1, #4
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	bfb8      	it	lt
 801dfb2:	18e4      	addlt	r4, r4, r3
 801dfb4:	f000 f8e8 	bl	801e188 <__malloc_lock>
 801dfb8:	4a1d      	ldr	r2, [pc, #116]	@ (801e030 <_free_r+0x90>)
 801dfba:	6813      	ldr	r3, [r2, #0]
 801dfbc:	b933      	cbnz	r3, 801dfcc <_free_r+0x2c>
 801dfbe:	6063      	str	r3, [r4, #4]
 801dfc0:	6014      	str	r4, [r2, #0]
 801dfc2:	4628      	mov	r0, r5
 801dfc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dfc8:	f000 b8e4 	b.w	801e194 <__malloc_unlock>
 801dfcc:	42a3      	cmp	r3, r4
 801dfce:	d908      	bls.n	801dfe2 <_free_r+0x42>
 801dfd0:	6820      	ldr	r0, [r4, #0]
 801dfd2:	1821      	adds	r1, r4, r0
 801dfd4:	428b      	cmp	r3, r1
 801dfd6:	bf01      	itttt	eq
 801dfd8:	6819      	ldreq	r1, [r3, #0]
 801dfda:	685b      	ldreq	r3, [r3, #4]
 801dfdc:	1809      	addeq	r1, r1, r0
 801dfde:	6021      	streq	r1, [r4, #0]
 801dfe0:	e7ed      	b.n	801dfbe <_free_r+0x1e>
 801dfe2:	461a      	mov	r2, r3
 801dfe4:	685b      	ldr	r3, [r3, #4]
 801dfe6:	b10b      	cbz	r3, 801dfec <_free_r+0x4c>
 801dfe8:	42a3      	cmp	r3, r4
 801dfea:	d9fa      	bls.n	801dfe2 <_free_r+0x42>
 801dfec:	6811      	ldr	r1, [r2, #0]
 801dfee:	1850      	adds	r0, r2, r1
 801dff0:	42a0      	cmp	r0, r4
 801dff2:	d10b      	bne.n	801e00c <_free_r+0x6c>
 801dff4:	6820      	ldr	r0, [r4, #0]
 801dff6:	4401      	add	r1, r0
 801dff8:	1850      	adds	r0, r2, r1
 801dffa:	4283      	cmp	r3, r0
 801dffc:	6011      	str	r1, [r2, #0]
 801dffe:	d1e0      	bne.n	801dfc2 <_free_r+0x22>
 801e000:	6818      	ldr	r0, [r3, #0]
 801e002:	685b      	ldr	r3, [r3, #4]
 801e004:	6053      	str	r3, [r2, #4]
 801e006:	4408      	add	r0, r1
 801e008:	6010      	str	r0, [r2, #0]
 801e00a:	e7da      	b.n	801dfc2 <_free_r+0x22>
 801e00c:	d902      	bls.n	801e014 <_free_r+0x74>
 801e00e:	230c      	movs	r3, #12
 801e010:	602b      	str	r3, [r5, #0]
 801e012:	e7d6      	b.n	801dfc2 <_free_r+0x22>
 801e014:	6820      	ldr	r0, [r4, #0]
 801e016:	1821      	adds	r1, r4, r0
 801e018:	428b      	cmp	r3, r1
 801e01a:	bf04      	itt	eq
 801e01c:	6819      	ldreq	r1, [r3, #0]
 801e01e:	685b      	ldreq	r3, [r3, #4]
 801e020:	6063      	str	r3, [r4, #4]
 801e022:	bf04      	itt	eq
 801e024:	1809      	addeq	r1, r1, r0
 801e026:	6021      	streq	r1, [r4, #0]
 801e028:	6054      	str	r4, [r2, #4]
 801e02a:	e7ca      	b.n	801dfc2 <_free_r+0x22>
 801e02c:	bd38      	pop	{r3, r4, r5, pc}
 801e02e:	bf00      	nop
 801e030:	20027a30 	.word	0x20027a30

0801e034 <malloc>:
 801e034:	4b02      	ldr	r3, [pc, #8]	@ (801e040 <malloc+0xc>)
 801e036:	4601      	mov	r1, r0
 801e038:	6818      	ldr	r0, [r3, #0]
 801e03a:	f000 b825 	b.w	801e088 <_malloc_r>
 801e03e:	bf00      	nop
 801e040:	2000003c 	.word	0x2000003c

0801e044 <sbrk_aligned>:
 801e044:	b570      	push	{r4, r5, r6, lr}
 801e046:	4e0f      	ldr	r6, [pc, #60]	@ (801e084 <sbrk_aligned+0x40>)
 801e048:	460c      	mov	r4, r1
 801e04a:	6831      	ldr	r1, [r6, #0]
 801e04c:	4605      	mov	r5, r0
 801e04e:	b911      	cbnz	r1, 801e056 <sbrk_aligned+0x12>
 801e050:	f000 fcc6 	bl	801e9e0 <_sbrk_r>
 801e054:	6030      	str	r0, [r6, #0]
 801e056:	4621      	mov	r1, r4
 801e058:	4628      	mov	r0, r5
 801e05a:	f000 fcc1 	bl	801e9e0 <_sbrk_r>
 801e05e:	1c43      	adds	r3, r0, #1
 801e060:	d103      	bne.n	801e06a <sbrk_aligned+0x26>
 801e062:	f04f 34ff 	mov.w	r4, #4294967295
 801e066:	4620      	mov	r0, r4
 801e068:	bd70      	pop	{r4, r5, r6, pc}
 801e06a:	1cc4      	adds	r4, r0, #3
 801e06c:	f024 0403 	bic.w	r4, r4, #3
 801e070:	42a0      	cmp	r0, r4
 801e072:	d0f8      	beq.n	801e066 <sbrk_aligned+0x22>
 801e074:	1a21      	subs	r1, r4, r0
 801e076:	4628      	mov	r0, r5
 801e078:	f000 fcb2 	bl	801e9e0 <_sbrk_r>
 801e07c:	3001      	adds	r0, #1
 801e07e:	d1f2      	bne.n	801e066 <sbrk_aligned+0x22>
 801e080:	e7ef      	b.n	801e062 <sbrk_aligned+0x1e>
 801e082:	bf00      	nop
 801e084:	20027a2c 	.word	0x20027a2c

0801e088 <_malloc_r>:
 801e088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e08c:	1ccd      	adds	r5, r1, #3
 801e08e:	f025 0503 	bic.w	r5, r5, #3
 801e092:	3508      	adds	r5, #8
 801e094:	2d0c      	cmp	r5, #12
 801e096:	bf38      	it	cc
 801e098:	250c      	movcc	r5, #12
 801e09a:	2d00      	cmp	r5, #0
 801e09c:	4606      	mov	r6, r0
 801e09e:	db01      	blt.n	801e0a4 <_malloc_r+0x1c>
 801e0a0:	42a9      	cmp	r1, r5
 801e0a2:	d904      	bls.n	801e0ae <_malloc_r+0x26>
 801e0a4:	230c      	movs	r3, #12
 801e0a6:	6033      	str	r3, [r6, #0]
 801e0a8:	2000      	movs	r0, #0
 801e0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e0ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e184 <_malloc_r+0xfc>
 801e0b2:	f000 f869 	bl	801e188 <__malloc_lock>
 801e0b6:	f8d8 3000 	ldr.w	r3, [r8]
 801e0ba:	461c      	mov	r4, r3
 801e0bc:	bb44      	cbnz	r4, 801e110 <_malloc_r+0x88>
 801e0be:	4629      	mov	r1, r5
 801e0c0:	4630      	mov	r0, r6
 801e0c2:	f7ff ffbf 	bl	801e044 <sbrk_aligned>
 801e0c6:	1c43      	adds	r3, r0, #1
 801e0c8:	4604      	mov	r4, r0
 801e0ca:	d158      	bne.n	801e17e <_malloc_r+0xf6>
 801e0cc:	f8d8 4000 	ldr.w	r4, [r8]
 801e0d0:	4627      	mov	r7, r4
 801e0d2:	2f00      	cmp	r7, #0
 801e0d4:	d143      	bne.n	801e15e <_malloc_r+0xd6>
 801e0d6:	2c00      	cmp	r4, #0
 801e0d8:	d04b      	beq.n	801e172 <_malloc_r+0xea>
 801e0da:	6823      	ldr	r3, [r4, #0]
 801e0dc:	4639      	mov	r1, r7
 801e0de:	4630      	mov	r0, r6
 801e0e0:	eb04 0903 	add.w	r9, r4, r3
 801e0e4:	f000 fc7c 	bl	801e9e0 <_sbrk_r>
 801e0e8:	4581      	cmp	r9, r0
 801e0ea:	d142      	bne.n	801e172 <_malloc_r+0xea>
 801e0ec:	6821      	ldr	r1, [r4, #0]
 801e0ee:	1a6d      	subs	r5, r5, r1
 801e0f0:	4629      	mov	r1, r5
 801e0f2:	4630      	mov	r0, r6
 801e0f4:	f7ff ffa6 	bl	801e044 <sbrk_aligned>
 801e0f8:	3001      	adds	r0, #1
 801e0fa:	d03a      	beq.n	801e172 <_malloc_r+0xea>
 801e0fc:	6823      	ldr	r3, [r4, #0]
 801e0fe:	442b      	add	r3, r5
 801e100:	6023      	str	r3, [r4, #0]
 801e102:	f8d8 3000 	ldr.w	r3, [r8]
 801e106:	685a      	ldr	r2, [r3, #4]
 801e108:	bb62      	cbnz	r2, 801e164 <_malloc_r+0xdc>
 801e10a:	f8c8 7000 	str.w	r7, [r8]
 801e10e:	e00f      	b.n	801e130 <_malloc_r+0xa8>
 801e110:	6822      	ldr	r2, [r4, #0]
 801e112:	1b52      	subs	r2, r2, r5
 801e114:	d420      	bmi.n	801e158 <_malloc_r+0xd0>
 801e116:	2a0b      	cmp	r2, #11
 801e118:	d917      	bls.n	801e14a <_malloc_r+0xc2>
 801e11a:	1961      	adds	r1, r4, r5
 801e11c:	42a3      	cmp	r3, r4
 801e11e:	6025      	str	r5, [r4, #0]
 801e120:	bf18      	it	ne
 801e122:	6059      	strne	r1, [r3, #4]
 801e124:	6863      	ldr	r3, [r4, #4]
 801e126:	bf08      	it	eq
 801e128:	f8c8 1000 	streq.w	r1, [r8]
 801e12c:	5162      	str	r2, [r4, r5]
 801e12e:	604b      	str	r3, [r1, #4]
 801e130:	4630      	mov	r0, r6
 801e132:	f000 f82f 	bl	801e194 <__malloc_unlock>
 801e136:	f104 000b 	add.w	r0, r4, #11
 801e13a:	1d23      	adds	r3, r4, #4
 801e13c:	f020 0007 	bic.w	r0, r0, #7
 801e140:	1ac2      	subs	r2, r0, r3
 801e142:	bf1c      	itt	ne
 801e144:	1a1b      	subne	r3, r3, r0
 801e146:	50a3      	strne	r3, [r4, r2]
 801e148:	e7af      	b.n	801e0aa <_malloc_r+0x22>
 801e14a:	6862      	ldr	r2, [r4, #4]
 801e14c:	42a3      	cmp	r3, r4
 801e14e:	bf0c      	ite	eq
 801e150:	f8c8 2000 	streq.w	r2, [r8]
 801e154:	605a      	strne	r2, [r3, #4]
 801e156:	e7eb      	b.n	801e130 <_malloc_r+0xa8>
 801e158:	4623      	mov	r3, r4
 801e15a:	6864      	ldr	r4, [r4, #4]
 801e15c:	e7ae      	b.n	801e0bc <_malloc_r+0x34>
 801e15e:	463c      	mov	r4, r7
 801e160:	687f      	ldr	r7, [r7, #4]
 801e162:	e7b6      	b.n	801e0d2 <_malloc_r+0x4a>
 801e164:	461a      	mov	r2, r3
 801e166:	685b      	ldr	r3, [r3, #4]
 801e168:	42a3      	cmp	r3, r4
 801e16a:	d1fb      	bne.n	801e164 <_malloc_r+0xdc>
 801e16c:	2300      	movs	r3, #0
 801e16e:	6053      	str	r3, [r2, #4]
 801e170:	e7de      	b.n	801e130 <_malloc_r+0xa8>
 801e172:	230c      	movs	r3, #12
 801e174:	6033      	str	r3, [r6, #0]
 801e176:	4630      	mov	r0, r6
 801e178:	f000 f80c 	bl	801e194 <__malloc_unlock>
 801e17c:	e794      	b.n	801e0a8 <_malloc_r+0x20>
 801e17e:	6005      	str	r5, [r0, #0]
 801e180:	e7d6      	b.n	801e130 <_malloc_r+0xa8>
 801e182:	bf00      	nop
 801e184:	20027a30 	.word	0x20027a30

0801e188 <__malloc_lock>:
 801e188:	4801      	ldr	r0, [pc, #4]	@ (801e190 <__malloc_lock+0x8>)
 801e18a:	f7ff beda 	b.w	801df42 <__retarget_lock_acquire_recursive>
 801e18e:	bf00      	nop
 801e190:	20027a28 	.word	0x20027a28

0801e194 <__malloc_unlock>:
 801e194:	4801      	ldr	r0, [pc, #4]	@ (801e19c <__malloc_unlock+0x8>)
 801e196:	f7ff bed5 	b.w	801df44 <__retarget_lock_release_recursive>
 801e19a:	bf00      	nop
 801e19c:	20027a28 	.word	0x20027a28

0801e1a0 <__sfputc_r>:
 801e1a0:	6893      	ldr	r3, [r2, #8]
 801e1a2:	3b01      	subs	r3, #1
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	b410      	push	{r4}
 801e1a8:	6093      	str	r3, [r2, #8]
 801e1aa:	da08      	bge.n	801e1be <__sfputc_r+0x1e>
 801e1ac:	6994      	ldr	r4, [r2, #24]
 801e1ae:	42a3      	cmp	r3, r4
 801e1b0:	db01      	blt.n	801e1b6 <__sfputc_r+0x16>
 801e1b2:	290a      	cmp	r1, #10
 801e1b4:	d103      	bne.n	801e1be <__sfputc_r+0x1e>
 801e1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e1ba:	f000 bb7d 	b.w	801e8b8 <__swbuf_r>
 801e1be:	6813      	ldr	r3, [r2, #0]
 801e1c0:	1c58      	adds	r0, r3, #1
 801e1c2:	6010      	str	r0, [r2, #0]
 801e1c4:	7019      	strb	r1, [r3, #0]
 801e1c6:	4608      	mov	r0, r1
 801e1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e1cc:	4770      	bx	lr

0801e1ce <__sfputs_r>:
 801e1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1d0:	4606      	mov	r6, r0
 801e1d2:	460f      	mov	r7, r1
 801e1d4:	4614      	mov	r4, r2
 801e1d6:	18d5      	adds	r5, r2, r3
 801e1d8:	42ac      	cmp	r4, r5
 801e1da:	d101      	bne.n	801e1e0 <__sfputs_r+0x12>
 801e1dc:	2000      	movs	r0, #0
 801e1de:	e007      	b.n	801e1f0 <__sfputs_r+0x22>
 801e1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1e4:	463a      	mov	r2, r7
 801e1e6:	4630      	mov	r0, r6
 801e1e8:	f7ff ffda 	bl	801e1a0 <__sfputc_r>
 801e1ec:	1c43      	adds	r3, r0, #1
 801e1ee:	d1f3      	bne.n	801e1d8 <__sfputs_r+0xa>
 801e1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e1f4 <_vfiprintf_r>:
 801e1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1f8:	460d      	mov	r5, r1
 801e1fa:	b09d      	sub	sp, #116	@ 0x74
 801e1fc:	4614      	mov	r4, r2
 801e1fe:	4698      	mov	r8, r3
 801e200:	4606      	mov	r6, r0
 801e202:	b118      	cbz	r0, 801e20c <_vfiprintf_r+0x18>
 801e204:	6a03      	ldr	r3, [r0, #32]
 801e206:	b90b      	cbnz	r3, 801e20c <_vfiprintf_r+0x18>
 801e208:	f7ff fd2e 	bl	801dc68 <__sinit>
 801e20c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e20e:	07d9      	lsls	r1, r3, #31
 801e210:	d405      	bmi.n	801e21e <_vfiprintf_r+0x2a>
 801e212:	89ab      	ldrh	r3, [r5, #12]
 801e214:	059a      	lsls	r2, r3, #22
 801e216:	d402      	bmi.n	801e21e <_vfiprintf_r+0x2a>
 801e218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e21a:	f7ff fe92 	bl	801df42 <__retarget_lock_acquire_recursive>
 801e21e:	89ab      	ldrh	r3, [r5, #12]
 801e220:	071b      	lsls	r3, r3, #28
 801e222:	d501      	bpl.n	801e228 <_vfiprintf_r+0x34>
 801e224:	692b      	ldr	r3, [r5, #16]
 801e226:	b99b      	cbnz	r3, 801e250 <_vfiprintf_r+0x5c>
 801e228:	4629      	mov	r1, r5
 801e22a:	4630      	mov	r0, r6
 801e22c:	f000 fb82 	bl	801e934 <__swsetup_r>
 801e230:	b170      	cbz	r0, 801e250 <_vfiprintf_r+0x5c>
 801e232:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e234:	07dc      	lsls	r4, r3, #31
 801e236:	d504      	bpl.n	801e242 <_vfiprintf_r+0x4e>
 801e238:	f04f 30ff 	mov.w	r0, #4294967295
 801e23c:	b01d      	add	sp, #116	@ 0x74
 801e23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e242:	89ab      	ldrh	r3, [r5, #12]
 801e244:	0598      	lsls	r0, r3, #22
 801e246:	d4f7      	bmi.n	801e238 <_vfiprintf_r+0x44>
 801e248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e24a:	f7ff fe7b 	bl	801df44 <__retarget_lock_release_recursive>
 801e24e:	e7f3      	b.n	801e238 <_vfiprintf_r+0x44>
 801e250:	2300      	movs	r3, #0
 801e252:	9309      	str	r3, [sp, #36]	@ 0x24
 801e254:	2320      	movs	r3, #32
 801e256:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e25a:	f8cd 800c 	str.w	r8, [sp, #12]
 801e25e:	2330      	movs	r3, #48	@ 0x30
 801e260:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e410 <_vfiprintf_r+0x21c>
 801e264:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e268:	f04f 0901 	mov.w	r9, #1
 801e26c:	4623      	mov	r3, r4
 801e26e:	469a      	mov	sl, r3
 801e270:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e274:	b10a      	cbz	r2, 801e27a <_vfiprintf_r+0x86>
 801e276:	2a25      	cmp	r2, #37	@ 0x25
 801e278:	d1f9      	bne.n	801e26e <_vfiprintf_r+0x7a>
 801e27a:	ebba 0b04 	subs.w	fp, sl, r4
 801e27e:	d00b      	beq.n	801e298 <_vfiprintf_r+0xa4>
 801e280:	465b      	mov	r3, fp
 801e282:	4622      	mov	r2, r4
 801e284:	4629      	mov	r1, r5
 801e286:	4630      	mov	r0, r6
 801e288:	f7ff ffa1 	bl	801e1ce <__sfputs_r>
 801e28c:	3001      	adds	r0, #1
 801e28e:	f000 80a7 	beq.w	801e3e0 <_vfiprintf_r+0x1ec>
 801e292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e294:	445a      	add	r2, fp
 801e296:	9209      	str	r2, [sp, #36]	@ 0x24
 801e298:	f89a 3000 	ldrb.w	r3, [sl]
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	f000 809f 	beq.w	801e3e0 <_vfiprintf_r+0x1ec>
 801e2a2:	2300      	movs	r3, #0
 801e2a4:	f04f 32ff 	mov.w	r2, #4294967295
 801e2a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e2ac:	f10a 0a01 	add.w	sl, sl, #1
 801e2b0:	9304      	str	r3, [sp, #16]
 801e2b2:	9307      	str	r3, [sp, #28]
 801e2b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e2b8:	931a      	str	r3, [sp, #104]	@ 0x68
 801e2ba:	4654      	mov	r4, sl
 801e2bc:	2205      	movs	r2, #5
 801e2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e2c2:	4853      	ldr	r0, [pc, #332]	@ (801e410 <_vfiprintf_r+0x21c>)
 801e2c4:	f7e1 ffa4 	bl	8000210 <memchr>
 801e2c8:	9a04      	ldr	r2, [sp, #16]
 801e2ca:	b9d8      	cbnz	r0, 801e304 <_vfiprintf_r+0x110>
 801e2cc:	06d1      	lsls	r1, r2, #27
 801e2ce:	bf44      	itt	mi
 801e2d0:	2320      	movmi	r3, #32
 801e2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e2d6:	0713      	lsls	r3, r2, #28
 801e2d8:	bf44      	itt	mi
 801e2da:	232b      	movmi	r3, #43	@ 0x2b
 801e2dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e2e0:	f89a 3000 	ldrb.w	r3, [sl]
 801e2e4:	2b2a      	cmp	r3, #42	@ 0x2a
 801e2e6:	d015      	beq.n	801e314 <_vfiprintf_r+0x120>
 801e2e8:	9a07      	ldr	r2, [sp, #28]
 801e2ea:	4654      	mov	r4, sl
 801e2ec:	2000      	movs	r0, #0
 801e2ee:	f04f 0c0a 	mov.w	ip, #10
 801e2f2:	4621      	mov	r1, r4
 801e2f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e2f8:	3b30      	subs	r3, #48	@ 0x30
 801e2fa:	2b09      	cmp	r3, #9
 801e2fc:	d94b      	bls.n	801e396 <_vfiprintf_r+0x1a2>
 801e2fe:	b1b0      	cbz	r0, 801e32e <_vfiprintf_r+0x13a>
 801e300:	9207      	str	r2, [sp, #28]
 801e302:	e014      	b.n	801e32e <_vfiprintf_r+0x13a>
 801e304:	eba0 0308 	sub.w	r3, r0, r8
 801e308:	fa09 f303 	lsl.w	r3, r9, r3
 801e30c:	4313      	orrs	r3, r2
 801e30e:	9304      	str	r3, [sp, #16]
 801e310:	46a2      	mov	sl, r4
 801e312:	e7d2      	b.n	801e2ba <_vfiprintf_r+0xc6>
 801e314:	9b03      	ldr	r3, [sp, #12]
 801e316:	1d19      	adds	r1, r3, #4
 801e318:	681b      	ldr	r3, [r3, #0]
 801e31a:	9103      	str	r1, [sp, #12]
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	bfbb      	ittet	lt
 801e320:	425b      	neglt	r3, r3
 801e322:	f042 0202 	orrlt.w	r2, r2, #2
 801e326:	9307      	strge	r3, [sp, #28]
 801e328:	9307      	strlt	r3, [sp, #28]
 801e32a:	bfb8      	it	lt
 801e32c:	9204      	strlt	r2, [sp, #16]
 801e32e:	7823      	ldrb	r3, [r4, #0]
 801e330:	2b2e      	cmp	r3, #46	@ 0x2e
 801e332:	d10a      	bne.n	801e34a <_vfiprintf_r+0x156>
 801e334:	7863      	ldrb	r3, [r4, #1]
 801e336:	2b2a      	cmp	r3, #42	@ 0x2a
 801e338:	d132      	bne.n	801e3a0 <_vfiprintf_r+0x1ac>
 801e33a:	9b03      	ldr	r3, [sp, #12]
 801e33c:	1d1a      	adds	r2, r3, #4
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	9203      	str	r2, [sp, #12]
 801e342:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e346:	3402      	adds	r4, #2
 801e348:	9305      	str	r3, [sp, #20]
 801e34a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e420 <_vfiprintf_r+0x22c>
 801e34e:	7821      	ldrb	r1, [r4, #0]
 801e350:	2203      	movs	r2, #3
 801e352:	4650      	mov	r0, sl
 801e354:	f7e1 ff5c 	bl	8000210 <memchr>
 801e358:	b138      	cbz	r0, 801e36a <_vfiprintf_r+0x176>
 801e35a:	9b04      	ldr	r3, [sp, #16]
 801e35c:	eba0 000a 	sub.w	r0, r0, sl
 801e360:	2240      	movs	r2, #64	@ 0x40
 801e362:	4082      	lsls	r2, r0
 801e364:	4313      	orrs	r3, r2
 801e366:	3401      	adds	r4, #1
 801e368:	9304      	str	r3, [sp, #16]
 801e36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e36e:	4829      	ldr	r0, [pc, #164]	@ (801e414 <_vfiprintf_r+0x220>)
 801e370:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e374:	2206      	movs	r2, #6
 801e376:	f7e1 ff4b 	bl	8000210 <memchr>
 801e37a:	2800      	cmp	r0, #0
 801e37c:	d03f      	beq.n	801e3fe <_vfiprintf_r+0x20a>
 801e37e:	4b26      	ldr	r3, [pc, #152]	@ (801e418 <_vfiprintf_r+0x224>)
 801e380:	bb1b      	cbnz	r3, 801e3ca <_vfiprintf_r+0x1d6>
 801e382:	9b03      	ldr	r3, [sp, #12]
 801e384:	3307      	adds	r3, #7
 801e386:	f023 0307 	bic.w	r3, r3, #7
 801e38a:	3308      	adds	r3, #8
 801e38c:	9303      	str	r3, [sp, #12]
 801e38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e390:	443b      	add	r3, r7
 801e392:	9309      	str	r3, [sp, #36]	@ 0x24
 801e394:	e76a      	b.n	801e26c <_vfiprintf_r+0x78>
 801e396:	fb0c 3202 	mla	r2, ip, r2, r3
 801e39a:	460c      	mov	r4, r1
 801e39c:	2001      	movs	r0, #1
 801e39e:	e7a8      	b.n	801e2f2 <_vfiprintf_r+0xfe>
 801e3a0:	2300      	movs	r3, #0
 801e3a2:	3401      	adds	r4, #1
 801e3a4:	9305      	str	r3, [sp, #20]
 801e3a6:	4619      	mov	r1, r3
 801e3a8:	f04f 0c0a 	mov.w	ip, #10
 801e3ac:	4620      	mov	r0, r4
 801e3ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e3b2:	3a30      	subs	r2, #48	@ 0x30
 801e3b4:	2a09      	cmp	r2, #9
 801e3b6:	d903      	bls.n	801e3c0 <_vfiprintf_r+0x1cc>
 801e3b8:	2b00      	cmp	r3, #0
 801e3ba:	d0c6      	beq.n	801e34a <_vfiprintf_r+0x156>
 801e3bc:	9105      	str	r1, [sp, #20]
 801e3be:	e7c4      	b.n	801e34a <_vfiprintf_r+0x156>
 801e3c0:	fb0c 2101 	mla	r1, ip, r1, r2
 801e3c4:	4604      	mov	r4, r0
 801e3c6:	2301      	movs	r3, #1
 801e3c8:	e7f0      	b.n	801e3ac <_vfiprintf_r+0x1b8>
 801e3ca:	ab03      	add	r3, sp, #12
 801e3cc:	9300      	str	r3, [sp, #0]
 801e3ce:	462a      	mov	r2, r5
 801e3d0:	4b12      	ldr	r3, [pc, #72]	@ (801e41c <_vfiprintf_r+0x228>)
 801e3d2:	a904      	add	r1, sp, #16
 801e3d4:	4630      	mov	r0, r6
 801e3d6:	f3af 8000 	nop.w
 801e3da:	4607      	mov	r7, r0
 801e3dc:	1c78      	adds	r0, r7, #1
 801e3de:	d1d6      	bne.n	801e38e <_vfiprintf_r+0x19a>
 801e3e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e3e2:	07d9      	lsls	r1, r3, #31
 801e3e4:	d405      	bmi.n	801e3f2 <_vfiprintf_r+0x1fe>
 801e3e6:	89ab      	ldrh	r3, [r5, #12]
 801e3e8:	059a      	lsls	r2, r3, #22
 801e3ea:	d402      	bmi.n	801e3f2 <_vfiprintf_r+0x1fe>
 801e3ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e3ee:	f7ff fda9 	bl	801df44 <__retarget_lock_release_recursive>
 801e3f2:	89ab      	ldrh	r3, [r5, #12]
 801e3f4:	065b      	lsls	r3, r3, #25
 801e3f6:	f53f af1f 	bmi.w	801e238 <_vfiprintf_r+0x44>
 801e3fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e3fc:	e71e      	b.n	801e23c <_vfiprintf_r+0x48>
 801e3fe:	ab03      	add	r3, sp, #12
 801e400:	9300      	str	r3, [sp, #0]
 801e402:	462a      	mov	r2, r5
 801e404:	4b05      	ldr	r3, [pc, #20]	@ (801e41c <_vfiprintf_r+0x228>)
 801e406:	a904      	add	r1, sp, #16
 801e408:	4630      	mov	r0, r6
 801e40a:	f000 f879 	bl	801e500 <_printf_i>
 801e40e:	e7e4      	b.n	801e3da <_vfiprintf_r+0x1e6>
 801e410:	08021d51 	.word	0x08021d51
 801e414:	08021d5b 	.word	0x08021d5b
 801e418:	00000000 	.word	0x00000000
 801e41c:	0801e1cf 	.word	0x0801e1cf
 801e420:	08021d57 	.word	0x08021d57

0801e424 <_printf_common>:
 801e424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e428:	4616      	mov	r6, r2
 801e42a:	4698      	mov	r8, r3
 801e42c:	688a      	ldr	r2, [r1, #8]
 801e42e:	690b      	ldr	r3, [r1, #16]
 801e430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e434:	4293      	cmp	r3, r2
 801e436:	bfb8      	it	lt
 801e438:	4613      	movlt	r3, r2
 801e43a:	6033      	str	r3, [r6, #0]
 801e43c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e440:	4607      	mov	r7, r0
 801e442:	460c      	mov	r4, r1
 801e444:	b10a      	cbz	r2, 801e44a <_printf_common+0x26>
 801e446:	3301      	adds	r3, #1
 801e448:	6033      	str	r3, [r6, #0]
 801e44a:	6823      	ldr	r3, [r4, #0]
 801e44c:	0699      	lsls	r1, r3, #26
 801e44e:	bf42      	ittt	mi
 801e450:	6833      	ldrmi	r3, [r6, #0]
 801e452:	3302      	addmi	r3, #2
 801e454:	6033      	strmi	r3, [r6, #0]
 801e456:	6825      	ldr	r5, [r4, #0]
 801e458:	f015 0506 	ands.w	r5, r5, #6
 801e45c:	d106      	bne.n	801e46c <_printf_common+0x48>
 801e45e:	f104 0a19 	add.w	sl, r4, #25
 801e462:	68e3      	ldr	r3, [r4, #12]
 801e464:	6832      	ldr	r2, [r6, #0]
 801e466:	1a9b      	subs	r3, r3, r2
 801e468:	42ab      	cmp	r3, r5
 801e46a:	dc26      	bgt.n	801e4ba <_printf_common+0x96>
 801e46c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e470:	6822      	ldr	r2, [r4, #0]
 801e472:	3b00      	subs	r3, #0
 801e474:	bf18      	it	ne
 801e476:	2301      	movne	r3, #1
 801e478:	0692      	lsls	r2, r2, #26
 801e47a:	d42b      	bmi.n	801e4d4 <_printf_common+0xb0>
 801e47c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e480:	4641      	mov	r1, r8
 801e482:	4638      	mov	r0, r7
 801e484:	47c8      	blx	r9
 801e486:	3001      	adds	r0, #1
 801e488:	d01e      	beq.n	801e4c8 <_printf_common+0xa4>
 801e48a:	6823      	ldr	r3, [r4, #0]
 801e48c:	6922      	ldr	r2, [r4, #16]
 801e48e:	f003 0306 	and.w	r3, r3, #6
 801e492:	2b04      	cmp	r3, #4
 801e494:	bf02      	ittt	eq
 801e496:	68e5      	ldreq	r5, [r4, #12]
 801e498:	6833      	ldreq	r3, [r6, #0]
 801e49a:	1aed      	subeq	r5, r5, r3
 801e49c:	68a3      	ldr	r3, [r4, #8]
 801e49e:	bf0c      	ite	eq
 801e4a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e4a4:	2500      	movne	r5, #0
 801e4a6:	4293      	cmp	r3, r2
 801e4a8:	bfc4      	itt	gt
 801e4aa:	1a9b      	subgt	r3, r3, r2
 801e4ac:	18ed      	addgt	r5, r5, r3
 801e4ae:	2600      	movs	r6, #0
 801e4b0:	341a      	adds	r4, #26
 801e4b2:	42b5      	cmp	r5, r6
 801e4b4:	d11a      	bne.n	801e4ec <_printf_common+0xc8>
 801e4b6:	2000      	movs	r0, #0
 801e4b8:	e008      	b.n	801e4cc <_printf_common+0xa8>
 801e4ba:	2301      	movs	r3, #1
 801e4bc:	4652      	mov	r2, sl
 801e4be:	4641      	mov	r1, r8
 801e4c0:	4638      	mov	r0, r7
 801e4c2:	47c8      	blx	r9
 801e4c4:	3001      	adds	r0, #1
 801e4c6:	d103      	bne.n	801e4d0 <_printf_common+0xac>
 801e4c8:	f04f 30ff 	mov.w	r0, #4294967295
 801e4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e4d0:	3501      	adds	r5, #1
 801e4d2:	e7c6      	b.n	801e462 <_printf_common+0x3e>
 801e4d4:	18e1      	adds	r1, r4, r3
 801e4d6:	1c5a      	adds	r2, r3, #1
 801e4d8:	2030      	movs	r0, #48	@ 0x30
 801e4da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e4de:	4422      	add	r2, r4
 801e4e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e4e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e4e8:	3302      	adds	r3, #2
 801e4ea:	e7c7      	b.n	801e47c <_printf_common+0x58>
 801e4ec:	2301      	movs	r3, #1
 801e4ee:	4622      	mov	r2, r4
 801e4f0:	4641      	mov	r1, r8
 801e4f2:	4638      	mov	r0, r7
 801e4f4:	47c8      	blx	r9
 801e4f6:	3001      	adds	r0, #1
 801e4f8:	d0e6      	beq.n	801e4c8 <_printf_common+0xa4>
 801e4fa:	3601      	adds	r6, #1
 801e4fc:	e7d9      	b.n	801e4b2 <_printf_common+0x8e>
	...

0801e500 <_printf_i>:
 801e500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e504:	7e0f      	ldrb	r7, [r1, #24]
 801e506:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e508:	2f78      	cmp	r7, #120	@ 0x78
 801e50a:	4691      	mov	r9, r2
 801e50c:	4680      	mov	r8, r0
 801e50e:	460c      	mov	r4, r1
 801e510:	469a      	mov	sl, r3
 801e512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e516:	d807      	bhi.n	801e528 <_printf_i+0x28>
 801e518:	2f62      	cmp	r7, #98	@ 0x62
 801e51a:	d80a      	bhi.n	801e532 <_printf_i+0x32>
 801e51c:	2f00      	cmp	r7, #0
 801e51e:	f000 80d1 	beq.w	801e6c4 <_printf_i+0x1c4>
 801e522:	2f58      	cmp	r7, #88	@ 0x58
 801e524:	f000 80b8 	beq.w	801e698 <_printf_i+0x198>
 801e528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e52c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e530:	e03a      	b.n	801e5a8 <_printf_i+0xa8>
 801e532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e536:	2b15      	cmp	r3, #21
 801e538:	d8f6      	bhi.n	801e528 <_printf_i+0x28>
 801e53a:	a101      	add	r1, pc, #4	@ (adr r1, 801e540 <_printf_i+0x40>)
 801e53c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e540:	0801e599 	.word	0x0801e599
 801e544:	0801e5ad 	.word	0x0801e5ad
 801e548:	0801e529 	.word	0x0801e529
 801e54c:	0801e529 	.word	0x0801e529
 801e550:	0801e529 	.word	0x0801e529
 801e554:	0801e529 	.word	0x0801e529
 801e558:	0801e5ad 	.word	0x0801e5ad
 801e55c:	0801e529 	.word	0x0801e529
 801e560:	0801e529 	.word	0x0801e529
 801e564:	0801e529 	.word	0x0801e529
 801e568:	0801e529 	.word	0x0801e529
 801e56c:	0801e6ab 	.word	0x0801e6ab
 801e570:	0801e5d7 	.word	0x0801e5d7
 801e574:	0801e665 	.word	0x0801e665
 801e578:	0801e529 	.word	0x0801e529
 801e57c:	0801e529 	.word	0x0801e529
 801e580:	0801e6cd 	.word	0x0801e6cd
 801e584:	0801e529 	.word	0x0801e529
 801e588:	0801e5d7 	.word	0x0801e5d7
 801e58c:	0801e529 	.word	0x0801e529
 801e590:	0801e529 	.word	0x0801e529
 801e594:	0801e66d 	.word	0x0801e66d
 801e598:	6833      	ldr	r3, [r6, #0]
 801e59a:	1d1a      	adds	r2, r3, #4
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	6032      	str	r2, [r6, #0]
 801e5a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e5a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e5a8:	2301      	movs	r3, #1
 801e5aa:	e09c      	b.n	801e6e6 <_printf_i+0x1e6>
 801e5ac:	6833      	ldr	r3, [r6, #0]
 801e5ae:	6820      	ldr	r0, [r4, #0]
 801e5b0:	1d19      	adds	r1, r3, #4
 801e5b2:	6031      	str	r1, [r6, #0]
 801e5b4:	0606      	lsls	r6, r0, #24
 801e5b6:	d501      	bpl.n	801e5bc <_printf_i+0xbc>
 801e5b8:	681d      	ldr	r5, [r3, #0]
 801e5ba:	e003      	b.n	801e5c4 <_printf_i+0xc4>
 801e5bc:	0645      	lsls	r5, r0, #25
 801e5be:	d5fb      	bpl.n	801e5b8 <_printf_i+0xb8>
 801e5c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e5c4:	2d00      	cmp	r5, #0
 801e5c6:	da03      	bge.n	801e5d0 <_printf_i+0xd0>
 801e5c8:	232d      	movs	r3, #45	@ 0x2d
 801e5ca:	426d      	negs	r5, r5
 801e5cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e5d0:	4858      	ldr	r0, [pc, #352]	@ (801e734 <_printf_i+0x234>)
 801e5d2:	230a      	movs	r3, #10
 801e5d4:	e011      	b.n	801e5fa <_printf_i+0xfa>
 801e5d6:	6821      	ldr	r1, [r4, #0]
 801e5d8:	6833      	ldr	r3, [r6, #0]
 801e5da:	0608      	lsls	r0, r1, #24
 801e5dc:	f853 5b04 	ldr.w	r5, [r3], #4
 801e5e0:	d402      	bmi.n	801e5e8 <_printf_i+0xe8>
 801e5e2:	0649      	lsls	r1, r1, #25
 801e5e4:	bf48      	it	mi
 801e5e6:	b2ad      	uxthmi	r5, r5
 801e5e8:	2f6f      	cmp	r7, #111	@ 0x6f
 801e5ea:	4852      	ldr	r0, [pc, #328]	@ (801e734 <_printf_i+0x234>)
 801e5ec:	6033      	str	r3, [r6, #0]
 801e5ee:	bf14      	ite	ne
 801e5f0:	230a      	movne	r3, #10
 801e5f2:	2308      	moveq	r3, #8
 801e5f4:	2100      	movs	r1, #0
 801e5f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e5fa:	6866      	ldr	r6, [r4, #4]
 801e5fc:	60a6      	str	r6, [r4, #8]
 801e5fe:	2e00      	cmp	r6, #0
 801e600:	db05      	blt.n	801e60e <_printf_i+0x10e>
 801e602:	6821      	ldr	r1, [r4, #0]
 801e604:	432e      	orrs	r6, r5
 801e606:	f021 0104 	bic.w	r1, r1, #4
 801e60a:	6021      	str	r1, [r4, #0]
 801e60c:	d04b      	beq.n	801e6a6 <_printf_i+0x1a6>
 801e60e:	4616      	mov	r6, r2
 801e610:	fbb5 f1f3 	udiv	r1, r5, r3
 801e614:	fb03 5711 	mls	r7, r3, r1, r5
 801e618:	5dc7      	ldrb	r7, [r0, r7]
 801e61a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e61e:	462f      	mov	r7, r5
 801e620:	42bb      	cmp	r3, r7
 801e622:	460d      	mov	r5, r1
 801e624:	d9f4      	bls.n	801e610 <_printf_i+0x110>
 801e626:	2b08      	cmp	r3, #8
 801e628:	d10b      	bne.n	801e642 <_printf_i+0x142>
 801e62a:	6823      	ldr	r3, [r4, #0]
 801e62c:	07df      	lsls	r7, r3, #31
 801e62e:	d508      	bpl.n	801e642 <_printf_i+0x142>
 801e630:	6923      	ldr	r3, [r4, #16]
 801e632:	6861      	ldr	r1, [r4, #4]
 801e634:	4299      	cmp	r1, r3
 801e636:	bfde      	ittt	le
 801e638:	2330      	movle	r3, #48	@ 0x30
 801e63a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e63e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e642:	1b92      	subs	r2, r2, r6
 801e644:	6122      	str	r2, [r4, #16]
 801e646:	f8cd a000 	str.w	sl, [sp]
 801e64a:	464b      	mov	r3, r9
 801e64c:	aa03      	add	r2, sp, #12
 801e64e:	4621      	mov	r1, r4
 801e650:	4640      	mov	r0, r8
 801e652:	f7ff fee7 	bl	801e424 <_printf_common>
 801e656:	3001      	adds	r0, #1
 801e658:	d14a      	bne.n	801e6f0 <_printf_i+0x1f0>
 801e65a:	f04f 30ff 	mov.w	r0, #4294967295
 801e65e:	b004      	add	sp, #16
 801e660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e664:	6823      	ldr	r3, [r4, #0]
 801e666:	f043 0320 	orr.w	r3, r3, #32
 801e66a:	6023      	str	r3, [r4, #0]
 801e66c:	4832      	ldr	r0, [pc, #200]	@ (801e738 <_printf_i+0x238>)
 801e66e:	2778      	movs	r7, #120	@ 0x78
 801e670:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e674:	6823      	ldr	r3, [r4, #0]
 801e676:	6831      	ldr	r1, [r6, #0]
 801e678:	061f      	lsls	r7, r3, #24
 801e67a:	f851 5b04 	ldr.w	r5, [r1], #4
 801e67e:	d402      	bmi.n	801e686 <_printf_i+0x186>
 801e680:	065f      	lsls	r7, r3, #25
 801e682:	bf48      	it	mi
 801e684:	b2ad      	uxthmi	r5, r5
 801e686:	6031      	str	r1, [r6, #0]
 801e688:	07d9      	lsls	r1, r3, #31
 801e68a:	bf44      	itt	mi
 801e68c:	f043 0320 	orrmi.w	r3, r3, #32
 801e690:	6023      	strmi	r3, [r4, #0]
 801e692:	b11d      	cbz	r5, 801e69c <_printf_i+0x19c>
 801e694:	2310      	movs	r3, #16
 801e696:	e7ad      	b.n	801e5f4 <_printf_i+0xf4>
 801e698:	4826      	ldr	r0, [pc, #152]	@ (801e734 <_printf_i+0x234>)
 801e69a:	e7e9      	b.n	801e670 <_printf_i+0x170>
 801e69c:	6823      	ldr	r3, [r4, #0]
 801e69e:	f023 0320 	bic.w	r3, r3, #32
 801e6a2:	6023      	str	r3, [r4, #0]
 801e6a4:	e7f6      	b.n	801e694 <_printf_i+0x194>
 801e6a6:	4616      	mov	r6, r2
 801e6a8:	e7bd      	b.n	801e626 <_printf_i+0x126>
 801e6aa:	6833      	ldr	r3, [r6, #0]
 801e6ac:	6825      	ldr	r5, [r4, #0]
 801e6ae:	6961      	ldr	r1, [r4, #20]
 801e6b0:	1d18      	adds	r0, r3, #4
 801e6b2:	6030      	str	r0, [r6, #0]
 801e6b4:	062e      	lsls	r6, r5, #24
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	d501      	bpl.n	801e6be <_printf_i+0x1be>
 801e6ba:	6019      	str	r1, [r3, #0]
 801e6bc:	e002      	b.n	801e6c4 <_printf_i+0x1c4>
 801e6be:	0668      	lsls	r0, r5, #25
 801e6c0:	d5fb      	bpl.n	801e6ba <_printf_i+0x1ba>
 801e6c2:	8019      	strh	r1, [r3, #0]
 801e6c4:	2300      	movs	r3, #0
 801e6c6:	6123      	str	r3, [r4, #16]
 801e6c8:	4616      	mov	r6, r2
 801e6ca:	e7bc      	b.n	801e646 <_printf_i+0x146>
 801e6cc:	6833      	ldr	r3, [r6, #0]
 801e6ce:	1d1a      	adds	r2, r3, #4
 801e6d0:	6032      	str	r2, [r6, #0]
 801e6d2:	681e      	ldr	r6, [r3, #0]
 801e6d4:	6862      	ldr	r2, [r4, #4]
 801e6d6:	2100      	movs	r1, #0
 801e6d8:	4630      	mov	r0, r6
 801e6da:	f7e1 fd99 	bl	8000210 <memchr>
 801e6de:	b108      	cbz	r0, 801e6e4 <_printf_i+0x1e4>
 801e6e0:	1b80      	subs	r0, r0, r6
 801e6e2:	6060      	str	r0, [r4, #4]
 801e6e4:	6863      	ldr	r3, [r4, #4]
 801e6e6:	6123      	str	r3, [r4, #16]
 801e6e8:	2300      	movs	r3, #0
 801e6ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e6ee:	e7aa      	b.n	801e646 <_printf_i+0x146>
 801e6f0:	6923      	ldr	r3, [r4, #16]
 801e6f2:	4632      	mov	r2, r6
 801e6f4:	4649      	mov	r1, r9
 801e6f6:	4640      	mov	r0, r8
 801e6f8:	47d0      	blx	sl
 801e6fa:	3001      	adds	r0, #1
 801e6fc:	d0ad      	beq.n	801e65a <_printf_i+0x15a>
 801e6fe:	6823      	ldr	r3, [r4, #0]
 801e700:	079b      	lsls	r3, r3, #30
 801e702:	d413      	bmi.n	801e72c <_printf_i+0x22c>
 801e704:	68e0      	ldr	r0, [r4, #12]
 801e706:	9b03      	ldr	r3, [sp, #12]
 801e708:	4298      	cmp	r0, r3
 801e70a:	bfb8      	it	lt
 801e70c:	4618      	movlt	r0, r3
 801e70e:	e7a6      	b.n	801e65e <_printf_i+0x15e>
 801e710:	2301      	movs	r3, #1
 801e712:	4632      	mov	r2, r6
 801e714:	4649      	mov	r1, r9
 801e716:	4640      	mov	r0, r8
 801e718:	47d0      	blx	sl
 801e71a:	3001      	adds	r0, #1
 801e71c:	d09d      	beq.n	801e65a <_printf_i+0x15a>
 801e71e:	3501      	adds	r5, #1
 801e720:	68e3      	ldr	r3, [r4, #12]
 801e722:	9903      	ldr	r1, [sp, #12]
 801e724:	1a5b      	subs	r3, r3, r1
 801e726:	42ab      	cmp	r3, r5
 801e728:	dcf2      	bgt.n	801e710 <_printf_i+0x210>
 801e72a:	e7eb      	b.n	801e704 <_printf_i+0x204>
 801e72c:	2500      	movs	r5, #0
 801e72e:	f104 0619 	add.w	r6, r4, #25
 801e732:	e7f5      	b.n	801e720 <_printf_i+0x220>
 801e734:	08021d62 	.word	0x08021d62
 801e738:	08021d73 	.word	0x08021d73

0801e73c <__sflush_r>:
 801e73c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e744:	0716      	lsls	r6, r2, #28
 801e746:	4605      	mov	r5, r0
 801e748:	460c      	mov	r4, r1
 801e74a:	d454      	bmi.n	801e7f6 <__sflush_r+0xba>
 801e74c:	684b      	ldr	r3, [r1, #4]
 801e74e:	2b00      	cmp	r3, #0
 801e750:	dc02      	bgt.n	801e758 <__sflush_r+0x1c>
 801e752:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e754:	2b00      	cmp	r3, #0
 801e756:	dd48      	ble.n	801e7ea <__sflush_r+0xae>
 801e758:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e75a:	2e00      	cmp	r6, #0
 801e75c:	d045      	beq.n	801e7ea <__sflush_r+0xae>
 801e75e:	2300      	movs	r3, #0
 801e760:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e764:	682f      	ldr	r7, [r5, #0]
 801e766:	6a21      	ldr	r1, [r4, #32]
 801e768:	602b      	str	r3, [r5, #0]
 801e76a:	d030      	beq.n	801e7ce <__sflush_r+0x92>
 801e76c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e76e:	89a3      	ldrh	r3, [r4, #12]
 801e770:	0759      	lsls	r1, r3, #29
 801e772:	d505      	bpl.n	801e780 <__sflush_r+0x44>
 801e774:	6863      	ldr	r3, [r4, #4]
 801e776:	1ad2      	subs	r2, r2, r3
 801e778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e77a:	b10b      	cbz	r3, 801e780 <__sflush_r+0x44>
 801e77c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e77e:	1ad2      	subs	r2, r2, r3
 801e780:	2300      	movs	r3, #0
 801e782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e784:	6a21      	ldr	r1, [r4, #32]
 801e786:	4628      	mov	r0, r5
 801e788:	47b0      	blx	r6
 801e78a:	1c43      	adds	r3, r0, #1
 801e78c:	89a3      	ldrh	r3, [r4, #12]
 801e78e:	d106      	bne.n	801e79e <__sflush_r+0x62>
 801e790:	6829      	ldr	r1, [r5, #0]
 801e792:	291d      	cmp	r1, #29
 801e794:	d82b      	bhi.n	801e7ee <__sflush_r+0xb2>
 801e796:	4a2a      	ldr	r2, [pc, #168]	@ (801e840 <__sflush_r+0x104>)
 801e798:	40ca      	lsrs	r2, r1
 801e79a:	07d6      	lsls	r6, r2, #31
 801e79c:	d527      	bpl.n	801e7ee <__sflush_r+0xb2>
 801e79e:	2200      	movs	r2, #0
 801e7a0:	6062      	str	r2, [r4, #4]
 801e7a2:	04d9      	lsls	r1, r3, #19
 801e7a4:	6922      	ldr	r2, [r4, #16]
 801e7a6:	6022      	str	r2, [r4, #0]
 801e7a8:	d504      	bpl.n	801e7b4 <__sflush_r+0x78>
 801e7aa:	1c42      	adds	r2, r0, #1
 801e7ac:	d101      	bne.n	801e7b2 <__sflush_r+0x76>
 801e7ae:	682b      	ldr	r3, [r5, #0]
 801e7b0:	b903      	cbnz	r3, 801e7b4 <__sflush_r+0x78>
 801e7b2:	6560      	str	r0, [r4, #84]	@ 0x54
 801e7b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e7b6:	602f      	str	r7, [r5, #0]
 801e7b8:	b1b9      	cbz	r1, 801e7ea <__sflush_r+0xae>
 801e7ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e7be:	4299      	cmp	r1, r3
 801e7c0:	d002      	beq.n	801e7c8 <__sflush_r+0x8c>
 801e7c2:	4628      	mov	r0, r5
 801e7c4:	f7ff fbec 	bl	801dfa0 <_free_r>
 801e7c8:	2300      	movs	r3, #0
 801e7ca:	6363      	str	r3, [r4, #52]	@ 0x34
 801e7cc:	e00d      	b.n	801e7ea <__sflush_r+0xae>
 801e7ce:	2301      	movs	r3, #1
 801e7d0:	4628      	mov	r0, r5
 801e7d2:	47b0      	blx	r6
 801e7d4:	4602      	mov	r2, r0
 801e7d6:	1c50      	adds	r0, r2, #1
 801e7d8:	d1c9      	bne.n	801e76e <__sflush_r+0x32>
 801e7da:	682b      	ldr	r3, [r5, #0]
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d0c6      	beq.n	801e76e <__sflush_r+0x32>
 801e7e0:	2b1d      	cmp	r3, #29
 801e7e2:	d001      	beq.n	801e7e8 <__sflush_r+0xac>
 801e7e4:	2b16      	cmp	r3, #22
 801e7e6:	d11e      	bne.n	801e826 <__sflush_r+0xea>
 801e7e8:	602f      	str	r7, [r5, #0]
 801e7ea:	2000      	movs	r0, #0
 801e7ec:	e022      	b.n	801e834 <__sflush_r+0xf8>
 801e7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e7f2:	b21b      	sxth	r3, r3
 801e7f4:	e01b      	b.n	801e82e <__sflush_r+0xf2>
 801e7f6:	690f      	ldr	r7, [r1, #16]
 801e7f8:	2f00      	cmp	r7, #0
 801e7fa:	d0f6      	beq.n	801e7ea <__sflush_r+0xae>
 801e7fc:	0793      	lsls	r3, r2, #30
 801e7fe:	680e      	ldr	r6, [r1, #0]
 801e800:	bf08      	it	eq
 801e802:	694b      	ldreq	r3, [r1, #20]
 801e804:	600f      	str	r7, [r1, #0]
 801e806:	bf18      	it	ne
 801e808:	2300      	movne	r3, #0
 801e80a:	eba6 0807 	sub.w	r8, r6, r7
 801e80e:	608b      	str	r3, [r1, #8]
 801e810:	f1b8 0f00 	cmp.w	r8, #0
 801e814:	dde9      	ble.n	801e7ea <__sflush_r+0xae>
 801e816:	6a21      	ldr	r1, [r4, #32]
 801e818:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e81a:	4643      	mov	r3, r8
 801e81c:	463a      	mov	r2, r7
 801e81e:	4628      	mov	r0, r5
 801e820:	47b0      	blx	r6
 801e822:	2800      	cmp	r0, #0
 801e824:	dc08      	bgt.n	801e838 <__sflush_r+0xfc>
 801e826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e82a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e82e:	81a3      	strh	r3, [r4, #12]
 801e830:	f04f 30ff 	mov.w	r0, #4294967295
 801e834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e838:	4407      	add	r7, r0
 801e83a:	eba8 0800 	sub.w	r8, r8, r0
 801e83e:	e7e7      	b.n	801e810 <__sflush_r+0xd4>
 801e840:	20400001 	.word	0x20400001

0801e844 <_fflush_r>:
 801e844:	b538      	push	{r3, r4, r5, lr}
 801e846:	690b      	ldr	r3, [r1, #16]
 801e848:	4605      	mov	r5, r0
 801e84a:	460c      	mov	r4, r1
 801e84c:	b913      	cbnz	r3, 801e854 <_fflush_r+0x10>
 801e84e:	2500      	movs	r5, #0
 801e850:	4628      	mov	r0, r5
 801e852:	bd38      	pop	{r3, r4, r5, pc}
 801e854:	b118      	cbz	r0, 801e85e <_fflush_r+0x1a>
 801e856:	6a03      	ldr	r3, [r0, #32]
 801e858:	b90b      	cbnz	r3, 801e85e <_fflush_r+0x1a>
 801e85a:	f7ff fa05 	bl	801dc68 <__sinit>
 801e85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e862:	2b00      	cmp	r3, #0
 801e864:	d0f3      	beq.n	801e84e <_fflush_r+0xa>
 801e866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e868:	07d0      	lsls	r0, r2, #31
 801e86a:	d404      	bmi.n	801e876 <_fflush_r+0x32>
 801e86c:	0599      	lsls	r1, r3, #22
 801e86e:	d402      	bmi.n	801e876 <_fflush_r+0x32>
 801e870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e872:	f7ff fb66 	bl	801df42 <__retarget_lock_acquire_recursive>
 801e876:	4628      	mov	r0, r5
 801e878:	4621      	mov	r1, r4
 801e87a:	f7ff ff5f 	bl	801e73c <__sflush_r>
 801e87e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e880:	07da      	lsls	r2, r3, #31
 801e882:	4605      	mov	r5, r0
 801e884:	d4e4      	bmi.n	801e850 <_fflush_r+0xc>
 801e886:	89a3      	ldrh	r3, [r4, #12]
 801e888:	059b      	lsls	r3, r3, #22
 801e88a:	d4e1      	bmi.n	801e850 <_fflush_r+0xc>
 801e88c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e88e:	f7ff fb59 	bl	801df44 <__retarget_lock_release_recursive>
 801e892:	e7dd      	b.n	801e850 <_fflush_r+0xc>

0801e894 <fiprintf>:
 801e894:	b40e      	push	{r1, r2, r3}
 801e896:	b503      	push	{r0, r1, lr}
 801e898:	4601      	mov	r1, r0
 801e89a:	ab03      	add	r3, sp, #12
 801e89c:	4805      	ldr	r0, [pc, #20]	@ (801e8b4 <fiprintf+0x20>)
 801e89e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e8a2:	6800      	ldr	r0, [r0, #0]
 801e8a4:	9301      	str	r3, [sp, #4]
 801e8a6:	f7ff fca5 	bl	801e1f4 <_vfiprintf_r>
 801e8aa:	b002      	add	sp, #8
 801e8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801e8b0:	b003      	add	sp, #12
 801e8b2:	4770      	bx	lr
 801e8b4:	2000003c 	.word	0x2000003c

0801e8b8 <__swbuf_r>:
 801e8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8ba:	460e      	mov	r6, r1
 801e8bc:	4614      	mov	r4, r2
 801e8be:	4605      	mov	r5, r0
 801e8c0:	b118      	cbz	r0, 801e8ca <__swbuf_r+0x12>
 801e8c2:	6a03      	ldr	r3, [r0, #32]
 801e8c4:	b90b      	cbnz	r3, 801e8ca <__swbuf_r+0x12>
 801e8c6:	f7ff f9cf 	bl	801dc68 <__sinit>
 801e8ca:	69a3      	ldr	r3, [r4, #24]
 801e8cc:	60a3      	str	r3, [r4, #8]
 801e8ce:	89a3      	ldrh	r3, [r4, #12]
 801e8d0:	071a      	lsls	r2, r3, #28
 801e8d2:	d501      	bpl.n	801e8d8 <__swbuf_r+0x20>
 801e8d4:	6923      	ldr	r3, [r4, #16]
 801e8d6:	b943      	cbnz	r3, 801e8ea <__swbuf_r+0x32>
 801e8d8:	4621      	mov	r1, r4
 801e8da:	4628      	mov	r0, r5
 801e8dc:	f000 f82a 	bl	801e934 <__swsetup_r>
 801e8e0:	b118      	cbz	r0, 801e8ea <__swbuf_r+0x32>
 801e8e2:	f04f 37ff 	mov.w	r7, #4294967295
 801e8e6:	4638      	mov	r0, r7
 801e8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8ea:	6823      	ldr	r3, [r4, #0]
 801e8ec:	6922      	ldr	r2, [r4, #16]
 801e8ee:	1a98      	subs	r0, r3, r2
 801e8f0:	6963      	ldr	r3, [r4, #20]
 801e8f2:	b2f6      	uxtb	r6, r6
 801e8f4:	4283      	cmp	r3, r0
 801e8f6:	4637      	mov	r7, r6
 801e8f8:	dc05      	bgt.n	801e906 <__swbuf_r+0x4e>
 801e8fa:	4621      	mov	r1, r4
 801e8fc:	4628      	mov	r0, r5
 801e8fe:	f7ff ffa1 	bl	801e844 <_fflush_r>
 801e902:	2800      	cmp	r0, #0
 801e904:	d1ed      	bne.n	801e8e2 <__swbuf_r+0x2a>
 801e906:	68a3      	ldr	r3, [r4, #8]
 801e908:	3b01      	subs	r3, #1
 801e90a:	60a3      	str	r3, [r4, #8]
 801e90c:	6823      	ldr	r3, [r4, #0]
 801e90e:	1c5a      	adds	r2, r3, #1
 801e910:	6022      	str	r2, [r4, #0]
 801e912:	701e      	strb	r6, [r3, #0]
 801e914:	6962      	ldr	r2, [r4, #20]
 801e916:	1c43      	adds	r3, r0, #1
 801e918:	429a      	cmp	r2, r3
 801e91a:	d004      	beq.n	801e926 <__swbuf_r+0x6e>
 801e91c:	89a3      	ldrh	r3, [r4, #12]
 801e91e:	07db      	lsls	r3, r3, #31
 801e920:	d5e1      	bpl.n	801e8e6 <__swbuf_r+0x2e>
 801e922:	2e0a      	cmp	r6, #10
 801e924:	d1df      	bne.n	801e8e6 <__swbuf_r+0x2e>
 801e926:	4621      	mov	r1, r4
 801e928:	4628      	mov	r0, r5
 801e92a:	f7ff ff8b 	bl	801e844 <_fflush_r>
 801e92e:	2800      	cmp	r0, #0
 801e930:	d0d9      	beq.n	801e8e6 <__swbuf_r+0x2e>
 801e932:	e7d6      	b.n	801e8e2 <__swbuf_r+0x2a>

0801e934 <__swsetup_r>:
 801e934:	b538      	push	{r3, r4, r5, lr}
 801e936:	4b29      	ldr	r3, [pc, #164]	@ (801e9dc <__swsetup_r+0xa8>)
 801e938:	4605      	mov	r5, r0
 801e93a:	6818      	ldr	r0, [r3, #0]
 801e93c:	460c      	mov	r4, r1
 801e93e:	b118      	cbz	r0, 801e948 <__swsetup_r+0x14>
 801e940:	6a03      	ldr	r3, [r0, #32]
 801e942:	b90b      	cbnz	r3, 801e948 <__swsetup_r+0x14>
 801e944:	f7ff f990 	bl	801dc68 <__sinit>
 801e948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e94c:	0719      	lsls	r1, r3, #28
 801e94e:	d422      	bmi.n	801e996 <__swsetup_r+0x62>
 801e950:	06da      	lsls	r2, r3, #27
 801e952:	d407      	bmi.n	801e964 <__swsetup_r+0x30>
 801e954:	2209      	movs	r2, #9
 801e956:	602a      	str	r2, [r5, #0]
 801e958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e95c:	81a3      	strh	r3, [r4, #12]
 801e95e:	f04f 30ff 	mov.w	r0, #4294967295
 801e962:	e033      	b.n	801e9cc <__swsetup_r+0x98>
 801e964:	0758      	lsls	r0, r3, #29
 801e966:	d512      	bpl.n	801e98e <__swsetup_r+0x5a>
 801e968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e96a:	b141      	cbz	r1, 801e97e <__swsetup_r+0x4a>
 801e96c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e970:	4299      	cmp	r1, r3
 801e972:	d002      	beq.n	801e97a <__swsetup_r+0x46>
 801e974:	4628      	mov	r0, r5
 801e976:	f7ff fb13 	bl	801dfa0 <_free_r>
 801e97a:	2300      	movs	r3, #0
 801e97c:	6363      	str	r3, [r4, #52]	@ 0x34
 801e97e:	89a3      	ldrh	r3, [r4, #12]
 801e980:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e984:	81a3      	strh	r3, [r4, #12]
 801e986:	2300      	movs	r3, #0
 801e988:	6063      	str	r3, [r4, #4]
 801e98a:	6923      	ldr	r3, [r4, #16]
 801e98c:	6023      	str	r3, [r4, #0]
 801e98e:	89a3      	ldrh	r3, [r4, #12]
 801e990:	f043 0308 	orr.w	r3, r3, #8
 801e994:	81a3      	strh	r3, [r4, #12]
 801e996:	6923      	ldr	r3, [r4, #16]
 801e998:	b94b      	cbnz	r3, 801e9ae <__swsetup_r+0x7a>
 801e99a:	89a3      	ldrh	r3, [r4, #12]
 801e99c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e9a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e9a4:	d003      	beq.n	801e9ae <__swsetup_r+0x7a>
 801e9a6:	4621      	mov	r1, r4
 801e9a8:	4628      	mov	r0, r5
 801e9aa:	f000 f856 	bl	801ea5a <__smakebuf_r>
 801e9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e9b2:	f013 0201 	ands.w	r2, r3, #1
 801e9b6:	d00a      	beq.n	801e9ce <__swsetup_r+0x9a>
 801e9b8:	2200      	movs	r2, #0
 801e9ba:	60a2      	str	r2, [r4, #8]
 801e9bc:	6962      	ldr	r2, [r4, #20]
 801e9be:	4252      	negs	r2, r2
 801e9c0:	61a2      	str	r2, [r4, #24]
 801e9c2:	6922      	ldr	r2, [r4, #16]
 801e9c4:	b942      	cbnz	r2, 801e9d8 <__swsetup_r+0xa4>
 801e9c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e9ca:	d1c5      	bne.n	801e958 <__swsetup_r+0x24>
 801e9cc:	bd38      	pop	{r3, r4, r5, pc}
 801e9ce:	0799      	lsls	r1, r3, #30
 801e9d0:	bf58      	it	pl
 801e9d2:	6962      	ldrpl	r2, [r4, #20]
 801e9d4:	60a2      	str	r2, [r4, #8]
 801e9d6:	e7f4      	b.n	801e9c2 <__swsetup_r+0x8e>
 801e9d8:	2000      	movs	r0, #0
 801e9da:	e7f7      	b.n	801e9cc <__swsetup_r+0x98>
 801e9dc:	2000003c 	.word	0x2000003c

0801e9e0 <_sbrk_r>:
 801e9e0:	b538      	push	{r3, r4, r5, lr}
 801e9e2:	4d06      	ldr	r5, [pc, #24]	@ (801e9fc <_sbrk_r+0x1c>)
 801e9e4:	2300      	movs	r3, #0
 801e9e6:	4604      	mov	r4, r0
 801e9e8:	4608      	mov	r0, r1
 801e9ea:	602b      	str	r3, [r5, #0]
 801e9ec:	f7e3 fc78 	bl	80022e0 <_sbrk>
 801e9f0:	1c43      	adds	r3, r0, #1
 801e9f2:	d102      	bne.n	801e9fa <_sbrk_r+0x1a>
 801e9f4:	682b      	ldr	r3, [r5, #0]
 801e9f6:	b103      	cbz	r3, 801e9fa <_sbrk_r+0x1a>
 801e9f8:	6023      	str	r3, [r4, #0]
 801e9fa:	bd38      	pop	{r3, r4, r5, pc}
 801e9fc:	20027a24 	.word	0x20027a24

0801ea00 <abort>:
 801ea00:	b508      	push	{r3, lr}
 801ea02:	2006      	movs	r0, #6
 801ea04:	f000 f88e 	bl	801eb24 <raise>
 801ea08:	2001      	movs	r0, #1
 801ea0a:	f7e3 fbf1 	bl	80021f0 <_exit>

0801ea0e <__swhatbuf_r>:
 801ea0e:	b570      	push	{r4, r5, r6, lr}
 801ea10:	460c      	mov	r4, r1
 801ea12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea16:	2900      	cmp	r1, #0
 801ea18:	b096      	sub	sp, #88	@ 0x58
 801ea1a:	4615      	mov	r5, r2
 801ea1c:	461e      	mov	r6, r3
 801ea1e:	da0d      	bge.n	801ea3c <__swhatbuf_r+0x2e>
 801ea20:	89a3      	ldrh	r3, [r4, #12]
 801ea22:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ea26:	f04f 0100 	mov.w	r1, #0
 801ea2a:	bf14      	ite	ne
 801ea2c:	2340      	movne	r3, #64	@ 0x40
 801ea2e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ea32:	2000      	movs	r0, #0
 801ea34:	6031      	str	r1, [r6, #0]
 801ea36:	602b      	str	r3, [r5, #0]
 801ea38:	b016      	add	sp, #88	@ 0x58
 801ea3a:	bd70      	pop	{r4, r5, r6, pc}
 801ea3c:	466a      	mov	r2, sp
 801ea3e:	f000 f879 	bl	801eb34 <_fstat_r>
 801ea42:	2800      	cmp	r0, #0
 801ea44:	dbec      	blt.n	801ea20 <__swhatbuf_r+0x12>
 801ea46:	9901      	ldr	r1, [sp, #4]
 801ea48:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ea4c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ea50:	4259      	negs	r1, r3
 801ea52:	4159      	adcs	r1, r3
 801ea54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ea58:	e7eb      	b.n	801ea32 <__swhatbuf_r+0x24>

0801ea5a <__smakebuf_r>:
 801ea5a:	898b      	ldrh	r3, [r1, #12]
 801ea5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ea5e:	079d      	lsls	r5, r3, #30
 801ea60:	4606      	mov	r6, r0
 801ea62:	460c      	mov	r4, r1
 801ea64:	d507      	bpl.n	801ea76 <__smakebuf_r+0x1c>
 801ea66:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ea6a:	6023      	str	r3, [r4, #0]
 801ea6c:	6123      	str	r3, [r4, #16]
 801ea6e:	2301      	movs	r3, #1
 801ea70:	6163      	str	r3, [r4, #20]
 801ea72:	b003      	add	sp, #12
 801ea74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea76:	ab01      	add	r3, sp, #4
 801ea78:	466a      	mov	r2, sp
 801ea7a:	f7ff ffc8 	bl	801ea0e <__swhatbuf_r>
 801ea7e:	9f00      	ldr	r7, [sp, #0]
 801ea80:	4605      	mov	r5, r0
 801ea82:	4639      	mov	r1, r7
 801ea84:	4630      	mov	r0, r6
 801ea86:	f7ff faff 	bl	801e088 <_malloc_r>
 801ea8a:	b948      	cbnz	r0, 801eaa0 <__smakebuf_r+0x46>
 801ea8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea90:	059a      	lsls	r2, r3, #22
 801ea92:	d4ee      	bmi.n	801ea72 <__smakebuf_r+0x18>
 801ea94:	f023 0303 	bic.w	r3, r3, #3
 801ea98:	f043 0302 	orr.w	r3, r3, #2
 801ea9c:	81a3      	strh	r3, [r4, #12]
 801ea9e:	e7e2      	b.n	801ea66 <__smakebuf_r+0xc>
 801eaa0:	89a3      	ldrh	r3, [r4, #12]
 801eaa2:	6020      	str	r0, [r4, #0]
 801eaa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801eaa8:	81a3      	strh	r3, [r4, #12]
 801eaaa:	9b01      	ldr	r3, [sp, #4]
 801eaac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801eab0:	b15b      	cbz	r3, 801eaca <__smakebuf_r+0x70>
 801eab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eab6:	4630      	mov	r0, r6
 801eab8:	f000 f84e 	bl	801eb58 <_isatty_r>
 801eabc:	b128      	cbz	r0, 801eaca <__smakebuf_r+0x70>
 801eabe:	89a3      	ldrh	r3, [r4, #12]
 801eac0:	f023 0303 	bic.w	r3, r3, #3
 801eac4:	f043 0301 	orr.w	r3, r3, #1
 801eac8:	81a3      	strh	r3, [r4, #12]
 801eaca:	89a3      	ldrh	r3, [r4, #12]
 801eacc:	431d      	orrs	r5, r3
 801eace:	81a5      	strh	r5, [r4, #12]
 801ead0:	e7cf      	b.n	801ea72 <__smakebuf_r+0x18>

0801ead2 <_raise_r>:
 801ead2:	291f      	cmp	r1, #31
 801ead4:	b538      	push	{r3, r4, r5, lr}
 801ead6:	4605      	mov	r5, r0
 801ead8:	460c      	mov	r4, r1
 801eada:	d904      	bls.n	801eae6 <_raise_r+0x14>
 801eadc:	2316      	movs	r3, #22
 801eade:	6003      	str	r3, [r0, #0]
 801eae0:	f04f 30ff 	mov.w	r0, #4294967295
 801eae4:	bd38      	pop	{r3, r4, r5, pc}
 801eae6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801eae8:	b112      	cbz	r2, 801eaf0 <_raise_r+0x1e>
 801eaea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eaee:	b94b      	cbnz	r3, 801eb04 <_raise_r+0x32>
 801eaf0:	4628      	mov	r0, r5
 801eaf2:	f000 f853 	bl	801eb9c <_getpid_r>
 801eaf6:	4622      	mov	r2, r4
 801eaf8:	4601      	mov	r1, r0
 801eafa:	4628      	mov	r0, r5
 801eafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eb00:	f000 b83a 	b.w	801eb78 <_kill_r>
 801eb04:	2b01      	cmp	r3, #1
 801eb06:	d00a      	beq.n	801eb1e <_raise_r+0x4c>
 801eb08:	1c59      	adds	r1, r3, #1
 801eb0a:	d103      	bne.n	801eb14 <_raise_r+0x42>
 801eb0c:	2316      	movs	r3, #22
 801eb0e:	6003      	str	r3, [r0, #0]
 801eb10:	2001      	movs	r0, #1
 801eb12:	e7e7      	b.n	801eae4 <_raise_r+0x12>
 801eb14:	2100      	movs	r1, #0
 801eb16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801eb1a:	4620      	mov	r0, r4
 801eb1c:	4798      	blx	r3
 801eb1e:	2000      	movs	r0, #0
 801eb20:	e7e0      	b.n	801eae4 <_raise_r+0x12>
	...

0801eb24 <raise>:
 801eb24:	4b02      	ldr	r3, [pc, #8]	@ (801eb30 <raise+0xc>)
 801eb26:	4601      	mov	r1, r0
 801eb28:	6818      	ldr	r0, [r3, #0]
 801eb2a:	f7ff bfd2 	b.w	801ead2 <_raise_r>
 801eb2e:	bf00      	nop
 801eb30:	2000003c 	.word	0x2000003c

0801eb34 <_fstat_r>:
 801eb34:	b538      	push	{r3, r4, r5, lr}
 801eb36:	4d07      	ldr	r5, [pc, #28]	@ (801eb54 <_fstat_r+0x20>)
 801eb38:	2300      	movs	r3, #0
 801eb3a:	4604      	mov	r4, r0
 801eb3c:	4608      	mov	r0, r1
 801eb3e:	4611      	mov	r1, r2
 801eb40:	602b      	str	r3, [r5, #0]
 801eb42:	f7e3 fba5 	bl	8002290 <_fstat>
 801eb46:	1c43      	adds	r3, r0, #1
 801eb48:	d102      	bne.n	801eb50 <_fstat_r+0x1c>
 801eb4a:	682b      	ldr	r3, [r5, #0]
 801eb4c:	b103      	cbz	r3, 801eb50 <_fstat_r+0x1c>
 801eb4e:	6023      	str	r3, [r4, #0]
 801eb50:	bd38      	pop	{r3, r4, r5, pc}
 801eb52:	bf00      	nop
 801eb54:	20027a24 	.word	0x20027a24

0801eb58 <_isatty_r>:
 801eb58:	b538      	push	{r3, r4, r5, lr}
 801eb5a:	4d06      	ldr	r5, [pc, #24]	@ (801eb74 <_isatty_r+0x1c>)
 801eb5c:	2300      	movs	r3, #0
 801eb5e:	4604      	mov	r4, r0
 801eb60:	4608      	mov	r0, r1
 801eb62:	602b      	str	r3, [r5, #0]
 801eb64:	f7e3 fba4 	bl	80022b0 <_isatty>
 801eb68:	1c43      	adds	r3, r0, #1
 801eb6a:	d102      	bne.n	801eb72 <_isatty_r+0x1a>
 801eb6c:	682b      	ldr	r3, [r5, #0]
 801eb6e:	b103      	cbz	r3, 801eb72 <_isatty_r+0x1a>
 801eb70:	6023      	str	r3, [r4, #0]
 801eb72:	bd38      	pop	{r3, r4, r5, pc}
 801eb74:	20027a24 	.word	0x20027a24

0801eb78 <_kill_r>:
 801eb78:	b538      	push	{r3, r4, r5, lr}
 801eb7a:	4d07      	ldr	r5, [pc, #28]	@ (801eb98 <_kill_r+0x20>)
 801eb7c:	2300      	movs	r3, #0
 801eb7e:	4604      	mov	r4, r0
 801eb80:	4608      	mov	r0, r1
 801eb82:	4611      	mov	r1, r2
 801eb84:	602b      	str	r3, [r5, #0]
 801eb86:	f7e3 fb21 	bl	80021cc <_kill>
 801eb8a:	1c43      	adds	r3, r0, #1
 801eb8c:	d102      	bne.n	801eb94 <_kill_r+0x1c>
 801eb8e:	682b      	ldr	r3, [r5, #0]
 801eb90:	b103      	cbz	r3, 801eb94 <_kill_r+0x1c>
 801eb92:	6023      	str	r3, [r4, #0]
 801eb94:	bd38      	pop	{r3, r4, r5, pc}
 801eb96:	bf00      	nop
 801eb98:	20027a24 	.word	0x20027a24

0801eb9c <_getpid_r>:
 801eb9c:	f7e3 bb0e 	b.w	80021bc <_getpid>

0801eba0 <_init>:
 801eba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eba2:	bf00      	nop
 801eba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eba6:	bc08      	pop	{r3}
 801eba8:	469e      	mov	lr, r3
 801ebaa:	4770      	bx	lr

0801ebac <_fini>:
 801ebac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebae:	bf00      	nop
 801ebb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ebb2:	bc08      	pop	{r3}
 801ebb4:	469e      	mov	lr, r3
 801ebb6:	4770      	bx	lr
