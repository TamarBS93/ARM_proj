
Final_ARM_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001acac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003464  0801ae7c  0801ae7c  0001be7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e2e0  0801e2e0  000201cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801e2e0  0801e2e0  0001f2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e2e8  0801e2e8  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e2e8  0801e2e8  0001f2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e2ec  0801e2ec  0001f2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801e2f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801e37c  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801e41c  0002012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002759c  200001cc  0801e4bc  000201cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20027768  0801e4bc  00020768  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003b7b9  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008c9d  00000000  00000000  0005b9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ba0  00000000  00000000  00064658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000227b  00000000  00000000  000671f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014246  00000000  00000000  00069473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00043612  00000000  00000000  0007d6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011e20d  00000000  00000000  000c0ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001deed8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000bf18  00000000  00000000  001def1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  001eae34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ae64 	.word	0x0801ae64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	0801ae64 	.word	0x0801ae64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fc03 	bl	8001dea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f88c 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa88 	bl	8000afc <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fa50 	bl	8000a90 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f910 	bl	8000814 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f9ee 	bl	80009d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fa1c 	bl	8000a34 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f9ba 	bl	8000974 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000600:	f000 f988 	bl	8000914 <MX_UART4_Init>
  MX_CRC_Init();
 8000604:	f000 f8e4 	bl	80007d0 <MX_CRC_Init>
  MX_I2C4_Init();
 8000608:	f000 f944 	bl	8000894 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  // ethernetif_init(&gnetif);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800060c:	f00a f982 	bl	800a914 <osKernelInitialize>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UartRx */
  UartRxHandle = osSemaphoreNew(1, 0, &UartRx_attributes);
 8000610:	4a25      	ldr	r2, [pc, #148]	@ (80006a8 <main+0xcc>)
 8000612:	2100      	movs	r1, #0
 8000614:	2001      	movs	r0, #1
 8000616:	f00a fc2b 	bl	800ae70 <osSemaphoreNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a23      	ldr	r2, [pc, #140]	@ (80006ac <main+0xd0>)
 800061e:	6013      	str	r3, [r2, #0]

  /* creation of UartTx */
  UartTxHandle = osSemaphoreNew(1, 0, &UartTx_attributes);
 8000620:	4a23      	ldr	r2, [pc, #140]	@ (80006b0 <main+0xd4>)
 8000622:	2100      	movs	r1, #0
 8000624:	2001      	movs	r0, #1
 8000626:	f00a fc23 	bl	800ae70 <osSemaphoreNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <main+0xd8>)
 800062e:	6013      	str	r3, [r2, #0]

  /* creation of I2cRx */
  I2cRxHandle = osSemaphoreNew(1, 0, &I2cRx_attributes);
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <main+0xdc>)
 8000632:	2100      	movs	r1, #0
 8000634:	2001      	movs	r0, #1
 8000636:	f00a fc1b 	bl	800ae70 <osSemaphoreNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a1f      	ldr	r2, [pc, #124]	@ (80006bc <main+0xe0>)
 800063e:	6013      	str	r3, [r2, #0]

  /* creation of I2cTx */
  I2cTxHandle = osSemaphoreNew(1, 0, &I2cTx_attributes);
 8000640:	4a1f      	ldr	r2, [pc, #124]	@ (80006c0 <main+0xe4>)
 8000642:	2100      	movs	r1, #0
 8000644:	2001      	movs	r0, #1
 8000646:	f00a fc13 	bl	800ae70 <osSemaphoreNew>
 800064a:	4603      	mov	r3, r0
 800064c:	4a1d      	ldr	r2, [pc, #116]	@ (80006c4 <main+0xe8>)
 800064e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testsQ */
  testsQHandle = osMessageQueueNew (16, 4, &testsQ_attributes);
 8000650:	4a1d      	ldr	r2, [pc, #116]	@ (80006c8 <main+0xec>)
 8000652:	2104      	movs	r1, #4
 8000654:	2010      	movs	r0, #16
 8000656:	f00a fd65 	bl	800b124 <osMessageQueueNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <main+0xf0>)
 800065e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(lwip_initiation, NULL, &defaultTask_attributes);
 8000660:	4a1b      	ldr	r2, [pc, #108]	@ (80006d0 <main+0xf4>)
 8000662:	2100      	movs	r1, #0
 8000664:	481b      	ldr	r0, [pc, #108]	@ (80006d4 <main+0xf8>)
 8000666:	f00a f9e7 	bl	800aa38 <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a1a      	ldr	r2, [pc, #104]	@ (80006d8 <main+0xfc>)
 800066e:	6013      	str	r3, [r2, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blinking_blue, NULL, &blink_task_attributes);
 8000670:	4a1a      	ldr	r2, [pc, #104]	@ (80006dc <main+0x100>)
 8000672:	2100      	movs	r1, #0
 8000674:	481a      	ldr	r0, [pc, #104]	@ (80006e0 <main+0x104>)
 8000676:	f00a f9df 	bl	800aa38 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a19      	ldr	r2, [pc, #100]	@ (80006e4 <main+0x108>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of udp_task */
  udp_taskHandle = osThreadNew(udp_function, NULL, &udp_task_attributes);
 8000680:	4a19      	ldr	r2, [pc, #100]	@ (80006e8 <main+0x10c>)
 8000682:	2100      	movs	r1, #0
 8000684:	4819      	ldr	r0, [pc, #100]	@ (80006ec <main+0x110>)
 8000686:	f00a f9d7 	bl	800aa38 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a18      	ldr	r2, [pc, #96]	@ (80006f0 <main+0x114>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of performing_task */
  performing_taskHandle = osThreadNew(perform_tests, NULL, &performing_task_attributes);
 8000690:	4a18      	ldr	r2, [pc, #96]	@ (80006f4 <main+0x118>)
 8000692:	2100      	movs	r1, #0
 8000694:	4818      	ldr	r0, [pc, #96]	@ (80006f8 <main+0x11c>)
 8000696:	f00a f9cf 	bl	800aa38 <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a17      	ldr	r2, [pc, #92]	@ (80006fc <main+0x120>)
 800069e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a0:	f00a f96c 	bl	800a97c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <main+0xc8>
 80006a8:	0801e074 	.word	0x0801e074
 80006ac:	20000ac8 	.word	0x20000ac8
 80006b0:	0801e084 	.word	0x0801e084
 80006b4:	20000acc 	.word	0x20000acc
 80006b8:	0801e094 	.word	0x0801e094
 80006bc:	20000ad0 	.word	0x20000ad0
 80006c0:	0801e0a4 	.word	0x0801e0a4
 80006c4:	20000ad4 	.word	0x20000ad4
 80006c8:	0801e05c 	.word	0x0801e05c
 80006cc:	20000ac4 	.word	0x20000ac4
 80006d0:	0801dfcc 	.word	0x0801dfcc
 80006d4:	08000f09 	.word	0x08000f09
 80006d8:	20000ab4 	.word	0x20000ab4
 80006dc:	0801dff0 	.word	0x0801dff0
 80006e0:	08000f1d 	.word	0x08000f1d
 80006e4:	20000ab8 	.word	0x20000ab8
 80006e8:	0801e014 	.word	0x0801e014
 80006ec:	08000f61 	.word	0x08000f61
 80006f0:	20000abc 	.word	0x20000abc
 80006f4:	0801e038 	.word	0x0801e038
 80006f8:	08000f75 	.word	0x08000f75
 80006fc:	20000ac0 	.word	0x20000ac0

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	@ 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	@ 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f019 fd3c 	bl	801a18c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000724:	f005 ffda 	bl	80066dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <SystemClock_Config+0xc8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a26      	ldr	r2, [pc, #152]	@ (80007c8 <SystemClock_Config+0xc8>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
 8000734:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <SystemClock_Config+0xc8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <SystemClock_Config+0xcc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000748:	4a20      	ldr	r2, [pc, #128]	@ (80007cc <SystemClock_Config+0xcc>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <SystemClock_Config+0xcc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000760:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000774:	2348      	movs	r3, #72	@ 0x48
 8000776:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800077c:	2303      	movs	r3, #3
 800077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f005 ffb9 	bl	80066fc <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000790:	f000 fc74 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2102      	movs	r1, #2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 fa47 	bl	8006c44 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007bc:	f000 fc5e 	bl	800107c <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3750      	adds	r7, #80	@ 0x50
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_CRC_Init+0x3c>)
 80007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <MX_CRC_Init+0x40>)
 80007d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_CRC_Init+0x3c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_CRC_Init+0x3c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_CRC_Init+0x3c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_CRC_Init+0x3c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_CRC_Init+0x3c>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_CRC_Init+0x3c>)
 80007fa:	f001 fc29 	bl	8002050 <HAL_CRC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000804:	f000 fc3a 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200001f0 	.word	0x200001f0
 8000810:	40023000 	.word	0x40023000

08000814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_I2C1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	@ (800088c <MX_I2C1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000820:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <MX_I2C1_Init+0x7c>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 120;
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000826:	2278      	movs	r2, #120	@ 0x78
 8000828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_I2C1_Init+0x74>)
 800082c:	2201      	movs	r2, #1
 800082e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084e:	480e      	ldr	r0, [pc, #56]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000850:	f003 fe82 	bl	8004558 <HAL_I2C_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800085a:	f000 fc0f 	bl	800107c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4809      	ldr	r0, [pc, #36]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000862:	f005 fd69 	bl	8006338 <HAL_I2CEx_ConfigAnalogFilter>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800086c:	f000 fc06 	bl	800107c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000874:	f005 fdab 	bl	80063ce <HAL_I2CEx_ConfigDigitalFilter>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 fbfd 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000214 	.word	0x20000214
 800088c:	40005400 	.word	0x40005400
 8000890:	00808cd2 	.word	0x00808cd2

08000894 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_I2C4_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	@ (800090c <MX_I2C4_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 800089e:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000910 <MX_I2C4_Init+0x7c>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80008ce:	480e      	ldr	r0, [pc, #56]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008d0:	f003 fe42 	bl	8004558 <HAL_I2C_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80008da:	f000 fbcf 	bl	800107c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	4809      	ldr	r0, [pc, #36]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008e2:	f005 fd29 	bl	8006338 <HAL_I2CEx_ConfigAnalogFilter>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80008ec:	f000 fbc6 	bl	800107c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008f4:	f005 fd6b 	bl	80063ce <HAL_I2CEx_ConfigDigitalFilter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 fbbd 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000268 	.word	0x20000268
 800090c:	40006000 	.word	0x40006000
 8000910:	00808cd2 	.word	0x00808cd2

08000914 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_UART4_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	@ (8000970 <MX_UART4_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <MX_UART4_Init+0x58>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_UART4_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_UART4_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_UART4_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_UART4_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_UART4_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_UART4_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_UART4_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_UART4_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_UART4_Init+0x58>)
 8000958:	f007 fa8a 	bl	8007e70 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 fb8b 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000037c 	.word	0x2000037c
 8000970:	40004c00 	.word	0x40004c00

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	@ (80009d0 <MX_USART2_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009b8:	f007 fa5a 	bl	8007e70 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 fb5b 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000404 	.word	0x20000404
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009da:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <MX_USART3_UART_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 8000a18:	f007 fa2a 	bl	8007e70 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 fb2b 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000048c 	.word	0x2000048c
 8000a30:	40004800 	.word	0x40004800

08000a34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a38:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2206      	movs	r2, #6
 8000a44:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a78:	f005 fcf5 	bl	8006466 <HAL_PCD_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a82:	f000 fafb 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200005d4 	.word	0x200005d4

08000a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_DMA_Init+0x68>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <MX_DMA_Init+0x68>)
 8000a9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_DMA_Init+0x68>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2105      	movs	r1, #5
 8000ab2:	200b      	movs	r0, #11
 8000ab4:	f001 faa2 	bl	8001ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ab8:	200b      	movs	r0, #11
 8000aba:	f001 fabb 	bl	8002034 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2106      	movs	r1, #6
 8000ac2:	200d      	movs	r0, #13
 8000ac4:	f001 fa9a 	bl	8001ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ac8:	200d      	movs	r0, #13
 8000aca:	f001 fab3 	bl	8002034 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2105      	movs	r1, #5
 8000ad2:	2010      	movs	r0, #16
 8000ad4:	f001 fa92 	bl	8001ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ad8:	2010      	movs	r0, #16
 8000ada:	f001 faab 	bl	8002034 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 6, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2106      	movs	r1, #6
 8000ae2:	2011      	movs	r0, #17
 8000ae4:	f001 fa8a 	bl	8001ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ae8:	2011      	movs	r0, #17
 8000aea:	f001 faa3 	bl	8002034 <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	@ 0x30
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b4d      	ldr	r3, [pc, #308]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a4c      	ldr	r2, [pc, #304]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	4b47      	ldr	r3, [pc, #284]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a46      	ldr	r2, [pc, #280]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b44      	ldr	r3, [pc, #272]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b41      	ldr	r3, [pc, #260]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a40      	ldr	r2, [pc, #256]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b38      	ldr	r3, [pc, #224]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b72:	4b35      	ldr	r3, [pc, #212]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a34      	ldr	r2, [pc, #208]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b78:	f043 0320 	orr.w	r3, r3, #32
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b32      	ldr	r3, [pc, #200]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0320 	and.w	r3, r3, #32
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba2:	4b29      	ldr	r3, [pc, #164]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a28      	ldr	r2, [pc, #160]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bc0:	4822      	ldr	r0, [pc, #136]	@ (8000c4c <MX_GPIO_Init+0x150>)
 8000bc2:	f003 fc95 	bl	80044f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2140      	movs	r1, #64	@ 0x40
 8000bca:	4821      	ldr	r0, [pc, #132]	@ (8000c50 <MX_GPIO_Init+0x154>)
 8000bcc:	f003 fc90 	bl	80044f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	481b      	ldr	r0, [pc, #108]	@ (8000c54 <MX_GPIO_Init+0x158>)
 8000be8:	f003 fad6 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bec:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4811      	ldr	r0, [pc, #68]	@ (8000c4c <MX_GPIO_Init+0x150>)
 8000c06:	f003 fac7 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c0a:	2340      	movs	r3, #64	@ 0x40
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <MX_GPIO_Init+0x154>)
 8000c22:	f003 fab9 	bl	8004198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_GPIO_Init+0x154>)
 8000c3a:	f003 faad 	bl	8004198 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3730      	adds	r7, #48	@ 0x30
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40020800 	.word	0x40020800

08000c58 <vApplicationStackOverflowHook>:
 *
 * @param xTask Task handle of the task whose stack overflowed.
 * @param pcTaskName Pointer to the name of the task whose stack overflowed.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
    // A stack overflow has been detected. This is a critical error.
    // The system is in an unstable state.
    // It is generally not safe to continue execution or call complex functions.

    printf("\n!!! STACK OVERFLOW DETECTED !!!\n");
 8000c62:	4811      	ldr	r0, [pc, #68]	@ (8000ca8 <vApplicationStackOverflowHook+0x50>)
 8000c64:	f019 f9a2 	bl	8019fac <puts>
    printf("Task: %s\n", pcTaskName);
 8000c68:	6839      	ldr	r1, [r7, #0]
 8000c6a:	4810      	ldr	r0, [pc, #64]	@ (8000cac <vApplicationStackOverflowHook+0x54>)
 8000c6c:	f019 f936 	bl	8019edc <iprintf>
    printf("Handle: 0x%lX\n", (uint32_t)xTask);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4619      	mov	r1, r3
 8000c74:	480e      	ldr	r0, [pc, #56]	@ (8000cb0 <vApplicationStackOverflowHook+0x58>)
 8000c76:	f019 f931 	bl	8019edc <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c7e:	b672      	cpsid	i
 8000c80:	f383 8811 	msr	BASEPRI, r3
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	f3bf 8f4f 	dsb	sy
 8000c8c:	b662      	cpsie	i
 8000c8e:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000c90:	bf00      	nop
    // Disable interrupts to prevent further execution and potential damage
    taskDISABLE_INTERRUPTS();
    for(;;)
    {
        // RED LED toggle for visual indication
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000c92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c96:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <vApplicationStackOverflowHook+0x5c>)
 8000c98:	f003 fc43 	bl	8004522 <HAL_GPIO_TogglePin>
        osDelay(1000);
 8000c9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca0:	f009 ff70 	bl	800ab84 <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ca4:	bf00      	nop
 8000ca6:	e7f4      	b.n	8000c92 <vApplicationStackOverflowHook+0x3a>
 8000ca8:	0801aed8 	.word	0x0801aed8
 8000cac:	0801aefc 	.word	0x0801aefc
 8000cb0:	0801af08 	.word	0x0801af08
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <udp_receive_init>:
    }
}

void udp_receive_init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	//printf("udp_receive_init() called\n");

    udp_pcb_handle = udp_new();
 8000cbc:	f015 fe2a 	bl	8016914 <udp_new>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a13      	ldr	r2, [pc, #76]	@ (8000d10 <udp_receive_init+0x58>)
 8000cc4:	6013      	str	r3, [r2, #0]
    if (!udp_pcb_handle) {
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <udp_receive_init+0x58>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <udp_receive_init+0x1e>
        printf("Failed to create UDP PCB\n");
 8000cce:	4811      	ldr	r0, [pc, #68]	@ (8000d14 <udp_receive_init+0x5c>)
 8000cd0:	f019 f96c 	bl	8019fac <puts>
        return;
 8000cd4:	e01a      	b.n	8000d0c <udp_receive_init+0x54>
    }

    if (udp_bind(udp_pcb_handle, IP_ADDR_ANY, LOCAL_PORT) != ERR_OK) {
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <udp_receive_init+0x58>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f241 328d 	movw	r2, #5005	@ 0x138d
 8000cde:	490e      	ldr	r1, [pc, #56]	@ (8000d18 <udp_receive_init+0x60>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f015 fd6f 	bl	80167c4 <udp_bind>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <udp_receive_init+0x3c>
        printf("UDP bind failed\n");
 8000cec:	480b      	ldr	r0, [pc, #44]	@ (8000d1c <udp_receive_init+0x64>)
 8000cee:	f019 f95d 	bl	8019fac <puts>
        return;
 8000cf2:	e00b      	b.n	8000d0c <udp_receive_init+0x54>
    }

    udp_recv(udp_pcb_handle, udp_receive_callback, NULL);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <udp_receive_init+0x58>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4909      	ldr	r1, [pc, #36]	@ (8000d20 <udp_receive_init+0x68>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f015 fde9 	bl	80168d4 <udp_recv>
    printf("UDP ready, listening on port %d\n", LOCAL_PORT);
 8000d02:	f241 318d 	movw	r1, #5005	@ 0x138d
 8000d06:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <udp_receive_init+0x6c>)
 8000d08:	f019 f8e8 	bl	8019edc <iprintf>
}
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000ad8 	.word	0x20000ad8
 8000d14:	0801af18 	.word	0x0801af18
 8000d18:	0801e1f0 	.word	0x0801e1f0
 8000d1c:	0801af34 	.word	0x0801af34
 8000d20:	08000d29 	.word	0x08000d29
 8000d24:	0801af44 	.word	0x0801af44

08000d28 <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d074      	beq.n	8000e26 <udp_receive_callback+0xfe>
        // Copy the sender's IP address
        ip_addr_copy(server_addr, *addr);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a3b      	ldr	r2, [pc, #236]	@ (8000e30 <udp_receive_callback+0x108>)
 8000d42:	6013      	str	r3, [r2, #0]
        // Copy the sender's port
        server_port = port;
 8000d44:	4a3b      	ldr	r2, [pc, #236]	@ (8000e34 <udp_receive_callback+0x10c>)
 8000d46:	8c3b      	ldrh	r3, [r7, #32]
 8000d48:	8013      	strh	r3, [r2, #0]

        printf("Received from %s:%d -> %.*s\n",
 8000d4a:	6838      	ldr	r0, [r7, #0]
 8000d4c:	f017 f9dc 	bl	8018108 <ip4addr_ntoa>
 8000d50:	4601      	mov	r1, r0
 8000d52:	8c3a      	ldrh	r2, [r7, #32]
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	895b      	ldrh	r3, [r3, #10]
        printf("Received from %s:%d -> %.*s\n",
 8000d58:	4618      	mov	r0, r3
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
        printf("Received from %s:%d -> %.*s\n",
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	4603      	mov	r3, r0
 8000d62:	4835      	ldr	r0, [pc, #212]	@ (8000e38 <udp_receive_callback+0x110>)
 8000d64:	f019 f8ba 	bl	8019edc <iprintf>

        if (p->len >= sizeof(test_command_t)) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	895b      	ldrh	r3, [r3, #10]
 8000d6c:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000d70:	d950      	bls.n	8000e14 <udp_receive_callback+0xec>
            test_command_t *cmd = (test_command_t *)pvPortMalloc(sizeof(test_command_t));
 8000d72:	f240 1007 	movw	r0, #263	@ 0x107
 8000d76:	f00d fcb7 	bl	800e6e8 <pvPortMalloc>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	617b      	str	r3, [r7, #20]
            if (cmd != NULL) {
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d029      	beq.n	8000dd8 <udp_receive_callback+0xb0>
			   // Copy the data from the pbuf payload to the allocated memory
			   memcpy(cmd, p->payload, sizeof(test_command_t)); // Only copy the struct size
 8000d84:	6978      	ldr	r0, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f240 1207 	movw	r2, #263	@ 0x107
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f019 facf 	bl	801a332 <memcpy>
				// Debug print received data
				printf("Received Test Command:\n");
 8000d94:	4829      	ldr	r0, [pc, #164]	@ (8000e3c <udp_receive_callback+0x114>)
 8000d96:	f019 f909 	bl	8019fac <puts>
				printf("test_id: %lu\n", cmd->test_id);
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4827      	ldr	r0, [pc, #156]	@ (8000e40 <udp_receive_callback+0x118>)
 8000da2:	f019 f89b 	bl	8019edc <iprintf>
				printf("peripheral bitfield: 0x%02X\n", cmd->peripheral);
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4825      	ldr	r0, [pc, #148]	@ (8000e44 <udp_receive_callback+0x11c>)
 8000dae:	f019 f895 	bl	8019edc <iprintf>
				printf("iterations: %u\n", cmd->iterations);
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	795b      	ldrb	r3, [r3, #5]
 8000db6:	4619      	mov	r1, r3
 8000db8:	4823      	ldr	r0, [pc, #140]	@ (8000e48 <udp_receive_callback+0x120>)
 8000dba:	f019 f88f 	bl	8019edc <iprintf>
				printf("bit pattern length: %u\n", cmd->bit_pattern_length);
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	799b      	ldrb	r3, [r3, #6]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4821      	ldr	r0, [pc, #132]	@ (8000e4c <udp_receive_callback+0x124>)
 8000dc6:	f019 f889 	bl	8019edc <iprintf>
				printf("bit pattern: %s\n",cmd->bit_pattern);
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3307      	adds	r3, #7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	481f      	ldr	r0, [pc, #124]	@ (8000e50 <udp_receive_callback+0x128>)
 8000dd2:	f019 f883 	bl	8019edc <iprintf>
 8000dd6:	e002      	b.n	8000dde <udp_receive_callback+0xb6>
            }
            else{
                printf("Failed to allocate memory for test_command_t!\n");
 8000dd8:	481e      	ldr	r0, [pc, #120]	@ (8000e54 <udp_receive_callback+0x12c>)
 8000dda:	f019 f8e7 	bl	8019fac <puts>
            }
            // Send the POINTER to the newly allocated and copied* data to the queue
            if (xQueueSendToBack(testsQHandle, &cmd, 1) != pdPASS){ // Pass address of pointer
 8000dde:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <udp_receive_callback+0x130>)
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	f107 0114 	add.w	r1, r7, #20
 8000de6:	2300      	movs	r3, #0
 8000de8:	2201      	movs	r2, #1
 8000dea:	f00a fe7b 	bl	800bae4 <xQueueGenericSend>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d007      	beq.n	8000e04 <udp_receive_callback+0xdc>
                printf("Failed to send data to tests queue.\n");
 8000df4:	4819      	ldr	r0, [pc, #100]	@ (8000e5c <udp_receive_callback+0x134>)
 8000df6:	f019 f8d9 	bl	8019fac <puts>
                // If send fails, free the allocated memory immediately
                vPortFree(cmd);
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f00d fd41 	bl	800e884 <vPortFree>
 8000e02:	e00d      	b.n	8000e20 <udp_receive_callback+0xf8>
            } else {
                // Only notify if successfully sent to queue
            	//printf("udp_receive_callback sent a command to the tests queue successfully\n");
                xTaskNotifyGive(performing_taskHandle);
 8000e04:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <udp_receive_callback+0x138>)
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f00c fdad 	bl	800d96c <xTaskGenericNotify>
 8000e12:	e005      	b.n	8000e20 <udp_receive_callback+0xf8>
            }
        } else {
            printf("Packet too short: %d bytes\n", p->len);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	895b      	ldrh	r3, [r3, #10]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4812      	ldr	r0, [pc, #72]	@ (8000e64 <udp_receive_callback+0x13c>)
 8000e1c:	f019 f85e 	bl	8019edc <iprintf>
        }
        pbuf_free(p);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f00f fbdb 	bl	80105dc <pbuf_free>
    }
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200001e8 	.word	0x200001e8
 8000e34:	200001ec 	.word	0x200001ec
 8000e38:	0801af68 	.word	0x0801af68
 8000e3c:	0801af88 	.word	0x0801af88
 8000e40:	0801afa0 	.word	0x0801afa0
 8000e44:	0801afb0 	.word	0x0801afb0
 8000e48:	0801afd0 	.word	0x0801afd0
 8000e4c:	0801afe0 	.word	0x0801afe0
 8000e50:	0801aff8 	.word	0x0801aff8
 8000e54:	0801b00c 	.word	0x0801b00c
 8000e58:	20000ac4 	.word	0x20000ac4
 8000e5c:	0801b03c 	.word	0x0801b03c
 8000e60:	20000ac0 	.word	0x20000ac0
 8000e64:	0801b060 	.word	0x0801b060

08000e68 <send_response>:

void send_response(result_pro_t result) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	463b      	mov	r3, r7
 8000e70:	e883 0003 	stmia.w	r3, {r0, r1}
    // Check if we have a valid sender address
    if (ip_addr_isany(&server_addr) == 0) {
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <send_response+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d022      	beq.n	8000ec2 <send_response+0x5a>
        // Create a new pbuf for the response data
        struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, sizeof(result_pro_t), PBUF_RAM);
 8000e7c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e80:	2106      	movs	r1, #6
 8000e82:	2036      	movs	r0, #54	@ 0x36
 8000e84:	f00f f8c6 	bl	8010014 <pbuf_alloc>
 8000e88:	60f8      	str	r0, [r7, #12]
        if (p != NULL) {
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d018      	beq.n	8000ec2 <send_response+0x5a>
            // Copy the result struct into the pbuf payload
            memcpy(p->payload, &result, sizeof(result_pro_t));
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	461a      	mov	r2, r3
 8000e96:	463b      	mov	r3, r7
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	6010      	str	r0, [r2, #0]
 8000e9c:	889b      	ldrh	r3, [r3, #4]
 8000e9e:	8093      	strh	r3, [r2, #4]

            // Send the response to the stored address and port
            if(udp_sendto(udp_pcb_handle, p, &server_addr, server_port) != ERR_OK){
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <send_response+0x68>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <send_response+0x6c>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <send_response+0x64>)
 8000eaa:	68f9      	ldr	r1, [r7, #12]
 8000eac:	f015 fad4 	bl	8016458 <udp_sendto>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <send_response+0x54>
            	printf("sendto server failed");
 8000eb6:	4808      	ldr	r0, [pc, #32]	@ (8000ed8 <send_response+0x70>)
 8000eb8:	f019 f810 	bl	8019edc <iprintf>
            }

            // Free the pbuf
            pbuf_free(p);
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f00f fb8d 	bl	80105dc <pbuf_free>
        }
    }
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200001e8 	.word	0x200001e8
 8000ed0:	20000ad8 	.word	0x20000ad8
 8000ed4:	200001ec 	.word	0x200001ec
 8000ed8:	0801b07c 	.word	0x0801b07c

08000edc <calculate_crc>:


uint32_t calculate_crc(uint8_t *data, size_t length) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
    // HAL_CRC_Calculate expects 32-bit words, so convert length
    uint32_t word_count = (length + 3) / 4; // Round up
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	3303      	adds	r3, #3
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	60fb      	str	r3, [r7, #12]
    return HAL_CRC_Calculate(&hcrc, (uint32_t *)data, word_count);
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <calculate_crc+0x28>)
 8000ef4:	f001 f910 	bl	8002118 <HAL_CRC_Calculate>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200001f0 	.word	0x200001f0

08000f08 <lwip_initiation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_lwip_initiation */
void lwip_initiation(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000f10:	f008 fe94 	bl	8009c3c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f009 fe35 	bl	800ab84 <osDelay>
 8000f1a:	e7fb      	b.n	8000f14 <lwip_initiation+0xc>

08000f1c <blinking_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinking_blue */
void blinking_blue(void *argument)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinking_blue */
  /* Infinite loop */
  for(;;)
  {
	/* visual heartbeat */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f24:	2180      	movs	r1, #128	@ 0x80
 8000f26:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <blinking_blue+0x1c>)
 8000f28:	f003 fafb 	bl	8004522 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000f2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f30:	f009 fe28 	bl	800ab84 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f34:	bf00      	nop
 8000f36:	e7f5      	b.n	8000f24 <blinking_blue+0x8>
 8000f38:	40020400 	.word	0x40020400

08000f3c <__io_putchar>:
  /* USER CODE END blinking_blue */
}

/* USER CODE BEGIN Header_udp_function */
int __io_putchar(int ch)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f44:	1d39      	adds	r1, r7, #4
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <__io_putchar+0x20>)
 8000f4e:	f006 ffdd 	bl	8007f0c <HAL_UART_Transmit>
    return ch;
 8000f52:	687b      	ldr	r3, [r7, #4]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000048c 	.word	0x2000048c

08000f60 <udp_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_udp_function */
void udp_function(void *argument)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN udp_function */
	udp_receive_init();
 8000f68:	f7ff fea6 	bl	8000cb8 <udp_receive_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f009 fe09 	bl	800ab84 <osDelay>
 8000f72:	e7fb      	b.n	8000f6c <udp_function+0xc>

08000f74 <perform_tests>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_perform_tests */
void perform_tests(void *argument)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	@ 0x30
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	test_command_t *cmd;

  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	2001      	movs	r0, #1
 8000f82:	f00c fca7 	bl	800d8d4 <ulTaskNotifyTake>
	//printf("perform_tests woke up!\n");

	if (xQueueReceive(testsQHandle, &cmd, 0) != pdPASS)
 8000f86:	4b32      	ldr	r3, [pc, #200]	@ (8001050 <perform_tests+0xdc>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f107 011c 	add.w	r1, r7, #28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00a ffed 	bl	800bf70 <xQueueReceive>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d003      	beq.n	8000fa4 <perform_tests+0x30>
	{
		printf("perform_tests: No test command received\n");
 8000f9c:	482d      	ldr	r0, [pc, #180]	@ (8001054 <perform_tests+0xe0>)
 8000f9e:	f019 f805 	bl	8019fac <puts>
 8000fa2:	e7eb      	b.n	8000f7c <perform_tests+0x8>
		continue;
	}
	if(cmd->bit_pattern_length > MAX_BIT_PATTERN_LENGTH || cmd->test_id == NULL || cmd->iterations<1){
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <perform_tests+0x40>
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	795b      	ldrb	r3, [r3, #5]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d105      	bne.n	8000fc0 <perform_tests+0x4c>
		result_pro_t response = {cmd->test_id, TEST_ERR};
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fbe:	823b      	strh	r3, [r7, #16]
//		response.test_result = TEST_ERR;
		// send response
	}
	result_pro_t response_result;
	switch (cmd->peripheral){
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	791b      	ldrb	r3, [r3, #4]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	2b0f      	cmp	r3, #15
 8000fc8:	d83e      	bhi.n	8001048 <perform_tests+0xd4>
 8000fca:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd0 <perform_tests+0x5c>)
 8000fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd0:	08001049 	.word	0x08001049
 8000fd4:	08001011 	.word	0x08001011
 8000fd8:	08001049 	.word	0x08001049
 8000fdc:	08001049 	.word	0x08001049
 8000fe0:	08001049 	.word	0x08001049
 8000fe4:	08001049 	.word	0x08001049
 8000fe8:	08001049 	.word	0x08001049
 8000fec:	0800102d 	.word	0x0800102d
 8000ff0:	08001049 	.word	0x08001049
 8000ff4:	08001049 	.word	0x08001049
 8000ff8:	08001049 	.word	0x08001049
 8000ffc:	08001049 	.word	0x08001049
 8001000:	08001049 	.word	0x08001049
 8001004:	08001049 	.word	0x08001049
 8001008:	08001049 	.word	0x08001049
 800100c:	08001049 	.word	0x08001049
	case TIMER:
		break;
	case UART:
		send_response(uart_testing(cmd));
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f018 fbb5 	bl	8019788 <uart_testing>
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001026:	f7ff ff1f 	bl	8000e68 <send_response>
		break;
 800102a:	e00d      	b.n	8001048 <perform_tests+0xd4>
	case SPI:
		break;
	case I2C:
		send_response(i2c_testing(cmd));
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f018 f8fd 	bl	8019234 <i2c_testing>
 800103a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800103e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001042:	f7ff ff11 	bl	8000e68 <send_response>
		break;
 8001046:	bf00      	nop
	case ADC_P:
		break;
	default:
	}
	//vPortFree(cmd); // until i will handle it
    osDelay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f009 fd9b 	bl	800ab84 <osDelay>
  {
 800104e:	e795      	b.n	8000f7c <perform_tests+0x8>
 8001050:	20000ac4 	.word	0x20000ac4
 8001054:	0801b094 	.word	0x0801b094

08001058 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800106a:	f000 fecb 	bl	8001e04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40001000 	.word	0x40001000

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <Error_Handler+0x8>

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <HAL_MspInit+0x4c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	@ 0x40
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_MspInit+0x4c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <HAL_MspInit+0x4c>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	210f      	movs	r1, #15
 80010c2:	f06f 0001 	mvn.w	r0, #1
 80010c6:	f000 ff99 	bl	8001ffc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <HAL_CRC_MspInit+0x38>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10b      	bne.n	8001102 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <HAL_CRC_MspInit+0x3c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a09      	ldr	r2, [pc, #36]	@ (8001114 <HAL_CRC_MspInit+0x3c>)
 80010f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <HAL_CRC_MspInit+0x3c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023000 	.word	0x40023000
 8001114:	40023800 	.word	0x40023800

08001118 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0ac      	sub	sp, #176	@ 0xb0
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	2284      	movs	r2, #132	@ 0x84
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f019 f827 	bl	801a18c <memset>
  if(hi2c->Instance==I2C1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a72      	ldr	r2, [pc, #456]	@ (800130c <HAL_I2C_MspInit+0x1f4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d16b      	bne.n	8001220 <HAL_I2C_MspInit+0x108>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001148:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800114c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800114e:	2300      	movs	r3, #0
 8001150:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4618      	mov	r0, r3
 8001158:	f005 ffcc 	bl	80070f4 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001162:	f7ff ff8b 	bl	800107c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b6a      	ldr	r3, [pc, #424]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a69      	ldr	r2, [pc, #420]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b67      	ldr	r3, [pc, #412]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001182:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001186:	2312      	movs	r3, #18
 8001188:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001198:	2304      	movs	r3, #4
 800119a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011a2:	4619      	mov	r1, r3
 80011a4:	485b      	ldr	r0, [pc, #364]	@ (8001314 <HAL_I2C_MspInit+0x1fc>)
 80011a6:	f002 fff7 	bl	8004198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011aa:	4b59      	ldr	r3, [pc, #356]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a58      	ldr	r2, [pc, #352]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b56      	ldr	r3, [pc, #344]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80011c2:	4b55      	ldr	r3, [pc, #340]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 80011c4:	4a55      	ldr	r2, [pc, #340]	@ (800131c <HAL_I2C_MspInit+0x204>)
 80011c6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80011c8:	4b53      	ldr	r3, [pc, #332]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 80011ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011ce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d0:	4b51      	ldr	r3, [pc, #324]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d6:	4b50      	ldr	r3, [pc, #320]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 80011de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80011f0:	4b49      	ldr	r3, [pc, #292]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011f6:	4b48      	ldr	r3, [pc, #288]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011fc:	4b46      	ldr	r3, [pc, #280]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001202:	4845      	ldr	r0, [pc, #276]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 8001204:	f001 f92e 	bl	8002464 <HAL_DMA_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800120e:	f7ff ff35 	bl	800107c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a40      	ldr	r2, [pc, #256]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 8001216:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001218:	4a3f      	ldr	r2, [pc, #252]	@ (8001318 <HAL_I2C_MspInit+0x200>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 800121e:	e070      	b.n	8001302 <HAL_I2C_MspInit+0x1ea>
  else if(hi2c->Instance==I2C4)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a3e      	ldr	r2, [pc, #248]	@ (8001320 <HAL_I2C_MspInit+0x208>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d16b      	bne.n	8001302 <HAL_I2C_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800122a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800122e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	4618      	mov	r0, r3
 800123c:	f005 ff5a 	bl	80070f4 <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_I2C_MspInit+0x132>
      Error_Handler();
 8001246:	f7ff ff19 	bl	800107c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800124a:	4b31      	ldr	r3, [pc, #196]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a30      	ldr	r2, [pc, #192]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0320 	and.w	r3, r3, #32
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001262:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001266:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126a:	2312      	movs	r3, #18
 800126c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800127c:	2304      	movs	r3, #4
 800127e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001282:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001286:	4619      	mov	r1, r3
 8001288:	4826      	ldr	r0, [pc, #152]	@ (8001324 <HAL_I2C_MspInit+0x20c>)
 800128a:	f002 ff85 	bl	8004198 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	4a1f      	ldr	r2, [pc, #124]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 8001294:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001298:	6413      	str	r3, [r2, #64]	@ 0x40
 800129a:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <HAL_I2C_MspInit+0x1f8>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c4_tx.Instance = DMA1_Stream5;
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012a8:	4a20      	ldr	r2, [pc, #128]	@ (800132c <HAL_I2C_MspInit+0x214>)
 80012aa:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Channel = DMA_CHANNEL_2;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012b2:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012b6:	2240      	movs	r2, #64	@ 0x40
 80012b8:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012c0:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012c6:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c8:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80012d4:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
    hdma_i2c4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80012e6:	4810      	ldr	r0, [pc, #64]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012e8:	f001 f8bc 	bl	8002464 <HAL_DMA_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_I2C_MspInit+0x1de>
      Error_Handler();
 80012f2:	f7ff fec3 	bl	800107c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80012fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <HAL_I2C_MspInit+0x210>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001302:	bf00      	nop
 8001304:	37b0      	adds	r7, #176	@ 0xb0
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40005400 	.word	0x40005400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020400 	.word	0x40020400
 8001318:	200002bc 	.word	0x200002bc
 800131c:	40026010 	.word	0x40026010
 8001320:	40006000 	.word	0x40006000
 8001324:	40021400 	.word	0x40021400
 8001328:	2000031c 	.word	0x2000031c
 800132c:	40026088 	.word	0x40026088

08001330 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0b0      	sub	sp, #192	@ 0xc0
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001348:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800134c:	2284      	movs	r2, #132	@ 0x84
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f018 ff1b 	bl	801a18c <memset>
  if(huart->Instance==UART4)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a9e      	ldr	r2, [pc, #632]	@ (80015d4 <HAL_UART_MspInit+0x2a4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	f040 8095 	bne.w	800148c <HAL_UART_MspInit+0x15c>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001362:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001368:	2340      	movs	r3, #64	@ 0x40
 800136a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001370:	4618      	mov	r0, r3
 8001372:	f005 febf 	bl	80070f4 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800137c:	f7ff fe7e 	bl	800107c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001380:	4b95      	ldr	r3, [pc, #596]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	4a94      	ldr	r2, [pc, #592]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 8001386:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800138a:	6413      	str	r3, [r2, #64]	@ 0x40
 800138c:	4b92      	ldr	r3, [pc, #584]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4b8f      	ldr	r3, [pc, #572]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	4a8e      	ldr	r2, [pc, #568]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a4:	4b8c      	ldr	r3, [pc, #560]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
 80013ae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b0:	4b89      	ldr	r3, [pc, #548]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b4:	4a88      	ldr	r2, [pc, #544]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80013bc:	4b86      	ldr	r3, [pc, #536]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013e0:	2308      	movs	r3, #8
 80013e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013ea:	4619      	mov	r1, r3
 80013ec:	487b      	ldr	r0, [pc, #492]	@ (80015dc <HAL_UART_MspInit+0x2ac>)
 80013ee:	f002 fed3 	bl	8004198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800140c:	2308      	movs	r3, #8
 800140e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001416:	4619      	mov	r1, r3
 8001418:	4871      	ldr	r0, [pc, #452]	@ (80015e0 <HAL_UART_MspInit+0x2b0>)
 800141a:	f002 febd 	bl	8004198 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800141e:	4b71      	ldr	r3, [pc, #452]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 8001420:	4a71      	ldr	r2, [pc, #452]	@ (80015e8 <HAL_UART_MspInit+0x2b8>)
 8001422:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001424:	4b6f      	ldr	r3, [pc, #444]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 8001426:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800142a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800142c:	4b6d      	ldr	r3, [pc, #436]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001432:	4b6c      	ldr	r3, [pc, #432]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001438:	4b6a      	ldr	r3, [pc, #424]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 800143a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800143e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001440:	4b68      	ldr	r3, [pc, #416]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001446:	4b67      	ldr	r3, [pc, #412]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800144c:	4b65      	ldr	r3, [pc, #404]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001452:	4b64      	ldr	r3, [pc, #400]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001458:	4b62      	ldr	r3, [pc, #392]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800145e:	4861      	ldr	r0, [pc, #388]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 8001460:	f001 f800 	bl	8002464 <HAL_DMA_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800146a:	f7ff fe07 	bl	800107c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a5c      	ldr	r2, [pc, #368]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 8001472:	675a      	str	r2, [r3, #116]	@ 0x74
 8001474:	4a5b      	ldr	r2, [pc, #364]	@ (80015e4 <HAL_UART_MspInit+0x2b4>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2106      	movs	r1, #6
 800147e:	2034      	movs	r0, #52	@ 0x34
 8001480:	f000 fdbc 	bl	8001ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001484:	2034      	movs	r0, #52	@ 0x34
 8001486:	f000 fdd5 	bl	8002034 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800148a:	e101      	b.n	8001690 <HAL_UART_MspInit+0x360>
  else if(huart->Instance==USART2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a56      	ldr	r2, [pc, #344]	@ (80015ec <HAL_UART_MspInit+0x2bc>)
 8001492:	4293      	cmp	r3, r2
 8001494:	f040 80b2 	bne.w	80015fc <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800149c:	2304      	movs	r3, #4
 800149e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a4:	4618      	mov	r0, r3
 80014a6:	f005 fe25 	bl	80070f4 <HAL_RCCEx_PeriphCLKConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_UART_MspInit+0x184>
      Error_Handler();
 80014b0:	f7ff fde4 	bl	800107c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b4:	4b48      	ldr	r3, [pc, #288]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	4a47      	ldr	r2, [pc, #284]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80014ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014be:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c0:	4b45      	ldr	r3, [pc, #276]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	4b42      	ldr	r3, [pc, #264]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d0:	4a41      	ldr	r2, [pc, #260]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d8:	4b3f      	ldr	r3, [pc, #252]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e4:	4b3c      	ldr	r3, [pc, #240]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e8:	4a3b      	ldr	r2, [pc, #236]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f0:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <HAL_UART_MspInit+0x2a8>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014fc:	2308      	movs	r3, #8
 80014fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001514:	2307      	movs	r3, #7
 8001516:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800151e:	4619      	mov	r1, r3
 8001520:	482e      	ldr	r0, [pc, #184]	@ (80015dc <HAL_UART_MspInit+0x2ac>)
 8001522:	f002 fe39 	bl	8004198 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001526:	2320      	movs	r3, #32
 8001528:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153e:	2307      	movs	r3, #7
 8001540:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001548:	4619      	mov	r1, r3
 800154a:	4829      	ldr	r0, [pc, #164]	@ (80015f0 <HAL_UART_MspInit+0x2c0>)
 800154c:	f002 fe24 	bl	8004198 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001550:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 8001552:	4a29      	ldr	r2, [pc, #164]	@ (80015f8 <HAL_UART_MspInit+0x2c8>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001556:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 8001558:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800155c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155e:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 8001560:	2240      	movs	r2, #64	@ 0x40
 8001562:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001564:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800156a:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 800156c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001570:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001578:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800157e:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 8001586:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800158a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800158c:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 800158e:	2204      	movs	r2, #4
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 8001594:	2203      	movs	r2, #3
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 800159a:	2200      	movs	r2, #0
 800159c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015a4:	4813      	ldr	r0, [pc, #76]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 80015a6:	f000 ff5d 	bl	8002464 <HAL_DMA_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80015b0:	f7ff fd64 	bl	800107c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a0f      	ldr	r2, [pc, #60]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 80015b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80015ba:	4a0e      	ldr	r2, [pc, #56]	@ (80015f4 <HAL_UART_MspInit+0x2c4>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2105      	movs	r1, #5
 80015c4:	2026      	movs	r0, #38	@ 0x26
 80015c6:	f000 fd19 	bl	8001ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ca:	2026      	movs	r0, #38	@ 0x26
 80015cc:	f000 fd32 	bl	8002034 <HAL_NVIC_EnableIRQ>
}
 80015d0:	e05e      	b.n	8001690 <HAL_UART_MspInit+0x360>
 80015d2:	bf00      	nop
 80015d4:	40004c00 	.word	0x40004c00
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020800 	.word	0x40020800
 80015e4:	20000514 	.word	0x20000514
 80015e8:	40026040 	.word	0x40026040
 80015ec:	40004400 	.word	0x40004400
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	20000574 	.word	0x20000574
 80015f8:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a25      	ldr	r2, [pc, #148]	@ (8001698 <HAL_UART_MspInit+0x368>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d144      	bne.n	8001690 <HAL_UART_MspInit+0x360>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001606:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800160c:	2300      	movs	r3, #0
 800160e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001610:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001614:	4618      	mov	r0, r3
 8001616:	f005 fd6d 	bl	80070f4 <HAL_RCCEx_PeriphCLKConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 8001620:	f7ff fd2c 	bl	800107c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001624:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <HAL_UART_MspInit+0x36c>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	4a1c      	ldr	r2, [pc, #112]	@ (800169c <HAL_UART_MspInit+0x36c>)
 800162a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800162e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001630:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <HAL_UART_MspInit+0x36c>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <HAL_UART_MspInit+0x36c>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001640:	4a16      	ldr	r2, [pc, #88]	@ (800169c <HAL_UART_MspInit+0x36c>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6313      	str	r3, [r2, #48]	@ 0x30
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <HAL_UART_MspInit+0x36c>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001654:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800166e:	2307      	movs	r3, #7
 8001670:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001674:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001678:	4619      	mov	r1, r3
 800167a:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <HAL_UART_MspInit+0x370>)
 800167c:	f002 fd8c 	bl	8004198 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2105      	movs	r1, #5
 8001684:	2027      	movs	r0, #39	@ 0x27
 8001686:	f000 fcb9 	bl	8001ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800168a:	2027      	movs	r0, #39	@ 0x27
 800168c:	f000 fcd2 	bl	8002034 <HAL_NVIC_EnableIRQ>
}
 8001690:	bf00      	nop
 8001692:	37c0      	adds	r7, #192	@ 0xc0
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40004800 	.word	0x40004800
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020c00 	.word	0x40020c00

080016a4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0ac      	sub	sp, #176	@ 0xb0
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	2284      	movs	r2, #132	@ 0x84
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f018 fd61 	bl	801a18c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016d2:	d159      	bne.n	8001788 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80016d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80016d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 fd05 	bl	80070f4 <HAL_RCCEx_PeriphCLKConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80016f0:	f7ff fcc4 	bl	800107c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b26      	ldr	r3, [pc, #152]	@ (8001790 <HAL_PCD_MspInit+0xec>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f8:	4a25      	ldr	r2, [pc, #148]	@ (8001790 <HAL_PCD_MspInit+0xec>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001700:	4b23      	ldr	r3, [pc, #140]	@ (8001790 <HAL_PCD_MspInit+0xec>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800170c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001726:	230a      	movs	r3, #10
 8001728:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001730:	4619      	mov	r1, r3
 8001732:	4818      	ldr	r0, [pc, #96]	@ (8001794 <HAL_PCD_MspInit+0xf0>)
 8001734:	f002 fd30 	bl	8004198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800173c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001750:	4619      	mov	r1, r3
 8001752:	4810      	ldr	r0, [pc, #64]	@ (8001794 <HAL_PCD_MspInit+0xf0>)
 8001754:	f002 fd20 	bl	8004198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001758:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <HAL_PCD_MspInit+0xec>)
 800175a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800175c:	4a0c      	ldr	r2, [pc, #48]	@ (8001790 <HAL_PCD_MspInit+0xec>)
 800175e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001762:	6353      	str	r3, [r2, #52]	@ 0x34
 8001764:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_PCD_MspInit+0xec>)
 8001766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <HAL_PCD_MspInit+0xec>)
 8001772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001774:	4a06      	ldr	r2, [pc, #24]	@ (8001790 <HAL_PCD_MspInit+0xec>)
 8001776:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800177a:	6453      	str	r3, [r2, #68]	@ 0x44
 800177c:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <HAL_PCD_MspInit+0xec>)
 800177e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001788:	bf00      	nop
 800178a:	37b0      	adds	r7, #176	@ 0xb0
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40020000 	.word	0x40020000

08001798 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	@ 0x38
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017a8:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <HAL_InitTick+0xe0>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	4a32      	ldr	r2, [pc, #200]	@ (8001878 <HAL_InitTick+0xe0>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b4:	4b30      	ldr	r3, [pc, #192]	@ (8001878 <HAL_InitTick+0xe0>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017c0:	f107 0210 	add.w	r2, r7, #16
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f005 fc60 	bl	8007090 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017da:	f005 fc31 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 80017de:	6378      	str	r0, [r7, #52]	@ 0x34
 80017e0:	e004      	b.n	80017ec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017e2:	f005 fc2d 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 80017e6:	4603      	mov	r3, r0
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ee:	4a23      	ldr	r2, [pc, #140]	@ (800187c <HAL_InitTick+0xe4>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	0c9b      	lsrs	r3, r3, #18
 80017f6:	3b01      	subs	r3, #1
 80017f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017fa:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <HAL_InitTick+0xe8>)
 80017fc:	4a21      	ldr	r2, [pc, #132]	@ (8001884 <HAL_InitTick+0xec>)
 80017fe:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <HAL_InitTick+0xe8>)
 8001802:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001806:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001808:	4a1d      	ldr	r2, [pc, #116]	@ (8001880 <HAL_InitTick+0xe8>)
 800180a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800180e:	4b1c      	ldr	r3, [pc, #112]	@ (8001880 <HAL_InitTick+0xe8>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <HAL_InitTick+0xe8>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_InitTick+0xe8>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001820:	4817      	ldr	r0, [pc, #92]	@ (8001880 <HAL_InitTick+0xe8>)
 8001822:	f006 f857 	bl	80078d4 <HAL_TIM_Base_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800182c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001830:	2b00      	cmp	r3, #0
 8001832:	d11b      	bne.n	800186c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001834:	4812      	ldr	r0, [pc, #72]	@ (8001880 <HAL_InitTick+0xe8>)
 8001836:	f006 f8af 	bl	8007998 <HAL_TIM_Base_Start_IT>
 800183a:	4603      	mov	r3, r0
 800183c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001840:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001844:	2b00      	cmp	r3, #0
 8001846:	d111      	bne.n	800186c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001848:	2036      	movs	r0, #54	@ 0x36
 800184a:	f000 fbf3 	bl	8002034 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b0f      	cmp	r3, #15
 8001852:	d808      	bhi.n	8001866 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001854:	2200      	movs	r2, #0
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	2036      	movs	r0, #54	@ 0x36
 800185a:	f000 fbcf 	bl	8001ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <HAL_InitTick+0xf0>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e002      	b.n	800186c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800186c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001870:	4618      	mov	r0, r3
 8001872:	3738      	adds	r7, #56	@ 0x38
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	431bde83 	.word	0x431bde83
 8001880:	20000adc 	.word	0x20000adc
 8001884:	40001000 	.word	0x40001000
 8001888:	20000004 	.word	0x20000004

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <NMI_Handler+0x4>

08001894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("!!! HARD FAULT HANDLER !!!\n");
 800189a:	4809      	ldr	r0, [pc, #36]	@ (80018c0 <HardFault_Handler+0x2c>)
 800189c:	f018 fb86 	bl	8019fac <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    // RED LED toggle for visual indication
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80018a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018a4:	4807      	ldr	r0, [pc, #28]	@ (80018c4 <HardFault_Handler+0x30>)
 80018a6:	f002 fe3c 	bl	8004522 <HAL_GPIO_TogglePin>
  	for(volatile int i=0; i<1000000; i++);
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	e002      	b.n	80018b6 <HardFault_Handler+0x22>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3301      	adds	r3, #1
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a03      	ldr	r2, [pc, #12]	@ (80018c8 <HardFault_Handler+0x34>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	ddf8      	ble.n	80018b0 <HardFault_Handler+0x1c>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80018be:	e7ef      	b.n	80018a0 <HardFault_Handler+0xc>
 80018c0:	0801b0bc 	.word	0x0801b0bc
 80018c4:	40020400 	.word	0x40020400
 80018c8:	000f423f 	.word	0x000f423f

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n");
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <MemManage_Handler+0x10>)
 80018d2:	f018 fb6b 	bl	8019fac <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d6:	bf00      	nop
 80018d8:	e7fd      	b.n	80018d6 <MemManage_Handler+0xa>
 80018da:	bf00      	nop
 80018dc:	0801b0bc 	.word	0x0801b0bc

080018e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n");
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <BusFault_Handler+0x10>)
 80018e6:	f018 fb61 	bl	8019fac <puts>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	bf00      	nop
 80018ec:	e7fd      	b.n	80018ea <BusFault_Handler+0xa>
 80018ee:	bf00      	nop
 80018f0:	0801b0bc 	.word	0x0801b0bc

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <DMA1_Stream0_IRQHandler+0x10>)
 8001912:	f000 ff47 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200002bc 	.word	0x200002bc

08001920 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <DMA1_Stream2_IRQHandler+0x10>)
 8001926:	f000 ff3d 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000514 	.word	0x20000514

08001934 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <DMA1_Stream5_IRQHandler+0x10>)
 800193a:	f000 ff33 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000031c 	.word	0x2000031c

08001948 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <DMA1_Stream6_IRQHandler+0x10>)
 800194e:	f000 ff29 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000574 	.word	0x20000574

0800195c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <USART2_IRQHandler+0x10>)
 8001962:	f006 fcaf 	bl	80082c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000404 	.word	0x20000404

08001970 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <USART3_IRQHandler+0x10>)
 8001976:	f006 fca5 	bl	80082c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000048c 	.word	0x2000048c

08001984 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <UART4_IRQHandler+0x10>)
 800198a:	f006 fc9b 	bl	80082c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000037c 	.word	0x2000037c

08001998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <TIM6_DAC_IRQHandler+0x10>)
 800199e:	f006 f873 	bl	8007a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000adc 	.word	0x20000adc

080019ac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//	printf("ETH_IRQHandler was called\n");
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <ETH_IRQHandler+0x10>)
 80019b2:	f001 fd09 	bl	80033c8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20009eb4 	.word	0x20009eb4

080019c0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <ETH_WKUP_IRQHandler+0x10>)
 80019c6:	f001 fcff 	bl	80033c8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20009eb4 	.word	0x20009eb4

080019d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return 1;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_kill>:

int _kill(int pid, int sig)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ee:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <_kill+0x20>)
 80019f0:	2216      	movs	r2, #22
 80019f2:	601a      	str	r2, [r3, #0]
  return -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	20027758 	.word	0x20027758

08001a08 <_exit>:

void _exit (int status)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ffe5 	bl	80019e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a1a:	bf00      	nop
 8001a1c:	e7fd      	b.n	8001a1a <_exit+0x12>

08001a1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e00a      	b.n	8001a46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a30:	f3af 8000 	nop.w
 8001a34:	4601      	mov	r1, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	60ba      	str	r2, [r7, #8]
 8001a3c:	b2ca      	uxtb	r2, r1
 8001a3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbf0      	blt.n	8001a30 <_read+0x12>
  }

  return len;
 8001a4e:	687b      	ldr	r3, [r7, #4]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e009      	b.n	8001a7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	60ba      	str	r2, [r7, #8]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fa62 	bl	8000f3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	dbf1      	blt.n	8001a6a <_write+0x12>
  }
  return len;
 8001a86:	687b      	ldr	r3, [r7, #4]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_close>:

int _close(int file)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ab8:	605a      	str	r2, [r3, #4]
  return 0;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_isatty>:

int _isatty(int file)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b00:	4a14      	ldr	r2, [pc, #80]	@ (8001b54 <_sbrk+0x5c>)
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <_sbrk+0x60>)
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b14:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <_sbrk+0x64>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	@ (8001b60 <_sbrk+0x68>)
 8001b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d205      	bcs.n	8001b34 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <_sbrk+0x6c>)
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	e009      	b.n	8001b48 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a06      	ldr	r2, [pc, #24]	@ (8001b5c <_sbrk+0x64>)
 8001b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	20050000 	.word	0x20050000
 8001b58:	00000400 	.word	0x00000400
 8001b5c:	20000b28 	.word	0x20000b28
 8001b60:	20027768 	.word	0x20027768
 8001b64:	20027758 	.word	0x20027758

08001b68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b90:	f7ff ffea 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b94:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b96:	490d      	ldr	r1, [pc, #52]	@ (8001bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b98:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bac:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001bba:	f018 fb93 	bl	801a2e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bbe:	f7fe fd0d 	bl	80005dc <main>
  bx  lr    
 8001bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bcc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001bd0:	0801e2f0 	.word	0x0801e2f0
  ldr r2, =_sbss
 8001bd4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001bd8:	20027768 	.word	0x20027768

08001bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC_IRQHandler>

08001bde <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <LAN8742_RegisterBusIO+0x28>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <LAN8742_RegisterBusIO+0x28>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <LAN8742_RegisterBusIO+0x28>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	e014      	b.n	8001c36 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d139      	bne.n	8001cd2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e01c      	b.n	8001cb2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	f107 020c 	add.w	r2, r7, #12
 8001c80:	2112      	movs	r1, #18
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	4798      	blx	r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da03      	bge.n	8001c94 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001c8c:	f06f 0304 	mvn.w	r3, #4
 8001c90:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001c92:	e00b      	b.n	8001cac <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d105      	bne.n	8001cac <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
         break;
 8001caa:	e005      	b.n	8001cb8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b1f      	cmp	r3, #31
 8001cb6:	d9df      	bls.n	8001c78 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b1f      	cmp	r3, #31
 8001cbe:	d902      	bls.n	8001cc6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001cc0:	f06f 0302 	mvn.w	r3, #2
 8001cc4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001cd2:	693b      	ldr	r3, [r7, #16]
 }
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6810      	ldr	r0, [r2, #0]
 8001cf0:	f107 020c 	add.w	r2, r7, #12
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4798      	blx	r3
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da02      	bge.n	8001d04 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001cfe:	f06f 0304 	mvn.w	r3, #4
 8001d02:	e06e      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6810      	ldr	r0, [r2, #0]
 8001d0c:	f107 020c 	add.w	r2, r7, #12
 8001d10:	2101      	movs	r1, #1
 8001d12:	4798      	blx	r3
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	da02      	bge.n	8001d20 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d1a:	f06f 0304 	mvn.w	r3, #4
 8001d1e:	e060      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e059      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6810      	ldr	r0, [r2, #0]
 8001d36:	f107 020c 	add.w	r2, r7, #12
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4798      	blx	r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	da02      	bge.n	8001d4a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d44:	f06f 0304 	mvn.w	r3, #4
 8001d48:	e04b      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d11b      	bne.n	8001d8c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d006      	beq.n	8001d6c <LAN8742_GetLinkState+0x90>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e03a      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e033      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d84:	2304      	movs	r3, #4
 8001d86:	e02c      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d88:	2305      	movs	r3, #5
 8001d8a:	e02a      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6810      	ldr	r0, [r2, #0]
 8001d94:	f107 020c 	add.w	r2, r7, #12
 8001d98:	211f      	movs	r1, #31
 8001d9a:	4798      	blx	r3
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da02      	bge.n	8001da8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001da2:	f06f 0304 	mvn.w	r3, #4
 8001da6:	e01c      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001db2:	2306      	movs	r3, #6
 8001db4:	e015      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 031c 	and.w	r3, r3, #28
 8001dbc:	2b18      	cmp	r3, #24
 8001dbe:	d101      	bne.n	8001dc4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e00e      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 031c 	and.w	r3, r3, #28
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d101      	bne.n	8001dd2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e007      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 031c 	and.w	r3, r3, #28
 8001dd8:	2b14      	cmp	r3, #20
 8001dda:	d101      	bne.n	8001de0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e000      	b.n	8001de2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001de0:	2305      	movs	r3, #5
    }
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dee:	2003      	movs	r0, #3
 8001df0:	f000 f8f9 	bl	8001fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df4:	200f      	movs	r0, #15
 8001df6:	f7ff fccf 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfa:	f7ff f945 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008
 8001e28:	20000b2c 	.word	0x20000b2c

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	@ (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000b2c 	.word	0x20000b2c

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff ffee 	bl	8001e2c <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d005      	beq.n	8001e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <HAL_Delay+0x44>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e6a:	bf00      	nop
 8001e6c:	f7ff ffde 	bl	8001e2c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d8f7      	bhi.n	8001e6c <HAL_Delay+0x28>
  {
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000008 	.word	0x20000008

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <__NVIC_SetPriorityGrouping+0x40>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eba:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <__NVIC_SetPriorityGrouping+0x40>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60d3      	str	r3, [r2, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00
 8001ed0:	05fa0000 	.word	0x05fa0000

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	db0b      	blt.n	8001f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	4907      	ldr	r1, [pc, #28]	@ (8001f28 <__NVIC_EnableIRQ+0x38>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2001      	movs	r0, #1
 8001f12:	fa00 f202 	lsl.w	r2, r0, r2
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	@ (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	@ (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	@ 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ff4c 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200e:	f7ff ff61 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 8002012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68b9      	ldr	r1, [r7, #8]
 8002018:	6978      	ldr	r0, [r7, #20]
 800201a:	f7ff ffb1 	bl	8001f80 <NVIC_EncodePriority>
 800201e:	4602      	mov	r2, r0
 8002020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff80 	bl	8001f2c <__NVIC_SetPriority>
}
 800202c:	bf00      	nop
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff54 	bl	8001ef0 <__NVIC_EnableIRQ>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e054      	b.n	800210c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7f5b      	ldrb	r3, [r3, #29]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff f830 	bl	80010d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	791b      	ldrb	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a22      	ldr	r2, [pc, #136]	@ (8002114 <HAL_CRC_Init+0xc4>)
 800208c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0218 	bic.w	r2, r2, #24
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	e00c      	b.n	80020ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6899      	ldr	r1, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	461a      	mov	r2, r3
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f94c 	bl	8002348 <HAL_CRCEx_Polynomial_Set>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e028      	b.n	800210c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	795b      	ldrb	r3, [r3, #5]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	e004      	b.n	80020d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6912      	ldr	r2, [r2, #16]
 80020d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	04c11db7 	.word	0x04c11db7

08002118 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2202      	movs	r2, #2
 800212c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	2b03      	cmp	r3, #3
 8002144:	d006      	beq.n	8002154 <HAL_CRC_Calculate+0x3c>
 8002146:	2b03      	cmp	r3, #3
 8002148:	d829      	bhi.n	800219e <HAL_CRC_Calculate+0x86>
 800214a:	2b01      	cmp	r3, #1
 800214c:	d019      	beq.n	8002182 <HAL_CRC_Calculate+0x6a>
 800214e:	2b02      	cmp	r3, #2
 8002150:	d01e      	beq.n	8002190 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002152:	e024      	b.n	800219e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e00a      	b.n	8002170 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	441a      	add	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3301      	adds	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	d3f0      	bcc.n	800215a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	613b      	str	r3, [r7, #16]
      break;
 8002180:	e00e      	b.n	80021a0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f812 	bl	80021b0 <CRC_Handle_8>
 800218c:	6138      	str	r0, [r7, #16]
      break;
 800218e:	e007      	b.n	80021a0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f89d 	bl	80022d4 <CRC_Handle_16>
 800219a:	6138      	str	r0, [r7, #16]
      break;
 800219c:	e000      	b.n	80021a0 <HAL_CRC_Calculate+0x88>
      break;
 800219e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80021a6:	693b      	ldr	r3, [r7, #16]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	e023      	b.n	800220a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	4413      	add	r3, r2
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	3301      	adds	r3, #1
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	440b      	add	r3, r1
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80021dc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	440b      	add	r3, r1
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80021ec:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	3303      	adds	r3, #3
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	440b      	add	r3, r1
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002200:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3301      	adds	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	429a      	cmp	r2, r3
 8002212:	d3d6      	bcc.n	80021c2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d051      	beq.n	80022c2 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d108      	bne.n	800223a <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	4413      	add	r3, r2
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	7013      	strb	r3, [r2, #0]
 8002238:	e043      	b.n	80022c2 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d118      	bne.n	8002276 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	4413      	add	r3, r2
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b21b      	sxth	r3, r3
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	b21a      	sxth	r2, r3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	3301      	adds	r3, #1
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	440b      	add	r3, r1
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b21b      	sxth	r3, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	b21b      	sxth	r3, r3
 8002266:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	8b7a      	ldrh	r2, [r7, #26]
 8002272:	801a      	strh	r2, [r3, #0]
 8002274:	e025      	b.n	80022c2 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b03      	cmp	r3, #3
 800227e:	d120      	bne.n	80022c2 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	4413      	add	r3, r2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b21b      	sxth	r3, r3
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	b21a      	sxth	r2, r3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	3301      	adds	r3, #1
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	440b      	add	r3, r1
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b21b      	sxth	r3, r3
 800229e:	4313      	orrs	r3, r2
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	8b7a      	ldrh	r2, [r7, #26]
 80022ae:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	4413      	add	r3, r2
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3724      	adds	r7, #36	@ 0x24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e013      	b.n	800230e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	4413      	add	r3, r2
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	041a      	lsls	r2, r3, #16
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	440b      	add	r3, r1
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	4619      	mov	r1, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3301      	adds	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	d3e6      	bcc.n	80022e6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	4413      	add	r3, r2
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002358:	231f      	movs	r3, #31
 800235a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
 800236a:	e063      	b.n	8002434 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800236c:	bf00      	nop
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	613a      	str	r2, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_CRCEx_Polynomial_Set+0x44>
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b18      	cmp	r3, #24
 8002390:	d846      	bhi.n	8002420 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002392:	a201      	add	r2, pc, #4	@ (adr r2, 8002398 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002398:	08002427 	.word	0x08002427
 800239c:	08002421 	.word	0x08002421
 80023a0:	08002421 	.word	0x08002421
 80023a4:	08002421 	.word	0x08002421
 80023a8:	08002421 	.word	0x08002421
 80023ac:	08002421 	.word	0x08002421
 80023b0:	08002421 	.word	0x08002421
 80023b4:	08002421 	.word	0x08002421
 80023b8:	08002415 	.word	0x08002415
 80023bc:	08002421 	.word	0x08002421
 80023c0:	08002421 	.word	0x08002421
 80023c4:	08002421 	.word	0x08002421
 80023c8:	08002421 	.word	0x08002421
 80023cc:	08002421 	.word	0x08002421
 80023d0:	08002421 	.word	0x08002421
 80023d4:	08002421 	.word	0x08002421
 80023d8:	08002409 	.word	0x08002409
 80023dc:	08002421 	.word	0x08002421
 80023e0:	08002421 	.word	0x08002421
 80023e4:	08002421 	.word	0x08002421
 80023e8:	08002421 	.word	0x08002421
 80023ec:	08002421 	.word	0x08002421
 80023f0:	08002421 	.word	0x08002421
 80023f4:	08002421 	.word	0x08002421
 80023f8:	080023fd 	.word	0x080023fd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d913      	bls.n	800242a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002406:	e010      	b.n	800242a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	2b07      	cmp	r3, #7
 800240c:	d90f      	bls.n	800242e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002412:	e00c      	b.n	800242e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	d90b      	bls.n	8002432 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800241e:	e008      	b.n	8002432 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	75fb      	strb	r3, [r7, #23]
        break;
 8002424:	e006      	b.n	8002434 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002426:	bf00      	nop
 8002428:	e004      	b.n	8002434 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800242a:	bf00      	nop
 800242c:	e002      	b.n	8002434 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800242e:	bf00      	nop
 8002430:	e000      	b.n	8002434 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002432:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10d      	bne.n	8002456 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 0118 	bic.w	r1, r3, #24
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	430a      	orrs	r2, r1
 8002454:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002456:	7dfb      	ldrb	r3, [r7, #23]
}
 8002458:	4618      	mov	r0, r3
 800245a:	371c      	adds	r7, #28
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff fcdc 	bl	8001e2c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e099      	b.n	80025b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a0:	e00f      	b.n	80024c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024a2:	f7ff fcc3 	bl	8001e2c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d908      	bls.n	80024c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2203      	movs	r2, #3
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e078      	b.n	80025b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e8      	bne.n	80024a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	4b38      	ldr	r3, [pc, #224]	@ (80025bc <HAL_DMA_Init+0x158>)
 80024dc:	4013      	ands	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	2b04      	cmp	r3, #4
 800251a:	d107      	bne.n	800252c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002524:	4313      	orrs	r3, r2
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f023 0307 	bic.w	r3, r3, #7
 8002542:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	4313      	orrs	r3, r2
 800254c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	2b04      	cmp	r3, #4
 8002554:	d117      	bne.n	8002586 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00e      	beq.n	8002586 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fb23 	bl	8002bb4 <DMA_CheckFifoParam>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2240      	movs	r2, #64	@ 0x40
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002582:	2301      	movs	r3, #1
 8002584:	e016      	b.n	80025b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fada 	bl	8002b48 <DMA_CalcBaseAndBitshift>
 8002594:	4603      	mov	r3, r0
 8002596:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259c:	223f      	movs	r2, #63	@ 0x3f
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	f010803f 	.word	0xf010803f

080025c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_DMA_Start_IT+0x26>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e048      	b.n	8002678 <HAL_DMA_Start_IT+0xb8>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d137      	bne.n	800266a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2202      	movs	r2, #2
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fa6c 	bl	8002aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002618:	223f      	movs	r2, #63	@ 0x3f
 800261a:	409a      	lsls	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0216 	orr.w	r2, r2, #22
 800262e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800263e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0208 	orr.w	r2, r2, #8
 8002656:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e005      	b.n	8002676 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002672:	2302      	movs	r3, #2
 8002674:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002676:	7dfb      	ldrb	r3, [r7, #23]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800268e:	f7ff fbcd 	bl	8001e2c <HAL_GetTick>
 8002692:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d008      	beq.n	80026b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2280      	movs	r2, #128	@ 0x80
 80026a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e052      	b.n	8002758 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0216 	bic.w	r2, r2, #22
 80026c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <HAL_DMA_Abort+0x62>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0208 	bic.w	r2, r2, #8
 80026f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002702:	e013      	b.n	800272c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002704:	f7ff fb92 	bl	8001e2c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b05      	cmp	r3, #5
 8002710:	d90c      	bls.n	800272c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2203      	movs	r2, #3
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e015      	b.n	8002758 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e4      	bne.n	8002704 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273e:	223f      	movs	r2, #63	@ 0x3f
 8002740:	409a      	lsls	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d004      	beq.n	800277e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2280      	movs	r2, #128	@ 0x80
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e00c      	b.n	8002798 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2205      	movs	r2, #5
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80027b0:	4b8e      	ldr	r3, [pc, #568]	@ (80029ec <HAL_DMA_IRQHandler+0x248>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a8e      	ldr	r2, [pc, #568]	@ (80029f0 <HAL_DMA_IRQHandler+0x24c>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0a9b      	lsrs	r3, r3, #10
 80027bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	2208      	movs	r2, #8
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01a      	beq.n	8002810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0204 	bic.w	r2, r2, #4
 80027f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	2208      	movs	r2, #8
 80027fe:	409a      	lsls	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002814:	2201      	movs	r2, #1
 8002816:	409a      	lsls	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d012      	beq.n	8002846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	2201      	movs	r2, #1
 8002834:	409a      	lsls	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283e:	f043 0202 	orr.w	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	2204      	movs	r2, #4
 800284c:	409a      	lsls	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002868:	2204      	movs	r2, #4
 800286a:	409a      	lsls	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	f043 0204 	orr.w	r2, r3, #4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002880:	2210      	movs	r2, #16
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d043      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d03c      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	2210      	movs	r2, #16
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d018      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d024      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	4798      	blx	r3
 80028d2:	e01f      	b.n	8002914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01b      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
 80028e4:	e016      	b.n	8002914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0208 	bic.w	r2, r2, #8
 8002902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002918:	2220      	movs	r2, #32
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 808f 	beq.w	8002a44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8087 	beq.w	8002a44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293a:	2220      	movs	r2, #32
 800293c:	409a      	lsls	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b05      	cmp	r3, #5
 800294c:	d136      	bne.n	80029bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0216 	bic.w	r2, r2, #22
 800295c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800296c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <HAL_DMA_IRQHandler+0x1da>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0208 	bic.w	r2, r2, #8
 800298c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002992:	223f      	movs	r2, #63	@ 0x3f
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d07e      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
        }
        return;
 80029ba:	e079      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01d      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10d      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d031      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
 80029e8:	e02c      	b.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
 80029ea:	bf00      	nop
 80029ec:	20000000 	.word	0x20000000
 80029f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d023      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
 8002a04:	e01e      	b.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10f      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0210 	bic.w	r2, r2, #16
 8002a22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d032      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d022      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d307      	bcc.n	8002a8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f2      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x2cc>
 8002a8a:	e000      	b.n	8002a8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
 8002aae:	e000      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ab0:	bf00      	nop
    }
  }
}
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ac6:	b2db      	uxtb	r3, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b40      	cmp	r3, #64	@ 0x40
 8002b18:	d108      	bne.n	8002b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b2a:	e007      	b.n	8002b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3b10      	subs	r3, #16
 8002b58:	4a13      	ldr	r2, [pc, #76]	@ (8002ba8 <DMA_CalcBaseAndBitshift+0x60>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b62:	4a12      	ldr	r2, [pc, #72]	@ (8002bac <DMA_CalcBaseAndBitshift+0x64>)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d908      	bls.n	8002b88 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	1d1a      	adds	r2, r3, #4
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b86:	e006      	b.n	8002b96 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b08      	ldr	r3, [pc, #32]	@ (8002bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	aaaaaaab 	.word	0xaaaaaaab
 8002bac:	0801e0cc 	.word	0x0801e0cc
 8002bb0:	fffffc00 	.word	0xfffffc00

08002bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11f      	bne.n	8002c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d856      	bhi.n	8002c82 <DMA_CheckFifoParam+0xce>
 8002bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bdc <DMA_CheckFifoParam+0x28>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bff 	.word	0x08002bff
 8002be4:	08002bed 	.word	0x08002bed
 8002be8:	08002c83 	.word	0x08002c83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d046      	beq.n	8002c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e043      	b.n	8002c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c06:	d140      	bne.n	8002c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0c:	e03d      	b.n	8002c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c16:	d121      	bne.n	8002c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d837      	bhi.n	8002c8e <DMA_CheckFifoParam+0xda>
 8002c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <DMA_CheckFifoParam+0x70>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c3b 	.word	0x08002c3b
 8002c2c:	08002c35 	.word	0x08002c35
 8002c30:	08002c4d 	.word	0x08002c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e030      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d025      	beq.n	8002c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4a:	e022      	b.n	8002c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c54:	d11f      	bne.n	8002c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c5a:	e01c      	b.n	8002c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d903      	bls.n	8002c6a <DMA_CheckFifoParam+0xb6>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d003      	beq.n	8002c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c68:	e018      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6e:	e015      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c80:	e00b      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c82:	bf00      	nop
 8002c84:	e00a      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c86:	bf00      	nop
 8002c88:	e008      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e006      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e004      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c92:	bf00      	nop
 8002c94:	e002      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e086      	b.n	8002dcc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f007 fbf7 	bl	800a4c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd4 <HAL_ETH_Init+0x128>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	4a3e      	ldr	r2, [pc, #248]	@ (8002dd4 <HAL_ETH_Init+0x128>)
 8002cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd4 <HAL_ETH_Init+0x128>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002cee:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd8 <HAL_ETH_Init+0x12c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a39      	ldr	r2, [pc, #228]	@ (8002dd8 <HAL_ETH_Init+0x12c>)
 8002cf4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002cf8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002cfa:	4b37      	ldr	r3, [pc, #220]	@ (8002dd8 <HAL_ETH_Init+0x12c>)
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4935      	ldr	r1, [pc, #212]	@ (8002dd8 <HAL_ETH_Init+0x12c>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002d08:	4b33      	ldr	r3, [pc, #204]	@ (8002dd8 <HAL_ETH_Init+0x12c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d24:	f7ff f882 	bl	8001e2c <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d2a:	e011      	b.n	8002d50 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d2c:	f7ff f87e 	bl	8001e2c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d3a:	d909      	bls.n	8002d50 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	22e0      	movs	r2, #224	@ 0xe0
 8002d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e03d      	b.n	8002dcc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e4      	bne.n	8002d2c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 ff5c 	bl	8003c20 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f001 f807 	bl	8003d7c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f001 f85d 	bl	8003e2e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 ffc5 	bl	8003d0c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002d90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <HAL_ETH_Init+0x130>)
 8002da0:	430b      	orrs	r3, r1
 8002da2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002db6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40013800 	.word	0x40013800
 8002ddc:	00020060 	.word	0x00020060

08002de0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d15f      	bne.n	8002eb2 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2204      	movs	r2, #4
 8002e04:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f9f6 	bl	80031f8 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e14:	2001      	movs	r0, #1
 8002e16:	f7ff f815 	bl	8001e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e38:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e50:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fd80 	bl	8003958 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0208 	orr.w	r2, r2, #8
 8002e66:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e70:	2001      	movs	r0, #1
 8002e72:	f7fe ffe7 	bl	8001e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0204 	orr.w	r2, r2, #4
 8002e8c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e96:	69d9      	ldr	r1, [r3, #28]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <HAL_ETH_Start_IT+0xdc>)
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ea4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2240      	movs	r2, #64	@ 0x40
 8002eaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
  }
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	0001a0c1 	.word	0x0001a0c1

08002ec0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ece:	2b40      	cmp	r3, #64	@ 0x40
 8002ed0:	d16e      	bne.n	8002fb0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ee2:	69d9      	ldr	r1, [r3, #28]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b34      	ldr	r3, [pc, #208]	@ (8002fbc <HAL_ETH_Stop_IT+0xfc>)
 8002eea:	400b      	ands	r3, r1
 8002eec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ef0:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f08:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	f023 0302 	bic.w	r3, r3, #2
 8002f1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f20:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0204 	bic.w	r2, r2, #4
 8002f30:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f7fe ff82 	bl	8001e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fd05 	bl	8003958 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0208 	bic.w	r2, r2, #8
 8002f5c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f66:	2001      	movs	r0, #1
 8002f68:	f7fe ff6c 	bl	8001e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	e00e      	b.n	8002f98 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	3212      	adds	r2, #18
 8002f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f84:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	3301      	adds	r3, #1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d9ed      	bls.n	8002f7a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	fffe5f3e 	.word	0xfffe5f3e

08002fc0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e045      	b.n	8003070 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fea:	2b40      	cmp	r3, #64	@ 0x40
 8002fec:	d13f      	bne.n	800306e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	6839      	ldr	r1, [r7, #0]
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 ff86 	bl	8003f0c <ETH_Prepare_Tx_Descriptors>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300c:	f043 0202 	orr.w	r2, r3, #2
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e02a      	b.n	8003070 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800301a:	f3bf 8f4f 	dsb	sy
}
 800301e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	629a      	str	r2, [r3, #40]	@ 0x28
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302e:	2b03      	cmp	r3, #3
 8003030:	d904      	bls.n	800303c <HAL_ETH_Transmit_IT+0x7c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003036:	1f1a      	subs	r2, r3, #4
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003056:	461a      	mov	r2, r3
 8003058:	2304      	movs	r3, #4
 800305a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003064:	461a      	mov	r2, r3
 8003066:	2300      	movs	r3, #0
 8003068:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e000      	b.n	8003070 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
  }
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0a4      	b.n	80031ee <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030aa:	2b40      	cmp	r3, #64	@ 0x40
 80030ac:	d001      	beq.n	80030b2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e09d      	b.n	80031ee <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	3212      	adds	r2, #18
 80030be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030c8:	f1c3 0304 	rsb	r3, r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80030ce:	e066      	b.n	800319e <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	699a      	ldr	r2, [r3, #24]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d103      	bne.n	8003100 <HAL_ETH_ReadData+0x88>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d03c      	beq.n	800317a <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003122:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003138:	2301      	movs	r3, #1
 800313a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003154:	461a      	mov	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	b29b      	uxth	r3, r3
 800315a:	f007 fb87 	bl	800a86c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	441a      	add	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2200      	movs	r2, #0
 8003178:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3301      	adds	r3, #1
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2b03      	cmp	r3, #3
 8003184:	d902      	bls.n	800318c <HAL_ETH_ReadData+0x114>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3b04      	subs	r3, #4
 800318a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	3212      	adds	r2, #18
 8003192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003196:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3301      	adds	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db06      	blt.n	80031b4 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d202      	bcs.n	80031b4 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d08d      	beq.n	80030d0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	441a      	add	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f815 	bl	80031f8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d108      	bne.n	80031ec <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003204:	2301      	movs	r3, #1
 8003206:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800320c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	3212      	adds	r2, #18
 8003214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003218:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003220:	e042      	b.n	80032a8 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d112      	bne.n	8003250 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800322a:	f107 0308 	add.w	r3, r7, #8
 800322e:	4618      	mov	r0, r3
 8003230:	f007 faec 	bl	800a80c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	74fb      	strb	r3, [r7, #19]
 800323e:	e007      	b.n	8003250 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	461a      	mov	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	461a      	mov	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d028      	beq.n	80032a8 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	4b26      	ldr	r3, [pc, #152]	@ (80032fc <ETH_UpdateDescriptor+0x104>)
 8003264:	4313      	orrs	r3, r2
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	6053      	str	r3, [r2, #4]
 800326a:	e005      	b.n	8003278 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	3301      	adds	r3, #1
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	2b03      	cmp	r3, #3
 800328e:	d902      	bls.n	8003296 <ETH_UpdateDescriptor+0x9e>
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	3b04      	subs	r3, #4
 8003294:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	3212      	adds	r2, #18
 800329c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a0:	617b      	str	r3, [r7, #20]
      desccount--;
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <ETH_UpdateDescriptor+0xbc>
 80032ae:	7cfb      	ldrb	r3, [r7, #19]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1b6      	bne.n	8003222 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d01a      	beq.n	80032f4 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3303      	adds	r3, #3
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80032c8:	f3bf 8f5f 	dmb	sy
}
 80032cc:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6919      	ldr	r1, [r3, #16]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	18ca      	adds	r2, r1, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e6:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80032f4:	bf00      	nop
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	80004000 	.word	0x80004000

08003300 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3318      	adds	r3, #24
 800330c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800331e:	e047      	b.n	80033b0 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8003320:	2301      	movs	r3, #1
 8003322:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3b01      	subs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	3304      	adds	r3, #4
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	3301      	adds	r3, #1
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d902      	bls.n	800334c <HAL_ETH_ReleaseTxPacket+0x4c>
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	3b04      	subs	r3, #4
 800334a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003350:	7bbb      	ldrb	r3, [r7, #14]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d02c      	beq.n	80033b0 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68d9      	ldr	r1, [r3, #12]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db1f      	blt.n	80033ac <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	3304      	adds	r3, #4
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4618      	mov	r0, r3
 800337a:	f007 fab9 	bl	800a8f0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	3304      	adds	r3, #4
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	2200      	movs	r2, #0
 800338a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	3301      	adds	r3, #1
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b03      	cmp	r3, #3
 8003396:	d902      	bls.n	800339e <HAL_ETH_ReleaseTxPacket+0x9e>
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	3b04      	subs	r3, #4
 800339c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80033aa:	e001      	b.n	80033b0 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_ETH_ReleaseTxPacket+0xbc>
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1b1      	bne.n	8003320 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80033f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003520 <HAL_ETH_IRQHandler+0x158>)
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <HAL_ETH_IRQHandler+0x56>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003412:	461a      	mov	r2, r3
 8003414:	4b43      	ldr	r3, [pc, #268]	@ (8003524 <HAL_ETH_IRQHandler+0x15c>)
 8003416:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f006 fd93 	bl	8009f44 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00f      	beq.n	8003448 <HAL_ETH_IRQHandler+0x80>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800343a:	461a      	mov	r2, r3
 800343c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003440:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f006 fd8e 	bl	8009f64 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d042      	beq.n	80034d8 <HAL_ETH_IRQHandler+0x110>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d03d      	beq.n	80034d8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003462:	f043 0208 	orr.w	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01a      	beq.n	80034ac <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <HAL_ETH_IRQHandler+0x160>)
 8003482:	4013      	ands	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800349c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034a0:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	22e0      	movs	r2, #224	@ 0xe0
 80034a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80034aa:	e012      	b.n	80034d2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	f248 6380 	movw	r3, #34432	@ 0x8680
 80034ba:	4013      	ands	r3, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ca:	461a      	mov	r2, r3
 80034cc:	f248 6380 	movw	r3, #34432	@ 0x8680
 80034d0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f006 fd56 	bl	8009f84 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00e      	beq.n	8003500 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f81a 	bl	800352c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800350a:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <HAL_ETH_IRQHandler+0x158>)
 800350c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003510:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f814 	bl	8003540 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003518:	bf00      	nop
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40013c00 	.word	0x40013c00
 8003524:	00010040 	.word	0x00010040
 8003528:	007e2000 	.word	0x007e2000

0800352c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f003 031c 	and.w	r3, r3, #28
 8003570:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	02db      	lsls	r3, r3, #11
 8003576:	b29b      	uxth	r3, r3
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	019b      	lsls	r3, r3, #6
 8003582:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f023 0302 	bic.w	r3, r3, #2
 8003592:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80035a4:	f7fe fc42 	bl	8001e2c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80035aa:	e00d      	b.n	80035c8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80035ac:	f7fe fc3e 	bl	8001e2c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ba:	d301      	bcc.n	80035c0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e010      	b.n	80035e2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ec      	bne.n	80035ac <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 031c 	and.w	r3, r3, #28
 8003606:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	02db      	lsls	r3, r3, #11
 800360c:	b29b      	uxth	r3, r3
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	019b      	lsls	r3, r3, #6
 8003618:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003644:	f7fe fbf2 	bl	8001e2c <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800364a:	e00d      	b.n	8003668 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800364c:	f7fe fbee 	bl	8001e2c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800365a:	d301      	bcc.n	8003660 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e009      	b.n	8003674 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1ec      	bne.n	800364c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0e6      	b.n	800385e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	bf14      	ite	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	2300      	moveq	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf0c      	ite	eq
 800374e:	2301      	moveq	r3, #1
 8003750:	2300      	movne	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf14      	ite	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	2300      	moveq	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	b29a      	uxth	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf14      	ite	ne
 800384e:	2301      	movne	r3, #1
 8003850:	2300      	moveq	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e00b      	b.n	8003896 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003884:	2b10      	cmp	r3, #16
 8003886:	d105      	bne.n	8003894 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f88a 	bl	80039a4 <ETH_SetMACConfig>

    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 031c 	bic.w	r3, r3, #28
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80038b8:	f003 fbb6 	bl	8007028 <HAL_RCC_GetHCLKFreq>
 80038bc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4a14      	ldr	r2, [pc, #80]	@ (8003914 <HAL_ETH_SetMDIOClockRange+0x74>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d804      	bhi.n	80038d0 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f043 0308 	orr.w	r3, r3, #8
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e019      	b.n	8003904 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4a11      	ldr	r2, [pc, #68]	@ (8003918 <HAL_ETH_SetMDIOClockRange+0x78>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d204      	bcs.n	80038e2 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f043 030c 	orr.w	r3, r3, #12
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e010      	b.n	8003904 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4a0d      	ldr	r2, [pc, #52]	@ (800391c <HAL_ETH_SetMDIOClockRange+0x7c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d90c      	bls.n	8003904 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003920 <HAL_ETH_SetMDIOClockRange+0x80>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d804      	bhi.n	80038fc <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f043 0304 	orr.w	r3, r3, #4
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e003      	b.n	8003904 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f043 0310 	orr.w	r3, r3, #16
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	611a      	str	r2, [r3, #16]
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	02160ebf 	.word	0x02160ebf
 8003918:	03938700 	.word	0x03938700
 800391c:	05f5e0ff 	.word	0x05f5e0ff
 8003920:	08f0d17f 	.word	0x08f0d17f

08003924 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6812      	ldr	r2, [r2, #0]
 8003972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003976:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800397a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003988:	2001      	movs	r0, #1
 800398a:	f7fe fa5b 	bl	8001e44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003998:	6193      	str	r3, [r2, #24]
}
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4b53      	ldr	r3, [pc, #332]	@ (8003b08 <ETH_SetMACConfig+0x164>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	7b9b      	ldrb	r3, [r3, #14]
 80039c2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	7c12      	ldrb	r2, [r2, #16]
 80039c8:	2a00      	cmp	r2, #0
 80039ca:	d102      	bne.n	80039d2 <ETH_SetMACConfig+0x2e>
 80039cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80039d0:	e000      	b.n	80039d4 <ETH_SetMACConfig+0x30>
 80039d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80039d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	7c52      	ldrb	r2, [r2, #17]
 80039da:	2a00      	cmp	r2, #0
 80039dc:	d102      	bne.n	80039e4 <ETH_SetMACConfig+0x40>
 80039de:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80039e2:	e000      	b.n	80039e6 <ETH_SetMACConfig+0x42>
 80039e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80039e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80039ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	7fdb      	ldrb	r3, [r3, #31]
 80039f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80039f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80039fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	7f92      	ldrb	r2, [r2, #30]
 8003a00:	2a00      	cmp	r2, #0
 8003a02:	d102      	bne.n	8003a0a <ETH_SetMACConfig+0x66>
 8003a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a08:	e000      	b.n	8003a0c <ETH_SetMACConfig+0x68>
 8003a0a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003a0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	7f1b      	ldrb	r3, [r3, #28]
 8003a12:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003a14:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003a1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	791b      	ldrb	r3, [r3, #4]
 8003a20:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003a22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003a2a:	2a00      	cmp	r2, #0
 8003a2c:	d102      	bne.n	8003a34 <ETH_SetMACConfig+0x90>
 8003a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a32:	e000      	b.n	8003a36 <ETH_SetMACConfig+0x92>
 8003a34:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003a36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	7bdb      	ldrb	r3, [r3, #15]
 8003a3c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003a3e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003a44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a4c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a66:	2001      	movs	r0, #1
 8003a68:	f7fe f9ec 	bl	8001e44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003a82:	4013      	ands	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003a92:	2a00      	cmp	r2, #0
 8003a94:	d101      	bne.n	8003a9a <ETH_SetMACConfig+0xf6>
 8003a96:	2280      	movs	r2, #128	@ 0x80
 8003a98:	e000      	b.n	8003a9c <ETH_SetMACConfig+0xf8>
 8003a9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a9c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003aa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003aaa:	2a01      	cmp	r2, #1
 8003aac:	d101      	bne.n	8003ab2 <ETH_SetMACConfig+0x10e>
 8003aae:	2208      	movs	r2, #8
 8003ab0:	e000      	b.n	8003ab4 <ETH_SetMACConfig+0x110>
 8003ab2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003ab4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003abc:	2a01      	cmp	r2, #1
 8003abe:	d101      	bne.n	8003ac4 <ETH_SetMACConfig+0x120>
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	e000      	b.n	8003ac6 <ETH_SetMACConfig+0x122>
 8003ac4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003ac6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003ace:	2a01      	cmp	r2, #1
 8003ad0:	d101      	bne.n	8003ad6 <ETH_SetMACConfig+0x132>
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	e000      	b.n	8003ad8 <ETH_SetMACConfig+0x134>
 8003ad6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003af0:	2001      	movs	r0, #1
 8003af2:	f7fe f9a7 	bl	8001e44 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	619a      	str	r2, [r3, #24]
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	fd20810f 	.word	0xfd20810f

08003b0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4b3d      	ldr	r3, [pc, #244]	@ (8003c1c <ETH_SetDMAConfig+0x110>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	7b1b      	ldrb	r3, [r3, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <ETH_SetDMAConfig+0x2c>
 8003b32:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b36:	e000      	b.n	8003b3a <ETH_SetDMAConfig+0x2e>
 8003b38:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	7b5b      	ldrb	r3, [r3, #13]
 8003b3e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003b40:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	7f52      	ldrb	r2, [r2, #29]
 8003b46:	2a00      	cmp	r2, #0
 8003b48:	d102      	bne.n	8003b50 <ETH_SetDMAConfig+0x44>
 8003b4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b4e:	e000      	b.n	8003b52 <ETH_SetDMAConfig+0x46>
 8003b50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003b52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	7b9b      	ldrb	r3, [r3, #14]
 8003b58:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003b5a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003b60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	7f1b      	ldrb	r3, [r3, #28]
 8003b66:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003b68:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	7f9b      	ldrb	r3, [r3, #30]
 8003b6e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003b70:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003b76:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b7e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003b80:	4313      	orrs	r3, r2
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b90:	461a      	mov	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	f7fe f94e 	bl	8001e44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	791b      	ldrb	r3, [r3, #4]
 8003bba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003bc0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003bc6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003bcc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bd4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003bd6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bdc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003bde:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003be4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bf2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c00:	2001      	movs	r0, #1
 8003c02:	f7fe f91f 	bl	8001e44 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6013      	str	r3, [r2, #0]
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	f8de3f23 	.word	0xf8de3f23

08003c20 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b0a6      	sub	sp, #152	@ 0x98
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003c34:	2300      	movs	r3, #0
 8003c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003c62:	2300      	movs	r3, #0
 8003c64:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003c88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003c8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003c9a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fe7f 	bl	80039a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003caa:	2301      	movs	r3, #1
 8003cac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003cd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cda:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003cdc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ce0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ce6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003cf6:	f107 0308 	add.w	r3, r7, #8
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff ff05 	bl	8003b0c <ETH_SetDMAConfig>
}
 8003d02:	bf00      	nop
 8003d04:	3798      	adds	r7, #152	@ 0x98
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3305      	adds	r3, #5
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	3204      	adds	r2, #4
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	4b11      	ldr	r3, [pc, #68]	@ (8003d74 <ETH_MACAddressConfig+0x68>)
 8003d2e:	4413      	add	r3, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3303      	adds	r3, #3
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	061a      	lsls	r2, r3, #24
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3302      	adds	r3, #2
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	041b      	lsls	r3, r3, #16
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	4313      	orrs	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	7812      	ldrb	r2, [r2, #0]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <ETH_MACAddressConfig+0x6c>)
 8003d5e:	4413      	add	r3, r2
 8003d60:	461a      	mov	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	6013      	str	r3, [r2, #0]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40028040 	.word	0x40028040
 8003d78:	40028044 	.word	0x40028044

08003d7c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	e03e      	b.n	8003e08 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68d9      	ldr	r1, [r3, #12]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	440b      	add	r3, r1
 8003d9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2200      	movs	r2, #0
 8003db2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	3206      	adds	r2, #6
 8003dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d80c      	bhi.n	8003dec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68d9      	ldr	r1, [r3, #12]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	440b      	add	r3, r1
 8003de4:	461a      	mov	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	e004      	b.n	8003df6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	461a      	mov	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3301      	adds	r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d9bd      	bls.n	8003d8a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e20:	611a      	str	r2, [r3, #16]
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	e048      	b.n	8003ece <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6919      	ldr	r1, [r3, #16]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	440b      	add	r3, r1
 8003e4c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2200      	movs	r2, #0
 8003e58:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2200      	movs	r2, #0
 8003e64:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003e78:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	3212      	adds	r2, #18
 8003e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d80c      	bhi.n	8003ebe <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6919      	ldr	r1, [r3, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	e004      	b.n	8003ec8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d9b3      	bls.n	8003e3c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003efe:	60da      	str	r2, [r3, #12]
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b091      	sub	sp, #68	@ 0x44
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	3318      	adds	r3, #24
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f36:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f4e:	d007      	beq.n	8003f60 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f54:	3304      	adds	r3, #4
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003f60:	2302      	movs	r3, #2
 8003f62:	e111      	b.n	8004188 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f66:	3301      	adds	r3, #1
 8003f68:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f72:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	4b86      	ldr	r3, [pc, #536]	@ (8004194 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f7e:	6852      	ldr	r2, [r2, #4]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003fe6:	e082      	b.n	80040ee <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d006      	beq.n	8004008 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e005      	b.n	8004014 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004016:	3301      	adds	r3, #1
 8004018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800401a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800401c:	2b03      	cmp	r3, #3
 800401e:	d902      	bls.n	8004026 <ETH_Prepare_Tx_Descriptors+0x11a>
 8004020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004022:	3b04      	subs	r3, #4
 8004024:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800402a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800402e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004038:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800403c:	d007      	beq.n	800404e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800403e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004042:	3304      	adds	r3, #4
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d029      	beq.n	80040a2 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800405c:	2300      	movs	r3, #0
 800405e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004060:	e019      	b.n	8004096 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004062:	f3bf 8f5f 	dmb	sy
}
 8004066:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004072:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004076:	3301      	adds	r3, #1
 8004078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800407a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800407c:	2b03      	cmp	r3, #3
 800407e:	d902      	bls.n	8004086 <ETH_Prepare_Tx_Descriptors+0x17a>
 8004080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004082:	3b04      	subs	r3, #4
 8004084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800408a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800408e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004092:	3301      	adds	r3, #1
 8004094:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004096:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409a:	429a      	cmp	r2, r3
 800409c:	d3e1      	bcc.n	8004062 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800409e:	2302      	movs	r3, #2
 80040a0:	e072      	b.n	8004188 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80040aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ac:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80040ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b0:	3301      	adds	r3, #1
 80040b2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80040b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80040ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80040c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	4b32      	ldr	r3, [pc, #200]	@ (8004194 <ETH_Prepare_Tx_Descriptors+0x288>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ce:	6852      	ldr	r2, [r2, #4]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80040d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d8:	3301      	adds	r3, #1
 80040da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80040dc:	f3bf 8f5f 	dmb	sy
}
 80040e0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80040e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ec:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80040ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f47f af78 	bne.w	8003fe8 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e005      	b.n	8004118 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004116:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004122:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	6a3a      	ldr	r2, [r7, #32]
 8004128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800412c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800412e:	f3bf 8f5f 	dmb	sy
}
 8004132:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004144:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004148:	3304      	adds	r3, #4
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004154:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004156:	f3ef 8310 	mrs	r3, PRIMASK
 800415a:	613b      	str	r3, [r7, #16]
  return(result);
 800415c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	2301      	movs	r3, #1
 8004162:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f383 8810 	msr	PRIMASK, r3
}
 800416a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800416c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004172:	4413      	add	r3, r2
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	629a      	str	r2, [r3, #40]	@ 0x28
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f383 8810 	msr	PRIMASK, r3
}
 8004184:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3744      	adds	r7, #68	@ 0x44
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	ffffe000 	.word	0xffffe000

08004198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	@ 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	e175      	b.n	80044a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041b8:	2201      	movs	r2, #1
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	f040 8164 	bne.w	800449e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d005      	beq.n	80041ee <HAL_GPIO_Init+0x56>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d130      	bne.n	8004250 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	2203      	movs	r2, #3
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004224:	2201      	movs	r2, #1
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 0201 	and.w	r2, r3, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	2b03      	cmp	r3, #3
 800425a:	d017      	beq.n	800428c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	2203      	movs	r2, #3
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d123      	bne.n	80042e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	08da      	lsrs	r2, r3, #3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3208      	adds	r2, #8
 80042a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	220f      	movs	r2, #15
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	08da      	lsrs	r2, r3, #3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3208      	adds	r2, #8
 80042da:	69b9      	ldr	r1, [r7, #24]
 80042dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0203 	and.w	r2, r3, #3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80be 	beq.w	800449e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004322:	4b66      	ldr	r3, [pc, #408]	@ (80044bc <HAL_GPIO_Init+0x324>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	4a65      	ldr	r2, [pc, #404]	@ (80044bc <HAL_GPIO_Init+0x324>)
 8004328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800432c:	6453      	str	r3, [r2, #68]	@ 0x44
 800432e:	4b63      	ldr	r3, [pc, #396]	@ (80044bc <HAL_GPIO_Init+0x324>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800433a:	4a61      	ldr	r2, [pc, #388]	@ (80044c0 <HAL_GPIO_Init+0x328>)
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	089b      	lsrs	r3, r3, #2
 8004340:	3302      	adds	r3, #2
 8004342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	220f      	movs	r2, #15
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a58      	ldr	r2, [pc, #352]	@ (80044c4 <HAL_GPIO_Init+0x32c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d037      	beq.n	80043d6 <HAL_GPIO_Init+0x23e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a57      	ldr	r2, [pc, #348]	@ (80044c8 <HAL_GPIO_Init+0x330>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d031      	beq.n	80043d2 <HAL_GPIO_Init+0x23a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a56      	ldr	r2, [pc, #344]	@ (80044cc <HAL_GPIO_Init+0x334>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d02b      	beq.n	80043ce <HAL_GPIO_Init+0x236>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a55      	ldr	r2, [pc, #340]	@ (80044d0 <HAL_GPIO_Init+0x338>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d025      	beq.n	80043ca <HAL_GPIO_Init+0x232>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a54      	ldr	r2, [pc, #336]	@ (80044d4 <HAL_GPIO_Init+0x33c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01f      	beq.n	80043c6 <HAL_GPIO_Init+0x22e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a53      	ldr	r2, [pc, #332]	@ (80044d8 <HAL_GPIO_Init+0x340>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d019      	beq.n	80043c2 <HAL_GPIO_Init+0x22a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a52      	ldr	r2, [pc, #328]	@ (80044dc <HAL_GPIO_Init+0x344>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <HAL_GPIO_Init+0x226>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a51      	ldr	r2, [pc, #324]	@ (80044e0 <HAL_GPIO_Init+0x348>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00d      	beq.n	80043ba <HAL_GPIO_Init+0x222>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a50      	ldr	r2, [pc, #320]	@ (80044e4 <HAL_GPIO_Init+0x34c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <HAL_GPIO_Init+0x21e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a4f      	ldr	r2, [pc, #316]	@ (80044e8 <HAL_GPIO_Init+0x350>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d101      	bne.n	80043b2 <HAL_GPIO_Init+0x21a>
 80043ae:	2309      	movs	r3, #9
 80043b0:	e012      	b.n	80043d8 <HAL_GPIO_Init+0x240>
 80043b2:	230a      	movs	r3, #10
 80043b4:	e010      	b.n	80043d8 <HAL_GPIO_Init+0x240>
 80043b6:	2308      	movs	r3, #8
 80043b8:	e00e      	b.n	80043d8 <HAL_GPIO_Init+0x240>
 80043ba:	2307      	movs	r3, #7
 80043bc:	e00c      	b.n	80043d8 <HAL_GPIO_Init+0x240>
 80043be:	2306      	movs	r3, #6
 80043c0:	e00a      	b.n	80043d8 <HAL_GPIO_Init+0x240>
 80043c2:	2305      	movs	r3, #5
 80043c4:	e008      	b.n	80043d8 <HAL_GPIO_Init+0x240>
 80043c6:	2304      	movs	r3, #4
 80043c8:	e006      	b.n	80043d8 <HAL_GPIO_Init+0x240>
 80043ca:	2303      	movs	r3, #3
 80043cc:	e004      	b.n	80043d8 <HAL_GPIO_Init+0x240>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e002      	b.n	80043d8 <HAL_GPIO_Init+0x240>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <HAL_GPIO_Init+0x240>
 80043d6:	2300      	movs	r3, #0
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	f002 0203 	and.w	r2, r2, #3
 80043de:	0092      	lsls	r2, r2, #2
 80043e0:	4093      	lsls	r3, r2
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80043e8:	4935      	ldr	r1, [pc, #212]	@ (80044c0 <HAL_GPIO_Init+0x328>)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	089b      	lsrs	r3, r3, #2
 80043ee:	3302      	adds	r3, #2
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043f6:	4b3d      	ldr	r3, [pc, #244]	@ (80044ec <HAL_GPIO_Init+0x354>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	43db      	mvns	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4013      	ands	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800441a:	4a34      	ldr	r2, [pc, #208]	@ (80044ec <HAL_GPIO_Init+0x354>)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004420:	4b32      	ldr	r3, [pc, #200]	@ (80044ec <HAL_GPIO_Init+0x354>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004444:	4a29      	ldr	r2, [pc, #164]	@ (80044ec <HAL_GPIO_Init+0x354>)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800444a:	4b28      	ldr	r3, [pc, #160]	@ (80044ec <HAL_GPIO_Init+0x354>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	43db      	mvns	r3, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4013      	ands	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800446e:	4a1f      	ldr	r2, [pc, #124]	@ (80044ec <HAL_GPIO_Init+0x354>)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004474:	4b1d      	ldr	r3, [pc, #116]	@ (80044ec <HAL_GPIO_Init+0x354>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	43db      	mvns	r3, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4013      	ands	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004498:	4a14      	ldr	r2, [pc, #80]	@ (80044ec <HAL_GPIO_Init+0x354>)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	3301      	adds	r3, #1
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b0f      	cmp	r3, #15
 80044a8:	f67f ae86 	bls.w	80041b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	3724      	adds	r7, #36	@ 0x24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40023800 	.word	0x40023800
 80044c0:	40013800 	.word	0x40013800
 80044c4:	40020000 	.word	0x40020000
 80044c8:	40020400 	.word	0x40020400
 80044cc:	40020800 	.word	0x40020800
 80044d0:	40020c00 	.word	0x40020c00
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40021400 	.word	0x40021400
 80044dc:	40021800 	.word	0x40021800
 80044e0:	40021c00 	.word	0x40021c00
 80044e4:	40022000 	.word	0x40022000
 80044e8:	40022400 	.word	0x40022400
 80044ec:	40013c00 	.word	0x40013c00

080044f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	807b      	strh	r3, [r7, #2]
 80044fc:	4613      	mov	r3, r2
 80044fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004500:	787b      	ldrb	r3, [r7, #1]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004506:	887a      	ldrh	r2, [r7, #2]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800450c:	e003      	b.n	8004516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800450e:	887b      	ldrh	r3, [r7, #2]
 8004510:	041a      	lsls	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	619a      	str	r2, [r3, #24]
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	460b      	mov	r3, r1
 800452c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004534:	887a      	ldrh	r2, [r7, #2]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4013      	ands	r3, r2
 800453a:	041a      	lsls	r2, r3, #16
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	43d9      	mvns	r1, r3
 8004540:	887b      	ldrh	r3, [r7, #2]
 8004542:	400b      	ands	r3, r1
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	619a      	str	r2, [r3, #24]
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e08b      	b.n	8004682 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc fdca 	bl	8001118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2224      	movs	r2, #36	@ 0x24
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80045a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	e006      	b.n	80045e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80045de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d108      	bne.n	80045fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	e007      	b.n	800460a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6859      	ldr	r1, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b1d      	ldr	r3, [pc, #116]	@ (800468c <HAL_I2C_Init+0x134>)
 8004616:	430b      	orrs	r3, r1
 8004618:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004628:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69d9      	ldr	r1, [r3, #28]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1a      	ldr	r2, [r3, #32]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	02008000 	.word	0x02008000

08004690 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	@ 0x28
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	461a      	mov	r2, r3
 800469c:	460b      	mov	r3, r1
 800469e:	817b      	strh	r3, [r7, #10]
 80046a0:	4613      	mov	r3, r2
 80046a2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	f040 80ef 	bne.w	8004894 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c4:	d101      	bne.n	80046ca <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
 80046c8:	e0e5      	b.n	8004896 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_I2C_Master_Transmit_DMA+0x48>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e0de      	b.n	8004896 <HAL_I2C_Master_Transmit_DMA+0x206>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2221      	movs	r2, #33	@ 0x21
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2210      	movs	r2, #16
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	893a      	ldrh	r2, [r7, #8]
 8004700:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a66      	ldr	r2, [pc, #408]	@ (80048a0 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8004706:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a66      	ldr	r2, [pc, #408]	@ (80048a4 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800470c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004712:	b29b      	uxth	r3, r3
 8004714:	2bff      	cmp	r3, #255	@ 0xff
 8004716:	d906      	bls.n	8004726 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	22ff      	movs	r2, #255	@ 0xff
 800471c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800471e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	e007      	b.n	8004736 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004730:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004734:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01a      	beq.n	8004774 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004758:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	d074      	beq.n	8004866 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004780:	2b00      	cmp	r3, #0
 8004782:	d022      	beq.n	80047ca <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	4a47      	ldr	r2, [pc, #284]	@ (80048a8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800478a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004790:	4a46      	ldr	r2, [pc, #280]	@ (80048ac <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8004792:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004798:	2200      	movs	r2, #0
 800479a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a0:	2200      	movs	r2, #0
 80047a2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80047b4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80047ba:	f7fd ff01 	bl	80025c0 <HAL_DMA_Start_IT>
 80047be:	4603      	mov	r3, r0
 80047c0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d13a      	bne.n	800483e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80047c8:	e013      	b.n	80047f2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e051      	b.n	8004896 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	8979      	ldrh	r1, [r7, #10]
 80047fe:	4b2c      	ldr	r3, [pc, #176]	@ (80048b0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f001 fc83 	bl	8006110 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004824:	2110      	movs	r1, #16
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f001 fca4 	bl	8006174 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e028      	b.n	8004890 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	f043 0210 	orr.w	r2, r3, #16
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e017      	b.n	8004896 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a12      	ldr	r2, [pc, #72]	@ (80048b4 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800486a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	8979      	ldrh	r1, [r7, #10]
 8004872:	4b0f      	ldr	r3, [pc, #60]	@ (80048b0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f001 fc48 	bl	8006110 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004888:	2101      	movs	r1, #1
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f001 fc72 	bl	8006174 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	ffff0000 	.word	0xffff0000
 80048a4:	08004f59 	.word	0x08004f59
 80048a8:	08005f83 	.word	0x08005f83
 80048ac:	0800605f 	.word	0x0800605f
 80048b0:	80002000 	.word	0x80002000
 80048b4:	08004acd 	.word	0x08004acd

080048b8 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	f040 809b 	bne.w	8004a0a <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_I2C_Slave_Receive_DMA+0x28>
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d105      	bne.n	80048ec <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e08f      	b.n	8004a0c <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_I2C_Slave_Receive_DMA+0x42>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e088      	b.n	8004a0c <HAL_I2C_Slave_Receive_DMA+0x154>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2222      	movs	r2, #34	@ 0x22
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a38      	ldr	r2, [pc, #224]	@ (8004a14 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8004932:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a38      	ldr	r2, [pc, #224]	@ (8004a18 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8004938:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d020      	beq.n	8004984 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004946:	4a35      	ldr	r2, [pc, #212]	@ (8004a1c <HAL_I2C_Slave_Receive_DMA+0x164>)
 8004948:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494e:	4a34      	ldr	r2, [pc, #208]	@ (8004a20 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8004950:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004956:	2200      	movs	r2, #0
 8004958:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495e:	2200      	movs	r2, #0
 8004960:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3324      	adds	r3, #36	@ 0x24
 800496c:	4619      	mov	r1, r3
 800496e:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004974:	f7fd fe24 	bl	80025c0 <HAL_DMA_Start_IT>
 8004978:	4603      	mov	r3, r0
 800497a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d12f      	bne.n	80049e2 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8004982:	e013      	b.n	80049ac <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2228      	movs	r2, #40	@ 0x28
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004998:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e02f      	b.n	8004a0c <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ba:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80049c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f001 fbd3 	bl	8006174 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049dc:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e014      	b.n	8004a0c <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2228      	movs	r2, #40	@ 0x28
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f6:	f043 0210 	orr.w	r2, r3, #16
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8004a0a:	2302      	movs	r3, #2
  }
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	ffff0000 	.word	0xffff0000
 8004a18:	080053f9 	.word	0x080053f9
 8004a1c:	08006019 	.word	0x08006019
 8004a20:	0800605f 	.word	0x0800605f

08004a24 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	70fb      	strb	r3, [r7, #3]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <I2C_Master_ISR_IT+0x1e>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e12e      	b.n	8004d48 <I2C_Master_ISR_IT+0x27c>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d013      	beq.n	8004b26 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00d      	beq.n	8004b26 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2210      	movs	r2, #16
 8004b10:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b16:	f043 0204 	orr.w	r2, r3, #4
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f001 fa0b 	bl	8005f3a <I2C_Flush_TXDR>
 8004b24:	e0fb      	b.n	8004d1e <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	089b      	lsrs	r3, r3, #2
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d023      	beq.n	8004b7a <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	089b      	lsrs	r3, r3, #2
 8004b36:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01d      	beq.n	8004b7a <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 0304 	bic.w	r3, r3, #4
 8004b44:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b78:	e0d1      	b.n	8004d1e <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	099b      	lsrs	r3, r3, #6
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d12a      	bne.n	8004bdc <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d024      	beq.n	8004bdc <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	085b      	lsrs	r3, r3, #1
 8004b96:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01e      	beq.n	8004bdc <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80ba 	beq.w	8004d1e <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004bda:	e0a0      	b.n	8004d1e <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	09db      	lsrs	r3, r3, #7
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d06b      	beq.n	8004cc0 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d065      	beq.n	8004cc0 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d04e      	beq.n	8004c9c <I2C_Master_ISR_IT+0x1d0>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d14a      	bne.n	8004c9c <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c12:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2bff      	cmp	r3, #255	@ 0xff
 8004c1c:	d91c      	bls.n	8004c58 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d103      	bne.n	8004c3a <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004c38:	e002      	b.n	8004c40 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	22ff      	movs	r2, #255	@ 0xff
 8004c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	8a79      	ldrh	r1, [r7, #18]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f001 fa5d 	bl	8006110 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c56:	e032      	b.n	8004cbe <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c66:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c6a:	d00b      	beq.n	8004c84 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c70:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004c76:	8a79      	ldrh	r1, [r7, #18]
 8004c78:	2000      	movs	r0, #0
 8004c7a:	9000      	str	r0, [sp, #0]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f001 fa47 	bl	8006110 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c82:	e01c      	b.n	8004cbe <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	8a79      	ldrh	r1, [r7, #18]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f001 fa3b 	bl	8006110 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c9a:	e010      	b.n	8004cbe <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004caa:	d003      	beq.n	8004cb4 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 fd08 	bl	80056c2 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cb2:	e034      	b.n	8004d1e <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004cb4:	2140      	movs	r1, #64	@ 0x40
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f001 f828 	bl	8005d0c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cbc:	e02f      	b.n	8004d1e <I2C_Master_ISR_IT+0x252>
 8004cbe:	e02e      	b.n	8004d1e <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	099b      	lsrs	r3, r3, #6
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d028      	beq.n	8004d1e <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	099b      	lsrs	r3, r3, #6
 8004cd0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d022      	beq.n	8004d1e <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d119      	bne.n	8004d16 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cf0:	d015      	beq.n	8004d1e <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cfa:	d108      	bne.n	8004d0e <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	e007      	b.n	8004d1e <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fcd7 	bl	80056c2 <I2C_ITMasterSeqCplt>
 8004d14:	e003      	b.n	8004d1e <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004d16:	2140      	movs	r1, #64	@ 0x40
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fff7 	bl	8005d0c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004d36:	6979      	ldr	r1, [r7, #20]
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 fd5d 	bl	80057f8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d60:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <I2C_Slave_ISR_IT+0x24>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e0ed      	b.n	8004f50 <I2C_Slave_ISR_IT+0x200>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004d94:	6939      	ldr	r1, [r7, #16]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fdf8 	bl	800598c <I2C_ITSlaveCplt>
 8004d9c:	e0d3      	b.n	8004f46 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d04d      	beq.n	8004e46 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d047      	beq.n	8004e46 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d128      	bne.n	8004e12 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b28      	cmp	r3, #40	@ 0x28
 8004dca:	d108      	bne.n	8004dde <I2C_Slave_ISR_IT+0x8e>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dd2:	d104      	bne.n	8004dde <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004dd4:	6939      	ldr	r1, [r7, #16]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 ff42 	bl	8005c60 <I2C_ITListenCplt>
 8004ddc:	e032      	b.n	8004e44 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b29      	cmp	r3, #41	@ 0x29
 8004de8:	d10e      	bne.n	8004e08 <I2C_Slave_ISR_IT+0xb8>
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004df0:	d00a      	beq.n	8004e08 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2210      	movs	r2, #16
 8004df8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f001 f89d 	bl	8005f3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fc9b 	bl	800573c <I2C_ITSlaveSeqCplt>
 8004e06:	e01d      	b.n	8004e44 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004e10:	e096      	b.n	8004f40 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2210      	movs	r2, #16
 8004e18:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1e:	f043 0204 	orr.w	r2, r3, #4
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <I2C_Slave_ISR_IT+0xe6>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e32:	f040 8085 	bne.w	8004f40 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 ff65 	bl	8005d0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004e42:	e07d      	b.n	8004f40 <I2C_Slave_ISR_IT+0x1f0>
 8004e44:	e07c      	b.n	8004f40 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	089b      	lsrs	r3, r3, #2
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d030      	beq.n	8004eb4 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	089b      	lsrs	r3, r3, #2
 8004e56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d02a      	beq.n	8004eb4 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d018      	beq.n	8004e9a <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d14f      	bne.n	8004f44 <I2C_Slave_ISR_IT+0x1f4>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004eaa:	d04b      	beq.n	8004f44 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fc45 	bl	800573c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004eb2:	e047      	b.n	8004f44 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	08db      	lsrs	r3, r3, #3
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	08db      	lsrs	r3, r3, #3
 8004ec4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004ecc:	6939      	ldr	r1, [r7, #16]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fb73 	bl	80055ba <I2C_ITAddrCplt>
 8004ed4:	e037      	b.n	8004f46 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d031      	beq.n	8004f46 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	085b      	lsrs	r3, r3, #1
 8004ee6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d02b      	beq.n	8004f46 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d018      	beq.n	8004f2a <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	781a      	ldrb	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004f28:	e00d      	b.n	8004f46 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f30:	d002      	beq.n	8004f38 <I2C_Slave_ISR_IT+0x1e8>
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fbff 	bl	800573c <I2C_ITSlaveSeqCplt>
 8004f3e:	e002      	b.n	8004f46 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004f40:	bf00      	nop
 8004f42:	e000      	b.n	8004f46 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8004f44:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <I2C_Master_ISR_DMA+0x1a>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e0f0      	b.n	8005154 <I2C_Master_ISR_DMA+0x1fc>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d017      	beq.n	8004fb6 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d011      	beq.n	8004fb6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2210      	movs	r2, #16
 8004f98:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9e:	f043 0204 	orr.w	r2, r3, #4
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004fa6:	2120      	movs	r1, #32
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f001 f8e3 	bl	8006174 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 ffc3 	bl	8005f3a <I2C_Flush_TXDR>
 8004fb4:	e0c9      	b.n	800514a <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	09db      	lsrs	r3, r3, #7
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8081 	beq.w	80050c6 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d07a      	beq.n	80050c6 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fde:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d05c      	beq.n	80050a4 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2bff      	cmp	r3, #255	@ 0xff
 8005000:	d914      	bls.n	800502c <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	0c1b      	lsrs	r3, r3, #16
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	d103      	bne.n	800501e <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800501c:	e002      	b.n	8005024 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	22ff      	movs	r2, #255	@ 0xff
 8005022:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8005024:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	e010      	b.n	800504e <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800503e:	d003      	beq.n	8005048 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e002      	b.n	800504e <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005048:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800504c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005052:	b2da      	uxtb	r2, r3
 8005054:	8a79      	ldrh	r1, [r7, #18]
 8005056:	2300      	movs	r3, #0
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f001 f857 	bl	8006110 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b22      	cmp	r3, #34	@ 0x22
 800507e:	d108      	bne.n	8005092 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800508e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005090:	e05b      	b.n	800514a <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80050a2:	e052      	b.n	800514a <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050b2:	d003      	beq.n	80050bc <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fb04 	bl	80056c2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80050ba:	e046      	b.n	800514a <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80050bc:	2140      	movs	r1, #64	@ 0x40
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fe24 	bl	8005d0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80050c4:	e041      	b.n	800514a <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	099b      	lsrs	r3, r3, #6
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d029      	beq.n	8005126 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	099b      	lsrs	r3, r3, #6
 80050d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d023      	beq.n	8005126 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d119      	bne.n	800511c <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050f6:	d027      	beq.n	8005148 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005100:	d108      	bne.n	8005114 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005110:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005112:	e019      	b.n	8005148 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fad4 	bl	80056c2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800511a:	e015      	b.n	8005148 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800511c:	2140      	movs	r1, #64	@ 0x40
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fdf4 	bl	8005d0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005124:	e010      	b.n	8005148 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 fb59 	bl	80057f8 <I2C_ITMasterCplt>
 8005146:	e000      	b.n	800514a <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8005148:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005168:	4b94      	ldr	r3, [pc, #592]	@ (80053bc <I2C_Mem_ISR_DMA+0x260>)
 800516a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <I2C_Mem_ISR_DMA+0x1e>
 8005176:	2302      	movs	r3, #2
 8005178:	e139      	b.n	80053ee <I2C_Mem_ISR_DMA+0x292>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d017      	beq.n	80051be <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005196:	2b00      	cmp	r3, #0
 8005198:	d011      	beq.n	80051be <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2210      	movs	r2, #16
 80051a0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a6:	f043 0204 	orr.w	r2, r3, #4
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80051ae:	2120      	movs	r1, #32
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 ffdf 	bl	8006174 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 febf 	bl	8005f3a <I2C_Flush_TXDR>
 80051bc:	e112      	b.n	80053e4 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00f      	beq.n	80051ea <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f04f 32ff 	mov.w	r2, #4294967295
 80051e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80051e8:	e0fc      	b.n	80053e4 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	09db      	lsrs	r3, r3, #7
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d06e      	beq.n	80052d4 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	099b      	lsrs	r3, r3, #6
 80051fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d068      	beq.n	80052d4 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005202:	2101      	movs	r1, #1
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f001 f839 	bl	800627c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800520a:	2110      	movs	r1, #16
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 ffb1 	bl	8006174 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d056      	beq.n	80052ca <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	2bff      	cmp	r3, #255	@ 0xff
 8005224:	d91e      	bls.n	8005264 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	0c1b      	lsrs	r3, r3, #16
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b01      	cmp	r3, #1
 8005238:	d103      	bne.n	8005242 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005240:	e002      	b.n	8005248 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	22ff      	movs	r2, #255	@ 0xff
 8005246:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524c:	b299      	uxth	r1, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005252:	b2da      	uxtb	r2, r3
 8005254:	2300      	movs	r3, #0
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 ff57 	bl	8006110 <I2C_TransferConfig>
 8005262:	e011      	b.n	8005288 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005272:	b299      	uxth	r1, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005278:	b2da      	uxtb	r2, r3
 800527a:	2300      	movs	r3, #0
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 ff44 	bl	8006110 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b22      	cmp	r3, #34	@ 0x22
 80052a4:	d108      	bne.n	80052b8 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052b4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80052b6:	e095      	b.n	80053e4 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052c6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80052c8:	e08c      	b.n	80053e4 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80052ca:	2140      	movs	r1, #64	@ 0x40
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fd1d 	bl	8005d0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80052d2:	e087      	b.n	80053e4 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d071      	beq.n	80053c4 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	099b      	lsrs	r3, r3, #6
 80052e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d06b      	beq.n	80053c4 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80052ec:	2101      	movs	r1, #1
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 ffc4 	bl	800627c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80052f4:	2110      	movs	r1, #16
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 ff3c 	bl	8006174 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b22      	cmp	r3, #34	@ 0x22
 8005306:	d101      	bne.n	800530c <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8005308:	4b2d      	ldr	r3, [pc, #180]	@ (80053c0 <I2C_Mem_ISR_DMA+0x264>)
 800530a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005310:	b29b      	uxth	r3, r3
 8005312:	2bff      	cmp	r3, #255	@ 0xff
 8005314:	d91e      	bls.n	8005354 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	0c1b      	lsrs	r3, r3, #16
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d103      	bne.n	8005332 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005330:	e002      	b.n	8005338 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	22ff      	movs	r2, #255	@ 0xff
 8005336:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800533c:	b299      	uxth	r1, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005342:	b2da      	uxtb	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 fedf 	bl	8006110 <I2C_TransferConfig>
 8005352:	e011      	b.n	8005378 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005362:	b299      	uxth	r1, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005368:	b2da      	uxtb	r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fecc 	bl	8006110 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b22      	cmp	r3, #34	@ 0x22
 8005394:	d108      	bne.n	80053a8 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053a4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053a6:	e01d      	b.n	80053e4 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053b6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053b8:	e014      	b.n	80053e4 <I2C_Mem_ISR_DMA+0x288>
 80053ba:	bf00      	nop
 80053bc:	80002000 	.word	0x80002000
 80053c0:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d009      	beq.n	80053e4 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 fa0a 	bl	80057f8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop

080053f8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <I2C_Slave_ISR_DMA+0x24>
 8005418:	2302      	movs	r3, #2
 800541a:	e0ca      	b.n	80055b2 <I2C_Slave_ISR_DMA+0x1ba>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 faa4 	bl	800598c <I2C_ITSlaveCplt>
 8005444:	e0b0      	b.n	80055a8 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 809a 	beq.w	8005588 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	091b      	lsrs	r3, r3, #4
 8005458:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8093 	beq.w	8005588 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0b9b      	lsrs	r3, r3, #14
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d105      	bne.n	800547a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0bdb      	lsrs	r3, r3, #15
 8005472:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005476:	2b00      	cmp	r3, #0
 8005478:	d07f      	beq.n	800557a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	0bdb      	lsrs	r3, r3, #15
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 800549a:	2301      	movs	r3, #1
 800549c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	0b9b      	lsrs	r3, r3, #14
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80054be:	2301      	movs	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d128      	bne.n	800551a <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b28      	cmp	r3, #40	@ 0x28
 80054d2:	d108      	bne.n	80054e6 <I2C_Slave_ISR_DMA+0xee>
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054da:	d104      	bne.n	80054e6 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fbbe 	bl	8005c60 <I2C_ITListenCplt>
 80054e4:	e048      	b.n	8005578 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b29      	cmp	r3, #41	@ 0x29
 80054f0:	d10e      	bne.n	8005510 <I2C_Slave_ISR_DMA+0x118>
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054f8:	d00a      	beq.n	8005510 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2210      	movs	r2, #16
 8005500:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 fd19 	bl	8005f3a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f917 	bl	800573c <I2C_ITSlaveSeqCplt>
 800550e:	e033      	b.n	8005578 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2210      	movs	r2, #16
 8005516:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005518:	e034      	b.n	8005584 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2210      	movs	r2, #16
 8005520:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	f043 0204 	orr.w	r2, r3, #4
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005534:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <I2C_Slave_ISR_DMA+0x14c>
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005542:	d11f      	bne.n	8005584 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005544:	7dfb      	ldrb	r3, [r7, #23]
 8005546:	2b21      	cmp	r3, #33	@ 0x21
 8005548:	d002      	beq.n	8005550 <I2C_Slave_ISR_DMA+0x158>
 800554a:	7dfb      	ldrb	r3, [r7, #23]
 800554c:	2b29      	cmp	r3, #41	@ 0x29
 800554e:	d103      	bne.n	8005558 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2221      	movs	r2, #33	@ 0x21
 8005554:	631a      	str	r2, [r3, #48]	@ 0x30
 8005556:	e008      	b.n	800556a <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	2b22      	cmp	r3, #34	@ 0x22
 800555c:	d002      	beq.n	8005564 <I2C_Slave_ISR_DMA+0x16c>
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	2b2a      	cmp	r3, #42	@ 0x2a
 8005562:	d102      	bne.n	800556a <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2222      	movs	r2, #34	@ 0x22
 8005568:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556e:	4619      	mov	r1, r3
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fbcb 	bl	8005d0c <I2C_ITError>
      if (treatdmanack == 1U)
 8005576:	e005      	b.n	8005584 <I2C_Slave_ISR_DMA+0x18c>
 8005578:	e004      	b.n	8005584 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2210      	movs	r2, #16
 8005580:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005582:	e011      	b.n	80055a8 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8005584:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005586:	e00f      	b.n	80055a8 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	08db      	lsrs	r3, r3, #3
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d009      	beq.n	80055a8 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	08db      	lsrs	r3, r3, #3
 8005598:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f809 	bl	80055ba <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80055d0:	2b28      	cmp	r3, #40	@ 0x28
 80055d2:	d16a      	bne.n	80056aa <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	0c1b      	lsrs	r3, r3, #16
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	0c1b      	lsrs	r3, r3, #16
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80055f2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005600:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800560e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d138      	bne.n	800568a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005618:	897b      	ldrh	r3, [r7, #10]
 800561a:	09db      	lsrs	r3, r3, #7
 800561c:	b29a      	uxth	r2, r3
 800561e:	89bb      	ldrh	r3, [r7, #12]
 8005620:	4053      	eors	r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	f003 0306 	and.w	r3, r3, #6
 8005628:	2b00      	cmp	r3, #0
 800562a:	d11c      	bne.n	8005666 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800562c:	897b      	ldrh	r3, [r7, #10]
 800562e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800563e:	2b02      	cmp	r3, #2
 8005640:	d13b      	bne.n	80056ba <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2208      	movs	r2, #8
 800564e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005658:	89ba      	ldrh	r2, [r7, #12]
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff f9f4 	bl	8004a4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005664:	e029      	b.n	80056ba <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005666:	893b      	ldrh	r3, [r7, #8]
 8005668:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800566a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fe04 	bl	800627c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800567c:	89ba      	ldrh	r2, [r7, #12]
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff f9e2 	bl	8004a4c <HAL_I2C_AddrCallback>
}
 8005688:	e017      	b.n	80056ba <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800568a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fdf4 	bl	800627c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800569c:	89ba      	ldrh	r2, [r7, #12]
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff f9d2 	bl	8004a4c <HAL_I2C_AddrCallback>
}
 80056a8:	e007      	b.n	80056ba <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2208      	movs	r2, #8
 80056b0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b21      	cmp	r3, #33	@ 0x21
 80056dc:	d115      	bne.n	800570a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2211      	movs	r2, #17
 80056ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80056f2:	2101      	movs	r1, #1
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fdc1 	bl	800627c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f013 ffe4 	bl	80196d0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005708:	e014      	b.n	8005734 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2212      	movs	r2, #18
 8005716:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800571e:	2102      	movs	r1, #2
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fdab 	bl	800627c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff f978 	bl	8004a24 <HAL_I2C_MasterRxCpltCallback>
}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	0b9b      	lsrs	r3, r3, #14
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e00d      	b.n	800578e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	0bdb      	lsrs	r3, r3, #15
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800578c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b29      	cmp	r3, #41	@ 0x29
 8005798:	d112      	bne.n	80057c0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2228      	movs	r2, #40	@ 0x28
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2221      	movs	r2, #33	@ 0x21
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80057a8:	2101      	movs	r1, #1
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fd66 	bl	800627c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff f93d 	bl	8004a38 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80057be:	e017      	b.n	80057f0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ca:	d111      	bne.n	80057f0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2228      	movs	r2, #40	@ 0x28
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2222      	movs	r2, #34	@ 0x22
 80057d8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80057da:	2102      	movs	r1, #2
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fd4d 	bl	800627c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f013 ff9e 	bl	801972c <HAL_I2C_SlaveRxCpltCallback>
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2220      	movs	r2, #32
 800580c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b21      	cmp	r3, #33	@ 0x21
 8005818:	d107      	bne.n	800582a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800581a:	2101      	movs	r1, #1
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fd2d 	bl	800627c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2211      	movs	r2, #17
 8005826:	631a      	str	r2, [r3, #48]	@ 0x30
 8005828:	e00c      	b.n	8005844 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b22      	cmp	r3, #34	@ 0x22
 8005834:	d106      	bne.n	8005844 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005836:	2102      	movs	r1, #2
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fd1f 	bl	800627c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2212      	movs	r2, #18
 8005842:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6859      	ldr	r1, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b4d      	ldr	r3, [pc, #308]	@ (8005984 <I2C_ITMasterCplt+0x18c>)
 8005850:	400b      	ands	r3, r1
 8005852:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a4a      	ldr	r2, [pc, #296]	@ (8005988 <I2C_ITMasterCplt+0x190>)
 800585e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	091b      	lsrs	r3, r3, #4
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d009      	beq.n	8005880 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2210      	movs	r2, #16
 8005872:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005878:	f043 0204 	orr.w	r2, r3, #4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b60      	cmp	r3, #96	@ 0x60
 800588a:	d10b      	bne.n	80058a4 <I2C_ITMasterCplt+0xac>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80058a2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fb48 	bl	8005f3a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ae:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b60      	cmp	r3, #96	@ 0x60
 80058ba:	d002      	beq.n	80058c2 <I2C_ITMasterCplt+0xca>
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d006      	beq.n	80058d0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fa1f 	bl	8005d0c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80058ce:	e054      	b.n	800597a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b21      	cmp	r3, #33	@ 0x21
 80058da:	d124      	bne.n	8005926 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b40      	cmp	r3, #64	@ 0x40
 80058f4:	d10b      	bne.n	800590e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff f8b8 	bl	8004a7c <HAL_I2C_MemTxCpltCallback>
}
 800590c:	e035      	b.n	800597a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f013 fed6 	bl	80196d0 <HAL_I2C_MasterTxCpltCallback>
}
 8005924:	e029      	b.n	800597a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b22      	cmp	r3, #34	@ 0x22
 8005930:	d123      	bne.n	800597a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b40      	cmp	r3, #64	@ 0x40
 800594a:	d10b      	bne.n	8005964 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff f897 	bl	8004a90 <HAL_I2C_MemRxCpltCallback>
}
 8005962:	e00a      	b.n	800597a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff f855 	bl	8004a24 <HAL_I2C_MasterRxCpltCallback>
}
 800597a:	bf00      	nop
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	fe00e800 	.word	0xfe00e800
 8005988:	ffff0000 	.word	0xffff0000

0800598c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ae:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2220      	movs	r2, #32
 80059b6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80059b8:	7afb      	ldrb	r3, [r7, #11]
 80059ba:	2b21      	cmp	r3, #33	@ 0x21
 80059bc:	d002      	beq.n	80059c4 <I2C_ITSlaveCplt+0x38>
 80059be:	7afb      	ldrb	r3, [r7, #11]
 80059c0:	2b29      	cmp	r3, #41	@ 0x29
 80059c2:	d108      	bne.n	80059d6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80059c4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fc57 	bl	800627c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2221      	movs	r2, #33	@ 0x21
 80059d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80059d4:	e019      	b.n	8005a0a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059d6:	7afb      	ldrb	r3, [r7, #11]
 80059d8:	2b22      	cmp	r3, #34	@ 0x22
 80059da:	d002      	beq.n	80059e2 <I2C_ITSlaveCplt+0x56>
 80059dc:	7afb      	ldrb	r3, [r7, #11]
 80059de:	2b2a      	cmp	r3, #42	@ 0x2a
 80059e0:	d108      	bne.n	80059f4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80059e2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fc48 	bl	800627c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2222      	movs	r2, #34	@ 0x22
 80059f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80059f2:	e00a      	b.n	8005a0a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80059f4:	7afb      	ldrb	r3, [r7, #11]
 80059f6:	2b28      	cmp	r3, #40	@ 0x28
 80059f8:	d107      	bne.n	8005a0a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80059fa:	f248 0103 	movw	r1, #32771	@ 0x8003
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fc3c 	bl	800627c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a18:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b8c      	ldr	r3, [pc, #560]	@ (8005c58 <I2C_ITSlaveCplt+0x2cc>)
 8005a26:	400b      	ands	r3, r1
 8005a28:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa85 	bl	8005f3a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	0b9b      	lsrs	r3, r3, #14
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d013      	beq.n	8005a64 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a4a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d020      	beq.n	8005a96 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a62:	e018      	b.n	8005a96 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	0bdb      	lsrs	r3, r3, #15
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d012      	beq.n	8005a96 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a7e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d006      	beq.n	8005a96 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	089b      	lsrs	r3, r3, #2
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d020      	beq.n	8005ae4 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f023 0304 	bic.w	r3, r3, #4
 8005aa8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00c      	beq.n	8005ae4 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af2:	f043 0204 	orr.w	r2, r3, #4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d04a      	beq.n	8005b9c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	091b      	lsrs	r3, r3, #4
 8005b0a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d044      	beq.n	8005b9c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d128      	bne.n	8005b6e <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b28      	cmp	r3, #40	@ 0x28
 8005b26:	d108      	bne.n	8005b3a <I2C_ITSlaveCplt+0x1ae>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b2e:	d104      	bne.n	8005b3a <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005b30:	6979      	ldr	r1, [r7, #20]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f894 	bl	8005c60 <I2C_ITListenCplt>
 8005b38:	e030      	b.n	8005b9c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b29      	cmp	r3, #41	@ 0x29
 8005b44:	d10e      	bne.n	8005b64 <I2C_ITSlaveCplt+0x1d8>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b4c:	d00a      	beq.n	8005b64 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2210      	movs	r2, #16
 8005b54:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f9ef 	bl	8005f3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fded 	bl	800573c <I2C_ITSlaveSeqCplt>
 8005b62:	e01b      	b.n	8005b9c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2210      	movs	r2, #16
 8005b6a:	61da      	str	r2, [r3, #28]
 8005b6c:	e016      	b.n	8005b9c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2210      	movs	r2, #16
 8005b74:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	f043 0204 	orr.w	r2, r3, #4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <I2C_ITSlaveCplt+0x204>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b8e:	d105      	bne.n	8005b9c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b94:	4619      	mov	r1, r3
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f8b8 	bl	8005d0c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d010      	beq.n	8005bd4 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f8a7 	bl	8005d0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b28      	cmp	r3, #40	@ 0x28
 8005bc8:	d141      	bne.n	8005c4e <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005bca:	6979      	ldr	r1, [r7, #20]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f847 	bl	8005c60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bd2:	e03c      	b.n	8005c4e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005bdc:	d014      	beq.n	8005c08 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff fdac 	bl	800573c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1d      	ldr	r2, [pc, #116]	@ (8005c5c <I2C_ITSlaveCplt+0x2d0>)
 8005be8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7fe ff31 	bl	8004a68 <HAL_I2C_ListenCpltCallback>
}
 8005c06:	e022      	b.n	8005c4e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b22      	cmp	r3, #34	@ 0x22
 8005c12:	d10e      	bne.n	8005c32 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f013 fd7e 	bl	801972c <HAL_I2C_SlaveRxCpltCallback>
}
 8005c30:	e00d      	b.n	8005c4e <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fe fef5 	bl	8004a38 <HAL_I2C_SlaveTxCpltCallback>
}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	fe00e800 	.word	0xfe00e800
 8005c5c:	ffff0000 	.word	0xffff0000

08005c60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a26      	ldr	r2, [pc, #152]	@ (8005d08 <I2C_ITListenCplt+0xa8>)
 8005c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	089b      	lsrs	r3, r3, #2
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d022      	beq.n	8005cde <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d012      	beq.n	8005cde <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd6:	f043 0204 	orr.w	r2, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005cde:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 faca 	bl	800627c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2210      	movs	r2, #16
 8005cee:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fe feb5 	bl	8004a68 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	ffff0000 	.word	0xffff0000

08005d0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d1c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a6d      	ldr	r2, [pc, #436]	@ (8005ee0 <I2C_ITError+0x1d4>)
 8005d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b28      	cmp	r3, #40	@ 0x28
 8005d42:	d005      	beq.n	8005d50 <I2C_ITError+0x44>
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	2b29      	cmp	r3, #41	@ 0x29
 8005d48:	d002      	beq.n	8005d50 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d4e:	d10b      	bne.n	8005d68 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005d50:	2103      	movs	r1, #3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa92 	bl	800627c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2228      	movs	r2, #40	@ 0x28
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a60      	ldr	r2, [pc, #384]	@ (8005ee4 <I2C_ITError+0x1d8>)
 8005d64:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d66:	e030      	b.n	8005dca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005d68:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fa85 	bl	800627c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f8e1 	bl	8005f3a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b60      	cmp	r3, #96	@ 0x60
 8005d82:	d01f      	beq.n	8005dc4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d114      	bne.n	8005dc4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d109      	bne.n	8005dbc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2210      	movs	r2, #16
 8005dae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db4:	f043 0204 	orr.w	r2, r3, #4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d039      	beq.n	8005e4c <I2C_ITError+0x140>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b11      	cmp	r3, #17
 8005ddc:	d002      	beq.n	8005de4 <I2C_ITError+0xd8>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b21      	cmp	r3, #33	@ 0x21
 8005de2:	d133      	bne.n	8005e4c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005df2:	d107      	bne.n	8005e04 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fc fe55 	bl	8002ab8 <HAL_DMA_GetState>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d017      	beq.n	8005e44 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e18:	4a33      	ldr	r2, [pc, #204]	@ (8005ee8 <I2C_ITError+0x1dc>)
 8005e1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fc fc99 	bl	8002760 <HAL_DMA_Abort_IT>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d04d      	beq.n	8005ed0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005e3e:	4610      	mov	r0, r2
 8005e40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e42:	e045      	b.n	8005ed0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f851 	bl	8005eec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e4a:	e041      	b.n	8005ed0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d039      	beq.n	8005ec8 <I2C_ITError+0x1bc>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b12      	cmp	r3, #18
 8005e58:	d002      	beq.n	8005e60 <I2C_ITError+0x154>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b22      	cmp	r3, #34	@ 0x22
 8005e5e:	d133      	bne.n	8005ec8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e6e:	d107      	bne.n	8005e80 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fc fe17 	bl	8002ab8 <HAL_DMA_GetState>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d017      	beq.n	8005ec0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e94:	4a14      	ldr	r2, [pc, #80]	@ (8005ee8 <I2C_ITError+0x1dc>)
 8005e96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fc fc5b 	bl	8002760 <HAL_DMA_Abort_IT>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d011      	beq.n	8005ed4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ebe:	e009      	b.n	8005ed4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f813 	bl	8005eec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ec6:	e005      	b.n	8005ed4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f80f 	bl	8005eec <I2C_TreatErrorCallback>
  }
}
 8005ece:	e002      	b.n	8005ed6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ed0:	bf00      	nop
 8005ed2:	e000      	b.n	8005ed6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ed4:	bf00      	nop
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	ffff0000 	.word	0xffff0000
 8005ee4:	08004d51 	.word	0x08004d51
 8005ee8:	080060d3 	.word	0x080060d3

08005eec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b60      	cmp	r3, #96	@ 0x60
 8005efe:	d10e      	bne.n	8005f1e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fe fdce 	bl	8004ab8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f1c:	e009      	b.n	8005f32 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fe fdb9 	bl	8004aa4 <HAL_I2C_ErrorCallback>
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d103      	bne.n	8005f58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2200      	movs	r2, #0
 8005f56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d007      	beq.n	8005f76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699a      	ldr	r2, [r3, #24]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0201 	orr.w	r2, r2, #1
 8005f74:	619a      	str	r2, [r3, #24]
  }
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f9e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005faa:	2120      	movs	r1, #32
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f8e1 	bl	8006174 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005fb2:	e02d      	b.n	8006010 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005fbc:	441a      	add	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2bff      	cmp	r3, #255	@ 0xff
 8005fca:	d903      	bls.n	8005fd4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	22ff      	movs	r2, #255	@ 0xff
 8005fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005fd2:	e004      	b.n	8005fde <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3328      	adds	r3, #40	@ 0x28
 8005fee:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005ff4:	f7fc fae4 	bl	80025c0 <HAL_DMA_Start_IT>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005ffe:	2110      	movs	r1, #16
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff fe83 	bl	8005d0c <I2C_ITError>
}
 8006006:	e003      	b.n	8006010 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006008:	2140      	movs	r1, #64	@ 0x40
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f8b2 	bl	8006174 <I2C_Enable_IRQ>
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602a:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10e      	bne.n	8006056 <I2C_DMASlaveReceiveCplt+0x3e>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800603e:	d00a      	beq.n	8006056 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800604e:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7ff fb73 	bl	800573c <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606e:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8006084:	2301      	movs	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 800609c:	2301      	movs	r3, #1
 800609e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7fc fd17 	bl	8002ad4 <HAL_DMA_GetError>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d00e      	beq.n	80060ca <I2C_DMAError+0x6c>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00b      	beq.n	80060ca <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060c0:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80060c2:	2110      	movs	r1, #16
 80060c4:	68b8      	ldr	r0, [r7, #8]
 80060c6:	f7ff fe21 	bl	8005d0c <I2C_ITError>
  }
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ec:	2200      	movs	r2, #0
 80060ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fc:	2200      	movs	r2, #0
 80060fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f7ff fef3 	bl	8005eec <I2C_TreatErrorCallback>
}
 8006106:	bf00      	nop
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	607b      	str	r3, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	817b      	strh	r3, [r7, #10]
 800611e:	4613      	mov	r3, r2
 8006120:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006122:	897b      	ldrh	r3, [r7, #10]
 8006124:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006128:	7a7b      	ldrb	r3, [r7, #9]
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006130:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	4313      	orrs	r3, r2
 800613a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800613e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	0d5b      	lsrs	r3, r3, #21
 800614a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800614e:	4b08      	ldr	r3, [pc, #32]	@ (8006170 <I2C_TransferConfig+0x60>)
 8006150:	430b      	orrs	r3, r1
 8006152:	43db      	mvns	r3, r3
 8006154:	ea02 0103 	and.w	r1, r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006162:	bf00      	nop
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	03ff63ff 	.word	0x03ff63ff

08006174 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006188:	4a39      	ldr	r2, [pc, #228]	@ (8006270 <I2C_Enable_IRQ+0xfc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d032      	beq.n	80061f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006192:	4a38      	ldr	r2, [pc, #224]	@ (8006274 <I2C_Enable_IRQ+0x100>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d02d      	beq.n	80061f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800619c:	4a36      	ldr	r2, [pc, #216]	@ (8006278 <I2C_Enable_IRQ+0x104>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d028      	beq.n	80061f4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80061a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	da03      	bge.n	80061b2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80061b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80061b2:	887b      	ldrh	r3, [r7, #2]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80061c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80061c4:	887b      	ldrh	r3, [r7, #2]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80061d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80061d6:	887b      	ldrh	r3, [r7, #2]
 80061d8:	2b10      	cmp	r3, #16
 80061da:	d103      	bne.n	80061e4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80061e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80061e4:	887b      	ldrh	r3, [r7, #2]
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d133      	bne.n	8006252 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f043 0320 	orr.w	r3, r3, #32
 80061f0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80061f2:	e02e      	b.n	8006252 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80061f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	da03      	bge.n	8006204 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006202:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006204:	887b      	ldrh	r3, [r7, #2]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006214:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006216:	887b      	ldrh	r3, [r7, #2]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006226:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006228:	887b      	ldrh	r3, [r7, #2]
 800622a:	2b10      	cmp	r3, #16
 800622c:	d103      	bne.n	8006236 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006234:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006236:	887b      	ldrh	r3, [r7, #2]
 8006238:	2b20      	cmp	r3, #32
 800623a:	d103      	bne.n	8006244 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006242:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006244:	887b      	ldrh	r3, [r7, #2]
 8006246:	2b40      	cmp	r3, #64	@ 0x40
 8006248:	d103      	bne.n	8006252 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006250:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6819      	ldr	r1, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	430a      	orrs	r2, r1
 8006260:	601a      	str	r2, [r3, #0]
}
 8006262:	bf00      	nop
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	08004f59 	.word	0x08004f59
 8006274:	080053f9 	.word	0x080053f9
 8006278:	0800515d 	.word	0x0800515d

0800627c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800628c:	887b      	ldrh	r3, [r7, #2]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00f      	beq.n	80062b6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800629c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80062aa:	2b28      	cmp	r3, #40	@ 0x28
 80062ac:	d003      	beq.n	80062b6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80062b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80062b6:	887b      	ldrh	r3, [r7, #2]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00f      	beq.n	80062e0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80062c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80062d4:	2b28      	cmp	r3, #40	@ 0x28
 80062d6:	d003      	beq.n	80062e0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80062de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80062e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	da03      	bge.n	80062f0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80062ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80062f0:	887b      	ldrh	r3, [r7, #2]
 80062f2:	2b10      	cmp	r3, #16
 80062f4:	d103      	bne.n	80062fe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80062fc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80062fe:	887b      	ldrh	r3, [r7, #2]
 8006300:	2b20      	cmp	r3, #32
 8006302:	d103      	bne.n	800630c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f043 0320 	orr.w	r3, r3, #32
 800630a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800630c:	887b      	ldrh	r3, [r7, #2]
 800630e:	2b40      	cmp	r3, #64	@ 0x40
 8006310:	d103      	bne.n	800631a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006318:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6819      	ldr	r1, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	43da      	mvns	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	400a      	ands	r2, r1
 800632a:	601a      	str	r2, [r3, #0]
}
 800632c:	bf00      	nop
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b20      	cmp	r3, #32
 800634c:	d138      	bne.n	80063c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006358:	2302      	movs	r3, #2
 800635a:	e032      	b.n	80063c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2224      	movs	r2, #36	@ 0x24
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800638a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6819      	ldr	r1, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	e000      	b.n	80063c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063c0:	2302      	movs	r3, #2
  }
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d139      	bne.n	8006458 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e033      	b.n	800645a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2224      	movs	r2, #36	@ 0x24
 80063fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0201 	bic.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006420:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0201 	orr.w	r2, r2, #1
 8006442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	e000      	b.n	800645a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006458:	2302      	movs	r3, #2
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b086      	sub	sp, #24
 800646a:	af02      	add	r7, sp, #8
 800646c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e108      	b.n	800668a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fb f906 	bl	80016a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2203      	movs	r2, #3
 800649c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064a6:	d102      	bne.n	80064ae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f003 f926 	bl	8009704 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	7c1a      	ldrb	r2, [r3, #16]
 80064c0:	f88d 2000 	strb.w	r2, [sp]
 80064c4:	3304      	adds	r3, #4
 80064c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064c8:	f003 f8c2 	bl	8009650 <USB_CoreInit>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e0d5      	b.n	800668a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2100      	movs	r1, #0
 80064e4:	4618      	mov	r0, r3
 80064e6:	f003 f91e 	bl	8009726 <USB_SetCurrentMode>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0c6      	b.n	800668a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064fc:	2300      	movs	r3, #0
 80064fe:	73fb      	strb	r3, [r7, #15]
 8006500:	e04a      	b.n	8006598 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006502:	7bfa      	ldrb	r2, [r7, #15]
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	3315      	adds	r3, #21
 8006512:	2201      	movs	r2, #1
 8006514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006516:	7bfa      	ldrb	r2, [r7, #15]
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	3314      	adds	r3, #20
 8006526:	7bfa      	ldrb	r2, [r7, #15]
 8006528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800652a:	7bfa      	ldrb	r2, [r7, #15]
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	b298      	uxth	r0, r3
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	332e      	adds	r3, #46	@ 0x2e
 800653e:	4602      	mov	r2, r0
 8006540:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006542:	7bfa      	ldrb	r2, [r7, #15]
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	3318      	adds	r3, #24
 8006552:	2200      	movs	r2, #0
 8006554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006556:	7bfa      	ldrb	r2, [r7, #15]
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	331c      	adds	r3, #28
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800656a:	7bfa      	ldrb	r2, [r7, #15]
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	4613      	mov	r3, r2
 8006570:	00db      	lsls	r3, r3, #3
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	440b      	add	r3, r1
 8006578:	3320      	adds	r3, #32
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800657e:	7bfa      	ldrb	r2, [r7, #15]
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	3324      	adds	r3, #36	@ 0x24
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	3301      	adds	r3, #1
 8006596:	73fb      	strb	r3, [r7, #15]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	791b      	ldrb	r3, [r3, #4]
 800659c:	7bfa      	ldrb	r2, [r7, #15]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d3af      	bcc.n	8006502 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]
 80065a6:	e044      	b.n	8006632 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065a8:	7bfa      	ldrb	r2, [r7, #15]
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	4613      	mov	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065be:	7bfa      	ldrb	r2, [r7, #15]
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80065d0:	7bfa      	ldrb	r2, [r7, #15]
 80065d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065d4:	7bfa      	ldrb	r2, [r7, #15]
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	4613      	mov	r3, r2
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	440b      	add	r3, r1
 80065e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80065ea:	7bfa      	ldrb	r2, [r7, #15]
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006600:	7bfa      	ldrb	r2, [r7, #15]
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	4613      	mov	r3, r2
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006616:	7bfa      	ldrb	r2, [r7, #15]
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	3301      	adds	r3, #1
 8006630:	73fb      	strb	r3, [r7, #15]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	791b      	ldrb	r3, [r3, #4]
 8006636:	7bfa      	ldrb	r2, [r7, #15]
 8006638:	429a      	cmp	r2, r3
 800663a:	d3b5      	bcc.n	80065a8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7c1a      	ldrb	r2, [r3, #16]
 8006644:	f88d 2000 	strb.w	r2, [sp]
 8006648:	3304      	adds	r3, #4
 800664a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800664c:	f003 f8b8 	bl	80097c0 <USB_DevInit>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e013      	b.n	800668a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	7b1b      	ldrb	r3, [r3, #12]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d102      	bne.n	800667e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f80b 	bl	8006694 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f003 fa73 	bl	8009b6e <USB_DevDisconnect>

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066c2:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	10000003 	.word	0x10000003

080066dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066e0:	4b05      	ldr	r3, [pc, #20]	@ (80066f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a04      	ldr	r2, [pc, #16]	@ (80066f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ea:	6013      	str	r3, [r2, #0]
}
 80066ec:	bf00      	nop
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40007000 	.word	0x40007000

080066fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006704:	2300      	movs	r3, #0
 8006706:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e291      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8087 	beq.w	800682e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006720:	4b96      	ldr	r3, [pc, #600]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 030c 	and.w	r3, r3, #12
 8006728:	2b04      	cmp	r3, #4
 800672a:	d00c      	beq.n	8006746 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800672c:	4b93      	ldr	r3, [pc, #588]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f003 030c 	and.w	r3, r3, #12
 8006734:	2b08      	cmp	r3, #8
 8006736:	d112      	bne.n	800675e <HAL_RCC_OscConfig+0x62>
 8006738:	4b90      	ldr	r3, [pc, #576]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006740:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006744:	d10b      	bne.n	800675e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006746:	4b8d      	ldr	r3, [pc, #564]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d06c      	beq.n	800682c <HAL_RCC_OscConfig+0x130>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d168      	bne.n	800682c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e26b      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006766:	d106      	bne.n	8006776 <HAL_RCC_OscConfig+0x7a>
 8006768:	4b84      	ldr	r3, [pc, #528]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a83      	ldr	r2, [pc, #524]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 800676e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	e02e      	b.n	80067d4 <HAL_RCC_OscConfig+0xd8>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10c      	bne.n	8006798 <HAL_RCC_OscConfig+0x9c>
 800677e:	4b7f      	ldr	r3, [pc, #508]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a7e      	ldr	r2, [pc, #504]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	4b7c      	ldr	r3, [pc, #496]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a7b      	ldr	r2, [pc, #492]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006790:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	e01d      	b.n	80067d4 <HAL_RCC_OscConfig+0xd8>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067a0:	d10c      	bne.n	80067bc <HAL_RCC_OscConfig+0xc0>
 80067a2:	4b76      	ldr	r3, [pc, #472]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a75      	ldr	r2, [pc, #468]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80067a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	4b73      	ldr	r3, [pc, #460]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a72      	ldr	r2, [pc, #456]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80067b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	e00b      	b.n	80067d4 <HAL_RCC_OscConfig+0xd8>
 80067bc:	4b6f      	ldr	r3, [pc, #444]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a6e      	ldr	r2, [pc, #440]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80067c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	4b6c      	ldr	r3, [pc, #432]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a6b      	ldr	r2, [pc, #428]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80067ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d013      	beq.n	8006804 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067dc:	f7fb fb26 	bl	8001e2c <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067e4:	f7fb fb22 	bl	8001e2c <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b64      	cmp	r3, #100	@ 0x64
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e21f      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f6:	4b61      	ldr	r3, [pc, #388]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCC_OscConfig+0xe8>
 8006802:	e014      	b.n	800682e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006804:	f7fb fb12 	bl	8001e2c <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800680c:	f7fb fb0e 	bl	8001e2c <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b64      	cmp	r3, #100	@ 0x64
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e20b      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800681e:	4b57      	ldr	r3, [pc, #348]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0x110>
 800682a:	e000      	b.n	800682e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800682c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d069      	beq.n	800690e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800683a:	4b50      	ldr	r3, [pc, #320]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 030c 	and.w	r3, r3, #12
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006846:	4b4d      	ldr	r3, [pc, #308]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 030c 	and.w	r3, r3, #12
 800684e:	2b08      	cmp	r3, #8
 8006850:	d11c      	bne.n	800688c <HAL_RCC_OscConfig+0x190>
 8006852:	4b4a      	ldr	r3, [pc, #296]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d116      	bne.n	800688c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800685e:	4b47      	ldr	r3, [pc, #284]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_RCC_OscConfig+0x17a>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d001      	beq.n	8006876 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e1df      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006876:	4b41      	ldr	r3, [pc, #260]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	493d      	ldr	r1, [pc, #244]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006886:	4313      	orrs	r3, r2
 8006888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800688a:	e040      	b.n	800690e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d023      	beq.n	80068dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006894:	4b39      	ldr	r3, [pc, #228]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a38      	ldr	r2, [pc, #224]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a0:	f7fb fac4 	bl	8001e2c <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068a8:	f7fb fac0 	bl	8001e2c <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e1bd      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ba:	4b30      	ldr	r3, [pc, #192]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c6:	4b2d      	ldr	r3, [pc, #180]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4929      	ldr	r1, [pc, #164]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	600b      	str	r3, [r1, #0]
 80068da:	e018      	b.n	800690e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068dc:	4b27      	ldr	r3, [pc, #156]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a26      	ldr	r2, [pc, #152]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 80068e2:	f023 0301 	bic.w	r3, r3, #1
 80068e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e8:	f7fb faa0 	bl	8001e2c <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f0:	f7fb fa9c 	bl	8001e2c <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e199      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006902:	4b1e      	ldr	r3, [pc, #120]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1f0      	bne.n	80068f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d038      	beq.n	800698c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d019      	beq.n	8006956 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006922:	4b16      	ldr	r3, [pc, #88]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006926:	4a15      	ldr	r2, [pc, #84]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692e:	f7fb fa7d 	bl	8001e2c <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006934:	e008      	b.n	8006948 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006936:	f7fb fa79 	bl	8001e2c <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e176      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006948:	4b0c      	ldr	r3, [pc, #48]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 800694a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0f0      	beq.n	8006936 <HAL_RCC_OscConfig+0x23a>
 8006954:	e01a      	b.n	800698c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006956:	4b09      	ldr	r3, [pc, #36]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695a:	4a08      	ldr	r2, [pc, #32]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 800695c:	f023 0301 	bic.w	r3, r3, #1
 8006960:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006962:	f7fb fa63 	bl	8001e2c <HAL_GetTick>
 8006966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006968:	e00a      	b.n	8006980 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800696a:	f7fb fa5f 	bl	8001e2c <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d903      	bls.n	8006980 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e15c      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
 800697c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006980:	4b91      	ldr	r3, [pc, #580]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1ee      	bne.n	800696a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80a4 	beq.w	8006ae2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800699a:	4b8b      	ldr	r3, [pc, #556]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10d      	bne.n	80069c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80069a6:	4b88      	ldr	r3, [pc, #544]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069aa:	4a87      	ldr	r2, [pc, #540]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 80069ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80069b2:	4b85      	ldr	r3, [pc, #532]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ba:	60bb      	str	r3, [r7, #8]
 80069bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069c2:	4b82      	ldr	r3, [pc, #520]	@ (8006bcc <HAL_RCC_OscConfig+0x4d0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d118      	bne.n	8006a00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80069ce:	4b7f      	ldr	r3, [pc, #508]	@ (8006bcc <HAL_RCC_OscConfig+0x4d0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a7e      	ldr	r2, [pc, #504]	@ (8006bcc <HAL_RCC_OscConfig+0x4d0>)
 80069d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069da:	f7fb fa27 	bl	8001e2c <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e2:	f7fb fa23 	bl	8001e2c <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b64      	cmp	r3, #100	@ 0x64
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e120      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069f4:	4b75      	ldr	r3, [pc, #468]	@ (8006bcc <HAL_RCC_OscConfig+0x4d0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0f0      	beq.n	80069e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d106      	bne.n	8006a16 <HAL_RCC_OscConfig+0x31a>
 8006a08:	4b6f      	ldr	r3, [pc, #444]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a0e:	f043 0301 	orr.w	r3, r3, #1
 8006a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a14:	e02d      	b.n	8006a72 <HAL_RCC_OscConfig+0x376>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10c      	bne.n	8006a38 <HAL_RCC_OscConfig+0x33c>
 8006a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a22:	4a69      	ldr	r2, [pc, #420]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a2a:	4b67      	ldr	r3, [pc, #412]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2e:	4a66      	ldr	r2, [pc, #408]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a30:	f023 0304 	bic.w	r3, r3, #4
 8006a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a36:	e01c      	b.n	8006a72 <HAL_RCC_OscConfig+0x376>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b05      	cmp	r3, #5
 8006a3e:	d10c      	bne.n	8006a5a <HAL_RCC_OscConfig+0x35e>
 8006a40:	4b61      	ldr	r3, [pc, #388]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a44:	4a60      	ldr	r2, [pc, #384]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a46:	f043 0304 	orr.w	r3, r3, #4
 8006a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a4c:	4b5e      	ldr	r3, [pc, #376]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a50:	4a5d      	ldr	r2, [pc, #372]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a52:	f043 0301 	orr.w	r3, r3, #1
 8006a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a58:	e00b      	b.n	8006a72 <HAL_RCC_OscConfig+0x376>
 8006a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5e:	4a5a      	ldr	r2, [pc, #360]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a60:	f023 0301 	bic.w	r3, r3, #1
 8006a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a66:	4b58      	ldr	r3, [pc, #352]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6a:	4a57      	ldr	r2, [pc, #348]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a6c:	f023 0304 	bic.w	r3, r3, #4
 8006a70:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d015      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7a:	f7fb f9d7 	bl	8001e2c <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a80:	e00a      	b.n	8006a98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a82:	f7fb f9d3 	bl	8001e2c <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e0ce      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a98:	4b4b      	ldr	r3, [pc, #300]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0ee      	beq.n	8006a82 <HAL_RCC_OscConfig+0x386>
 8006aa4:	e014      	b.n	8006ad0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa6:	f7fb f9c1 	bl	8001e2c <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aac:	e00a      	b.n	8006ac4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aae:	f7fb f9bd 	bl	8001e2c <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e0b8      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac4:	4b40      	ldr	r3, [pc, #256]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1ee      	bne.n	8006aae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d105      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ada:	4a3b      	ldr	r2, [pc, #236]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 80a4 	beq.w	8006c34 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aec:	4b36      	ldr	r3, [pc, #216]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 030c 	and.w	r3, r3, #12
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d06b      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d149      	bne.n	8006b94 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b00:	4b31      	ldr	r3, [pc, #196]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a30      	ldr	r2, [pc, #192]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fb f98e 	bl	8001e2c <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b14:	f7fb f98a 	bl	8001e2c <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e087      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b26:	4b28      	ldr	r3, [pc, #160]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1f0      	bne.n	8006b14 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69da      	ldr	r2, [r3, #28]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	019b      	lsls	r3, r3, #6
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	041b      	lsls	r3, r3, #16
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b54:	061b      	lsls	r3, r3, #24
 8006b56:	4313      	orrs	r3, r2
 8006b58:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b5a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b5e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b60:	4b19      	ldr	r3, [pc, #100]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a18      	ldr	r2, [pc, #96]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6c:	f7fb f95e 	bl	8001e2c <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b74:	f7fb f95a 	bl	8001e2c <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e057      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b86:	4b10      	ldr	r3, [pc, #64]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0f0      	beq.n	8006b74 <HAL_RCC_OscConfig+0x478>
 8006b92:	e04f      	b.n	8006c34 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b94:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a0b      	ldr	r2, [pc, #44]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba0:	f7fb f944 	bl	8001e2c <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba8:	f7fb f940 	bl	8001e2c <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e03d      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bba:	4b03      	ldr	r3, [pc, #12]	@ (8006bc8 <HAL_RCC_OscConfig+0x4cc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f0      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x4ac>
 8006bc6:	e035      	b.n	8006c34 <HAL_RCC_OscConfig+0x538>
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c40 <HAL_RCC_OscConfig+0x544>)
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d028      	beq.n	8006c30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d121      	bne.n	8006c30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d11a      	bne.n	8006c30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c00:	4013      	ands	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d111      	bne.n	8006c30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d107      	bne.n	8006c30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40023800 	.word	0x40023800

08006c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0d0      	b.n	8006dfe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8006e08 <HAL_RCC_ClockConfig+0x1c4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d910      	bls.n	8006c8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6a:	4b67      	ldr	r3, [pc, #412]	@ (8006e08 <HAL_RCC_ClockConfig+0x1c4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 020f 	bic.w	r2, r3, #15
 8006c72:	4965      	ldr	r1, [pc, #404]	@ (8006e08 <HAL_RCC_ClockConfig+0x1c4>)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7a:	4b63      	ldr	r3, [pc, #396]	@ (8006e08 <HAL_RCC_ClockConfig+0x1c4>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d001      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e0b8      	b.n	8006dfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d020      	beq.n	8006cda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d005      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ca4:	4b59      	ldr	r3, [pc, #356]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	4a58      	ldr	r2, [pc, #352]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006caa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006cae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0308 	and.w	r3, r3, #8
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cbc:	4b53      	ldr	r3, [pc, #332]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	4a52      	ldr	r2, [pc, #328]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006cc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006cc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cc8:	4b50      	ldr	r3, [pc, #320]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	494d      	ldr	r1, [pc, #308]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d040      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d107      	bne.n	8006cfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cee:	4b47      	ldr	r3, [pc, #284]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d115      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e07f      	b.n	8006dfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d107      	bne.n	8006d16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d06:	4b41      	ldr	r3, [pc, #260]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e073      	b.n	8006dfe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d16:	4b3d      	ldr	r3, [pc, #244]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e06b      	b.n	8006dfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d26:	4b39      	ldr	r3, [pc, #228]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f023 0203 	bic.w	r2, r3, #3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	4936      	ldr	r1, [pc, #216]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d38:	f7fb f878 	bl	8001e2c <HAL_GetTick>
 8006d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d3e:	e00a      	b.n	8006d56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d40:	f7fb f874 	bl	8001e2c <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e053      	b.n	8006dfe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d56:	4b2d      	ldr	r3, [pc, #180]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 020c 	and.w	r2, r3, #12
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d1eb      	bne.n	8006d40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d68:	4b27      	ldr	r3, [pc, #156]	@ (8006e08 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 030f 	and.w	r3, r3, #15
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d210      	bcs.n	8006d98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d76:	4b24      	ldr	r3, [pc, #144]	@ (8006e08 <HAL_RCC_ClockConfig+0x1c4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f023 020f 	bic.w	r2, r3, #15
 8006d7e:	4922      	ldr	r1, [pc, #136]	@ (8006e08 <HAL_RCC_ClockConfig+0x1c4>)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d86:	4b20      	ldr	r3, [pc, #128]	@ (8006e08 <HAL_RCC_ClockConfig+0x1c4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d001      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e032      	b.n	8006dfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d008      	beq.n	8006db6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006da4:	4b19      	ldr	r3, [pc, #100]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	4916      	ldr	r1, [pc, #88]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dc2:	4b12      	ldr	r3, [pc, #72]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	490e      	ldr	r1, [pc, #56]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006dd6:	f000 f821 	bl	8006e1c <HAL_RCC_GetSysClockFreq>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c8>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	091b      	lsrs	r3, r3, #4
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	490a      	ldr	r1, [pc, #40]	@ (8006e10 <HAL_RCC_ClockConfig+0x1cc>)
 8006de8:	5ccb      	ldrb	r3, [r1, r3]
 8006dea:	fa22 f303 	lsr.w	r3, r2, r3
 8006dee:	4a09      	ldr	r2, [pc, #36]	@ (8006e14 <HAL_RCC_ClockConfig+0x1d0>)
 8006df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006df2:	4b09      	ldr	r3, [pc, #36]	@ (8006e18 <HAL_RCC_ClockConfig+0x1d4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fa fcce 	bl	8001798 <HAL_InitTick>

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	40023c00 	.word	0x40023c00
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	0801e0b4 	.word	0x0801e0b4
 8006e14:	20000000 	.word	0x20000000
 8006e18:	20000004 	.word	0x20000004

08006e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e20:	b094      	sub	sp, #80	@ 0x50
 8006e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e28:	2300      	movs	r3, #0
 8006e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e34:	4b79      	ldr	r3, [pc, #484]	@ (800701c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f003 030c 	and.w	r3, r3, #12
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d00d      	beq.n	8006e5c <HAL_RCC_GetSysClockFreq+0x40>
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	f200 80e1 	bhi.w	8007008 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_RCC_GetSysClockFreq+0x34>
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	d003      	beq.n	8006e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e4e:	e0db      	b.n	8007008 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e50:	4b73      	ldr	r3, [pc, #460]	@ (8007020 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e54:	e0db      	b.n	800700e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e56:	4b73      	ldr	r3, [pc, #460]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e5a:	e0d8      	b.n	800700e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800701c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e64:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006e66:	4b6d      	ldr	r3, [pc, #436]	@ (800701c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d063      	beq.n	8006f3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e72:	4b6a      	ldr	r3, [pc, #424]	@ (800701c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	099b      	lsrs	r3, r3, #6
 8006e78:	2200      	movs	r2, #0
 8006e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e86:	2300      	movs	r3, #0
 8006e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006e8e:	4622      	mov	r2, r4
 8006e90:	462b      	mov	r3, r5
 8006e92:	f04f 0000 	mov.w	r0, #0
 8006e96:	f04f 0100 	mov.w	r1, #0
 8006e9a:	0159      	lsls	r1, r3, #5
 8006e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ea0:	0150      	lsls	r0, r2, #5
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	1a51      	subs	r1, r2, r1
 8006eaa:	6139      	str	r1, [r7, #16]
 8006eac:	4629      	mov	r1, r5
 8006eae:	eb63 0301 	sbc.w	r3, r3, r1
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ec0:	4659      	mov	r1, fp
 8006ec2:	018b      	lsls	r3, r1, #6
 8006ec4:	4651      	mov	r1, sl
 8006ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006eca:	4651      	mov	r1, sl
 8006ecc:	018a      	lsls	r2, r1, #6
 8006ece:	4651      	mov	r1, sl
 8006ed0:	ebb2 0801 	subs.w	r8, r2, r1
 8006ed4:	4659      	mov	r1, fp
 8006ed6:	eb63 0901 	sbc.w	r9, r3, r1
 8006eda:	f04f 0200 	mov.w	r2, #0
 8006ede:	f04f 0300 	mov.w	r3, #0
 8006ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eee:	4690      	mov	r8, r2
 8006ef0:	4699      	mov	r9, r3
 8006ef2:	4623      	mov	r3, r4
 8006ef4:	eb18 0303 	adds.w	r3, r8, r3
 8006ef8:	60bb      	str	r3, [r7, #8]
 8006efa:	462b      	mov	r3, r5
 8006efc:	eb49 0303 	adc.w	r3, r9, r3
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f0e:	4629      	mov	r1, r5
 8006f10:	024b      	lsls	r3, r1, #9
 8006f12:	4621      	mov	r1, r4
 8006f14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f18:	4621      	mov	r1, r4
 8006f1a:	024a      	lsls	r2, r1, #9
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f22:	2200      	movs	r2, #0
 8006f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f2c:	f7f9 f9c0 	bl	80002b0 <__aeabi_uldivmod>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4613      	mov	r3, r2
 8006f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f38:	e058      	b.n	8006fec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f3a:	4b38      	ldr	r3, [pc, #224]	@ (800701c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	099b      	lsrs	r3, r3, #6
 8006f40:	2200      	movs	r2, #0
 8006f42:	4618      	mov	r0, r3
 8006f44:	4611      	mov	r1, r2
 8006f46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f4a:	623b      	str	r3, [r7, #32]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f54:	4642      	mov	r2, r8
 8006f56:	464b      	mov	r3, r9
 8006f58:	f04f 0000 	mov.w	r0, #0
 8006f5c:	f04f 0100 	mov.w	r1, #0
 8006f60:	0159      	lsls	r1, r3, #5
 8006f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f66:	0150      	lsls	r0, r2, #5
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4641      	mov	r1, r8
 8006f6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f72:	4649      	mov	r1, r9
 8006f74:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f8c:	ebb2 040a 	subs.w	r4, r2, sl
 8006f90:	eb63 050b 	sbc.w	r5, r3, fp
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	00eb      	lsls	r3, r5, #3
 8006f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fa2:	00e2      	lsls	r2, r4, #3
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	461d      	mov	r5, r3
 8006fa8:	4643      	mov	r3, r8
 8006faa:	18e3      	adds	r3, r4, r3
 8006fac:	603b      	str	r3, [r7, #0]
 8006fae:	464b      	mov	r3, r9
 8006fb0:	eb45 0303 	adc.w	r3, r5, r3
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	028b      	lsls	r3, r1, #10
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fcc:	4621      	mov	r1, r4
 8006fce:	028a      	lsls	r2, r1, #10
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	61fa      	str	r2, [r7, #28]
 8006fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fe0:	f7f9 f966 	bl	80002b0 <__aeabi_uldivmod>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4613      	mov	r3, r2
 8006fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006fec:	4b0b      	ldr	r3, [pc, #44]	@ (800701c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006ffc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007000:	fbb2 f3f3 	udiv	r3, r2, r3
 8007004:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007006:	e002      	b.n	800700e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007008:	4b05      	ldr	r3, [pc, #20]	@ (8007020 <HAL_RCC_GetSysClockFreq+0x204>)
 800700a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800700c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800700e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007010:	4618      	mov	r0, r3
 8007012:	3750      	adds	r7, #80	@ 0x50
 8007014:	46bd      	mov	sp, r7
 8007016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800701a:	bf00      	nop
 800701c:	40023800 	.word	0x40023800
 8007020:	00f42400 	.word	0x00f42400
 8007024:	007a1200 	.word	0x007a1200

08007028 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800702c:	4b03      	ldr	r3, [pc, #12]	@ (800703c <HAL_RCC_GetHCLKFreq+0x14>)
 800702e:	681b      	ldr	r3, [r3, #0]
}
 8007030:	4618      	mov	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20000000 	.word	0x20000000

08007040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007044:	f7ff fff0 	bl	8007028 <HAL_RCC_GetHCLKFreq>
 8007048:	4602      	mov	r2, r0
 800704a:	4b05      	ldr	r3, [pc, #20]	@ (8007060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	0a9b      	lsrs	r3, r3, #10
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	4903      	ldr	r1, [pc, #12]	@ (8007064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007056:	5ccb      	ldrb	r3, [r1, r3]
 8007058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800705c:	4618      	mov	r0, r3
 800705e:	bd80      	pop	{r7, pc}
 8007060:	40023800 	.word	0x40023800
 8007064:	0801e0c4 	.word	0x0801e0c4

08007068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800706c:	f7ff ffdc 	bl	8007028 <HAL_RCC_GetHCLKFreq>
 8007070:	4602      	mov	r2, r0
 8007072:	4b05      	ldr	r3, [pc, #20]	@ (8007088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	0b5b      	lsrs	r3, r3, #13
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	4903      	ldr	r1, [pc, #12]	@ (800708c <HAL_RCC_GetPCLK2Freq+0x24>)
 800707e:	5ccb      	ldrb	r3, [r1, r3]
 8007080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007084:	4618      	mov	r0, r3
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40023800 	.word	0x40023800
 800708c:	0801e0c4 	.word	0x0801e0c4

08007090 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	220f      	movs	r2, #15
 800709e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070a0:	4b12      	ldr	r3, [pc, #72]	@ (80070ec <HAL_RCC_GetClockConfig+0x5c>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 0203 	and.w	r2, r3, #3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80070ac:	4b0f      	ldr	r3, [pc, #60]	@ (80070ec <HAL_RCC_GetClockConfig+0x5c>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80070b8:	4b0c      	ldr	r3, [pc, #48]	@ (80070ec <HAL_RCC_GetClockConfig+0x5c>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80070c4:	4b09      	ldr	r3, [pc, #36]	@ (80070ec <HAL_RCC_GetClockConfig+0x5c>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	08db      	lsrs	r3, r3, #3
 80070ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070d2:	4b07      	ldr	r3, [pc, #28]	@ (80070f0 <HAL_RCC_GetClockConfig+0x60>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 020f 	and.w	r2, r3, #15
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	601a      	str	r2, [r3, #0]
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40023800 	.word	0x40023800
 80070f0:	40023c00 	.word	0x40023c00

080070f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d012      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800711c:	4b69      	ldr	r3, [pc, #420]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	4a68      	ldr	r2, [pc, #416]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007122:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007126:	6093      	str	r3, [r2, #8]
 8007128:	4b66      	ldr	r3, [pc, #408]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007130:	4964      	ldr	r1, [pc, #400]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007132:	4313      	orrs	r3, r2
 8007134:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800713e:	2301      	movs	r3, #1
 8007140:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d017      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800714e:	4b5d      	ldr	r3, [pc, #372]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007154:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715c:	4959      	ldr	r1, [pc, #356]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800715e:	4313      	orrs	r3, r2
 8007160:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007168:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800716c:	d101      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800716e:	2301      	movs	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800717a:	2301      	movs	r3, #1
 800717c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d017      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800718a:	4b4e      	ldr	r3, [pc, #312]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800718c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007190:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007198:	494a      	ldr	r1, [pc, #296]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071a8:	d101      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80071aa:	2301      	movs	r3, #1
 80071ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80071b6:	2301      	movs	r3, #1
 80071b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80071c6:	2301      	movs	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 808b 	beq.w	80072ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071d8:	4b3a      	ldr	r3, [pc, #232]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071dc:	4a39      	ldr	r2, [pc, #228]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80071e4:	4b37      	ldr	r3, [pc, #220]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071ec:	60bb      	str	r3, [r7, #8]
 80071ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071f0:	4b35      	ldr	r3, [pc, #212]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a34      	ldr	r2, [pc, #208]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071fc:	f7fa fe16 	bl	8001e2c <HAL_GetTick>
 8007200:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007202:	e008      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007204:	f7fa fe12 	bl	8001e2c <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b64      	cmp	r3, #100	@ 0x64
 8007210:	d901      	bls.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e357      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007216:	4b2c      	ldr	r3, [pc, #176]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f0      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007222:	4b28      	ldr	r3, [pc, #160]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800722a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d035      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	429a      	cmp	r2, r3
 800723e:	d02e      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007240:	4b20      	ldr	r3, [pc, #128]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007248:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800724a:	4b1e      	ldr	r3, [pc, #120]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800724e:	4a1d      	ldr	r2, [pc, #116]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007254:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007256:	4b1b      	ldr	r3, [pc, #108]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800725a:	4a1a      	ldr	r2, [pc, #104]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800725c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007260:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007262:	4a18      	ldr	r2, [pc, #96]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007268:	4b16      	ldr	r3, [pc, #88]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800726a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b01      	cmp	r3, #1
 8007272:	d114      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007274:	f7fa fdda 	bl	8001e2c <HAL_GetTick>
 8007278:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800727a:	e00a      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800727c:	f7fa fdd6 	bl	8001e2c <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800728a:	4293      	cmp	r3, r2
 800728c:	d901      	bls.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e319      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007292:	4b0c      	ldr	r3, [pc, #48]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0ee      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072aa:	d111      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80072ac:	4b05      	ldr	r3, [pc, #20]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80072b8:	4b04      	ldr	r3, [pc, #16]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80072ba:	400b      	ands	r3, r1
 80072bc:	4901      	ldr	r1, [pc, #4]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	608b      	str	r3, [r1, #8]
 80072c2:	e00b      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80072c4:	40023800 	.word	0x40023800
 80072c8:	40007000 	.word	0x40007000
 80072cc:	0ffffcff 	.word	0x0ffffcff
 80072d0:	4baa      	ldr	r3, [pc, #680]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	4aa9      	ldr	r2, [pc, #676]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80072da:	6093      	str	r3, [r2, #8]
 80072dc:	4ba7      	ldr	r3, [pc, #668]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072e8:	49a4      	ldr	r1, [pc, #656]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0310 	and.w	r3, r3, #16
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d010      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072fa:	4ba0      	ldr	r3, [pc, #640]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007300:	4a9e      	ldr	r2, [pc, #632]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007306:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800730a:	4b9c      	ldr	r3, [pc, #624]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800730c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007314:	4999      	ldr	r1, [pc, #612]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007328:	4b94      	ldr	r3, [pc, #592]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800732a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800732e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007336:	4991      	ldr	r1, [pc, #580]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007338:	4313      	orrs	r3, r2
 800733a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800734a:	4b8c      	ldr	r3, [pc, #560]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800734c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007350:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007358:	4988      	ldr	r1, [pc, #544]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800735a:	4313      	orrs	r3, r2
 800735c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00a      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800736c:	4b83      	ldr	r3, [pc, #524]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800736e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007372:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800737a:	4980      	ldr	r1, [pc, #512]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737c:	4313      	orrs	r3, r2
 800737e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800738e:	4b7b      	ldr	r3, [pc, #492]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007394:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739c:	4977      	ldr	r1, [pc, #476]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00a      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073b0:	4b72      	ldr	r3, [pc, #456]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b6:	f023 0203 	bic.w	r2, r3, #3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073be:	496f      	ldr	r1, [pc, #444]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073d2:	4b6a      	ldr	r3, [pc, #424]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d8:	f023 020c 	bic.w	r2, r3, #12
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e0:	4966      	ldr	r1, [pc, #408]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00a      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073f4:	4b61      	ldr	r3, [pc, #388]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073fa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007402:	495e      	ldr	r1, [pc, #376]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007404:	4313      	orrs	r3, r2
 8007406:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007416:	4b59      	ldr	r3, [pc, #356]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007424:	4955      	ldr	r1, [pc, #340]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007438:	4b50      	ldr	r3, [pc, #320]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007446:	494d      	ldr	r1, [pc, #308]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007448:	4313      	orrs	r3, r2
 800744a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800745a:	4b48      	ldr	r3, [pc, #288]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007460:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007468:	4944      	ldr	r1, [pc, #272]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800746a:	4313      	orrs	r3, r2
 800746c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800747c:	4b3f      	ldr	r3, [pc, #252]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800747e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007482:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800748a:	493c      	ldr	r1, [pc, #240]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800748c:	4313      	orrs	r3, r2
 800748e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800749e:	4b37      	ldr	r3, [pc, #220]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ac:	4933      	ldr	r1, [pc, #204]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074c0:	4b2e      	ldr	r3, [pc, #184]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074ce:	492b      	ldr	r1, [pc, #172]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d011      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80074e2:	4b26      	ldr	r3, [pc, #152]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074f0:	4922      	ldr	r1, [pc, #136]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007500:	d101      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007502:	2301      	movs	r3, #1
 8007504:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0308 	and.w	r3, r3, #8
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007512:	2301      	movs	r3, #1
 8007514:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007522:	4b16      	ldr	r3, [pc, #88]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007528:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007530:	4912      	ldr	r1, [pc, #72]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007532:	4313      	orrs	r3, r2
 8007534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007544:	4b0d      	ldr	r3, [pc, #52]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800754a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007554:	4909      	ldr	r1, [pc, #36]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d006      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80d9 	beq.w	8007722 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007570:	4b02      	ldr	r3, [pc, #8]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a01      	ldr	r2, [pc, #4]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007576:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800757a:	e001      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800757c:	40023800 	.word	0x40023800
 8007580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007582:	f7fa fc53 	bl	8001e2c <HAL_GetTick>
 8007586:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007588:	e008      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800758a:	f7fa fc4f 	bl	8001e2c <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b64      	cmp	r3, #100	@ 0x64
 8007596:	d901      	bls.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e194      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800759c:	4b6c      	ldr	r3, [pc, #432]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1f0      	bne.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d021      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d11d      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80075bc:	4b64      	ldr	r3, [pc, #400]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075c2:	0c1b      	lsrs	r3, r3, #16
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80075ca:	4b61      	ldr	r3, [pc, #388]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075d0:	0e1b      	lsrs	r3, r3, #24
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	019a      	lsls	r2, r3, #6
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	041b      	lsls	r3, r3, #16
 80075e2:	431a      	orrs	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	061b      	lsls	r3, r3, #24
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	071b      	lsls	r3, r3, #28
 80075f0:	4957      	ldr	r1, [pc, #348]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d004      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007608:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800760c:	d00a      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007616:	2b00      	cmp	r3, #0
 8007618:	d02e      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007622:	d129      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007624:	4b4a      	ldr	r3, [pc, #296]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800762a:	0c1b      	lsrs	r3, r3, #16
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007632:	4b47      	ldr	r3, [pc, #284]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007638:	0f1b      	lsrs	r3, r3, #28
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	019a      	lsls	r2, r3, #6
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	041b      	lsls	r3, r3, #16
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	061b      	lsls	r3, r3, #24
 8007652:	431a      	orrs	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	071b      	lsls	r3, r3, #28
 8007658:	493d      	ldr	r1, [pc, #244]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800765a:	4313      	orrs	r3, r2
 800765c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007660:	4b3b      	ldr	r3, [pc, #236]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007666:	f023 021f 	bic.w	r2, r3, #31
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766e:	3b01      	subs	r3, #1
 8007670:	4937      	ldr	r1, [pc, #220]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01d      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007684:	4b32      	ldr	r3, [pc, #200]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800768a:	0e1b      	lsrs	r3, r3, #24
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007692:	4b2f      	ldr	r3, [pc, #188]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007698:	0f1b      	lsrs	r3, r3, #28
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	019a      	lsls	r2, r3, #6
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	041b      	lsls	r3, r3, #16
 80076ac:	431a      	orrs	r2, r3
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	061b      	lsls	r3, r3, #24
 80076b2:	431a      	orrs	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	071b      	lsls	r3, r3, #28
 80076b8:	4925      	ldr	r1, [pc, #148]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d011      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	019a      	lsls	r2, r3, #6
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	041b      	lsls	r3, r3, #16
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	061b      	lsls	r3, r3, #24
 80076e0:	431a      	orrs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	071b      	lsls	r3, r3, #28
 80076e8:	4919      	ldr	r1, [pc, #100]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80076f0:	4b17      	ldr	r3, [pc, #92]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a16      	ldr	r2, [pc, #88]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076fc:	f7fa fb96 	bl	8001e2c <HAL_GetTick>
 8007700:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007702:	e008      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007704:	f7fa fb92 	bl	8001e2c <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b64      	cmp	r3, #100	@ 0x64
 8007710:	d901      	bls.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e0d7      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007716:	4b0e      	ldr	r3, [pc, #56]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0f0      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	2b01      	cmp	r3, #1
 8007726:	f040 80cd 	bne.w	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800772a:	4b09      	ldr	r3, [pc, #36]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a08      	ldr	r2, [pc, #32]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007736:	f7fa fb79 	bl	8001e2c <HAL_GetTick>
 800773a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800773c:	e00a      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800773e:	f7fa fb75 	bl	8001e2c <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b64      	cmp	r3, #100	@ 0x64
 800774a:	d903      	bls.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e0ba      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007750:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007754:	4b5e      	ldr	r3, [pc, #376]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800775c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007760:	d0ed      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800777e:	2b00      	cmp	r3, #0
 8007780:	d02e      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d12a      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800778a:	4b51      	ldr	r3, [pc, #324]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800778c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007790:	0c1b      	lsrs	r3, r3, #16
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007798:	4b4d      	ldr	r3, [pc, #308]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800779a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800779e:	0f1b      	lsrs	r3, r3, #28
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	019a      	lsls	r2, r3, #6
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	041b      	lsls	r3, r3, #16
 80077b0:	431a      	orrs	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	061b      	lsls	r3, r3, #24
 80077b8:	431a      	orrs	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	071b      	lsls	r3, r3, #28
 80077be:	4944      	ldr	r1, [pc, #272]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80077c6:	4b42      	ldr	r3, [pc, #264]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d4:	3b01      	subs	r3, #1
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	493d      	ldr	r1, [pc, #244]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d022      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077f4:	d11d      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077f6:	4b36      	ldr	r3, [pc, #216]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077fc:	0e1b      	lsrs	r3, r3, #24
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007804:	4b32      	ldr	r3, [pc, #200]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800780a:	0f1b      	lsrs	r3, r3, #28
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	019a      	lsls	r2, r3, #6
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	041b      	lsls	r3, r3, #16
 800781e:	431a      	orrs	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	061b      	lsls	r3, r3, #24
 8007824:	431a      	orrs	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	071b      	lsls	r3, r3, #28
 800782a:	4929      	ldr	r1, [pc, #164]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800782c:	4313      	orrs	r3, r2
 800782e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d028      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800783e:	4b24      	ldr	r3, [pc, #144]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007844:	0e1b      	lsrs	r3, r3, #24
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800784c:	4b20      	ldr	r3, [pc, #128]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800784e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	019a      	lsls	r2, r3, #6
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	041b      	lsls	r3, r3, #16
 8007864:	431a      	orrs	r2, r3
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	061b      	lsls	r3, r3, #24
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	071b      	lsls	r3, r3, #28
 8007872:	4917      	ldr	r1, [pc, #92]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007874:	4313      	orrs	r3, r2
 8007876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800787a:	4b15      	ldr	r3, [pc, #84]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800787c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007880:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	4911      	ldr	r1, [pc, #68]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800788a:	4313      	orrs	r3, r2
 800788c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007890:	4b0f      	ldr	r3, [pc, #60]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a0e      	ldr	r2, [pc, #56]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800789a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800789c:	f7fa fac6 	bl	8001e2c <HAL_GetTick>
 80078a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078a2:	e008      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80078a4:	f7fa fac2 	bl	8001e2c <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b64      	cmp	r3, #100	@ 0x64
 80078b0:	d901      	bls.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e007      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078b6:	4b06      	ldr	r3, [pc, #24]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078c2:	d1ef      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3720      	adds	r7, #32
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	40023800 	.word	0x40023800

080078d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e049      	b.n	800797a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f841 	bl	8007982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f000 f9e8 	bl	8007ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800798a:	bf00      	nop
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
	...

08007998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d001      	beq.n	80079b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e054      	b.n	8007a5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0201 	orr.w	r2, r2, #1
 80079c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a26      	ldr	r2, [pc, #152]	@ (8007a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d022      	beq.n	8007a18 <HAL_TIM_Base_Start_IT+0x80>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079da:	d01d      	beq.n	8007a18 <HAL_TIM_Base_Start_IT+0x80>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a22      	ldr	r2, [pc, #136]	@ (8007a6c <HAL_TIM_Base_Start_IT+0xd4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d018      	beq.n	8007a18 <HAL_TIM_Base_Start_IT+0x80>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a21      	ldr	r2, [pc, #132]	@ (8007a70 <HAL_TIM_Base_Start_IT+0xd8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d013      	beq.n	8007a18 <HAL_TIM_Base_Start_IT+0x80>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007a74 <HAL_TIM_Base_Start_IT+0xdc>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00e      	beq.n	8007a18 <HAL_TIM_Base_Start_IT+0x80>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007a78 <HAL_TIM_Base_Start_IT+0xe0>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d009      	beq.n	8007a18 <HAL_TIM_Base_Start_IT+0x80>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a1c      	ldr	r2, [pc, #112]	@ (8007a7c <HAL_TIM_Base_Start_IT+0xe4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d004      	beq.n	8007a18 <HAL_TIM_Base_Start_IT+0x80>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a1b      	ldr	r2, [pc, #108]	@ (8007a80 <HAL_TIM_Base_Start_IT+0xe8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d115      	bne.n	8007a44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	4b19      	ldr	r3, [pc, #100]	@ (8007a84 <HAL_TIM_Base_Start_IT+0xec>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b06      	cmp	r3, #6
 8007a28:	d015      	beq.n	8007a56 <HAL_TIM_Base_Start_IT+0xbe>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a30:	d011      	beq.n	8007a56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0201 	orr.w	r2, r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a42:	e008      	b.n	8007a56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0201 	orr.w	r2, r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	e000      	b.n	8007a58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	40010000 	.word	0x40010000
 8007a6c:	40000400 	.word	0x40000400
 8007a70:	40000800 	.word	0x40000800
 8007a74:	40000c00 	.word	0x40000c00
 8007a78:	40010400 	.word	0x40010400
 8007a7c:	40014000 	.word	0x40014000
 8007a80:	40001800 	.word	0x40001800
 8007a84:	00010007 	.word	0x00010007

08007a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d020      	beq.n	8007aec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01b      	beq.n	8007aec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0202 	mvn.w	r2, #2
 8007abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f8e9 	bl	8007caa <HAL_TIM_IC_CaptureCallback>
 8007ad8:	e005      	b.n	8007ae6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f8db 	bl	8007c96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f8ec 	bl	8007cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d020      	beq.n	8007b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f003 0304 	and.w	r3, r3, #4
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d01b      	beq.n	8007b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0204 	mvn.w	r2, #4
 8007b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f8c3 	bl	8007caa <HAL_TIM_IC_CaptureCallback>
 8007b24:	e005      	b.n	8007b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f8b5 	bl	8007c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f8c6 	bl	8007cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d020      	beq.n	8007b84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01b      	beq.n	8007b84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f06f 0208 	mvn.w	r2, #8
 8007b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2204      	movs	r2, #4
 8007b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f89d 	bl	8007caa <HAL_TIM_IC_CaptureCallback>
 8007b70:	e005      	b.n	8007b7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f88f 	bl	8007c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f8a0 	bl	8007cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f003 0310 	and.w	r3, r3, #16
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d020      	beq.n	8007bd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01b      	beq.n	8007bd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f06f 0210 	mvn.w	r2, #16
 8007ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2208      	movs	r2, #8
 8007ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f877 	bl	8007caa <HAL_TIM_IC_CaptureCallback>
 8007bbc:	e005      	b.n	8007bca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f869 	bl	8007c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f87a 	bl	8007cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00c      	beq.n	8007bf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d007      	beq.n	8007bf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f06f 0201 	mvn.w	r2, #1
 8007bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7f9 fa32 	bl	8001058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d104      	bne.n	8007c08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00c      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f913 	bl	8007e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00c      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d007      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f90b 	bl	8007e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00c      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d007      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f834 	bl	8007cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f003 0320 	and.w	r3, r3, #32
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00c      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f06f 0220 	mvn.w	r2, #32
 8007c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8d3 	bl	8007e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a43      	ldr	r2, [pc, #268]	@ (8007e08 <TIM_Base_SetConfig+0x120>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d013      	beq.n	8007d28 <TIM_Base_SetConfig+0x40>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d06:	d00f      	beq.n	8007d28 <TIM_Base_SetConfig+0x40>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a40      	ldr	r2, [pc, #256]	@ (8007e0c <TIM_Base_SetConfig+0x124>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00b      	beq.n	8007d28 <TIM_Base_SetConfig+0x40>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a3f      	ldr	r2, [pc, #252]	@ (8007e10 <TIM_Base_SetConfig+0x128>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d007      	beq.n	8007d28 <TIM_Base_SetConfig+0x40>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a3e      	ldr	r2, [pc, #248]	@ (8007e14 <TIM_Base_SetConfig+0x12c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_Base_SetConfig+0x40>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a3d      	ldr	r2, [pc, #244]	@ (8007e18 <TIM_Base_SetConfig+0x130>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d108      	bne.n	8007d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a32      	ldr	r2, [pc, #200]	@ (8007e08 <TIM_Base_SetConfig+0x120>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d02b      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d48:	d027      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8007e0c <TIM_Base_SetConfig+0x124>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d023      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a2e      	ldr	r2, [pc, #184]	@ (8007e10 <TIM_Base_SetConfig+0x128>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d01f      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8007e14 <TIM_Base_SetConfig+0x12c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d01b      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a2c      	ldr	r2, [pc, #176]	@ (8007e18 <TIM_Base_SetConfig+0x130>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d017      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8007e1c <TIM_Base_SetConfig+0x134>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d013      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a2a      	ldr	r2, [pc, #168]	@ (8007e20 <TIM_Base_SetConfig+0x138>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d00f      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a29      	ldr	r2, [pc, #164]	@ (8007e24 <TIM_Base_SetConfig+0x13c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d00b      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a28      	ldr	r2, [pc, #160]	@ (8007e28 <TIM_Base_SetConfig+0x140>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d007      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a27      	ldr	r2, [pc, #156]	@ (8007e2c <TIM_Base_SetConfig+0x144>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d003      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a26      	ldr	r2, [pc, #152]	@ (8007e30 <TIM_Base_SetConfig+0x148>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d108      	bne.n	8007dac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8007e08 <TIM_Base_SetConfig+0x120>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d003      	beq.n	8007dda <TIM_Base_SetConfig+0xf2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a10      	ldr	r2, [pc, #64]	@ (8007e18 <TIM_Base_SetConfig+0x130>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d103      	bne.n	8007de2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	691a      	ldr	r2, [r3, #16]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f043 0204 	orr.w	r2, r3, #4
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	601a      	str	r2, [r3, #0]
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	40010000 	.word	0x40010000
 8007e0c:	40000400 	.word	0x40000400
 8007e10:	40000800 	.word	0x40000800
 8007e14:	40000c00 	.word	0x40000c00
 8007e18:	40010400 	.word	0x40010400
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40014400 	.word	0x40014400
 8007e24:	40014800 	.word	0x40014800
 8007e28:	40001800 	.word	0x40001800
 8007e2c:	40001c00 	.word	0x40001c00
 8007e30:	40002000 	.word	0x40002000

08007e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e040      	b.n	8007f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d106      	bne.n	8007e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7f9 fa4c 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2224      	movs	r2, #36	@ 0x24
 8007e9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0201 	bic.w	r2, r2, #1
 8007eac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 ff7e 	bl	8008db8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fd17 	bl	80088f0 <UART_SetConfig>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e01b      	b.n	8007f04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689a      	ldr	r2, [r3, #8]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fffd 	bl	8008efc <UART_CheckIdleState>
 8007f02:	4603      	mov	r3, r0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08a      	sub	sp, #40	@ 0x28
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	603b      	str	r3, [r7, #0]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	d177      	bne.n	8008014 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <HAL_UART_Transmit+0x24>
 8007f2a:	88fb      	ldrh	r3, [r7, #6]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e070      	b.n	8008016 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2221      	movs	r2, #33	@ 0x21
 8007f40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f42:	f7f9 ff73 	bl	8001e2c <HAL_GetTick>
 8007f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	88fa      	ldrh	r2, [r7, #6]
 8007f4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	88fa      	ldrh	r2, [r7, #6]
 8007f54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f60:	d108      	bne.n	8007f74 <HAL_UART_Transmit+0x68>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d104      	bne.n	8007f74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	61bb      	str	r3, [r7, #24]
 8007f72:	e003      	b.n	8007f7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f7c:	e02f      	b.n	8007fde <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	2180      	movs	r1, #128	@ 0x80
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f001 f80e 	bl	8008faa <UART_WaitOnFlagUntilTimeout>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d004      	beq.n	8007f9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2220      	movs	r2, #32
 8007f98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e03b      	b.n	8008016 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10b      	bne.n	8007fbc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	3302      	adds	r3, #2
 8007fb8:	61bb      	str	r3, [r7, #24]
 8007fba:	e007      	b.n	8007fcc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	781a      	ldrb	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1c9      	bne.n	8007f7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	2140      	movs	r1, #64	@ 0x40
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 ffd8 	bl	8008faa <UART_WaitOnFlagUntilTimeout>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d004      	beq.n	800800a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e005      	b.n	8008016 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2220      	movs	r2, #32
 800800e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	e000      	b.n	8008016 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008014:	2302      	movs	r3, #2
  }
}
 8008016:	4618      	mov	r0, r3
 8008018:	3720      	adds	r7, #32
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08a      	sub	sp, #40	@ 0x28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	4613      	mov	r3, r2
 800802c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008032:	2b20      	cmp	r3, #32
 8008034:	d165      	bne.n	8008102 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <HAL_UART_Transmit_DMA+0x22>
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e05e      	b.n	8008104 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	88fa      	ldrh	r2, [r7, #6]
 8008050:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	88fa      	ldrh	r2, [r7, #6]
 8008058:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2221      	movs	r2, #33	@ 0x21
 8008068:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800806e:	2b00      	cmp	r3, #0
 8008070:	d027      	beq.n	80080c2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008076:	4a25      	ldr	r2, [pc, #148]	@ (800810c <HAL_UART_Transmit_DMA+0xec>)
 8008078:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800807e:	4a24      	ldr	r2, [pc, #144]	@ (8008110 <HAL_UART_Transmit_DMA+0xf0>)
 8008080:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008086:	4a23      	ldr	r2, [pc, #140]	@ (8008114 <HAL_UART_Transmit_DMA+0xf4>)
 8008088:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800808e:	2200      	movs	r2, #0
 8008090:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800809a:	4619      	mov	r1, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3328      	adds	r3, #40	@ 0x28
 80080a2:	461a      	mov	r2, r3
 80080a4:	88fb      	ldrh	r3, [r7, #6]
 80080a6:	f7fa fa8b 	bl	80025c0 <HAL_DMA_Start_IT>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d008      	beq.n	80080c2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2210      	movs	r2, #16
 80080b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2220      	movs	r2, #32
 80080bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e020      	b.n	8008104 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2240      	movs	r2, #64	@ 0x40
 80080c8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3308      	adds	r3, #8
 80080d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	613b      	str	r3, [r7, #16]
   return(result);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3308      	adds	r3, #8
 80080e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ea:	623a      	str	r2, [r7, #32]
 80080ec:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	69f9      	ldr	r1, [r7, #28]
 80080f0:	6a3a      	ldr	r2, [r7, #32]
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e5      	bne.n	80080ca <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	e000      	b.n	8008104 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008102:	2302      	movs	r3, #2
  }
}
 8008104:	4618      	mov	r0, r3
 8008106:	3728      	adds	r7, #40	@ 0x28
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	080092d9 	.word	0x080092d9
 8008110:	0800936f 	.word	0x0800936f
 8008114:	0800955b 	.word	0x0800955b

08008118 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08a      	sub	sp, #40	@ 0x28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800812c:	2b20      	cmp	r3, #32
 800812e:	d132      	bne.n	8008196 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <HAL_UART_Receive_DMA+0x24>
 8008136:	88fb      	ldrh	r3, [r7, #6]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e02b      	b.n	8008198 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d018      	beq.n	8008186 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	613b      	str	r3, [r7, #16]
   return(result);
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008168:	627b      	str	r3, [r7, #36]	@ 0x24
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008172:	623b      	str	r3, [r7, #32]
 8008174:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	69f9      	ldr	r1, [r7, #28]
 8008178:	6a3a      	ldr	r2, [r7, #32]
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e6      	bne.n	8008154 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008186:	88fb      	ldrh	r3, [r7, #6]
 8008188:	461a      	mov	r2, r3
 800818a:	68b9      	ldr	r1, [r7, #8]
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 ff79 	bl	8009084 <UART_Start_Receive_DMA>
 8008192:	4603      	mov	r3, r0
 8008194:	e000      	b.n	8008198 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008196:	2302      	movs	r3, #2
  }
}
 8008198:	4618      	mov	r0, r3
 800819a:	3728      	adds	r7, #40	@ 0x28
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b090      	sub	sp, #64	@ 0x40
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081b4:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081c0:	2b80      	cmp	r3, #128	@ 0x80
 80081c2:	d139      	bne.n	8008238 <HAL_UART_DMAStop+0x98>
 80081c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081c6:	2b21      	cmp	r3, #33	@ 0x21
 80081c8:	d136      	bne.n	8008238 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3308      	adds	r3, #8
 80081d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e5      	bne.n	80081ca <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008202:	2b00      	cmp	r3, #0
 8008204:	d015      	beq.n	8008232 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800820a:	4618      	mov	r0, r3
 800820c:	f7fa fa38 	bl	8002680 <HAL_DMA_Abort>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00d      	beq.n	8008232 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821a:	4618      	mov	r0, r3
 800821c:	f7fa fc5a 	bl	8002ad4 <HAL_DMA_GetError>
 8008220:	4603      	mov	r3, r0
 8008222:	2b20      	cmp	r3, #32
 8008224:	d105      	bne.n	8008232 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2210      	movs	r2, #16
 800822a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e044      	b.n	80082bc <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 ffc6 	bl	80091c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008242:	2b40      	cmp	r3, #64	@ 0x40
 8008244:	d139      	bne.n	80082ba <HAL_UART_DMAStop+0x11a>
 8008246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008248:	2b22      	cmp	r3, #34	@ 0x22
 800824a:	d136      	bne.n	80082ba <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3308      	adds	r3, #8
 8008252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	60bb      	str	r3, [r7, #8]
   return(result);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008262:	633b      	str	r3, [r7, #48]	@ 0x30
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3308      	adds	r3, #8
 800826a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800826c:	61ba      	str	r2, [r7, #24]
 800826e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6979      	ldr	r1, [r7, #20]
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	613b      	str	r3, [r7, #16]
   return(result);
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e5      	bne.n	800824c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008284:	2b00      	cmp	r3, #0
 8008286:	d015      	beq.n	80082b4 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800828c:	4618      	mov	r0, r3
 800828e:	f7fa f9f7 	bl	8002680 <HAL_DMA_Abort>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00d      	beq.n	80082b4 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800829c:	4618      	mov	r0, r3
 800829e:	f7fa fc19 	bl	8002ad4 <HAL_DMA_GetError>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d105      	bne.n	80082b4 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2210      	movs	r2, #16
 80082ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e003      	b.n	80082bc <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 ffab 	bl	8009210 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3740      	adds	r7, #64	@ 0x40
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b0ba      	sub	sp, #232	@ 0xe8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80082ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80082f2:	4013      	ands	r3, r2
 80082f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80082f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d115      	bne.n	800832c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00f      	beq.n	800832c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800830c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d009      	beq.n	800832c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 82b1 	beq.w	8008884 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
      }
      return;
 800832a:	e2ab      	b.n	8008884 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800832c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 8117 	beq.w	8008564 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008346:	4b85      	ldr	r3, [pc, #532]	@ (800855c <HAL_UART_IRQHandler+0x298>)
 8008348:	4013      	ands	r3, r2
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 810a 	beq.w	8008564 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d011      	beq.n	8008380 <HAL_UART_IRQHandler+0xbc>
 800835c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2201      	movs	r2, #1
 800836e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008376:	f043 0201 	orr.w	r2, r3, #1
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d011      	beq.n	80083b0 <HAL_UART_IRQHandler+0xec>
 800838c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2202      	movs	r2, #2
 800839e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083a6:	f043 0204 	orr.w	r2, r3, #4
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d011      	beq.n	80083e0 <HAL_UART_IRQHandler+0x11c>
 80083bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2204      	movs	r2, #4
 80083ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083d6:	f043 0202 	orr.w	r2, r3, #2
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d017      	beq.n	800841c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d105      	bne.n	8008404 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80083f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2208      	movs	r2, #8
 800840a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008412:	f043 0208 	orr.w	r2, r3, #8
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800841c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008424:	2b00      	cmp	r3, #0
 8008426:	d012      	beq.n	800844e <HAL_UART_IRQHandler+0x18a>
 8008428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800842c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00c      	beq.n	800844e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800843c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008444:	f043 0220 	orr.w	r2, r3, #32
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 8217 	beq.w	8008888 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800845a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00d      	beq.n	8008482 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b00      	cmp	r3, #0
 8008470:	d007      	beq.n	8008482 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008488:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008496:	2b40      	cmp	r3, #64	@ 0x40
 8008498:	d005      	beq.n	80084a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800849a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800849e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d04f      	beq.n	8008546 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 feb2 	bl	8009210 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084b6:	2b40      	cmp	r3, #64	@ 0x40
 80084b8:	d141      	bne.n	800853e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3308      	adds	r3, #8
 80084c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80084d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80084e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80084ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80084f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80084fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1d9      	bne.n	80084ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800850a:	2b00      	cmp	r3, #0
 800850c:	d013      	beq.n	8008536 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008512:	4a13      	ldr	r2, [pc, #76]	@ (8008560 <HAL_UART_IRQHandler+0x29c>)
 8008514:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800851a:	4618      	mov	r0, r3
 800851c:	f7fa f920 	bl	8002760 <HAL_DMA_Abort_IT>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d017      	beq.n	8008556 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800852a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008534:	e00f      	b.n	8008556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f9c4 	bl	80088c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800853c:	e00b      	b.n	8008556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f9c0 	bl	80088c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008544:	e007      	b.n	8008556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f9bc 	bl	80088c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008554:	e198      	b.n	8008888 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008556:	bf00      	nop
    return;
 8008558:	e196      	b.n	8008888 <HAL_UART_IRQHandler+0x5c4>
 800855a:	bf00      	nop
 800855c:	04000120 	.word	0x04000120
 8008560:	080095d9 	.word	0x080095d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008568:	2b01      	cmp	r3, #1
 800856a:	f040 8166 	bne.w	800883a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800856e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008572:	f003 0310 	and.w	r3, r3, #16
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 815f 	beq.w	800883a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800857c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 8158 	beq.w	800883a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2210      	movs	r2, #16
 8008590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800859c:	2b40      	cmp	r3, #64	@ 0x40
 800859e:	f040 80d0 	bne.w	8008742 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 80ab 	beq.w	800870e <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80085be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085c2:	429a      	cmp	r2, r3
 80085c4:	f080 80a3 	bcs.w	800870e <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085dc:	f000 8086 	beq.w	80086ec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80085f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80085f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800860a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800860e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008616:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1da      	bne.n	80085e0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800863a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800863c:	f023 0301 	bic.w	r3, r3, #1
 8008640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3308      	adds	r3, #8
 800864a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800864e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008652:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008656:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e1      	bne.n	800862a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3308      	adds	r3, #8
 800866c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800867c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3308      	adds	r3, #8
 8008686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800868a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800868c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008690:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e3      	bne.n	8008666 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2220      	movs	r2, #32
 80086a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086bc:	f023 0310 	bic.w	r3, r3, #16
 80086c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	461a      	mov	r2, r3
 80086ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e4      	bne.n	80086ac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7f9 ffca 	bl	8002680 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086fe:	b29b      	uxth	r3, r3
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	b29b      	uxth	r3, r3
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f8e6 	bl	80088d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800870c:	e0be      	b.n	800888c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008714:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008718:	429a      	cmp	r2, r3
 800871a:	f040 80b7 	bne.w	800888c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008728:	f040 80b0 	bne.w	800888c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f8cc 	bl	80088d8 <HAL_UARTEx_RxEventCallback>
      return;
 8008740:	e0a4      	b.n	800888c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800874e:	b29b      	uxth	r3, r3
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800875c:	b29b      	uxth	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 8096 	beq.w	8008890 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8008764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 8091 	beq.w	8008890 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800877c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008782:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008790:	647b      	str	r3, [r7, #68]	@ 0x44
 8008792:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008796:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800879e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e4      	bne.n	800876e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3308      	adds	r3, #8
 80087aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	623b      	str	r3, [r7, #32]
   return(result);
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	f023 0301 	bic.w	r3, r3, #1
 80087ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3308      	adds	r3, #8
 80087c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80087c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80087ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e3      	bne.n	80087a4 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2220      	movs	r2, #32
 80087e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f023 0310 	bic.w	r3, r3, #16
 8008804:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	461a      	mov	r2, r3
 800880e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008812:	61fb      	str	r3, [r7, #28]
 8008814:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	69b9      	ldr	r1, [r7, #24]
 8008818:	69fa      	ldr	r2, [r7, #28]
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	617b      	str	r3, [r7, #20]
   return(result);
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e4      	bne.n	80087f0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2202      	movs	r2, #2
 800882a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800882c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f850 	bl	80088d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008838:	e02a      	b.n	8008890 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800883a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800883e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00e      	beq.n	8008864 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800884a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800884e:	2b00      	cmp	r3, #0
 8008850:	d008      	beq.n	8008864 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01c      	beq.n	8008894 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	4798      	blx	r3
    }
    return;
 8008862:	e017      	b.n	8008894 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	d012      	beq.n	8008896 <HAL_UART_IRQHandler+0x5d2>
 8008870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00c      	beq.n	8008896 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 febd 	bl	80095fc <UART_EndTransmit_IT>
    return;
 8008882:	e008      	b.n	8008896 <HAL_UART_IRQHandler+0x5d2>
      return;
 8008884:	bf00      	nop
 8008886:	e006      	b.n	8008896 <HAL_UART_IRQHandler+0x5d2>
    return;
 8008888:	bf00      	nop
 800888a:	e004      	b.n	8008896 <HAL_UART_IRQHandler+0x5d2>
      return;
 800888c:	bf00      	nop
 800888e:	e002      	b.n	8008896 <HAL_UART_IRQHandler+0x5d2>
      return;
 8008890:	bf00      	nop
 8008892:	e000      	b.n	8008896 <HAL_UART_IRQHandler+0x5d2>
    return;
 8008894:	bf00      	nop
  }

}
 8008896:	37e8      	adds	r7, #232	@ 0xe8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	431a      	orrs	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	4313      	orrs	r3, r2
 8008912:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	4ba6      	ldr	r3, [pc, #664]	@ (8008bb4 <UART_SetConfig+0x2c4>)
 800891c:	4013      	ands	r3, r2
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6812      	ldr	r2, [r2, #0]
 8008922:	6979      	ldr	r1, [r7, #20]
 8008924:	430b      	orrs	r3, r1
 8008926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68da      	ldr	r2, [r3, #12]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a1b      	ldr	r3, [r3, #32]
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	430a      	orrs	r2, r1
 8008960:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a94      	ldr	r2, [pc, #592]	@ (8008bb8 <UART_SetConfig+0x2c8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d120      	bne.n	80089ae <UART_SetConfig+0xbe>
 800896c:	4b93      	ldr	r3, [pc, #588]	@ (8008bbc <UART_SetConfig+0x2cc>)
 800896e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008972:	f003 0303 	and.w	r3, r3, #3
 8008976:	2b03      	cmp	r3, #3
 8008978:	d816      	bhi.n	80089a8 <UART_SetConfig+0xb8>
 800897a:	a201      	add	r2, pc, #4	@ (adr r2, 8008980 <UART_SetConfig+0x90>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	08008991 	.word	0x08008991
 8008984:	0800899d 	.word	0x0800899d
 8008988:	08008997 	.word	0x08008997
 800898c:	080089a3 	.word	0x080089a3
 8008990:	2301      	movs	r3, #1
 8008992:	77fb      	strb	r3, [r7, #31]
 8008994:	e150      	b.n	8008c38 <UART_SetConfig+0x348>
 8008996:	2302      	movs	r3, #2
 8008998:	77fb      	strb	r3, [r7, #31]
 800899a:	e14d      	b.n	8008c38 <UART_SetConfig+0x348>
 800899c:	2304      	movs	r3, #4
 800899e:	77fb      	strb	r3, [r7, #31]
 80089a0:	e14a      	b.n	8008c38 <UART_SetConfig+0x348>
 80089a2:	2308      	movs	r3, #8
 80089a4:	77fb      	strb	r3, [r7, #31]
 80089a6:	e147      	b.n	8008c38 <UART_SetConfig+0x348>
 80089a8:	2310      	movs	r3, #16
 80089aa:	77fb      	strb	r3, [r7, #31]
 80089ac:	e144      	b.n	8008c38 <UART_SetConfig+0x348>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a83      	ldr	r2, [pc, #524]	@ (8008bc0 <UART_SetConfig+0x2d0>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d132      	bne.n	8008a1e <UART_SetConfig+0x12e>
 80089b8:	4b80      	ldr	r3, [pc, #512]	@ (8008bbc <UART_SetConfig+0x2cc>)
 80089ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089be:	f003 030c 	and.w	r3, r3, #12
 80089c2:	2b0c      	cmp	r3, #12
 80089c4:	d828      	bhi.n	8008a18 <UART_SetConfig+0x128>
 80089c6:	a201      	add	r2, pc, #4	@ (adr r2, 80089cc <UART_SetConfig+0xdc>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	08008a01 	.word	0x08008a01
 80089d0:	08008a19 	.word	0x08008a19
 80089d4:	08008a19 	.word	0x08008a19
 80089d8:	08008a19 	.word	0x08008a19
 80089dc:	08008a0d 	.word	0x08008a0d
 80089e0:	08008a19 	.word	0x08008a19
 80089e4:	08008a19 	.word	0x08008a19
 80089e8:	08008a19 	.word	0x08008a19
 80089ec:	08008a07 	.word	0x08008a07
 80089f0:	08008a19 	.word	0x08008a19
 80089f4:	08008a19 	.word	0x08008a19
 80089f8:	08008a19 	.word	0x08008a19
 80089fc:	08008a13 	.word	0x08008a13
 8008a00:	2300      	movs	r3, #0
 8008a02:	77fb      	strb	r3, [r7, #31]
 8008a04:	e118      	b.n	8008c38 <UART_SetConfig+0x348>
 8008a06:	2302      	movs	r3, #2
 8008a08:	77fb      	strb	r3, [r7, #31]
 8008a0a:	e115      	b.n	8008c38 <UART_SetConfig+0x348>
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	77fb      	strb	r3, [r7, #31]
 8008a10:	e112      	b.n	8008c38 <UART_SetConfig+0x348>
 8008a12:	2308      	movs	r3, #8
 8008a14:	77fb      	strb	r3, [r7, #31]
 8008a16:	e10f      	b.n	8008c38 <UART_SetConfig+0x348>
 8008a18:	2310      	movs	r3, #16
 8008a1a:	77fb      	strb	r3, [r7, #31]
 8008a1c:	e10c      	b.n	8008c38 <UART_SetConfig+0x348>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a68      	ldr	r2, [pc, #416]	@ (8008bc4 <UART_SetConfig+0x2d4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d120      	bne.n	8008a6a <UART_SetConfig+0x17a>
 8008a28:	4b64      	ldr	r3, [pc, #400]	@ (8008bbc <UART_SetConfig+0x2cc>)
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008a32:	2b30      	cmp	r3, #48	@ 0x30
 8008a34:	d013      	beq.n	8008a5e <UART_SetConfig+0x16e>
 8008a36:	2b30      	cmp	r3, #48	@ 0x30
 8008a38:	d814      	bhi.n	8008a64 <UART_SetConfig+0x174>
 8008a3a:	2b20      	cmp	r3, #32
 8008a3c:	d009      	beq.n	8008a52 <UART_SetConfig+0x162>
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d810      	bhi.n	8008a64 <UART_SetConfig+0x174>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <UART_SetConfig+0x15c>
 8008a46:	2b10      	cmp	r3, #16
 8008a48:	d006      	beq.n	8008a58 <UART_SetConfig+0x168>
 8008a4a:	e00b      	b.n	8008a64 <UART_SetConfig+0x174>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	77fb      	strb	r3, [r7, #31]
 8008a50:	e0f2      	b.n	8008c38 <UART_SetConfig+0x348>
 8008a52:	2302      	movs	r3, #2
 8008a54:	77fb      	strb	r3, [r7, #31]
 8008a56:	e0ef      	b.n	8008c38 <UART_SetConfig+0x348>
 8008a58:	2304      	movs	r3, #4
 8008a5a:	77fb      	strb	r3, [r7, #31]
 8008a5c:	e0ec      	b.n	8008c38 <UART_SetConfig+0x348>
 8008a5e:	2308      	movs	r3, #8
 8008a60:	77fb      	strb	r3, [r7, #31]
 8008a62:	e0e9      	b.n	8008c38 <UART_SetConfig+0x348>
 8008a64:	2310      	movs	r3, #16
 8008a66:	77fb      	strb	r3, [r7, #31]
 8008a68:	e0e6      	b.n	8008c38 <UART_SetConfig+0x348>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a56      	ldr	r2, [pc, #344]	@ (8008bc8 <UART_SetConfig+0x2d8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d120      	bne.n	8008ab6 <UART_SetConfig+0x1c6>
 8008a74:	4b51      	ldr	r3, [pc, #324]	@ (8008bbc <UART_SetConfig+0x2cc>)
 8008a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008a7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a80:	d013      	beq.n	8008aaa <UART_SetConfig+0x1ba>
 8008a82:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a84:	d814      	bhi.n	8008ab0 <UART_SetConfig+0x1c0>
 8008a86:	2b80      	cmp	r3, #128	@ 0x80
 8008a88:	d009      	beq.n	8008a9e <UART_SetConfig+0x1ae>
 8008a8a:	2b80      	cmp	r3, #128	@ 0x80
 8008a8c:	d810      	bhi.n	8008ab0 <UART_SetConfig+0x1c0>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <UART_SetConfig+0x1a8>
 8008a92:	2b40      	cmp	r3, #64	@ 0x40
 8008a94:	d006      	beq.n	8008aa4 <UART_SetConfig+0x1b4>
 8008a96:	e00b      	b.n	8008ab0 <UART_SetConfig+0x1c0>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	77fb      	strb	r3, [r7, #31]
 8008a9c:	e0cc      	b.n	8008c38 <UART_SetConfig+0x348>
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	77fb      	strb	r3, [r7, #31]
 8008aa2:	e0c9      	b.n	8008c38 <UART_SetConfig+0x348>
 8008aa4:	2304      	movs	r3, #4
 8008aa6:	77fb      	strb	r3, [r7, #31]
 8008aa8:	e0c6      	b.n	8008c38 <UART_SetConfig+0x348>
 8008aaa:	2308      	movs	r3, #8
 8008aac:	77fb      	strb	r3, [r7, #31]
 8008aae:	e0c3      	b.n	8008c38 <UART_SetConfig+0x348>
 8008ab0:	2310      	movs	r3, #16
 8008ab2:	77fb      	strb	r3, [r7, #31]
 8008ab4:	e0c0      	b.n	8008c38 <UART_SetConfig+0x348>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a44      	ldr	r2, [pc, #272]	@ (8008bcc <UART_SetConfig+0x2dc>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d125      	bne.n	8008b0c <UART_SetConfig+0x21c>
 8008ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8008bbc <UART_SetConfig+0x2cc>)
 8008ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ace:	d017      	beq.n	8008b00 <UART_SetConfig+0x210>
 8008ad0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ad4:	d817      	bhi.n	8008b06 <UART_SetConfig+0x216>
 8008ad6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ada:	d00b      	beq.n	8008af4 <UART_SetConfig+0x204>
 8008adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae0:	d811      	bhi.n	8008b06 <UART_SetConfig+0x216>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <UART_SetConfig+0x1fe>
 8008ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aea:	d006      	beq.n	8008afa <UART_SetConfig+0x20a>
 8008aec:	e00b      	b.n	8008b06 <UART_SetConfig+0x216>
 8008aee:	2300      	movs	r3, #0
 8008af0:	77fb      	strb	r3, [r7, #31]
 8008af2:	e0a1      	b.n	8008c38 <UART_SetConfig+0x348>
 8008af4:	2302      	movs	r3, #2
 8008af6:	77fb      	strb	r3, [r7, #31]
 8008af8:	e09e      	b.n	8008c38 <UART_SetConfig+0x348>
 8008afa:	2304      	movs	r3, #4
 8008afc:	77fb      	strb	r3, [r7, #31]
 8008afe:	e09b      	b.n	8008c38 <UART_SetConfig+0x348>
 8008b00:	2308      	movs	r3, #8
 8008b02:	77fb      	strb	r3, [r7, #31]
 8008b04:	e098      	b.n	8008c38 <UART_SetConfig+0x348>
 8008b06:	2310      	movs	r3, #16
 8008b08:	77fb      	strb	r3, [r7, #31]
 8008b0a:	e095      	b.n	8008c38 <UART_SetConfig+0x348>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a2f      	ldr	r2, [pc, #188]	@ (8008bd0 <UART_SetConfig+0x2e0>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d125      	bne.n	8008b62 <UART_SetConfig+0x272>
 8008b16:	4b29      	ldr	r3, [pc, #164]	@ (8008bbc <UART_SetConfig+0x2cc>)
 8008b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008b20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b24:	d017      	beq.n	8008b56 <UART_SetConfig+0x266>
 8008b26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b2a:	d817      	bhi.n	8008b5c <UART_SetConfig+0x26c>
 8008b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b30:	d00b      	beq.n	8008b4a <UART_SetConfig+0x25a>
 8008b32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b36:	d811      	bhi.n	8008b5c <UART_SetConfig+0x26c>
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <UART_SetConfig+0x254>
 8008b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b40:	d006      	beq.n	8008b50 <UART_SetConfig+0x260>
 8008b42:	e00b      	b.n	8008b5c <UART_SetConfig+0x26c>
 8008b44:	2301      	movs	r3, #1
 8008b46:	77fb      	strb	r3, [r7, #31]
 8008b48:	e076      	b.n	8008c38 <UART_SetConfig+0x348>
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	77fb      	strb	r3, [r7, #31]
 8008b4e:	e073      	b.n	8008c38 <UART_SetConfig+0x348>
 8008b50:	2304      	movs	r3, #4
 8008b52:	77fb      	strb	r3, [r7, #31]
 8008b54:	e070      	b.n	8008c38 <UART_SetConfig+0x348>
 8008b56:	2308      	movs	r3, #8
 8008b58:	77fb      	strb	r3, [r7, #31]
 8008b5a:	e06d      	b.n	8008c38 <UART_SetConfig+0x348>
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	77fb      	strb	r3, [r7, #31]
 8008b60:	e06a      	b.n	8008c38 <UART_SetConfig+0x348>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a1b      	ldr	r2, [pc, #108]	@ (8008bd4 <UART_SetConfig+0x2e4>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d138      	bne.n	8008bde <UART_SetConfig+0x2ee>
 8008b6c:	4b13      	ldr	r3, [pc, #76]	@ (8008bbc <UART_SetConfig+0x2cc>)
 8008b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b72:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008b76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b7a:	d017      	beq.n	8008bac <UART_SetConfig+0x2bc>
 8008b7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b80:	d82a      	bhi.n	8008bd8 <UART_SetConfig+0x2e8>
 8008b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b86:	d00b      	beq.n	8008ba0 <UART_SetConfig+0x2b0>
 8008b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b8c:	d824      	bhi.n	8008bd8 <UART_SetConfig+0x2e8>
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <UART_SetConfig+0x2aa>
 8008b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b96:	d006      	beq.n	8008ba6 <UART_SetConfig+0x2b6>
 8008b98:	e01e      	b.n	8008bd8 <UART_SetConfig+0x2e8>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	77fb      	strb	r3, [r7, #31]
 8008b9e:	e04b      	b.n	8008c38 <UART_SetConfig+0x348>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	77fb      	strb	r3, [r7, #31]
 8008ba4:	e048      	b.n	8008c38 <UART_SetConfig+0x348>
 8008ba6:	2304      	movs	r3, #4
 8008ba8:	77fb      	strb	r3, [r7, #31]
 8008baa:	e045      	b.n	8008c38 <UART_SetConfig+0x348>
 8008bac:	2308      	movs	r3, #8
 8008bae:	77fb      	strb	r3, [r7, #31]
 8008bb0:	e042      	b.n	8008c38 <UART_SetConfig+0x348>
 8008bb2:	bf00      	nop
 8008bb4:	efff69f3 	.word	0xefff69f3
 8008bb8:	40011000 	.word	0x40011000
 8008bbc:	40023800 	.word	0x40023800
 8008bc0:	40004400 	.word	0x40004400
 8008bc4:	40004800 	.word	0x40004800
 8008bc8:	40004c00 	.word	0x40004c00
 8008bcc:	40005000 	.word	0x40005000
 8008bd0:	40011400 	.word	0x40011400
 8008bd4:	40007800 	.word	0x40007800
 8008bd8:	2310      	movs	r3, #16
 8008bda:	77fb      	strb	r3, [r7, #31]
 8008bdc:	e02c      	b.n	8008c38 <UART_SetConfig+0x348>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a72      	ldr	r2, [pc, #456]	@ (8008dac <UART_SetConfig+0x4bc>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d125      	bne.n	8008c34 <UART_SetConfig+0x344>
 8008be8:	4b71      	ldr	r3, [pc, #452]	@ (8008db0 <UART_SetConfig+0x4c0>)
 8008bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008bf2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008bf6:	d017      	beq.n	8008c28 <UART_SetConfig+0x338>
 8008bf8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008bfc:	d817      	bhi.n	8008c2e <UART_SetConfig+0x33e>
 8008bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c02:	d00b      	beq.n	8008c1c <UART_SetConfig+0x32c>
 8008c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c08:	d811      	bhi.n	8008c2e <UART_SetConfig+0x33e>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <UART_SetConfig+0x326>
 8008c0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c12:	d006      	beq.n	8008c22 <UART_SetConfig+0x332>
 8008c14:	e00b      	b.n	8008c2e <UART_SetConfig+0x33e>
 8008c16:	2300      	movs	r3, #0
 8008c18:	77fb      	strb	r3, [r7, #31]
 8008c1a:	e00d      	b.n	8008c38 <UART_SetConfig+0x348>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	77fb      	strb	r3, [r7, #31]
 8008c20:	e00a      	b.n	8008c38 <UART_SetConfig+0x348>
 8008c22:	2304      	movs	r3, #4
 8008c24:	77fb      	strb	r3, [r7, #31]
 8008c26:	e007      	b.n	8008c38 <UART_SetConfig+0x348>
 8008c28:	2308      	movs	r3, #8
 8008c2a:	77fb      	strb	r3, [r7, #31]
 8008c2c:	e004      	b.n	8008c38 <UART_SetConfig+0x348>
 8008c2e:	2310      	movs	r3, #16
 8008c30:	77fb      	strb	r3, [r7, #31]
 8008c32:	e001      	b.n	8008c38 <UART_SetConfig+0x348>
 8008c34:	2310      	movs	r3, #16
 8008c36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c40:	d15b      	bne.n	8008cfa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008c42:	7ffb      	ldrb	r3, [r7, #31]
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	d828      	bhi.n	8008c9a <UART_SetConfig+0x3aa>
 8008c48:	a201      	add	r2, pc, #4	@ (adr r2, 8008c50 <UART_SetConfig+0x360>)
 8008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4e:	bf00      	nop
 8008c50:	08008c75 	.word	0x08008c75
 8008c54:	08008c7d 	.word	0x08008c7d
 8008c58:	08008c85 	.word	0x08008c85
 8008c5c:	08008c9b 	.word	0x08008c9b
 8008c60:	08008c8b 	.word	0x08008c8b
 8008c64:	08008c9b 	.word	0x08008c9b
 8008c68:	08008c9b 	.word	0x08008c9b
 8008c6c:	08008c9b 	.word	0x08008c9b
 8008c70:	08008c93 	.word	0x08008c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c74:	f7fe f9e4 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 8008c78:	61b8      	str	r0, [r7, #24]
        break;
 8008c7a:	e013      	b.n	8008ca4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c7c:	f7fe f9f4 	bl	8007068 <HAL_RCC_GetPCLK2Freq>
 8008c80:	61b8      	str	r0, [r7, #24]
        break;
 8008c82:	e00f      	b.n	8008ca4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c84:	4b4b      	ldr	r3, [pc, #300]	@ (8008db4 <UART_SetConfig+0x4c4>)
 8008c86:	61bb      	str	r3, [r7, #24]
        break;
 8008c88:	e00c      	b.n	8008ca4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c8a:	f7fe f8c7 	bl	8006e1c <HAL_RCC_GetSysClockFreq>
 8008c8e:	61b8      	str	r0, [r7, #24]
        break;
 8008c90:	e008      	b.n	8008ca4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c96:	61bb      	str	r3, [r7, #24]
        break;
 8008c98:	e004      	b.n	8008ca4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	77bb      	strb	r3, [r7, #30]
        break;
 8008ca2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d074      	beq.n	8008d94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	005a      	lsls	r2, r3, #1
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	085b      	lsrs	r3, r3, #1
 8008cb4:	441a      	add	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	2b0f      	cmp	r3, #15
 8008cc4:	d916      	bls.n	8008cf4 <UART_SetConfig+0x404>
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ccc:	d212      	bcs.n	8008cf4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	f023 030f 	bic.w	r3, r3, #15
 8008cd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	085b      	lsrs	r3, r3, #1
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	89fb      	ldrh	r3, [r7, #14]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	89fa      	ldrh	r2, [r7, #14]
 8008cf0:	60da      	str	r2, [r3, #12]
 8008cf2:	e04f      	b.n	8008d94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	77bb      	strb	r3, [r7, #30]
 8008cf8:	e04c      	b.n	8008d94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cfa:	7ffb      	ldrb	r3, [r7, #31]
 8008cfc:	2b08      	cmp	r3, #8
 8008cfe:	d828      	bhi.n	8008d52 <UART_SetConfig+0x462>
 8008d00:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <UART_SetConfig+0x418>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d2d 	.word	0x08008d2d
 8008d0c:	08008d35 	.word	0x08008d35
 8008d10:	08008d3d 	.word	0x08008d3d
 8008d14:	08008d53 	.word	0x08008d53
 8008d18:	08008d43 	.word	0x08008d43
 8008d1c:	08008d53 	.word	0x08008d53
 8008d20:	08008d53 	.word	0x08008d53
 8008d24:	08008d53 	.word	0x08008d53
 8008d28:	08008d4b 	.word	0x08008d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d2c:	f7fe f988 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 8008d30:	61b8      	str	r0, [r7, #24]
        break;
 8008d32:	e013      	b.n	8008d5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d34:	f7fe f998 	bl	8007068 <HAL_RCC_GetPCLK2Freq>
 8008d38:	61b8      	str	r0, [r7, #24]
        break;
 8008d3a:	e00f      	b.n	8008d5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008db4 <UART_SetConfig+0x4c4>)
 8008d3e:	61bb      	str	r3, [r7, #24]
        break;
 8008d40:	e00c      	b.n	8008d5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d42:	f7fe f86b 	bl	8006e1c <HAL_RCC_GetSysClockFreq>
 8008d46:	61b8      	str	r0, [r7, #24]
        break;
 8008d48:	e008      	b.n	8008d5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d4e:	61bb      	str	r3, [r7, #24]
        break;
 8008d50:	e004      	b.n	8008d5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008d52:	2300      	movs	r3, #0
 8008d54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	77bb      	strb	r3, [r7, #30]
        break;
 8008d5a:	bf00      	nop
    }

    if (pclk != 0U)
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d018      	beq.n	8008d94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	085a      	lsrs	r2, r3, #1
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	441a      	add	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	2b0f      	cmp	r3, #15
 8008d7a:	d909      	bls.n	8008d90 <UART_SetConfig+0x4a0>
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d82:	d205      	bcs.n	8008d90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	60da      	str	r2, [r3, #12]
 8008d8e:	e001      	b.n	8008d94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008da0:	7fbb      	ldrb	r3, [r7, #30]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3720      	adds	r7, #32
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	40007c00 	.word	0x40007c00
 8008db0:	40023800 	.word	0x40023800
 8008db4:	00f42400 	.word	0x00f42400

08008db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc4:	f003 0308 	and.w	r3, r3, #8
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00a      	beq.n	8008de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e08:	f003 0302 	and.w	r3, r3, #2
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00a      	beq.n	8008e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2a:	f003 0304 	and.w	r3, r3, #4
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	430a      	orrs	r2, r1
 8008e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4c:	f003 0310 	and.w	r3, r3, #16
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00a      	beq.n	8008e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6e:	f003 0320 	and.w	r3, r3, #32
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d01a      	beq.n	8008ece <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008eb6:	d10a      	bne.n	8008ece <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	605a      	str	r2, [r3, #4]
  }
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08c      	sub	sp, #48	@ 0x30
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f0c:	f7f8 ff8e 	bl	8001e2c <HAL_GetTick>
 8008f10:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0308 	and.w	r3, r3, #8
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	d12e      	bne.n	8008f7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f83b 	bl	8008faa <UART_WaitOnFlagUntilTimeout>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d021      	beq.n	8008f7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	e853 3f00 	ldrex	r3, [r3]
 8008f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f4e:	623b      	str	r3, [r7, #32]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	461a      	mov	r2, r3
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	61fb      	str	r3, [r7, #28]
 8008f5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5c:	69b9      	ldr	r1, [r7, #24]
 8008f5e:	69fa      	ldr	r2, [r7, #28]
 8008f60:	e841 2300 	strex	r3, r2, [r1]
 8008f64:	617b      	str	r3, [r7, #20]
   return(result);
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1e6      	bne.n	8008f3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e011      	b.n	8008fa2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2220      	movs	r2, #32
 8008f82:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2220      	movs	r2, #32
 8008f88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3728      	adds	r7, #40	@ 0x28
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	603b      	str	r3, [r7, #0]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fba:	e04f      	b.n	800905c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc2:	d04b      	beq.n	800905c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fc4:	f7f8 ff32 	bl	8001e2c <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d302      	bcc.n	8008fda <UART_WaitOnFlagUntilTimeout+0x30>
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e04e      	b.n	800907c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d037      	beq.n	800905c <UART_WaitOnFlagUntilTimeout+0xb2>
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	2b80      	cmp	r3, #128	@ 0x80
 8008ff0:	d034      	beq.n	800905c <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2b40      	cmp	r3, #64	@ 0x40
 8008ff6:	d031      	beq.n	800905c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b08      	cmp	r3, #8
 8009004:	d110      	bne.n	8009028 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2208      	movs	r2, #8
 800900c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 f8fe 	bl	8009210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2208      	movs	r2, #8
 8009018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e029      	b.n	800907c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009036:	d111      	bne.n	800905c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009040:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 f8e4 	bl	8009210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2220      	movs	r2, #32
 800904c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e00f      	b.n	800907c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	69da      	ldr	r2, [r3, #28]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	4013      	ands	r3, r2
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	429a      	cmp	r2, r3
 800906a:	bf0c      	ite	eq
 800906c:	2301      	moveq	r3, #1
 800906e:	2300      	movne	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	461a      	mov	r2, r3
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	429a      	cmp	r2, r3
 8009078:	d0a0      	beq.n	8008fbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b096      	sub	sp, #88	@ 0x58
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	88fa      	ldrh	r2, [r7, #6]
 800909c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2222      	movs	r2, #34	@ 0x22
 80090ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d028      	beq.n	800910a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090bc:	4a3e      	ldr	r2, [pc, #248]	@ (80091b8 <UART_Start_Receive_DMA+0x134>)
 80090be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c4:	4a3d      	ldr	r2, [pc, #244]	@ (80091bc <UART_Start_Receive_DMA+0x138>)
 80090c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090cc:	4a3c      	ldr	r2, [pc, #240]	@ (80091c0 <UART_Start_Receive_DMA+0x13c>)
 80090ce:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090d4:	2200      	movs	r2, #0
 80090d6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3324      	adds	r3, #36	@ 0x24
 80090e2:	4619      	mov	r1, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090e8:	461a      	mov	r2, r3
 80090ea:	88fb      	ldrh	r3, [r7, #6]
 80090ec:	f7f9 fa68 	bl	80025c0 <HAL_DMA_Start_IT>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d009      	beq.n	800910a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2210      	movs	r2, #16
 80090fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2220      	movs	r2, #32
 8009102:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e051      	b.n	80091ae <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d018      	beq.n	8009144 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800911a:	e853 3f00 	ldrex	r3, [r3]
 800911e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009126:	657b      	str	r3, [r7, #84]	@ 0x54
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009130:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009132:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009134:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009138:	e841 2300 	strex	r3, r2, [r1]
 800913c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800913e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1e6      	bne.n	8009112 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3308      	adds	r3, #8
 800914a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914e:	e853 3f00 	ldrex	r3, [r3]
 8009152:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	f043 0301 	orr.w	r3, r3, #1
 800915a:	653b      	str	r3, [r7, #80]	@ 0x50
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3308      	adds	r3, #8
 8009162:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009164:	637a      	str	r2, [r7, #52]	@ 0x34
 8009166:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009168:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800916a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800916c:	e841 2300 	strex	r3, r2, [r1]
 8009170:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e5      	bne.n	8009144 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3308      	adds	r3, #8
 800917e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	613b      	str	r3, [r7, #16]
   return(result);
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800918e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3308      	adds	r3, #8
 8009196:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009198:	623a      	str	r2, [r7, #32]
 800919a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919c:	69f9      	ldr	r1, [r7, #28]
 800919e:	6a3a      	ldr	r2, [r7, #32]
 80091a0:	e841 2300 	strex	r3, r2, [r1]
 80091a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e5      	bne.n	8009178 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3758      	adds	r7, #88	@ 0x58
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	0800938b 	.word	0x0800938b
 80091bc:	080094e9 	.word	0x080094e9
 80091c0:	0800955b 	.word	0x0800955b

080091c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b089      	sub	sp, #36	@ 0x24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	e853 3f00 	ldrex	r3, [r3]
 80091d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80091e0:	61fb      	str	r3, [r7, #28]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	61bb      	str	r3, [r7, #24]
 80091ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	6979      	ldr	r1, [r7, #20]
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	613b      	str	r3, [r7, #16]
   return(result);
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1e6      	bne.n	80091cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2220      	movs	r2, #32
 8009202:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009204:	bf00      	nop
 8009206:	3724      	adds	r7, #36	@ 0x24
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009210:	b480      	push	{r7}
 8009212:	b095      	sub	sp, #84	@ 0x54
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800922c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009236:	643b      	str	r3, [r7, #64]	@ 0x40
 8009238:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800923c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e6      	bne.n	8009218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3308      	adds	r3, #8
 8009250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	61fb      	str	r3, [r7, #28]
   return(result);
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	f023 0301 	bic.w	r3, r3, #1
 8009260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3308      	adds	r3, #8
 8009268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800926a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800926c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009272:	e841 2300 	strex	r3, r2, [r1]
 8009276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1e5      	bne.n	800924a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009282:	2b01      	cmp	r3, #1
 8009284:	d118      	bne.n	80092b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	e853 3f00 	ldrex	r3, [r3]
 8009292:	60bb      	str	r3, [r7, #8]
   return(result);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f023 0310 	bic.w	r3, r3, #16
 800929a:	647b      	str	r3, [r7, #68]	@ 0x44
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	461a      	mov	r2, r3
 80092a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092a4:	61bb      	str	r3, [r7, #24]
 80092a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	6979      	ldr	r1, [r7, #20]
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	e841 2300 	strex	r3, r2, [r1]
 80092b0:	613b      	str	r3, [r7, #16]
   return(result);
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e6      	bne.n	8009286 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80092cc:	bf00      	nop
 80092ce:	3754      	adds	r7, #84	@ 0x54
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b090      	sub	sp, #64	@ 0x40
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092ee:	d037      	beq.n	8009360 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80092f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3308      	adds	r3, #8
 80092fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009302:	e853 3f00 	ldrex	r3, [r3]
 8009306:	623b      	str	r3, [r7, #32]
   return(result);
 8009308:	6a3b      	ldr	r3, [r7, #32]
 800930a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800930e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3308      	adds	r3, #8
 8009316:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009318:	633a      	str	r2, [r7, #48]	@ 0x30
 800931a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800931e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e5      	bne.n	80092f8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800932c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	60fb      	str	r3, [r7, #12]
   return(result);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009340:	637b      	str	r3, [r7, #52]	@ 0x34
 8009342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800934a:	61fb      	str	r3, [r7, #28]
 800934c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	69b9      	ldr	r1, [r7, #24]
 8009350:	69fa      	ldr	r2, [r7, #28]
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	617b      	str	r3, [r7, #20]
   return(result);
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e6      	bne.n	800932c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800935e:	e002      	b.n	8009366 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8009360:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009362:	f010 fc5f 	bl	8019c24 <HAL_UART_TxCpltCallback>
}
 8009366:	bf00      	nop
 8009368:	3740      	adds	r7, #64	@ 0x40
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f7ff fa8d 	bl	800889c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b09c      	sub	sp, #112	@ 0x70
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009396:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	69db      	ldr	r3, [r3, #28]
 800939c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093a0:	d071      	beq.n	8009486 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80093a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093b2:	e853 3f00 	ldrex	r3, [r3]
 80093b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80093b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80093ca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80093ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80093d0:	e841 2300 	strex	r3, r2, [r1]
 80093d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80093d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e6      	bne.n	80093aa <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3308      	adds	r3, #8
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e6:	e853 3f00 	ldrex	r3, [r3]
 80093ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	f023 0301 	bic.w	r3, r3, #1
 80093f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80093f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3308      	adds	r3, #8
 80093fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80093fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80093fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009402:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009404:	e841 2300 	strex	r3, r2, [r1]
 8009408:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800940a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e5      	bne.n	80093dc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3308      	adds	r3, #8
 8009416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	e853 3f00 	ldrex	r3, [r3]
 800941e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009426:	663b      	str	r3, [r7, #96]	@ 0x60
 8009428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3308      	adds	r3, #8
 800942e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009430:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009438:	e841 2300 	strex	r3, r2, [r1]
 800943c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e5      	bne.n	8009410 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009446:	2220      	movs	r2, #32
 8009448:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800944c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800944e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009450:	2b01      	cmp	r3, #1
 8009452:	d118      	bne.n	8009486 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	60bb      	str	r3, [r7, #8]
   return(result);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f023 0310 	bic.w	r3, r3, #16
 8009468:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800946a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009472:	61bb      	str	r3, [r7, #24]
 8009474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6979      	ldr	r1, [r7, #20]
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	613b      	str	r3, [r7, #16]
   return(result);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e6      	bne.n	8009454 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009488:	2200      	movs	r2, #0
 800948a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800948c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800948e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009490:	2b01      	cmp	r3, #1
 8009492:	d122      	bne.n	80094da <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8009494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009496:	2200      	movs	r2, #0
 8009498:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 80094a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80094ac:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d204      	bcs.n	80094be <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80094b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094b6:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80094ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80094c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	4619      	mov	r1, r3
 80094d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80094d4:	f7ff fa00 	bl	80088d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094d8:	e002      	b.n	80094e0 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 80094da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80094dc:	f010 fbd0 	bl	8019c80 <HAL_UART_RxCpltCallback>
}
 80094e0:	bf00      	nop
 80094e2:	3770      	adds	r7, #112	@ 0x70
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2201      	movs	r2, #1
 80094fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009500:	2b01      	cmp	r3, #1
 8009502:	d123      	bne.n	800954c <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800950a:	085b      	lsrs	r3, r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009522:	897a      	ldrh	r2, [r7, #10]
 8009524:	429a      	cmp	r2, r3
 8009526:	d803      	bhi.n	8009530 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	897a      	ldrh	r2, [r7, #10]
 800952c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800953c:	b29b      	uxth	r3, r3
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	b29b      	uxth	r3, r3
 8009542:	4619      	mov	r1, r3
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f7ff f9c7 	bl	80088d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800954a:	e002      	b.n	8009552 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f7ff f9af 	bl	80088b0 <HAL_UART_RxHalfCpltCallback>
}
 8009552:	bf00      	nop
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b086      	sub	sp, #24
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009566:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800956c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009574:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009580:	2b80      	cmp	r3, #128	@ 0x80
 8009582:	d109      	bne.n	8009598 <UART_DMAError+0x3e>
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2b21      	cmp	r3, #33	@ 0x21
 8009588:	d106      	bne.n	8009598 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2200      	movs	r2, #0
 800958e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009592:	6978      	ldr	r0, [r7, #20]
 8009594:	f7ff fe16 	bl	80091c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a2:	2b40      	cmp	r3, #64	@ 0x40
 80095a4:	d109      	bne.n	80095ba <UART_DMAError+0x60>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b22      	cmp	r3, #34	@ 0x22
 80095aa:	d106      	bne.n	80095ba <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80095b4:	6978      	ldr	r0, [r7, #20]
 80095b6:	f7ff fe2b 	bl	8009210 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095c0:	f043 0210 	orr.w	r2, r3, #16
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095ca:	6978      	ldr	r0, [r7, #20]
 80095cc:	f7ff f97a 	bl	80088c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095d0:	bf00      	nop
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f7ff f968 	bl	80088c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095f4:	bf00      	nop
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	60bb      	str	r3, [r7, #8]
   return(result);
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	61bb      	str	r3, [r7, #24]
 8009624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6979      	ldr	r1, [r7, #20]
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	613b      	str	r3, [r7, #16]
   return(result);
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e6      	bne.n	8009604 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2220      	movs	r2, #32
 800963a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f010 faee 	bl	8019c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009648:	bf00      	nop
 800964a:	3720      	adds	r7, #32
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009650:	b084      	sub	sp, #16
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	f107 001c 	add.w	r0, r7, #28
 800965e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009662:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009666:	2b01      	cmp	r3, #1
 8009668:	d121      	bne.n	80096ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	4b21      	ldr	r3, [pc, #132]	@ (8009700 <USB_CoreInit+0xb0>)
 800967c:	4013      	ands	r3, r2
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800968e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009692:	2b01      	cmp	r3, #1
 8009694:	d105      	bne.n	80096a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fa92 	bl	8009bcc <USB_CoreReset>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73fb      	strb	r3, [r7, #15]
 80096ac:	e010      	b.n	80096d0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fa86 	bl	8009bcc <USB_CoreReset>
 80096c0:	4603      	mov	r3, r0
 80096c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80096d0:	7fbb      	ldrb	r3, [r7, #30]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d10b      	bne.n	80096ee <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f043 0206 	orr.w	r2, r3, #6
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f043 0220 	orr.w	r2, r3, #32
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096fa:	b004      	add	sp, #16
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	ffbdffbf 	.word	0xffbdffbf

08009704 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f023 0201 	bic.w	r2, r3, #1
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d115      	bne.n	8009774 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009754:	200a      	movs	r0, #10
 8009756:	f7f8 fb75 	bl	8001e44 <HAL_Delay>
      ms += 10U;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	330a      	adds	r3, #10
 800975e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fa25 	bl	8009bb0 <USB_GetMode>
 8009766:	4603      	mov	r3, r0
 8009768:	2b01      	cmp	r3, #1
 800976a:	d01e      	beq.n	80097aa <USB_SetCurrentMode+0x84>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009770:	d9f0      	bls.n	8009754 <USB_SetCurrentMode+0x2e>
 8009772:	e01a      	b.n	80097aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d115      	bne.n	80097a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009786:	200a      	movs	r0, #10
 8009788:	f7f8 fb5c 	bl	8001e44 <HAL_Delay>
      ms += 10U;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	330a      	adds	r3, #10
 8009790:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fa0c 	bl	8009bb0 <USB_GetMode>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d005      	beq.n	80097aa <USB_SetCurrentMode+0x84>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80097a2:	d9f0      	bls.n	8009786 <USB_SetCurrentMode+0x60>
 80097a4:	e001      	b.n	80097aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e005      	b.n	80097b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80097ae:	d101      	bne.n	80097b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e000      	b.n	80097b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097c0:	b084      	sub	sp, #16
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b086      	sub	sp, #24
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80097ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097da:	2300      	movs	r3, #0
 80097dc:	613b      	str	r3, [r7, #16]
 80097de:	e009      	b.n	80097f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	3340      	adds	r3, #64	@ 0x40
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	2200      	movs	r2, #0
 80097ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	3301      	adds	r3, #1
 80097f2:	613b      	str	r3, [r7, #16]
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	2b0e      	cmp	r3, #14
 80097f8:	d9f2      	bls.n	80097e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80097fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d11c      	bne.n	800983c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009810:	f043 0302 	orr.w	r3, r3, #2
 8009814:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e005      	b.n	8009848 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009840:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800984e:	461a      	mov	r2, r3
 8009850:	2300      	movs	r3, #0
 8009852:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009854:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009858:	2b01      	cmp	r3, #1
 800985a:	d10d      	bne.n	8009878 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800985c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009860:	2b00      	cmp	r3, #0
 8009862:	d104      	bne.n	800986e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009864:	2100      	movs	r1, #0
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f968 	bl	8009b3c <USB_SetDevSpeed>
 800986c:	e008      	b.n	8009880 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800986e:	2101      	movs	r1, #1
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f963 	bl	8009b3c <USB_SetDevSpeed>
 8009876:	e003      	b.n	8009880 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009878:	2103      	movs	r1, #3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f95e 	bl	8009b3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009880:	2110      	movs	r1, #16
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f8fa 	bl	8009a7c <USB_FlushTxFifo>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f924 	bl	8009ae0 <USB_FlushRxFifo>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098a8:	461a      	mov	r2, r3
 80098aa:	2300      	movs	r3, #0
 80098ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098b4:	461a      	mov	r2, r3
 80098b6:	2300      	movs	r3, #0
 80098b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c0:	461a      	mov	r2, r3
 80098c2:	2300      	movs	r3, #0
 80098c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098c6:	2300      	movs	r3, #0
 80098c8:	613b      	str	r3, [r7, #16]
 80098ca:	e043      	b.n	8009954 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098e2:	d118      	bne.n	8009916 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10a      	bne.n	8009900 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098f6:	461a      	mov	r2, r3
 80098f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	e013      	b.n	8009928 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800990c:	461a      	mov	r2, r3
 800990e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	e008      	b.n	8009928 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4413      	add	r3, r2
 800991e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009922:	461a      	mov	r2, r3
 8009924:	2300      	movs	r3, #0
 8009926:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009934:	461a      	mov	r2, r3
 8009936:	2300      	movs	r3, #0
 8009938:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	015a      	lsls	r2, r3, #5
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4413      	add	r3, r2
 8009942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009946:	461a      	mov	r2, r3
 8009948:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800994c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	3301      	adds	r3, #1
 8009952:	613b      	str	r3, [r7, #16]
 8009954:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009958:	461a      	mov	r2, r3
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	4293      	cmp	r3, r2
 800995e:	d3b5      	bcc.n	80098cc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009960:	2300      	movs	r3, #0
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	e043      	b.n	80099ee <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009978:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800997c:	d118      	bne.n	80099b0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10a      	bne.n	800999a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009990:	461a      	mov	r2, r3
 8009992:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	e013      	b.n	80099c2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a6:	461a      	mov	r2, r3
 80099a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	e008      	b.n	80099c2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099bc:	461a      	mov	r2, r3
 80099be:	2300      	movs	r3, #0
 80099c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ce:	461a      	mov	r2, r3
 80099d0:	2300      	movs	r3, #0
 80099d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e0:	461a      	mov	r2, r3
 80099e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80099e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	3301      	adds	r3, #1
 80099ec:	613b      	str	r3, [r7, #16]
 80099ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099f2:	461a      	mov	r2, r3
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d3b5      	bcc.n	8009966 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a0c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009a1a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d105      	bne.n	8009a30 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	f043 0210 	orr.w	r2, r3, #16
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	699a      	ldr	r2, [r3, #24]
 8009a34:	4b0f      	ldr	r3, [pc, #60]	@ (8009a74 <USB_DevInit+0x2b4>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d005      	beq.n	8009a50 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	f043 0208 	orr.w	r2, r3, #8
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d105      	bne.n	8009a64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	699a      	ldr	r2, [r3, #24]
 8009a5c:	4b06      	ldr	r3, [pc, #24]	@ (8009a78 <USB_DevInit+0x2b8>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a70:	b004      	add	sp, #16
 8009a72:	4770      	bx	lr
 8009a74:	803c3800 	.word	0x803c3800
 8009a78:	40000004 	.word	0x40000004

08009a7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a96:	d901      	bls.n	8009a9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e01b      	b.n	8009ad4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	daf2      	bge.n	8009a8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	019b      	lsls	r3, r3, #6
 8009aac:	f043 0220 	orr.w	r2, r3, #32
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ac0:	d901      	bls.n	8009ac6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e006      	b.n	8009ad4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	f003 0320 	and.w	r3, r3, #32
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	d0f0      	beq.n	8009ab4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3301      	adds	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009af8:	d901      	bls.n	8009afe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e018      	b.n	8009b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	daf2      	bge.n	8009aec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2210      	movs	r2, #16
 8009b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3301      	adds	r3, #1
 8009b14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b1c:	d901      	bls.n	8009b22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e006      	b.n	8009b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	f003 0310 	and.w	r3, r3, #16
 8009b2a:	2b10      	cmp	r3, #16
 8009b2c:	d0f0      	beq.n	8009b10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3714      	adds	r7, #20
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	460b      	mov	r3, r1
 8009b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	78fb      	ldrb	r3, [r7, #3]
 8009b56:	68f9      	ldr	r1, [r7, #12]
 8009b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b085      	sub	sp, #20
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009b88:	f023 0303 	bic.w	r3, r3, #3
 8009b8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b9c:	f043 0302 	orr.w	r3, r3, #2
 8009ba0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	f003 0301 	and.w	r3, r3, #1
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009be4:	d901      	bls.n	8009bea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e022      	b.n	8009c30 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	daf2      	bge.n	8009bd8 <USB_CoreReset+0xc>

  count = 10U;
 8009bf2:	230a      	movs	r3, #10
 8009bf4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009bf6:	e002      	b.n	8009bfe <USB_CoreReset+0x32>
  {
    count--;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1f9      	bne.n	8009bf8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	f043 0201 	orr.w	r2, r3, #1
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3301      	adds	r3, #1
 8009c14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c1c:	d901      	bls.n	8009c22 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e006      	b.n	8009c30 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d0f0      	beq.n	8009c10 <USB_CoreReset+0x44>

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009c42:	4b96      	ldr	r3, [pc, #600]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009c44:	22c0      	movs	r2, #192	@ 0xc0
 8009c46:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009c48:	4b94      	ldr	r3, [pc, #592]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009c4a:	22a8      	movs	r2, #168	@ 0xa8
 8009c4c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8009c4e:	4b93      	ldr	r3, [pc, #588]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009c50:	2201      	movs	r2, #1
 8009c52:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 168;
 8009c54:	4b91      	ldr	r3, [pc, #580]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009c56:	22a8      	movs	r2, #168	@ 0xa8
 8009c58:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009c5a:	4b91      	ldr	r3, [pc, #580]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009c5c:	22ff      	movs	r2, #255	@ 0xff
 8009c5e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009c60:	4b8f      	ldr	r3, [pc, #572]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009c62:	22ff      	movs	r2, #255	@ 0xff
 8009c64:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009c66:	4b8e      	ldr	r3, [pc, #568]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009c68:	22ff      	movs	r2, #255	@ 0xff
 8009c6a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8009c72:	4b8c      	ldr	r3, [pc, #560]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8009c78:	4b8a      	ldr	r3, [pc, #552]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009c7e:	4b89      	ldr	r3, [pc, #548]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8009c84:	4b87      	ldr	r3, [pc, #540]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	f005 f86d 	bl	800ed6c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009c92:	4b82      	ldr	r3, [pc, #520]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	061a      	lsls	r2, r3, #24
 8009c98:	4b80      	ldr	r3, [pc, #512]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009c9a:	785b      	ldrb	r3, [r3, #1]
 8009c9c:	041b      	lsls	r3, r3, #16
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	4b7e      	ldr	r3, [pc, #504]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009ca2:	789b      	ldrb	r3, [r3, #2]
 8009ca4:	021b      	lsls	r3, r3, #8
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	4a7c      	ldr	r2, [pc, #496]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009caa:	78d2      	ldrb	r2, [r2, #3]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	061a      	lsls	r2, r3, #24
 8009cb0:	4b7a      	ldr	r3, [pc, #488]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	0619      	lsls	r1, r3, #24
 8009cb6:	4b79      	ldr	r3, [pc, #484]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009cb8:	785b      	ldrb	r3, [r3, #1]
 8009cba:	041b      	lsls	r3, r3, #16
 8009cbc:	4319      	orrs	r1, r3
 8009cbe:	4b77      	ldr	r3, [pc, #476]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009cc0:	789b      	ldrb	r3, [r3, #2]
 8009cc2:	021b      	lsls	r3, r3, #8
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	4975      	ldr	r1, [pc, #468]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009cc8:	78c9      	ldrb	r1, [r1, #3]
 8009cca:	430b      	orrs	r3, r1
 8009ccc:	021b      	lsls	r3, r3, #8
 8009cce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009cd2:	431a      	orrs	r2, r3
 8009cd4:	4b71      	ldr	r3, [pc, #452]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	0619      	lsls	r1, r3, #24
 8009cda:	4b70      	ldr	r3, [pc, #448]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009cdc:	785b      	ldrb	r3, [r3, #1]
 8009cde:	041b      	lsls	r3, r3, #16
 8009ce0:	4319      	orrs	r1, r3
 8009ce2:	4b6e      	ldr	r3, [pc, #440]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009ce4:	789b      	ldrb	r3, [r3, #2]
 8009ce6:	021b      	lsls	r3, r3, #8
 8009ce8:	430b      	orrs	r3, r1
 8009cea:	496c      	ldr	r1, [pc, #432]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009cec:	78c9      	ldrb	r1, [r1, #3]
 8009cee:	430b      	orrs	r3, r1
 8009cf0:	0a1b      	lsrs	r3, r3, #8
 8009cf2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	4b68      	ldr	r3, [pc, #416]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	0619      	lsls	r1, r3, #24
 8009cfe:	4b67      	ldr	r3, [pc, #412]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009d00:	785b      	ldrb	r3, [r3, #1]
 8009d02:	041b      	lsls	r3, r3, #16
 8009d04:	4319      	orrs	r1, r3
 8009d06:	4b65      	ldr	r3, [pc, #404]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009d08:	789b      	ldrb	r3, [r3, #2]
 8009d0a:	021b      	lsls	r3, r3, #8
 8009d0c:	430b      	orrs	r3, r1
 8009d0e:	4963      	ldr	r1, [pc, #396]	@ (8009e9c <MX_LWIP_Init+0x260>)
 8009d10:	78c9      	ldrb	r1, [r1, #3]
 8009d12:	430b      	orrs	r3, r1
 8009d14:	0e1b      	lsrs	r3, r3, #24
 8009d16:	4313      	orrs	r3, r2
 8009d18:	4a63      	ldr	r2, [pc, #396]	@ (8009ea8 <MX_LWIP_Init+0x26c>)
 8009d1a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009d1c:	4b60      	ldr	r3, [pc, #384]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	061a      	lsls	r2, r3, #24
 8009d22:	4b5f      	ldr	r3, [pc, #380]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d24:	785b      	ldrb	r3, [r3, #1]
 8009d26:	041b      	lsls	r3, r3, #16
 8009d28:	431a      	orrs	r2, r3
 8009d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d2c:	789b      	ldrb	r3, [r3, #2]
 8009d2e:	021b      	lsls	r3, r3, #8
 8009d30:	4313      	orrs	r3, r2
 8009d32:	4a5b      	ldr	r2, [pc, #364]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d34:	78d2      	ldrb	r2, [r2, #3]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	061a      	lsls	r2, r3, #24
 8009d3a:	4b59      	ldr	r3, [pc, #356]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	0619      	lsls	r1, r3, #24
 8009d40:	4b57      	ldr	r3, [pc, #348]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d42:	785b      	ldrb	r3, [r3, #1]
 8009d44:	041b      	lsls	r3, r3, #16
 8009d46:	4319      	orrs	r1, r3
 8009d48:	4b55      	ldr	r3, [pc, #340]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d4a:	789b      	ldrb	r3, [r3, #2]
 8009d4c:	021b      	lsls	r3, r3, #8
 8009d4e:	430b      	orrs	r3, r1
 8009d50:	4953      	ldr	r1, [pc, #332]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d52:	78c9      	ldrb	r1, [r1, #3]
 8009d54:	430b      	orrs	r3, r1
 8009d56:	021b      	lsls	r3, r3, #8
 8009d58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	4b50      	ldr	r3, [pc, #320]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	0619      	lsls	r1, r3, #24
 8009d64:	4b4e      	ldr	r3, [pc, #312]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d66:	785b      	ldrb	r3, [r3, #1]
 8009d68:	041b      	lsls	r3, r3, #16
 8009d6a:	4319      	orrs	r1, r3
 8009d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d6e:	789b      	ldrb	r3, [r3, #2]
 8009d70:	021b      	lsls	r3, r3, #8
 8009d72:	430b      	orrs	r3, r1
 8009d74:	494a      	ldr	r1, [pc, #296]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d76:	78c9      	ldrb	r1, [r1, #3]
 8009d78:	430b      	orrs	r3, r1
 8009d7a:	0a1b      	lsrs	r3, r3, #8
 8009d7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009d80:	431a      	orrs	r2, r3
 8009d82:	4b47      	ldr	r3, [pc, #284]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	0619      	lsls	r1, r3, #24
 8009d88:	4b45      	ldr	r3, [pc, #276]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	041b      	lsls	r3, r3, #16
 8009d8e:	4319      	orrs	r1, r3
 8009d90:	4b43      	ldr	r3, [pc, #268]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d92:	789b      	ldrb	r3, [r3, #2]
 8009d94:	021b      	lsls	r3, r3, #8
 8009d96:	430b      	orrs	r3, r1
 8009d98:	4941      	ldr	r1, [pc, #260]	@ (8009ea0 <MX_LWIP_Init+0x264>)
 8009d9a:	78c9      	ldrb	r1, [r1, #3]
 8009d9c:	430b      	orrs	r3, r1
 8009d9e:	0e1b      	lsrs	r3, r3, #24
 8009da0:	4313      	orrs	r3, r2
 8009da2:	4a42      	ldr	r2, [pc, #264]	@ (8009eac <MX_LWIP_Init+0x270>)
 8009da4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009da6:	4b3f      	ldr	r3, [pc, #252]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	061a      	lsls	r2, r3, #24
 8009dac:	4b3d      	ldr	r3, [pc, #244]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	041b      	lsls	r3, r3, #16
 8009db2:	431a      	orrs	r2, r3
 8009db4:	4b3b      	ldr	r3, [pc, #236]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009db6:	789b      	ldrb	r3, [r3, #2]
 8009db8:	021b      	lsls	r3, r3, #8
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	4a39      	ldr	r2, [pc, #228]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009dbe:	78d2      	ldrb	r2, [r2, #3]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	061a      	lsls	r2, r3, #24
 8009dc4:	4b37      	ldr	r3, [pc, #220]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	0619      	lsls	r1, r3, #24
 8009dca:	4b36      	ldr	r3, [pc, #216]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009dcc:	785b      	ldrb	r3, [r3, #1]
 8009dce:	041b      	lsls	r3, r3, #16
 8009dd0:	4319      	orrs	r1, r3
 8009dd2:	4b34      	ldr	r3, [pc, #208]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009dd4:	789b      	ldrb	r3, [r3, #2]
 8009dd6:	021b      	lsls	r3, r3, #8
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	4932      	ldr	r1, [pc, #200]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009ddc:	78c9      	ldrb	r1, [r1, #3]
 8009dde:	430b      	orrs	r3, r1
 8009de0:	021b      	lsls	r3, r3, #8
 8009de2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009de6:	431a      	orrs	r2, r3
 8009de8:	4b2e      	ldr	r3, [pc, #184]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	0619      	lsls	r1, r3, #24
 8009dee:	4b2d      	ldr	r3, [pc, #180]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009df0:	785b      	ldrb	r3, [r3, #1]
 8009df2:	041b      	lsls	r3, r3, #16
 8009df4:	4319      	orrs	r1, r3
 8009df6:	4b2b      	ldr	r3, [pc, #172]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009df8:	789b      	ldrb	r3, [r3, #2]
 8009dfa:	021b      	lsls	r3, r3, #8
 8009dfc:	430b      	orrs	r3, r1
 8009dfe:	4929      	ldr	r1, [pc, #164]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009e00:	78c9      	ldrb	r1, [r1, #3]
 8009e02:	430b      	orrs	r3, r1
 8009e04:	0a1b      	lsrs	r3, r3, #8
 8009e06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	4b25      	ldr	r3, [pc, #148]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	0619      	lsls	r1, r3, #24
 8009e12:	4b24      	ldr	r3, [pc, #144]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	041b      	lsls	r3, r3, #16
 8009e18:	4319      	orrs	r1, r3
 8009e1a:	4b22      	ldr	r3, [pc, #136]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009e1c:	789b      	ldrb	r3, [r3, #2]
 8009e1e:	021b      	lsls	r3, r3, #8
 8009e20:	430b      	orrs	r3, r1
 8009e22:	4920      	ldr	r1, [pc, #128]	@ (8009ea4 <MX_LWIP_Init+0x268>)
 8009e24:	78c9      	ldrb	r1, [r1, #3]
 8009e26:	430b      	orrs	r3, r1
 8009e28:	0e1b      	lsrs	r3, r3, #24
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	4a20      	ldr	r2, [pc, #128]	@ (8009eb0 <MX_LWIP_Init+0x274>)
 8009e2e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009e30:	4b20      	ldr	r3, [pc, #128]	@ (8009eb4 <MX_LWIP_Init+0x278>)
 8009e32:	9302      	str	r3, [sp, #8]
 8009e34:	4b20      	ldr	r3, [pc, #128]	@ (8009eb8 <MX_LWIP_Init+0x27c>)
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	2300      	movs	r3, #0
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8009eb0 <MX_LWIP_Init+0x274>)
 8009e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8009eac <MX_LWIP_Init+0x270>)
 8009e40:	4919      	ldr	r1, [pc, #100]	@ (8009ea8 <MX_LWIP_Init+0x26c>)
 8009e42:	481e      	ldr	r0, [pc, #120]	@ (8009ebc <MX_LWIP_Init+0x280>)
 8009e44:	f005 fd58 	bl	800f8f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009e48:	481c      	ldr	r0, [pc, #112]	@ (8009ebc <MX_LWIP_Init+0x280>)
 8009e4a:	f005 ff07 	bl	800fc5c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009e4e:	481b      	ldr	r0, [pc, #108]	@ (8009ebc <MX_LWIP_Init+0x280>)
 8009e50:	f005 ff14 	bl	800fc7c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009e54:	491a      	ldr	r1, [pc, #104]	@ (8009ec0 <MX_LWIP_Init+0x284>)
 8009e56:	4819      	ldr	r0, [pc, #100]	@ (8009ebc <MX_LWIP_Init+0x280>)
 8009e58:	f006 f812 	bl	800fe80 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8009e5c:	2224      	movs	r2, #36	@ 0x24
 8009e5e:	2100      	movs	r1, #0
 8009e60:	4818      	ldr	r0, [pc, #96]	@ (8009ec4 <MX_LWIP_Init+0x288>)
 8009e62:	f010 f993 	bl	801a18c <memset>
  attributes.name = "EthLink";
 8009e66:	4b17      	ldr	r3, [pc, #92]	@ (8009ec4 <MX_LWIP_Init+0x288>)
 8009e68:	4a17      	ldr	r2, [pc, #92]	@ (8009ec8 <MX_LWIP_Init+0x28c>)
 8009e6a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8009e6c:	4b15      	ldr	r3, [pc, #84]	@ (8009ec4 <MX_LWIP_Init+0x288>)
 8009e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009e72:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8009e74:	4b13      	ldr	r3, [pc, #76]	@ (8009ec4 <MX_LWIP_Init+0x288>)
 8009e76:	2210      	movs	r2, #16
 8009e78:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8009e7a:	4a12      	ldr	r2, [pc, #72]	@ (8009ec4 <MX_LWIP_Init+0x288>)
 8009e7c:	490f      	ldr	r1, [pc, #60]	@ (8009ebc <MX_LWIP_Init+0x280>)
 8009e7e:	4813      	ldr	r0, [pc, #76]	@ (8009ecc <MX_LWIP_Init+0x290>)
 8009e80:	f000 fdda 	bl	800aa38 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  printf("IP: %s\n", ipaddr_ntoa(&gnetif.ip_addr));
 8009e84:	4812      	ldr	r0, [pc, #72]	@ (8009ed0 <MX_LWIP_Init+0x294>)
 8009e86:	f00e f93f 	bl	8018108 <ip4addr_ntoa>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4811      	ldr	r0, [pc, #68]	@ (8009ed4 <MX_LWIP_Init+0x298>)
 8009e90:	f010 f824 	bl	8019edc <iprintf>
/* USER CODE END 3 */
}
 8009e94:	bf00      	nop
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20000b70 	.word	0x20000b70
 8009ea0:	20000b74 	.word	0x20000b74
 8009ea4:	20000b78 	.word	0x20000b78
 8009ea8:	20000b64 	.word	0x20000b64
 8009eac:	20000b68 	.word	0x20000b68
 8009eb0:	20000b6c 	.word	0x20000b6c
 8009eb4:	0800eca9 	.word	0x0800eca9
 8009eb8:	0800a419 	.word	0x0800a419
 8009ebc:	20000b30 	.word	0x20000b30
 8009ec0:	08009ed9 	.word	0x08009ed9
 8009ec4:	20000b7c 	.word	0x20000b7c
 8009ec8:	0801b0d8 	.word	0x0801b0d8
 8009ecc:	0800a6f1 	.word	0x0800a6f1
 8009ed0:	20000b34 	.word	0x20000b34
 8009ed4:	0801b0e0 	.word	0x0801b0e0

08009ed8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b087      	sub	sp, #28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009efe:	2320      	movs	r3, #32
 8009f00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009f02:	f3bf 8f4f 	dsb	sy
}
 8009f06:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8009f08:	e00b      	b.n	8009f22 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8009f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8009f40 <SCB_InvalidateDCache_by_Addr+0x54>)
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	4413      	add	r3, r2
 8009f18:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dcf0      	bgt.n	8009f0a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009f28:	f3bf 8f4f 	dsb	sy
}
 8009f2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009f2e:	f3bf 8f6f 	isb	sy
}
 8009f32:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8009f34:	bf00      	nop
 8009f36:	371c      	adds	r7, #28
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	e000ed00 	.word	0xe000ed00

08009f44 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009f4c:	4b04      	ldr	r3, [pc, #16]	@ (8009f60 <HAL_ETH_RxCpltCallback+0x1c>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f001 f88f 	bl	800b074 <osSemaphoreRelease>
}
 8009f56:	bf00      	nop
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20009eac 	.word	0x20009eac

08009f64 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8009f6c:	4b04      	ldr	r3, [pc, #16]	@ (8009f80 <HAL_ETH_TxCpltCallback+0x1c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f001 f87f 	bl	800b074 <osSemaphoreRelease>
}
 8009f76:	bf00      	nop
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20009eb0 	.word	0x20009eb0

08009f84 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7f9 fcd6 	bl	800393e <HAL_ETH_GetDMAError>
 8009f92:	4603      	mov	r3, r0
 8009f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f98:	2b80      	cmp	r3, #128	@ 0x80
 8009f9a:	d104      	bne.n	8009fa6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8009f9c:	4b04      	ldr	r3, [pc, #16]	@ (8009fb0 <HAL_ETH_ErrorCallback+0x2c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f001 f867 	bl	800b074 <osSemaphoreRelease>
  }
}
 8009fa6:	bf00      	nop
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20009eac 	.word	0x20009eac

08009fb4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b0aa      	sub	sp, #168	@ 0xa8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8009fce:	f107 0310 	add.w	r3, r7, #16
 8009fd2:	2264      	movs	r2, #100	@ 0x64
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f010 f8d8 	bl	801a18c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009fdc:	4b89      	ldr	r3, [pc, #548]	@ (800a204 <low_level_init+0x250>)
 8009fde:	4a8a      	ldr	r2, [pc, #552]	@ (800a208 <low_level_init+0x254>)
 8009fe0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8009fe6:	2380      	movs	r3, #128	@ 0x80
 8009fe8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009fea:	23e1      	movs	r3, #225	@ 0xe1
 8009fec:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009ffa:	4a82      	ldr	r2, [pc, #520]	@ (800a204 <low_level_init+0x250>)
 8009ffc:	f107 0308 	add.w	r3, r7, #8
 800a000:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a002:	4b80      	ldr	r3, [pc, #512]	@ (800a204 <low_level_init+0x250>)
 800a004:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a008:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a00a:	4b7e      	ldr	r3, [pc, #504]	@ (800a204 <low_level_init+0x250>)
 800a00c:	4a7f      	ldr	r2, [pc, #508]	@ (800a20c <low_level_init+0x258>)
 800a00e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a010:	4b7c      	ldr	r3, [pc, #496]	@ (800a204 <low_level_init+0x250>)
 800a012:	4a7f      	ldr	r2, [pc, #508]	@ (800a210 <low_level_init+0x25c>)
 800a014:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a016:	4b7b      	ldr	r3, [pc, #492]	@ (800a204 <low_level_init+0x250>)
 800a018:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a01c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a01e:	4879      	ldr	r0, [pc, #484]	@ (800a204 <low_level_init+0x250>)
 800a020:	f7f8 fe44 	bl	8002cac <HAL_ETH_Init>
 800a024:	4603      	mov	r3, r0
 800a026:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a02a:	2238      	movs	r2, #56	@ 0x38
 800a02c:	2100      	movs	r1, #0
 800a02e:	4879      	ldr	r0, [pc, #484]	@ (800a214 <low_level_init+0x260>)
 800a030:	f010 f8ac 	bl	801a18c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a034:	4b77      	ldr	r3, [pc, #476]	@ (800a214 <low_level_init+0x260>)
 800a036:	2221      	movs	r2, #33	@ 0x21
 800a038:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a03a:	4b76      	ldr	r3, [pc, #472]	@ (800a214 <low_level_init+0x260>)
 800a03c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a040:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a042:	4b74      	ldr	r3, [pc, #464]	@ (800a214 <low_level_init+0x260>)
 800a044:	2200      	movs	r2, #0
 800a046:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a048:	4873      	ldr	r0, [pc, #460]	@ (800a218 <low_level_init+0x264>)
 800a04a:	f005 fb0f 	bl	800f66c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2206      	movs	r2, #6
 800a052:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a056:	4b6b      	ldr	r3, [pc, #428]	@ (800a204 <low_level_init+0x250>)
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	781a      	ldrb	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a062:	4b68      	ldr	r3, [pc, #416]	@ (800a204 <low_level_init+0x250>)
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	785a      	ldrb	r2, [r3, #1]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a06e:	4b65      	ldr	r3, [pc, #404]	@ (800a204 <low_level_init+0x250>)
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	789a      	ldrb	r2, [r3, #2]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a07a:	4b62      	ldr	r3, [pc, #392]	@ (800a204 <low_level_init+0x250>)
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	78da      	ldrb	r2, [r3, #3]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a086:	4b5f      	ldr	r3, [pc, #380]	@ (800a204 <low_level_init+0x250>)
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	791a      	ldrb	r2, [r3, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a092:	4b5c      	ldr	r3, [pc, #368]	@ (800a204 <low_level_init+0x250>)
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	795a      	ldrb	r2, [r3, #5]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a0a4:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a0ac:	f043 030a 	orr.w	r3, r3, #10
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	2001      	movs	r0, #1
 800a0be:	f000 fed7 	bl	800ae70 <osSemaphoreNew>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	4a55      	ldr	r2, [pc, #340]	@ (800a21c <low_level_init+0x268>)
 800a0c6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	2001      	movs	r0, #1
 800a0ce:	f000 fecf 	bl	800ae70 <osSemaphoreNew>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	4a52      	ldr	r2, [pc, #328]	@ (800a220 <low_level_init+0x26c>)
 800a0d6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800a0d8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800a0dc:	2224      	movs	r2, #36	@ 0x24
 800a0de:	2100      	movs	r1, #0
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f010 f853 	bl	801a18c <memset>
  attributes.name = "EthIf";
 800a0e6:	4b4f      	ldr	r3, [pc, #316]	@ (800a224 <low_level_init+0x270>)
 800a0e8:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800a0ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800a0f2:	2330      	movs	r3, #48	@ 0x30
 800a0f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800a0f8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	4849      	ldr	r0, [pc, #292]	@ (800a228 <low_level_init+0x274>)
 800a102:	f000 fc99 	bl	800aa38 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a106:	4949      	ldr	r1, [pc, #292]	@ (800a22c <low_level_init+0x278>)
 800a108:	4849      	ldr	r0, [pc, #292]	@ (800a230 <low_level_init+0x27c>)
 800a10a:	f7f7 fd68 	bl	8001bde <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800a10e:	4848      	ldr	r0, [pc, #288]	@ (800a230 <low_level_init+0x27c>)
 800a110:	f7f7 fd97 	bl	8001c42 <LAN8742_Init>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d006      	beq.n	800a128 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f005 fe80 	bl	800fe20 <netif_set_link_down>
    netif_set_down(netif);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f005 fe17 	bl	800fd54 <netif_set_down>
 800a126:	e06a      	b.n	800a1fe <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800a128:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d164      	bne.n	800a1fa <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a130:	483f      	ldr	r0, [pc, #252]	@ (800a230 <low_level_init+0x27c>)
 800a132:	f7f7 fdd3 	bl	8001cdc <LAN8742_GetLinkState>
 800a136:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a13a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a13e:	2b01      	cmp	r3, #1
 800a140:	dc06      	bgt.n	800a150 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f005 fe6c 	bl	800fe20 <netif_set_link_down>
      netif_set_down(netif);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f005 fe03 	bl	800fd54 <netif_set_down>
 800a14e:	e056      	b.n	800a1fe <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800a150:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a154:	3b02      	subs	r3, #2
 800a156:	2b03      	cmp	r3, #3
 800a158:	d82a      	bhi.n	800a1b0 <low_level_init+0x1fc>
 800a15a:	a201      	add	r2, pc, #4	@ (adr r2, 800a160 <low_level_init+0x1ac>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a171 	.word	0x0800a171
 800a164:	0800a183 	.word	0x0800a183
 800a168:	0800a193 	.word	0x0800a193
 800a16c:	0800a1a3 	.word	0x0800a1a3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800a170:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a174:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800a178:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a17c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800a180:	e01f      	b.n	800a1c2 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800a182:	2300      	movs	r3, #0
 800a184:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800a188:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a18c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800a190:	e017      	b.n	800a1c2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800a192:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a196:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800a19a:	2300      	movs	r3, #0
 800a19c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800a1a0:	e00f      	b.n	800a1c2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800a1ae:	e008      	b.n	800a1c2 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800a1b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a1b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800a1b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a1bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800a1c0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a1c2:	f107 0310 	add.w	r3, r7, #16
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	480e      	ldr	r0, [pc, #56]	@ (800a204 <low_level_init+0x250>)
 800a1ca:	f7f9 fa57 	bl	800367c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a1ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800a1d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a1da:	f107 0310 	add.w	r3, r7, #16
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4808      	ldr	r0, [pc, #32]	@ (800a204 <low_level_init+0x250>)
 800a1e2:	f7f9 fb42 	bl	800386a <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800a1e6:	4807      	ldr	r0, [pc, #28]	@ (800a204 <low_level_init+0x250>)
 800a1e8:	f7f8 fdfa 	bl	8002de0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f005 fd45 	bl	800fc7c <netif_set_up>
    netif_set_link_up(netif);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f005 fde0 	bl	800fdb8 <netif_set_link_up>
 800a1f8:	e001      	b.n	800a1fe <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800a1fa:	f7f6 ff3f 	bl	800107c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800a1fe:	37a8      	adds	r7, #168	@ 0xa8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	20009eb4 	.word	0x20009eb4
 800a208:	40028000 	.word	0x40028000
 800a20c:	2000012c 	.word	0x2000012c
 800a210:	2000008c 	.word	0x2000008c
 800a214:	20009f64 	.word	0x20009f64
 800a218:	0801e0d4 	.word	0x0801e0d4
 800a21c:	20009eac 	.word	0x20009eac
 800a220:	20009eb0 	.word	0x20009eb0
 800a224:	0801b0e8 	.word	0x0801b0e8
 800a228:	0800a3c5 	.word	0x0800a3c5
 800a22c:	2000000c 	.word	0x2000000c
 800a230:	20009f9c 	.word	0x20009f9c

0800a234 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b092      	sub	sp, #72	@ 0x48
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a242:	2300      	movs	r3, #0
 800a244:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a24c:	f107 030c 	add.w	r3, r7, #12
 800a250:	2230      	movs	r2, #48	@ 0x30
 800a252:	2100      	movs	r1, #0
 800a254:	4618      	mov	r0, r3
 800a256:	f00f ff99 	bl	801a18c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a25a:	f107 030c 	add.w	r3, r7, #12
 800a25e:	2230      	movs	r2, #48	@ 0x30
 800a260:	2100      	movs	r1, #0
 800a262:	4618      	mov	r0, r3
 800a264:	f00f ff92 	bl	801a18c <memset>

  for(q = p; q != NULL; q = q->next)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a26c:	e045      	b.n	800a2fa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a26e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a270:	2b03      	cmp	r3, #3
 800a272:	d902      	bls.n	800a27a <low_level_output+0x46>
      return ERR_IF;
 800a274:	f06f 030b 	mvn.w	r3, #11
 800a278:	e07f      	b.n	800a37a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800a27a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a27c:	6859      	ldr	r1, [r3, #4]
 800a27e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a280:	4613      	mov	r3, r2
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	4413      	add	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	3348      	adds	r3, #72	@ 0x48
 800a28a:	443b      	add	r3, r7
 800a28c:	3b3c      	subs	r3, #60	@ 0x3c
 800a28e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a292:	895b      	ldrh	r3, [r3, #10]
 800a294:	4619      	mov	r1, r3
 800a296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a298:	4613      	mov	r3, r2
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	4413      	add	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	3348      	adds	r3, #72	@ 0x48
 800a2a2:	443b      	add	r3, r7
 800a2a4:	3b38      	subs	r3, #56	@ 0x38
 800a2a6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a2a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d011      	beq.n	800a2d2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a2ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2b0:	1e5a      	subs	r2, r3, #1
 800a2b2:	f107 000c 	add.w	r0, r7, #12
 800a2b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	005b      	lsls	r3, r3, #1
 800a2bc:	440b      	add	r3, r1
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	18c1      	adds	r1, r0, r3
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	005b      	lsls	r3, r3, #1
 800a2c6:	4413      	add	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	3348      	adds	r3, #72	@ 0x48
 800a2cc:	443b      	add	r3, r7
 800a2ce:	3b34      	subs	r3, #52	@ 0x34
 800a2d0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a2d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d109      	bne.n	800a2ee <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a2da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2dc:	4613      	mov	r3, r2
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	4413      	add	r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	3348      	adds	r3, #72	@ 0x48
 800a2e6:	443b      	add	r3, r7
 800a2e8:	3b34      	subs	r3, #52	@ 0x34
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a2ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800a2f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1b6      	bne.n	800a26e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	891b      	ldrh	r3, [r3, #8]
 800a304:	461a      	mov	r2, r3
 800a306:	4b1f      	ldr	r3, [pc, #124]	@ (800a384 <low_level_output+0x150>)
 800a308:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a30a:	4a1e      	ldr	r2, [pc, #120]	@ (800a384 <low_level_output+0x150>)
 800a30c:	f107 030c 	add.w	r3, r7, #12
 800a310:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a312:	4a1c      	ldr	r2, [pc, #112]	@ (800a384 <low_level_output+0x150>)
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800a318:	6838      	ldr	r0, [r7, #0]
 800a31a:	f006 fa05 	bl	8010728 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800a31e:	4919      	ldr	r1, [pc, #100]	@ (800a384 <low_level_output+0x150>)
 800a320:	4819      	ldr	r0, [pc, #100]	@ (800a388 <low_level_output+0x154>)
 800a322:	f7f8 fe4d 	bl	8002fc0 <HAL_ETH_Transmit_IT>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d103      	bne.n	800a334 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a332:	e01b      	b.n	800a36c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800a334:	4814      	ldr	r0, [pc, #80]	@ (800a388 <low_level_output+0x154>)
 800a336:	f7f9 faf5 	bl	8003924 <HAL_ETH_GetError>
 800a33a:	4603      	mov	r3, r0
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00d      	beq.n	800a360 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800a344:	4b11      	ldr	r3, [pc, #68]	@ (800a38c <low_level_output+0x158>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a34c:	4618      	mov	r0, r3
 800a34e:	f000 fe2b 	bl	800afa8 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800a352:	480d      	ldr	r0, [pc, #52]	@ (800a388 <low_level_output+0x154>)
 800a354:	f7f8 ffd4 	bl	8003300 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800a358:	23fe      	movs	r3, #254	@ 0xfe
 800a35a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a35e:	e005      	b.n	800a36c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800a360:	6838      	ldr	r0, [r7, #0]
 800a362:	f006 f93b 	bl	80105dc <pbuf_free>
        errval =  ERR_IF;
 800a366:	23f4      	movs	r3, #244	@ 0xf4
 800a368:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800a36c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a370:	f113 0f02 	cmn.w	r3, #2
 800a374:	d0d3      	beq.n	800a31e <low_level_output+0xea>

  return errval;
 800a376:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3748      	adds	r7, #72	@ 0x48
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20009f64 	.word	0x20009f64
 800a388:	20009eb4 	.word	0x20009eb4
 800a38c:	20009eb0 	.word	0x20009eb0

0800a390 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a39c:	4b07      	ldr	r3, [pc, #28]	@ (800a3bc <low_level_input+0x2c>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d105      	bne.n	800a3b0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a3a4:	f107 030c 	add.w	r3, r7, #12
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4805      	ldr	r0, [pc, #20]	@ (800a3c0 <low_level_input+0x30>)
 800a3ac:	f7f8 fe64 	bl	8003078 <HAL_ETH_ReadData>
  }

  return p;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20009ea8 	.word	0x20009ea8
 800a3c0:	20009eb4 	.word	0x20009eb4

0800a3c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a3d4:	4b0f      	ldr	r3, [pc, #60]	@ (800a414 <ethernetif_input+0x50>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f000 fde3 	bl	800afa8 <osSemaphoreAcquire>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1f5      	bne.n	800a3d4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800a3e8:	68b8      	ldr	r0, [r7, #8]
 800a3ea:	f7ff ffd1 	bl	800a390 <low_level_input>
 800a3ee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00a      	beq.n	800a40c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	4798      	blx	r3
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d002      	beq.n	800a40c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f006 f8e8 	bl	80105dc <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1ea      	bne.n	800a3e8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a412:	e7df      	b.n	800a3d4 <ethernetif_input+0x10>
 800a414:	20009eac 	.word	0x20009eac

0800a418 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <ethernetif_init+0x1c>
 800a426:	4b0e      	ldr	r3, [pc, #56]	@ (800a460 <ethernetif_init+0x48>)
 800a428:	f240 220d 	movw	r2, #525	@ 0x20d
 800a42c:	490d      	ldr	r1, [pc, #52]	@ (800a464 <ethernetif_init+0x4c>)
 800a42e:	480e      	ldr	r0, [pc, #56]	@ (800a468 <ethernetif_init+0x50>)
 800a430:	f00f fd54 	bl	8019edc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2273      	movs	r2, #115	@ 0x73
 800a438:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2274      	movs	r2, #116	@ 0x74
 800a440:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a09      	ldr	r2, [pc, #36]	@ (800a46c <ethernetif_init+0x54>)
 800a448:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a08      	ldr	r2, [pc, #32]	@ (800a470 <ethernetif_init+0x58>)
 800a44e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff fdaf 	bl	8009fb4 <low_level_init>

  return ERR_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	0801b0f0 	.word	0x0801b0f0
 800a464:	0801b10c 	.word	0x0801b10c
 800a468:	0801b11c 	.word	0x0801b11c
 800a46c:	0801723d 	.word	0x0801723d
 800a470:	0800a235 	.word	0x0800a235

0800a474 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a480:	68f9      	ldr	r1, [r7, #12]
 800a482:	4809      	ldr	r0, [pc, #36]	@ (800a4a8 <pbuf_free_custom+0x34>)
 800a484:	f005 f9e2 	bl	800f84c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a488:	4b08      	ldr	r3, [pc, #32]	@ (800a4ac <pbuf_free_custom+0x38>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d107      	bne.n	800a4a0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a490:	4b06      	ldr	r3, [pc, #24]	@ (800a4ac <pbuf_free_custom+0x38>)
 800a492:	2200      	movs	r2, #0
 800a494:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800a496:	4b06      	ldr	r3, [pc, #24]	@ (800a4b0 <pbuf_free_custom+0x3c>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fdea 	bl	800b074 <osSemaphoreRelease>
  }
}
 800a4a0:	bf00      	nop
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	0801e0d4 	.word	0x0801e0d4
 800a4ac:	20009ea8 	.word	0x20009ea8
 800a4b0:	20009eac 	.word	0x20009eac

0800a4b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a4b8:	f7f7 fcb8 	bl	8001e2c <HAL_GetTick>
 800a4bc:	4603      	mov	r3, r0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	bd80      	pop	{r7, pc}
	...

0800a4c4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b08e      	sub	sp, #56	@ 0x38
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	605a      	str	r2, [r3, #4]
 800a4d6:	609a      	str	r2, [r3, #8]
 800a4d8:	60da      	str	r2, [r3, #12]
 800a4da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a56      	ldr	r2, [pc, #344]	@ (800a63c <HAL_ETH_MspInit+0x178>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	f040 80a6 	bne.w	800a634 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a4e8:	4b55      	ldr	r3, [pc, #340]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ec:	4a54      	ldr	r2, [pc, #336]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a4ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a4f2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a4f4:	4b52      	ldr	r3, [pc, #328]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a4f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4fc:	623b      	str	r3, [r7, #32]
 800a4fe:	6a3b      	ldr	r3, [r7, #32]
 800a500:	4b4f      	ldr	r3, [pc, #316]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a504:	4a4e      	ldr	r2, [pc, #312]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a506:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a50a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a50c:	4b4c      	ldr	r3, [pc, #304]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a50e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a510:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a514:	61fb      	str	r3, [r7, #28]
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	4b49      	ldr	r3, [pc, #292]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a51c:	4a48      	ldr	r2, [pc, #288]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a51e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a522:	6313      	str	r3, [r2, #48]	@ 0x30
 800a524:	4b46      	ldr	r3, [pc, #280]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a52c:	61bb      	str	r3, [r7, #24]
 800a52e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a530:	4b43      	ldr	r3, [pc, #268]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a534:	4a42      	ldr	r2, [pc, #264]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a536:	f043 0304 	orr.w	r3, r3, #4
 800a53a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a53c:	4b40      	ldr	r3, [pc, #256]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a540:	f003 0304 	and.w	r3, r3, #4
 800a544:	617b      	str	r3, [r7, #20]
 800a546:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a548:	4b3d      	ldr	r3, [pc, #244]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a54a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a54c:	4a3c      	ldr	r2, [pc, #240]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a54e:	f043 0301 	orr.w	r3, r3, #1
 800a552:	6313      	str	r3, [r2, #48]	@ 0x30
 800a554:	4b3a      	ldr	r3, [pc, #232]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a558:	f003 0301 	and.w	r3, r3, #1
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a560:	4b37      	ldr	r3, [pc, #220]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a564:	4a36      	ldr	r2, [pc, #216]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a566:	f043 0302 	orr.w	r3, r3, #2
 800a56a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a56c:	4b34      	ldr	r3, [pc, #208]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a56e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a578:	4b31      	ldr	r3, [pc, #196]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a57a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a57c:	4a30      	ldr	r2, [pc, #192]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a57e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a582:	6313      	str	r3, [r2, #48]	@ 0x30
 800a584:	4b2e      	ldr	r3, [pc, #184]	@ (800a640 <HAL_ETH_MspInit+0x17c>)
 800a586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a58c:	60bb      	str	r3, [r7, #8]
 800a58e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a590:	2332      	movs	r3, #50	@ 0x32
 800a592:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a594:	2302      	movs	r3, #2
 800a596:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a598:	2300      	movs	r3, #0
 800a59a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a59c:	2303      	movs	r3, #3
 800a59e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a5a0:	230b      	movs	r3, #11
 800a5a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4826      	ldr	r0, [pc, #152]	@ (800a644 <HAL_ETH_MspInit+0x180>)
 800a5ac:	f7f9 fdf4 	bl	8004198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a5b0:	2386      	movs	r3, #134	@ 0x86
 800a5b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a5c0:	230b      	movs	r3, #11
 800a5c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	481f      	ldr	r0, [pc, #124]	@ (800a648 <HAL_ETH_MspInit+0x184>)
 800a5cc:	f7f9 fde4 	bl	8004198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a5d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a5e2:	230b      	movs	r3, #11
 800a5e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a5e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4817      	ldr	r0, [pc, #92]	@ (800a64c <HAL_ETH_MspInit+0x188>)
 800a5ee:	f7f9 fdd3 	bl	8004198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a5f2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800a5f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a600:	2303      	movs	r3, #3
 800a602:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a604:	230b      	movs	r3, #11
 800a606:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a60c:	4619      	mov	r1, r3
 800a60e:	4810      	ldr	r0, [pc, #64]	@ (800a650 <HAL_ETH_MspInit+0x18c>)
 800a610:	f7f9 fdc2 	bl	8004198 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a614:	2200      	movs	r2, #0
 800a616:	2105      	movs	r1, #5
 800a618:	203d      	movs	r0, #61	@ 0x3d
 800a61a:	f7f7 fcef 	bl	8001ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a61e:	203d      	movs	r0, #61	@ 0x3d
 800a620:	f7f7 fd08 	bl	8002034 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800a624:	2200      	movs	r2, #0
 800a626:	2105      	movs	r1, #5
 800a628:	203e      	movs	r0, #62	@ 0x3e
 800a62a:	f7f7 fce7 	bl	8001ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800a62e:	203e      	movs	r0, #62	@ 0x3e
 800a630:	f7f7 fd00 	bl	8002034 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a634:	bf00      	nop
 800a636:	3738      	adds	r7, #56	@ 0x38
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	40028000 	.word	0x40028000
 800a640:	40023800 	.word	0x40023800
 800a644:	40020800 	.word	0x40020800
 800a648:	40020000 	.word	0x40020000
 800a64c:	40020400 	.word	0x40020400
 800a650:	40021800 	.word	0x40021800

0800a654 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a658:	4802      	ldr	r0, [pc, #8]	@ (800a664 <ETH_PHY_IO_Init+0x10>)
 800a65a:	f7f9 f921 	bl	80038a0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	bd80      	pop	{r7, pc}
 800a664:	20009eb4 	.word	0x20009eb4

0800a668 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a668:	b480      	push	{r7}
 800a66a:	af00      	add	r7, sp, #0
  return 0;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	68f9      	ldr	r1, [r7, #12]
 800a68a:	4807      	ldr	r0, [pc, #28]	@ (800a6a8 <ETH_PHY_IO_ReadReg+0x30>)
 800a68c:	f7f8 ff62 	bl	8003554 <HAL_ETH_ReadPHYRegister>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d002      	beq.n	800a69c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a696:	f04f 33ff 	mov.w	r3, #4294967295
 800a69a:	e000      	b.n	800a69e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20009eb4 	.word	0x20009eb4

0800a6ac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	68f9      	ldr	r1, [r7, #12]
 800a6be:	4807      	ldr	r0, [pc, #28]	@ (800a6dc <ETH_PHY_IO_WriteReg+0x30>)
 800a6c0:	f7f8 ff93 	bl	80035ea <HAL_ETH_WritePHYRegister>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ce:	e000      	b.n	800a6d2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20009eb4 	.word	0x20009eb4

0800a6e0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a6e4:	f7f7 fba2 	bl	8001e2c <HAL_GetTick>
 800a6e8:	4603      	mov	r3, r0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b0a0      	sub	sp, #128	@ 0x80
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a6f8:	f107 0308 	add.w	r3, r7, #8
 800a6fc:	2264      	movs	r2, #100	@ 0x64
 800a6fe:	2100      	movs	r1, #0
 800a700:	4618      	mov	r0, r3
 800a702:	f00f fd43 	bl	801a18c <memset>
  int32_t PHYLinkState = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a70a:	2300      	movs	r3, #0
 800a70c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a70e:	2300      	movs	r3, #0
 800a710:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a712:	2300      	movs	r3, #0
 800a714:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a71a:	483a      	ldr	r0, [pc, #232]	@ (800a804 <ethernet_link_thread+0x114>)
 800a71c:	f7f7 fade 	bl	8001cdc <LAN8742_GetLinkState>
 800a720:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a724:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a728:	089b      	lsrs	r3, r3, #2
 800a72a:	f003 0301 	and.w	r3, r3, #1
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00c      	beq.n	800a74e <ethernet_link_thread+0x5e>
 800a734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a736:	2b01      	cmp	r3, #1
 800a738:	dc09      	bgt.n	800a74e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800a73a:	4833      	ldr	r0, [pc, #204]	@ (800a808 <ethernet_link_thread+0x118>)
 800a73c:	f7f8 fbc0 	bl	8002ec0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a740:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a742:	f005 fb07 	bl	800fd54 <netif_set_down>
    netif_set_link_down(netif);
 800a746:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a748:	f005 fb6a 	bl	800fe20 <netif_set_link_down>
 800a74c:	e055      	b.n	800a7fa <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a74e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a750:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a754:	f003 0304 	and.w	r3, r3, #4
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d14e      	bne.n	800a7fa <ethernet_link_thread+0x10a>
 800a75c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a75e:	2b01      	cmp	r3, #1
 800a760:	dd4b      	ble.n	800a7fa <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800a762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a764:	3b02      	subs	r3, #2
 800a766:	2b03      	cmp	r3, #3
 800a768:	d82a      	bhi.n	800a7c0 <ethernet_link_thread+0xd0>
 800a76a:	a201      	add	r2, pc, #4	@ (adr r2, 800a770 <ethernet_link_thread+0x80>)
 800a76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a770:	0800a781 	.word	0x0800a781
 800a774:	0800a793 	.word	0x0800a793
 800a778:	0800a7a3 	.word	0x0800a7a3
 800a77c:	0800a7b3 	.word	0x0800a7b3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a780:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a784:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a786:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a78a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a78c:	2301      	movs	r3, #1
 800a78e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a790:	e017      	b.n	800a7c2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a792:	2300      	movs	r3, #0
 800a794:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a796:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a79a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a79c:	2301      	movs	r3, #1
 800a79e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a7a0:	e00f      	b.n	800a7c2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a7a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a7a6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a7b0:	e007      	b.n	800a7c2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a7be:	e000      	b.n	800a7c2 <ethernet_link_thread+0xd2>
    default:
      break;
 800a7c0:	bf00      	nop
    }

    if(linkchanged)
 800a7c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d018      	beq.n	800a7fa <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a7c8:	f107 0308 	add.w	r3, r7, #8
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	480e      	ldr	r0, [pc, #56]	@ (800a808 <ethernet_link_thread+0x118>)
 800a7d0:	f7f8 ff54 	bl	800367c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a7d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7d6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a7d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7da:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a7dc:	f107 0308 	add.w	r3, r7, #8
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4809      	ldr	r0, [pc, #36]	@ (800a808 <ethernet_link_thread+0x118>)
 800a7e4:	f7f9 f841 	bl	800386a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800a7e8:	4807      	ldr	r0, [pc, #28]	@ (800a808 <ethernet_link_thread+0x118>)
 800a7ea:	f7f8 faf9 	bl	8002de0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a7ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a7f0:	f005 fa44 	bl	800fc7c <netif_set_up>
      netif_set_link_up(netif);
 800a7f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a7f6:	f005 fadf 	bl	800fdb8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a7fa:	2064      	movs	r0, #100	@ 0x64
 800a7fc:	f000 f9c2 	bl	800ab84 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a800:	e78b      	b.n	800a71a <ethernet_link_thread+0x2a>
 800a802:	bf00      	nop
 800a804:	20009f9c 	.word	0x20009f9c
 800a808:	20009eb4 	.word	0x20009eb4

0800a80c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af02      	add	r7, sp, #8
 800a812:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a814:	4812      	ldr	r0, [pc, #72]	@ (800a860 <HAL_ETH_RxAllocateCallback+0x54>)
 800a816:	f004 ffa5 	bl	800f764 <memp_malloc_pool>
 800a81a:	60f8      	str	r0, [r7, #12]
  if (p)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d014      	beq.n	800a84c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f103 0220 	add.w	r2, r3, #32
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4a0d      	ldr	r2, [pc, #52]	@ (800a864 <HAL_ETH_RxAllocateCallback+0x58>)
 800a830:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a83a:	9201      	str	r2, [sp, #4]
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2241      	movs	r2, #65	@ 0x41
 800a842:	2100      	movs	r1, #0
 800a844:	2000      	movs	r0, #0
 800a846:	f005 fd0f 	bl	8010268 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a84a:	e005      	b.n	800a858 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a84c:	4b06      	ldr	r3, [pc, #24]	@ (800a868 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a84e:	2201      	movs	r2, #1
 800a850:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]
}
 800a858:	bf00      	nop
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	0801e0d4 	.word	0x0801e0d4
 800a864:	0800a475 	.word	0x0800a475
 800a868:	20009ea8 	.word	0x20009ea8

0800a86c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b088      	sub	sp, #32
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
 800a878:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a882:	2300      	movs	r3, #0
 800a884:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	3b20      	subs	r3, #32
 800a88a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	2200      	movs	r2, #0
 800a890:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	2200      	movs	r2, #0
 800a896:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	887a      	ldrh	r2, [r7, #2]
 800a89c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d103      	bne.n	800a8ae <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	69fa      	ldr	r2, [r7, #28]
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	e003      	b.n	800a8b6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	69fa      	ldr	r2, [r7, #28]
 800a8b4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	69fa      	ldr	r2, [r7, #28]
 800a8ba:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	61fb      	str	r3, [r7, #28]
 800a8c2:	e009      	b.n	800a8d8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	891a      	ldrh	r2, [r3, #8]
 800a8c8:	887b      	ldrh	r3, [r7, #2]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	61fb      	str	r3, [r7, #28]
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1f2      	bne.n	800a8c4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800a8de:	887b      	ldrh	r3, [r7, #2]
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7ff fb02 	bl	8009eec <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a8e8:	bf00      	nop
 800a8ea:	3720      	adds	r7, #32
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f005 fe6f 	bl	80105dc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800a8fe:	bf00      	nop
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a906:	b480      	push	{r7}
 800a908:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a90a:	bf00      	nop
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a91a:	f3ef 8305 	mrs	r3, IPSR
 800a91e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a920:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10f      	bne.n	800a946 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a926:	f3ef 8310 	mrs	r3, PRIMASK
 800a92a:	607b      	str	r3, [r7, #4]
  return(result);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d105      	bne.n	800a93e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a932:	f3ef 8311 	mrs	r3, BASEPRI
 800a936:	603b      	str	r3, [r7, #0]
  return(result);
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d007      	beq.n	800a94e <osKernelInitialize+0x3a>
 800a93e:	4b0e      	ldr	r3, [pc, #56]	@ (800a978 <osKernelInitialize+0x64>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b02      	cmp	r3, #2
 800a944:	d103      	bne.n	800a94e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a946:	f06f 0305 	mvn.w	r3, #5
 800a94a:	60fb      	str	r3, [r7, #12]
 800a94c:	e00c      	b.n	800a968 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a94e:	4b0a      	ldr	r3, [pc, #40]	@ (800a978 <osKernelInitialize+0x64>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d105      	bne.n	800a962 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a956:	4b08      	ldr	r3, [pc, #32]	@ (800a978 <osKernelInitialize+0x64>)
 800a958:	2201      	movs	r2, #1
 800a95a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	60fb      	str	r3, [r7, #12]
 800a960:	e002      	b.n	800a968 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a962:	f04f 33ff 	mov.w	r3, #4294967295
 800a966:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a968:	68fb      	ldr	r3, [r7, #12]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	20009fbc 	.word	0x20009fbc

0800a97c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a982:	f3ef 8305 	mrs	r3, IPSR
 800a986:	60bb      	str	r3, [r7, #8]
  return(result);
 800a988:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10f      	bne.n	800a9ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a98e:	f3ef 8310 	mrs	r3, PRIMASK
 800a992:	607b      	str	r3, [r7, #4]
  return(result);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d105      	bne.n	800a9a6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a99a:	f3ef 8311 	mrs	r3, BASEPRI
 800a99e:	603b      	str	r3, [r7, #0]
  return(result);
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d007      	beq.n	800a9b6 <osKernelStart+0x3a>
 800a9a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a9e4 <osKernelStart+0x68>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d103      	bne.n	800a9b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a9ae:	f06f 0305 	mvn.w	r3, #5
 800a9b2:	60fb      	str	r3, [r7, #12]
 800a9b4:	e010      	b.n	800a9d8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a9e4 <osKernelStart+0x68>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d109      	bne.n	800a9d2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a9be:	f7ff ffa2 	bl	800a906 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a9c2:	4b08      	ldr	r3, [pc, #32]	@ (800a9e4 <osKernelStart+0x68>)
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a9c8:	f002 f92e 	bl	800cc28 <vTaskStartScheduler>
      stat = osOK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	e002      	b.n	800a9d8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a9d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20009fbc 	.word	0x20009fbc

0800a9e8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9ee:	f3ef 8305 	mrs	r3, IPSR
 800a9f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9f4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10f      	bne.n	800aa1a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a9fe:	607b      	str	r3, [r7, #4]
  return(result);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d105      	bne.n	800aa12 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa06:	f3ef 8311 	mrs	r3, BASEPRI
 800aa0a:	603b      	str	r3, [r7, #0]
  return(result);
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d007      	beq.n	800aa22 <osKernelGetTickCount+0x3a>
 800aa12:	4b08      	ldr	r3, [pc, #32]	@ (800aa34 <osKernelGetTickCount+0x4c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d103      	bne.n	800aa22 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800aa1a:	f002 fa37 	bl	800ce8c <xTaskGetTickCountFromISR>
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	e002      	b.n	800aa28 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800aa22:	f002 fa23 	bl	800ce6c <xTaskGetTickCount>
 800aa26:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800aa28:	68fb      	ldr	r3, [r7, #12]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20009fbc 	.word	0x20009fbc

0800aa38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b090      	sub	sp, #64	@ 0x40
 800aa3c:	af04      	add	r7, sp, #16
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa48:	f3ef 8305 	mrs	r3, IPSR
 800aa4c:	61fb      	str	r3, [r7, #28]
  return(result);
 800aa4e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f040 8090 	bne.w	800ab76 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa56:	f3ef 8310 	mrs	r3, PRIMASK
 800aa5a:	61bb      	str	r3, [r7, #24]
  return(result);
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d105      	bne.n	800aa6e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa62:	f3ef 8311 	mrs	r3, BASEPRI
 800aa66:	617b      	str	r3, [r7, #20]
  return(result);
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <osThreadNew+0x3e>
 800aa6e:	4b44      	ldr	r3, [pc, #272]	@ (800ab80 <osThreadNew+0x148>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d07f      	beq.n	800ab76 <osThreadNew+0x13e>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d07c      	beq.n	800ab76 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800aa7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa80:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800aa82:	2318      	movs	r3, #24
 800aa84:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800aa8a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa8e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d045      	beq.n	800ab22 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d002      	beq.n	800aaa4 <osThreadNew+0x6c>
        name = attr->name;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d008      	beq.n	800aaca <osThreadNew+0x92>
 800aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaba:	2b38      	cmp	r3, #56	@ 0x38
 800aabc:	d805      	bhi.n	800aaca <osThreadNew+0x92>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	f003 0301 	and.w	r3, r3, #1
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <osThreadNew+0x96>
        return (NULL);
 800aaca:	2300      	movs	r3, #0
 800aacc:	e054      	b.n	800ab78 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d003      	beq.n	800aade <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	089b      	lsrs	r3, r3, #2
 800aadc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00e      	beq.n	800ab04 <osThreadNew+0xcc>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	2ba7      	cmp	r3, #167	@ 0xa7
 800aaec:	d90a      	bls.n	800ab04 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d006      	beq.n	800ab04 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	695b      	ldr	r3, [r3, #20]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <osThreadNew+0xcc>
        mem = 1;
 800aafe:	2301      	movs	r3, #1
 800ab00:	623b      	str	r3, [r7, #32]
 800ab02:	e010      	b.n	800ab26 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10c      	bne.n	800ab26 <osThreadNew+0xee>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d108      	bne.n	800ab26 <osThreadNew+0xee>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d104      	bne.n	800ab26 <osThreadNew+0xee>
          mem = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	623b      	str	r3, [r7, #32]
 800ab20:	e001      	b.n	800ab26 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ab26:	6a3b      	ldr	r3, [r7, #32]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d110      	bne.n	800ab4e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab34:	9202      	str	r2, [sp, #8]
 800ab36:	9301      	str	r3, [sp, #4]
 800ab38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f001 fe72 	bl	800c82c <xTaskCreateStatic>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	613b      	str	r3, [r7, #16]
 800ab4c:	e013      	b.n	800ab76 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d110      	bne.n	800ab76 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ab54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	f107 0310 	add.w	r3, r7, #16
 800ab5c:	9301      	str	r3, [sp, #4]
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f001 fec6 	bl	800c8f8 <xTaskCreate>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d001      	beq.n	800ab76 <osThreadNew+0x13e>
          hTask = NULL;
 800ab72:	2300      	movs	r3, #0
 800ab74:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ab76:	693b      	ldr	r3, [r7, #16]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3730      	adds	r7, #48	@ 0x30
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	20009fbc 	.word	0x20009fbc

0800ab84 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab8c:	f3ef 8305 	mrs	r3, IPSR
 800ab90:	613b      	str	r3, [r7, #16]
  return(result);
 800ab92:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10f      	bne.n	800abb8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab98:	f3ef 8310 	mrs	r3, PRIMASK
 800ab9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d105      	bne.n	800abb0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aba4:	f3ef 8311 	mrs	r3, BASEPRI
 800aba8:	60bb      	str	r3, [r7, #8]
  return(result);
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d007      	beq.n	800abc0 <osDelay+0x3c>
 800abb0:	4b0a      	ldr	r3, [pc, #40]	@ (800abdc <osDelay+0x58>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d103      	bne.n	800abc0 <osDelay+0x3c>
    stat = osErrorISR;
 800abb8:	f06f 0305 	mvn.w	r3, #5
 800abbc:	617b      	str	r3, [r7, #20]
 800abbe:	e007      	b.n	800abd0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d002      	beq.n	800abd0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f001 fff4 	bl	800cbb8 <vTaskDelay>
    }
  }

  return (stat);
 800abd0:	697b      	ldr	r3, [r7, #20]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3718      	adds	r7, #24
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	20009fbc 	.word	0x20009fbc

0800abe0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b08a      	sub	sp, #40	@ 0x28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800abe8:	2300      	movs	r3, #0
 800abea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abec:	f3ef 8305 	mrs	r3, IPSR
 800abf0:	613b      	str	r3, [r7, #16]
  return(result);
 800abf2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f040 8085 	bne.w	800ad04 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abfa:	f3ef 8310 	mrs	r3, PRIMASK
 800abfe:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d105      	bne.n	800ac12 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ac06:	f3ef 8311 	mrs	r3, BASEPRI
 800ac0a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <osMutexNew+0x3a>
 800ac12:	4b3f      	ldr	r3, [pc, #252]	@ (800ad10 <osMutexNew+0x130>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d074      	beq.n	800ad04 <osMutexNew+0x124>
    if (attr != NULL) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d003      	beq.n	800ac28 <osMutexNew+0x48>
      type = attr->attr_bits;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	623b      	str	r3, [r7, #32]
 800ac26:	e001      	b.n	800ac2c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d002      	beq.n	800ac3c <osMutexNew+0x5c>
      rmtx = 1U;
 800ac36:	2301      	movs	r3, #1
 800ac38:	61fb      	str	r3, [r7, #28]
 800ac3a:	e001      	b.n	800ac40 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	f003 0308 	and.w	r3, r3, #8
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d15c      	bne.n	800ad04 <osMutexNew+0x124>
      mem = -1;
 800ac4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac4e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d015      	beq.n	800ac82 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d006      	beq.n	800ac6c <osMutexNew+0x8c>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	2b4f      	cmp	r3, #79	@ 0x4f
 800ac64:	d902      	bls.n	800ac6c <osMutexNew+0x8c>
          mem = 1;
 800ac66:	2301      	movs	r3, #1
 800ac68:	61bb      	str	r3, [r7, #24]
 800ac6a:	e00c      	b.n	800ac86 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d108      	bne.n	800ac86 <osMutexNew+0xa6>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d104      	bne.n	800ac86 <osMutexNew+0xa6>
            mem = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	61bb      	str	r3, [r7, #24]
 800ac80:	e001      	b.n	800ac86 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d112      	bne.n	800acb2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d007      	beq.n	800aca2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	4619      	mov	r1, r3
 800ac98:	2004      	movs	r0, #4
 800ac9a:	f000 fe22 	bl	800b8e2 <xQueueCreateMutexStatic>
 800ac9e:	6278      	str	r0, [r7, #36]	@ 0x24
 800aca0:	e016      	b.n	800acd0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	4619      	mov	r1, r3
 800aca8:	2001      	movs	r0, #1
 800acaa:	f000 fe1a 	bl	800b8e2 <xQueueCreateMutexStatic>
 800acae:	6278      	str	r0, [r7, #36]	@ 0x24
 800acb0:	e00e      	b.n	800acd0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10b      	bne.n	800acd0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d004      	beq.n	800acc8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800acbe:	2004      	movs	r0, #4
 800acc0:	f000 fdf7 	bl	800b8b2 <xQueueCreateMutex>
 800acc4:	6278      	str	r0, [r7, #36]	@ 0x24
 800acc6:	e003      	b.n	800acd0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800acc8:	2001      	movs	r0, #1
 800acca:	f000 fdf2 	bl	800b8b2 <xQueueCreateMutex>
 800acce:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800acd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00c      	beq.n	800acf0 <osMutexNew+0x110>
        if (attr != NULL) {
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d003      	beq.n	800ace4 <osMutexNew+0x104>
          name = attr->name;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	617b      	str	r3, [r7, #20]
 800ace2:	e001      	b.n	800ace8 <osMutexNew+0x108>
        } else {
          name = NULL;
 800ace4:	2300      	movs	r3, #0
 800ace6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ace8:	6979      	ldr	r1, [r7, #20]
 800acea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800acec:	f001 fd16 	bl	800c71c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800acf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d006      	beq.n	800ad04 <osMutexNew+0x124>
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d003      	beq.n	800ad04 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800acfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfe:	f043 0301 	orr.w	r3, r3, #1
 800ad02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ad04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3728      	adds	r7, #40	@ 0x28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20009fbc 	.word	0x20009fbc

0800ad14 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f023 0301 	bic.w	r3, r3, #1
 800ad24:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad32:	f3ef 8305 	mrs	r3, IPSR
 800ad36:	613b      	str	r3, [r7, #16]
  return(result);
 800ad38:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10f      	bne.n	800ad5e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad3e:	f3ef 8310 	mrs	r3, PRIMASK
 800ad42:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d105      	bne.n	800ad56 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad4a:	f3ef 8311 	mrs	r3, BASEPRI
 800ad4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d007      	beq.n	800ad66 <osMutexAcquire+0x52>
 800ad56:	4b1d      	ldr	r3, [pc, #116]	@ (800adcc <osMutexAcquire+0xb8>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d103      	bne.n	800ad66 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ad5e:	f06f 0305 	mvn.w	r3, #5
 800ad62:	61fb      	str	r3, [r7, #28]
 800ad64:	e02c      	b.n	800adc0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d103      	bne.n	800ad74 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ad6c:	f06f 0303 	mvn.w	r3, #3
 800ad70:	61fb      	str	r3, [r7, #28]
 800ad72:	e025      	b.n	800adc0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d011      	beq.n	800ad9e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	69b8      	ldr	r0, [r7, #24]
 800ad7e:	f000 fe02 	bl	800b986 <xQueueTakeMutexRecursive>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d01b      	beq.n	800adc0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d003      	beq.n	800ad96 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ad8e:	f06f 0301 	mvn.w	r3, #1
 800ad92:	61fb      	str	r3, [r7, #28]
 800ad94:	e014      	b.n	800adc0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ad96:	f06f 0302 	mvn.w	r3, #2
 800ad9a:	61fb      	str	r3, [r7, #28]
 800ad9c:	e010      	b.n	800adc0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	69b8      	ldr	r0, [r7, #24]
 800ada2:	f001 f9cd 	bl	800c140 <xQueueSemaphoreTake>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d009      	beq.n	800adc0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d003      	beq.n	800adba <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800adb2:	f06f 0301 	mvn.w	r3, #1
 800adb6:	61fb      	str	r3, [r7, #28]
 800adb8:	e002      	b.n	800adc0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800adba:	f06f 0302 	mvn.w	r3, #2
 800adbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800adc0:	69fb      	ldr	r3, [r7, #28]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3720      	adds	r7, #32
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	20009fbc 	.word	0x20009fbc

0800add0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800add0:	b580      	push	{r7, lr}
 800add2:	b088      	sub	sp, #32
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f023 0301 	bic.w	r3, r3, #1
 800adde:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ade8:	2300      	movs	r3, #0
 800adea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adec:	f3ef 8305 	mrs	r3, IPSR
 800adf0:	613b      	str	r3, [r7, #16]
  return(result);
 800adf2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10f      	bne.n	800ae18 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adf8:	f3ef 8310 	mrs	r3, PRIMASK
 800adfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d105      	bne.n	800ae10 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae04:	f3ef 8311 	mrs	r3, BASEPRI
 800ae08:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d007      	beq.n	800ae20 <osMutexRelease+0x50>
 800ae10:	4b16      	ldr	r3, [pc, #88]	@ (800ae6c <osMutexRelease+0x9c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d103      	bne.n	800ae20 <osMutexRelease+0x50>
    stat = osErrorISR;
 800ae18:	f06f 0305 	mvn.w	r3, #5
 800ae1c:	61fb      	str	r3, [r7, #28]
 800ae1e:	e01f      	b.n	800ae60 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d103      	bne.n	800ae2e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ae26:	f06f 0303 	mvn.w	r3, #3
 800ae2a:	61fb      	str	r3, [r7, #28]
 800ae2c:	e018      	b.n	800ae60 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d009      	beq.n	800ae48 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ae34:	69b8      	ldr	r0, [r7, #24]
 800ae36:	f000 fd6f 	bl	800b918 <xQueueGiveMutexRecursive>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d00f      	beq.n	800ae60 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ae40:	f06f 0302 	mvn.w	r3, #2
 800ae44:	61fb      	str	r3, [r7, #28]
 800ae46:	e00b      	b.n	800ae60 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ae48:	2300      	movs	r3, #0
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	69b8      	ldr	r0, [r7, #24]
 800ae50:	f000 fe48 	bl	800bae4 <xQueueGenericSend>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d002      	beq.n	800ae60 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ae5a:	f06f 0302 	mvn.w	r3, #2
 800ae5e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800ae60:	69fb      	ldr	r3, [r7, #28]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3720      	adds	r7, #32
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20009fbc 	.word	0x20009fbc

0800ae70 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08c      	sub	sp, #48	@ 0x30
 800ae74:	af02      	add	r7, sp, #8
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae80:	f3ef 8305 	mrs	r3, IPSR
 800ae84:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae86:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f040 8086 	bne.w	800af9a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae8e:	f3ef 8310 	mrs	r3, PRIMASK
 800ae92:	617b      	str	r3, [r7, #20]
  return(result);
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d105      	bne.n	800aea6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae9a:	f3ef 8311 	mrs	r3, BASEPRI
 800ae9e:	613b      	str	r3, [r7, #16]
  return(result);
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <osSemaphoreNew+0x3e>
 800aea6:	4b3f      	ldr	r3, [pc, #252]	@ (800afa4 <osSemaphoreNew+0x134>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d075      	beq.n	800af9a <osSemaphoreNew+0x12a>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d072      	beq.n	800af9a <osSemaphoreNew+0x12a>
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d86e      	bhi.n	800af9a <osSemaphoreNew+0x12a>
    mem = -1;
 800aebc:	f04f 33ff 	mov.w	r3, #4294967295
 800aec0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d015      	beq.n	800aef4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d006      	beq.n	800aede <osSemaphoreNew+0x6e>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	2b4f      	cmp	r3, #79	@ 0x4f
 800aed6:	d902      	bls.n	800aede <osSemaphoreNew+0x6e>
        mem = 1;
 800aed8:	2301      	movs	r3, #1
 800aeda:	623b      	str	r3, [r7, #32]
 800aedc:	e00c      	b.n	800aef8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d108      	bne.n	800aef8 <osSemaphoreNew+0x88>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d104      	bne.n	800aef8 <osSemaphoreNew+0x88>
          mem = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	623b      	str	r3, [r7, #32]
 800aef2:	e001      	b.n	800aef8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800aef4:	2300      	movs	r3, #0
 800aef6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800aef8:	6a3b      	ldr	r3, [r7, #32]
 800aefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefe:	d04c      	beq.n	800af9a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d128      	bne.n	800af58 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800af06:	6a3b      	ldr	r3, [r7, #32]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d10a      	bne.n	800af22 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	2203      	movs	r2, #3
 800af12:	9200      	str	r2, [sp, #0]
 800af14:	2200      	movs	r2, #0
 800af16:	2100      	movs	r1, #0
 800af18:	2001      	movs	r0, #1
 800af1a:	f000 fbc3 	bl	800b6a4 <xQueueGenericCreateStatic>
 800af1e:	6278      	str	r0, [r7, #36]	@ 0x24
 800af20:	e005      	b.n	800af2e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800af22:	2203      	movs	r2, #3
 800af24:	2100      	movs	r1, #0
 800af26:	2001      	movs	r0, #1
 800af28:	f000 fc43 	bl	800b7b2 <xQueueGenericCreate>
 800af2c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800af2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af30:	2b00      	cmp	r3, #0
 800af32:	d022      	beq.n	800af7a <osSemaphoreNew+0x10a>
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d01f      	beq.n	800af7a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800af3a:	2300      	movs	r3, #0
 800af3c:	2200      	movs	r2, #0
 800af3e:	2100      	movs	r1, #0
 800af40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af42:	f000 fdcf 	bl	800bae4 <xQueueGenericSend>
 800af46:	4603      	mov	r3, r0
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d016      	beq.n	800af7a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800af4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af4e:	f001 fa97 	bl	800c480 <vQueueDelete>
            hSemaphore = NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	627b      	str	r3, [r7, #36]	@ 0x24
 800af56:	e010      	b.n	800af7a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800af58:	6a3b      	ldr	r3, [r7, #32]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d108      	bne.n	800af70 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	461a      	mov	r2, r3
 800af64:	68b9      	ldr	r1, [r7, #8]
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 fd46 	bl	800b9f8 <xQueueCreateCountingSemaphoreStatic>
 800af6c:	6278      	str	r0, [r7, #36]	@ 0x24
 800af6e:	e004      	b.n	800af7a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800af70:	68b9      	ldr	r1, [r7, #8]
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f000 fd7d 	bl	800ba72 <xQueueCreateCountingSemaphore>
 800af78:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800af7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00c      	beq.n	800af9a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <osSemaphoreNew+0x11e>
          name = attr->name;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	61fb      	str	r3, [r7, #28]
 800af8c:	e001      	b.n	800af92 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800af92:	69f9      	ldr	r1, [r7, #28]
 800af94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af96:	f001 fbc1 	bl	800c71c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800af9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3728      	adds	r7, #40	@ 0x28
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	20009fbc 	.word	0x20009fbc

0800afa8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b088      	sub	sp, #32
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d103      	bne.n	800afc8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800afc0:	f06f 0303 	mvn.w	r3, #3
 800afc4:	61fb      	str	r3, [r7, #28]
 800afc6:	e04b      	b.n	800b060 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afc8:	f3ef 8305 	mrs	r3, IPSR
 800afcc:	617b      	str	r3, [r7, #20]
  return(result);
 800afce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10f      	bne.n	800aff4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afd4:	f3ef 8310 	mrs	r3, PRIMASK
 800afd8:	613b      	str	r3, [r7, #16]
  return(result);
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d105      	bne.n	800afec <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800afe0:	f3ef 8311 	mrs	r3, BASEPRI
 800afe4:	60fb      	str	r3, [r7, #12]
  return(result);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d026      	beq.n	800b03a <osSemaphoreAcquire+0x92>
 800afec:	4b1f      	ldr	r3, [pc, #124]	@ (800b06c <osSemaphoreAcquire+0xc4>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d122      	bne.n	800b03a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800affa:	f06f 0303 	mvn.w	r3, #3
 800affe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b000:	e02d      	b.n	800b05e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800b002:	2300      	movs	r3, #0
 800b004:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b006:	f107 0308 	add.w	r3, r7, #8
 800b00a:	461a      	mov	r2, r3
 800b00c:	2100      	movs	r1, #0
 800b00e:	69b8      	ldr	r0, [r7, #24]
 800b010:	f001 f9ae 	bl	800c370 <xQueueReceiveFromISR>
 800b014:	4603      	mov	r3, r0
 800b016:	2b01      	cmp	r3, #1
 800b018:	d003      	beq.n	800b022 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800b01a:	f06f 0302 	mvn.w	r3, #2
 800b01e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b020:	e01d      	b.n	800b05e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d01a      	beq.n	800b05e <osSemaphoreAcquire+0xb6>
 800b028:	4b11      	ldr	r3, [pc, #68]	@ (800b070 <osSemaphoreAcquire+0xc8>)
 800b02a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800b038:	e011      	b.n	800b05e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	69b8      	ldr	r0, [r7, #24]
 800b03e:	f001 f87f 	bl	800c140 <xQueueSemaphoreTake>
 800b042:	4603      	mov	r3, r0
 800b044:	2b01      	cmp	r3, #1
 800b046:	d00b      	beq.n	800b060 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800b04e:	f06f 0301 	mvn.w	r3, #1
 800b052:	61fb      	str	r3, [r7, #28]
 800b054:	e004      	b.n	800b060 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800b056:	f06f 0302 	mvn.w	r3, #2
 800b05a:	61fb      	str	r3, [r7, #28]
 800b05c:	e000      	b.n	800b060 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800b05e:	bf00      	nop
      }
    }
  }

  return (stat);
 800b060:	69fb      	ldr	r3, [r7, #28]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3720      	adds	r7, #32
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20009fbc 	.word	0x20009fbc
 800b070:	e000ed04 	.word	0xe000ed04

0800b074 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b074:	b580      	push	{r7, lr}
 800b076:	b088      	sub	sp, #32
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b080:	2300      	movs	r3, #0
 800b082:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d103      	bne.n	800b092 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b08a:	f06f 0303 	mvn.w	r3, #3
 800b08e:	61fb      	str	r3, [r7, #28]
 800b090:	e03e      	b.n	800b110 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b092:	f3ef 8305 	mrs	r3, IPSR
 800b096:	617b      	str	r3, [r7, #20]
  return(result);
 800b098:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d10f      	bne.n	800b0be <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b09e:	f3ef 8310 	mrs	r3, PRIMASK
 800b0a2:	613b      	str	r3, [r7, #16]
  return(result);
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d105      	bne.n	800b0b6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b0aa:	f3ef 8311 	mrs	r3, BASEPRI
 800b0ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d01e      	beq.n	800b0f4 <osSemaphoreRelease+0x80>
 800b0b6:	4b19      	ldr	r3, [pc, #100]	@ (800b11c <osSemaphoreRelease+0xa8>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d11a      	bne.n	800b0f4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b0c2:	f107 0308 	add.w	r3, r7, #8
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	69b8      	ldr	r0, [r7, #24]
 800b0ca:	f000 feb8 	bl	800be3e <xQueueGiveFromISR>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d003      	beq.n	800b0dc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800b0d4:	f06f 0302 	mvn.w	r3, #2
 800b0d8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b0da:	e018      	b.n	800b10e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d015      	beq.n	800b10e <osSemaphoreRelease+0x9a>
 800b0e2:	4b0f      	ldr	r3, [pc, #60]	@ (800b120 <osSemaphoreRelease+0xac>)
 800b0e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0e8:	601a      	str	r2, [r3, #0]
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b0f2:	e00c      	b.n	800b10e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	69b8      	ldr	r0, [r7, #24]
 800b0fc:	f000 fcf2 	bl	800bae4 <xQueueGenericSend>
 800b100:	4603      	mov	r3, r0
 800b102:	2b01      	cmp	r3, #1
 800b104:	d004      	beq.n	800b110 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800b106:	f06f 0302 	mvn.w	r3, #2
 800b10a:	61fb      	str	r3, [r7, #28]
 800b10c:	e000      	b.n	800b110 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b10e:	bf00      	nop
    }
  }

  return (stat);
 800b110:	69fb      	ldr	r3, [r7, #28]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3720      	adds	r7, #32
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20009fbc 	.word	0x20009fbc
 800b120:	e000ed04 	.word	0xe000ed04

0800b124 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b124:	b580      	push	{r7, lr}
 800b126:	b08c      	sub	sp, #48	@ 0x30
 800b128:	af02      	add	r7, sp, #8
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b130:	2300      	movs	r3, #0
 800b132:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b134:	f3ef 8305 	mrs	r3, IPSR
 800b138:	61bb      	str	r3, [r7, #24]
  return(result);
 800b13a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d16f      	bne.n	800b220 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b140:	f3ef 8310 	mrs	r3, PRIMASK
 800b144:	617b      	str	r3, [r7, #20]
  return(result);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d105      	bne.n	800b158 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b14c:	f3ef 8311 	mrs	r3, BASEPRI
 800b150:	613b      	str	r3, [r7, #16]
  return(result);
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d003      	beq.n	800b160 <osMessageQueueNew+0x3c>
 800b158:	4b34      	ldr	r3, [pc, #208]	@ (800b22c <osMessageQueueNew+0x108>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d05f      	beq.n	800b220 <osMessageQueueNew+0xfc>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d05c      	beq.n	800b220 <osMessageQueueNew+0xfc>
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d059      	beq.n	800b220 <osMessageQueueNew+0xfc>
    mem = -1;
 800b16c:	f04f 33ff 	mov.w	r3, #4294967295
 800b170:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d029      	beq.n	800b1cc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d012      	beq.n	800b1a6 <osMessageQueueNew+0x82>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	2b4f      	cmp	r3, #79	@ 0x4f
 800b186:	d90e      	bls.n	800b1a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00a      	beq.n	800b1a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	695a      	ldr	r2, [r3, #20]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	68b9      	ldr	r1, [r7, #8]
 800b198:	fb01 f303 	mul.w	r3, r1, r3
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d302      	bcc.n	800b1a6 <osMessageQueueNew+0x82>
        mem = 1;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	623b      	str	r3, [r7, #32]
 800b1a4:	e014      	b.n	800b1d0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d110      	bne.n	800b1d0 <osMessageQueueNew+0xac>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10c      	bne.n	800b1d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d108      	bne.n	800b1d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d104      	bne.n	800b1d0 <osMessageQueueNew+0xac>
          mem = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	623b      	str	r3, [r7, #32]
 800b1ca:	e001      	b.n	800b1d0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d10b      	bne.n	800b1ee <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	691a      	ldr	r2, [r3, #16]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	2100      	movs	r1, #0
 800b1e0:	9100      	str	r1, [sp, #0]
 800b1e2:	68b9      	ldr	r1, [r7, #8]
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f000 fa5d 	bl	800b6a4 <xQueueGenericCreateStatic>
 800b1ea:	6278      	str	r0, [r7, #36]	@ 0x24
 800b1ec:	e008      	b.n	800b200 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b1ee:	6a3b      	ldr	r3, [r7, #32]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d105      	bne.n	800b200 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	68b9      	ldr	r1, [r7, #8]
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f000 fada 	bl	800b7b2 <xQueueGenericCreate>
 800b1fe:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00c      	beq.n	800b220 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <osMessageQueueNew+0xf0>
        name = attr->name;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	61fb      	str	r3, [r7, #28]
 800b212:	e001      	b.n	800b218 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b214:	2300      	movs	r3, #0
 800b216:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b218:	69f9      	ldr	r1, [r7, #28]
 800b21a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b21c:	f001 fa7e 	bl	800c71c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b222:	4618      	mov	r0, r3
 800b224:	3728      	adds	r7, #40	@ 0x28
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20009fbc 	.word	0x20009fbc

0800b230 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b230:	b580      	push	{r7, lr}
 800b232:	b08a      	sub	sp, #40	@ 0x28
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	603b      	str	r3, [r7, #0]
 800b23c:	4613      	mov	r3, r2
 800b23e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b244:	2300      	movs	r3, #0
 800b246:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b248:	f3ef 8305 	mrs	r3, IPSR
 800b24c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b24e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10f      	bne.n	800b274 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b254:	f3ef 8310 	mrs	r3, PRIMASK
 800b258:	61bb      	str	r3, [r7, #24]
  return(result);
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d105      	bne.n	800b26c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b260:	f3ef 8311 	mrs	r3, BASEPRI
 800b264:	617b      	str	r3, [r7, #20]
  return(result);
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d02c      	beq.n	800b2c6 <osMessageQueuePut+0x96>
 800b26c:	4b28      	ldr	r3, [pc, #160]	@ (800b310 <osMessageQueuePut+0xe0>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d128      	bne.n	800b2c6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d005      	beq.n	800b286 <osMessageQueuePut+0x56>
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <osMessageQueuePut+0x56>
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d003      	beq.n	800b28e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800b286:	f06f 0303 	mvn.w	r3, #3
 800b28a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b28c:	e039      	b.n	800b302 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800b28e:	2300      	movs	r3, #0
 800b290:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b292:	f107 0210 	add.w	r2, r7, #16
 800b296:	2300      	movs	r3, #0
 800b298:	68b9      	ldr	r1, [r7, #8]
 800b29a:	6a38      	ldr	r0, [r7, #32]
 800b29c:	f000 fd2c 	bl	800bcf8 <xQueueGenericSendFromISR>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d003      	beq.n	800b2ae <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800b2a6:	f06f 0302 	mvn.w	r3, #2
 800b2aa:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b2ac:	e029      	b.n	800b302 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d026      	beq.n	800b302 <osMessageQueuePut+0xd2>
 800b2b4:	4b17      	ldr	r3, [pc, #92]	@ (800b314 <osMessageQueuePut+0xe4>)
 800b2b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2ba:	601a      	str	r2, [r3, #0]
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b2c4:	e01d      	b.n	800b302 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <osMessageQueuePut+0xa2>
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d103      	bne.n	800b2da <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800b2d2:	f06f 0303 	mvn.w	r3, #3
 800b2d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2d8:	e014      	b.n	800b304 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b2da:	2300      	movs	r3, #0
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	68b9      	ldr	r1, [r7, #8]
 800b2e0:	6a38      	ldr	r0, [r7, #32]
 800b2e2:	f000 fbff 	bl	800bae4 <xQueueGenericSend>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d00b      	beq.n	800b304 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800b2f2:	f06f 0301 	mvn.w	r3, #1
 800b2f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2f8:	e004      	b.n	800b304 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800b2fa:	f06f 0302 	mvn.w	r3, #2
 800b2fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800b300:	e000      	b.n	800b304 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b302:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b306:	4618      	mov	r0, r3
 800b308:	3728      	adds	r7, #40	@ 0x28
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	20009fbc 	.word	0x20009fbc
 800b314:	e000ed04 	.word	0xe000ed04

0800b318 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b318:	b580      	push	{r7, lr}
 800b31a:	b08a      	sub	sp, #40	@ 0x28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
 800b324:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b32e:	f3ef 8305 	mrs	r3, IPSR
 800b332:	61fb      	str	r3, [r7, #28]
  return(result);
 800b334:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10f      	bne.n	800b35a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b33a:	f3ef 8310 	mrs	r3, PRIMASK
 800b33e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d105      	bne.n	800b352 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b346:	f3ef 8311 	mrs	r3, BASEPRI
 800b34a:	617b      	str	r3, [r7, #20]
  return(result);
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d02c      	beq.n	800b3ac <osMessageQueueGet+0x94>
 800b352:	4b28      	ldr	r3, [pc, #160]	@ (800b3f4 <osMessageQueueGet+0xdc>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2b02      	cmp	r3, #2
 800b358:	d128      	bne.n	800b3ac <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d005      	beq.n	800b36c <osMessageQueueGet+0x54>
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d002      	beq.n	800b36c <osMessageQueueGet+0x54>
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800b36c:	f06f 0303 	mvn.w	r3, #3
 800b370:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b372:	e038      	b.n	800b3e6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800b374:	2300      	movs	r3, #0
 800b376:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b378:	f107 0310 	add.w	r3, r7, #16
 800b37c:	461a      	mov	r2, r3
 800b37e:	68b9      	ldr	r1, [r7, #8]
 800b380:	6a38      	ldr	r0, [r7, #32]
 800b382:	f000 fff5 	bl	800c370 <xQueueReceiveFromISR>
 800b386:	4603      	mov	r3, r0
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d003      	beq.n	800b394 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800b38c:	f06f 0302 	mvn.w	r3, #2
 800b390:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b392:	e028      	b.n	800b3e6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d025      	beq.n	800b3e6 <osMessageQueueGet+0xce>
 800b39a:	4b17      	ldr	r3, [pc, #92]	@ (800b3f8 <osMessageQueueGet+0xe0>)
 800b39c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b3aa:	e01c      	b.n	800b3e6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d002      	beq.n	800b3b8 <osMessageQueueGet+0xa0>
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d103      	bne.n	800b3c0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800b3b8:	f06f 0303 	mvn.w	r3, #3
 800b3bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3be:	e013      	b.n	800b3e8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	68b9      	ldr	r1, [r7, #8]
 800b3c4:	6a38      	ldr	r0, [r7, #32]
 800b3c6:	f000 fdd3 	bl	800bf70 <xQueueReceive>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d00b      	beq.n	800b3e8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d003      	beq.n	800b3de <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800b3d6:	f06f 0301 	mvn.w	r3, #1
 800b3da:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3dc:	e004      	b.n	800b3e8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800b3de:	f06f 0302 	mvn.w	r3, #2
 800b3e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3e4:	e000      	b.n	800b3e8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b3e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3728      	adds	r7, #40	@ 0x28
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20009fbc 	.word	0x20009fbc
 800b3f8:	e000ed04 	.word	0xe000ed04

0800b3fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	4a07      	ldr	r2, [pc, #28]	@ (800b428 <vApplicationGetIdleTaskMemory+0x2c>)
 800b40c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	4a06      	ldr	r2, [pc, #24]	@ (800b42c <vApplicationGetIdleTaskMemory+0x30>)
 800b412:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b41a:	601a      	str	r2, [r3, #0]
}
 800b41c:	bf00      	nop
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr
 800b428:	20009fc0 	.word	0x20009fc0
 800b42c:	2000a068 	.word	0x2000a068

0800b430 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	4a07      	ldr	r2, [pc, #28]	@ (800b45c <vApplicationGetTimerTaskMemory+0x2c>)
 800b440:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	4a06      	ldr	r2, [pc, #24]	@ (800b460 <vApplicationGetTimerTaskMemory+0x30>)
 800b446:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b44e:	601a      	str	r2, [r3, #0]
}
 800b450:	bf00      	nop
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	2000a468 	.word	0x2000a468
 800b460:	2000a510 	.word	0x2000a510

0800b464 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f103 0208 	add.w	r2, r3, #8
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f04f 32ff 	mov.w	r2, #4294967295
 800b47c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f103 0208 	add.w	r2, r3, #8
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f103 0208 	add.w	r2, r3, #8
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4b2:	bf00      	nop
 800b4b4:	370c      	adds	r7, #12
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4be:	b480      	push	{r7}
 800b4c0:	b085      	sub	sp, #20
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	689a      	ldr	r2, [r3, #8]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	1c5a      	adds	r2, r3, #1
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	601a      	str	r2, [r3, #0]
}
 800b4fa:	bf00      	nop
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b506:	b480      	push	{r7}
 800b508:	b085      	sub	sp, #20
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b51c:	d103      	bne.n	800b526 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	60fb      	str	r3, [r7, #12]
 800b524:	e00c      	b.n	800b540 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	3308      	adds	r3, #8
 800b52a:	60fb      	str	r3, [r7, #12]
 800b52c:	e002      	b.n	800b534 <vListInsert+0x2e>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	60fb      	str	r3, [r7, #12]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d2f6      	bcs.n	800b52e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	1c5a      	adds	r2, r3, #1
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	601a      	str	r2, [r3, #0]
}
 800b56c:	bf00      	nop
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	691b      	ldr	r3, [r3, #16]
 800b584:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	6892      	ldr	r2, [r2, #8]
 800b58e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	6852      	ldr	r2, [r2, #4]
 800b598:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d103      	bne.n	800b5ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	689a      	ldr	r2, [r3, #8]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	1e5a      	subs	r2, r3, #1
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10d      	bne.n	800b5fc <xQueueGenericReset+0x30>
	__asm volatile
 800b5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e4:	b672      	cpsid	i
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	b662      	cpsie	i
 800b5f4:	60bb      	str	r3, [r7, #8]
}
 800b5f6:	bf00      	nop
 800b5f8:	bf00      	nop
 800b5fa:	e7fd      	b.n	800b5f8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b5fc:	f002 ff46 	bl	800e48c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b608:	68f9      	ldr	r1, [r7, #12]
 800b60a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b60c:	fb01 f303 	mul.w	r3, r1, r3
 800b610:	441a      	add	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b62c:	3b01      	subs	r3, #1
 800b62e:	68f9      	ldr	r1, [r7, #12]
 800b630:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b632:	fb01 f303 	mul.w	r3, r1, r3
 800b636:	441a      	add	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	22ff      	movs	r2, #255	@ 0xff
 800b640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	22ff      	movs	r2, #255	@ 0xff
 800b648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d114      	bne.n	800b67c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d01a      	beq.n	800b690 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3310      	adds	r3, #16
 800b65e:	4618      	mov	r0, r3
 800b660:	f001 fdc4 	bl	800d1ec <xTaskRemoveFromEventList>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d012      	beq.n	800b690 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b66a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a0 <xQueueGenericReset+0xd4>)
 800b66c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	e009      	b.n	800b690 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3310      	adds	r3, #16
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff feef 	bl	800b464 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	3324      	adds	r3, #36	@ 0x24
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff feea 	bl	800b464 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b690:	f002 ff32 	bl	800e4f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b694:	2301      	movs	r3, #1
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	e000ed04 	.word	0xe000ed04

0800b6a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08e      	sub	sp, #56	@ 0x38
 800b6a8:	af02      	add	r7, sp, #8
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10d      	bne.n	800b6d4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6bc:	b672      	cpsid	i
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	b662      	cpsie	i
 800b6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b6ce:	bf00      	nop
 800b6d0:	bf00      	nop
 800b6d2:	e7fd      	b.n	800b6d0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10d      	bne.n	800b6f6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6de:	b672      	cpsid	i
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	b662      	cpsie	i
 800b6ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b6f0:	bf00      	nop
 800b6f2:	bf00      	nop
 800b6f4:	e7fd      	b.n	800b6f2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <xQueueGenericCreateStatic+0x5e>
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d001      	beq.n	800b706 <xQueueGenericCreateStatic+0x62>
 800b702:	2301      	movs	r3, #1
 800b704:	e000      	b.n	800b708 <xQueueGenericCreateStatic+0x64>
 800b706:	2300      	movs	r3, #0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10d      	bne.n	800b728 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b710:	b672      	cpsid	i
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	b662      	cpsie	i
 800b720:	623b      	str	r3, [r7, #32]
}
 800b722:	bf00      	nop
 800b724:	bf00      	nop
 800b726:	e7fd      	b.n	800b724 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d102      	bne.n	800b734 <xQueueGenericCreateStatic+0x90>
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <xQueueGenericCreateStatic+0x94>
 800b734:	2301      	movs	r3, #1
 800b736:	e000      	b.n	800b73a <xQueueGenericCreateStatic+0x96>
 800b738:	2300      	movs	r3, #0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10d      	bne.n	800b75a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b742:	b672      	cpsid	i
 800b744:	f383 8811 	msr	BASEPRI, r3
 800b748:	f3bf 8f6f 	isb	sy
 800b74c:	f3bf 8f4f 	dsb	sy
 800b750:	b662      	cpsie	i
 800b752:	61fb      	str	r3, [r7, #28]
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop
 800b758:	e7fd      	b.n	800b756 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b75a:	2350      	movs	r3, #80	@ 0x50
 800b75c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	2b50      	cmp	r3, #80	@ 0x50
 800b762:	d00d      	beq.n	800b780 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b768:	b672      	cpsid	i
 800b76a:	f383 8811 	msr	BASEPRI, r3
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f3bf 8f4f 	dsb	sy
 800b776:	b662      	cpsie	i
 800b778:	61bb      	str	r3, [r7, #24]
}
 800b77a:	bf00      	nop
 800b77c:	bf00      	nop
 800b77e:	e7fd      	b.n	800b77c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b780:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00d      	beq.n	800b7a8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b794:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	4613      	mov	r3, r2
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	68b9      	ldr	r1, [r7, #8]
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f000 f848 	bl	800b838 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3730      	adds	r7, #48	@ 0x30
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b08a      	sub	sp, #40	@ 0x28
 800b7b6:	af02      	add	r7, sp, #8
 800b7b8:	60f8      	str	r0, [r7, #12]
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	4613      	mov	r3, r2
 800b7be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10d      	bne.n	800b7e2 <xQueueGenericCreate+0x30>
	__asm volatile
 800b7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ca:	b672      	cpsid	i
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	b662      	cpsie	i
 800b7da:	613b      	str	r3, [r7, #16]
}
 800b7dc:	bf00      	nop
 800b7de:	bf00      	nop
 800b7e0:	e7fd      	b.n	800b7de <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d102      	bne.n	800b7ee <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	61fb      	str	r3, [r7, #28]
 800b7ec:	e004      	b.n	800b7f8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	fb02 f303 	mul.w	r3, r2, r3
 800b7f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	3350      	adds	r3, #80	@ 0x50
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f002 ff73 	bl	800e6e8 <pvPortMalloc>
 800b802:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d011      	beq.n	800b82e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	3350      	adds	r3, #80	@ 0x50
 800b812:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b81c:	79fa      	ldrb	r2, [r7, #7]
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	4613      	mov	r3, r2
 800b824:	697a      	ldr	r2, [r7, #20]
 800b826:	68b9      	ldr	r1, [r7, #8]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 f805 	bl	800b838 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b82e:	69bb      	ldr	r3, [r7, #24]
	}
 800b830:	4618      	mov	r0, r3
 800b832:	3720      	adds	r7, #32
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d103      	bne.n	800b854 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	601a      	str	r2, [r3, #0]
 800b852:	e002      	b.n	800b85a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b866:	2101      	movs	r1, #1
 800b868:	69b8      	ldr	r0, [r7, #24]
 800b86a:	f7ff feaf 	bl	800b5cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	78fa      	ldrb	r2, [r7, #3]
 800b872:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b876:	bf00      	nop
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b082      	sub	sp, #8
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00e      	beq.n	800b8aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b89e:	2300      	movs	r3, #0
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 f91d 	bl	800bae4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b8aa:	bf00      	nop
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b086      	sub	sp, #24
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	617b      	str	r3, [r7, #20]
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b8c4:	79fb      	ldrb	r3, [r7, #7]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	6939      	ldr	r1, [r7, #16]
 800b8ca:	6978      	ldr	r0, [r7, #20]
 800b8cc:	f7ff ff71 	bl	800b7b2 <xQueueGenericCreate>
 800b8d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f7ff ffd3 	bl	800b87e <prvInitialiseMutex>

		return xNewQueue;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
	}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3718      	adds	r7, #24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b088      	sub	sp, #32
 800b8e6:	af02      	add	r7, sp, #8
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	6039      	str	r1, [r7, #0]
 800b8ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	617b      	str	r3, [r7, #20]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b8f6:	79fb      	ldrb	r3, [r7, #7]
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	6939      	ldr	r1, [r7, #16]
 800b900:	6978      	ldr	r0, [r7, #20]
 800b902:	f7ff fecf 	bl	800b6a4 <xQueueGenericCreateStatic>
 800b906:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7ff ffb8 	bl	800b87e <prvInitialiseMutex>

		return xNewQueue;
 800b90e:	68fb      	ldr	r3, [r7, #12]
	}
 800b910:	4618      	mov	r0, r3
 800b912:	3718      	adds	r7, #24
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b918:	b590      	push	{r4, r7, lr}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10d      	bne.n	800b946 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800b92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92e:	b672      	cpsid	i
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	b662      	cpsie	i
 800b93e:	60fb      	str	r3, [r7, #12]
}
 800b940:	bf00      	nop
 800b942:	bf00      	nop
 800b944:	e7fd      	b.n	800b942 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	689c      	ldr	r4, [r3, #8]
 800b94a:	f001 fe1d 	bl	800d588 <xTaskGetCurrentTaskHandle>
 800b94e:	4603      	mov	r3, r0
 800b950:	429c      	cmp	r4, r3
 800b952:	d111      	bne.n	800b978 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	1e5a      	subs	r2, r3, #1
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d105      	bne.n	800b972 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b966:	2300      	movs	r3, #0
 800b968:	2200      	movs	r2, #0
 800b96a:	2100      	movs	r1, #0
 800b96c:	6938      	ldr	r0, [r7, #16]
 800b96e:	f000 f8b9 	bl	800bae4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b972:	2301      	movs	r3, #1
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	e001      	b.n	800b97c <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b978:	2300      	movs	r3, #0
 800b97a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b97c:	697b      	ldr	r3, [r7, #20]
	}
 800b97e:	4618      	mov	r0, r3
 800b980:	371c      	adds	r7, #28
 800b982:	46bd      	mov	sp, r7
 800b984:	bd90      	pop	{r4, r7, pc}

0800b986 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b986:	b590      	push	{r4, r7, lr}
 800b988:	b087      	sub	sp, #28
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
 800b98e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10d      	bne.n	800b9b6 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800b99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99e:	b672      	cpsid	i
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	b662      	cpsie	i
 800b9ae:	60fb      	str	r3, [r7, #12]
}
 800b9b0:	bf00      	nop
 800b9b2:	bf00      	nop
 800b9b4:	e7fd      	b.n	800b9b2 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	689c      	ldr	r4, [r3, #8]
 800b9ba:	f001 fde5 	bl	800d588 <xTaskGetCurrentTaskHandle>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	429c      	cmp	r4, r3
 800b9c2:	d107      	bne.n	800b9d4 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	617b      	str	r3, [r7, #20]
 800b9d2:	e00c      	b.n	800b9ee <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	6938      	ldr	r0, [r7, #16]
 800b9d8:	f000 fbb2 	bl	800c140 <xQueueSemaphoreTake>
 800b9dc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d004      	beq.n	800b9ee <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b9ee:	697b      	ldr	r3, [r7, #20]
	}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	371c      	adds	r7, #28
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd90      	pop	{r4, r7, pc}

0800b9f8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08a      	sub	sp, #40	@ 0x28
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10d      	bne.n	800ba26 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0e:	b672      	cpsid	i
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	b662      	cpsie	i
 800ba1e:	61bb      	str	r3, [r7, #24]
}
 800ba20:	bf00      	nop
 800ba22:	bf00      	nop
 800ba24:	e7fd      	b.n	800ba22 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d90d      	bls.n	800ba4a <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	b672      	cpsid	i
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	b662      	cpsie	i
 800ba42:	617b      	str	r3, [r7, #20]
}
 800ba44:	bf00      	nop
 800ba46:	bf00      	nop
 800ba48:	e7fd      	b.n	800ba46 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	2100      	movs	r1, #0
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f7ff fe25 	bl	800b6a4 <xQueueGenericCreateStatic>
 800ba5a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d002      	beq.n	800ba68 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ba68:	69fb      	ldr	r3, [r7, #28]
	}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3720      	adds	r7, #32
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b086      	sub	sp, #24
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10d      	bne.n	800ba9e <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800ba82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba86:	b672      	cpsid	i
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	b662      	cpsie	i
 800ba96:	613b      	str	r3, [r7, #16]
}
 800ba98:	bf00      	nop
 800ba9a:	bf00      	nop
 800ba9c:	e7fd      	b.n	800ba9a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d90d      	bls.n	800bac2 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baaa:	b672      	cpsid	i
 800baac:	f383 8811 	msr	BASEPRI, r3
 800bab0:	f3bf 8f6f 	isb	sy
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	b662      	cpsie	i
 800baba:	60fb      	str	r3, [r7, #12]
}
 800babc:	bf00      	nop
 800babe:	bf00      	nop
 800bac0:	e7fd      	b.n	800babe <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bac2:	2202      	movs	r2, #2
 800bac4:	2100      	movs	r1, #0
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7ff fe73 	bl	800b7b2 <xQueueGenericCreate>
 800bacc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bada:	697b      	ldr	r3, [r7, #20]
	}
 800badc:	4618      	mov	r0, r3
 800bade:	3718      	adds	r7, #24
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b08e      	sub	sp, #56	@ 0x38
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800baf2:	2300      	movs	r3, #0
 800baf4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10d      	bne.n	800bb1c <xQueueGenericSend+0x38>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb04:	b672      	cpsid	i
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	b662      	cpsie	i
 800bb14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bb16:	bf00      	nop
 800bb18:	bf00      	nop
 800bb1a:	e7fd      	b.n	800bb18 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d103      	bne.n	800bb2a <xQueueGenericSend+0x46>
 800bb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <xQueueGenericSend+0x4a>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e000      	b.n	800bb30 <xQueueGenericSend+0x4c>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10d      	bne.n	800bb50 <xQueueGenericSend+0x6c>
	__asm volatile
 800bb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb38:	b672      	cpsid	i
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	b662      	cpsie	i
 800bb48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bb4a:	bf00      	nop
 800bb4c:	bf00      	nop
 800bb4e:	e7fd      	b.n	800bb4c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d103      	bne.n	800bb5e <xQueueGenericSend+0x7a>
 800bb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d101      	bne.n	800bb62 <xQueueGenericSend+0x7e>
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e000      	b.n	800bb64 <xQueueGenericSend+0x80>
 800bb62:	2300      	movs	r3, #0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10d      	bne.n	800bb84 <xQueueGenericSend+0xa0>
	__asm volatile
 800bb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6c:	b672      	cpsid	i
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	b662      	cpsie	i
 800bb7c:	623b      	str	r3, [r7, #32]
}
 800bb7e:	bf00      	nop
 800bb80:	bf00      	nop
 800bb82:	e7fd      	b.n	800bb80 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb84:	f001 fd10 	bl	800d5a8 <xTaskGetSchedulerState>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d102      	bne.n	800bb94 <xQueueGenericSend+0xb0>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d101      	bne.n	800bb98 <xQueueGenericSend+0xb4>
 800bb94:	2301      	movs	r3, #1
 800bb96:	e000      	b.n	800bb9a <xQueueGenericSend+0xb6>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10d      	bne.n	800bbba <xQueueGenericSend+0xd6>
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba2:	b672      	cpsid	i
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	b662      	cpsie	i
 800bbb2:	61fb      	str	r3, [r7, #28]
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop
 800bbb8:	e7fd      	b.n	800bbb6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bbba:	f002 fc67 	bl	800e48c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d302      	bcc.n	800bbd0 <xQueueGenericSend+0xec>
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d129      	bne.n	800bc24 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	68b9      	ldr	r1, [r7, #8]
 800bbd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bbd6:	f000 fc91 	bl	800c4fc <prvCopyDataToQueue>
 800bbda:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d010      	beq.n	800bc06 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe6:	3324      	adds	r3, #36	@ 0x24
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f001 faff 	bl	800d1ec <xTaskRemoveFromEventList>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d013      	beq.n	800bc1c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bbf4:	4b3f      	ldr	r3, [pc, #252]	@ (800bcf4 <xQueueGenericSend+0x210>)
 800bbf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbfa:	601a      	str	r2, [r3, #0]
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	f3bf 8f6f 	isb	sy
 800bc04:	e00a      	b.n	800bc1c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d007      	beq.n	800bc1c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc0c:	4b39      	ldr	r3, [pc, #228]	@ (800bcf4 <xQueueGenericSend+0x210>)
 800bc0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc12:	601a      	str	r2, [r3, #0]
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc1c:	f002 fc6c 	bl	800e4f8 <vPortExitCritical>
				return pdPASS;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e063      	b.n	800bcec <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d103      	bne.n	800bc32 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc2a:	f002 fc65 	bl	800e4f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e05c      	b.n	800bcec <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d106      	bne.n	800bc46 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc38:	f107 0314 	add.w	r3, r7, #20
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f001 fb3b 	bl	800d2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc42:	2301      	movs	r3, #1
 800bc44:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc46:	f002 fc57 	bl	800e4f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc4a:	f001 f861 	bl	800cd10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc4e:	f002 fc1d 	bl	800e48c <vPortEnterCritical>
 800bc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc58:	b25b      	sxtb	r3, r3
 800bc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc5e:	d103      	bne.n	800bc68 <xQueueGenericSend+0x184>
 800bc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc6e:	b25b      	sxtb	r3, r3
 800bc70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc74:	d103      	bne.n	800bc7e <xQueueGenericSend+0x19a>
 800bc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc7e:	f002 fc3b 	bl	800e4f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc82:	1d3a      	adds	r2, r7, #4
 800bc84:	f107 0314 	add.w	r3, r7, #20
 800bc88:	4611      	mov	r1, r2
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f001 fb2a 	bl	800d2e4 <xTaskCheckForTimeOut>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d124      	bne.n	800bce0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc98:	f000 fd28 	bl	800c6ec <prvIsQueueFull>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d018      	beq.n	800bcd4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca4:	3310      	adds	r3, #16
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4611      	mov	r1, r2
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f001 fa48 	bl	800d140 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bcb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bcb2:	f000 fcb3 	bl	800c61c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bcb6:	f001 f839 	bl	800cd2c <xTaskResumeAll>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f47f af7c 	bne.w	800bbba <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800bcc2:	4b0c      	ldr	r3, [pc, #48]	@ (800bcf4 <xQueueGenericSend+0x210>)
 800bcc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcc8:	601a      	str	r2, [r3, #0]
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	f3bf 8f6f 	isb	sy
 800bcd2:	e772      	b.n	800bbba <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bcd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bcd6:	f000 fca1 	bl	800c61c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bcda:	f001 f827 	bl	800cd2c <xTaskResumeAll>
 800bcde:	e76c      	b.n	800bbba <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bce0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bce2:	f000 fc9b 	bl	800c61c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bce6:	f001 f821 	bl	800cd2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bcea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3738      	adds	r7, #56	@ 0x38
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	e000ed04 	.word	0xe000ed04

0800bcf8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08e      	sub	sp, #56	@ 0x38
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10d      	bne.n	800bd2c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd14:	b672      	cpsid	i
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	b662      	cpsie	i
 800bd24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bd26:	bf00      	nop
 800bd28:	bf00      	nop
 800bd2a:	e7fd      	b.n	800bd28 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d103      	bne.n	800bd3a <xQueueGenericSendFromISR+0x42>
 800bd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <xQueueGenericSendFromISR+0x46>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e000      	b.n	800bd40 <xQueueGenericSendFromISR+0x48>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10d      	bne.n	800bd60 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd48:	b672      	cpsid	i
 800bd4a:	f383 8811 	msr	BASEPRI, r3
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	f3bf 8f4f 	dsb	sy
 800bd56:	b662      	cpsie	i
 800bd58:	623b      	str	r3, [r7, #32]
}
 800bd5a:	bf00      	nop
 800bd5c:	bf00      	nop
 800bd5e:	e7fd      	b.n	800bd5c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	d103      	bne.n	800bd6e <xQueueGenericSendFromISR+0x76>
 800bd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d101      	bne.n	800bd72 <xQueueGenericSendFromISR+0x7a>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e000      	b.n	800bd74 <xQueueGenericSendFromISR+0x7c>
 800bd72:	2300      	movs	r3, #0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10d      	bne.n	800bd94 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800bd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd7c:	b672      	cpsid	i
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	b662      	cpsie	i
 800bd8c:	61fb      	str	r3, [r7, #28]
}
 800bd8e:	bf00      	nop
 800bd90:	bf00      	nop
 800bd92:	e7fd      	b.n	800bd90 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd94:	f002 fc62 	bl	800e65c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bd98:	f3ef 8211 	mrs	r2, BASEPRI
 800bd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda0:	b672      	cpsid	i
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	b662      	cpsie	i
 800bdb0:	61ba      	str	r2, [r7, #24]
 800bdb2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bdb4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d302      	bcc.n	800bdca <xQueueGenericSendFromISR+0xd2>
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d12c      	bne.n	800be24 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bdd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bdd4:	683a      	ldr	r2, [r7, #0]
 800bdd6:	68b9      	ldr	r1, [r7, #8]
 800bdd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdda:	f000 fb8f 	bl	800c4fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bdde:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800bde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde6:	d112      	bne.n	800be0e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d016      	beq.n	800be1e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf2:	3324      	adds	r3, #36	@ 0x24
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f001 f9f9 	bl	800d1ec <xTaskRemoveFromEventList>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00e      	beq.n	800be1e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00b      	beq.n	800be1e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2201      	movs	r2, #1
 800be0a:	601a      	str	r2, [r3, #0]
 800be0c:	e007      	b.n	800be1e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be12:	3301      	adds	r3, #1
 800be14:	b2db      	uxtb	r3, r3
 800be16:	b25a      	sxtb	r2, r3
 800be18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800be1e:	2301      	movs	r3, #1
 800be20:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800be22:	e001      	b.n	800be28 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be24:	2300      	movs	r3, #0
 800be26:	637b      	str	r3, [r7, #52]	@ 0x34
 800be28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be2a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800be32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800be36:	4618      	mov	r0, r3
 800be38:	3738      	adds	r7, #56	@ 0x38
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b08e      	sub	sp, #56	@ 0x38
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800be4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10d      	bne.n	800be6e <xQueueGiveFromISR+0x30>
	__asm volatile
 800be52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be56:	b672      	cpsid	i
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	b662      	cpsie	i
 800be66:	623b      	str	r3, [r7, #32]
}
 800be68:	bf00      	nop
 800be6a:	bf00      	nop
 800be6c:	e7fd      	b.n	800be6a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00d      	beq.n	800be92 <xQueueGiveFromISR+0x54>
	__asm volatile
 800be76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be7a:	b672      	cpsid	i
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	b662      	cpsie	i
 800be8a:	61fb      	str	r3, [r7, #28]
}
 800be8c:	bf00      	nop
 800be8e:	bf00      	nop
 800be90:	e7fd      	b.n	800be8e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800be92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d103      	bne.n	800bea2 <xQueueGiveFromISR+0x64>
 800be9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d101      	bne.n	800bea6 <xQueueGiveFromISR+0x68>
 800bea2:	2301      	movs	r3, #1
 800bea4:	e000      	b.n	800bea8 <xQueueGiveFromISR+0x6a>
 800bea6:	2300      	movs	r3, #0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10d      	bne.n	800bec8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800beac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb0:	b672      	cpsid	i
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	b662      	cpsie	i
 800bec0:	61bb      	str	r3, [r7, #24]
}
 800bec2:	bf00      	nop
 800bec4:	bf00      	nop
 800bec6:	e7fd      	b.n	800bec4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bec8:	f002 fbc8 	bl	800e65c <vPortValidateInterruptPriority>
	__asm volatile
 800becc:	f3ef 8211 	mrs	r2, BASEPRI
 800bed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed4:	b672      	cpsid	i
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	b662      	cpsie	i
 800bee4:	617a      	str	r2, [r7, #20]
 800bee6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bee8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800beea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800beec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bef6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bef8:	429a      	cmp	r2, r3
 800befa:	d22b      	bcs.n	800bf54 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800befc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf08:	1c5a      	adds	r2, r3, #1
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bf12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf16:	d112      	bne.n	800bf3e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d016      	beq.n	800bf4e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf22:	3324      	adds	r3, #36	@ 0x24
 800bf24:	4618      	mov	r0, r3
 800bf26:	f001 f961 	bl	800d1ec <xTaskRemoveFromEventList>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00e      	beq.n	800bf4e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00b      	beq.n	800bf4e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	601a      	str	r2, [r3, #0]
 800bf3c:	e007      	b.n	800bf4e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf42:	3301      	adds	r3, #1
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	b25a      	sxtb	r2, r3
 800bf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf52:	e001      	b.n	800bf58 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf54:	2300      	movs	r3, #0
 800bf56:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf5a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f383 8811 	msr	BASEPRI, r3
}
 800bf62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3738      	adds	r7, #56	@ 0x38
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
	...

0800bf70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08c      	sub	sp, #48	@ 0x30
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10d      	bne.n	800bfa6 <xQueueReceive+0x36>
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8e:	b672      	cpsid	i
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	b662      	cpsie	i
 800bf9e:	623b      	str	r3, [r7, #32]
}
 800bfa0:	bf00      	nop
 800bfa2:	bf00      	nop
 800bfa4:	e7fd      	b.n	800bfa2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d103      	bne.n	800bfb4 <xQueueReceive+0x44>
 800bfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <xQueueReceive+0x48>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e000      	b.n	800bfba <xQueueReceive+0x4a>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10d      	bne.n	800bfda <xQueueReceive+0x6a>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc2:	b672      	cpsid	i
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	b662      	cpsie	i
 800bfd2:	61fb      	str	r3, [r7, #28]
}
 800bfd4:	bf00      	nop
 800bfd6:	bf00      	nop
 800bfd8:	e7fd      	b.n	800bfd6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfda:	f001 fae5 	bl	800d5a8 <xTaskGetSchedulerState>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d102      	bne.n	800bfea <xQueueReceive+0x7a>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <xQueueReceive+0x7e>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e000      	b.n	800bff0 <xQueueReceive+0x80>
 800bfee:	2300      	movs	r3, #0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10d      	bne.n	800c010 <xQueueReceive+0xa0>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff8:	b672      	cpsid	i
 800bffa:	f383 8811 	msr	BASEPRI, r3
 800bffe:	f3bf 8f6f 	isb	sy
 800c002:	f3bf 8f4f 	dsb	sy
 800c006:	b662      	cpsie	i
 800c008:	61bb      	str	r3, [r7, #24]
}
 800c00a:	bf00      	nop
 800c00c:	bf00      	nop
 800c00e:	e7fd      	b.n	800c00c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c010:	f002 fa3c 	bl	800e48c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c018:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d01f      	beq.n	800c060 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c020:	68b9      	ldr	r1, [r7, #8]
 800c022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c024:	f000 fad4 	bl	800c5d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02a:	1e5a      	subs	r2, r3, #1
 800c02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00f      	beq.n	800c058 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03a:	3310      	adds	r3, #16
 800c03c:	4618      	mov	r0, r3
 800c03e:	f001 f8d5 	bl	800d1ec <xTaskRemoveFromEventList>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d007      	beq.n	800c058 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c048:	4b3c      	ldr	r3, [pc, #240]	@ (800c13c <xQueueReceive+0x1cc>)
 800c04a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c04e:	601a      	str	r2, [r3, #0]
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c058:	f002 fa4e 	bl	800e4f8 <vPortExitCritical>
				return pdPASS;
 800c05c:	2301      	movs	r3, #1
 800c05e:	e069      	b.n	800c134 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d103      	bne.n	800c06e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c066:	f002 fa47 	bl	800e4f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c06a:	2300      	movs	r3, #0
 800c06c:	e062      	b.n	800c134 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c070:	2b00      	cmp	r3, #0
 800c072:	d106      	bne.n	800c082 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c074:	f107 0310 	add.w	r3, r7, #16
 800c078:	4618      	mov	r0, r3
 800c07a:	f001 f91d 	bl	800d2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c07e:	2301      	movs	r3, #1
 800c080:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c082:	f002 fa39 	bl	800e4f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c086:	f000 fe43 	bl	800cd10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c08a:	f002 f9ff 	bl	800e48c <vPortEnterCritical>
 800c08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c090:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c094:	b25b      	sxtb	r3, r3
 800c096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09a:	d103      	bne.n	800c0a4 <xQueueReceive+0x134>
 800c09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0aa:	b25b      	sxtb	r3, r3
 800c0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b0:	d103      	bne.n	800c0ba <xQueueReceive+0x14a>
 800c0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c0ba:	f002 fa1d 	bl	800e4f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0be:	1d3a      	adds	r2, r7, #4
 800c0c0:	f107 0310 	add.w	r3, r7, #16
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f001 f90c 	bl	800d2e4 <xTaskCheckForTimeOut>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d123      	bne.n	800c11a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0d4:	f000 faf4 	bl	800c6c0 <prvIsQueueEmpty>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d017      	beq.n	800c10e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e0:	3324      	adds	r3, #36	@ 0x24
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f001 f82a 	bl	800d140 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c0ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0ee:	f000 fa95 	bl	800c61c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c0f2:	f000 fe1b 	bl	800cd2c <xTaskResumeAll>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d189      	bne.n	800c010 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800c0fc:	4b0f      	ldr	r3, [pc, #60]	@ (800c13c <xQueueReceive+0x1cc>)
 800c0fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c102:	601a      	str	r2, [r3, #0]
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	e780      	b.n	800c010 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c10e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c110:	f000 fa84 	bl	800c61c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c114:	f000 fe0a 	bl	800cd2c <xTaskResumeAll>
 800c118:	e77a      	b.n	800c010 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c11a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c11c:	f000 fa7e 	bl	800c61c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c120:	f000 fe04 	bl	800cd2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c124:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c126:	f000 facb 	bl	800c6c0 <prvIsQueueEmpty>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f43f af6f 	beq.w	800c010 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c132:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c134:	4618      	mov	r0, r3
 800c136:	3730      	adds	r7, #48	@ 0x30
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	e000ed04 	.word	0xe000ed04

0800c140 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b08e      	sub	sp, #56	@ 0x38
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c14a:	2300      	movs	r3, #0
 800c14c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c152:	2300      	movs	r3, #0
 800c154:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10d      	bne.n	800c178 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800c15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c160:	b672      	cpsid	i
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	b662      	cpsie	i
 800c170:	623b      	str	r3, [r7, #32]
}
 800c172:	bf00      	nop
 800c174:	bf00      	nop
 800c176:	e7fd      	b.n	800c174 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c17a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00d      	beq.n	800c19c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c184:	b672      	cpsid	i
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	b662      	cpsie	i
 800c194:	61fb      	str	r3, [r7, #28]
}
 800c196:	bf00      	nop
 800c198:	bf00      	nop
 800c19a:	e7fd      	b.n	800c198 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c19c:	f001 fa04 	bl	800d5a8 <xTaskGetSchedulerState>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d102      	bne.n	800c1ac <xQueueSemaphoreTake+0x6c>
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <xQueueSemaphoreTake+0x70>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e000      	b.n	800c1b2 <xQueueSemaphoreTake+0x72>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10d      	bne.n	800c1d2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800c1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ba:	b672      	cpsid	i
 800c1bc:	f383 8811 	msr	BASEPRI, r3
 800c1c0:	f3bf 8f6f 	isb	sy
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	b662      	cpsie	i
 800c1ca:	61bb      	str	r3, [r7, #24]
}
 800c1cc:	bf00      	nop
 800c1ce:	bf00      	nop
 800c1d0:	e7fd      	b.n	800c1ce <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1d2:	f002 f95b 	bl	800e48c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d024      	beq.n	800c22c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e4:	1e5a      	subs	r2, r3, #1
 800c1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d104      	bne.n	800c1fc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c1f2:	f001 fb5b 	bl	800d8ac <pvTaskIncrementMutexHeldCount>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1fe:	691b      	ldr	r3, [r3, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00f      	beq.n	800c224 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c206:	3310      	adds	r3, #16
 800c208:	4618      	mov	r0, r3
 800c20a:	f000 ffef 	bl	800d1ec <xTaskRemoveFromEventList>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d007      	beq.n	800c224 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c214:	4b55      	ldr	r3, [pc, #340]	@ (800c36c <xQueueSemaphoreTake+0x22c>)
 800c216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c21a:	601a      	str	r2, [r3, #0]
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c224:	f002 f968 	bl	800e4f8 <vPortExitCritical>
				return pdPASS;
 800c228:	2301      	movs	r3, #1
 800c22a:	e09a      	b.n	800c362 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d114      	bne.n	800c25c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00d      	beq.n	800c254 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800c238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c23c:	b672      	cpsid	i
 800c23e:	f383 8811 	msr	BASEPRI, r3
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	b662      	cpsie	i
 800c24c:	617b      	str	r3, [r7, #20]
}
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
 800c252:	e7fd      	b.n	800c250 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c254:	f002 f950 	bl	800e4f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c258:	2300      	movs	r3, #0
 800c25a:	e082      	b.n	800c362 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d106      	bne.n	800c270 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c262:	f107 030c 	add.w	r3, r7, #12
 800c266:	4618      	mov	r0, r3
 800c268:	f001 f826 	bl	800d2b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c26c:	2301      	movs	r3, #1
 800c26e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c270:	f002 f942 	bl	800e4f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c274:	f000 fd4c 	bl	800cd10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c278:	f002 f908 	bl	800e48c <vPortEnterCritical>
 800c27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c27e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c282:	b25b      	sxtb	r3, r3
 800c284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c288:	d103      	bne.n	800c292 <xQueueSemaphoreTake+0x152>
 800c28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c294:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c298:	b25b      	sxtb	r3, r3
 800c29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29e:	d103      	bne.n	800c2a8 <xQueueSemaphoreTake+0x168>
 800c2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c2a8:	f002 f926 	bl	800e4f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2ac:	463a      	mov	r2, r7
 800c2ae:	f107 030c 	add.w	r3, r7, #12
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f001 f815 	bl	800d2e4 <xTaskCheckForTimeOut>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d132      	bne.n	800c326 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2c2:	f000 f9fd 	bl	800c6c0 <prvIsQueueEmpty>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d026      	beq.n	800c31a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d109      	bne.n	800c2e8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800c2d4:	f002 f8da 	bl	800e48c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f001 f981 	bl	800d5e4 <xTaskPriorityInherit>
 800c2e2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c2e4:	f002 f908 	bl	800e4f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ea:	3324      	adds	r3, #36	@ 0x24
 800c2ec:	683a      	ldr	r2, [r7, #0]
 800c2ee:	4611      	mov	r1, r2
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 ff25 	bl	800d140 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2f8:	f000 f990 	bl	800c61c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2fc:	f000 fd16 	bl	800cd2c <xTaskResumeAll>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	f47f af65 	bne.w	800c1d2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800c308:	4b18      	ldr	r3, [pc, #96]	@ (800c36c <xQueueSemaphoreTake+0x22c>)
 800c30a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c30e:	601a      	str	r2, [r3, #0]
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	e75b      	b.n	800c1d2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c31a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c31c:	f000 f97e 	bl	800c61c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c320:	f000 fd04 	bl	800cd2c <xTaskResumeAll>
 800c324:	e755      	b.n	800c1d2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c326:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c328:	f000 f978 	bl	800c61c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c32c:	f000 fcfe 	bl	800cd2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c330:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c332:	f000 f9c5 	bl	800c6c0 <prvIsQueueEmpty>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f43f af4a 	beq.w	800c1d2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00d      	beq.n	800c360 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800c344:	f002 f8a2 	bl	800e48c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c348:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c34a:	f000 f8bf 	bl	800c4cc <prvGetDisinheritPriorityAfterTimeout>
 800c34e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c356:	4618      	mov	r0, r3
 800c358:	f001 fa20 	bl	800d79c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c35c:	f002 f8cc 	bl	800e4f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c360:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c362:	4618      	mov	r0, r3
 800c364:	3738      	adds	r7, #56	@ 0x38
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	e000ed04 	.word	0xe000ed04

0800c370 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b08e      	sub	sp, #56	@ 0x38
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c382:	2b00      	cmp	r3, #0
 800c384:	d10d      	bne.n	800c3a2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800c386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c38a:	b672      	cpsid	i
 800c38c:	f383 8811 	msr	BASEPRI, r3
 800c390:	f3bf 8f6f 	isb	sy
 800c394:	f3bf 8f4f 	dsb	sy
 800c398:	b662      	cpsie	i
 800c39a:	623b      	str	r3, [r7, #32]
}
 800c39c:	bf00      	nop
 800c39e:	bf00      	nop
 800c3a0:	e7fd      	b.n	800c39e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d103      	bne.n	800c3b0 <xQueueReceiveFromISR+0x40>
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <xQueueReceiveFromISR+0x44>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e000      	b.n	800c3b6 <xQueueReceiveFromISR+0x46>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10d      	bne.n	800c3d6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800c3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3be:	b672      	cpsid	i
 800c3c0:	f383 8811 	msr	BASEPRI, r3
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	b662      	cpsie	i
 800c3ce:	61fb      	str	r3, [r7, #28]
}
 800c3d0:	bf00      	nop
 800c3d2:	bf00      	nop
 800c3d4:	e7fd      	b.n	800c3d2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3d6:	f002 f941 	bl	800e65c <vPortValidateInterruptPriority>
	__asm volatile
 800c3da:	f3ef 8211 	mrs	r2, BASEPRI
 800c3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e2:	b672      	cpsid	i
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	b662      	cpsie	i
 800c3f2:	61ba      	str	r2, [r7, #24]
 800c3f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c3f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c402:	2b00      	cmp	r3, #0
 800c404:	d02f      	beq.n	800c466 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c408:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c40c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c410:	68b9      	ldr	r1, [r7, #8]
 800c412:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c414:	f000 f8dc 	bl	800c5d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41a:	1e5a      	subs	r2, r3, #1
 800c41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c41e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c420:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c428:	d112      	bne.n	800c450 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d016      	beq.n	800c460 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c434:	3310      	adds	r3, #16
 800c436:	4618      	mov	r0, r3
 800c438:	f000 fed8 	bl	800d1ec <xTaskRemoveFromEventList>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00e      	beq.n	800c460 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00b      	beq.n	800c460 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2201      	movs	r2, #1
 800c44c:	601a      	str	r2, [r3, #0]
 800c44e:	e007      	b.n	800c460 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c454:	3301      	adds	r3, #1
 800c456:	b2db      	uxtb	r3, r3
 800c458:	b25a      	sxtb	r2, r3
 800c45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c45c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c460:	2301      	movs	r3, #1
 800c462:	637b      	str	r3, [r7, #52]	@ 0x34
 800c464:	e001      	b.n	800c46a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800c466:	2300      	movs	r3, #0
 800c468:	637b      	str	r3, [r7, #52]	@ 0x34
 800c46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c46c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	f383 8811 	msr	BASEPRI, r3
}
 800c474:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3738      	adds	r7, #56	@ 0x38
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10d      	bne.n	800c4ae <vQueueDelete+0x2e>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c496:	b672      	cpsid	i
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	b662      	cpsie	i
 800c4a6:	60bb      	str	r3, [r7, #8]
}
 800c4a8:	bf00      	nop
 800c4aa:	bf00      	nop
 800c4ac:	e7fd      	b.n	800c4aa <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f000 f95e 	bl	800c770 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d102      	bne.n	800c4c4 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f002 f9e0 	bl	800e884 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c4c4:	bf00      	nop
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d006      	beq.n	800c4ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c4e6:	60fb      	str	r3, [r7, #12]
 800c4e8:	e001      	b.n	800c4ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
	}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3714      	adds	r7, #20
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c508:	2300      	movs	r3, #0
 800c50a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c510:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10d      	bne.n	800c536 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d14d      	bne.n	800c5be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	4618      	mov	r0, r3
 800c528:	f001 f8c4 	bl	800d6b4 <xTaskPriorityDisinherit>
 800c52c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2200      	movs	r2, #0
 800c532:	609a      	str	r2, [r3, #8]
 800c534:	e043      	b.n	800c5be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d119      	bne.n	800c570 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6858      	ldr	r0, [r3, #4]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c544:	461a      	mov	r2, r3
 800c546:	68b9      	ldr	r1, [r7, #8]
 800c548:	f00d fef3 	bl	801a332 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	685a      	ldr	r2, [r3, #4]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c554:	441a      	add	r2, r3
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	685a      	ldr	r2, [r3, #4]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	429a      	cmp	r2, r3
 800c564:	d32b      	bcc.n	800c5be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	605a      	str	r2, [r3, #4]
 800c56e:	e026      	b.n	800c5be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	68d8      	ldr	r0, [r3, #12]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c578:	461a      	mov	r2, r3
 800c57a:	68b9      	ldr	r1, [r7, #8]
 800c57c:	f00d fed9 	bl	801a332 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	68da      	ldr	r2, [r3, #12]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c588:	425b      	negs	r3, r3
 800c58a:	441a      	add	r2, r3
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	68da      	ldr	r2, [r3, #12]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d207      	bcs.n	800c5ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	689a      	ldr	r2, [r3, #8]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5a4:	425b      	negs	r3, r3
 800c5a6:	441a      	add	r2, r3
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d105      	bne.n	800c5be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d002      	beq.n	800c5be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	1c5a      	adds	r2, r3, #1
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c5c6:	697b      	ldr	r3, [r7, #20]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3718      	adds	r7, #24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d018      	beq.n	800c614 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	68da      	ldr	r2, [r3, #12]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ea:	441a      	add	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	68da      	ldr	r2, [r3, #12]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d303      	bcc.n	800c604 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	68d9      	ldr	r1, [r3, #12]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c60c:	461a      	mov	r2, r3
 800c60e:	6838      	ldr	r0, [r7, #0]
 800c610:	f00d fe8f 	bl	801a332 <memcpy>
	}
}
 800c614:	bf00      	nop
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c624:	f001 ff32 	bl	800e48c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c62e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c630:	e011      	b.n	800c656 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c636:	2b00      	cmp	r3, #0
 800c638:	d012      	beq.n	800c660 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	3324      	adds	r3, #36	@ 0x24
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 fdd4 	bl	800d1ec <xTaskRemoveFromEventList>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c64a:	f000 feb3 	bl	800d3b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c64e:	7bfb      	ldrb	r3, [r7, #15]
 800c650:	3b01      	subs	r3, #1
 800c652:	b2db      	uxtb	r3, r3
 800c654:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	dce9      	bgt.n	800c632 <prvUnlockQueue+0x16>
 800c65e:	e000      	b.n	800c662 <prvUnlockQueue+0x46>
					break;
 800c660:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	22ff      	movs	r2, #255	@ 0xff
 800c666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c66a:	f001 ff45 	bl	800e4f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c66e:	f001 ff0d 	bl	800e48c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c678:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c67a:	e011      	b.n	800c6a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d012      	beq.n	800c6aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	3310      	adds	r3, #16
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fdaf 	bl	800d1ec <xTaskRemoveFromEventList>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c694:	f000 fe8e 	bl	800d3b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c698:	7bbb      	ldrb	r3, [r7, #14]
 800c69a:	3b01      	subs	r3, #1
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	dce9      	bgt.n	800c67c <prvUnlockQueue+0x60>
 800c6a8:	e000      	b.n	800c6ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c6aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	22ff      	movs	r2, #255	@ 0xff
 800c6b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c6b4:	f001 ff20 	bl	800e4f8 <vPortExitCritical>
}
 800c6b8:	bf00      	nop
 800c6ba:	3710      	adds	r7, #16
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6c8:	f001 fee0 	bl	800e48c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d102      	bne.n	800c6da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	e001      	b.n	800c6de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c6de:	f001 ff0b 	bl	800e4f8 <vPortExitCritical>

	return xReturn;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6f4:	f001 feca 	bl	800e48c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c700:	429a      	cmp	r2, r3
 800c702:	d102      	bne.n	800c70a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c704:	2301      	movs	r3, #1
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	e001      	b.n	800c70e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c70a:	2300      	movs	r3, #0
 800c70c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c70e:	f001 fef3 	bl	800e4f8 <vPortExitCritical>

	return xReturn;
 800c712:	68fb      	ldr	r3, [r7, #12]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c726:	2300      	movs	r3, #0
 800c728:	60fb      	str	r3, [r7, #12]
 800c72a:	e014      	b.n	800c756 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c72c:	4a0f      	ldr	r2, [pc, #60]	@ (800c76c <vQueueAddToRegistry+0x50>)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10b      	bne.n	800c750 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c738:	490c      	ldr	r1, [pc, #48]	@ (800c76c <vQueueAddToRegistry+0x50>)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	683a      	ldr	r2, [r7, #0]
 800c73e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c742:	4a0a      	ldr	r2, [pc, #40]	@ (800c76c <vQueueAddToRegistry+0x50>)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	4413      	add	r3, r2
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c74e:	e006      	b.n	800c75e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3301      	adds	r3, #1
 800c754:	60fb      	str	r3, [r7, #12]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b07      	cmp	r3, #7
 800c75a:	d9e7      	bls.n	800c72c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c75c:	bf00      	nop
 800c75e:	bf00      	nop
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	2000ad10 	.word	0x2000ad10

0800c770 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c778:	2300      	movs	r3, #0
 800c77a:	60fb      	str	r3, [r7, #12]
 800c77c:	e016      	b.n	800c7ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c77e:	4a10      	ldr	r2, [pc, #64]	@ (800c7c0 <vQueueUnregisterQueue+0x50>)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	00db      	lsls	r3, r3, #3
 800c784:	4413      	add	r3, r2
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d10b      	bne.n	800c7a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c78e:	4a0c      	ldr	r2, [pc, #48]	@ (800c7c0 <vQueueUnregisterQueue+0x50>)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2100      	movs	r1, #0
 800c794:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c798:	4a09      	ldr	r2, [pc, #36]	@ (800c7c0 <vQueueUnregisterQueue+0x50>)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	00db      	lsls	r3, r3, #3
 800c79e:	4413      	add	r3, r2
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	605a      	str	r2, [r3, #4]
				break;
 800c7a4:	e006      	b.n	800c7b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	60fb      	str	r3, [r7, #12]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2b07      	cmp	r3, #7
 800c7b0:	d9e5      	bls.n	800c77e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c7b2:	bf00      	nop
 800c7b4:	bf00      	nop
 800c7b6:	3714      	adds	r7, #20
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr
 800c7c0:	2000ad10 	.word	0x2000ad10

0800c7c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c7d4:	f001 fe5a 	bl	800e48c <vPortEnterCritical>
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c7de:	b25b      	sxtb	r3, r3
 800c7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e4:	d103      	bne.n	800c7ee <vQueueWaitForMessageRestricted+0x2a>
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7f4:	b25b      	sxtb	r3, r3
 800c7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fa:	d103      	bne.n	800c804 <vQueueWaitForMessageRestricted+0x40>
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c804:	f001 fe78 	bl	800e4f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d106      	bne.n	800c81e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	3324      	adds	r3, #36	@ 0x24
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	68b9      	ldr	r1, [r7, #8]
 800c818:	4618      	mov	r0, r3
 800c81a:	f000 fcb9 	bl	800d190 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c81e:	6978      	ldr	r0, [r7, #20]
 800c820:	f7ff fefc 	bl	800c61c <prvUnlockQueue>
	}
 800c824:	bf00      	nop
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b08e      	sub	sp, #56	@ 0x38
 800c830:	af04      	add	r7, sp, #16
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	60b9      	str	r1, [r7, #8]
 800c836:	607a      	str	r2, [r7, #4]
 800c838:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d10d      	bne.n	800c85c <xTaskCreateStatic+0x30>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c844:	b672      	cpsid	i
 800c846:	f383 8811 	msr	BASEPRI, r3
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	b662      	cpsie	i
 800c854:	623b      	str	r3, [r7, #32]
}
 800c856:	bf00      	nop
 800c858:	bf00      	nop
 800c85a:	e7fd      	b.n	800c858 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10d      	bne.n	800c87e <xTaskCreateStatic+0x52>
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c866:	b672      	cpsid	i
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	b662      	cpsie	i
 800c876:	61fb      	str	r3, [r7, #28]
}
 800c878:	bf00      	nop
 800c87a:	bf00      	nop
 800c87c:	e7fd      	b.n	800c87a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c87e:	23a8      	movs	r3, #168	@ 0xa8
 800c880:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	2ba8      	cmp	r3, #168	@ 0xa8
 800c886:	d00d      	beq.n	800c8a4 <xTaskCreateStatic+0x78>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88c:	b672      	cpsid	i
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	b662      	cpsie	i
 800c89c:	61bb      	str	r3, [r7, #24]
}
 800c89e:	bf00      	nop
 800c8a0:	bf00      	nop
 800c8a2:	e7fd      	b.n	800c8a0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c8a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d01e      	beq.n	800c8ea <xTaskCreateStatic+0xbe>
 800c8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d01b      	beq.n	800c8ea <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8be:	2202      	movs	r2, #2
 800c8c0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	9303      	str	r3, [sp, #12]
 800c8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ca:	9302      	str	r3, [sp, #8]
 800c8cc:	f107 0314 	add.w	r3, r7, #20
 800c8d0:	9301      	str	r3, [sp, #4]
 800c8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	68b9      	ldr	r1, [r7, #8]
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f000 f851 	bl	800c984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c8e4:	f000 f8f8 	bl	800cad8 <prvAddNewTaskToReadyList>
 800c8e8:	e001      	b.n	800c8ee <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8ee:	697b      	ldr	r3, [r7, #20]
	}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3728      	adds	r7, #40	@ 0x28
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08c      	sub	sp, #48	@ 0x30
 800c8fc:	af04      	add	r7, sp, #16
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	603b      	str	r3, [r7, #0]
 800c904:	4613      	mov	r3, r2
 800c906:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c908:	88fb      	ldrh	r3, [r7, #6]
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	4618      	mov	r0, r3
 800c90e:	f001 feeb 	bl	800e6e8 <pvPortMalloc>
 800c912:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00e      	beq.n	800c938 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c91a:	20a8      	movs	r0, #168	@ 0xa8
 800c91c:	f001 fee4 	bl	800e6e8 <pvPortMalloc>
 800c920:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d003      	beq.n	800c930 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c92e:	e005      	b.n	800c93c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c930:	6978      	ldr	r0, [r7, #20]
 800c932:	f001 ffa7 	bl	800e884 <vPortFree>
 800c936:	e001      	b.n	800c93c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c938:	2300      	movs	r3, #0
 800c93a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d017      	beq.n	800c972 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	2200      	movs	r2, #0
 800c946:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c94a:	88fa      	ldrh	r2, [r7, #6]
 800c94c:	2300      	movs	r3, #0
 800c94e:	9303      	str	r3, [sp, #12]
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	9302      	str	r3, [sp, #8]
 800c954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c956:	9301      	str	r3, [sp, #4]
 800c958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	68b9      	ldr	r1, [r7, #8]
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f000 f80f 	bl	800c984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c966:	69f8      	ldr	r0, [r7, #28]
 800c968:	f000 f8b6 	bl	800cad8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c96c:	2301      	movs	r3, #1
 800c96e:	61bb      	str	r3, [r7, #24]
 800c970:	e002      	b.n	800c978 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c972:	f04f 33ff 	mov.w	r3, #4294967295
 800c976:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c978:	69bb      	ldr	r3, [r7, #24]
	}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3720      	adds	r7, #32
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
	...

0800c984 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b088      	sub	sp, #32
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c994:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	461a      	mov	r2, r3
 800c99c:	21a5      	movs	r1, #165	@ 0xa5
 800c99e:	f00d fbf5 	bl	801a18c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9a6:	6879      	ldr	r1, [r7, #4]
 800c9a8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c9ac:	440b      	add	r3, r1
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	4413      	add	r3, r2
 800c9b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	f023 0307 	bic.w	r3, r3, #7
 800c9ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	f003 0307 	and.w	r3, r3, #7
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00d      	beq.n	800c9e2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ca:	b672      	cpsid	i
 800c9cc:	f383 8811 	msr	BASEPRI, r3
 800c9d0:	f3bf 8f6f 	isb	sy
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	b662      	cpsie	i
 800c9da:	617b      	str	r3, [r7, #20]
}
 800c9dc:	bf00      	nop
 800c9de:	bf00      	nop
 800c9e0:	e7fd      	b.n	800c9de <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d01f      	beq.n	800ca28 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	61fb      	str	r3, [r7, #28]
 800c9ec:	e012      	b.n	800ca14 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	7819      	ldrb	r1, [r3, #0]
 800c9f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	3334      	adds	r3, #52	@ 0x34
 800c9fe:	460a      	mov	r2, r1
 800ca00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	4413      	add	r3, r2
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d006      	beq.n	800ca1c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	3301      	adds	r3, #1
 800ca12:	61fb      	str	r3, [r7, #28]
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	2b0f      	cmp	r3, #15
 800ca18:	d9e9      	bls.n	800c9ee <prvInitialiseNewTask+0x6a>
 800ca1a:	e000      	b.n	800ca1e <prvInitialiseNewTask+0x9a>
			{
				break;
 800ca1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ca26:	e003      	b.n	800ca30 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca32:	2b37      	cmp	r3, #55	@ 0x37
 800ca34:	d901      	bls.n	800ca3a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca36:	2337      	movs	r3, #55	@ 0x37
 800ca38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca48:	2200      	movs	r2, #0
 800ca4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4e:	3304      	adds	r3, #4
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7fe fd27 	bl	800b4a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca58:	3318      	adds	r3, #24
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fe fd22 	bl	800b4a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ca86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca88:	3354      	adds	r3, #84	@ 0x54
 800ca8a:	224c      	movs	r2, #76	@ 0x4c
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f00d fb7c 	bl	801a18c <memset>
 800ca94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca96:	4a0d      	ldr	r2, [pc, #52]	@ (800cacc <prvInitialiseNewTask+0x148>)
 800ca98:	659a      	str	r2, [r3, #88]	@ 0x58
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9c:	4a0c      	ldr	r2, [pc, #48]	@ (800cad0 <prvInitialiseNewTask+0x14c>)
 800ca9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800caa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa2:	4a0c      	ldr	r2, [pc, #48]	@ (800cad4 <prvInitialiseNewTask+0x150>)
 800caa4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	68f9      	ldr	r1, [r7, #12]
 800caaa:	69b8      	ldr	r0, [r7, #24]
 800caac:	f001 fbe2 	bl	800e274 <pxPortInitialiseStack>
 800cab0:	4602      	mov	r2, r0
 800cab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cac0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cac2:	bf00      	nop
 800cac4:	3720      	adds	r7, #32
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	2002761c 	.word	0x2002761c
 800cad0:	20027684 	.word	0x20027684
 800cad4:	200276ec 	.word	0x200276ec

0800cad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cae0:	f001 fcd4 	bl	800e48c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cae4:	4b2d      	ldr	r3, [pc, #180]	@ (800cb9c <prvAddNewTaskToReadyList+0xc4>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	3301      	adds	r3, #1
 800caea:	4a2c      	ldr	r2, [pc, #176]	@ (800cb9c <prvAddNewTaskToReadyList+0xc4>)
 800caec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800caee:	4b2c      	ldr	r3, [pc, #176]	@ (800cba0 <prvAddNewTaskToReadyList+0xc8>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d109      	bne.n	800cb0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800caf6:	4a2a      	ldr	r2, [pc, #168]	@ (800cba0 <prvAddNewTaskToReadyList+0xc8>)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cafc:	4b27      	ldr	r3, [pc, #156]	@ (800cb9c <prvAddNewTaskToReadyList+0xc4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d110      	bne.n	800cb26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb04:	f000 fc7a 	bl	800d3fc <prvInitialiseTaskLists>
 800cb08:	e00d      	b.n	800cb26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb0a:	4b26      	ldr	r3, [pc, #152]	@ (800cba4 <prvAddNewTaskToReadyList+0xcc>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d109      	bne.n	800cb26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb12:	4b23      	ldr	r3, [pc, #140]	@ (800cba0 <prvAddNewTaskToReadyList+0xc8>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d802      	bhi.n	800cb26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb20:	4a1f      	ldr	r2, [pc, #124]	@ (800cba0 <prvAddNewTaskToReadyList+0xc8>)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb26:	4b20      	ldr	r3, [pc, #128]	@ (800cba8 <prvAddNewTaskToReadyList+0xd0>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	4a1e      	ldr	r2, [pc, #120]	@ (800cba8 <prvAddNewTaskToReadyList+0xd0>)
 800cb2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cb30:	4b1d      	ldr	r3, [pc, #116]	@ (800cba8 <prvAddNewTaskToReadyList+0xd0>)
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb3c:	4b1b      	ldr	r3, [pc, #108]	@ (800cbac <prvAddNewTaskToReadyList+0xd4>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d903      	bls.n	800cb4c <prvAddNewTaskToReadyList+0x74>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb48:	4a18      	ldr	r2, [pc, #96]	@ (800cbac <prvAddNewTaskToReadyList+0xd4>)
 800cb4a:	6013      	str	r3, [r2, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb50:	4613      	mov	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4413      	add	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4a15      	ldr	r2, [pc, #84]	@ (800cbb0 <prvAddNewTaskToReadyList+0xd8>)
 800cb5a:	441a      	add	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	3304      	adds	r3, #4
 800cb60:	4619      	mov	r1, r3
 800cb62:	4610      	mov	r0, r2
 800cb64:	f7fe fcab 	bl	800b4be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb68:	f001 fcc6 	bl	800e4f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb6c:	4b0d      	ldr	r3, [pc, #52]	@ (800cba4 <prvAddNewTaskToReadyList+0xcc>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00e      	beq.n	800cb92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb74:	4b0a      	ldr	r3, [pc, #40]	@ (800cba0 <prvAddNewTaskToReadyList+0xc8>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d207      	bcs.n	800cb92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb82:	4b0c      	ldr	r3, [pc, #48]	@ (800cbb4 <prvAddNewTaskToReadyList+0xdc>)
 800cb84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb88:	601a      	str	r2, [r3, #0]
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb92:	bf00      	nop
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	2000b224 	.word	0x2000b224
 800cba0:	2000ad50 	.word	0x2000ad50
 800cba4:	2000b230 	.word	0x2000b230
 800cba8:	2000b240 	.word	0x2000b240
 800cbac:	2000b22c 	.word	0x2000b22c
 800cbb0:	2000ad54 	.word	0x2000ad54
 800cbb4:	e000ed04 	.word	0xe000ed04

0800cbb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d01a      	beq.n	800cc00 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cbca:	4b15      	ldr	r3, [pc, #84]	@ (800cc20 <vTaskDelay+0x68>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00d      	beq.n	800cbee <vTaskDelay+0x36>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd6:	b672      	cpsid	i
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	b662      	cpsie	i
 800cbe6:	60bb      	str	r3, [r7, #8]
}
 800cbe8:	bf00      	nop
 800cbea:	bf00      	nop
 800cbec:	e7fd      	b.n	800cbea <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cbee:	f000 f88f 	bl	800cd10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 ff81 	bl	800dafc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cbfa:	f000 f897 	bl	800cd2c <xTaskResumeAll>
 800cbfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d107      	bne.n	800cc16 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800cc06:	4b07      	ldr	r3, [pc, #28]	@ (800cc24 <vTaskDelay+0x6c>)
 800cc08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc16:	bf00      	nop
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	2000b24c 	.word	0x2000b24c
 800cc24:	e000ed04 	.word	0xe000ed04

0800cc28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08a      	sub	sp, #40	@ 0x28
 800cc2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc36:	463a      	mov	r2, r7
 800cc38:	1d39      	adds	r1, r7, #4
 800cc3a:	f107 0308 	add.w	r3, r7, #8
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fe fbdc 	bl	800b3fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	9202      	str	r2, [sp, #8]
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	2300      	movs	r3, #0
 800cc54:	460a      	mov	r2, r1
 800cc56:	4926      	ldr	r1, [pc, #152]	@ (800ccf0 <vTaskStartScheduler+0xc8>)
 800cc58:	4826      	ldr	r0, [pc, #152]	@ (800ccf4 <vTaskStartScheduler+0xcc>)
 800cc5a:	f7ff fde7 	bl	800c82c <xTaskCreateStatic>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	4a25      	ldr	r2, [pc, #148]	@ (800ccf8 <vTaskStartScheduler+0xd0>)
 800cc62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc64:	4b24      	ldr	r3, [pc, #144]	@ (800ccf8 <vTaskStartScheduler+0xd0>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d002      	beq.n	800cc72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	617b      	str	r3, [r7, #20]
 800cc70:	e001      	b.n	800cc76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d102      	bne.n	800cc82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc7c:	f000 ff92 	bl	800dba4 <xTimerCreateTimerTask>
 800cc80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d11d      	bne.n	800ccc4 <vTaskStartScheduler+0x9c>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc8c:	b672      	cpsid	i
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	b662      	cpsie	i
 800cc9c:	613b      	str	r3, [r7, #16]
}
 800cc9e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cca0:	4b16      	ldr	r3, [pc, #88]	@ (800ccfc <vTaskStartScheduler+0xd4>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	3354      	adds	r3, #84	@ 0x54
 800cca6:	4a16      	ldr	r2, [pc, #88]	@ (800cd00 <vTaskStartScheduler+0xd8>)
 800cca8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ccaa:	4b16      	ldr	r3, [pc, #88]	@ (800cd04 <vTaskStartScheduler+0xdc>)
 800ccac:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ccb2:	4b15      	ldr	r3, [pc, #84]	@ (800cd08 <vTaskStartScheduler+0xe0>)
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ccb8:	4b14      	ldr	r3, [pc, #80]	@ (800cd0c <vTaskStartScheduler+0xe4>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ccbe:	f001 fb67 	bl	800e390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ccc2:	e011      	b.n	800cce8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccca:	d10d      	bne.n	800cce8 <vTaskStartScheduler+0xc0>
	__asm volatile
 800cccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd0:	b672      	cpsid	i
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	b662      	cpsie	i
 800cce0:	60fb      	str	r3, [r7, #12]
}
 800cce2:	bf00      	nop
 800cce4:	bf00      	nop
 800cce6:	e7fd      	b.n	800cce4 <vTaskStartScheduler+0xbc>
}
 800cce8:	bf00      	nop
 800ccea:	3718      	adds	r7, #24
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	0801b144 	.word	0x0801b144
 800ccf4:	0800d3cd 	.word	0x0800d3cd
 800ccf8:	2000b248 	.word	0x2000b248
 800ccfc:	2000ad50 	.word	0x2000ad50
 800cd00:	2000003c 	.word	0x2000003c
 800cd04:	2000b244 	.word	0x2000b244
 800cd08:	2000b230 	.word	0x2000b230
 800cd0c:	2000b228 	.word	0x2000b228

0800cd10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd10:	b480      	push	{r7}
 800cd12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cd14:	4b04      	ldr	r3, [pc, #16]	@ (800cd28 <vTaskSuspendAll+0x18>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	4a03      	ldr	r2, [pc, #12]	@ (800cd28 <vTaskSuspendAll+0x18>)
 800cd1c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cd1e:	bf00      	nop
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr
 800cd28:	2000b24c 	.word	0x2000b24c

0800cd2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd36:	2300      	movs	r3, #0
 800cd38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd3a:	4b43      	ldr	r3, [pc, #268]	@ (800ce48 <xTaskResumeAll+0x11c>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10d      	bne.n	800cd5e <xTaskResumeAll+0x32>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd46:	b672      	cpsid	i
 800cd48:	f383 8811 	msr	BASEPRI, r3
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	f3bf 8f4f 	dsb	sy
 800cd54:	b662      	cpsie	i
 800cd56:	603b      	str	r3, [r7, #0]
}
 800cd58:	bf00      	nop
 800cd5a:	bf00      	nop
 800cd5c:	e7fd      	b.n	800cd5a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd5e:	f001 fb95 	bl	800e48c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd62:	4b39      	ldr	r3, [pc, #228]	@ (800ce48 <xTaskResumeAll+0x11c>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	3b01      	subs	r3, #1
 800cd68:	4a37      	ldr	r2, [pc, #220]	@ (800ce48 <xTaskResumeAll+0x11c>)
 800cd6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd6c:	4b36      	ldr	r3, [pc, #216]	@ (800ce48 <xTaskResumeAll+0x11c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d162      	bne.n	800ce3a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd74:	4b35      	ldr	r3, [pc, #212]	@ (800ce4c <xTaskResumeAll+0x120>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d05e      	beq.n	800ce3a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd7c:	e02f      	b.n	800cdde <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd7e:	4b34      	ldr	r3, [pc, #208]	@ (800ce50 <xTaskResumeAll+0x124>)
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	3318      	adds	r3, #24
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fe fbf4 	bl	800b578 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	3304      	adds	r3, #4
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7fe fbef 	bl	800b578 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd9e:	4b2d      	ldr	r3, [pc, #180]	@ (800ce54 <xTaskResumeAll+0x128>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d903      	bls.n	800cdae <xTaskResumeAll+0x82>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdaa:	4a2a      	ldr	r2, [pc, #168]	@ (800ce54 <xTaskResumeAll+0x128>)
 800cdac:	6013      	str	r3, [r2, #0]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	4413      	add	r3, r2
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4a27      	ldr	r2, [pc, #156]	@ (800ce58 <xTaskResumeAll+0x12c>)
 800cdbc:	441a      	add	r2, r3
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	4610      	mov	r0, r2
 800cdc6:	f7fe fb7a 	bl	800b4be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdce:	4b23      	ldr	r3, [pc, #140]	@ (800ce5c <xTaskResumeAll+0x130>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d302      	bcc.n	800cdde <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800cdd8:	4b21      	ldr	r3, [pc, #132]	@ (800ce60 <xTaskResumeAll+0x134>)
 800cdda:	2201      	movs	r2, #1
 800cddc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdde:	4b1c      	ldr	r3, [pc, #112]	@ (800ce50 <xTaskResumeAll+0x124>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1cb      	bne.n	800cd7e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cdec:	f000 fbac 	bl	800d548 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cdf0:	4b1c      	ldr	r3, [pc, #112]	@ (800ce64 <xTaskResumeAll+0x138>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d010      	beq.n	800ce1e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cdfc:	f000 f858 	bl	800ceb0 <xTaskIncrementTick>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d002      	beq.n	800ce0c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800ce06:	4b16      	ldr	r3, [pc, #88]	@ (800ce60 <xTaskResumeAll+0x134>)
 800ce08:	2201      	movs	r2, #1
 800ce0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1f1      	bne.n	800cdfc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800ce18:	4b12      	ldr	r3, [pc, #72]	@ (800ce64 <xTaskResumeAll+0x138>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce1e:	4b10      	ldr	r3, [pc, #64]	@ (800ce60 <xTaskResumeAll+0x134>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d009      	beq.n	800ce3a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce26:	2301      	movs	r3, #1
 800ce28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ce68 <xTaskResumeAll+0x13c>)
 800ce2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce30:	601a      	str	r2, [r3, #0]
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce3a:	f001 fb5d 	bl	800e4f8 <vPortExitCritical>

	return xAlreadyYielded;
 800ce3e:	68bb      	ldr	r3, [r7, #8]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	2000b24c 	.word	0x2000b24c
 800ce4c:	2000b224 	.word	0x2000b224
 800ce50:	2000b1e4 	.word	0x2000b1e4
 800ce54:	2000b22c 	.word	0x2000b22c
 800ce58:	2000ad54 	.word	0x2000ad54
 800ce5c:	2000ad50 	.word	0x2000ad50
 800ce60:	2000b238 	.word	0x2000b238
 800ce64:	2000b234 	.word	0x2000b234
 800ce68:	e000ed04 	.word	0xe000ed04

0800ce6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce72:	4b05      	ldr	r3, [pc, #20]	@ (800ce88 <xTaskGetTickCount+0x1c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce78:	687b      	ldr	r3, [r7, #4]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	370c      	adds	r7, #12
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	2000b228 	.word	0x2000b228

0800ce8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce92:	f001 fbe3 	bl	800e65c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ce96:	2300      	movs	r3, #0
 800ce98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ce9a:	4b04      	ldr	r3, [pc, #16]	@ (800ceac <xTaskGetTickCountFromISR+0x20>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cea0:	683b      	ldr	r3, [r7, #0]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	2000b228 	.word	0x2000b228

0800ceb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ceba:	4b50      	ldr	r3, [pc, #320]	@ (800cffc <xTaskIncrementTick+0x14c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f040 808c 	bne.w	800cfdc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cec4:	4b4e      	ldr	r3, [pc, #312]	@ (800d000 <xTaskIncrementTick+0x150>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3301      	adds	r3, #1
 800ceca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cecc:	4a4c      	ldr	r2, [pc, #304]	@ (800d000 <xTaskIncrementTick+0x150>)
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d123      	bne.n	800cf20 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800ced8:	4b4a      	ldr	r3, [pc, #296]	@ (800d004 <xTaskIncrementTick+0x154>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00d      	beq.n	800cefe <xTaskIncrementTick+0x4e>
	__asm volatile
 800cee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee6:	b672      	cpsid	i
 800cee8:	f383 8811 	msr	BASEPRI, r3
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f3bf 8f4f 	dsb	sy
 800cef4:	b662      	cpsie	i
 800cef6:	603b      	str	r3, [r7, #0]
}
 800cef8:	bf00      	nop
 800cefa:	bf00      	nop
 800cefc:	e7fd      	b.n	800cefa <xTaskIncrementTick+0x4a>
 800cefe:	4b41      	ldr	r3, [pc, #260]	@ (800d004 <xTaskIncrementTick+0x154>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	60fb      	str	r3, [r7, #12]
 800cf04:	4b40      	ldr	r3, [pc, #256]	@ (800d008 <xTaskIncrementTick+0x158>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a3e      	ldr	r2, [pc, #248]	@ (800d004 <xTaskIncrementTick+0x154>)
 800cf0a:	6013      	str	r3, [r2, #0]
 800cf0c:	4a3e      	ldr	r2, [pc, #248]	@ (800d008 <xTaskIncrementTick+0x158>)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6013      	str	r3, [r2, #0]
 800cf12:	4b3e      	ldr	r3, [pc, #248]	@ (800d00c <xTaskIncrementTick+0x15c>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	3301      	adds	r3, #1
 800cf18:	4a3c      	ldr	r2, [pc, #240]	@ (800d00c <xTaskIncrementTick+0x15c>)
 800cf1a:	6013      	str	r3, [r2, #0]
 800cf1c:	f000 fb14 	bl	800d548 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf20:	4b3b      	ldr	r3, [pc, #236]	@ (800d010 <xTaskIncrementTick+0x160>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	693a      	ldr	r2, [r7, #16]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d349      	bcc.n	800cfbe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf2a:	4b36      	ldr	r3, [pc, #216]	@ (800d004 <xTaskIncrementTick+0x154>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d104      	bne.n	800cf3e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf34:	4b36      	ldr	r3, [pc, #216]	@ (800d010 <xTaskIncrementTick+0x160>)
 800cf36:	f04f 32ff 	mov.w	r2, #4294967295
 800cf3a:	601a      	str	r2, [r3, #0]
					break;
 800cf3c:	e03f      	b.n	800cfbe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf3e:	4b31      	ldr	r3, [pc, #196]	@ (800d004 <xTaskIncrementTick+0x154>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf4e:	693a      	ldr	r2, [r7, #16]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d203      	bcs.n	800cf5e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf56:	4a2e      	ldr	r2, [pc, #184]	@ (800d010 <xTaskIncrementTick+0x160>)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf5c:	e02f      	b.n	800cfbe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	3304      	adds	r3, #4
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe fb08 	bl	800b578 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d004      	beq.n	800cf7a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	3318      	adds	r3, #24
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7fe faff 	bl	800b578 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf7e:	4b25      	ldr	r3, [pc, #148]	@ (800d014 <xTaskIncrementTick+0x164>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d903      	bls.n	800cf8e <xTaskIncrementTick+0xde>
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf8a:	4a22      	ldr	r2, [pc, #136]	@ (800d014 <xTaskIncrementTick+0x164>)
 800cf8c:	6013      	str	r3, [r2, #0]
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf92:	4613      	mov	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4a1f      	ldr	r2, [pc, #124]	@ (800d018 <xTaskIncrementTick+0x168>)
 800cf9c:	441a      	add	r2, r3
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	f7fe fa8a 	bl	800b4be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfae:	4b1b      	ldr	r3, [pc, #108]	@ (800d01c <xTaskIncrementTick+0x16c>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d3b8      	bcc.n	800cf2a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfbc:	e7b5      	b.n	800cf2a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cfbe:	4b17      	ldr	r3, [pc, #92]	@ (800d01c <xTaskIncrementTick+0x16c>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfc4:	4914      	ldr	r1, [pc, #80]	@ (800d018 <xTaskIncrementTick+0x168>)
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	440b      	add	r3, r1
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d907      	bls.n	800cfe6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	617b      	str	r3, [r7, #20]
 800cfda:	e004      	b.n	800cfe6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cfdc:	4b10      	ldr	r3, [pc, #64]	@ (800d020 <xTaskIncrementTick+0x170>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	4a0f      	ldr	r2, [pc, #60]	@ (800d020 <xTaskIncrementTick+0x170>)
 800cfe4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cfe6:	4b0f      	ldr	r3, [pc, #60]	@ (800d024 <xTaskIncrementTick+0x174>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800cfee:	2301      	movs	r3, #1
 800cff0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cff2:	697b      	ldr	r3, [r7, #20]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3718      	adds	r7, #24
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	2000b24c 	.word	0x2000b24c
 800d000:	2000b228 	.word	0x2000b228
 800d004:	2000b1dc 	.word	0x2000b1dc
 800d008:	2000b1e0 	.word	0x2000b1e0
 800d00c:	2000b23c 	.word	0x2000b23c
 800d010:	2000b244 	.word	0x2000b244
 800d014:	2000b22c 	.word	0x2000b22c
 800d018:	2000ad54 	.word	0x2000ad54
 800d01c:	2000ad50 	.word	0x2000ad50
 800d020:	2000b234 	.word	0x2000b234
 800d024:	2000b238 	.word	0x2000b238

0800d028 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d02e:	4b3e      	ldr	r3, [pc, #248]	@ (800d128 <vTaskSwitchContext+0x100>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d036:	4b3d      	ldr	r3, [pc, #244]	@ (800d12c <vTaskSwitchContext+0x104>)
 800d038:	2201      	movs	r2, #1
 800d03a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d03c:	e070      	b.n	800d120 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800d03e:	4b3b      	ldr	r3, [pc, #236]	@ (800d12c <vTaskSwitchContext+0x104>)
 800d040:	2200      	movs	r2, #0
 800d042:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d044:	4b3a      	ldr	r3, [pc, #232]	@ (800d130 <vTaskSwitchContext+0x108>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d04a:	613b      	str	r3, [r7, #16]
 800d04c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800d050:	60fb      	str	r3, [r7, #12]
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d111      	bne.n	800d080 <vTaskSwitchContext+0x58>
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	3304      	adds	r3, #4
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	429a      	cmp	r2, r3
 800d066:	d10b      	bne.n	800d080 <vTaskSwitchContext+0x58>
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	3308      	adds	r3, #8
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	429a      	cmp	r2, r3
 800d072:	d105      	bne.n	800d080 <vTaskSwitchContext+0x58>
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	330c      	adds	r3, #12
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d008      	beq.n	800d092 <vTaskSwitchContext+0x6a>
 800d080:	4b2b      	ldr	r3, [pc, #172]	@ (800d130 <vTaskSwitchContext+0x108>)
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	4b2a      	ldr	r3, [pc, #168]	@ (800d130 <vTaskSwitchContext+0x108>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	3334      	adds	r3, #52	@ 0x34
 800d08a:	4619      	mov	r1, r3
 800d08c:	4610      	mov	r0, r2
 800d08e:	f7f3 fde3 	bl	8000c58 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d092:	4b28      	ldr	r3, [pc, #160]	@ (800d134 <vTaskSwitchContext+0x10c>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	617b      	str	r3, [r7, #20]
 800d098:	e013      	b.n	800d0c2 <vTaskSwitchContext+0x9a>
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d10d      	bne.n	800d0bc <vTaskSwitchContext+0x94>
	__asm volatile
 800d0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a4:	b672      	cpsid	i
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	b662      	cpsie	i
 800d0b4:	607b      	str	r3, [r7, #4]
}
 800d0b6:	bf00      	nop
 800d0b8:	bf00      	nop
 800d0ba:	e7fd      	b.n	800d0b8 <vTaskSwitchContext+0x90>
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	3b01      	subs	r3, #1
 800d0c0:	617b      	str	r3, [r7, #20]
 800d0c2:	491d      	ldr	r1, [pc, #116]	@ (800d138 <vTaskSwitchContext+0x110>)
 800d0c4:	697a      	ldr	r2, [r7, #20]
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	009b      	lsls	r3, r3, #2
 800d0ca:	4413      	add	r3, r2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	440b      	add	r3, r1
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d0e1      	beq.n	800d09a <vTaskSwitchContext+0x72>
 800d0d6:	697a      	ldr	r2, [r7, #20]
 800d0d8:	4613      	mov	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4413      	add	r3, r2
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	4a15      	ldr	r2, [pc, #84]	@ (800d138 <vTaskSwitchContext+0x110>)
 800d0e2:	4413      	add	r3, r2
 800d0e4:	60bb      	str	r3, [r7, #8]
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	605a      	str	r2, [r3, #4]
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	685a      	ldr	r2, [r3, #4]
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	3308      	adds	r3, #8
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d104      	bne.n	800d106 <vTaskSwitchContext+0xde>
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	685a      	ldr	r2, [r3, #4]
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	605a      	str	r2, [r3, #4]
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	4a08      	ldr	r2, [pc, #32]	@ (800d130 <vTaskSwitchContext+0x108>)
 800d10e:	6013      	str	r3, [r2, #0]
 800d110:	4a08      	ldr	r2, [pc, #32]	@ (800d134 <vTaskSwitchContext+0x10c>)
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d116:	4b06      	ldr	r3, [pc, #24]	@ (800d130 <vTaskSwitchContext+0x108>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	3354      	adds	r3, #84	@ 0x54
 800d11c:	4a07      	ldr	r2, [pc, #28]	@ (800d13c <vTaskSwitchContext+0x114>)
 800d11e:	6013      	str	r3, [r2, #0]
}
 800d120:	bf00      	nop
 800d122:	3718      	adds	r7, #24
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	2000b24c 	.word	0x2000b24c
 800d12c:	2000b238 	.word	0x2000b238
 800d130:	2000ad50 	.word	0x2000ad50
 800d134:	2000b22c 	.word	0x2000b22c
 800d138:	2000ad54 	.word	0x2000ad54
 800d13c:	2000003c 	.word	0x2000003c

0800d140 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10d      	bne.n	800d16c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800d150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d154:	b672      	cpsid	i
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	b662      	cpsie	i
 800d164:	60fb      	str	r3, [r7, #12]
}
 800d166:	bf00      	nop
 800d168:	bf00      	nop
 800d16a:	e7fd      	b.n	800d168 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d16c:	4b07      	ldr	r3, [pc, #28]	@ (800d18c <vTaskPlaceOnEventList+0x4c>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	3318      	adds	r3, #24
 800d172:	4619      	mov	r1, r3
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7fe f9c6 	bl	800b506 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d17a:	2101      	movs	r1, #1
 800d17c:	6838      	ldr	r0, [r7, #0]
 800d17e:	f000 fcbd 	bl	800dafc <prvAddCurrentTaskToDelayedList>
}
 800d182:	bf00      	nop
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	2000ad50 	.word	0x2000ad50

0800d190 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d190:	b580      	push	{r7, lr}
 800d192:	b086      	sub	sp, #24
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d10d      	bne.n	800d1be <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800d1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a6:	b672      	cpsid	i
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	b662      	cpsie	i
 800d1b6:	617b      	str	r3, [r7, #20]
}
 800d1b8:	bf00      	nop
 800d1ba:	bf00      	nop
 800d1bc:	e7fd      	b.n	800d1ba <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1be:	4b0a      	ldr	r3, [pc, #40]	@ (800d1e8 <vTaskPlaceOnEventListRestricted+0x58>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3318      	adds	r3, #24
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	68f8      	ldr	r0, [r7, #12]
 800d1c8:	f7fe f979 	bl	800b4be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d002      	beq.n	800d1d8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800d1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d1d8:	6879      	ldr	r1, [r7, #4]
 800d1da:	68b8      	ldr	r0, [r7, #8]
 800d1dc:	f000 fc8e 	bl	800dafc <prvAddCurrentTaskToDelayedList>
	}
 800d1e0:	bf00      	nop
 800d1e2:	3718      	adds	r7, #24
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	2000ad50 	.word	0x2000ad50

0800d1ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10d      	bne.n	800d21e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d206:	b672      	cpsid	i
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	b662      	cpsie	i
 800d216:	60fb      	str	r3, [r7, #12]
}
 800d218:	bf00      	nop
 800d21a:	bf00      	nop
 800d21c:	e7fd      	b.n	800d21a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	3318      	adds	r3, #24
 800d222:	4618      	mov	r0, r3
 800d224:	f7fe f9a8 	bl	800b578 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d228:	4b1d      	ldr	r3, [pc, #116]	@ (800d2a0 <xTaskRemoveFromEventList+0xb4>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d11d      	bne.n	800d26c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	3304      	adds	r3, #4
 800d234:	4618      	mov	r0, r3
 800d236:	f7fe f99f 	bl	800b578 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d23e:	4b19      	ldr	r3, [pc, #100]	@ (800d2a4 <xTaskRemoveFromEventList+0xb8>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	429a      	cmp	r2, r3
 800d244:	d903      	bls.n	800d24e <xTaskRemoveFromEventList+0x62>
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d24a:	4a16      	ldr	r2, [pc, #88]	@ (800d2a4 <xTaskRemoveFromEventList+0xb8>)
 800d24c:	6013      	str	r3, [r2, #0]
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d252:	4613      	mov	r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	4413      	add	r3, r2
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4a13      	ldr	r2, [pc, #76]	@ (800d2a8 <xTaskRemoveFromEventList+0xbc>)
 800d25c:	441a      	add	r2, r3
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	3304      	adds	r3, #4
 800d262:	4619      	mov	r1, r3
 800d264:	4610      	mov	r0, r2
 800d266:	f7fe f92a 	bl	800b4be <vListInsertEnd>
 800d26a:	e005      	b.n	800d278 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	3318      	adds	r3, #24
 800d270:	4619      	mov	r1, r3
 800d272:	480e      	ldr	r0, [pc, #56]	@ (800d2ac <xTaskRemoveFromEventList+0xc0>)
 800d274:	f7fe f923 	bl	800b4be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d27c:	4b0c      	ldr	r3, [pc, #48]	@ (800d2b0 <xTaskRemoveFromEventList+0xc4>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d282:	429a      	cmp	r2, r3
 800d284:	d905      	bls.n	800d292 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d286:	2301      	movs	r3, #1
 800d288:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d28a:	4b0a      	ldr	r3, [pc, #40]	@ (800d2b4 <xTaskRemoveFromEventList+0xc8>)
 800d28c:	2201      	movs	r2, #1
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	e001      	b.n	800d296 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800d292:	2300      	movs	r3, #0
 800d294:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d296:	697b      	ldr	r3, [r7, #20]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3718      	adds	r7, #24
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	2000b24c 	.word	0x2000b24c
 800d2a4:	2000b22c 	.word	0x2000b22c
 800d2a8:	2000ad54 	.word	0x2000ad54
 800d2ac:	2000b1e4 	.word	0x2000b1e4
 800d2b0:	2000ad50 	.word	0x2000ad50
 800d2b4:	2000b238 	.word	0x2000b238

0800d2b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d2c0:	4b06      	ldr	r3, [pc, #24]	@ (800d2dc <vTaskInternalSetTimeOutState+0x24>)
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d2c8:	4b05      	ldr	r3, [pc, #20]	@ (800d2e0 <vTaskInternalSetTimeOutState+0x28>)
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	605a      	str	r2, [r3, #4]
}
 800d2d0:	bf00      	nop
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	2000b23c 	.word	0x2000b23c
 800d2e0:	2000b228 	.word	0x2000b228

0800d2e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b088      	sub	sp, #32
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10d      	bne.n	800d310 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800d2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f8:	b672      	cpsid	i
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	b662      	cpsie	i
 800d308:	613b      	str	r3, [r7, #16]
}
 800d30a:	bf00      	nop
 800d30c:	bf00      	nop
 800d30e:	e7fd      	b.n	800d30c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d10d      	bne.n	800d332 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800d316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31a:	b672      	cpsid	i
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	b662      	cpsie	i
 800d32a:	60fb      	str	r3, [r7, #12]
}
 800d32c:	bf00      	nop
 800d32e:	bf00      	nop
 800d330:	e7fd      	b.n	800d32e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800d332:	f001 f8ab 	bl	800e48c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d336:	4b1d      	ldr	r3, [pc, #116]	@ (800d3ac <xTaskCheckForTimeOut+0xc8>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	69ba      	ldr	r2, [r7, #24]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d34e:	d102      	bne.n	800d356 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d350:	2300      	movs	r3, #0
 800d352:	61fb      	str	r3, [r7, #28]
 800d354:	e023      	b.n	800d39e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	4b15      	ldr	r3, [pc, #84]	@ (800d3b0 <xTaskCheckForTimeOut+0xcc>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d007      	beq.n	800d372 <xTaskCheckForTimeOut+0x8e>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	69ba      	ldr	r2, [r7, #24]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d302      	bcc.n	800d372 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d36c:	2301      	movs	r3, #1
 800d36e:	61fb      	str	r3, [r7, #28]
 800d370:	e015      	b.n	800d39e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d20b      	bcs.n	800d394 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	1ad2      	subs	r2, r2, r3
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f7ff ff95 	bl	800d2b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d38e:	2300      	movs	r3, #0
 800d390:	61fb      	str	r3, [r7, #28]
 800d392:	e004      	b.n	800d39e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	2200      	movs	r2, #0
 800d398:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d39a:	2301      	movs	r3, #1
 800d39c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d39e:	f001 f8ab 	bl	800e4f8 <vPortExitCritical>

	return xReturn;
 800d3a2:	69fb      	ldr	r3, [r7, #28]
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3720      	adds	r7, #32
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	2000b228 	.word	0x2000b228
 800d3b0:	2000b23c 	.word	0x2000b23c

0800d3b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3b8:	4b03      	ldr	r3, [pc, #12]	@ (800d3c8 <vTaskMissedYield+0x14>)
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	601a      	str	r2, [r3, #0]
}
 800d3be:	bf00      	nop
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	2000b238 	.word	0x2000b238

0800d3cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d3d4:	f000 f852 	bl	800d47c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3d8:	4b06      	ldr	r3, [pc, #24]	@ (800d3f4 <prvIdleTask+0x28>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d9f9      	bls.n	800d3d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d3e0:	4b05      	ldr	r3, [pc, #20]	@ (800d3f8 <prvIdleTask+0x2c>)
 800d3e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3e6:	601a      	str	r2, [r3, #0]
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d3f0:	e7f0      	b.n	800d3d4 <prvIdleTask+0x8>
 800d3f2:	bf00      	nop
 800d3f4:	2000ad54 	.word	0x2000ad54
 800d3f8:	e000ed04 	.word	0xe000ed04

0800d3fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d402:	2300      	movs	r3, #0
 800d404:	607b      	str	r3, [r7, #4]
 800d406:	e00c      	b.n	800d422 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	4613      	mov	r3, r2
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	4413      	add	r3, r2
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	4a12      	ldr	r2, [pc, #72]	@ (800d45c <prvInitialiseTaskLists+0x60>)
 800d414:	4413      	add	r3, r2
 800d416:	4618      	mov	r0, r3
 800d418:	f7fe f824 	bl	800b464 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	3301      	adds	r3, #1
 800d420:	607b      	str	r3, [r7, #4]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b37      	cmp	r3, #55	@ 0x37
 800d426:	d9ef      	bls.n	800d408 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d428:	480d      	ldr	r0, [pc, #52]	@ (800d460 <prvInitialiseTaskLists+0x64>)
 800d42a:	f7fe f81b 	bl	800b464 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d42e:	480d      	ldr	r0, [pc, #52]	@ (800d464 <prvInitialiseTaskLists+0x68>)
 800d430:	f7fe f818 	bl	800b464 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d434:	480c      	ldr	r0, [pc, #48]	@ (800d468 <prvInitialiseTaskLists+0x6c>)
 800d436:	f7fe f815 	bl	800b464 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d43a:	480c      	ldr	r0, [pc, #48]	@ (800d46c <prvInitialiseTaskLists+0x70>)
 800d43c:	f7fe f812 	bl	800b464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d440:	480b      	ldr	r0, [pc, #44]	@ (800d470 <prvInitialiseTaskLists+0x74>)
 800d442:	f7fe f80f 	bl	800b464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d446:	4b0b      	ldr	r3, [pc, #44]	@ (800d474 <prvInitialiseTaskLists+0x78>)
 800d448:	4a05      	ldr	r2, [pc, #20]	@ (800d460 <prvInitialiseTaskLists+0x64>)
 800d44a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d44c:	4b0a      	ldr	r3, [pc, #40]	@ (800d478 <prvInitialiseTaskLists+0x7c>)
 800d44e:	4a05      	ldr	r2, [pc, #20]	@ (800d464 <prvInitialiseTaskLists+0x68>)
 800d450:	601a      	str	r2, [r3, #0]
}
 800d452:	bf00      	nop
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	2000ad54 	.word	0x2000ad54
 800d460:	2000b1b4 	.word	0x2000b1b4
 800d464:	2000b1c8 	.word	0x2000b1c8
 800d468:	2000b1e4 	.word	0x2000b1e4
 800d46c:	2000b1f8 	.word	0x2000b1f8
 800d470:	2000b210 	.word	0x2000b210
 800d474:	2000b1dc 	.word	0x2000b1dc
 800d478:	2000b1e0 	.word	0x2000b1e0

0800d47c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d482:	e019      	b.n	800d4b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d484:	f001 f802 	bl	800e48c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d488:	4b10      	ldr	r3, [pc, #64]	@ (800d4cc <prvCheckTasksWaitingTermination+0x50>)
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	3304      	adds	r3, #4
 800d494:	4618      	mov	r0, r3
 800d496:	f7fe f86f 	bl	800b578 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d49a:	4b0d      	ldr	r3, [pc, #52]	@ (800d4d0 <prvCheckTasksWaitingTermination+0x54>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	4a0b      	ldr	r2, [pc, #44]	@ (800d4d0 <prvCheckTasksWaitingTermination+0x54>)
 800d4a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4a4:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d4 <prvCheckTasksWaitingTermination+0x58>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	4a0a      	ldr	r2, [pc, #40]	@ (800d4d4 <prvCheckTasksWaitingTermination+0x58>)
 800d4ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4ae:	f001 f823 	bl	800e4f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f810 	bl	800d4d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4b8:	4b06      	ldr	r3, [pc, #24]	@ (800d4d4 <prvCheckTasksWaitingTermination+0x58>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d1e1      	bne.n	800d484 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d4c0:	bf00      	nop
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	2000b1f8 	.word	0x2000b1f8
 800d4d0:	2000b224 	.word	0x2000b224
 800d4d4:	2000b20c 	.word	0x2000b20c

0800d4d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	3354      	adds	r3, #84	@ 0x54
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f00c fe69 	bl	801a1bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d108      	bne.n	800d506 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f001 f9c3 	bl	800e884 <vPortFree>
				vPortFree( pxTCB );
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f001 f9c0 	bl	800e884 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d504:	e01b      	b.n	800d53e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d103      	bne.n	800d518 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f001 f9b7 	bl	800e884 <vPortFree>
	}
 800d516:	e012      	b.n	800d53e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d00d      	beq.n	800d53e <prvDeleteTCB+0x66>
	__asm volatile
 800d522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d526:	b672      	cpsid	i
 800d528:	f383 8811 	msr	BASEPRI, r3
 800d52c:	f3bf 8f6f 	isb	sy
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	b662      	cpsie	i
 800d536:	60fb      	str	r3, [r7, #12]
}
 800d538:	bf00      	nop
 800d53a:	bf00      	nop
 800d53c:	e7fd      	b.n	800d53a <prvDeleteTCB+0x62>
	}
 800d53e:	bf00      	nop
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
	...

0800d548 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d548:	b480      	push	{r7}
 800d54a:	b083      	sub	sp, #12
 800d54c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d54e:	4b0c      	ldr	r3, [pc, #48]	@ (800d580 <prvResetNextTaskUnblockTime+0x38>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d104      	bne.n	800d562 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d558:	4b0a      	ldr	r3, [pc, #40]	@ (800d584 <prvResetNextTaskUnblockTime+0x3c>)
 800d55a:	f04f 32ff 	mov.w	r2, #4294967295
 800d55e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d560:	e008      	b.n	800d574 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d562:	4b07      	ldr	r3, [pc, #28]	@ (800d580 <prvResetNextTaskUnblockTime+0x38>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	4a04      	ldr	r2, [pc, #16]	@ (800d584 <prvResetNextTaskUnblockTime+0x3c>)
 800d572:	6013      	str	r3, [r2, #0]
}
 800d574:	bf00      	nop
 800d576:	370c      	adds	r7, #12
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr
 800d580:	2000b1dc 	.word	0x2000b1dc
 800d584:	2000b244 	.word	0x2000b244

0800d588 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d58e:	4b05      	ldr	r3, [pc, #20]	@ (800d5a4 <xTaskGetCurrentTaskHandle+0x1c>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d594:	687b      	ldr	r3, [r7, #4]
	}
 800d596:	4618      	mov	r0, r3
 800d598:	370c      	adds	r7, #12
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	2000ad50 	.word	0x2000ad50

0800d5a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d5ae:	4b0b      	ldr	r3, [pc, #44]	@ (800d5dc <xTaskGetSchedulerState+0x34>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d102      	bne.n	800d5bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	607b      	str	r3, [r7, #4]
 800d5ba:	e008      	b.n	800d5ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5bc:	4b08      	ldr	r3, [pc, #32]	@ (800d5e0 <xTaskGetSchedulerState+0x38>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d102      	bne.n	800d5ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	607b      	str	r3, [r7, #4]
 800d5c8:	e001      	b.n	800d5ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d5ce:	687b      	ldr	r3, [r7, #4]
	}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr
 800d5dc:	2000b230 	.word	0x2000b230
 800d5e0:	2000b24c 	.word	0x2000b24c

0800d5e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d051      	beq.n	800d69e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5fe:	4b2a      	ldr	r3, [pc, #168]	@ (800d6a8 <xTaskPriorityInherit+0xc4>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d604:	429a      	cmp	r2, r3
 800d606:	d241      	bcs.n	800d68c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	db06      	blt.n	800d61e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d610:	4b25      	ldr	r3, [pc, #148]	@ (800d6a8 <xTaskPriorityInherit+0xc4>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d616:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	6959      	ldr	r1, [r3, #20]
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d626:	4613      	mov	r3, r2
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	4413      	add	r3, r2
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4a1f      	ldr	r2, [pc, #124]	@ (800d6ac <xTaskPriorityInherit+0xc8>)
 800d630:	4413      	add	r3, r2
 800d632:	4299      	cmp	r1, r3
 800d634:	d122      	bne.n	800d67c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	3304      	adds	r3, #4
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fd ff9c 	bl	800b578 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d640:	4b19      	ldr	r3, [pc, #100]	@ (800d6a8 <xTaskPriorityInherit+0xc4>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d64e:	4b18      	ldr	r3, [pc, #96]	@ (800d6b0 <xTaskPriorityInherit+0xcc>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	429a      	cmp	r2, r3
 800d654:	d903      	bls.n	800d65e <xTaskPriorityInherit+0x7a>
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d65a:	4a15      	ldr	r2, [pc, #84]	@ (800d6b0 <xTaskPriorityInherit+0xcc>)
 800d65c:	6013      	str	r3, [r2, #0]
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d662:	4613      	mov	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4413      	add	r3, r2
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	4a10      	ldr	r2, [pc, #64]	@ (800d6ac <xTaskPriorityInherit+0xc8>)
 800d66c:	441a      	add	r2, r3
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	3304      	adds	r3, #4
 800d672:	4619      	mov	r1, r3
 800d674:	4610      	mov	r0, r2
 800d676:	f7fd ff22 	bl	800b4be <vListInsertEnd>
 800d67a:	e004      	b.n	800d686 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d67c:	4b0a      	ldr	r3, [pc, #40]	@ (800d6a8 <xTaskPriorityInherit+0xc4>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d686:	2301      	movs	r3, #1
 800d688:	60fb      	str	r3, [r7, #12]
 800d68a:	e008      	b.n	800d69e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d690:	4b05      	ldr	r3, [pc, #20]	@ (800d6a8 <xTaskPriorityInherit+0xc4>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d696:	429a      	cmp	r2, r3
 800d698:	d201      	bcs.n	800d69e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d69a:	2301      	movs	r3, #1
 800d69c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d69e:	68fb      	ldr	r3, [r7, #12]
	}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	2000ad50 	.word	0x2000ad50
 800d6ac:	2000ad54 	.word	0x2000ad54
 800d6b0:	2000b22c 	.word	0x2000b22c

0800d6b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b086      	sub	sp, #24
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d05c      	beq.n	800d784 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d6ca:	4b31      	ldr	r3, [pc, #196]	@ (800d790 <xTaskPriorityDisinherit+0xdc>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	693a      	ldr	r2, [r7, #16]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d00d      	beq.n	800d6f0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d8:	b672      	cpsid	i
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	b662      	cpsie	i
 800d6e8:	60fb      	str	r3, [r7, #12]
}
 800d6ea:	bf00      	nop
 800d6ec:	bf00      	nop
 800d6ee:	e7fd      	b.n	800d6ec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d10d      	bne.n	800d714 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800d6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6fc:	b672      	cpsid	i
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	b662      	cpsie	i
 800d70c:	60bb      	str	r3, [r7, #8]
}
 800d70e:	bf00      	nop
 800d710:	bf00      	nop
 800d712:	e7fd      	b.n	800d710 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d718:	1e5a      	subs	r2, r3, #1
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d726:	429a      	cmp	r2, r3
 800d728:	d02c      	beq.n	800d784 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d128      	bne.n	800d784 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	3304      	adds	r3, #4
 800d736:	4618      	mov	r0, r3
 800d738:	f7fd ff1e 	bl	800b578 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d748:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d754:	4b0f      	ldr	r3, [pc, #60]	@ (800d794 <xTaskPriorityDisinherit+0xe0>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d903      	bls.n	800d764 <xTaskPriorityDisinherit+0xb0>
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d760:	4a0c      	ldr	r2, [pc, #48]	@ (800d794 <xTaskPriorityDisinherit+0xe0>)
 800d762:	6013      	str	r3, [r2, #0]
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d768:	4613      	mov	r3, r2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	4413      	add	r3, r2
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	4a09      	ldr	r2, [pc, #36]	@ (800d798 <xTaskPriorityDisinherit+0xe4>)
 800d772:	441a      	add	r2, r3
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	3304      	adds	r3, #4
 800d778:	4619      	mov	r1, r3
 800d77a:	4610      	mov	r0, r2
 800d77c:	f7fd fe9f 	bl	800b4be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d780:	2301      	movs	r3, #1
 800d782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d784:	697b      	ldr	r3, [r7, #20]
	}
 800d786:	4618      	mov	r0, r3
 800d788:	3718      	adds	r7, #24
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	2000ad50 	.word	0x2000ad50
 800d794:	2000b22c 	.word	0x2000b22c
 800d798:	2000ad54 	.word	0x2000ad54

0800d79c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b088      	sub	sp, #32
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d070      	beq.n	800d896 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d10d      	bne.n	800d7d8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800d7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c0:	b672      	cpsid	i
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	b662      	cpsie	i
 800d7d0:	60fb      	str	r3, [r7, #12]
}
 800d7d2:	bf00      	nop
 800d7d4:	bf00      	nop
 800d7d6:	e7fd      	b.n	800d7d4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d902      	bls.n	800d7e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	61fb      	str	r3, [r7, #28]
 800d7e6:	e002      	b.n	800d7ee <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f2:	69fa      	ldr	r2, [r7, #28]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d04e      	beq.n	800d896 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7fc:	697a      	ldr	r2, [r7, #20]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d149      	bne.n	800d896 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d802:	4b27      	ldr	r3, [pc, #156]	@ (800d8a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	69ba      	ldr	r2, [r7, #24]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d10d      	bne.n	800d828 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800d80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d810:	b672      	cpsid	i
 800d812:	f383 8811 	msr	BASEPRI, r3
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	b662      	cpsie	i
 800d820:	60bb      	str	r3, [r7, #8]
}
 800d822:	bf00      	nop
 800d824:	bf00      	nop
 800d826:	e7fd      	b.n	800d824 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d82c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	69fa      	ldr	r2, [r7, #28]
 800d832:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	699b      	ldr	r3, [r3, #24]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	db04      	blt.n	800d846 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	6959      	ldr	r1, [r3, #20]
 800d84a:	693a      	ldr	r2, [r7, #16]
 800d84c:	4613      	mov	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4413      	add	r3, r2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	4a13      	ldr	r2, [pc, #76]	@ (800d8a4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d856:	4413      	add	r3, r2
 800d858:	4299      	cmp	r1, r3
 800d85a:	d11c      	bne.n	800d896 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	3304      	adds	r3, #4
 800d860:	4618      	mov	r0, r3
 800d862:	f7fd fe89 	bl	800b578 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d86a:	4b0f      	ldr	r3, [pc, #60]	@ (800d8a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d903      	bls.n	800d87a <vTaskPriorityDisinheritAfterTimeout+0xde>
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d876:	4a0c      	ldr	r2, [pc, #48]	@ (800d8a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800d878:	6013      	str	r3, [r2, #0]
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d87e:	4613      	mov	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	4413      	add	r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4a07      	ldr	r2, [pc, #28]	@ (800d8a4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d888:	441a      	add	r2, r3
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	3304      	adds	r3, #4
 800d88e:	4619      	mov	r1, r3
 800d890:	4610      	mov	r0, r2
 800d892:	f7fd fe14 	bl	800b4be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d896:	bf00      	nop
 800d898:	3720      	adds	r7, #32
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	2000ad50 	.word	0x2000ad50
 800d8a4:	2000ad54 	.word	0x2000ad54
 800d8a8:	2000b22c 	.word	0x2000b22c

0800d8ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d8ac:	b480      	push	{r7}
 800d8ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d8b0:	4b07      	ldr	r3, [pc, #28]	@ (800d8d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d004      	beq.n	800d8c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d8b8:	4b05      	ldr	r3, [pc, #20]	@ (800d8d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d8be:	3201      	adds	r2, #1
 800d8c0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800d8c2:	4b03      	ldr	r3, [pc, #12]	@ (800d8d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
	}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr
 800d8d0:	2000ad50 	.word	0x2000ad50

0800d8d4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d8de:	f000 fdd5 	bl	800e48c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d8e2:	4b20      	ldr	r3, [pc, #128]	@ (800d964 <ulTaskNotifyTake+0x90>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d113      	bne.n	800d916 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d8ee:	4b1d      	ldr	r3, [pc, #116]	@ (800d964 <ulTaskNotifyTake+0x90>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00b      	beq.n	800d916 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8fe:	2101      	movs	r1, #1
 800d900:	6838      	ldr	r0, [r7, #0]
 800d902:	f000 f8fb 	bl	800dafc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d906:	4b18      	ldr	r3, [pc, #96]	@ (800d968 <ulTaskNotifyTake+0x94>)
 800d908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d916:	f000 fdef 	bl	800e4f8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d91a:	f000 fdb7 	bl	800e48c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d91e:	4b11      	ldr	r3, [pc, #68]	@ (800d964 <ulTaskNotifyTake+0x90>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d926:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00e      	beq.n	800d94c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d005      	beq.n	800d940 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d934:	4b0b      	ldr	r3, [pc, #44]	@ (800d964 <ulTaskNotifyTake+0x90>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2200      	movs	r2, #0
 800d93a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800d93e:	e005      	b.n	800d94c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d940:	4b08      	ldr	r3, [pc, #32]	@ (800d964 <ulTaskNotifyTake+0x90>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	3a01      	subs	r2, #1
 800d948:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d94c:	4b05      	ldr	r3, [pc, #20]	@ (800d964 <ulTaskNotifyTake+0x90>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2200      	movs	r2, #0
 800d952:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800d956:	f000 fdcf 	bl	800e4f8 <vPortExitCritical>

		return ulReturn;
 800d95a:	68fb      	ldr	r3, [r7, #12]
	}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	2000ad50 	.word	0x2000ad50
 800d968:	e000ed04 	.word	0xe000ed04

0800d96c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b08a      	sub	sp, #40	@ 0x28
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	603b      	str	r3, [r7, #0]
 800d978:	4613      	mov	r3, r2
 800d97a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d97c:	2301      	movs	r3, #1
 800d97e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d10d      	bne.n	800d9a2 <xTaskGenericNotify+0x36>
	__asm volatile
 800d986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d98a:	b672      	cpsid	i
 800d98c:	f383 8811 	msr	BASEPRI, r3
 800d990:	f3bf 8f6f 	isb	sy
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	b662      	cpsie	i
 800d99a:	61bb      	str	r3, [r7, #24]
}
 800d99c:	bf00      	nop
 800d99e:	bf00      	nop
 800d9a0:	e7fd      	b.n	800d99e <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d9a6:	f000 fd71 	bl	800e48c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d004      	beq.n	800d9ba <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d9c0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	2202      	movs	r2, #2
 800d9c6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800d9ca:	79fb      	ldrb	r3, [r7, #7]
 800d9cc:	2b04      	cmp	r3, #4
 800d9ce:	d82e      	bhi.n	800da2e <xTaskGenericNotify+0xc2>
 800d9d0:	a201      	add	r2, pc, #4	@ (adr r2, 800d9d8 <xTaskGenericNotify+0x6c>)
 800d9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d6:	bf00      	nop
 800d9d8:	0800da57 	.word	0x0800da57
 800d9dc:	0800d9ed 	.word	0x0800d9ed
 800d9e0:	0800d9ff 	.word	0x0800d9ff
 800d9e4:	0800da0f 	.word	0x0800da0f
 800d9e8:	0800da19 	.word	0x0800da19
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	431a      	orrs	r2, r3
 800d9f6:	6a3b      	ldr	r3, [r7, #32]
 800d9f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d9fc:	e02e      	b.n	800da5c <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d9fe:	6a3b      	ldr	r3, [r7, #32]
 800da00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800da04:	1c5a      	adds	r2, r3, #1
 800da06:	6a3b      	ldr	r3, [r7, #32]
 800da08:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800da0c:	e026      	b.n	800da5c <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800da0e:	6a3b      	ldr	r3, [r7, #32]
 800da10:	68ba      	ldr	r2, [r7, #8]
 800da12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800da16:	e021      	b.n	800da5c <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800da18:	7ffb      	ldrb	r3, [r7, #31]
 800da1a:	2b02      	cmp	r3, #2
 800da1c:	d004      	beq.n	800da28 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800da1e:	6a3b      	ldr	r3, [r7, #32]
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800da26:	e019      	b.n	800da5c <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 800da28:	2300      	movs	r3, #0
 800da2a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800da2c:	e016      	b.n	800da5c <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800da34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da38:	d00f      	beq.n	800da5a <xTaskGenericNotify+0xee>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da3e:	b672      	cpsid	i
 800da40:	f383 8811 	msr	BASEPRI, r3
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	b662      	cpsie	i
 800da4e:	617b      	str	r3, [r7, #20]
}
 800da50:	bf00      	nop
 800da52:	bf00      	nop
 800da54:	e7fd      	b.n	800da52 <xTaskGenericNotify+0xe6>
					break;
 800da56:	bf00      	nop
 800da58:	e000      	b.n	800da5c <xTaskGenericNotify+0xf0>

					break;
 800da5a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800da5c:	7ffb      	ldrb	r3, [r7, #31]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d13d      	bne.n	800dade <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da62:	6a3b      	ldr	r3, [r7, #32]
 800da64:	3304      	adds	r3, #4
 800da66:	4618      	mov	r0, r3
 800da68:	f7fd fd86 	bl	800b578 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800da6c:	6a3b      	ldr	r3, [r7, #32]
 800da6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da70:	4b1e      	ldr	r3, [pc, #120]	@ (800daec <xTaskGenericNotify+0x180>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	429a      	cmp	r2, r3
 800da76:	d903      	bls.n	800da80 <xTaskGenericNotify+0x114>
 800da78:	6a3b      	ldr	r3, [r7, #32]
 800da7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da7c:	4a1b      	ldr	r2, [pc, #108]	@ (800daec <xTaskGenericNotify+0x180>)
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da84:	4613      	mov	r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	4a18      	ldr	r2, [pc, #96]	@ (800daf0 <xTaskGenericNotify+0x184>)
 800da8e:	441a      	add	r2, r3
 800da90:	6a3b      	ldr	r3, [r7, #32]
 800da92:	3304      	adds	r3, #4
 800da94:	4619      	mov	r1, r3
 800da96:	4610      	mov	r0, r2
 800da98:	f7fd fd11 	bl	800b4be <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d00d      	beq.n	800dac0 <xTaskGenericNotify+0x154>
	__asm volatile
 800daa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa8:	b672      	cpsid	i
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	b662      	cpsie	i
 800dab8:	613b      	str	r3, [r7, #16]
}
 800daba:	bf00      	nop
 800dabc:	bf00      	nop
 800dabe:	e7fd      	b.n	800dabc <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dac0:	6a3b      	ldr	r3, [r7, #32]
 800dac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dac4:	4b0b      	ldr	r3, [pc, #44]	@ (800daf4 <xTaskGenericNotify+0x188>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daca:	429a      	cmp	r2, r3
 800dacc:	d907      	bls.n	800dade <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800dace:	4b0a      	ldr	r3, [pc, #40]	@ (800daf8 <xTaskGenericNotify+0x18c>)
 800dad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dad4:	601a      	str	r2, [r3, #0]
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800dade:	f000 fd0b 	bl	800e4f8 <vPortExitCritical>

		return xReturn;
 800dae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3728      	adds	r7, #40	@ 0x28
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	2000b22c 	.word	0x2000b22c
 800daf0:	2000ad54 	.word	0x2000ad54
 800daf4:	2000ad50 	.word	0x2000ad50
 800daf8:	e000ed04 	.word	0xe000ed04

0800dafc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db06:	4b21      	ldr	r3, [pc, #132]	@ (800db8c <prvAddCurrentTaskToDelayedList+0x90>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db0c:	4b20      	ldr	r3, [pc, #128]	@ (800db90 <prvAddCurrentTaskToDelayedList+0x94>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3304      	adds	r3, #4
 800db12:	4618      	mov	r0, r3
 800db14:	f7fd fd30 	bl	800b578 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1e:	d10a      	bne.n	800db36 <prvAddCurrentTaskToDelayedList+0x3a>
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d007      	beq.n	800db36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db26:	4b1a      	ldr	r3, [pc, #104]	@ (800db90 <prvAddCurrentTaskToDelayedList+0x94>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	3304      	adds	r3, #4
 800db2c:	4619      	mov	r1, r3
 800db2e:	4819      	ldr	r0, [pc, #100]	@ (800db94 <prvAddCurrentTaskToDelayedList+0x98>)
 800db30:	f7fd fcc5 	bl	800b4be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db34:	e026      	b.n	800db84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db36:	68fa      	ldr	r2, [r7, #12]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4413      	add	r3, r2
 800db3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db3e:	4b14      	ldr	r3, [pc, #80]	@ (800db90 <prvAddCurrentTaskToDelayedList+0x94>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	68ba      	ldr	r2, [r7, #8]
 800db44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d209      	bcs.n	800db62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db4e:	4b12      	ldr	r3, [pc, #72]	@ (800db98 <prvAddCurrentTaskToDelayedList+0x9c>)
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	4b0f      	ldr	r3, [pc, #60]	@ (800db90 <prvAddCurrentTaskToDelayedList+0x94>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	3304      	adds	r3, #4
 800db58:	4619      	mov	r1, r3
 800db5a:	4610      	mov	r0, r2
 800db5c:	f7fd fcd3 	bl	800b506 <vListInsert>
}
 800db60:	e010      	b.n	800db84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db62:	4b0e      	ldr	r3, [pc, #56]	@ (800db9c <prvAddCurrentTaskToDelayedList+0xa0>)
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	4b0a      	ldr	r3, [pc, #40]	@ (800db90 <prvAddCurrentTaskToDelayedList+0x94>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	3304      	adds	r3, #4
 800db6c:	4619      	mov	r1, r3
 800db6e:	4610      	mov	r0, r2
 800db70:	f7fd fcc9 	bl	800b506 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db74:	4b0a      	ldr	r3, [pc, #40]	@ (800dba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d202      	bcs.n	800db84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db7e:	4a08      	ldr	r2, [pc, #32]	@ (800dba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	6013      	str	r3, [r2, #0]
}
 800db84:	bf00      	nop
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	2000b228 	.word	0x2000b228
 800db90:	2000ad50 	.word	0x2000ad50
 800db94:	2000b210 	.word	0x2000b210
 800db98:	2000b1e0 	.word	0x2000b1e0
 800db9c:	2000b1dc 	.word	0x2000b1dc
 800dba0:	2000b244 	.word	0x2000b244

0800dba4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b08a      	sub	sp, #40	@ 0x28
 800dba8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dbae:	f000 fb21 	bl	800e1f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dbb2:	4b1e      	ldr	r3, [pc, #120]	@ (800dc2c <xTimerCreateTimerTask+0x88>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d021      	beq.n	800dbfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dbc2:	1d3a      	adds	r2, r7, #4
 800dbc4:	f107 0108 	add.w	r1, r7, #8
 800dbc8:	f107 030c 	add.w	r3, r7, #12
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7fd fc2f 	bl	800b430 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	9202      	str	r2, [sp, #8]
 800dbda:	9301      	str	r3, [sp, #4]
 800dbdc:	2302      	movs	r3, #2
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	460a      	mov	r2, r1
 800dbe4:	4912      	ldr	r1, [pc, #72]	@ (800dc30 <xTimerCreateTimerTask+0x8c>)
 800dbe6:	4813      	ldr	r0, [pc, #76]	@ (800dc34 <xTimerCreateTimerTask+0x90>)
 800dbe8:	f7fe fe20 	bl	800c82c <xTaskCreateStatic>
 800dbec:	4603      	mov	r3, r0
 800dbee:	4a12      	ldr	r2, [pc, #72]	@ (800dc38 <xTimerCreateTimerTask+0x94>)
 800dbf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dbf2:	4b11      	ldr	r3, [pc, #68]	@ (800dc38 <xTimerCreateTimerTask+0x94>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10d      	bne.n	800dc20 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800dc04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc08:	b672      	cpsid	i
 800dc0a:	f383 8811 	msr	BASEPRI, r3
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	f3bf 8f4f 	dsb	sy
 800dc16:	b662      	cpsie	i
 800dc18:	613b      	str	r3, [r7, #16]
}
 800dc1a:	bf00      	nop
 800dc1c:	bf00      	nop
 800dc1e:	e7fd      	b.n	800dc1c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800dc20:	697b      	ldr	r3, [r7, #20]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3718      	adds	r7, #24
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	2000b280 	.word	0x2000b280
 800dc30:	0801b14c 	.word	0x0801b14c
 800dc34:	0800dd7d 	.word	0x0800dd7d
 800dc38:	2000b284 	.word	0x2000b284

0800dc3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b08a      	sub	sp, #40	@ 0x28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
 800dc48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10d      	bne.n	800dc70 <xTimerGenericCommand+0x34>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc58:	b672      	cpsid	i
 800dc5a:	f383 8811 	msr	BASEPRI, r3
 800dc5e:	f3bf 8f6f 	isb	sy
 800dc62:	f3bf 8f4f 	dsb	sy
 800dc66:	b662      	cpsie	i
 800dc68:	623b      	str	r3, [r7, #32]
}
 800dc6a:	bf00      	nop
 800dc6c:	bf00      	nop
 800dc6e:	e7fd      	b.n	800dc6c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc70:	4b19      	ldr	r3, [pc, #100]	@ (800dcd8 <xTimerGenericCommand+0x9c>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d02a      	beq.n	800dcce <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	2b05      	cmp	r3, #5
 800dc88:	dc18      	bgt.n	800dcbc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc8a:	f7ff fc8d 	bl	800d5a8 <xTaskGetSchedulerState>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b02      	cmp	r3, #2
 800dc92:	d109      	bne.n	800dca8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc94:	4b10      	ldr	r3, [pc, #64]	@ (800dcd8 <xTimerGenericCommand+0x9c>)
 800dc96:	6818      	ldr	r0, [r3, #0]
 800dc98:	f107 0110 	add.w	r1, r7, #16
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dca0:	f7fd ff20 	bl	800bae4 <xQueueGenericSend>
 800dca4:	6278      	str	r0, [r7, #36]	@ 0x24
 800dca6:	e012      	b.n	800dcce <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dca8:	4b0b      	ldr	r3, [pc, #44]	@ (800dcd8 <xTimerGenericCommand+0x9c>)
 800dcaa:	6818      	ldr	r0, [r3, #0]
 800dcac:	f107 0110 	add.w	r1, r7, #16
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f7fd ff16 	bl	800bae4 <xQueueGenericSend>
 800dcb8:	6278      	str	r0, [r7, #36]	@ 0x24
 800dcba:	e008      	b.n	800dcce <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dcbc:	4b06      	ldr	r3, [pc, #24]	@ (800dcd8 <xTimerGenericCommand+0x9c>)
 800dcbe:	6818      	ldr	r0, [r3, #0]
 800dcc0:	f107 0110 	add.w	r1, r7, #16
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	683a      	ldr	r2, [r7, #0]
 800dcc8:	f7fe f816 	bl	800bcf8 <xQueueGenericSendFromISR>
 800dccc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dcce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3728      	adds	r7, #40	@ 0x28
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	2000b280 	.word	0x2000b280

0800dcdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b088      	sub	sp, #32
 800dce0:	af02      	add	r7, sp, #8
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dce6:	4b24      	ldr	r3, [pc, #144]	@ (800dd78 <prvProcessExpiredTimer+0x9c>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7fd fc3f 	bl	800b578 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd00:	f003 0304 	and.w	r3, r3, #4
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d025      	beq.n	800dd54 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	699a      	ldr	r2, [r3, #24]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	18d1      	adds	r1, r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	683a      	ldr	r2, [r7, #0]
 800dd14:	6978      	ldr	r0, [r7, #20]
 800dd16:	f000 f8d7 	bl	800dec8 <prvInsertTimerInActiveList>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d022      	beq.n	800dd66 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd20:	2300      	movs	r3, #0
 800dd22:	9300      	str	r3, [sp, #0]
 800dd24:	2300      	movs	r3, #0
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	2100      	movs	r1, #0
 800dd2a:	6978      	ldr	r0, [r7, #20]
 800dd2c:	f7ff ff86 	bl	800dc3c <xTimerGenericCommand>
 800dd30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d116      	bne.n	800dd66 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800dd38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd3c:	b672      	cpsid	i
 800dd3e:	f383 8811 	msr	BASEPRI, r3
 800dd42:	f3bf 8f6f 	isb	sy
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	b662      	cpsie	i
 800dd4c:	60fb      	str	r3, [r7, #12]
}
 800dd4e:	bf00      	nop
 800dd50:	bf00      	nop
 800dd52:	e7fd      	b.n	800dd50 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd5a:	f023 0301 	bic.w	r3, r3, #1
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	6978      	ldr	r0, [r7, #20]
 800dd6c:	4798      	blx	r3
}
 800dd6e:	bf00      	nop
 800dd70:	3718      	adds	r7, #24
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	2000b278 	.word	0x2000b278

0800dd7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd84:	f107 0308 	add.w	r3, r7, #8
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f000 f859 	bl	800de40 <prvGetNextExpireTime>
 800dd8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	4619      	mov	r1, r3
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f000 f805 	bl	800dda4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd9a:	f000 f8d7 	bl	800df4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd9e:	bf00      	nop
 800dda0:	e7f0      	b.n	800dd84 <prvTimerTask+0x8>
	...

0800dda4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ddae:	f7fe ffaf 	bl	800cd10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ddb2:	f107 0308 	add.w	r3, r7, #8
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f000 f866 	bl	800de88 <prvSampleTimeNow>
 800ddbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d130      	bne.n	800de26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10a      	bne.n	800dde0 <prvProcessTimerOrBlockTask+0x3c>
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d806      	bhi.n	800dde0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ddd2:	f7fe ffab 	bl	800cd2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ddd6:	68f9      	ldr	r1, [r7, #12]
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7ff ff7f 	bl	800dcdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ddde:	e024      	b.n	800de2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d008      	beq.n	800ddf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dde6:	4b13      	ldr	r3, [pc, #76]	@ (800de34 <prvProcessTimerOrBlockTask+0x90>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <prvProcessTimerOrBlockTask+0x50>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e000      	b.n	800ddf6 <prvProcessTimerOrBlockTask+0x52>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ddf8:	4b0f      	ldr	r3, [pc, #60]	@ (800de38 <prvProcessTimerOrBlockTask+0x94>)
 800ddfa:	6818      	ldr	r0, [r3, #0]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	4619      	mov	r1, r3
 800de06:	f7fe fcdd 	bl	800c7c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800de0a:	f7fe ff8f 	bl	800cd2c <xTaskResumeAll>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d10a      	bne.n	800de2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800de14:	4b09      	ldr	r3, [pc, #36]	@ (800de3c <prvProcessTimerOrBlockTask+0x98>)
 800de16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de1a:	601a      	str	r2, [r3, #0]
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	f3bf 8f6f 	isb	sy
}
 800de24:	e001      	b.n	800de2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800de26:	f7fe ff81 	bl	800cd2c <xTaskResumeAll>
}
 800de2a:	bf00      	nop
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	2000b27c 	.word	0x2000b27c
 800de38:	2000b280 	.word	0x2000b280
 800de3c:	e000ed04 	.word	0xe000ed04

0800de40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de48:	4b0e      	ldr	r3, [pc, #56]	@ (800de84 <prvGetNextExpireTime+0x44>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d101      	bne.n	800de56 <prvGetNextExpireTime+0x16>
 800de52:	2201      	movs	r2, #1
 800de54:	e000      	b.n	800de58 <prvGetNextExpireTime+0x18>
 800de56:	2200      	movs	r2, #0
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d105      	bne.n	800de70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de64:	4b07      	ldr	r3, [pc, #28]	@ (800de84 <prvGetNextExpireTime+0x44>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	60fb      	str	r3, [r7, #12]
 800de6e:	e001      	b.n	800de74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de70:	2300      	movs	r3, #0
 800de72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de74:	68fb      	ldr	r3, [r7, #12]
}
 800de76:	4618      	mov	r0, r3
 800de78:	3714      	adds	r7, #20
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop
 800de84:	2000b278 	.word	0x2000b278

0800de88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de90:	f7fe ffec 	bl	800ce6c <xTaskGetTickCount>
 800de94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de96:	4b0b      	ldr	r3, [pc, #44]	@ (800dec4 <prvSampleTimeNow+0x3c>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d205      	bcs.n	800deac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dea0:	f000 f940 	bl	800e124 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2201      	movs	r2, #1
 800dea8:	601a      	str	r2, [r3, #0]
 800deaa:	e002      	b.n	800deb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800deb2:	4a04      	ldr	r2, [pc, #16]	@ (800dec4 <prvSampleTimeNow+0x3c>)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800deb8:	68fb      	ldr	r3, [r7, #12]
}
 800deba:	4618      	mov	r0, r3
 800debc:	3710      	adds	r7, #16
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	2000b288 	.word	0x2000b288

0800dec8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af00      	add	r7, sp, #0
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	607a      	str	r2, [r7, #4]
 800ded4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	68ba      	ldr	r2, [r7, #8]
 800dede:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dee6:	68ba      	ldr	r2, [r7, #8]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	429a      	cmp	r2, r3
 800deec:	d812      	bhi.n	800df14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	1ad2      	subs	r2, r2, r3
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	699b      	ldr	r3, [r3, #24]
 800def8:	429a      	cmp	r2, r3
 800defa:	d302      	bcc.n	800df02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800defc:	2301      	movs	r3, #1
 800defe:	617b      	str	r3, [r7, #20]
 800df00:	e01b      	b.n	800df3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800df02:	4b10      	ldr	r3, [pc, #64]	@ (800df44 <prvInsertTimerInActiveList+0x7c>)
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	3304      	adds	r3, #4
 800df0a:	4619      	mov	r1, r3
 800df0c:	4610      	mov	r0, r2
 800df0e:	f7fd fafa 	bl	800b506 <vListInsert>
 800df12:	e012      	b.n	800df3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d206      	bcs.n	800df2a <prvInsertTimerInActiveList+0x62>
 800df1c:	68ba      	ldr	r2, [r7, #8]
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	429a      	cmp	r2, r3
 800df22:	d302      	bcc.n	800df2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800df24:	2301      	movs	r3, #1
 800df26:	617b      	str	r3, [r7, #20]
 800df28:	e007      	b.n	800df3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df2a:	4b07      	ldr	r3, [pc, #28]	@ (800df48 <prvInsertTimerInActiveList+0x80>)
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	3304      	adds	r3, #4
 800df32:	4619      	mov	r1, r3
 800df34:	4610      	mov	r0, r2
 800df36:	f7fd fae6 	bl	800b506 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800df3a:	697b      	ldr	r3, [r7, #20]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3718      	adds	r7, #24
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	2000b27c 	.word	0x2000b27c
 800df48:	2000b278 	.word	0x2000b278

0800df4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08e      	sub	sp, #56	@ 0x38
 800df50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df52:	e0d4      	b.n	800e0fe <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	da1b      	bge.n	800df92 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df5a:	1d3b      	adds	r3, r7, #4
 800df5c:	3304      	adds	r3, #4
 800df5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10d      	bne.n	800df82 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800df66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df6a:	b672      	cpsid	i
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	b662      	cpsie	i
 800df7a:	61fb      	str	r3, [r7, #28]
}
 800df7c:	bf00      	nop
 800df7e:	bf00      	nop
 800df80:	e7fd      	b.n	800df7e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df88:	6850      	ldr	r0, [r2, #4]
 800df8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df8c:	6892      	ldr	r2, [r2, #8]
 800df8e:	4611      	mov	r1, r2
 800df90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2b00      	cmp	r3, #0
 800df96:	f2c0 80b2 	blt.w	800e0fe <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa0:	695b      	ldr	r3, [r3, #20]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d004      	beq.n	800dfb0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fd fae4 	bl	800b578 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dfb0:	463b      	mov	r3, r7
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7ff ff68 	bl	800de88 <prvSampleTimeNow>
 800dfb8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b09      	cmp	r3, #9
 800dfbe:	f200 809b 	bhi.w	800e0f8 <prvProcessReceivedCommands+0x1ac>
 800dfc2:	a201      	add	r2, pc, #4	@ (adr r2, 800dfc8 <prvProcessReceivedCommands+0x7c>)
 800dfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc8:	0800dff1 	.word	0x0800dff1
 800dfcc:	0800dff1 	.word	0x0800dff1
 800dfd0:	0800dff1 	.word	0x0800dff1
 800dfd4:	0800e06b 	.word	0x0800e06b
 800dfd8:	0800e07f 	.word	0x0800e07f
 800dfdc:	0800e0cf 	.word	0x0800e0cf
 800dfe0:	0800dff1 	.word	0x0800dff1
 800dfe4:	0800dff1 	.word	0x0800dff1
 800dfe8:	0800e06b 	.word	0x0800e06b
 800dfec:	0800e07f 	.word	0x0800e07f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dff2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dff6:	f043 0301 	orr.w	r3, r3, #1
 800dffa:	b2da      	uxtb	r2, r3
 800dffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dffe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e002:	68ba      	ldr	r2, [r7, #8]
 800e004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e006:	699b      	ldr	r3, [r3, #24]
 800e008:	18d1      	adds	r1, r2, r3
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e00e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e010:	f7ff ff5a 	bl	800dec8 <prvInsertTimerInActiveList>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d070      	beq.n	800e0fc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e020:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e028:	f003 0304 	and.w	r3, r3, #4
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d065      	beq.n	800e0fc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e034:	699b      	ldr	r3, [r3, #24]
 800e036:	441a      	add	r2, r3
 800e038:	2300      	movs	r3, #0
 800e03a:	9300      	str	r3, [sp, #0]
 800e03c:	2300      	movs	r3, #0
 800e03e:	2100      	movs	r1, #0
 800e040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e042:	f7ff fdfb 	bl	800dc3c <xTimerGenericCommand>
 800e046:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d156      	bne.n	800e0fc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800e04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e052:	b672      	cpsid	i
 800e054:	f383 8811 	msr	BASEPRI, r3
 800e058:	f3bf 8f6f 	isb	sy
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	b662      	cpsie	i
 800e062:	61bb      	str	r3, [r7, #24]
}
 800e064:	bf00      	nop
 800e066:	bf00      	nop
 800e068:	e7fd      	b.n	800e066 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e06c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e070:	f023 0301 	bic.w	r3, r3, #1
 800e074:	b2da      	uxtb	r2, r3
 800e076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e078:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e07c:	e03f      	b.n	800e0fe <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e080:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e084:	f043 0301 	orr.w	r3, r3, #1
 800e088:	b2da      	uxtb	r2, r3
 800e08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e08c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e094:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e098:	699b      	ldr	r3, [r3, #24]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d10d      	bne.n	800e0ba <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800e09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a2:	b672      	cpsid	i
 800e0a4:	f383 8811 	msr	BASEPRI, r3
 800e0a8:	f3bf 8f6f 	isb	sy
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	b662      	cpsie	i
 800e0b2:	617b      	str	r3, [r7, #20]
}
 800e0b4:	bf00      	nop
 800e0b6:	bf00      	nop
 800e0b8:	e7fd      	b.n	800e0b6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0bc:	699a      	ldr	r2, [r3, #24]
 800e0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c0:	18d1      	adds	r1, r2, r3
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0c8:	f7ff fefe 	bl	800dec8 <prvInsertTimerInActiveList>
					break;
 800e0cc:	e017      	b.n	800e0fe <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0d4:	f003 0302 	and.w	r3, r3, #2
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d103      	bne.n	800e0e4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800e0dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0de:	f000 fbd1 	bl	800e884 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e0e2:	e00c      	b.n	800e0fe <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0ea:	f023 0301 	bic.w	r3, r3, #1
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e0f6:	e002      	b.n	800e0fe <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800e0f8:	bf00      	nop
 800e0fa:	e000      	b.n	800e0fe <prvProcessReceivedCommands+0x1b2>
					break;
 800e0fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0fe:	4b08      	ldr	r3, [pc, #32]	@ (800e120 <prvProcessReceivedCommands+0x1d4>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	1d39      	adds	r1, r7, #4
 800e104:	2200      	movs	r2, #0
 800e106:	4618      	mov	r0, r3
 800e108:	f7fd ff32 	bl	800bf70 <xQueueReceive>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f47f af20 	bne.w	800df54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e114:	bf00      	nop
 800e116:	bf00      	nop
 800e118:	3730      	adds	r7, #48	@ 0x30
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	2000b280 	.word	0x2000b280

0800e124 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b088      	sub	sp, #32
 800e128:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e12a:	e04b      	b.n	800e1c4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e12c:	4b2f      	ldr	r3, [pc, #188]	@ (800e1ec <prvSwitchTimerLists+0xc8>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	68db      	ldr	r3, [r3, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e136:	4b2d      	ldr	r3, [pc, #180]	@ (800e1ec <prvSwitchTimerLists+0xc8>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	3304      	adds	r3, #4
 800e144:	4618      	mov	r0, r3
 800e146:	f7fd fa17 	bl	800b578 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	6a1b      	ldr	r3, [r3, #32]
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e158:	f003 0304 	and.w	r3, r3, #4
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d031      	beq.n	800e1c4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	699b      	ldr	r3, [r3, #24]
 800e164:	693a      	ldr	r2, [r7, #16]
 800e166:	4413      	add	r3, r2
 800e168:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d90e      	bls.n	800e190 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	68ba      	ldr	r2, [r7, #8]
 800e176:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	68fa      	ldr	r2, [r7, #12]
 800e17c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e17e:	4b1b      	ldr	r3, [pc, #108]	@ (800e1ec <prvSwitchTimerLists+0xc8>)
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	3304      	adds	r3, #4
 800e186:	4619      	mov	r1, r3
 800e188:	4610      	mov	r0, r2
 800e18a:	f7fd f9bc 	bl	800b506 <vListInsert>
 800e18e:	e019      	b.n	800e1c4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e190:	2300      	movs	r3, #0
 800e192:	9300      	str	r3, [sp, #0]
 800e194:	2300      	movs	r3, #0
 800e196:	693a      	ldr	r2, [r7, #16]
 800e198:	2100      	movs	r1, #0
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f7ff fd4e 	bl	800dc3c <xTimerGenericCommand>
 800e1a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d10d      	bne.n	800e1c4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800e1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ac:	b672      	cpsid	i
 800e1ae:	f383 8811 	msr	BASEPRI, r3
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	f3bf 8f4f 	dsb	sy
 800e1ba:	b662      	cpsie	i
 800e1bc:	603b      	str	r3, [r7, #0]
}
 800e1be:	bf00      	nop
 800e1c0:	bf00      	nop
 800e1c2:	e7fd      	b.n	800e1c0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1c4:	4b09      	ldr	r3, [pc, #36]	@ (800e1ec <prvSwitchTimerLists+0xc8>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1ae      	bne.n	800e12c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e1ce:	4b07      	ldr	r3, [pc, #28]	@ (800e1ec <prvSwitchTimerLists+0xc8>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e1d4:	4b06      	ldr	r3, [pc, #24]	@ (800e1f0 <prvSwitchTimerLists+0xcc>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a04      	ldr	r2, [pc, #16]	@ (800e1ec <prvSwitchTimerLists+0xc8>)
 800e1da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e1dc:	4a04      	ldr	r2, [pc, #16]	@ (800e1f0 <prvSwitchTimerLists+0xcc>)
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	6013      	str	r3, [r2, #0]
}
 800e1e2:	bf00      	nop
 800e1e4:	3718      	adds	r7, #24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	2000b278 	.word	0x2000b278
 800e1f0:	2000b27c 	.word	0x2000b27c

0800e1f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e1fa:	f000 f947 	bl	800e48c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e1fe:	4b15      	ldr	r3, [pc, #84]	@ (800e254 <prvCheckForValidListAndQueue+0x60>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d120      	bne.n	800e248 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e206:	4814      	ldr	r0, [pc, #80]	@ (800e258 <prvCheckForValidListAndQueue+0x64>)
 800e208:	f7fd f92c 	bl	800b464 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e20c:	4813      	ldr	r0, [pc, #76]	@ (800e25c <prvCheckForValidListAndQueue+0x68>)
 800e20e:	f7fd f929 	bl	800b464 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e212:	4b13      	ldr	r3, [pc, #76]	@ (800e260 <prvCheckForValidListAndQueue+0x6c>)
 800e214:	4a10      	ldr	r2, [pc, #64]	@ (800e258 <prvCheckForValidListAndQueue+0x64>)
 800e216:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e218:	4b12      	ldr	r3, [pc, #72]	@ (800e264 <prvCheckForValidListAndQueue+0x70>)
 800e21a:	4a10      	ldr	r2, [pc, #64]	@ (800e25c <prvCheckForValidListAndQueue+0x68>)
 800e21c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e21e:	2300      	movs	r3, #0
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	4b11      	ldr	r3, [pc, #68]	@ (800e268 <prvCheckForValidListAndQueue+0x74>)
 800e224:	4a11      	ldr	r2, [pc, #68]	@ (800e26c <prvCheckForValidListAndQueue+0x78>)
 800e226:	2110      	movs	r1, #16
 800e228:	200a      	movs	r0, #10
 800e22a:	f7fd fa3b 	bl	800b6a4 <xQueueGenericCreateStatic>
 800e22e:	4603      	mov	r3, r0
 800e230:	4a08      	ldr	r2, [pc, #32]	@ (800e254 <prvCheckForValidListAndQueue+0x60>)
 800e232:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e234:	4b07      	ldr	r3, [pc, #28]	@ (800e254 <prvCheckForValidListAndQueue+0x60>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d005      	beq.n	800e248 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e23c:	4b05      	ldr	r3, [pc, #20]	@ (800e254 <prvCheckForValidListAndQueue+0x60>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	490b      	ldr	r1, [pc, #44]	@ (800e270 <prvCheckForValidListAndQueue+0x7c>)
 800e242:	4618      	mov	r0, r3
 800e244:	f7fe fa6a 	bl	800c71c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e248:	f000 f956 	bl	800e4f8 <vPortExitCritical>
}
 800e24c:	bf00      	nop
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	2000b280 	.word	0x2000b280
 800e258:	2000b250 	.word	0x2000b250
 800e25c:	2000b264 	.word	0x2000b264
 800e260:	2000b278 	.word	0x2000b278
 800e264:	2000b27c 	.word	0x2000b27c
 800e268:	2000b32c 	.word	0x2000b32c
 800e26c:	2000b28c 	.word	0x2000b28c
 800e270:	0801b154 	.word	0x0801b154

0800e274 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	3b04      	subs	r3, #4
 800e284:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e28c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	3b04      	subs	r3, #4
 800e292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	f023 0201 	bic.w	r2, r3, #1
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	3b04      	subs	r3, #4
 800e2a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e2a4:	4a0c      	ldr	r2, [pc, #48]	@ (800e2d8 <pxPortInitialiseStack+0x64>)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	3b14      	subs	r3, #20
 800e2ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	3b04      	subs	r3, #4
 800e2ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f06f 0202 	mvn.w	r2, #2
 800e2c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	3b20      	subs	r3, #32
 800e2c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3714      	adds	r7, #20
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	0800e2dd 	.word	0x0800e2dd

0800e2dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e2e6:	4b15      	ldr	r3, [pc, #84]	@ (800e33c <prvTaskExitError+0x60>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ee:	d00d      	beq.n	800e30c <prvTaskExitError+0x30>
	__asm volatile
 800e2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f4:	b672      	cpsid	i
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	b662      	cpsie	i
 800e304:	60fb      	str	r3, [r7, #12]
}
 800e306:	bf00      	nop
 800e308:	bf00      	nop
 800e30a:	e7fd      	b.n	800e308 <prvTaskExitError+0x2c>
	__asm volatile
 800e30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e310:	b672      	cpsid	i
 800e312:	f383 8811 	msr	BASEPRI, r3
 800e316:	f3bf 8f6f 	isb	sy
 800e31a:	f3bf 8f4f 	dsb	sy
 800e31e:	b662      	cpsie	i
 800e320:	60bb      	str	r3, [r7, #8]
}
 800e322:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e324:	bf00      	nop
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d0fc      	beq.n	800e326 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e32c:	bf00      	nop
 800e32e:	bf00      	nop
 800e330:	3714      	adds	r7, #20
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop
 800e33c:	20000020 	.word	0x20000020

0800e340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e340:	4b07      	ldr	r3, [pc, #28]	@ (800e360 <pxCurrentTCBConst2>)
 800e342:	6819      	ldr	r1, [r3, #0]
 800e344:	6808      	ldr	r0, [r1, #0]
 800e346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34a:	f380 8809 	msr	PSP, r0
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	f04f 0000 	mov.w	r0, #0
 800e356:	f380 8811 	msr	BASEPRI, r0
 800e35a:	4770      	bx	lr
 800e35c:	f3af 8000 	nop.w

0800e360 <pxCurrentTCBConst2>:
 800e360:	2000ad50 	.word	0x2000ad50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e364:	bf00      	nop
 800e366:	bf00      	nop

0800e368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e368:	4808      	ldr	r0, [pc, #32]	@ (800e38c <prvPortStartFirstTask+0x24>)
 800e36a:	6800      	ldr	r0, [r0, #0]
 800e36c:	6800      	ldr	r0, [r0, #0]
 800e36e:	f380 8808 	msr	MSP, r0
 800e372:	f04f 0000 	mov.w	r0, #0
 800e376:	f380 8814 	msr	CONTROL, r0
 800e37a:	b662      	cpsie	i
 800e37c:	b661      	cpsie	f
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	df00      	svc	0
 800e388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e38a:	bf00      	nop
 800e38c:	e000ed08 	.word	0xe000ed08

0800e390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e396:	4b37      	ldr	r3, [pc, #220]	@ (800e474 <xPortStartScheduler+0xe4>)
 800e398:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	22ff      	movs	r2, #255	@ 0xff
 800e3a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e3b0:	78fb      	ldrb	r3, [r7, #3]
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e3b8:	b2da      	uxtb	r2, r3
 800e3ba:	4b2f      	ldr	r3, [pc, #188]	@ (800e478 <xPortStartScheduler+0xe8>)
 800e3bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e3be:	4b2f      	ldr	r3, [pc, #188]	@ (800e47c <xPortStartScheduler+0xec>)
 800e3c0:	2207      	movs	r2, #7
 800e3c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3c4:	e009      	b.n	800e3da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e3c6:	4b2d      	ldr	r3, [pc, #180]	@ (800e47c <xPortStartScheduler+0xec>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	4a2b      	ldr	r2, [pc, #172]	@ (800e47c <xPortStartScheduler+0xec>)
 800e3ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e3d0:	78fb      	ldrb	r3, [r7, #3]
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	005b      	lsls	r3, r3, #1
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3da:	78fb      	ldrb	r3, [r7, #3]
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3e2:	2b80      	cmp	r3, #128	@ 0x80
 800e3e4:	d0ef      	beq.n	800e3c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e3e6:	4b25      	ldr	r3, [pc, #148]	@ (800e47c <xPortStartScheduler+0xec>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f1c3 0307 	rsb	r3, r3, #7
 800e3ee:	2b04      	cmp	r3, #4
 800e3f0:	d00d      	beq.n	800e40e <xPortStartScheduler+0x7e>
	__asm volatile
 800e3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f6:	b672      	cpsid	i
 800e3f8:	f383 8811 	msr	BASEPRI, r3
 800e3fc:	f3bf 8f6f 	isb	sy
 800e400:	f3bf 8f4f 	dsb	sy
 800e404:	b662      	cpsie	i
 800e406:	60bb      	str	r3, [r7, #8]
}
 800e408:	bf00      	nop
 800e40a:	bf00      	nop
 800e40c:	e7fd      	b.n	800e40a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e40e:	4b1b      	ldr	r3, [pc, #108]	@ (800e47c <xPortStartScheduler+0xec>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	021b      	lsls	r3, r3, #8
 800e414:	4a19      	ldr	r2, [pc, #100]	@ (800e47c <xPortStartScheduler+0xec>)
 800e416:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e418:	4b18      	ldr	r3, [pc, #96]	@ (800e47c <xPortStartScheduler+0xec>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e420:	4a16      	ldr	r2, [pc, #88]	@ (800e47c <xPortStartScheduler+0xec>)
 800e422:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	b2da      	uxtb	r2, r3
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e42c:	4b14      	ldr	r3, [pc, #80]	@ (800e480 <xPortStartScheduler+0xf0>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a13      	ldr	r2, [pc, #76]	@ (800e480 <xPortStartScheduler+0xf0>)
 800e432:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e438:	4b11      	ldr	r3, [pc, #68]	@ (800e480 <xPortStartScheduler+0xf0>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a10      	ldr	r2, [pc, #64]	@ (800e480 <xPortStartScheduler+0xf0>)
 800e43e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e444:	f000 f8dc 	bl	800e600 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e448:	4b0e      	ldr	r3, [pc, #56]	@ (800e484 <xPortStartScheduler+0xf4>)
 800e44a:	2200      	movs	r2, #0
 800e44c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e44e:	f000 f8fb 	bl	800e648 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e452:	4b0d      	ldr	r3, [pc, #52]	@ (800e488 <xPortStartScheduler+0xf8>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4a0c      	ldr	r2, [pc, #48]	@ (800e488 <xPortStartScheduler+0xf8>)
 800e458:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e45c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e45e:	f7ff ff83 	bl	800e368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e462:	f7fe fde1 	bl	800d028 <vTaskSwitchContext>
	prvTaskExitError();
 800e466:	f7ff ff39 	bl	800e2dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e46a:	2300      	movs	r3, #0
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	e000e400 	.word	0xe000e400
 800e478:	2000b37c 	.word	0x2000b37c
 800e47c:	2000b380 	.word	0x2000b380
 800e480:	e000ed20 	.word	0xe000ed20
 800e484:	20000020 	.word	0x20000020
 800e488:	e000ef34 	.word	0xe000ef34

0800e48c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e496:	b672      	cpsid	i
 800e498:	f383 8811 	msr	BASEPRI, r3
 800e49c:	f3bf 8f6f 	isb	sy
 800e4a0:	f3bf 8f4f 	dsb	sy
 800e4a4:	b662      	cpsie	i
 800e4a6:	607b      	str	r3, [r7, #4]
}
 800e4a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e4aa:	4b11      	ldr	r3, [pc, #68]	@ (800e4f0 <vPortEnterCritical+0x64>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	4a0f      	ldr	r2, [pc, #60]	@ (800e4f0 <vPortEnterCritical+0x64>)
 800e4b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e4b4:	4b0e      	ldr	r3, [pc, #56]	@ (800e4f0 <vPortEnterCritical+0x64>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d112      	bne.n	800e4e2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e4bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e4f4 <vPortEnterCritical+0x68>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d00d      	beq.n	800e4e2 <vPortEnterCritical+0x56>
	__asm volatile
 800e4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ca:	b672      	cpsid	i
 800e4cc:	f383 8811 	msr	BASEPRI, r3
 800e4d0:	f3bf 8f6f 	isb	sy
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	b662      	cpsie	i
 800e4da:	603b      	str	r3, [r7, #0]
}
 800e4dc:	bf00      	nop
 800e4de:	bf00      	nop
 800e4e0:	e7fd      	b.n	800e4de <vPortEnterCritical+0x52>
	}
}
 800e4e2:	bf00      	nop
 800e4e4:	370c      	adds	r7, #12
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop
 800e4f0:	20000020 	.word	0x20000020
 800e4f4:	e000ed04 	.word	0xe000ed04

0800e4f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e4fe:	4b13      	ldr	r3, [pc, #76]	@ (800e54c <vPortExitCritical+0x54>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d10d      	bne.n	800e522 <vPortExitCritical+0x2a>
	__asm volatile
 800e506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e50a:	b672      	cpsid	i
 800e50c:	f383 8811 	msr	BASEPRI, r3
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	b662      	cpsie	i
 800e51a:	607b      	str	r3, [r7, #4]
}
 800e51c:	bf00      	nop
 800e51e:	bf00      	nop
 800e520:	e7fd      	b.n	800e51e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e522:	4b0a      	ldr	r3, [pc, #40]	@ (800e54c <vPortExitCritical+0x54>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3b01      	subs	r3, #1
 800e528:	4a08      	ldr	r2, [pc, #32]	@ (800e54c <vPortExitCritical+0x54>)
 800e52a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e52c:	4b07      	ldr	r3, [pc, #28]	@ (800e54c <vPortExitCritical+0x54>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d105      	bne.n	800e540 <vPortExitCritical+0x48>
 800e534:	2300      	movs	r3, #0
 800e536:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	f383 8811 	msr	BASEPRI, r3
}
 800e53e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr
 800e54c:	20000020 	.word	0x20000020

0800e550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e550:	f3ef 8009 	mrs	r0, PSP
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	4b15      	ldr	r3, [pc, #84]	@ (800e5b0 <pxCurrentTCBConst>)
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	f01e 0f10 	tst.w	lr, #16
 800e560:	bf08      	it	eq
 800e562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56a:	6010      	str	r0, [r2, #0]
 800e56c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e574:	b672      	cpsid	i
 800e576:	f380 8811 	msr	BASEPRI, r0
 800e57a:	f3bf 8f4f 	dsb	sy
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	b662      	cpsie	i
 800e584:	f7fe fd50 	bl	800d028 <vTaskSwitchContext>
 800e588:	f04f 0000 	mov.w	r0, #0
 800e58c:	f380 8811 	msr	BASEPRI, r0
 800e590:	bc09      	pop	{r0, r3}
 800e592:	6819      	ldr	r1, [r3, #0]
 800e594:	6808      	ldr	r0, [r1, #0]
 800e596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59a:	f01e 0f10 	tst.w	lr, #16
 800e59e:	bf08      	it	eq
 800e5a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e5a4:	f380 8809 	msr	PSP, r0
 800e5a8:	f3bf 8f6f 	isb	sy
 800e5ac:	4770      	bx	lr
 800e5ae:	bf00      	nop

0800e5b0 <pxCurrentTCBConst>:
 800e5b0:	2000ad50 	.word	0x2000ad50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e5b4:	bf00      	nop
 800e5b6:	bf00      	nop

0800e5b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5c2:	b672      	cpsid	i
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	b662      	cpsie	i
 800e5d2:	607b      	str	r3, [r7, #4]
}
 800e5d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e5d6:	f7fe fc6b 	bl	800ceb0 <xTaskIncrementTick>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d003      	beq.n	800e5e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5e0:	4b06      	ldr	r3, [pc, #24]	@ (800e5fc <SysTick_Handler+0x44>)
 800e5e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5e6:	601a      	str	r2, [r3, #0]
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	f383 8811 	msr	BASEPRI, r3
}
 800e5f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e5f4:	bf00      	nop
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	e000ed04 	.word	0xe000ed04

0800e600 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e600:	b480      	push	{r7}
 800e602:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e604:	4b0b      	ldr	r3, [pc, #44]	@ (800e634 <vPortSetupTimerInterrupt+0x34>)
 800e606:	2200      	movs	r2, #0
 800e608:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e60a:	4b0b      	ldr	r3, [pc, #44]	@ (800e638 <vPortSetupTimerInterrupt+0x38>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e610:	4b0a      	ldr	r3, [pc, #40]	@ (800e63c <vPortSetupTimerInterrupt+0x3c>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a0a      	ldr	r2, [pc, #40]	@ (800e640 <vPortSetupTimerInterrupt+0x40>)
 800e616:	fba2 2303 	umull	r2, r3, r2, r3
 800e61a:	099b      	lsrs	r3, r3, #6
 800e61c:	4a09      	ldr	r2, [pc, #36]	@ (800e644 <vPortSetupTimerInterrupt+0x44>)
 800e61e:	3b01      	subs	r3, #1
 800e620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e622:	4b04      	ldr	r3, [pc, #16]	@ (800e634 <vPortSetupTimerInterrupt+0x34>)
 800e624:	2207      	movs	r2, #7
 800e626:	601a      	str	r2, [r3, #0]
}
 800e628:	bf00      	nop
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop
 800e634:	e000e010 	.word	0xe000e010
 800e638:	e000e018 	.word	0xe000e018
 800e63c:	20000000 	.word	0x20000000
 800e640:	10624dd3 	.word	0x10624dd3
 800e644:	e000e014 	.word	0xe000e014

0800e648 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e648:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e658 <vPortEnableVFP+0x10>
 800e64c:	6801      	ldr	r1, [r0, #0]
 800e64e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e652:	6001      	str	r1, [r0, #0]
 800e654:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e656:	bf00      	nop
 800e658:	e000ed88 	.word	0xe000ed88

0800e65c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e65c:	b480      	push	{r7}
 800e65e:	b085      	sub	sp, #20
 800e660:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e662:	f3ef 8305 	mrs	r3, IPSR
 800e666:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2b0f      	cmp	r3, #15
 800e66c:	d917      	bls.n	800e69e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e66e:	4a1a      	ldr	r2, [pc, #104]	@ (800e6d8 <vPortValidateInterruptPriority+0x7c>)
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	4413      	add	r3, r2
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e678:	4b18      	ldr	r3, [pc, #96]	@ (800e6dc <vPortValidateInterruptPriority+0x80>)
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	7afa      	ldrb	r2, [r7, #11]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d20d      	bcs.n	800e69e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800e682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e686:	b672      	cpsid	i
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	b662      	cpsie	i
 800e696:	607b      	str	r3, [r7, #4]
}
 800e698:	bf00      	nop
 800e69a:	bf00      	nop
 800e69c:	e7fd      	b.n	800e69a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e69e:	4b10      	ldr	r3, [pc, #64]	@ (800e6e0 <vPortValidateInterruptPriority+0x84>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e6a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e6e4 <vPortValidateInterruptPriority+0x88>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d90d      	bls.n	800e6ca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800e6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6b2:	b672      	cpsid	i
 800e6b4:	f383 8811 	msr	BASEPRI, r3
 800e6b8:	f3bf 8f6f 	isb	sy
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	b662      	cpsie	i
 800e6c2:	603b      	str	r3, [r7, #0]
}
 800e6c4:	bf00      	nop
 800e6c6:	bf00      	nop
 800e6c8:	e7fd      	b.n	800e6c6 <vPortValidateInterruptPriority+0x6a>
	}
 800e6ca:	bf00      	nop
 800e6cc:	3714      	adds	r7, #20
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr
 800e6d6:	bf00      	nop
 800e6d8:	e000e3f0 	.word	0xe000e3f0
 800e6dc:	2000b37c 	.word	0x2000b37c
 800e6e0:	e000ed0c 	.word	0xe000ed0c
 800e6e4:	2000b380 	.word	0x2000b380

0800e6e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b08a      	sub	sp, #40	@ 0x28
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e6f4:	f7fe fb0c 	bl	800cd10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e6f8:	4b5d      	ldr	r3, [pc, #372]	@ (800e870 <pvPortMalloc+0x188>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d101      	bne.n	800e704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e700:	f000 f920 	bl	800e944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e704:	4b5b      	ldr	r3, [pc, #364]	@ (800e874 <pvPortMalloc+0x18c>)
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4013      	ands	r3, r2
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f040 8094 	bne.w	800e83a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d020      	beq.n	800e75a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800e718:	2208      	movs	r2, #8
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4413      	add	r3, r2
 800e71e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f003 0307 	and.w	r3, r3, #7
 800e726:	2b00      	cmp	r3, #0
 800e728:	d017      	beq.n	800e75a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f023 0307 	bic.w	r3, r3, #7
 800e730:	3308      	adds	r3, #8
 800e732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f003 0307 	and.w	r3, r3, #7
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00d      	beq.n	800e75a <pvPortMalloc+0x72>
	__asm volatile
 800e73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e742:	b672      	cpsid	i
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	b662      	cpsie	i
 800e752:	617b      	str	r3, [r7, #20]
}
 800e754:	bf00      	nop
 800e756:	bf00      	nop
 800e758:	e7fd      	b.n	800e756 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d06c      	beq.n	800e83a <pvPortMalloc+0x152>
 800e760:	4b45      	ldr	r3, [pc, #276]	@ (800e878 <pvPortMalloc+0x190>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	429a      	cmp	r2, r3
 800e768:	d867      	bhi.n	800e83a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e76a:	4b44      	ldr	r3, [pc, #272]	@ (800e87c <pvPortMalloc+0x194>)
 800e76c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e76e:	4b43      	ldr	r3, [pc, #268]	@ (800e87c <pvPortMalloc+0x194>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e774:	e004      	b.n	800e780 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800e776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e778:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	429a      	cmp	r2, r3
 800e788:	d903      	bls.n	800e792 <pvPortMalloc+0xaa>
 800e78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d1f1      	bne.n	800e776 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e792:	4b37      	ldr	r3, [pc, #220]	@ (800e870 <pvPortMalloc+0x188>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e798:	429a      	cmp	r2, r3
 800e79a:	d04e      	beq.n	800e83a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e79c:	6a3b      	ldr	r3, [r7, #32]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2208      	movs	r2, #8
 800e7a2:	4413      	add	r3, r2
 800e7a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	6a3b      	ldr	r3, [r7, #32]
 800e7ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	1ad2      	subs	r2, r2, r3
 800e7b6:	2308      	movs	r3, #8
 800e7b8:	005b      	lsls	r3, r3, #1
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d922      	bls.n	800e804 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e7be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	4413      	add	r3, r2
 800e7c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	f003 0307 	and.w	r3, r3, #7
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d00d      	beq.n	800e7ec <pvPortMalloc+0x104>
	__asm volatile
 800e7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7d4:	b672      	cpsid	i
 800e7d6:	f383 8811 	msr	BASEPRI, r3
 800e7da:	f3bf 8f6f 	isb	sy
 800e7de:	f3bf 8f4f 	dsb	sy
 800e7e2:	b662      	cpsie	i
 800e7e4:	613b      	str	r3, [r7, #16]
}
 800e7e6:	bf00      	nop
 800e7e8:	bf00      	nop
 800e7ea:	e7fd      	b.n	800e7e8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ee:	685a      	ldr	r2, [r3, #4]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	1ad2      	subs	r2, r2, r3
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7fe:	69b8      	ldr	r0, [r7, #24]
 800e800:	f000 f902 	bl	800ea08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e804:	4b1c      	ldr	r3, [pc, #112]	@ (800e878 <pvPortMalloc+0x190>)
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	4a1a      	ldr	r2, [pc, #104]	@ (800e878 <pvPortMalloc+0x190>)
 800e810:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e812:	4b19      	ldr	r3, [pc, #100]	@ (800e878 <pvPortMalloc+0x190>)
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	4b1a      	ldr	r3, [pc, #104]	@ (800e880 <pvPortMalloc+0x198>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d203      	bcs.n	800e826 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e81e:	4b16      	ldr	r3, [pc, #88]	@ (800e878 <pvPortMalloc+0x190>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a17      	ldr	r2, [pc, #92]	@ (800e880 <pvPortMalloc+0x198>)
 800e824:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e828:	685a      	ldr	r2, [r3, #4]
 800e82a:	4b12      	ldr	r3, [pc, #72]	@ (800e874 <pvPortMalloc+0x18c>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	431a      	orrs	r2, r3
 800e830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e832:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e836:	2200      	movs	r2, #0
 800e838:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e83a:	f7fe fa77 	bl	800cd2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	f003 0307 	and.w	r3, r3, #7
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00d      	beq.n	800e864 <pvPortMalloc+0x17c>
	__asm volatile
 800e848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e84c:	b672      	cpsid	i
 800e84e:	f383 8811 	msr	BASEPRI, r3
 800e852:	f3bf 8f6f 	isb	sy
 800e856:	f3bf 8f4f 	dsb	sy
 800e85a:	b662      	cpsie	i
 800e85c:	60fb      	str	r3, [r7, #12]
}
 800e85e:	bf00      	nop
 800e860:	bf00      	nop
 800e862:	e7fd      	b.n	800e860 <pvPortMalloc+0x178>
	return pvReturn;
 800e864:	69fb      	ldr	r3, [r7, #28]
}
 800e866:	4618      	mov	r0, r3
 800e868:	3728      	adds	r7, #40	@ 0x28
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	2002438c 	.word	0x2002438c
 800e874:	20024398 	.word	0x20024398
 800e878:	20024390 	.word	0x20024390
 800e87c:	20024384 	.word	0x20024384
 800e880:	20024394 	.word	0x20024394

0800e884 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d04e      	beq.n	800e934 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e896:	2308      	movs	r3, #8
 800e898:	425b      	negs	r3, r3
 800e89a:	697a      	ldr	r2, [r7, #20]
 800e89c:	4413      	add	r3, r2
 800e89e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	685a      	ldr	r2, [r3, #4]
 800e8a8:	4b24      	ldr	r3, [pc, #144]	@ (800e93c <vPortFree+0xb8>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4013      	ands	r3, r2
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d10d      	bne.n	800e8ce <vPortFree+0x4a>
	__asm volatile
 800e8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b6:	b672      	cpsid	i
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	b662      	cpsie	i
 800e8c6:	60fb      	str	r3, [r7, #12]
}
 800e8c8:	bf00      	nop
 800e8ca:	bf00      	nop
 800e8cc:	e7fd      	b.n	800e8ca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00d      	beq.n	800e8f2 <vPortFree+0x6e>
	__asm volatile
 800e8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8da:	b672      	cpsid	i
 800e8dc:	f383 8811 	msr	BASEPRI, r3
 800e8e0:	f3bf 8f6f 	isb	sy
 800e8e4:	f3bf 8f4f 	dsb	sy
 800e8e8:	b662      	cpsie	i
 800e8ea:	60bb      	str	r3, [r7, #8]
}
 800e8ec:	bf00      	nop
 800e8ee:	bf00      	nop
 800e8f0:	e7fd      	b.n	800e8ee <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	685a      	ldr	r2, [r3, #4]
 800e8f6:	4b11      	ldr	r3, [pc, #68]	@ (800e93c <vPortFree+0xb8>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4013      	ands	r3, r2
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d019      	beq.n	800e934 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d115      	bne.n	800e934 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	685a      	ldr	r2, [r3, #4]
 800e90c:	4b0b      	ldr	r3, [pc, #44]	@ (800e93c <vPortFree+0xb8>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	43db      	mvns	r3, r3
 800e912:	401a      	ands	r2, r3
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e918:	f7fe f9fa 	bl	800cd10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	685a      	ldr	r2, [r3, #4]
 800e920:	4b07      	ldr	r3, [pc, #28]	@ (800e940 <vPortFree+0xbc>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4413      	add	r3, r2
 800e926:	4a06      	ldr	r2, [pc, #24]	@ (800e940 <vPortFree+0xbc>)
 800e928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e92a:	6938      	ldr	r0, [r7, #16]
 800e92c:	f000 f86c 	bl	800ea08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e930:	f7fe f9fc 	bl	800cd2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e934:	bf00      	nop
 800e936:	3718      	adds	r7, #24
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}
 800e93c:	20024398 	.word	0x20024398
 800e940:	20024390 	.word	0x20024390

0800e944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e944:	b480      	push	{r7}
 800e946:	b085      	sub	sp, #20
 800e948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e94a:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800e94e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e950:	4b27      	ldr	r3, [pc, #156]	@ (800e9f0 <prvHeapInit+0xac>)
 800e952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f003 0307 	and.w	r3, r3, #7
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00c      	beq.n	800e978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	3307      	adds	r3, #7
 800e962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f023 0307 	bic.w	r3, r3, #7
 800e96a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e96c:	68ba      	ldr	r2, [r7, #8]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	4a1f      	ldr	r2, [pc, #124]	@ (800e9f0 <prvHeapInit+0xac>)
 800e974:	4413      	add	r3, r2
 800e976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e97c:	4a1d      	ldr	r2, [pc, #116]	@ (800e9f4 <prvHeapInit+0xb0>)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e982:	4b1c      	ldr	r3, [pc, #112]	@ (800e9f4 <prvHeapInit+0xb0>)
 800e984:	2200      	movs	r2, #0
 800e986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	68ba      	ldr	r2, [r7, #8]
 800e98c:	4413      	add	r3, r2
 800e98e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e990:	2208      	movs	r2, #8
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	1a9b      	subs	r3, r3, r2
 800e996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f023 0307 	bic.w	r3, r3, #7
 800e99e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	4a15      	ldr	r2, [pc, #84]	@ (800e9f8 <prvHeapInit+0xb4>)
 800e9a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e9a6:	4b14      	ldr	r3, [pc, #80]	@ (800e9f8 <prvHeapInit+0xb4>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e9ae:	4b12      	ldr	r3, [pc, #72]	@ (800e9f8 <prvHeapInit+0xb4>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	1ad2      	subs	r2, r2, r3
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e9f8 <prvHeapInit+0xb4>)
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	4a0a      	ldr	r2, [pc, #40]	@ (800e9fc <prvHeapInit+0xb8>)
 800e9d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	4a09      	ldr	r2, [pc, #36]	@ (800ea00 <prvHeapInit+0xbc>)
 800e9da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e9dc:	4b09      	ldr	r3, [pc, #36]	@ (800ea04 <prvHeapInit+0xc0>)
 800e9de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e9e2:	601a      	str	r2, [r3, #0]
}
 800e9e4:	bf00      	nop
 800e9e6:	3714      	adds	r7, #20
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr
 800e9f0:	2000b384 	.word	0x2000b384
 800e9f4:	20024384 	.word	0x20024384
 800e9f8:	2002438c 	.word	0x2002438c
 800e9fc:	20024394 	.word	0x20024394
 800ea00:	20024390 	.word	0x20024390
 800ea04:	20024398 	.word	0x20024398

0800ea08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ea10:	4b28      	ldr	r3, [pc, #160]	@ (800eab4 <prvInsertBlockIntoFreeList+0xac>)
 800ea12:	60fb      	str	r3, [r7, #12]
 800ea14:	e002      	b.n	800ea1c <prvInsertBlockIntoFreeList+0x14>
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	60fb      	str	r3, [r7, #12]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d8f7      	bhi.n	800ea16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	4413      	add	r3, r2
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d108      	bne.n	800ea4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	685a      	ldr	r2, [r3, #4]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	441a      	add	r2, r3
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	68ba      	ldr	r2, [r7, #8]
 800ea54:	441a      	add	r2, r3
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d118      	bne.n	800ea90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681a      	ldr	r2, [r3, #0]
 800ea62:	4b15      	ldr	r3, [pc, #84]	@ (800eab8 <prvInsertBlockIntoFreeList+0xb0>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d00d      	beq.n	800ea86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	685a      	ldr	r2, [r3, #4]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	441a      	add	r2, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	601a      	str	r2, [r3, #0]
 800ea84:	e008      	b.n	800ea98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea86:	4b0c      	ldr	r3, [pc, #48]	@ (800eab8 <prvInsertBlockIntoFreeList+0xb0>)
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	601a      	str	r2, [r3, #0]
 800ea8e:	e003      	b.n	800ea98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea98:	68fa      	ldr	r2, [r7, #12]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d002      	beq.n	800eaa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	687a      	ldr	r2, [r7, #4]
 800eaa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eaa6:	bf00      	nop
 800eaa8:	3714      	adds	r7, #20
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr
 800eab2:	bf00      	nop
 800eab4:	20024384 	.word	0x20024384
 800eab8:	2002438c 	.word	0x2002438c

0800eabc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800eac6:	f007 facd 	bl	8016064 <sys_timeouts_sleeptime>
 800eaca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead2:	d10b      	bne.n	800eaec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ead4:	4813      	ldr	r0, [pc, #76]	@ (800eb24 <tcpip_timeouts_mbox_fetch+0x68>)
 800ead6:	f00a fb62 	bl	801919e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800eada:	2200      	movs	r2, #0
 800eadc:	6839      	ldr	r1, [r7, #0]
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f00a faea 	bl	80190b8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800eae4:	480f      	ldr	r0, [pc, #60]	@ (800eb24 <tcpip_timeouts_mbox_fetch+0x68>)
 800eae6:	f00a fb4b 	bl	8019180 <sys_mutex_lock>
    return;
 800eaea:	e018      	b.n	800eb1e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d102      	bne.n	800eaf8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800eaf2:	f007 fa7d 	bl	8015ff0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800eaf6:	e7e6      	b.n	800eac6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800eaf8:	480a      	ldr	r0, [pc, #40]	@ (800eb24 <tcpip_timeouts_mbox_fetch+0x68>)
 800eafa:	f00a fb50 	bl	801919e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800eafe:	68fa      	ldr	r2, [r7, #12]
 800eb00:	6839      	ldr	r1, [r7, #0]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f00a fad8 	bl	80190b8 <sys_arch_mbox_fetch>
 800eb08:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800eb0a:	4806      	ldr	r0, [pc, #24]	@ (800eb24 <tcpip_timeouts_mbox_fetch+0x68>)
 800eb0c:	f00a fb38 	bl	8019180 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb16:	d102      	bne.n	800eb1e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800eb18:	f007 fa6a 	bl	8015ff0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800eb1c:	e7d3      	b.n	800eac6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	200243a8 	.word	0x200243a8

0800eb28 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800eb30:	4810      	ldr	r0, [pc, #64]	@ (800eb74 <tcpip_thread+0x4c>)
 800eb32:	f00a fb25 	bl	8019180 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800eb36:	4b10      	ldr	r3, [pc, #64]	@ (800eb78 <tcpip_thread+0x50>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d005      	beq.n	800eb4a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800eb3e:	4b0e      	ldr	r3, [pc, #56]	@ (800eb78 <tcpip_thread+0x50>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a0e      	ldr	r2, [pc, #56]	@ (800eb7c <tcpip_thread+0x54>)
 800eb44:	6812      	ldr	r2, [r2, #0]
 800eb46:	4610      	mov	r0, r2
 800eb48:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800eb4a:	f107 030c 	add.w	r3, r7, #12
 800eb4e:	4619      	mov	r1, r3
 800eb50:	480b      	ldr	r0, [pc, #44]	@ (800eb80 <tcpip_thread+0x58>)
 800eb52:	f7ff ffb3 	bl	800eabc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d106      	bne.n	800eb6a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800eb5c:	4b09      	ldr	r3, [pc, #36]	@ (800eb84 <tcpip_thread+0x5c>)
 800eb5e:	2291      	movs	r2, #145	@ 0x91
 800eb60:	4909      	ldr	r1, [pc, #36]	@ (800eb88 <tcpip_thread+0x60>)
 800eb62:	480a      	ldr	r0, [pc, #40]	@ (800eb8c <tcpip_thread+0x64>)
 800eb64:	f00b f9ba 	bl	8019edc <iprintf>
      continue;
 800eb68:	e003      	b.n	800eb72 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f000 f80f 	bl	800eb90 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800eb72:	e7ea      	b.n	800eb4a <tcpip_thread+0x22>
 800eb74:	200243a8 	.word	0x200243a8
 800eb78:	2002439c 	.word	0x2002439c
 800eb7c:	200243a0 	.word	0x200243a0
 800eb80:	200243a4 	.word	0x200243a4
 800eb84:	0801b15c 	.word	0x0801b15c
 800eb88:	0801b18c 	.word	0x0801b18c
 800eb8c:	0801b1ac 	.word	0x0801b1ac

0800eb90 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	2b02      	cmp	r3, #2
 800eb9e:	d026      	beq.n	800ebee <tcpip_thread_handle_msg+0x5e>
 800eba0:	2b02      	cmp	r3, #2
 800eba2:	dc2b      	bgt.n	800ebfc <tcpip_thread_handle_msg+0x6c>
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d002      	beq.n	800ebae <tcpip_thread_handle_msg+0x1e>
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d015      	beq.n	800ebd8 <tcpip_thread_handle_msg+0x48>
 800ebac:	e026      	b.n	800ebfc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	6850      	ldr	r0, [r2, #4]
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	6892      	ldr	r2, [r2, #8]
 800ebba:	4611      	mov	r1, r2
 800ebbc:	4798      	blx	r3
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d004      	beq.n	800ebce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f001 fd07 	bl	80105dc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ebce:	6879      	ldr	r1, [r7, #4]
 800ebd0:	2009      	movs	r0, #9
 800ebd2:	f000 fe5f 	bl	800f894 <memp_free>
      break;
 800ebd6:	e018      	b.n	800ec0a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	6892      	ldr	r2, [r2, #8]
 800ebe0:	4610      	mov	r0, r2
 800ebe2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ebe4:	6879      	ldr	r1, [r7, #4]
 800ebe6:	2008      	movs	r0, #8
 800ebe8:	f000 fe54 	bl	800f894 <memp_free>
      break;
 800ebec:	e00d      	b.n	800ec0a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	6892      	ldr	r2, [r2, #8]
 800ebf6:	4610      	mov	r0, r2
 800ebf8:	4798      	blx	r3
      break;
 800ebfa:	e006      	b.n	800ec0a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ebfc:	4b05      	ldr	r3, [pc, #20]	@ (800ec14 <tcpip_thread_handle_msg+0x84>)
 800ebfe:	22cf      	movs	r2, #207	@ 0xcf
 800ec00:	4905      	ldr	r1, [pc, #20]	@ (800ec18 <tcpip_thread_handle_msg+0x88>)
 800ec02:	4806      	ldr	r0, [pc, #24]	@ (800ec1c <tcpip_thread_handle_msg+0x8c>)
 800ec04:	f00b f96a 	bl	8019edc <iprintf>
      break;
 800ec08:	bf00      	nop
  }
}
 800ec0a:	bf00      	nop
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	0801b15c 	.word	0x0801b15c
 800ec18:	0801b18c 	.word	0x0801b18c
 800ec1c:	0801b1ac 	.word	0x0801b1ac

0800ec20 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b086      	sub	sp, #24
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	60b9      	str	r1, [r7, #8]
 800ec2a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ec2c:	481a      	ldr	r0, [pc, #104]	@ (800ec98 <tcpip_inpkt+0x78>)
 800ec2e:	f00a fa74 	bl	801911a <sys_mbox_valid>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d105      	bne.n	800ec44 <tcpip_inpkt+0x24>
 800ec38:	4b18      	ldr	r3, [pc, #96]	@ (800ec9c <tcpip_inpkt+0x7c>)
 800ec3a:	22fc      	movs	r2, #252	@ 0xfc
 800ec3c:	4918      	ldr	r1, [pc, #96]	@ (800eca0 <tcpip_inpkt+0x80>)
 800ec3e:	4819      	ldr	r0, [pc, #100]	@ (800eca4 <tcpip_inpkt+0x84>)
 800ec40:	f00b f94c 	bl	8019edc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ec44:	2009      	movs	r0, #9
 800ec46:	f000 fdaf 	bl	800f7a8 <memp_malloc>
 800ec4a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d102      	bne.n	800ec58 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ec52:	f04f 33ff 	mov.w	r3, #4294967295
 800ec56:	e01a      	b.n	800ec8e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	68ba      	ldr	r2, [r7, #8]
 800ec68:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ec70:	6979      	ldr	r1, [r7, #20]
 800ec72:	4809      	ldr	r0, [pc, #36]	@ (800ec98 <tcpip_inpkt+0x78>)
 800ec74:	f00a fa06 	bl	8019084 <sys_mbox_trypost>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d006      	beq.n	800ec8c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ec7e:	6979      	ldr	r1, [r7, #20]
 800ec80:	2009      	movs	r0, #9
 800ec82:	f000 fe07 	bl	800f894 <memp_free>
    return ERR_MEM;
 800ec86:	f04f 33ff 	mov.w	r3, #4294967295
 800ec8a:	e000      	b.n	800ec8e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ec8c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3718      	adds	r7, #24
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	200243a4 	.word	0x200243a4
 800ec9c:	0801b15c 	.word	0x0801b15c
 800eca0:	0801b1d4 	.word	0x0801b1d4
 800eca4:	0801b1ac 	.word	0x0801b1ac

0800eca8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ecb8:	f003 0318 	and.w	r3, r3, #24
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d006      	beq.n	800ecce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ecc0:	4a08      	ldr	r2, [pc, #32]	@ (800ece4 <tcpip_input+0x3c>)
 800ecc2:	6839      	ldr	r1, [r7, #0]
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7ff ffab 	bl	800ec20 <tcpip_inpkt>
 800ecca:	4603      	mov	r3, r0
 800eccc:	e005      	b.n	800ecda <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ecce:	4a06      	ldr	r2, [pc, #24]	@ (800ece8 <tcpip_input+0x40>)
 800ecd0:	6839      	ldr	r1, [r7, #0]
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f7ff ffa4 	bl	800ec20 <tcpip_inpkt>
 800ecd8:	4603      	mov	r3, r0
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3708      	adds	r7, #8
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	08018ea5 	.word	0x08018ea5
 800ece8:	08017c8d 	.word	0x08017c8d

0800ecec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ecf6:	4819      	ldr	r0, [pc, #100]	@ (800ed5c <tcpip_try_callback+0x70>)
 800ecf8:	f00a fa0f 	bl	801911a <sys_mbox_valid>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d106      	bne.n	800ed10 <tcpip_try_callback+0x24>
 800ed02:	4b17      	ldr	r3, [pc, #92]	@ (800ed60 <tcpip_try_callback+0x74>)
 800ed04:	f240 125d 	movw	r2, #349	@ 0x15d
 800ed08:	4916      	ldr	r1, [pc, #88]	@ (800ed64 <tcpip_try_callback+0x78>)
 800ed0a:	4817      	ldr	r0, [pc, #92]	@ (800ed68 <tcpip_try_callback+0x7c>)
 800ed0c:	f00b f8e6 	bl	8019edc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ed10:	2008      	movs	r0, #8
 800ed12:	f000 fd49 	bl	800f7a8 <memp_malloc>
 800ed16:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d102      	bne.n	800ed24 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ed1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed22:	e017      	b.n	800ed54 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2201      	movs	r2, #1
 800ed28:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ed36:	68f9      	ldr	r1, [r7, #12]
 800ed38:	4808      	ldr	r0, [pc, #32]	@ (800ed5c <tcpip_try_callback+0x70>)
 800ed3a:	f00a f9a3 	bl	8019084 <sys_mbox_trypost>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d006      	beq.n	800ed52 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ed44:	68f9      	ldr	r1, [r7, #12]
 800ed46:	2008      	movs	r0, #8
 800ed48:	f000 fda4 	bl	800f894 <memp_free>
    return ERR_MEM;
 800ed4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed50:	e000      	b.n	800ed54 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ed52:	2300      	movs	r3, #0
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3710      	adds	r7, #16
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	200243a4 	.word	0x200243a4
 800ed60:	0801b15c 	.word	0x0801b15c
 800ed64:	0801b1d4 	.word	0x0801b1d4
 800ed68:	0801b1ac 	.word	0x0801b1ac

0800ed6c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af02      	add	r7, sp, #8
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ed76:	f000 f872 	bl	800ee5e <lwip_init>

  tcpip_init_done = initfunc;
 800ed7a:	4a17      	ldr	r2, [pc, #92]	@ (800edd8 <tcpip_init+0x6c>)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ed80:	4a16      	ldr	r2, [pc, #88]	@ (800eddc <tcpip_init+0x70>)
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ed86:	2106      	movs	r1, #6
 800ed88:	4815      	ldr	r0, [pc, #84]	@ (800ede0 <tcpip_init+0x74>)
 800ed8a:	f00a f961 	bl	8019050 <sys_mbox_new>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d006      	beq.n	800eda2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ed94:	4b13      	ldr	r3, [pc, #76]	@ (800ede4 <tcpip_init+0x78>)
 800ed96:	f240 2261 	movw	r2, #609	@ 0x261
 800ed9a:	4913      	ldr	r1, [pc, #76]	@ (800ede8 <tcpip_init+0x7c>)
 800ed9c:	4813      	ldr	r0, [pc, #76]	@ (800edec <tcpip_init+0x80>)
 800ed9e:	f00b f89d 	bl	8019edc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800eda2:	4813      	ldr	r0, [pc, #76]	@ (800edf0 <tcpip_init+0x84>)
 800eda4:	f00a f9d6 	bl	8019154 <sys_mutex_new>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d006      	beq.n	800edbc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800edae:	4b0d      	ldr	r3, [pc, #52]	@ (800ede4 <tcpip_init+0x78>)
 800edb0:	f240 2265 	movw	r2, #613	@ 0x265
 800edb4:	490f      	ldr	r1, [pc, #60]	@ (800edf4 <tcpip_init+0x88>)
 800edb6:	480d      	ldr	r0, [pc, #52]	@ (800edec <tcpip_init+0x80>)
 800edb8:	f00b f890 	bl	8019edc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800edbc:	2318      	movs	r3, #24
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edc4:	2200      	movs	r2, #0
 800edc6:	490c      	ldr	r1, [pc, #48]	@ (800edf8 <tcpip_init+0x8c>)
 800edc8:	480c      	ldr	r0, [pc, #48]	@ (800edfc <tcpip_init+0x90>)
 800edca:	f00a f9f5 	bl	80191b8 <sys_thread_new>
}
 800edce:	bf00      	nop
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	2002439c 	.word	0x2002439c
 800eddc:	200243a0 	.word	0x200243a0
 800ede0:	200243a4 	.word	0x200243a4
 800ede4:	0801b15c 	.word	0x0801b15c
 800ede8:	0801b1e4 	.word	0x0801b1e4
 800edec:	0801b1ac 	.word	0x0801b1ac
 800edf0:	200243a8 	.word	0x200243a8
 800edf4:	0801b208 	.word	0x0801b208
 800edf8:	0800eb29 	.word	0x0800eb29
 800edfc:	0801b22c 	.word	0x0801b22c

0800ee00 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b083      	sub	sp, #12
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	4603      	mov	r3, r0
 800ee08:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ee0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee0e:	021b      	lsls	r3, r3, #8
 800ee10:	b21a      	sxth	r2, r3
 800ee12:	88fb      	ldrh	r3, [r7, #6]
 800ee14:	0a1b      	lsrs	r3, r3, #8
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	b21b      	sxth	r3, r3
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	b21b      	sxth	r3, r3
 800ee1e:	b29b      	uxth	r3, r3
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	370c      	adds	r7, #12
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr

0800ee2c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	061a      	lsls	r2, r3, #24
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	021b      	lsls	r3, r3, #8
 800ee3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ee40:	431a      	orrs	r2, r3
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	0a1b      	lsrs	r3, r3, #8
 800ee46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ee4a:	431a      	orrs	r2, r3
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	0e1b      	lsrs	r3, r3, #24
 800ee50:	4313      	orrs	r3, r2
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	370c      	adds	r7, #12
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr

0800ee5e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b082      	sub	sp, #8
 800ee62:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ee64:	2300      	movs	r3, #0
 800ee66:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ee68:	f00a f968 	bl	801913c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ee6c:	f000 f8d4 	bl	800f018 <mem_init>
  memp_init();
 800ee70:	f000 fc2c 	bl	800f6cc <memp_init>
  pbuf_init();
  netif_init();
 800ee74:	f000 fd38 	bl	800f8e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ee78:	f007 f92c 	bl	80160d4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ee7c:	f001 fe58 	bl	8010b30 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ee80:	f007 f86e 	bl	8015f60 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ee84:	bf00      	nop
 800ee86:	3708      	adds	r7, #8
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	4603      	mov	r3, r0
 800ee94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ee96:	4b05      	ldr	r3, [pc, #20]	@ (800eeac <ptr_to_mem+0x20>)
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	88fb      	ldrh	r3, [r7, #6]
 800ee9c:	4413      	add	r3, r2
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	370c      	adds	r7, #12
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop
 800eeac:	200243c4 	.word	0x200243c4

0800eeb0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800eeb8:	4b05      	ldr	r3, [pc, #20]	@ (800eed0 <mem_to_ptr+0x20>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	1ad3      	subs	r3, r2, r3
 800eec0:	b29b      	uxth	r3, r3
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	370c      	adds	r7, #12
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	200243c4 	.word	0x200243c4

0800eed4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800eed4:	b590      	push	{r4, r7, lr}
 800eed6:	b085      	sub	sp, #20
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800eedc:	4b45      	ldr	r3, [pc, #276]	@ (800eff4 <plug_holes+0x120>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d206      	bcs.n	800eef4 <plug_holes+0x20>
 800eee6:	4b44      	ldr	r3, [pc, #272]	@ (800eff8 <plug_holes+0x124>)
 800eee8:	f240 12df 	movw	r2, #479	@ 0x1df
 800eeec:	4943      	ldr	r1, [pc, #268]	@ (800effc <plug_holes+0x128>)
 800eeee:	4844      	ldr	r0, [pc, #272]	@ (800f000 <plug_holes+0x12c>)
 800eef0:	f00a fff4 	bl	8019edc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800eef4:	4b43      	ldr	r3, [pc, #268]	@ (800f004 <plug_holes+0x130>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d306      	bcc.n	800ef0c <plug_holes+0x38>
 800eefe:	4b3e      	ldr	r3, [pc, #248]	@ (800eff8 <plug_holes+0x124>)
 800ef00:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ef04:	4940      	ldr	r1, [pc, #256]	@ (800f008 <plug_holes+0x134>)
 800ef06:	483e      	ldr	r0, [pc, #248]	@ (800f000 <plug_holes+0x12c>)
 800ef08:	f00a ffe8 	bl	8019edc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	791b      	ldrb	r3, [r3, #4]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d006      	beq.n	800ef22 <plug_holes+0x4e>
 800ef14:	4b38      	ldr	r3, [pc, #224]	@ (800eff8 <plug_holes+0x124>)
 800ef16:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ef1a:	493c      	ldr	r1, [pc, #240]	@ (800f00c <plug_holes+0x138>)
 800ef1c:	4838      	ldr	r0, [pc, #224]	@ (800f000 <plug_holes+0x12c>)
 800ef1e:	f00a ffdd 	bl	8019edc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	881b      	ldrh	r3, [r3, #0]
 800ef26:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ef2a:	d906      	bls.n	800ef3a <plug_holes+0x66>
 800ef2c:	4b32      	ldr	r3, [pc, #200]	@ (800eff8 <plug_holes+0x124>)
 800ef2e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800ef32:	4937      	ldr	r1, [pc, #220]	@ (800f010 <plug_holes+0x13c>)
 800ef34:	4832      	ldr	r0, [pc, #200]	@ (800f000 <plug_holes+0x12c>)
 800ef36:	f00a ffd1 	bl	8019edc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7ff ffa4 	bl	800ee8c <ptr_to_mem>
 800ef44:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d024      	beq.n	800ef98 <plug_holes+0xc4>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	791b      	ldrb	r3, [r3, #4]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d120      	bne.n	800ef98 <plug_holes+0xc4>
 800ef56:	4b2b      	ldr	r3, [pc, #172]	@ (800f004 <plug_holes+0x130>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d01b      	beq.n	800ef98 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ef60:	4b2c      	ldr	r3, [pc, #176]	@ (800f014 <plug_holes+0x140>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d102      	bne.n	800ef70 <plug_holes+0x9c>
      lfree = mem;
 800ef6a:	4a2a      	ldr	r2, [pc, #168]	@ (800f014 <plug_holes+0x140>)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	881a      	ldrh	r2, [r3, #0]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	881b      	ldrh	r3, [r3, #0]
 800ef7c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ef80:	d00a      	beq.n	800ef98 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	881b      	ldrh	r3, [r3, #0]
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7ff ff80 	bl	800ee8c <ptr_to_mem>
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7ff ff8e 	bl	800eeb0 <mem_to_ptr>
 800ef94:	4603      	mov	r3, r0
 800ef96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	885b      	ldrh	r3, [r3, #2]
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7ff ff75 	bl	800ee8c <ptr_to_mem>
 800efa2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800efa4:	68ba      	ldr	r2, [r7, #8]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d01f      	beq.n	800efec <plug_holes+0x118>
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	791b      	ldrb	r3, [r3, #4]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d11b      	bne.n	800efec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800efb4:	4b17      	ldr	r3, [pc, #92]	@ (800f014 <plug_holes+0x140>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d102      	bne.n	800efc4 <plug_holes+0xf0>
      lfree = pmem;
 800efbe:	4a15      	ldr	r2, [pc, #84]	@ (800f014 <plug_holes+0x140>)
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	881a      	ldrh	r2, [r3, #0]
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	881b      	ldrh	r3, [r3, #0]
 800efd0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800efd4:	d00a      	beq.n	800efec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	881b      	ldrh	r3, [r3, #0]
 800efda:	4618      	mov	r0, r3
 800efdc:	f7ff ff56 	bl	800ee8c <ptr_to_mem>
 800efe0:	4604      	mov	r4, r0
 800efe2:	68b8      	ldr	r0, [r7, #8]
 800efe4:	f7ff ff64 	bl	800eeb0 <mem_to_ptr>
 800efe8:	4603      	mov	r3, r0
 800efea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800efec:	bf00      	nop
 800efee:	3714      	adds	r7, #20
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd90      	pop	{r4, r7, pc}
 800eff4:	200243c4 	.word	0x200243c4
 800eff8:	0801b23c 	.word	0x0801b23c
 800effc:	0801b26c 	.word	0x0801b26c
 800f000:	0801b284 	.word	0x0801b284
 800f004:	200243c8 	.word	0x200243c8
 800f008:	0801b2ac 	.word	0x0801b2ac
 800f00c:	0801b2c8 	.word	0x0801b2c8
 800f010:	0801b2e4 	.word	0x0801b2e4
 800f014:	200243d0 	.word	0x200243d0

0800f018 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f01e:	4b1d      	ldr	r3, [pc, #116]	@ (800f094 <mem_init+0x7c>)
 800f020:	4a1d      	ldr	r2, [pc, #116]	@ (800f098 <mem_init+0x80>)
 800f022:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f024:	4b1b      	ldr	r3, [pc, #108]	@ (800f094 <mem_init+0x7c>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800f030:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f03e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800f042:	f7ff ff23 	bl	800ee8c <ptr_to_mem>
 800f046:	4603      	mov	r3, r0
 800f048:	4a14      	ldr	r2, [pc, #80]	@ (800f09c <mem_init+0x84>)
 800f04a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f04c:	4b13      	ldr	r3, [pc, #76]	@ (800f09c <mem_init+0x84>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2201      	movs	r2, #1
 800f052:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f054:	4b11      	ldr	r3, [pc, #68]	@ (800f09c <mem_init+0x84>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800f05c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f05e:	4b0f      	ldr	r3, [pc, #60]	@ (800f09c <mem_init+0x84>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800f066:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f068:	4b0a      	ldr	r3, [pc, #40]	@ (800f094 <mem_init+0x7c>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a0c      	ldr	r2, [pc, #48]	@ (800f0a0 <mem_init+0x88>)
 800f06e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f070:	480c      	ldr	r0, [pc, #48]	@ (800f0a4 <mem_init+0x8c>)
 800f072:	f00a f86f 	bl	8019154 <sys_mutex_new>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d006      	beq.n	800f08a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f07c:	4b0a      	ldr	r3, [pc, #40]	@ (800f0a8 <mem_init+0x90>)
 800f07e:	f240 221f 	movw	r2, #543	@ 0x21f
 800f082:	490a      	ldr	r1, [pc, #40]	@ (800f0ac <mem_init+0x94>)
 800f084:	480a      	ldr	r0, [pc, #40]	@ (800f0b0 <mem_init+0x98>)
 800f086:	f00a ff29 	bl	8019edc <iprintf>
  }
}
 800f08a:	bf00      	nop
 800f08c:	3708      	adds	r7, #8
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	200243c4 	.word	0x200243c4
 800f098:	20048000 	.word	0x20048000
 800f09c:	200243c8 	.word	0x200243c8
 800f0a0:	200243d0 	.word	0x200243d0
 800f0a4:	200243cc 	.word	0x200243cc
 800f0a8:	0801b23c 	.word	0x0801b23c
 800f0ac:	0801b310 	.word	0x0801b310
 800f0b0:	0801b284 	.word	0x0801b284

0800f0b4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b086      	sub	sp, #24
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7ff fef7 	bl	800eeb0 <mem_to_ptr>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	881b      	ldrh	r3, [r3, #0]
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7ff fede 	bl	800ee8c <ptr_to_mem>
 800f0d0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	885b      	ldrh	r3, [r3, #2]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7ff fed8 	bl	800ee8c <ptr_to_mem>
 800f0dc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	881b      	ldrh	r3, [r3, #0]
 800f0e2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f0e6:	d818      	bhi.n	800f11a <mem_link_valid+0x66>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	885b      	ldrh	r3, [r3, #2]
 800f0ec:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f0f0:	d813      	bhi.n	800f11a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f0f6:	8afa      	ldrh	r2, [r7, #22]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d004      	beq.n	800f106 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	881b      	ldrh	r3, [r3, #0]
 800f100:	8afa      	ldrh	r2, [r7, #22]
 800f102:	429a      	cmp	r2, r3
 800f104:	d109      	bne.n	800f11a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f106:	4b08      	ldr	r3, [pc, #32]	@ (800f128 <mem_link_valid+0x74>)
 800f108:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f10a:	693a      	ldr	r2, [r7, #16]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d006      	beq.n	800f11e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	885b      	ldrh	r3, [r3, #2]
 800f114:	8afa      	ldrh	r2, [r7, #22]
 800f116:	429a      	cmp	r2, r3
 800f118:	d001      	beq.n	800f11e <mem_link_valid+0x6a>
    return 0;
 800f11a:	2300      	movs	r3, #0
 800f11c:	e000      	b.n	800f120 <mem_link_valid+0x6c>
  }
  return 1;
 800f11e:	2301      	movs	r3, #1
}
 800f120:	4618      	mov	r0, r3
 800f122:	3718      	adds	r7, #24
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	200243c8 	.word	0x200243c8

0800f12c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b088      	sub	sp, #32
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d070      	beq.n	800f21c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f003 0303 	and.w	r3, r3, #3
 800f140:	2b00      	cmp	r3, #0
 800f142:	d00d      	beq.n	800f160 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f144:	4b37      	ldr	r3, [pc, #220]	@ (800f224 <mem_free+0xf8>)
 800f146:	f240 2273 	movw	r2, #627	@ 0x273
 800f14a:	4937      	ldr	r1, [pc, #220]	@ (800f228 <mem_free+0xfc>)
 800f14c:	4837      	ldr	r0, [pc, #220]	@ (800f22c <mem_free+0x100>)
 800f14e:	f00a fec5 	bl	8019edc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f152:	f00a f851 	bl	80191f8 <sys_arch_protect>
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f00a f85b 	bl	8019214 <sys_arch_unprotect>
    return;
 800f15e:	e05e      	b.n	800f21e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	3b08      	subs	r3, #8
 800f164:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f166:	4b32      	ldr	r3, [pc, #200]	@ (800f230 <mem_free+0x104>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	69fa      	ldr	r2, [r7, #28]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d306      	bcc.n	800f17e <mem_free+0x52>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f103 020c 	add.w	r2, r3, #12
 800f176:	4b2f      	ldr	r3, [pc, #188]	@ (800f234 <mem_free+0x108>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d90d      	bls.n	800f19a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f17e:	4b29      	ldr	r3, [pc, #164]	@ (800f224 <mem_free+0xf8>)
 800f180:	f240 227f 	movw	r2, #639	@ 0x27f
 800f184:	492c      	ldr	r1, [pc, #176]	@ (800f238 <mem_free+0x10c>)
 800f186:	4829      	ldr	r0, [pc, #164]	@ (800f22c <mem_free+0x100>)
 800f188:	f00a fea8 	bl	8019edc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f18c:	f00a f834 	bl	80191f8 <sys_arch_protect>
 800f190:	6138      	str	r0, [r7, #16]
 800f192:	6938      	ldr	r0, [r7, #16]
 800f194:	f00a f83e 	bl	8019214 <sys_arch_unprotect>
    return;
 800f198:	e041      	b.n	800f21e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f19a:	4828      	ldr	r0, [pc, #160]	@ (800f23c <mem_free+0x110>)
 800f19c:	f009 fff0 	bl	8019180 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	791b      	ldrb	r3, [r3, #4]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d110      	bne.n	800f1ca <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f1a8:	4b1e      	ldr	r3, [pc, #120]	@ (800f224 <mem_free+0xf8>)
 800f1aa:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800f1ae:	4924      	ldr	r1, [pc, #144]	@ (800f240 <mem_free+0x114>)
 800f1b0:	481e      	ldr	r0, [pc, #120]	@ (800f22c <mem_free+0x100>)
 800f1b2:	f00a fe93 	bl	8019edc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f1b6:	4821      	ldr	r0, [pc, #132]	@ (800f23c <mem_free+0x110>)
 800f1b8:	f009 fff1 	bl	801919e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f1bc:	f00a f81c 	bl	80191f8 <sys_arch_protect>
 800f1c0:	6178      	str	r0, [r7, #20]
 800f1c2:	6978      	ldr	r0, [r7, #20]
 800f1c4:	f00a f826 	bl	8019214 <sys_arch_unprotect>
    return;
 800f1c8:	e029      	b.n	800f21e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f1ca:	69f8      	ldr	r0, [r7, #28]
 800f1cc:	f7ff ff72 	bl	800f0b4 <mem_link_valid>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d110      	bne.n	800f1f8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f1d6:	4b13      	ldr	r3, [pc, #76]	@ (800f224 <mem_free+0xf8>)
 800f1d8:	f240 2295 	movw	r2, #661	@ 0x295
 800f1dc:	4919      	ldr	r1, [pc, #100]	@ (800f244 <mem_free+0x118>)
 800f1de:	4813      	ldr	r0, [pc, #76]	@ (800f22c <mem_free+0x100>)
 800f1e0:	f00a fe7c 	bl	8019edc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f1e4:	4815      	ldr	r0, [pc, #84]	@ (800f23c <mem_free+0x110>)
 800f1e6:	f009 ffda 	bl	801919e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f1ea:	f00a f805 	bl	80191f8 <sys_arch_protect>
 800f1ee:	61b8      	str	r0, [r7, #24]
 800f1f0:	69b8      	ldr	r0, [r7, #24]
 800f1f2:	f00a f80f 	bl	8019214 <sys_arch_unprotect>
    return;
 800f1f6:	e012      	b.n	800f21e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f1fe:	4b12      	ldr	r3, [pc, #72]	@ (800f248 <mem_free+0x11c>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	69fa      	ldr	r2, [r7, #28]
 800f204:	429a      	cmp	r2, r3
 800f206:	d202      	bcs.n	800f20e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f208:	4a0f      	ldr	r2, [pc, #60]	@ (800f248 <mem_free+0x11c>)
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f20e:	69f8      	ldr	r0, [r7, #28]
 800f210:	f7ff fe60 	bl	800eed4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f214:	4809      	ldr	r0, [pc, #36]	@ (800f23c <mem_free+0x110>)
 800f216:	f009 ffc2 	bl	801919e <sys_mutex_unlock>
 800f21a:	e000      	b.n	800f21e <mem_free+0xf2>
    return;
 800f21c:	bf00      	nop
}
 800f21e:	3720      	adds	r7, #32
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	0801b23c 	.word	0x0801b23c
 800f228:	0801b32c 	.word	0x0801b32c
 800f22c:	0801b284 	.word	0x0801b284
 800f230:	200243c4 	.word	0x200243c4
 800f234:	200243c8 	.word	0x200243c8
 800f238:	0801b350 	.word	0x0801b350
 800f23c:	200243cc 	.word	0x200243cc
 800f240:	0801b36c 	.word	0x0801b36c
 800f244:	0801b394 	.word	0x0801b394
 800f248:	200243d0 	.word	0x200243d0

0800f24c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b088      	sub	sp, #32
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	460b      	mov	r3, r1
 800f256:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f258:	887b      	ldrh	r3, [r7, #2]
 800f25a:	3303      	adds	r3, #3
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	f023 0303 	bic.w	r3, r3, #3
 800f262:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f264:	8bfb      	ldrh	r3, [r7, #30]
 800f266:	2b0b      	cmp	r3, #11
 800f268:	d801      	bhi.n	800f26e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f26a:	230c      	movs	r3, #12
 800f26c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f26e:	8bfb      	ldrh	r3, [r7, #30]
 800f270:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f274:	d803      	bhi.n	800f27e <mem_trim+0x32>
 800f276:	8bfa      	ldrh	r2, [r7, #30]
 800f278:	887b      	ldrh	r3, [r7, #2]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d201      	bcs.n	800f282 <mem_trim+0x36>
    return NULL;
 800f27e:	2300      	movs	r3, #0
 800f280:	e0d8      	b.n	800f434 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f282:	4b6e      	ldr	r3, [pc, #440]	@ (800f43c <mem_trim+0x1f0>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d304      	bcc.n	800f296 <mem_trim+0x4a>
 800f28c:	4b6c      	ldr	r3, [pc, #432]	@ (800f440 <mem_trim+0x1f4>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	687a      	ldr	r2, [r7, #4]
 800f292:	429a      	cmp	r2, r3
 800f294:	d306      	bcc.n	800f2a4 <mem_trim+0x58>
 800f296:	4b6b      	ldr	r3, [pc, #428]	@ (800f444 <mem_trim+0x1f8>)
 800f298:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f29c:	496a      	ldr	r1, [pc, #424]	@ (800f448 <mem_trim+0x1fc>)
 800f29e:	486b      	ldr	r0, [pc, #428]	@ (800f44c <mem_trim+0x200>)
 800f2a0:	f00a fe1c 	bl	8019edc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f2a4:	4b65      	ldr	r3, [pc, #404]	@ (800f43c <mem_trim+0x1f0>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d304      	bcc.n	800f2b8 <mem_trim+0x6c>
 800f2ae:	4b64      	ldr	r3, [pc, #400]	@ (800f440 <mem_trim+0x1f4>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d307      	bcc.n	800f2c8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f2b8:	f009 ff9e 	bl	80191f8 <sys_arch_protect>
 800f2bc:	60b8      	str	r0, [r7, #8]
 800f2be:	68b8      	ldr	r0, [r7, #8]
 800f2c0:	f009 ffa8 	bl	8019214 <sys_arch_unprotect>
    return rmem;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	e0b5      	b.n	800f434 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	3b08      	subs	r3, #8
 800f2cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f2ce:	69b8      	ldr	r0, [r7, #24]
 800f2d0:	f7ff fdee 	bl	800eeb0 <mem_to_ptr>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f2d8:	69bb      	ldr	r3, [r7, #24]
 800f2da:	881a      	ldrh	r2, [r3, #0]
 800f2dc:	8afb      	ldrh	r3, [r7, #22]
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	3b08      	subs	r3, #8
 800f2e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f2e6:	8bfa      	ldrh	r2, [r7, #30]
 800f2e8:	8abb      	ldrh	r3, [r7, #20]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d906      	bls.n	800f2fc <mem_trim+0xb0>
 800f2ee:	4b55      	ldr	r3, [pc, #340]	@ (800f444 <mem_trim+0x1f8>)
 800f2f0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800f2f4:	4956      	ldr	r1, [pc, #344]	@ (800f450 <mem_trim+0x204>)
 800f2f6:	4855      	ldr	r0, [pc, #340]	@ (800f44c <mem_trim+0x200>)
 800f2f8:	f00a fdf0 	bl	8019edc <iprintf>
  if (newsize > size) {
 800f2fc:	8bfa      	ldrh	r2, [r7, #30]
 800f2fe:	8abb      	ldrh	r3, [r7, #20]
 800f300:	429a      	cmp	r2, r3
 800f302:	d901      	bls.n	800f308 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f304:	2300      	movs	r3, #0
 800f306:	e095      	b.n	800f434 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f308:	8bfa      	ldrh	r2, [r7, #30]
 800f30a:	8abb      	ldrh	r3, [r7, #20]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d101      	bne.n	800f314 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	e08f      	b.n	800f434 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f314:	484f      	ldr	r0, [pc, #316]	@ (800f454 <mem_trim+0x208>)
 800f316:	f009 ff33 	bl	8019180 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	4618      	mov	r0, r3
 800f320:	f7ff fdb4 	bl	800ee8c <ptr_to_mem>
 800f324:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	791b      	ldrb	r3, [r3, #4]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d13f      	bne.n	800f3ae <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	881b      	ldrh	r3, [r3, #0]
 800f332:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f336:	d106      	bne.n	800f346 <mem_trim+0xfa>
 800f338:	4b42      	ldr	r3, [pc, #264]	@ (800f444 <mem_trim+0x1f8>)
 800f33a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800f33e:	4946      	ldr	r1, [pc, #280]	@ (800f458 <mem_trim+0x20c>)
 800f340:	4842      	ldr	r0, [pc, #264]	@ (800f44c <mem_trim+0x200>)
 800f342:	f00a fdcb 	bl	8019edc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	881b      	ldrh	r3, [r3, #0]
 800f34a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f34c:	8afa      	ldrh	r2, [r7, #22]
 800f34e:	8bfb      	ldrh	r3, [r7, #30]
 800f350:	4413      	add	r3, r2
 800f352:	b29b      	uxth	r3, r3
 800f354:	3308      	adds	r3, #8
 800f356:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f358:	4b40      	ldr	r3, [pc, #256]	@ (800f45c <mem_trim+0x210>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	693a      	ldr	r2, [r7, #16]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d106      	bne.n	800f370 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f362:	89fb      	ldrh	r3, [r7, #14]
 800f364:	4618      	mov	r0, r3
 800f366:	f7ff fd91 	bl	800ee8c <ptr_to_mem>
 800f36a:	4603      	mov	r3, r0
 800f36c:	4a3b      	ldr	r2, [pc, #236]	@ (800f45c <mem_trim+0x210>)
 800f36e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f370:	89fb      	ldrh	r3, [r7, #14]
 800f372:	4618      	mov	r0, r3
 800f374:	f7ff fd8a 	bl	800ee8c <ptr_to_mem>
 800f378:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	2200      	movs	r2, #0
 800f37e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	89ba      	ldrh	r2, [r7, #12]
 800f384:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	8afa      	ldrh	r2, [r7, #22]
 800f38a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f38c:	69bb      	ldr	r3, [r7, #24]
 800f38e:	89fa      	ldrh	r2, [r7, #14]
 800f390:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	881b      	ldrh	r3, [r3, #0]
 800f396:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f39a:	d047      	beq.n	800f42c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	881b      	ldrh	r3, [r3, #0]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7ff fd73 	bl	800ee8c <ptr_to_mem>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	89fb      	ldrh	r3, [r7, #14]
 800f3aa:	8053      	strh	r3, [r2, #2]
 800f3ac:	e03e      	b.n	800f42c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f3ae:	8bfb      	ldrh	r3, [r7, #30]
 800f3b0:	f103 0214 	add.w	r2, r3, #20
 800f3b4:	8abb      	ldrh	r3, [r7, #20]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d838      	bhi.n	800f42c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f3ba:	8afa      	ldrh	r2, [r7, #22]
 800f3bc:	8bfb      	ldrh	r3, [r7, #30]
 800f3be:	4413      	add	r3, r2
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	3308      	adds	r3, #8
 800f3c4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f3c6:	69bb      	ldr	r3, [r7, #24]
 800f3c8:	881b      	ldrh	r3, [r3, #0]
 800f3ca:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f3ce:	d106      	bne.n	800f3de <mem_trim+0x192>
 800f3d0:	4b1c      	ldr	r3, [pc, #112]	@ (800f444 <mem_trim+0x1f8>)
 800f3d2:	f240 3216 	movw	r2, #790	@ 0x316
 800f3d6:	4920      	ldr	r1, [pc, #128]	@ (800f458 <mem_trim+0x20c>)
 800f3d8:	481c      	ldr	r0, [pc, #112]	@ (800f44c <mem_trim+0x200>)
 800f3da:	f00a fd7f 	bl	8019edc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f3de:	89fb      	ldrh	r3, [r7, #14]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7ff fd53 	bl	800ee8c <ptr_to_mem>
 800f3e6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f3e8:	4b1c      	ldr	r3, [pc, #112]	@ (800f45c <mem_trim+0x210>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	693a      	ldr	r2, [r7, #16]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d202      	bcs.n	800f3f8 <mem_trim+0x1ac>
      lfree = mem2;
 800f3f2:	4a1a      	ldr	r2, [pc, #104]	@ (800f45c <mem_trim+0x210>)
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	881a      	ldrh	r2, [r3, #0]
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	8afa      	ldrh	r2, [r7, #22]
 800f40a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	89fa      	ldrh	r2, [r7, #14]
 800f410:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	881b      	ldrh	r3, [r3, #0]
 800f416:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f41a:	d007      	beq.n	800f42c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	881b      	ldrh	r3, [r3, #0]
 800f420:	4618      	mov	r0, r3
 800f422:	f7ff fd33 	bl	800ee8c <ptr_to_mem>
 800f426:	4602      	mov	r2, r0
 800f428:	89fb      	ldrh	r3, [r7, #14]
 800f42a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f42c:	4809      	ldr	r0, [pc, #36]	@ (800f454 <mem_trim+0x208>)
 800f42e:	f009 feb6 	bl	801919e <sys_mutex_unlock>
  return rmem;
 800f432:	687b      	ldr	r3, [r7, #4]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3720      	adds	r7, #32
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	200243c4 	.word	0x200243c4
 800f440:	200243c8 	.word	0x200243c8
 800f444:	0801b23c 	.word	0x0801b23c
 800f448:	0801b3c8 	.word	0x0801b3c8
 800f44c:	0801b284 	.word	0x0801b284
 800f450:	0801b3e0 	.word	0x0801b3e0
 800f454:	200243cc 	.word	0x200243cc
 800f458:	0801b400 	.word	0x0801b400
 800f45c:	200243d0 	.word	0x200243d0

0800f460 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b088      	sub	sp, #32
 800f464:	af00      	add	r7, sp, #0
 800f466:	4603      	mov	r3, r0
 800f468:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f46a:	88fb      	ldrh	r3, [r7, #6]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d101      	bne.n	800f474 <mem_malloc+0x14>
    return NULL;
 800f470:	2300      	movs	r3, #0
 800f472:	e0e2      	b.n	800f63a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f474:	88fb      	ldrh	r3, [r7, #6]
 800f476:	3303      	adds	r3, #3
 800f478:	b29b      	uxth	r3, r3
 800f47a:	f023 0303 	bic.w	r3, r3, #3
 800f47e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f480:	8bbb      	ldrh	r3, [r7, #28]
 800f482:	2b0b      	cmp	r3, #11
 800f484:	d801      	bhi.n	800f48a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f486:	230c      	movs	r3, #12
 800f488:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f48a:	8bbb      	ldrh	r3, [r7, #28]
 800f48c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f490:	d803      	bhi.n	800f49a <mem_malloc+0x3a>
 800f492:	8bba      	ldrh	r2, [r7, #28]
 800f494:	88fb      	ldrh	r3, [r7, #6]
 800f496:	429a      	cmp	r2, r3
 800f498:	d201      	bcs.n	800f49e <mem_malloc+0x3e>
    return NULL;
 800f49a:	2300      	movs	r3, #0
 800f49c:	e0cd      	b.n	800f63a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f49e:	4869      	ldr	r0, [pc, #420]	@ (800f644 <mem_malloc+0x1e4>)
 800f4a0:	f009 fe6e 	bl	8019180 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f4a4:	4b68      	ldr	r3, [pc, #416]	@ (800f648 <mem_malloc+0x1e8>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7ff fd01 	bl	800eeb0 <mem_to_ptr>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	83fb      	strh	r3, [r7, #30]
 800f4b2:	e0b7      	b.n	800f624 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f4b4:	8bfb      	ldrh	r3, [r7, #30]
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7ff fce8 	bl	800ee8c <ptr_to_mem>
 800f4bc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	791b      	ldrb	r3, [r3, #4]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	f040 80a7 	bne.w	800f616 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	881b      	ldrh	r3, [r3, #0]
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	8bfb      	ldrh	r3, [r7, #30]
 800f4d0:	1ad3      	subs	r3, r2, r3
 800f4d2:	f1a3 0208 	sub.w	r2, r3, #8
 800f4d6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	f0c0 809c 	bcc.w	800f616 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	881b      	ldrh	r3, [r3, #0]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	8bfb      	ldrh	r3, [r7, #30]
 800f4e6:	1ad3      	subs	r3, r2, r3
 800f4e8:	f1a3 0208 	sub.w	r2, r3, #8
 800f4ec:	8bbb      	ldrh	r3, [r7, #28]
 800f4ee:	3314      	adds	r3, #20
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d333      	bcc.n	800f55c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f4f4:	8bfa      	ldrh	r2, [r7, #30]
 800f4f6:	8bbb      	ldrh	r3, [r7, #28]
 800f4f8:	4413      	add	r3, r2
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	3308      	adds	r3, #8
 800f4fe:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f500:	8a7b      	ldrh	r3, [r7, #18]
 800f502:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f506:	d106      	bne.n	800f516 <mem_malloc+0xb6>
 800f508:	4b50      	ldr	r3, [pc, #320]	@ (800f64c <mem_malloc+0x1ec>)
 800f50a:	f240 3287 	movw	r2, #903	@ 0x387
 800f50e:	4950      	ldr	r1, [pc, #320]	@ (800f650 <mem_malloc+0x1f0>)
 800f510:	4850      	ldr	r0, [pc, #320]	@ (800f654 <mem_malloc+0x1f4>)
 800f512:	f00a fce3 	bl	8019edc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f516:	8a7b      	ldrh	r3, [r7, #18]
 800f518:	4618      	mov	r0, r3
 800f51a:	f7ff fcb7 	bl	800ee8c <ptr_to_mem>
 800f51e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2200      	movs	r2, #0
 800f524:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	881a      	ldrh	r2, [r3, #0]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	8bfa      	ldrh	r2, [r7, #30]
 800f532:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	8a7a      	ldrh	r2, [r7, #18]
 800f538:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	2201      	movs	r2, #1
 800f53e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	881b      	ldrh	r3, [r3, #0]
 800f544:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f548:	d00b      	beq.n	800f562 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	881b      	ldrh	r3, [r3, #0]
 800f54e:	4618      	mov	r0, r3
 800f550:	f7ff fc9c 	bl	800ee8c <ptr_to_mem>
 800f554:	4602      	mov	r2, r0
 800f556:	8a7b      	ldrh	r3, [r7, #18]
 800f558:	8053      	strh	r3, [r2, #2]
 800f55a:	e002      	b.n	800f562 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	2201      	movs	r2, #1
 800f560:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f562:	4b39      	ldr	r3, [pc, #228]	@ (800f648 <mem_malloc+0x1e8>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	697a      	ldr	r2, [r7, #20]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d127      	bne.n	800f5bc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f56c:	4b36      	ldr	r3, [pc, #216]	@ (800f648 <mem_malloc+0x1e8>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f572:	e005      	b.n	800f580 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f574:	69bb      	ldr	r3, [r7, #24]
 800f576:	881b      	ldrh	r3, [r3, #0]
 800f578:	4618      	mov	r0, r3
 800f57a:	f7ff fc87 	bl	800ee8c <ptr_to_mem>
 800f57e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	791b      	ldrb	r3, [r3, #4]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d004      	beq.n	800f592 <mem_malloc+0x132>
 800f588:	4b33      	ldr	r3, [pc, #204]	@ (800f658 <mem_malloc+0x1f8>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	69ba      	ldr	r2, [r7, #24]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d1f0      	bne.n	800f574 <mem_malloc+0x114>
          }
          lfree = cur;
 800f592:	4a2d      	ldr	r2, [pc, #180]	@ (800f648 <mem_malloc+0x1e8>)
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f598:	4b2b      	ldr	r3, [pc, #172]	@ (800f648 <mem_malloc+0x1e8>)
 800f59a:	681a      	ldr	r2, [r3, #0]
 800f59c:	4b2e      	ldr	r3, [pc, #184]	@ (800f658 <mem_malloc+0x1f8>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d00b      	beq.n	800f5bc <mem_malloc+0x15c>
 800f5a4:	4b28      	ldr	r3, [pc, #160]	@ (800f648 <mem_malloc+0x1e8>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	791b      	ldrb	r3, [r3, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d006      	beq.n	800f5bc <mem_malloc+0x15c>
 800f5ae:	4b27      	ldr	r3, [pc, #156]	@ (800f64c <mem_malloc+0x1ec>)
 800f5b0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800f5b4:	4929      	ldr	r1, [pc, #164]	@ (800f65c <mem_malloc+0x1fc>)
 800f5b6:	4827      	ldr	r0, [pc, #156]	@ (800f654 <mem_malloc+0x1f4>)
 800f5b8:	f00a fc90 	bl	8019edc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f5bc:	4821      	ldr	r0, [pc, #132]	@ (800f644 <mem_malloc+0x1e4>)
 800f5be:	f009 fdee 	bl	801919e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f5c2:	8bba      	ldrh	r2, [r7, #28]
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	4413      	add	r3, r2
 800f5c8:	3308      	adds	r3, #8
 800f5ca:	4a23      	ldr	r2, [pc, #140]	@ (800f658 <mem_malloc+0x1f8>)
 800f5cc:	6812      	ldr	r2, [r2, #0]
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d906      	bls.n	800f5e0 <mem_malloc+0x180>
 800f5d2:	4b1e      	ldr	r3, [pc, #120]	@ (800f64c <mem_malloc+0x1ec>)
 800f5d4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800f5d8:	4921      	ldr	r1, [pc, #132]	@ (800f660 <mem_malloc+0x200>)
 800f5da:	481e      	ldr	r0, [pc, #120]	@ (800f654 <mem_malloc+0x1f4>)
 800f5dc:	f00a fc7e 	bl	8019edc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	f003 0303 	and.w	r3, r3, #3
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d006      	beq.n	800f5f8 <mem_malloc+0x198>
 800f5ea:	4b18      	ldr	r3, [pc, #96]	@ (800f64c <mem_malloc+0x1ec>)
 800f5ec:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800f5f0:	491c      	ldr	r1, [pc, #112]	@ (800f664 <mem_malloc+0x204>)
 800f5f2:	4818      	ldr	r0, [pc, #96]	@ (800f654 <mem_malloc+0x1f4>)
 800f5f4:	f00a fc72 	bl	8019edc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	f003 0303 	and.w	r3, r3, #3
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d006      	beq.n	800f610 <mem_malloc+0x1b0>
 800f602:	4b12      	ldr	r3, [pc, #72]	@ (800f64c <mem_malloc+0x1ec>)
 800f604:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800f608:	4917      	ldr	r1, [pc, #92]	@ (800f668 <mem_malloc+0x208>)
 800f60a:	4812      	ldr	r0, [pc, #72]	@ (800f654 <mem_malloc+0x1f4>)
 800f60c:	f00a fc66 	bl	8019edc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	3308      	adds	r3, #8
 800f614:	e011      	b.n	800f63a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f616:	8bfb      	ldrh	r3, [r7, #30]
 800f618:	4618      	mov	r0, r3
 800f61a:	f7ff fc37 	bl	800ee8c <ptr_to_mem>
 800f61e:	4603      	mov	r3, r0
 800f620:	881b      	ldrh	r3, [r3, #0]
 800f622:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f624:	8bfa      	ldrh	r2, [r7, #30]
 800f626:	8bbb      	ldrh	r3, [r7, #28]
 800f628:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800f62c:	429a      	cmp	r2, r3
 800f62e:	f4ff af41 	bcc.w	800f4b4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f632:	4804      	ldr	r0, [pc, #16]	@ (800f644 <mem_malloc+0x1e4>)
 800f634:	f009 fdb3 	bl	801919e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3720      	adds	r7, #32
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	200243cc 	.word	0x200243cc
 800f648:	200243d0 	.word	0x200243d0
 800f64c:	0801b23c 	.word	0x0801b23c
 800f650:	0801b400 	.word	0x0801b400
 800f654:	0801b284 	.word	0x0801b284
 800f658:	200243c8 	.word	0x200243c8
 800f65c:	0801b414 	.word	0x0801b414
 800f660:	0801b430 	.word	0x0801b430
 800f664:	0801b460 	.word	0x0801b460
 800f668:	0801b490 	.word	0x0801b490

0800f66c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b085      	sub	sp, #20
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	689b      	ldr	r3, [r3, #8]
 800f678:	2200      	movs	r2, #0
 800f67a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	3303      	adds	r3, #3
 800f682:	f023 0303 	bic.w	r3, r3, #3
 800f686:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f688:	2300      	movs	r3, #0
 800f68a:	60fb      	str	r3, [r7, #12]
 800f68c:	e011      	b.n	800f6b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	689b      	ldr	r3, [r3, #8]
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	689b      	ldr	r3, [r3, #8]
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	881b      	ldrh	r3, [r3, #0]
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	4413      	add	r3, r2
 800f6aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	60fb      	str	r3, [r7, #12]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	885b      	ldrh	r3, [r3, #2]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	dbe7      	blt.n	800f68e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f6be:	bf00      	nop
 800f6c0:	bf00      	nop
 800f6c2:	3714      	adds	r7, #20
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	80fb      	strh	r3, [r7, #6]
 800f6d6:	e009      	b.n	800f6ec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f6d8:	88fb      	ldrh	r3, [r7, #6]
 800f6da:	4a08      	ldr	r2, [pc, #32]	@ (800f6fc <memp_init+0x30>)
 800f6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff ffc3 	bl	800f66c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f6e6:	88fb      	ldrh	r3, [r7, #6]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	80fb      	strh	r3, [r7, #6]
 800f6ec:	88fb      	ldrh	r3, [r7, #6]
 800f6ee:	2b0c      	cmp	r3, #12
 800f6f0:	d9f2      	bls.n	800f6d8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f6f2:	bf00      	nop
 800f6f4:	bf00      	nop
 800f6f6:	3708      	adds	r7, #8
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	0801e17c 	.word	0x0801e17c

0800f700 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f708:	f009 fd76 	bl	80191f8 <sys_arch_protect>
 800f70c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d015      	beq.n	800f748 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	689b      	ldr	r3, [r3, #8]
 800f720:	68ba      	ldr	r2, [r7, #8]
 800f722:	6812      	ldr	r2, [r2, #0]
 800f724:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	f003 0303 	and.w	r3, r3, #3
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d006      	beq.n	800f73e <do_memp_malloc_pool+0x3e>
 800f730:	4b09      	ldr	r3, [pc, #36]	@ (800f758 <do_memp_malloc_pool+0x58>)
 800f732:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800f736:	4909      	ldr	r1, [pc, #36]	@ (800f75c <do_memp_malloc_pool+0x5c>)
 800f738:	4809      	ldr	r0, [pc, #36]	@ (800f760 <do_memp_malloc_pool+0x60>)
 800f73a:	f00a fbcf 	bl	8019edc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f73e:	68f8      	ldr	r0, [r7, #12]
 800f740:	f009 fd68 	bl	8019214 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	e003      	b.n	800f750 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f748:	68f8      	ldr	r0, [r7, #12]
 800f74a:	f009 fd63 	bl	8019214 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3710      	adds	r7, #16
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	0801b4b4 	.word	0x0801b4b4
 800f75c:	0801b4e4 	.word	0x0801b4e4
 800f760:	0801b508 	.word	0x0801b508

0800f764 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d106      	bne.n	800f780 <memp_malloc_pool+0x1c>
 800f772:	4b0a      	ldr	r3, [pc, #40]	@ (800f79c <memp_malloc_pool+0x38>)
 800f774:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800f778:	4909      	ldr	r1, [pc, #36]	@ (800f7a0 <memp_malloc_pool+0x3c>)
 800f77a:	480a      	ldr	r0, [pc, #40]	@ (800f7a4 <memp_malloc_pool+0x40>)
 800f77c:	f00a fbae 	bl	8019edc <iprintf>
  if (desc == NULL) {
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d101      	bne.n	800f78a <memp_malloc_pool+0x26>
    return NULL;
 800f786:	2300      	movs	r3, #0
 800f788:	e003      	b.n	800f792 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f7ff ffb8 	bl	800f700 <do_memp_malloc_pool>
 800f790:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f792:	4618      	mov	r0, r3
 800f794:	3708      	adds	r7, #8
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	0801b4b4 	.word	0x0801b4b4
 800f7a0:	0801b530 	.word	0x0801b530
 800f7a4:	0801b508 	.word	0x0801b508

0800f7a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f7b2:	79fb      	ldrb	r3, [r7, #7]
 800f7b4:	2b0c      	cmp	r3, #12
 800f7b6:	d908      	bls.n	800f7ca <memp_malloc+0x22>
 800f7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f7e4 <memp_malloc+0x3c>)
 800f7ba:	f240 1257 	movw	r2, #343	@ 0x157
 800f7be:	490a      	ldr	r1, [pc, #40]	@ (800f7e8 <memp_malloc+0x40>)
 800f7c0:	480a      	ldr	r0, [pc, #40]	@ (800f7ec <memp_malloc+0x44>)
 800f7c2:	f00a fb8b 	bl	8019edc <iprintf>
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	e008      	b.n	800f7dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f7ca:	79fb      	ldrb	r3, [r7, #7]
 800f7cc:	4a08      	ldr	r2, [pc, #32]	@ (800f7f0 <memp_malloc+0x48>)
 800f7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7ff ff94 	bl	800f700 <do_memp_malloc_pool>
 800f7d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f7da:	68fb      	ldr	r3, [r7, #12]
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	0801b4b4 	.word	0x0801b4b4
 800f7e8:	0801b544 	.word	0x0801b544
 800f7ec:	0801b508 	.word	0x0801b508
 800f7f0:	0801e17c 	.word	0x0801e17c

0800f7f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	f003 0303 	and.w	r3, r3, #3
 800f804:	2b00      	cmp	r3, #0
 800f806:	d006      	beq.n	800f816 <do_memp_free_pool+0x22>
 800f808:	4b0d      	ldr	r3, [pc, #52]	@ (800f840 <do_memp_free_pool+0x4c>)
 800f80a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800f80e:	490d      	ldr	r1, [pc, #52]	@ (800f844 <do_memp_free_pool+0x50>)
 800f810:	480d      	ldr	r0, [pc, #52]	@ (800f848 <do_memp_free_pool+0x54>)
 800f812:	f00a fb63 	bl	8019edc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f81a:	f009 fced 	bl	80191f8 <sys_arch_protect>
 800f81e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	689b      	ldr	r3, [r3, #8]
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	689b      	ldr	r3, [r3, #8]
 800f82e:	68fa      	ldr	r2, [r7, #12]
 800f830:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f832:	68b8      	ldr	r0, [r7, #8]
 800f834:	f009 fcee 	bl	8019214 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f838:	bf00      	nop
 800f83a:	3710      	adds	r7, #16
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	0801b4b4 	.word	0x0801b4b4
 800f844:	0801b564 	.word	0x0801b564
 800f848:	0801b508 	.word	0x0801b508

0800f84c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d106      	bne.n	800f86a <memp_free_pool+0x1e>
 800f85c:	4b0a      	ldr	r3, [pc, #40]	@ (800f888 <memp_free_pool+0x3c>)
 800f85e:	f240 1295 	movw	r2, #405	@ 0x195
 800f862:	490a      	ldr	r1, [pc, #40]	@ (800f88c <memp_free_pool+0x40>)
 800f864:	480a      	ldr	r0, [pc, #40]	@ (800f890 <memp_free_pool+0x44>)
 800f866:	f00a fb39 	bl	8019edc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d007      	beq.n	800f880 <memp_free_pool+0x34>
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d004      	beq.n	800f880 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f7ff ffbb 	bl	800f7f4 <do_memp_free_pool>
 800f87e:	e000      	b.n	800f882 <memp_free_pool+0x36>
    return;
 800f880:	bf00      	nop
}
 800f882:	3708      	adds	r7, #8
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}
 800f888:	0801b4b4 	.word	0x0801b4b4
 800f88c:	0801b530 	.word	0x0801b530
 800f890:	0801b508 	.word	0x0801b508

0800f894 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	4603      	mov	r3, r0
 800f89c:	6039      	str	r1, [r7, #0]
 800f89e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f8a0:	79fb      	ldrb	r3, [r7, #7]
 800f8a2:	2b0c      	cmp	r3, #12
 800f8a4:	d907      	bls.n	800f8b6 <memp_free+0x22>
 800f8a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f8d8 <memp_free+0x44>)
 800f8a8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800f8ac:	490b      	ldr	r1, [pc, #44]	@ (800f8dc <memp_free+0x48>)
 800f8ae:	480c      	ldr	r0, [pc, #48]	@ (800f8e0 <memp_free+0x4c>)
 800f8b0:	f00a fb14 	bl	8019edc <iprintf>
 800f8b4:	e00c      	b.n	800f8d0 <memp_free+0x3c>

  if (mem == NULL) {
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d008      	beq.n	800f8ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f8bc:	79fb      	ldrb	r3, [r7, #7]
 800f8be:	4a09      	ldr	r2, [pc, #36]	@ (800f8e4 <memp_free+0x50>)
 800f8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8c4:	6839      	ldr	r1, [r7, #0]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7ff ff94 	bl	800f7f4 <do_memp_free_pool>
 800f8cc:	e000      	b.n	800f8d0 <memp_free+0x3c>
    return;
 800f8ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	0801b4b4 	.word	0x0801b4b4
 800f8dc:	0801b584 	.word	0x0801b584
 800f8e0:	0801b508 	.word	0x0801b508
 800f8e4:	0801e17c 	.word	0x0801e17c

0800f8e8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f8ec:	bf00      	nop
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
	...

0800f8f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b086      	sub	sp, #24
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	60b9      	str	r1, [r7, #8]
 800f902:	607a      	str	r2, [r7, #4]
 800f904:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d108      	bne.n	800f91e <netif_add+0x26>
 800f90c:	4b57      	ldr	r3, [pc, #348]	@ (800fa6c <netif_add+0x174>)
 800f90e:	f240 1227 	movw	r2, #295	@ 0x127
 800f912:	4957      	ldr	r1, [pc, #348]	@ (800fa70 <netif_add+0x178>)
 800f914:	4857      	ldr	r0, [pc, #348]	@ (800fa74 <netif_add+0x17c>)
 800f916:	f00a fae1 	bl	8019edc <iprintf>
 800f91a:	2300      	movs	r3, #0
 800f91c:	e0a2      	b.n	800fa64 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f920:	2b00      	cmp	r3, #0
 800f922:	d108      	bne.n	800f936 <netif_add+0x3e>
 800f924:	4b51      	ldr	r3, [pc, #324]	@ (800fa6c <netif_add+0x174>)
 800f926:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800f92a:	4953      	ldr	r1, [pc, #332]	@ (800fa78 <netif_add+0x180>)
 800f92c:	4851      	ldr	r0, [pc, #324]	@ (800fa74 <netif_add+0x17c>)
 800f92e:	f00a fad5 	bl	8019edc <iprintf>
 800f932:	2300      	movs	r3, #0
 800f934:	e096      	b.n	800fa64 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d101      	bne.n	800f940 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f93c:	4b4f      	ldr	r3, [pc, #316]	@ (800fa7c <netif_add+0x184>)
 800f93e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d101      	bne.n	800f94a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f946:	4b4d      	ldr	r3, [pc, #308]	@ (800fa7c <netif_add+0x184>)
 800f948:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d101      	bne.n	800f954 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f950:	4b4a      	ldr	r3, [pc, #296]	@ (800fa7c <netif_add+0x184>)
 800f952:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2200      	movs	r2, #0
 800f958:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2200      	movs	r2, #0
 800f95e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2200      	movs	r2, #0
 800f964:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	4a45      	ldr	r2, [pc, #276]	@ (800fa80 <netif_add+0x188>)
 800f96a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2200      	movs	r2, #0
 800f970:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2200      	movs	r2, #0
 800f976:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	2200      	movs	r2, #0
 800f97e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6a3a      	ldr	r2, [r7, #32]
 800f984:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f986:	4b3f      	ldr	r3, [pc, #252]	@ (800fa84 <netif_add+0x18c>)
 800f988:	781a      	ldrb	r2, [r3, #0]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f994:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	68b9      	ldr	r1, [r7, #8]
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f000 f913 	bl	800fbc8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	4798      	blx	r3
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <netif_add+0xba>
    return NULL;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	e058      	b.n	800fa64 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f9b8:	2bff      	cmp	r3, #255	@ 0xff
 800f9ba:	d103      	bne.n	800f9c4 <netif_add+0xcc>
        netif->num = 0;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f9c8:	4b2f      	ldr	r3, [pc, #188]	@ (800fa88 <netif_add+0x190>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	617b      	str	r3, [r7, #20]
 800f9ce:	e02b      	b.n	800fa28 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f9d0:	697a      	ldr	r2, [r7, #20]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d106      	bne.n	800f9e6 <netif_add+0xee>
 800f9d8:	4b24      	ldr	r3, [pc, #144]	@ (800fa6c <netif_add+0x174>)
 800f9da:	f240 128b 	movw	r2, #395	@ 0x18b
 800f9de:	492b      	ldr	r1, [pc, #172]	@ (800fa8c <netif_add+0x194>)
 800f9e0:	4824      	ldr	r0, [pc, #144]	@ (800fa74 <netif_add+0x17c>)
 800f9e2:	f00a fa7b 	bl	8019edc <iprintf>
        num_netifs++;
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	2bff      	cmp	r3, #255	@ 0xff
 800f9f0:	dd06      	ble.n	800fa00 <netif_add+0x108>
 800f9f2:	4b1e      	ldr	r3, [pc, #120]	@ (800fa6c <netif_add+0x174>)
 800f9f4:	f240 128d 	movw	r2, #397	@ 0x18d
 800f9f8:	4925      	ldr	r1, [pc, #148]	@ (800fa90 <netif_add+0x198>)
 800f9fa:	481e      	ldr	r0, [pc, #120]	@ (800fa74 <netif_add+0x17c>)
 800f9fc:	f00a fa6e 	bl	8019edc <iprintf>
        if (netif2->num == netif->num) {
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d108      	bne.n	800fa22 <netif_add+0x12a>
          netif->num++;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fa16:	3301      	adds	r3, #1
 800fa18:	b2da      	uxtb	r2, r3
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800fa20:	e005      	b.n	800fa2e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	617b      	str	r3, [r7, #20]
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1d0      	bne.n	800f9d0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d1be      	bne.n	800f9b2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fa3a:	2bfe      	cmp	r3, #254	@ 0xfe
 800fa3c:	d103      	bne.n	800fa46 <netif_add+0x14e>
    netif_num = 0;
 800fa3e:	4b11      	ldr	r3, [pc, #68]	@ (800fa84 <netif_add+0x18c>)
 800fa40:	2200      	movs	r2, #0
 800fa42:	701a      	strb	r2, [r3, #0]
 800fa44:	e006      	b.n	800fa54 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	b2da      	uxtb	r2, r3
 800fa50:	4b0c      	ldr	r3, [pc, #48]	@ (800fa84 <netif_add+0x18c>)
 800fa52:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fa54:	4b0c      	ldr	r3, [pc, #48]	@ (800fa88 <netif_add+0x190>)
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fa5c:	4a0a      	ldr	r2, [pc, #40]	@ (800fa88 <netif_add+0x190>)
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fa62:	68fb      	ldr	r3, [r7, #12]
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3718      	adds	r7, #24
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	0801b5a0 	.word	0x0801b5a0
 800fa70:	0801b634 	.word	0x0801b634
 800fa74:	0801b5f0 	.word	0x0801b5f0
 800fa78:	0801b650 	.word	0x0801b650
 800fa7c:	0801e1f0 	.word	0x0801e1f0
 800fa80:	0800fea3 	.word	0x0800fea3
 800fa84:	200274a8 	.word	0x200274a8
 800fa88:	200274a0 	.word	0x200274a0
 800fa8c:	0801b674 	.word	0x0801b674
 800fa90:	0801b688 	.word	0x0801b688

0800fa94 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fa9e:	6839      	ldr	r1, [r7, #0]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f002 fb8f 	bl	80121c4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800faa6:	6839      	ldr	r1, [r7, #0]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f006 ff4b 	bl	8016944 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800faae:	bf00      	nop
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
	...

0800fab8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d106      	bne.n	800fad8 <netif_do_set_ipaddr+0x20>
 800faca:	4b1d      	ldr	r3, [pc, #116]	@ (800fb40 <netif_do_set_ipaddr+0x88>)
 800facc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800fad0:	491c      	ldr	r1, [pc, #112]	@ (800fb44 <netif_do_set_ipaddr+0x8c>)
 800fad2:	481d      	ldr	r0, [pc, #116]	@ (800fb48 <netif_do_set_ipaddr+0x90>)
 800fad4:	f00a fa02 	bl	8019edc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d106      	bne.n	800faec <netif_do_set_ipaddr+0x34>
 800fade:	4b18      	ldr	r3, [pc, #96]	@ (800fb40 <netif_do_set_ipaddr+0x88>)
 800fae0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800fae4:	4917      	ldr	r1, [pc, #92]	@ (800fb44 <netif_do_set_ipaddr+0x8c>)
 800fae6:	4818      	ldr	r0, [pc, #96]	@ (800fb48 <netif_do_set_ipaddr+0x90>)
 800fae8:	f00a f9f8 	bl	8019edc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	3304      	adds	r3, #4
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d01c      	beq.n	800fb34 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	3304      	adds	r3, #4
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fb0a:	f107 0314 	add.w	r3, r7, #20
 800fb0e:	4619      	mov	r1, r3
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7ff ffbf 	bl	800fa94 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d002      	beq.n	800fb22 <netif_do_set_ipaddr+0x6a>
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	e000      	b.n	800fb24 <netif_do_set_ipaddr+0x6c>
 800fb22:	2300      	movs	r3, #0
 800fb24:	68fa      	ldr	r2, [r7, #12]
 800fb26:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fb28:	2101      	movs	r1, #1
 800fb2a:	68f8      	ldr	r0, [r7, #12]
 800fb2c:	f000 f8d2 	bl	800fcd4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fb30:	2301      	movs	r3, #1
 800fb32:	e000      	b.n	800fb36 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3718      	adds	r7, #24
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	0801b5a0 	.word	0x0801b5a0
 800fb44:	0801b6b8 	.word	0x0801b6b8
 800fb48:	0801b5f0 	.word	0x0801b5f0

0800fb4c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b085      	sub	sp, #20
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	3308      	adds	r3, #8
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d00a      	beq.n	800fb7c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d002      	beq.n	800fb72 <netif_do_set_netmask+0x26>
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	e000      	b.n	800fb74 <netif_do_set_netmask+0x28>
 800fb72:	2300      	movs	r3, #0
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fb78:	2301      	movs	r3, #1
 800fb7a:	e000      	b.n	800fb7e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3714      	adds	r7, #20
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr

0800fb8a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fb8a:	b480      	push	{r7}
 800fb8c:	b085      	sub	sp, #20
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	60f8      	str	r0, [r7, #12]
 800fb92:	60b9      	str	r1, [r7, #8]
 800fb94:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	330c      	adds	r3, #12
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d00a      	beq.n	800fbba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d002      	beq.n	800fbb0 <netif_do_set_gw+0x26>
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	e000      	b.n	800fbb2 <netif_do_set_gw+0x28>
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	68fa      	ldr	r2, [r7, #12]
 800fbb4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	e000      	b.n	800fbbc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fbba:	2300      	movs	r3, #0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3714      	adds	r7, #20
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b088      	sub	sp, #32
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]
 800fbd4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d101      	bne.n	800fbe8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fbe4:	4b1c      	ldr	r3, [pc, #112]	@ (800fc58 <netif_set_addr+0x90>)
 800fbe6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d101      	bne.n	800fbf2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fbee:	4b1a      	ldr	r3, [pc, #104]	@ (800fc58 <netif_set_addr+0x90>)
 800fbf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d101      	bne.n	800fbfc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fbf8:	4b17      	ldr	r3, [pc, #92]	@ (800fc58 <netif_set_addr+0x90>)
 800fbfa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d003      	beq.n	800fc0a <netif_set_addr+0x42>
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d101      	bne.n	800fc0e <netif_set_addr+0x46>
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e000      	b.n	800fc10 <netif_set_addr+0x48>
 800fc0e:	2300      	movs	r3, #0
 800fc10:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d006      	beq.n	800fc26 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fc18:	f107 0310 	add.w	r3, r7, #16
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	68b9      	ldr	r1, [r7, #8]
 800fc20:	68f8      	ldr	r0, [r7, #12]
 800fc22:	f7ff ff49 	bl	800fab8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fc26:	69fa      	ldr	r2, [r7, #28]
 800fc28:	6879      	ldr	r1, [r7, #4]
 800fc2a:	68f8      	ldr	r0, [r7, #12]
 800fc2c:	f7ff ff8e 	bl	800fb4c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fc30:	69ba      	ldr	r2, [r7, #24]
 800fc32:	6839      	ldr	r1, [r7, #0]
 800fc34:	68f8      	ldr	r0, [r7, #12]
 800fc36:	f7ff ffa8 	bl	800fb8a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d106      	bne.n	800fc4e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fc40:	f107 0310 	add.w	r3, r7, #16
 800fc44:	461a      	mov	r2, r3
 800fc46:	68b9      	ldr	r1, [r7, #8]
 800fc48:	68f8      	ldr	r0, [r7, #12]
 800fc4a:	f7ff ff35 	bl	800fab8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fc4e:	bf00      	nop
 800fc50:	3720      	adds	r7, #32
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
 800fc56:	bf00      	nop
 800fc58:	0801e1f0 	.word	0x0801e1f0

0800fc5c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fc64:	4a04      	ldr	r2, [pc, #16]	@ (800fc78 <netif_set_default+0x1c>)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fc6a:	bf00      	nop
 800fc6c:	370c      	adds	r7, #12
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop
 800fc78:	200274a4 	.word	0x200274a4

0800fc7c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d107      	bne.n	800fc9a <netif_set_up+0x1e>
 800fc8a:	4b0f      	ldr	r3, [pc, #60]	@ (800fcc8 <netif_set_up+0x4c>)
 800fc8c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800fc90:	490e      	ldr	r1, [pc, #56]	@ (800fccc <netif_set_up+0x50>)
 800fc92:	480f      	ldr	r0, [pc, #60]	@ (800fcd0 <netif_set_up+0x54>)
 800fc94:	f00a f922 	bl	8019edc <iprintf>
 800fc98:	e013      	b.n	800fcc2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fca0:	f003 0301 	and.w	r3, r3, #1
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d10c      	bne.n	800fcc2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fcae:	f043 0301 	orr.w	r3, r3, #1
 800fcb2:	b2da      	uxtb	r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fcba:	2103      	movs	r1, #3
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 f809 	bl	800fcd4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	0801b5a0 	.word	0x0801b5a0
 800fccc:	0801b728 	.word	0x0801b728
 800fcd0:	0801b5f0 	.word	0x0801b5f0

0800fcd4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	460b      	mov	r3, r1
 800fcde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d106      	bne.n	800fcf4 <netif_issue_reports+0x20>
 800fce6:	4b18      	ldr	r3, [pc, #96]	@ (800fd48 <netif_issue_reports+0x74>)
 800fce8:	f240 326d 	movw	r2, #877	@ 0x36d
 800fcec:	4917      	ldr	r1, [pc, #92]	@ (800fd4c <netif_issue_reports+0x78>)
 800fcee:	4818      	ldr	r0, [pc, #96]	@ (800fd50 <netif_issue_reports+0x7c>)
 800fcf0:	f00a f8f4 	bl	8019edc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fcfa:	f003 0304 	and.w	r3, r3, #4
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d01e      	beq.n	800fd40 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fd08:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d017      	beq.n	800fd40 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fd10:	78fb      	ldrb	r3, [r7, #3]
 800fd12:	f003 0301 	and.w	r3, r3, #1
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d013      	beq.n	800fd42 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	3304      	adds	r3, #4
 800fd1e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d00e      	beq.n	800fd42 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fd2a:	f003 0308 	and.w	r3, r3, #8
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d007      	beq.n	800fd42 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	3304      	adds	r3, #4
 800fd36:	4619      	mov	r1, r3
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f007 fd6d 	bl	8017818 <etharp_request>
 800fd3e:	e000      	b.n	800fd42 <netif_issue_reports+0x6e>
    return;
 800fd40:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	0801b5a0 	.word	0x0801b5a0
 800fd4c:	0801b744 	.word	0x0801b744
 800fd50:	0801b5f0 	.word	0x0801b5f0

0800fd54 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d107      	bne.n	800fd72 <netif_set_down+0x1e>
 800fd62:	4b12      	ldr	r3, [pc, #72]	@ (800fdac <netif_set_down+0x58>)
 800fd64:	f240 329b 	movw	r2, #923	@ 0x39b
 800fd68:	4911      	ldr	r1, [pc, #68]	@ (800fdb0 <netif_set_down+0x5c>)
 800fd6a:	4812      	ldr	r0, [pc, #72]	@ (800fdb4 <netif_set_down+0x60>)
 800fd6c:	f00a f8b6 	bl	8019edc <iprintf>
 800fd70:	e019      	b.n	800fda6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fd78:	f003 0301 	and.w	r3, r3, #1
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d012      	beq.n	800fda6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fd86:	f023 0301 	bic.w	r3, r3, #1
 800fd8a:	b2da      	uxtb	r2, r3
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fd98:	f003 0308 	and.w	r3, r3, #8
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f007 f8f7 	bl	8016f94 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	0801b5a0 	.word	0x0801b5a0
 800fdb0:	0801b768 	.word	0x0801b768
 800fdb4:	0801b5f0 	.word	0x0801b5f0

0800fdb8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d107      	bne.n	800fdd6 <netif_set_link_up+0x1e>
 800fdc6:	4b13      	ldr	r3, [pc, #76]	@ (800fe14 <netif_set_link_up+0x5c>)
 800fdc8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800fdcc:	4912      	ldr	r1, [pc, #72]	@ (800fe18 <netif_set_link_up+0x60>)
 800fdce:	4813      	ldr	r0, [pc, #76]	@ (800fe1c <netif_set_link_up+0x64>)
 800fdd0:	f00a f884 	bl	8019edc <iprintf>
 800fdd4:	e01b      	b.n	800fe0e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fddc:	f003 0304 	and.w	r3, r3, #4
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d114      	bne.n	800fe0e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fdea:	f043 0304 	orr.w	r3, r3, #4
 800fdee:	b2da      	uxtb	r2, r3
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fdf6:	2103      	movs	r1, #3
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f7ff ff6b 	bl	800fcd4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	69db      	ldr	r3, [r3, #28]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d003      	beq.n	800fe0e <netif_set_link_up+0x56>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	69db      	ldr	r3, [r3, #28]
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fe0e:	3708      	adds	r7, #8
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	0801b5a0 	.word	0x0801b5a0
 800fe18:	0801b788 	.word	0x0801b788
 800fe1c:	0801b5f0 	.word	0x0801b5f0

0800fe20 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d107      	bne.n	800fe3e <netif_set_link_down+0x1e>
 800fe2e:	4b11      	ldr	r3, [pc, #68]	@ (800fe74 <netif_set_link_down+0x54>)
 800fe30:	f240 4206 	movw	r2, #1030	@ 0x406
 800fe34:	4910      	ldr	r1, [pc, #64]	@ (800fe78 <netif_set_link_down+0x58>)
 800fe36:	4811      	ldr	r0, [pc, #68]	@ (800fe7c <netif_set_link_down+0x5c>)
 800fe38:	f00a f850 	bl	8019edc <iprintf>
 800fe3c:	e017      	b.n	800fe6e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe44:	f003 0304 	and.w	r3, r3, #4
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d010      	beq.n	800fe6e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe52:	f023 0304 	bic.w	r3, r3, #4
 800fe56:	b2da      	uxtb	r2, r3
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	69db      	ldr	r3, [r3, #28]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d003      	beq.n	800fe6e <netif_set_link_down+0x4e>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	69db      	ldr	r3, [r3, #28]
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	0801b5a0 	.word	0x0801b5a0
 800fe78:	0801b7ac 	.word	0x0801b7ac
 800fe7c:	0801b5f0 	.word	0x0801b5f0

0800fe80 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d002      	beq.n	800fe96 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	683a      	ldr	r2, [r7, #0]
 800fe94:	61da      	str	r2, [r3, #28]
  }
}
 800fe96:	bf00      	nop
 800fe98:	370c      	adds	r7, #12
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea0:	4770      	bx	lr

0800fea2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fea2:	b480      	push	{r7}
 800fea4:	b085      	sub	sp, #20
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	60f8      	str	r0, [r7, #12]
 800feaa:	60b9      	str	r1, [r7, #8]
 800feac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800feae:	f06f 030b 	mvn.w	r3, #11
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3714      	adds	r7, #20
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
	...

0800fec0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b085      	sub	sp, #20
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	4603      	mov	r3, r0
 800fec8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800feca:	79fb      	ldrb	r3, [r7, #7]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d013      	beq.n	800fef8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fed0:	4b0d      	ldr	r3, [pc, #52]	@ (800ff08 <netif_get_by_index+0x48>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	60fb      	str	r3, [r7, #12]
 800fed6:	e00c      	b.n	800fef2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fede:	3301      	adds	r3, #1
 800fee0:	b2db      	uxtb	r3, r3
 800fee2:	79fa      	ldrb	r2, [r7, #7]
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d101      	bne.n	800feec <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	e006      	b.n	800fefa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	60fb      	str	r3, [r7, #12]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1ef      	bne.n	800fed8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fef8:	2300      	movs	r3, #0
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3714      	adds	r7, #20
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	200274a0 	.word	0x200274a0

0800ff0c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ff12:	f009 f971 	bl	80191f8 <sys_arch_protect>
 800ff16:	6038      	str	r0, [r7, #0]
 800ff18:	4b0d      	ldr	r3, [pc, #52]	@ (800ff50 <pbuf_free_ooseq+0x44>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	701a      	strb	r2, [r3, #0]
 800ff1e:	6838      	ldr	r0, [r7, #0]
 800ff20:	f009 f978 	bl	8019214 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ff24:	4b0b      	ldr	r3, [pc, #44]	@ (800ff54 <pbuf_free_ooseq+0x48>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	607b      	str	r3, [r7, #4]
 800ff2a:	e00a      	b.n	800ff42 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d003      	beq.n	800ff3c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f002 f983 	bl	8012240 <tcp_free_ooseq>
      return;
 800ff3a:	e005      	b.n	800ff48 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	68db      	ldr	r3, [r3, #12]
 800ff40:	607b      	str	r3, [r7, #4]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d1f1      	bne.n	800ff2c <pbuf_free_ooseq+0x20>
    }
  }
}
 800ff48:	3708      	adds	r7, #8
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	200274a9 	.word	0x200274a9
 800ff54:	200274b8 	.word	0x200274b8

0800ff58 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ff60:	f7ff ffd4 	bl	800ff0c <pbuf_free_ooseq>
}
 800ff64:	bf00      	nop
 800ff66:	3708      	adds	r7, #8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ff72:	f009 f941 	bl	80191f8 <sys_arch_protect>
 800ff76:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ff78:	4b0f      	ldr	r3, [pc, #60]	@ (800ffb8 <pbuf_pool_is_empty+0x4c>)
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ff7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ffb8 <pbuf_pool_is_empty+0x4c>)
 800ff80:	2201      	movs	r2, #1
 800ff82:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f009 f945 	bl	8019214 <sys_arch_unprotect>

  if (!queued) {
 800ff8a:	78fb      	ldrb	r3, [r7, #3]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d10f      	bne.n	800ffb0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ff90:	2100      	movs	r1, #0
 800ff92:	480a      	ldr	r0, [pc, #40]	@ (800ffbc <pbuf_pool_is_empty+0x50>)
 800ff94:	f7fe feaa 	bl	800ecec <tcpip_try_callback>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d008      	beq.n	800ffb0 <pbuf_pool_is_empty+0x44>
 800ff9e:	f009 f92b 	bl	80191f8 <sys_arch_protect>
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	4b04      	ldr	r3, [pc, #16]	@ (800ffb8 <pbuf_pool_is_empty+0x4c>)
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	701a      	strb	r2, [r3, #0]
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f009 f932 	bl	8019214 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ffb0:	bf00      	nop
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	200274a9 	.word	0x200274a9
 800ffbc:	0800ff59 	.word	0x0800ff59

0800ffc0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b085      	sub	sp, #20
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	4611      	mov	r1, r2
 800ffcc:	461a      	mov	r2, r3
 800ffce:	460b      	mov	r3, r1
 800ffd0:	80fb      	strh	r3, [r7, #6]
 800ffd2:	4613      	mov	r3, r2
 800ffd4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	68ba      	ldr	r2, [r7, #8]
 800ffe0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	88fa      	ldrh	r2, [r7, #6]
 800ffe6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	88ba      	ldrh	r2, [r7, #4]
 800ffec:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ffee:	8b3b      	ldrh	r3, [r7, #24]
 800fff0:	b2da      	uxtb	r2, r3
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	7f3a      	ldrb	r2, [r7, #28]
 800fffa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2201      	movs	r2, #1
 8010000:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2200      	movs	r2, #0
 8010006:	73da      	strb	r2, [r3, #15]
}
 8010008:	bf00      	nop
 801000a:	3714      	adds	r7, #20
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b08c      	sub	sp, #48	@ 0x30
 8010018:	af02      	add	r7, sp, #8
 801001a:	4603      	mov	r3, r0
 801001c:	71fb      	strb	r3, [r7, #7]
 801001e:	460b      	mov	r3, r1
 8010020:	80bb      	strh	r3, [r7, #4]
 8010022:	4613      	mov	r3, r2
 8010024:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010026:	79fb      	ldrb	r3, [r7, #7]
 8010028:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801002a:	887b      	ldrh	r3, [r7, #2]
 801002c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010030:	d07f      	beq.n	8010132 <pbuf_alloc+0x11e>
 8010032:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010036:	f300 80c8 	bgt.w	80101ca <pbuf_alloc+0x1b6>
 801003a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801003e:	d010      	beq.n	8010062 <pbuf_alloc+0x4e>
 8010040:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010044:	f300 80c1 	bgt.w	80101ca <pbuf_alloc+0x1b6>
 8010048:	2b01      	cmp	r3, #1
 801004a:	d002      	beq.n	8010052 <pbuf_alloc+0x3e>
 801004c:	2b41      	cmp	r3, #65	@ 0x41
 801004e:	f040 80bc 	bne.w	80101ca <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010052:	887a      	ldrh	r2, [r7, #2]
 8010054:	88bb      	ldrh	r3, [r7, #4]
 8010056:	4619      	mov	r1, r3
 8010058:	2000      	movs	r0, #0
 801005a:	f000 f8d1 	bl	8010200 <pbuf_alloc_reference>
 801005e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8010060:	e0bd      	b.n	80101de <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010062:	2300      	movs	r3, #0
 8010064:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8010066:	2300      	movs	r3, #0
 8010068:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801006a:	88bb      	ldrh	r3, [r7, #4]
 801006c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801006e:	200c      	movs	r0, #12
 8010070:	f7ff fb9a 	bl	800f7a8 <memp_malloc>
 8010074:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d109      	bne.n	8010090 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801007c:	f7ff ff76 	bl	800ff6c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010082:	2b00      	cmp	r3, #0
 8010084:	d002      	beq.n	801008c <pbuf_alloc+0x78>
            pbuf_free(p);
 8010086:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010088:	f000 faa8 	bl	80105dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801008c:	2300      	movs	r3, #0
 801008e:	e0a7      	b.n	80101e0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010090:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010092:	3303      	adds	r3, #3
 8010094:	b29b      	uxth	r3, r3
 8010096:	f023 0303 	bic.w	r3, r3, #3
 801009a:	b29b      	uxth	r3, r3
 801009c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	8b7a      	ldrh	r2, [r7, #26]
 80100a4:	4293      	cmp	r3, r2
 80100a6:	bf28      	it	cs
 80100a8:	4613      	movcs	r3, r2
 80100aa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80100ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80100ae:	3310      	adds	r3, #16
 80100b0:	693a      	ldr	r2, [r7, #16]
 80100b2:	4413      	add	r3, r2
 80100b4:	3303      	adds	r3, #3
 80100b6:	f023 0303 	bic.w	r3, r3, #3
 80100ba:	4618      	mov	r0, r3
 80100bc:	89f9      	ldrh	r1, [r7, #14]
 80100be:	8b7a      	ldrh	r2, [r7, #26]
 80100c0:	2300      	movs	r3, #0
 80100c2:	9301      	str	r3, [sp, #4]
 80100c4:	887b      	ldrh	r3, [r7, #2]
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	460b      	mov	r3, r1
 80100ca:	4601      	mov	r1, r0
 80100cc:	6938      	ldr	r0, [r7, #16]
 80100ce:	f7ff ff77 	bl	800ffc0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	f003 0303 	and.w	r3, r3, #3
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d006      	beq.n	80100ec <pbuf_alloc+0xd8>
 80100de:	4b42      	ldr	r3, [pc, #264]	@ (80101e8 <pbuf_alloc+0x1d4>)
 80100e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80100e4:	4941      	ldr	r1, [pc, #260]	@ (80101ec <pbuf_alloc+0x1d8>)
 80100e6:	4842      	ldr	r0, [pc, #264]	@ (80101f0 <pbuf_alloc+0x1dc>)
 80100e8:	f009 fef8 	bl	8019edc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80100ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80100ee:	3303      	adds	r3, #3
 80100f0:	f023 0303 	bic.w	r3, r3, #3
 80100f4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80100f8:	d106      	bne.n	8010108 <pbuf_alloc+0xf4>
 80100fa:	4b3b      	ldr	r3, [pc, #236]	@ (80101e8 <pbuf_alloc+0x1d4>)
 80100fc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8010100:	493c      	ldr	r1, [pc, #240]	@ (80101f4 <pbuf_alloc+0x1e0>)
 8010102:	483b      	ldr	r0, [pc, #236]	@ (80101f0 <pbuf_alloc+0x1dc>)
 8010104:	f009 feea 	bl	8019edc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801010a:	2b00      	cmp	r3, #0
 801010c:	d102      	bne.n	8010114 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	627b      	str	r3, [r7, #36]	@ 0x24
 8010112:	e002      	b.n	801011a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	693a      	ldr	r2, [r7, #16]
 8010118:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801011e:	8b7a      	ldrh	r2, [r7, #26]
 8010120:	89fb      	ldrh	r3, [r7, #14]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010126:	2300      	movs	r3, #0
 8010128:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801012a:	8b7b      	ldrh	r3, [r7, #26]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d19e      	bne.n	801006e <pbuf_alloc+0x5a>
      break;
 8010130:	e055      	b.n	80101de <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010132:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010134:	3303      	adds	r3, #3
 8010136:	b29b      	uxth	r3, r3
 8010138:	f023 0303 	bic.w	r3, r3, #3
 801013c:	b29a      	uxth	r2, r3
 801013e:	88bb      	ldrh	r3, [r7, #4]
 8010140:	3303      	adds	r3, #3
 8010142:	b29b      	uxth	r3, r3
 8010144:	f023 0303 	bic.w	r3, r3, #3
 8010148:	b29b      	uxth	r3, r3
 801014a:	4413      	add	r3, r2
 801014c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801014e:	8b3b      	ldrh	r3, [r7, #24]
 8010150:	3310      	adds	r3, #16
 8010152:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010154:	8b3a      	ldrh	r2, [r7, #24]
 8010156:	88bb      	ldrh	r3, [r7, #4]
 8010158:	3303      	adds	r3, #3
 801015a:	f023 0303 	bic.w	r3, r3, #3
 801015e:	429a      	cmp	r2, r3
 8010160:	d306      	bcc.n	8010170 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010162:	8afa      	ldrh	r2, [r7, #22]
 8010164:	88bb      	ldrh	r3, [r7, #4]
 8010166:	3303      	adds	r3, #3
 8010168:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801016c:	429a      	cmp	r2, r3
 801016e:	d201      	bcs.n	8010174 <pbuf_alloc+0x160>
        return NULL;
 8010170:	2300      	movs	r3, #0
 8010172:	e035      	b.n	80101e0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010174:	8afb      	ldrh	r3, [r7, #22]
 8010176:	4618      	mov	r0, r3
 8010178:	f7ff f972 	bl	800f460 <mem_malloc>
 801017c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801017e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010180:	2b00      	cmp	r3, #0
 8010182:	d101      	bne.n	8010188 <pbuf_alloc+0x174>
        return NULL;
 8010184:	2300      	movs	r3, #0
 8010186:	e02b      	b.n	80101e0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010188:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801018a:	3310      	adds	r3, #16
 801018c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801018e:	4413      	add	r3, r2
 8010190:	3303      	adds	r3, #3
 8010192:	f023 0303 	bic.w	r3, r3, #3
 8010196:	4618      	mov	r0, r3
 8010198:	88b9      	ldrh	r1, [r7, #4]
 801019a:	88ba      	ldrh	r2, [r7, #4]
 801019c:	2300      	movs	r3, #0
 801019e:	9301      	str	r3, [sp, #4]
 80101a0:	887b      	ldrh	r3, [r7, #2]
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	460b      	mov	r3, r1
 80101a6:	4601      	mov	r1, r0
 80101a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80101aa:	f7ff ff09 	bl	800ffc0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80101ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	f003 0303 	and.w	r3, r3, #3
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d010      	beq.n	80101dc <pbuf_alloc+0x1c8>
 80101ba:	4b0b      	ldr	r3, [pc, #44]	@ (80101e8 <pbuf_alloc+0x1d4>)
 80101bc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80101c0:	490d      	ldr	r1, [pc, #52]	@ (80101f8 <pbuf_alloc+0x1e4>)
 80101c2:	480b      	ldr	r0, [pc, #44]	@ (80101f0 <pbuf_alloc+0x1dc>)
 80101c4:	f009 fe8a 	bl	8019edc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80101c8:	e008      	b.n	80101dc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80101ca:	4b07      	ldr	r3, [pc, #28]	@ (80101e8 <pbuf_alloc+0x1d4>)
 80101cc:	f240 1227 	movw	r2, #295	@ 0x127
 80101d0:	490a      	ldr	r1, [pc, #40]	@ (80101fc <pbuf_alloc+0x1e8>)
 80101d2:	4807      	ldr	r0, [pc, #28]	@ (80101f0 <pbuf_alloc+0x1dc>)
 80101d4:	f009 fe82 	bl	8019edc <iprintf>
      return NULL;
 80101d8:	2300      	movs	r3, #0
 80101da:	e001      	b.n	80101e0 <pbuf_alloc+0x1cc>
      break;
 80101dc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80101de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3728      	adds	r7, #40	@ 0x28
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	0801b7d0 	.word	0x0801b7d0
 80101ec:	0801b800 	.word	0x0801b800
 80101f0:	0801b830 	.word	0x0801b830
 80101f4:	0801b858 	.word	0x0801b858
 80101f8:	0801b88c 	.word	0x0801b88c
 80101fc:	0801b8b8 	.word	0x0801b8b8

08010200 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b086      	sub	sp, #24
 8010204:	af02      	add	r7, sp, #8
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	460b      	mov	r3, r1
 801020a:	807b      	strh	r3, [r7, #2]
 801020c:	4613      	mov	r3, r2
 801020e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010210:	883b      	ldrh	r3, [r7, #0]
 8010212:	2b41      	cmp	r3, #65	@ 0x41
 8010214:	d009      	beq.n	801022a <pbuf_alloc_reference+0x2a>
 8010216:	883b      	ldrh	r3, [r7, #0]
 8010218:	2b01      	cmp	r3, #1
 801021a:	d006      	beq.n	801022a <pbuf_alloc_reference+0x2a>
 801021c:	4b0f      	ldr	r3, [pc, #60]	@ (801025c <pbuf_alloc_reference+0x5c>)
 801021e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8010222:	490f      	ldr	r1, [pc, #60]	@ (8010260 <pbuf_alloc_reference+0x60>)
 8010224:	480f      	ldr	r0, [pc, #60]	@ (8010264 <pbuf_alloc_reference+0x64>)
 8010226:	f009 fe59 	bl	8019edc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801022a:	200b      	movs	r0, #11
 801022c:	f7ff fabc 	bl	800f7a8 <memp_malloc>
 8010230:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d101      	bne.n	801023c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010238:	2300      	movs	r3, #0
 801023a:	e00b      	b.n	8010254 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801023c:	8879      	ldrh	r1, [r7, #2]
 801023e:	887a      	ldrh	r2, [r7, #2]
 8010240:	2300      	movs	r3, #0
 8010242:	9301      	str	r3, [sp, #4]
 8010244:	883b      	ldrh	r3, [r7, #0]
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	460b      	mov	r3, r1
 801024a:	6879      	ldr	r1, [r7, #4]
 801024c:	68f8      	ldr	r0, [r7, #12]
 801024e:	f7ff feb7 	bl	800ffc0 <pbuf_init_alloced_pbuf>
  return p;
 8010252:	68fb      	ldr	r3, [r7, #12]
}
 8010254:	4618      	mov	r0, r3
 8010256:	3710      	adds	r7, #16
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	0801b7d0 	.word	0x0801b7d0
 8010260:	0801b8d4 	.word	0x0801b8d4
 8010264:	0801b830 	.word	0x0801b830

08010268 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b088      	sub	sp, #32
 801026c:	af02      	add	r7, sp, #8
 801026e:	607b      	str	r3, [r7, #4]
 8010270:	4603      	mov	r3, r0
 8010272:	73fb      	strb	r3, [r7, #15]
 8010274:	460b      	mov	r3, r1
 8010276:	81bb      	strh	r3, [r7, #12]
 8010278:	4613      	mov	r3, r2
 801027a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801027c:	7bfb      	ldrb	r3, [r7, #15]
 801027e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010280:	8a7b      	ldrh	r3, [r7, #18]
 8010282:	3303      	adds	r3, #3
 8010284:	f023 0203 	bic.w	r2, r3, #3
 8010288:	89bb      	ldrh	r3, [r7, #12]
 801028a:	441a      	add	r2, r3
 801028c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801028e:	429a      	cmp	r2, r3
 8010290:	d901      	bls.n	8010296 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010292:	2300      	movs	r3, #0
 8010294:	e018      	b.n	80102c8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010296:	6a3b      	ldr	r3, [r7, #32]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d007      	beq.n	80102ac <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801029c:	8a7b      	ldrh	r3, [r7, #18]
 801029e:	3303      	adds	r3, #3
 80102a0:	f023 0303 	bic.w	r3, r3, #3
 80102a4:	6a3a      	ldr	r2, [r7, #32]
 80102a6:	4413      	add	r3, r2
 80102a8:	617b      	str	r3, [r7, #20]
 80102aa:	e001      	b.n	80102b0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80102ac:	2300      	movs	r3, #0
 80102ae:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	89b9      	ldrh	r1, [r7, #12]
 80102b4:	89ba      	ldrh	r2, [r7, #12]
 80102b6:	2302      	movs	r3, #2
 80102b8:	9301      	str	r3, [sp, #4]
 80102ba:	897b      	ldrh	r3, [r7, #10]
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	460b      	mov	r3, r1
 80102c0:	6979      	ldr	r1, [r7, #20]
 80102c2:	f7ff fe7d 	bl	800ffc0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80102c6:	687b      	ldr	r3, [r7, #4]
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3718      	adds	r7, #24
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	460b      	mov	r3, r1
 80102da:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d106      	bne.n	80102f0 <pbuf_realloc+0x20>
 80102e2:	4b3a      	ldr	r3, [pc, #232]	@ (80103cc <pbuf_realloc+0xfc>)
 80102e4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80102e8:	4939      	ldr	r1, [pc, #228]	@ (80103d0 <pbuf_realloc+0x100>)
 80102ea:	483a      	ldr	r0, [pc, #232]	@ (80103d4 <pbuf_realloc+0x104>)
 80102ec:	f009 fdf6 	bl	8019edc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	891b      	ldrh	r3, [r3, #8]
 80102f4:	887a      	ldrh	r2, [r7, #2]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d263      	bcs.n	80103c2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	891a      	ldrh	r2, [r3, #8]
 80102fe:	887b      	ldrh	r3, [r7, #2]
 8010300:	1ad3      	subs	r3, r2, r3
 8010302:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010304:	887b      	ldrh	r3, [r7, #2]
 8010306:	817b      	strh	r3, [r7, #10]
  q = p;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801030c:	e018      	b.n	8010340 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	895b      	ldrh	r3, [r3, #10]
 8010312:	897a      	ldrh	r2, [r7, #10]
 8010314:	1ad3      	subs	r3, r2, r3
 8010316:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	891a      	ldrh	r2, [r3, #8]
 801031c:	893b      	ldrh	r3, [r7, #8]
 801031e:	1ad3      	subs	r3, r2, r3
 8010320:	b29a      	uxth	r2, r3
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d106      	bne.n	8010340 <pbuf_realloc+0x70>
 8010332:	4b26      	ldr	r3, [pc, #152]	@ (80103cc <pbuf_realloc+0xfc>)
 8010334:	f240 12af 	movw	r2, #431	@ 0x1af
 8010338:	4927      	ldr	r1, [pc, #156]	@ (80103d8 <pbuf_realloc+0x108>)
 801033a:	4826      	ldr	r0, [pc, #152]	@ (80103d4 <pbuf_realloc+0x104>)
 801033c:	f009 fdce 	bl	8019edc <iprintf>
  while (rem_len > q->len) {
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	895b      	ldrh	r3, [r3, #10]
 8010344:	897a      	ldrh	r2, [r7, #10]
 8010346:	429a      	cmp	r2, r3
 8010348:	d8e1      	bhi.n	801030e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	7b1b      	ldrb	r3, [r3, #12]
 801034e:	f003 030f 	and.w	r3, r3, #15
 8010352:	2b00      	cmp	r3, #0
 8010354:	d121      	bne.n	801039a <pbuf_realloc+0xca>
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	895b      	ldrh	r3, [r3, #10]
 801035a:	897a      	ldrh	r2, [r7, #10]
 801035c:	429a      	cmp	r2, r3
 801035e:	d01c      	beq.n	801039a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	7b5b      	ldrb	r3, [r3, #13]
 8010364:	f003 0302 	and.w	r3, r3, #2
 8010368:	2b00      	cmp	r3, #0
 801036a:	d116      	bne.n	801039a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	685a      	ldr	r2, [r3, #4]
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	1ad3      	subs	r3, r2, r3
 8010374:	b29a      	uxth	r2, r3
 8010376:	897b      	ldrh	r3, [r7, #10]
 8010378:	4413      	add	r3, r2
 801037a:	b29b      	uxth	r3, r3
 801037c:	4619      	mov	r1, r3
 801037e:	68f8      	ldr	r0, [r7, #12]
 8010380:	f7fe ff64 	bl	800f24c <mem_trim>
 8010384:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d106      	bne.n	801039a <pbuf_realloc+0xca>
 801038c:	4b0f      	ldr	r3, [pc, #60]	@ (80103cc <pbuf_realloc+0xfc>)
 801038e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8010392:	4912      	ldr	r1, [pc, #72]	@ (80103dc <pbuf_realloc+0x10c>)
 8010394:	480f      	ldr	r0, [pc, #60]	@ (80103d4 <pbuf_realloc+0x104>)
 8010396:	f009 fda1 	bl	8019edc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	897a      	ldrh	r2, [r7, #10]
 801039e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	895a      	ldrh	r2, [r3, #10]
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d004      	beq.n	80103ba <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f000 f911 	bl	80105dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2200      	movs	r2, #0
 80103be:	601a      	str	r2, [r3, #0]
 80103c0:	e000      	b.n	80103c4 <pbuf_realloc+0xf4>
    return;
 80103c2:	bf00      	nop

}
 80103c4:	3710      	adds	r7, #16
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	0801b7d0 	.word	0x0801b7d0
 80103d0:	0801b8e8 	.word	0x0801b8e8
 80103d4:	0801b830 	.word	0x0801b830
 80103d8:	0801b900 	.word	0x0801b900
 80103dc:	0801b918 	.word	0x0801b918

080103e0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b086      	sub	sp, #24
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	4613      	mov	r3, r2
 80103ec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d106      	bne.n	8010402 <pbuf_add_header_impl+0x22>
 80103f4:	4b2b      	ldr	r3, [pc, #172]	@ (80104a4 <pbuf_add_header_impl+0xc4>)
 80103f6:	f240 12df 	movw	r2, #479	@ 0x1df
 80103fa:	492b      	ldr	r1, [pc, #172]	@ (80104a8 <pbuf_add_header_impl+0xc8>)
 80103fc:	482b      	ldr	r0, [pc, #172]	@ (80104ac <pbuf_add_header_impl+0xcc>)
 80103fe:	f009 fd6d 	bl	8019edc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d003      	beq.n	8010410 <pbuf_add_header_impl+0x30>
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801040e:	d301      	bcc.n	8010414 <pbuf_add_header_impl+0x34>
    return 1;
 8010410:	2301      	movs	r3, #1
 8010412:	e043      	b.n	801049c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d101      	bne.n	801041e <pbuf_add_header_impl+0x3e>
    return 0;
 801041a:	2300      	movs	r3, #0
 801041c:	e03e      	b.n	801049c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	891a      	ldrh	r2, [r3, #8]
 8010426:	8a7b      	ldrh	r3, [r7, #18]
 8010428:	4413      	add	r3, r2
 801042a:	b29b      	uxth	r3, r3
 801042c:	8a7a      	ldrh	r2, [r7, #18]
 801042e:	429a      	cmp	r2, r3
 8010430:	d901      	bls.n	8010436 <pbuf_add_header_impl+0x56>
    return 1;
 8010432:	2301      	movs	r3, #1
 8010434:	e032      	b.n	801049c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	7b1b      	ldrb	r3, [r3, #12]
 801043a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801043c:	8a3b      	ldrh	r3, [r7, #16]
 801043e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00c      	beq.n	8010460 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	685a      	ldr	r2, [r3, #4]
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	425b      	negs	r3, r3
 801044e:	4413      	add	r3, r2
 8010450:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	3310      	adds	r3, #16
 8010456:	697a      	ldr	r2, [r7, #20]
 8010458:	429a      	cmp	r2, r3
 801045a:	d20d      	bcs.n	8010478 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801045c:	2301      	movs	r3, #1
 801045e:	e01d      	b.n	801049c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010460:	79fb      	ldrb	r3, [r7, #7]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d006      	beq.n	8010474 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	685a      	ldr	r2, [r3, #4]
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	425b      	negs	r3, r3
 801046e:	4413      	add	r3, r2
 8010470:	617b      	str	r3, [r7, #20]
 8010472:	e001      	b.n	8010478 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010474:	2301      	movs	r3, #1
 8010476:	e011      	b.n	801049c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	697a      	ldr	r2, [r7, #20]
 801047c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	895a      	ldrh	r2, [r3, #10]
 8010482:	8a7b      	ldrh	r3, [r7, #18]
 8010484:	4413      	add	r3, r2
 8010486:	b29a      	uxth	r2, r3
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	891a      	ldrh	r2, [r3, #8]
 8010490:	8a7b      	ldrh	r3, [r7, #18]
 8010492:	4413      	add	r3, r2
 8010494:	b29a      	uxth	r2, r3
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	811a      	strh	r2, [r3, #8]


  return 0;
 801049a:	2300      	movs	r3, #0
}
 801049c:	4618      	mov	r0, r3
 801049e:	3718      	adds	r7, #24
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	0801b7d0 	.word	0x0801b7d0
 80104a8:	0801b934 	.word	0x0801b934
 80104ac:	0801b830 	.word	0x0801b830

080104b0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80104ba:	2200      	movs	r2, #0
 80104bc:	6839      	ldr	r1, [r7, #0]
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f7ff ff8e 	bl	80103e0 <pbuf_add_header_impl>
 80104c4:	4603      	mov	r3, r0
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3708      	adds	r7, #8
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
	...

080104d0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d106      	bne.n	80104ee <pbuf_remove_header+0x1e>
 80104e0:	4b20      	ldr	r3, [pc, #128]	@ (8010564 <pbuf_remove_header+0x94>)
 80104e2:	f240 224b 	movw	r2, #587	@ 0x24b
 80104e6:	4920      	ldr	r1, [pc, #128]	@ (8010568 <pbuf_remove_header+0x98>)
 80104e8:	4820      	ldr	r0, [pc, #128]	@ (801056c <pbuf_remove_header+0x9c>)
 80104ea:	f009 fcf7 	bl	8019edc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d003      	beq.n	80104fc <pbuf_remove_header+0x2c>
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104fa:	d301      	bcc.n	8010500 <pbuf_remove_header+0x30>
    return 1;
 80104fc:	2301      	movs	r3, #1
 80104fe:	e02c      	b.n	801055a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d101      	bne.n	801050a <pbuf_remove_header+0x3a>
    return 0;
 8010506:	2300      	movs	r3, #0
 8010508:	e027      	b.n	801055a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	895b      	ldrh	r3, [r3, #10]
 8010512:	89fa      	ldrh	r2, [r7, #14]
 8010514:	429a      	cmp	r2, r3
 8010516:	d908      	bls.n	801052a <pbuf_remove_header+0x5a>
 8010518:	4b12      	ldr	r3, [pc, #72]	@ (8010564 <pbuf_remove_header+0x94>)
 801051a:	f240 2255 	movw	r2, #597	@ 0x255
 801051e:	4914      	ldr	r1, [pc, #80]	@ (8010570 <pbuf_remove_header+0xa0>)
 8010520:	4812      	ldr	r0, [pc, #72]	@ (801056c <pbuf_remove_header+0x9c>)
 8010522:	f009 fcdb 	bl	8019edc <iprintf>
 8010526:	2301      	movs	r3, #1
 8010528:	e017      	b.n	801055a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	685a      	ldr	r2, [r3, #4]
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	441a      	add	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	895a      	ldrh	r2, [r3, #10]
 8010540:	89fb      	ldrh	r3, [r7, #14]
 8010542:	1ad3      	subs	r3, r2, r3
 8010544:	b29a      	uxth	r2, r3
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	891a      	ldrh	r2, [r3, #8]
 801054e:	89fb      	ldrh	r3, [r7, #14]
 8010550:	1ad3      	subs	r3, r2, r3
 8010552:	b29a      	uxth	r2, r3
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010558:	2300      	movs	r3, #0
}
 801055a:	4618      	mov	r0, r3
 801055c:	3710      	adds	r7, #16
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	0801b7d0 	.word	0x0801b7d0
 8010568:	0801b934 	.word	0x0801b934
 801056c:	0801b830 	.word	0x0801b830
 8010570:	0801b940 	.word	0x0801b940

08010574 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	460b      	mov	r3, r1
 801057e:	807b      	strh	r3, [r7, #2]
 8010580:	4613      	mov	r3, r2
 8010582:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010584:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010588:	2b00      	cmp	r3, #0
 801058a:	da08      	bge.n	801059e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801058c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010590:	425b      	negs	r3, r3
 8010592:	4619      	mov	r1, r3
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f7ff ff9b 	bl	80104d0 <pbuf_remove_header>
 801059a:	4603      	mov	r3, r0
 801059c:	e007      	b.n	80105ae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801059e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80105a2:	787a      	ldrb	r2, [r7, #1]
 80105a4:	4619      	mov	r1, r3
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f7ff ff1a 	bl	80103e0 <pbuf_add_header_impl>
 80105ac:	4603      	mov	r3, r0
  }
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3708      	adds	r7, #8
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}

080105b6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80105b6:	b580      	push	{r7, lr}
 80105b8:	b082      	sub	sp, #8
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
 80105be:	460b      	mov	r3, r1
 80105c0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80105c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80105c6:	2201      	movs	r2, #1
 80105c8:	4619      	mov	r1, r3
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f7ff ffd2 	bl	8010574 <pbuf_header_impl>
 80105d0:	4603      	mov	r3, r0
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
	...

080105dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b088      	sub	sp, #32
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d10b      	bne.n	8010602 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d106      	bne.n	80105fe <pbuf_free+0x22>
 80105f0:	4b3b      	ldr	r3, [pc, #236]	@ (80106e0 <pbuf_free+0x104>)
 80105f2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80105f6:	493b      	ldr	r1, [pc, #236]	@ (80106e4 <pbuf_free+0x108>)
 80105f8:	483b      	ldr	r0, [pc, #236]	@ (80106e8 <pbuf_free+0x10c>)
 80105fa:	f009 fc6f 	bl	8019edc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80105fe:	2300      	movs	r3, #0
 8010600:	e069      	b.n	80106d6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010602:	2300      	movs	r3, #0
 8010604:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010606:	e062      	b.n	80106ce <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010608:	f008 fdf6 	bl	80191f8 <sys_arch_protect>
 801060c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	7b9b      	ldrb	r3, [r3, #14]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d106      	bne.n	8010624 <pbuf_free+0x48>
 8010616:	4b32      	ldr	r3, [pc, #200]	@ (80106e0 <pbuf_free+0x104>)
 8010618:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801061c:	4933      	ldr	r1, [pc, #204]	@ (80106ec <pbuf_free+0x110>)
 801061e:	4832      	ldr	r0, [pc, #200]	@ (80106e8 <pbuf_free+0x10c>)
 8010620:	f009 fc5c 	bl	8019edc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	7b9b      	ldrb	r3, [r3, #14]
 8010628:	3b01      	subs	r3, #1
 801062a:	b2da      	uxtb	r2, r3
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	739a      	strb	r2, [r3, #14]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	7b9b      	ldrb	r3, [r3, #14]
 8010634:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010636:	69b8      	ldr	r0, [r7, #24]
 8010638:	f008 fdec 	bl	8019214 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801063c:	7dfb      	ldrb	r3, [r7, #23]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d143      	bne.n	80106ca <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	7b1b      	ldrb	r3, [r3, #12]
 801064c:	f003 030f 	and.w	r3, r3, #15
 8010650:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	7b5b      	ldrb	r3, [r3, #13]
 8010656:	f003 0302 	and.w	r3, r3, #2
 801065a:	2b00      	cmp	r3, #0
 801065c:	d011      	beq.n	8010682 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	691b      	ldr	r3, [r3, #16]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d106      	bne.n	8010678 <pbuf_free+0x9c>
 801066a:	4b1d      	ldr	r3, [pc, #116]	@ (80106e0 <pbuf_free+0x104>)
 801066c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010670:	491f      	ldr	r1, [pc, #124]	@ (80106f0 <pbuf_free+0x114>)
 8010672:	481d      	ldr	r0, [pc, #116]	@ (80106e8 <pbuf_free+0x10c>)
 8010674:	f009 fc32 	bl	8019edc <iprintf>
        pc->custom_free_function(p);
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	691b      	ldr	r3, [r3, #16]
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	4798      	blx	r3
 8010680:	e01d      	b.n	80106be <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010682:	7bfb      	ldrb	r3, [r7, #15]
 8010684:	2b02      	cmp	r3, #2
 8010686:	d104      	bne.n	8010692 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010688:	6879      	ldr	r1, [r7, #4]
 801068a:	200c      	movs	r0, #12
 801068c:	f7ff f902 	bl	800f894 <memp_free>
 8010690:	e015      	b.n	80106be <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010692:	7bfb      	ldrb	r3, [r7, #15]
 8010694:	2b01      	cmp	r3, #1
 8010696:	d104      	bne.n	80106a2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010698:	6879      	ldr	r1, [r7, #4]
 801069a:	200b      	movs	r0, #11
 801069c:	f7ff f8fa 	bl	800f894 <memp_free>
 80106a0:	e00d      	b.n	80106be <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80106a2:	7bfb      	ldrb	r3, [r7, #15]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d103      	bne.n	80106b0 <pbuf_free+0xd4>
          mem_free(p);
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f7fe fd3f 	bl	800f12c <mem_free>
 80106ae:	e006      	b.n	80106be <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80106b0:	4b0b      	ldr	r3, [pc, #44]	@ (80106e0 <pbuf_free+0x104>)
 80106b2:	f240 320f 	movw	r2, #783	@ 0x30f
 80106b6:	490f      	ldr	r1, [pc, #60]	@ (80106f4 <pbuf_free+0x118>)
 80106b8:	480b      	ldr	r0, [pc, #44]	@ (80106e8 <pbuf_free+0x10c>)
 80106ba:	f009 fc0f 	bl	8019edc <iprintf>
        }
      }
      count++;
 80106be:	7ffb      	ldrb	r3, [r7, #31]
 80106c0:	3301      	adds	r3, #1
 80106c2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	607b      	str	r3, [r7, #4]
 80106c8:	e001      	b.n	80106ce <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80106ca:	2300      	movs	r3, #0
 80106cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d199      	bne.n	8010608 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80106d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3720      	adds	r7, #32
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	0801b7d0 	.word	0x0801b7d0
 80106e4:	0801b934 	.word	0x0801b934
 80106e8:	0801b830 	.word	0x0801b830
 80106ec:	0801b960 	.word	0x0801b960
 80106f0:	0801b978 	.word	0x0801b978
 80106f4:	0801b99c 	.word	0x0801b99c

080106f8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010700:	2300      	movs	r3, #0
 8010702:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010704:	e005      	b.n	8010712 <pbuf_clen+0x1a>
    ++len;
 8010706:	89fb      	ldrh	r3, [r7, #14]
 8010708:	3301      	adds	r3, #1
 801070a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d1f6      	bne.n	8010706 <pbuf_clen+0xe>
  }
  return len;
 8010718:	89fb      	ldrh	r3, [r7, #14]
}
 801071a:	4618      	mov	r0, r3
 801071c:	3714      	adds	r7, #20
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr
	...

08010728 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b084      	sub	sp, #16
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d016      	beq.n	8010764 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010736:	f008 fd5f 	bl	80191f8 <sys_arch_protect>
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	7b9b      	ldrb	r3, [r3, #14]
 8010740:	3301      	adds	r3, #1
 8010742:	b2da      	uxtb	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	739a      	strb	r2, [r3, #14]
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f008 fd63 	bl	8019214 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	7b9b      	ldrb	r3, [r3, #14]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d106      	bne.n	8010764 <pbuf_ref+0x3c>
 8010756:	4b05      	ldr	r3, [pc, #20]	@ (801076c <pbuf_ref+0x44>)
 8010758:	f240 3242 	movw	r2, #834	@ 0x342
 801075c:	4904      	ldr	r1, [pc, #16]	@ (8010770 <pbuf_ref+0x48>)
 801075e:	4805      	ldr	r0, [pc, #20]	@ (8010774 <pbuf_ref+0x4c>)
 8010760:	f009 fbbc 	bl	8019edc <iprintf>
  }
}
 8010764:	bf00      	nop
 8010766:	3710      	adds	r7, #16
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	0801b7d0 	.word	0x0801b7d0
 8010770:	0801b9b0 	.word	0x0801b9b0
 8010774:	0801b830 	.word	0x0801b830

08010778 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d002      	beq.n	801078e <pbuf_cat+0x16>
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d107      	bne.n	801079e <pbuf_cat+0x26>
 801078e:	4b20      	ldr	r3, [pc, #128]	@ (8010810 <pbuf_cat+0x98>)
 8010790:	f240 3259 	movw	r2, #857	@ 0x359
 8010794:	491f      	ldr	r1, [pc, #124]	@ (8010814 <pbuf_cat+0x9c>)
 8010796:	4820      	ldr	r0, [pc, #128]	@ (8010818 <pbuf_cat+0xa0>)
 8010798:	f009 fba0 	bl	8019edc <iprintf>
 801079c:	e034      	b.n	8010808 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	60fb      	str	r3, [r7, #12]
 80107a2:	e00a      	b.n	80107ba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	891a      	ldrh	r2, [r3, #8]
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	891b      	ldrh	r3, [r3, #8]
 80107ac:	4413      	add	r3, r2
 80107ae:	b29a      	uxth	r2, r3
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	60fb      	str	r3, [r7, #12]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d1f0      	bne.n	80107a4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	891a      	ldrh	r2, [r3, #8]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	895b      	ldrh	r3, [r3, #10]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d006      	beq.n	80107dc <pbuf_cat+0x64>
 80107ce:	4b10      	ldr	r3, [pc, #64]	@ (8010810 <pbuf_cat+0x98>)
 80107d0:	f240 3262 	movw	r2, #866	@ 0x362
 80107d4:	4911      	ldr	r1, [pc, #68]	@ (801081c <pbuf_cat+0xa4>)
 80107d6:	4810      	ldr	r0, [pc, #64]	@ (8010818 <pbuf_cat+0xa0>)
 80107d8:	f009 fb80 	bl	8019edc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d006      	beq.n	80107f2 <pbuf_cat+0x7a>
 80107e4:	4b0a      	ldr	r3, [pc, #40]	@ (8010810 <pbuf_cat+0x98>)
 80107e6:	f240 3263 	movw	r2, #867	@ 0x363
 80107ea:	490d      	ldr	r1, [pc, #52]	@ (8010820 <pbuf_cat+0xa8>)
 80107ec:	480a      	ldr	r0, [pc, #40]	@ (8010818 <pbuf_cat+0xa0>)
 80107ee:	f009 fb75 	bl	8019edc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	891a      	ldrh	r2, [r3, #8]
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	891b      	ldrh	r3, [r3, #8]
 80107fa:	4413      	add	r3, r2
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	683a      	ldr	r2, [r7, #0]
 8010806:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010808:	3710      	adds	r7, #16
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	0801b7d0 	.word	0x0801b7d0
 8010814:	0801b9c4 	.word	0x0801b9c4
 8010818:	0801b830 	.word	0x0801b830
 801081c:	0801b9fc 	.word	0x0801b9fc
 8010820:	0801ba2c 	.word	0x0801ba2c

08010824 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801082e:	6839      	ldr	r1, [r7, #0]
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7ff ffa1 	bl	8010778 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010836:	6838      	ldr	r0, [r7, #0]
 8010838:	f7ff ff76 	bl	8010728 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801083c:	bf00      	nop
 801083e:	3708      	adds	r7, #8
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b086      	sub	sp, #24
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801084e:	2300      	movs	r3, #0
 8010850:	617b      	str	r3, [r7, #20]
 8010852:	2300      	movs	r3, #0
 8010854:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d008      	beq.n	801086e <pbuf_copy+0x2a>
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d005      	beq.n	801086e <pbuf_copy+0x2a>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	891a      	ldrh	r2, [r3, #8]
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	891b      	ldrh	r3, [r3, #8]
 801086a:	429a      	cmp	r2, r3
 801086c:	d209      	bcs.n	8010882 <pbuf_copy+0x3e>
 801086e:	4b57      	ldr	r3, [pc, #348]	@ (80109cc <pbuf_copy+0x188>)
 8010870:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8010874:	4956      	ldr	r1, [pc, #344]	@ (80109d0 <pbuf_copy+0x18c>)
 8010876:	4857      	ldr	r0, [pc, #348]	@ (80109d4 <pbuf_copy+0x190>)
 8010878:	f009 fb30 	bl	8019edc <iprintf>
 801087c:	f06f 030f 	mvn.w	r3, #15
 8010880:	e09f      	b.n	80109c2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	895b      	ldrh	r3, [r3, #10]
 8010886:	461a      	mov	r2, r3
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	1ad2      	subs	r2, r2, r3
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	895b      	ldrh	r3, [r3, #10]
 8010890:	4619      	mov	r1, r3
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	1acb      	subs	r3, r1, r3
 8010896:	429a      	cmp	r2, r3
 8010898:	d306      	bcc.n	80108a8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	895b      	ldrh	r3, [r3, #10]
 801089e:	461a      	mov	r2, r3
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	60fb      	str	r3, [r7, #12]
 80108a6:	e005      	b.n	80108b4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	895b      	ldrh	r3, [r3, #10]
 80108ac:	461a      	mov	r2, r3
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	1ad3      	subs	r3, r2, r3
 80108b2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685a      	ldr	r2, [r3, #4]
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	18d0      	adds	r0, r2, r3
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	685a      	ldr	r2, [r3, #4]
 80108c0:	693b      	ldr	r3, [r7, #16]
 80108c2:	4413      	add	r3, r2
 80108c4:	68fa      	ldr	r2, [r7, #12]
 80108c6:	4619      	mov	r1, r3
 80108c8:	f009 fd33 	bl	801a332 <memcpy>
    offset_to += len;
 80108cc:	697a      	ldr	r2, [r7, #20]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	4413      	add	r3, r2
 80108d2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80108d4:	693a      	ldr	r2, [r7, #16]
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	4413      	add	r3, r2
 80108da:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	895b      	ldrh	r3, [r3, #10]
 80108e0:	461a      	mov	r2, r3
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d906      	bls.n	80108f6 <pbuf_copy+0xb2>
 80108e8:	4b38      	ldr	r3, [pc, #224]	@ (80109cc <pbuf_copy+0x188>)
 80108ea:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80108ee:	493a      	ldr	r1, [pc, #232]	@ (80109d8 <pbuf_copy+0x194>)
 80108f0:	4838      	ldr	r0, [pc, #224]	@ (80109d4 <pbuf_copy+0x190>)
 80108f2:	f009 faf3 	bl	8019edc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	895b      	ldrh	r3, [r3, #10]
 80108fa:	461a      	mov	r2, r3
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	4293      	cmp	r3, r2
 8010900:	d906      	bls.n	8010910 <pbuf_copy+0xcc>
 8010902:	4b32      	ldr	r3, [pc, #200]	@ (80109cc <pbuf_copy+0x188>)
 8010904:	f240 32da 	movw	r2, #986	@ 0x3da
 8010908:	4934      	ldr	r1, [pc, #208]	@ (80109dc <pbuf_copy+0x198>)
 801090a:	4832      	ldr	r0, [pc, #200]	@ (80109d4 <pbuf_copy+0x190>)
 801090c:	f009 fae6 	bl	8019edc <iprintf>
    if (offset_from >= p_from->len) {
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	895b      	ldrh	r3, [r3, #10]
 8010914:	461a      	mov	r2, r3
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	4293      	cmp	r3, r2
 801091a:	d304      	bcc.n	8010926 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801091c:	2300      	movs	r3, #0
 801091e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	895b      	ldrh	r3, [r3, #10]
 801092a:	461a      	mov	r2, r3
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	4293      	cmp	r3, r2
 8010930:	d114      	bne.n	801095c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010932:	2300      	movs	r3, #0
 8010934:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d10c      	bne.n	801095c <pbuf_copy+0x118>
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d009      	beq.n	801095c <pbuf_copy+0x118>
 8010948:	4b20      	ldr	r3, [pc, #128]	@ (80109cc <pbuf_copy+0x188>)
 801094a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801094e:	4924      	ldr	r1, [pc, #144]	@ (80109e0 <pbuf_copy+0x19c>)
 8010950:	4820      	ldr	r0, [pc, #128]	@ (80109d4 <pbuf_copy+0x190>)
 8010952:	f009 fac3 	bl	8019edc <iprintf>
 8010956:	f06f 030f 	mvn.w	r3, #15
 801095a:	e032      	b.n	80109c2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d013      	beq.n	801098a <pbuf_copy+0x146>
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	895a      	ldrh	r2, [r3, #10]
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	891b      	ldrh	r3, [r3, #8]
 801096a:	429a      	cmp	r2, r3
 801096c:	d10d      	bne.n	801098a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d009      	beq.n	801098a <pbuf_copy+0x146>
 8010976:	4b15      	ldr	r3, [pc, #84]	@ (80109cc <pbuf_copy+0x188>)
 8010978:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801097c:	4919      	ldr	r1, [pc, #100]	@ (80109e4 <pbuf_copy+0x1a0>)
 801097e:	4815      	ldr	r0, [pc, #84]	@ (80109d4 <pbuf_copy+0x190>)
 8010980:	f009 faac 	bl	8019edc <iprintf>
 8010984:	f06f 0305 	mvn.w	r3, #5
 8010988:	e01b      	b.n	80109c2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d013      	beq.n	80109b8 <pbuf_copy+0x174>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	895a      	ldrh	r2, [r3, #10]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	891b      	ldrh	r3, [r3, #8]
 8010998:	429a      	cmp	r2, r3
 801099a:	d10d      	bne.n	80109b8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d009      	beq.n	80109b8 <pbuf_copy+0x174>
 80109a4:	4b09      	ldr	r3, [pc, #36]	@ (80109cc <pbuf_copy+0x188>)
 80109a6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80109aa:	490e      	ldr	r1, [pc, #56]	@ (80109e4 <pbuf_copy+0x1a0>)
 80109ac:	4809      	ldr	r0, [pc, #36]	@ (80109d4 <pbuf_copy+0x190>)
 80109ae:	f009 fa95 	bl	8019edc <iprintf>
 80109b2:	f06f 0305 	mvn.w	r3, #5
 80109b6:	e004      	b.n	80109c2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	f47f af61 	bne.w	8010882 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80109c0:	2300      	movs	r3, #0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3718      	adds	r7, #24
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop
 80109cc:	0801b7d0 	.word	0x0801b7d0
 80109d0:	0801ba78 	.word	0x0801ba78
 80109d4:	0801b830 	.word	0x0801b830
 80109d8:	0801baa8 	.word	0x0801baa8
 80109dc:	0801bac0 	.word	0x0801bac0
 80109e0:	0801badc 	.word	0x0801badc
 80109e4:	0801baec 	.word	0x0801baec

080109e8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b088      	sub	sp, #32
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	4611      	mov	r1, r2
 80109f4:	461a      	mov	r2, r3
 80109f6:	460b      	mov	r3, r1
 80109f8:	80fb      	strh	r3, [r7, #6]
 80109fa:	4613      	mov	r3, r2
 80109fc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010a02:	2300      	movs	r3, #0
 8010a04:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d108      	bne.n	8010a1e <pbuf_copy_partial+0x36>
 8010a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8010abc <pbuf_copy_partial+0xd4>)
 8010a0e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010a12:	492b      	ldr	r1, [pc, #172]	@ (8010ac0 <pbuf_copy_partial+0xd8>)
 8010a14:	482b      	ldr	r0, [pc, #172]	@ (8010ac4 <pbuf_copy_partial+0xdc>)
 8010a16:	f009 fa61 	bl	8019edc <iprintf>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	e04a      	b.n	8010ab4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d108      	bne.n	8010a36 <pbuf_copy_partial+0x4e>
 8010a24:	4b25      	ldr	r3, [pc, #148]	@ (8010abc <pbuf_copy_partial+0xd4>)
 8010a26:	f240 420b 	movw	r2, #1035	@ 0x40b
 8010a2a:	4927      	ldr	r1, [pc, #156]	@ (8010ac8 <pbuf_copy_partial+0xe0>)
 8010a2c:	4825      	ldr	r0, [pc, #148]	@ (8010ac4 <pbuf_copy_partial+0xdc>)
 8010a2e:	f009 fa55 	bl	8019edc <iprintf>
 8010a32:	2300      	movs	r3, #0
 8010a34:	e03e      	b.n	8010ab4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	61fb      	str	r3, [r7, #28]
 8010a3a:	e034      	b.n	8010aa6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010a3c:	88bb      	ldrh	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d00a      	beq.n	8010a58 <pbuf_copy_partial+0x70>
 8010a42:	69fb      	ldr	r3, [r7, #28]
 8010a44:	895b      	ldrh	r3, [r3, #10]
 8010a46:	88ba      	ldrh	r2, [r7, #4]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d305      	bcc.n	8010a58 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	895b      	ldrh	r3, [r3, #10]
 8010a50:	88ba      	ldrh	r2, [r7, #4]
 8010a52:	1ad3      	subs	r3, r2, r3
 8010a54:	80bb      	strh	r3, [r7, #4]
 8010a56:	e023      	b.n	8010aa0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010a58:	69fb      	ldr	r3, [r7, #28]
 8010a5a:	895a      	ldrh	r2, [r3, #10]
 8010a5c:	88bb      	ldrh	r3, [r7, #4]
 8010a5e:	1ad3      	subs	r3, r2, r3
 8010a60:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010a62:	8b3a      	ldrh	r2, [r7, #24]
 8010a64:	88fb      	ldrh	r3, [r7, #6]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d901      	bls.n	8010a6e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010a6a:	88fb      	ldrh	r3, [r7, #6]
 8010a6c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010a6e:	8b7b      	ldrh	r3, [r7, #26]
 8010a70:	68ba      	ldr	r2, [r7, #8]
 8010a72:	18d0      	adds	r0, r2, r3
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	685a      	ldr	r2, [r3, #4]
 8010a78:	88bb      	ldrh	r3, [r7, #4]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	8b3a      	ldrh	r2, [r7, #24]
 8010a7e:	4619      	mov	r1, r3
 8010a80:	f009 fc57 	bl	801a332 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010a84:	8afa      	ldrh	r2, [r7, #22]
 8010a86:	8b3b      	ldrh	r3, [r7, #24]
 8010a88:	4413      	add	r3, r2
 8010a8a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010a8c:	8b7a      	ldrh	r2, [r7, #26]
 8010a8e:	8b3b      	ldrh	r3, [r7, #24]
 8010a90:	4413      	add	r3, r2
 8010a92:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010a94:	88fa      	ldrh	r2, [r7, #6]
 8010a96:	8b3b      	ldrh	r3, [r7, #24]
 8010a98:	1ad3      	subs	r3, r2, r3
 8010a9a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	61fb      	str	r3, [r7, #28]
 8010aa6:	88fb      	ldrh	r3, [r7, #6]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d002      	beq.n	8010ab2 <pbuf_copy_partial+0xca>
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d1c4      	bne.n	8010a3c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010ab2:	8afb      	ldrh	r3, [r7, #22]
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3720      	adds	r7, #32
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	0801b7d0 	.word	0x0801b7d0
 8010ac0:	0801bb18 	.word	0x0801bb18
 8010ac4:	0801b830 	.word	0x0801b830
 8010ac8:	0801bb38 	.word	0x0801bb38

08010acc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	603a      	str	r2, [r7, #0]
 8010ad6:	71fb      	strb	r3, [r7, #7]
 8010ad8:	460b      	mov	r3, r1
 8010ada:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	8919      	ldrh	r1, [r3, #8]
 8010ae0:	88ba      	ldrh	r2, [r7, #4]
 8010ae2:	79fb      	ldrb	r3, [r7, #7]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff fa95 	bl	8010014 <pbuf_alloc>
 8010aea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d101      	bne.n	8010af6 <pbuf_clone+0x2a>
    return NULL;
 8010af2:	2300      	movs	r3, #0
 8010af4:	e011      	b.n	8010b1a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010af6:	6839      	ldr	r1, [r7, #0]
 8010af8:	68f8      	ldr	r0, [r7, #12]
 8010afa:	f7ff fea3 	bl	8010844 <pbuf_copy>
 8010afe:	4603      	mov	r3, r0
 8010b00:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010b02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d006      	beq.n	8010b18 <pbuf_clone+0x4c>
 8010b0a:	4b06      	ldr	r3, [pc, #24]	@ (8010b24 <pbuf_clone+0x58>)
 8010b0c:	f240 5224 	movw	r2, #1316	@ 0x524
 8010b10:	4905      	ldr	r1, [pc, #20]	@ (8010b28 <pbuf_clone+0x5c>)
 8010b12:	4806      	ldr	r0, [pc, #24]	@ (8010b2c <pbuf_clone+0x60>)
 8010b14:	f009 f9e2 	bl	8019edc <iprintf>
  return q;
 8010b18:	68fb      	ldr	r3, [r7, #12]
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3710      	adds	r7, #16
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	0801b7d0 	.word	0x0801b7d0
 8010b28:	0801bc44 	.word	0x0801bc44
 8010b2c:	0801b830 	.word	0x0801b830

08010b30 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010b34:	f009 f8d2 	bl	8019cdc <rand>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010b46:	b29a      	uxth	r2, r3
 8010b48:	4b01      	ldr	r3, [pc, #4]	@ (8010b50 <tcp_init+0x20>)
 8010b4a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010b4c:	bf00      	nop
 8010b4e:	bd80      	pop	{r7, pc}
 8010b50:	20000024 	.word	0x20000024

08010b54 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	7d1b      	ldrb	r3, [r3, #20]
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	d105      	bne.n	8010b70 <tcp_free+0x1c>
 8010b64:	4b06      	ldr	r3, [pc, #24]	@ (8010b80 <tcp_free+0x2c>)
 8010b66:	22d4      	movs	r2, #212	@ 0xd4
 8010b68:	4906      	ldr	r1, [pc, #24]	@ (8010b84 <tcp_free+0x30>)
 8010b6a:	4807      	ldr	r0, [pc, #28]	@ (8010b88 <tcp_free+0x34>)
 8010b6c:	f009 f9b6 	bl	8019edc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010b70:	6879      	ldr	r1, [r7, #4]
 8010b72:	2001      	movs	r0, #1
 8010b74:	f7fe fe8e 	bl	800f894 <memp_free>
}
 8010b78:	bf00      	nop
 8010b7a:	3708      	adds	r7, #8
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	0801bcd0 	.word	0x0801bcd0
 8010b84:	0801bd00 	.word	0x0801bd00
 8010b88:	0801bd14 	.word	0x0801bd14

08010b8c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	7d1b      	ldrb	r3, [r3, #20]
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d105      	bne.n	8010ba8 <tcp_free_listen+0x1c>
 8010b9c:	4b06      	ldr	r3, [pc, #24]	@ (8010bb8 <tcp_free_listen+0x2c>)
 8010b9e:	22df      	movs	r2, #223	@ 0xdf
 8010ba0:	4906      	ldr	r1, [pc, #24]	@ (8010bbc <tcp_free_listen+0x30>)
 8010ba2:	4807      	ldr	r0, [pc, #28]	@ (8010bc0 <tcp_free_listen+0x34>)
 8010ba4:	f009 f99a 	bl	8019edc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010ba8:	6879      	ldr	r1, [r7, #4]
 8010baa:	2002      	movs	r0, #2
 8010bac:	f7fe fe72 	bl	800f894 <memp_free>
}
 8010bb0:	bf00      	nop
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	0801bcd0 	.word	0x0801bcd0
 8010bbc:	0801bd3c 	.word	0x0801bd3c
 8010bc0:	0801bd14 	.word	0x0801bd14

08010bc4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010bc8:	f000 fea4 	bl	8011914 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010bcc:	4b07      	ldr	r3, [pc, #28]	@ (8010bec <tcp_tmr+0x28>)
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	b2da      	uxtb	r2, r3
 8010bd4:	4b05      	ldr	r3, [pc, #20]	@ (8010bec <tcp_tmr+0x28>)
 8010bd6:	701a      	strb	r2, [r3, #0]
 8010bd8:	4b04      	ldr	r3, [pc, #16]	@ (8010bec <tcp_tmr+0x28>)
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	f003 0301 	and.w	r3, r3, #1
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d001      	beq.n	8010be8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010be4:	f000 fb54 	bl	8011290 <tcp_slowtmr>
  }
}
 8010be8:	bf00      	nop
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	200274c1 	.word	0x200274c1

08010bf0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b084      	sub	sp, #16
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d105      	bne.n	8010c0c <tcp_remove_listener+0x1c>
 8010c00:	4b0d      	ldr	r3, [pc, #52]	@ (8010c38 <tcp_remove_listener+0x48>)
 8010c02:	22ff      	movs	r2, #255	@ 0xff
 8010c04:	490d      	ldr	r1, [pc, #52]	@ (8010c3c <tcp_remove_listener+0x4c>)
 8010c06:	480e      	ldr	r0, [pc, #56]	@ (8010c40 <tcp_remove_listener+0x50>)
 8010c08:	f009 f968 	bl	8019edc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	60fb      	str	r3, [r7, #12]
 8010c10:	e00a      	b.n	8010c28 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010c16:	683a      	ldr	r2, [r7, #0]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d102      	bne.n	8010c22 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	68db      	ldr	r3, [r3, #12]
 8010c26:	60fb      	str	r3, [r7, #12]
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d1f1      	bne.n	8010c12 <tcp_remove_listener+0x22>
    }
  }
}
 8010c2e:	bf00      	nop
 8010c30:	bf00      	nop
 8010c32:	3710      	adds	r7, #16
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	0801bcd0 	.word	0x0801bcd0
 8010c3c:	0801bd58 	.word	0x0801bd58
 8010c40:	0801bd14 	.word	0x0801bd14

08010c44 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d106      	bne.n	8010c60 <tcp_listen_closed+0x1c>
 8010c52:	4b14      	ldr	r3, [pc, #80]	@ (8010ca4 <tcp_listen_closed+0x60>)
 8010c54:	f240 1211 	movw	r2, #273	@ 0x111
 8010c58:	4913      	ldr	r1, [pc, #76]	@ (8010ca8 <tcp_listen_closed+0x64>)
 8010c5a:	4814      	ldr	r0, [pc, #80]	@ (8010cac <tcp_listen_closed+0x68>)
 8010c5c:	f009 f93e 	bl	8019edc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	7d1b      	ldrb	r3, [r3, #20]
 8010c64:	2b01      	cmp	r3, #1
 8010c66:	d006      	beq.n	8010c76 <tcp_listen_closed+0x32>
 8010c68:	4b0e      	ldr	r3, [pc, #56]	@ (8010ca4 <tcp_listen_closed+0x60>)
 8010c6a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8010c6e:	4910      	ldr	r1, [pc, #64]	@ (8010cb0 <tcp_listen_closed+0x6c>)
 8010c70:	480e      	ldr	r0, [pc, #56]	@ (8010cac <tcp_listen_closed+0x68>)
 8010c72:	f009 f933 	bl	8019edc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010c76:	2301      	movs	r3, #1
 8010c78:	60fb      	str	r3, [r7, #12]
 8010c7a:	e00b      	b.n	8010c94 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8010cb4 <tcp_listen_closed+0x70>)
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	6879      	ldr	r1, [r7, #4]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7ff ffb1 	bl	8010bf0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	3301      	adds	r3, #1
 8010c92:	60fb      	str	r3, [r7, #12]
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	2b03      	cmp	r3, #3
 8010c98:	d9f0      	bls.n	8010c7c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010c9a:	bf00      	nop
 8010c9c:	bf00      	nop
 8010c9e:	3710      	adds	r7, #16
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}
 8010ca4:	0801bcd0 	.word	0x0801bcd0
 8010ca8:	0801bd80 	.word	0x0801bd80
 8010cac:	0801bd14 	.word	0x0801bd14
 8010cb0:	0801bd8c 	.word	0x0801bd8c
 8010cb4:	0801e1c8 	.word	0x0801e1c8

08010cb8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010cb8:	b5b0      	push	{r4, r5, r7, lr}
 8010cba:	b088      	sub	sp, #32
 8010cbc:	af04      	add	r7, sp, #16
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	460b      	mov	r3, r1
 8010cc2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d106      	bne.n	8010cd8 <tcp_close_shutdown+0x20>
 8010cca:	4b63      	ldr	r3, [pc, #396]	@ (8010e58 <tcp_close_shutdown+0x1a0>)
 8010ccc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8010cd0:	4962      	ldr	r1, [pc, #392]	@ (8010e5c <tcp_close_shutdown+0x1a4>)
 8010cd2:	4863      	ldr	r0, [pc, #396]	@ (8010e60 <tcp_close_shutdown+0x1a8>)
 8010cd4:	f009 f902 	bl	8019edc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010cd8:	78fb      	ldrb	r3, [r7, #3]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d066      	beq.n	8010dac <tcp_close_shutdown+0xf4>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	7d1b      	ldrb	r3, [r3, #20]
 8010ce2:	2b04      	cmp	r3, #4
 8010ce4:	d003      	beq.n	8010cee <tcp_close_shutdown+0x36>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	7d1b      	ldrb	r3, [r3, #20]
 8010cea:	2b07      	cmp	r3, #7
 8010cec:	d15e      	bne.n	8010dac <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d104      	bne.n	8010d00 <tcp_close_shutdown+0x48>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010cfa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010cfe:	d055      	beq.n	8010dac <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	8b5b      	ldrh	r3, [r3, #26]
 8010d04:	f003 0310 	and.w	r3, r3, #16
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d106      	bne.n	8010d1a <tcp_close_shutdown+0x62>
 8010d0c:	4b52      	ldr	r3, [pc, #328]	@ (8010e58 <tcp_close_shutdown+0x1a0>)
 8010d0e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8010d12:	4954      	ldr	r1, [pc, #336]	@ (8010e64 <tcp_close_shutdown+0x1ac>)
 8010d14:	4852      	ldr	r0, [pc, #328]	@ (8010e60 <tcp_close_shutdown+0x1a8>)
 8010d16:	f009 f8e1 	bl	8019edc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010d22:	687d      	ldr	r5, [r7, #4]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	3304      	adds	r3, #4
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	8ad2      	ldrh	r2, [r2, #22]
 8010d2c:	6879      	ldr	r1, [r7, #4]
 8010d2e:	8b09      	ldrh	r1, [r1, #24]
 8010d30:	9102      	str	r1, [sp, #8]
 8010d32:	9201      	str	r2, [sp, #4]
 8010d34:	9300      	str	r3, [sp, #0]
 8010d36:	462b      	mov	r3, r5
 8010d38:	4622      	mov	r2, r4
 8010d3a:	4601      	mov	r1, r0
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f004 fe8d 	bl	8015a5c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f001 f8c8 	bl	8011ed8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010d48:	4b47      	ldr	r3, [pc, #284]	@ (8010e68 <tcp_close_shutdown+0x1b0>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	687a      	ldr	r2, [r7, #4]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d105      	bne.n	8010d5e <tcp_close_shutdown+0xa6>
 8010d52:	4b45      	ldr	r3, [pc, #276]	@ (8010e68 <tcp_close_shutdown+0x1b0>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	68db      	ldr	r3, [r3, #12]
 8010d58:	4a43      	ldr	r2, [pc, #268]	@ (8010e68 <tcp_close_shutdown+0x1b0>)
 8010d5a:	6013      	str	r3, [r2, #0]
 8010d5c:	e013      	b.n	8010d86 <tcp_close_shutdown+0xce>
 8010d5e:	4b42      	ldr	r3, [pc, #264]	@ (8010e68 <tcp_close_shutdown+0x1b0>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	60fb      	str	r3, [r7, #12]
 8010d64:	e00c      	b.n	8010d80 <tcp_close_shutdown+0xc8>
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d104      	bne.n	8010d7a <tcp_close_shutdown+0xc2>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	68da      	ldr	r2, [r3, #12]
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	60da      	str	r2, [r3, #12]
 8010d78:	e005      	b.n	8010d86 <tcp_close_shutdown+0xce>
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	60fb      	str	r3, [r7, #12]
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d1ef      	bne.n	8010d66 <tcp_close_shutdown+0xae>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	60da      	str	r2, [r3, #12]
 8010d8c:	4b37      	ldr	r3, [pc, #220]	@ (8010e6c <tcp_close_shutdown+0x1b4>)
 8010d8e:	2201      	movs	r2, #1
 8010d90:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010d92:	4b37      	ldr	r3, [pc, #220]	@ (8010e70 <tcp_close_shutdown+0x1b8>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d102      	bne.n	8010da2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010d9c:	f003 fd5c 	bl	8014858 <tcp_trigger_input_pcb_close>
 8010da0:	e002      	b.n	8010da8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	f7ff fed6 	bl	8010b54 <tcp_free>
      }
      return ERR_OK;
 8010da8:	2300      	movs	r3, #0
 8010daa:	e050      	b.n	8010e4e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	7d1b      	ldrb	r3, [r3, #20]
 8010db0:	2b02      	cmp	r3, #2
 8010db2:	d03b      	beq.n	8010e2c <tcp_close_shutdown+0x174>
 8010db4:	2b02      	cmp	r3, #2
 8010db6:	dc44      	bgt.n	8010e42 <tcp_close_shutdown+0x18a>
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d002      	beq.n	8010dc2 <tcp_close_shutdown+0x10a>
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d02a      	beq.n	8010e16 <tcp_close_shutdown+0x15e>
 8010dc0:	e03f      	b.n	8010e42 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	8adb      	ldrh	r3, [r3, #22]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d021      	beq.n	8010e0e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010dca:	4b2a      	ldr	r3, [pc, #168]	@ (8010e74 <tcp_close_shutdown+0x1bc>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d105      	bne.n	8010de0 <tcp_close_shutdown+0x128>
 8010dd4:	4b27      	ldr	r3, [pc, #156]	@ (8010e74 <tcp_close_shutdown+0x1bc>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	68db      	ldr	r3, [r3, #12]
 8010dda:	4a26      	ldr	r2, [pc, #152]	@ (8010e74 <tcp_close_shutdown+0x1bc>)
 8010ddc:	6013      	str	r3, [r2, #0]
 8010dde:	e013      	b.n	8010e08 <tcp_close_shutdown+0x150>
 8010de0:	4b24      	ldr	r3, [pc, #144]	@ (8010e74 <tcp_close_shutdown+0x1bc>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	60bb      	str	r3, [r7, #8]
 8010de6:	e00c      	b.n	8010e02 <tcp_close_shutdown+0x14a>
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	68db      	ldr	r3, [r3, #12]
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d104      	bne.n	8010dfc <tcp_close_shutdown+0x144>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	68da      	ldr	r2, [r3, #12]
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	60da      	str	r2, [r3, #12]
 8010dfa:	e005      	b.n	8010e08 <tcp_close_shutdown+0x150>
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	68db      	ldr	r3, [r3, #12]
 8010e00:	60bb      	str	r3, [r7, #8]
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d1ef      	bne.n	8010de8 <tcp_close_shutdown+0x130>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f7ff fea0 	bl	8010b54 <tcp_free>
      break;
 8010e14:	e01a      	b.n	8010e4c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f7ff ff14 	bl	8010c44 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010e1c:	6879      	ldr	r1, [r7, #4]
 8010e1e:	4816      	ldr	r0, [pc, #88]	@ (8010e78 <tcp_close_shutdown+0x1c0>)
 8010e20:	f001 f8aa 	bl	8011f78 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f7ff feb1 	bl	8010b8c <tcp_free_listen>
      break;
 8010e2a:	e00f      	b.n	8010e4c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010e2c:	6879      	ldr	r1, [r7, #4]
 8010e2e:	480e      	ldr	r0, [pc, #56]	@ (8010e68 <tcp_close_shutdown+0x1b0>)
 8010e30:	f001 f8a2 	bl	8011f78 <tcp_pcb_remove>
 8010e34:	4b0d      	ldr	r3, [pc, #52]	@ (8010e6c <tcp_close_shutdown+0x1b4>)
 8010e36:	2201      	movs	r2, #1
 8010e38:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f7ff fe8a 	bl	8010b54 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010e40:	e004      	b.n	8010e4c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f000 f81a 	bl	8010e7c <tcp_close_shutdown_fin>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	e000      	b.n	8010e4e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010e4c:	2300      	movs	r3, #0
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3710      	adds	r7, #16
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bdb0      	pop	{r4, r5, r7, pc}
 8010e56:	bf00      	nop
 8010e58:	0801bcd0 	.word	0x0801bcd0
 8010e5c:	0801bda4 	.word	0x0801bda4
 8010e60:	0801bd14 	.word	0x0801bd14
 8010e64:	0801bdc4 	.word	0x0801bdc4
 8010e68:	200274b8 	.word	0x200274b8
 8010e6c:	200274c0 	.word	0x200274c0
 8010e70:	200274f8 	.word	0x200274f8
 8010e74:	200274b0 	.word	0x200274b0
 8010e78:	200274b4 	.word	0x200274b4

08010e7c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d106      	bne.n	8010e98 <tcp_close_shutdown_fin+0x1c>
 8010e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8010f44 <tcp_close_shutdown_fin+0xc8>)
 8010e8c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8010e90:	492d      	ldr	r1, [pc, #180]	@ (8010f48 <tcp_close_shutdown_fin+0xcc>)
 8010e92:	482e      	ldr	r0, [pc, #184]	@ (8010f4c <tcp_close_shutdown_fin+0xd0>)
 8010e94:	f009 f822 	bl	8019edc <iprintf>

  switch (pcb->state) {
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	7d1b      	ldrb	r3, [r3, #20]
 8010e9c:	2b07      	cmp	r3, #7
 8010e9e:	d020      	beq.n	8010ee2 <tcp_close_shutdown_fin+0x66>
 8010ea0:	2b07      	cmp	r3, #7
 8010ea2:	dc2b      	bgt.n	8010efc <tcp_close_shutdown_fin+0x80>
 8010ea4:	2b03      	cmp	r3, #3
 8010ea6:	d002      	beq.n	8010eae <tcp_close_shutdown_fin+0x32>
 8010ea8:	2b04      	cmp	r3, #4
 8010eaa:	d00d      	beq.n	8010ec8 <tcp_close_shutdown_fin+0x4c>
 8010eac:	e026      	b.n	8010efc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f003 fee2 	bl	8014c78 <tcp_send_fin>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d11f      	bne.n	8010f00 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2205      	movs	r2, #5
 8010ec4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010ec6:	e01b      	b.n	8010f00 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f003 fed5 	bl	8014c78 <tcp_send_fin>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d114      	bne.n	8010f04 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2205      	movs	r2, #5
 8010ede:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010ee0:	e010      	b.n	8010f04 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f003 fec8 	bl	8014c78 <tcp_send_fin>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d109      	bne.n	8010f08 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2209      	movs	r2, #9
 8010ef8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010efa:	e005      	b.n	8010f08 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010efc:	2300      	movs	r3, #0
 8010efe:	e01c      	b.n	8010f3a <tcp_close_shutdown_fin+0xbe>
      break;
 8010f00:	bf00      	nop
 8010f02:	e002      	b.n	8010f0a <tcp_close_shutdown_fin+0x8e>
      break;
 8010f04:	bf00      	nop
 8010f06:	e000      	b.n	8010f0a <tcp_close_shutdown_fin+0x8e>
      break;
 8010f08:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d103      	bne.n	8010f1a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f003 ffee 	bl	8014ef4 <tcp_output>
 8010f18:	e00d      	b.n	8010f36 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f22:	d108      	bne.n	8010f36 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	8b5b      	ldrh	r3, [r3, #26]
 8010f28:	f043 0308 	orr.w	r3, r3, #8
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010f32:	2300      	movs	r3, #0
 8010f34:	e001      	b.n	8010f3a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3710      	adds	r7, #16
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	0801bcd0 	.word	0x0801bcd0
 8010f48:	0801bd80 	.word	0x0801bd80
 8010f4c:	0801bd14 	.word	0x0801bd14

08010f50 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d109      	bne.n	8010f72 <tcp_close+0x22>
 8010f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8010f9c <tcp_close+0x4c>)
 8010f60:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8010f64:	490e      	ldr	r1, [pc, #56]	@ (8010fa0 <tcp_close+0x50>)
 8010f66:	480f      	ldr	r0, [pc, #60]	@ (8010fa4 <tcp_close+0x54>)
 8010f68:	f008 ffb8 	bl	8019edc <iprintf>
 8010f6c:	f06f 030f 	mvn.w	r3, #15
 8010f70:	e00f      	b.n	8010f92 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	7d1b      	ldrb	r3, [r3, #20]
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	d006      	beq.n	8010f88 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	8b5b      	ldrh	r3, [r3, #26]
 8010f7e:	f043 0310 	orr.w	r3, r3, #16
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010f88:	2101      	movs	r1, #1
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f7ff fe94 	bl	8010cb8 <tcp_close_shutdown>
 8010f90:	4603      	mov	r3, r0
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3708      	adds	r7, #8
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
 8010f9a:	bf00      	nop
 8010f9c:	0801bcd0 	.word	0x0801bcd0
 8010fa0:	0801bde0 	.word	0x0801bde0
 8010fa4:	0801bd14 	.word	0x0801bd14

08010fa8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b08e      	sub	sp, #56	@ 0x38
 8010fac:	af04      	add	r7, sp, #16
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d107      	bne.n	8010fc8 <tcp_abandon+0x20>
 8010fb8:	4b52      	ldr	r3, [pc, #328]	@ (8011104 <tcp_abandon+0x15c>)
 8010fba:	f240 223d 	movw	r2, #573	@ 0x23d
 8010fbe:	4952      	ldr	r1, [pc, #328]	@ (8011108 <tcp_abandon+0x160>)
 8010fc0:	4852      	ldr	r0, [pc, #328]	@ (801110c <tcp_abandon+0x164>)
 8010fc2:	f008 ff8b 	bl	8019edc <iprintf>
 8010fc6:	e099      	b.n	80110fc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	7d1b      	ldrb	r3, [r3, #20]
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	d106      	bne.n	8010fde <tcp_abandon+0x36>
 8010fd0:	4b4c      	ldr	r3, [pc, #304]	@ (8011104 <tcp_abandon+0x15c>)
 8010fd2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010fd6:	494e      	ldr	r1, [pc, #312]	@ (8011110 <tcp_abandon+0x168>)
 8010fd8:	484c      	ldr	r0, [pc, #304]	@ (801110c <tcp_abandon+0x164>)
 8010fda:	f008 ff7f 	bl	8019edc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	7d1b      	ldrb	r3, [r3, #20]
 8010fe2:	2b0a      	cmp	r3, #10
 8010fe4:	d107      	bne.n	8010ff6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010fe6:	6879      	ldr	r1, [r7, #4]
 8010fe8:	484a      	ldr	r0, [pc, #296]	@ (8011114 <tcp_abandon+0x16c>)
 8010fea:	f000 ffc5 	bl	8011f78 <tcp_pcb_remove>
    tcp_free(pcb);
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f7ff fdb0 	bl	8010b54 <tcp_free>
 8010ff4:	e082      	b.n	80110fc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011002:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011008:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011010:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	691b      	ldr	r3, [r3, #16]
 8011016:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	7d1b      	ldrb	r3, [r3, #20]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d126      	bne.n	801106e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	8adb      	ldrh	r3, [r3, #22]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d02e      	beq.n	8011086 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011028:	4b3b      	ldr	r3, [pc, #236]	@ (8011118 <tcp_abandon+0x170>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	429a      	cmp	r2, r3
 8011030:	d105      	bne.n	801103e <tcp_abandon+0x96>
 8011032:	4b39      	ldr	r3, [pc, #228]	@ (8011118 <tcp_abandon+0x170>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	4a37      	ldr	r2, [pc, #220]	@ (8011118 <tcp_abandon+0x170>)
 801103a:	6013      	str	r3, [r2, #0]
 801103c:	e013      	b.n	8011066 <tcp_abandon+0xbe>
 801103e:	4b36      	ldr	r3, [pc, #216]	@ (8011118 <tcp_abandon+0x170>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	61fb      	str	r3, [r7, #28]
 8011044:	e00c      	b.n	8011060 <tcp_abandon+0xb8>
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	429a      	cmp	r2, r3
 801104e:	d104      	bne.n	801105a <tcp_abandon+0xb2>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	68da      	ldr	r2, [r3, #12]
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	60da      	str	r2, [r3, #12]
 8011058:	e005      	b.n	8011066 <tcp_abandon+0xbe>
 801105a:	69fb      	ldr	r3, [r7, #28]
 801105c:	68db      	ldr	r3, [r3, #12]
 801105e:	61fb      	str	r3, [r7, #28]
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1ef      	bne.n	8011046 <tcp_abandon+0x9e>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2200      	movs	r2, #0
 801106a:	60da      	str	r2, [r3, #12]
 801106c:	e00b      	b.n	8011086 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	8adb      	ldrh	r3, [r3, #22]
 8011076:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011078:	6879      	ldr	r1, [r7, #4]
 801107a:	4828      	ldr	r0, [pc, #160]	@ (801111c <tcp_abandon+0x174>)
 801107c:	f000 ff7c 	bl	8011f78 <tcp_pcb_remove>
 8011080:	4b27      	ldr	r3, [pc, #156]	@ (8011120 <tcp_abandon+0x178>)
 8011082:	2201      	movs	r2, #1
 8011084:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801108a:	2b00      	cmp	r3, #0
 801108c:	d004      	beq.n	8011098 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011092:	4618      	mov	r0, r3
 8011094:	f000 fd1e 	bl	8011ad4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801109c:	2b00      	cmp	r3, #0
 801109e:	d004      	beq.n	80110aa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110a4:	4618      	mov	r0, r3
 80110a6:	f000 fd15 	bl	8011ad4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d004      	beq.n	80110bc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110b6:	4618      	mov	r0, r3
 80110b8:	f000 fd0c 	bl	8011ad4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80110bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d00e      	beq.n	80110e0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80110c2:	6879      	ldr	r1, [r7, #4]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	3304      	adds	r3, #4
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	8b12      	ldrh	r2, [r2, #24]
 80110cc:	9202      	str	r2, [sp, #8]
 80110ce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80110d0:	9201      	str	r2, [sp, #4]
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	460b      	mov	r3, r1
 80110d6:	697a      	ldr	r2, [r7, #20]
 80110d8:	69b9      	ldr	r1, [r7, #24]
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f004 fcbe 	bl	8015a5c <tcp_rst>
    }
    last_state = pcb->state;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	7d1b      	ldrb	r3, [r3, #20]
 80110e4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f7ff fd34 	bl	8010b54 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d004      	beq.n	80110fc <tcp_abandon+0x154>
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	f06f 010c 	mvn.w	r1, #12
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	4798      	blx	r3
  }
}
 80110fc:	3728      	adds	r7, #40	@ 0x28
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	0801bcd0 	.word	0x0801bcd0
 8011108:	0801be14 	.word	0x0801be14
 801110c:	0801bd14 	.word	0x0801bd14
 8011110:	0801be30 	.word	0x0801be30
 8011114:	200274bc 	.word	0x200274bc
 8011118:	200274b0 	.word	0x200274b0
 801111c:	200274b8 	.word	0x200274b8
 8011120:	200274c0 	.word	0x200274c0

08011124 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801112c:	2101      	movs	r1, #1
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7ff ff3a 	bl	8010fa8 <tcp_abandon>
}
 8011134:	bf00      	nop
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b084      	sub	sp, #16
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d106      	bne.n	8011158 <tcp_update_rcv_ann_wnd+0x1c>
 801114a:	4b25      	ldr	r3, [pc, #148]	@ (80111e0 <tcp_update_rcv_ann_wnd+0xa4>)
 801114c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011150:	4924      	ldr	r1, [pc, #144]	@ (80111e4 <tcp_update_rcv_ann_wnd+0xa8>)
 8011152:	4825      	ldr	r0, [pc, #148]	@ (80111e8 <tcp_update_rcv_ann_wnd+0xac>)
 8011154:	f008 fec2 	bl	8019edc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801115c:	687a      	ldr	r2, [r7, #4]
 801115e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011160:	4413      	add	r3, r2
 8011162:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011168:	687a      	ldr	r2, [r7, #4]
 801116a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801116c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8011170:	bf28      	it	cs
 8011172:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8011176:	b292      	uxth	r2, r2
 8011178:	4413      	add	r3, r2
 801117a:	68fa      	ldr	r2, [r7, #12]
 801117c:	1ad3      	subs	r3, r2, r3
 801117e:	2b00      	cmp	r3, #0
 8011180:	db08      	blt.n	8011194 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801118e:	68fa      	ldr	r2, [r7, #12]
 8011190:	1ad3      	subs	r3, r2, r3
 8011192:	e020      	b.n	80111d6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801119c:	1ad3      	subs	r3, r2, r3
 801119e:	2b00      	cmp	r3, #0
 80111a0:	dd03      	ble.n	80111aa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80111a8:	e014      	b.n	80111d4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111b2:	1ad3      	subs	r3, r2, r3
 80111b4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111bc:	d306      	bcc.n	80111cc <tcp_update_rcv_ann_wnd+0x90>
 80111be:	4b08      	ldr	r3, [pc, #32]	@ (80111e0 <tcp_update_rcv_ann_wnd+0xa4>)
 80111c0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80111c4:	4909      	ldr	r1, [pc, #36]	@ (80111ec <tcp_update_rcv_ann_wnd+0xb0>)
 80111c6:	4808      	ldr	r0, [pc, #32]	@ (80111e8 <tcp_update_rcv_ann_wnd+0xac>)
 80111c8:	f008 fe88 	bl	8019edc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	b29a      	uxth	r2, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80111d4:	2300      	movs	r3, #0
  }
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3710      	adds	r7, #16
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	0801bcd0 	.word	0x0801bcd0
 80111e4:	0801bf2c 	.word	0x0801bf2c
 80111e8:	0801bd14 	.word	0x0801bd14
 80111ec:	0801bf50 	.word	0x0801bf50

080111f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	460b      	mov	r3, r1
 80111fa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d107      	bne.n	8011212 <tcp_recved+0x22>
 8011202:	4b1f      	ldr	r3, [pc, #124]	@ (8011280 <tcp_recved+0x90>)
 8011204:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8011208:	491e      	ldr	r1, [pc, #120]	@ (8011284 <tcp_recved+0x94>)
 801120a:	481f      	ldr	r0, [pc, #124]	@ (8011288 <tcp_recved+0x98>)
 801120c:	f008 fe66 	bl	8019edc <iprintf>
 8011210:	e032      	b.n	8011278 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	7d1b      	ldrb	r3, [r3, #20]
 8011216:	2b01      	cmp	r3, #1
 8011218:	d106      	bne.n	8011228 <tcp_recved+0x38>
 801121a:	4b19      	ldr	r3, [pc, #100]	@ (8011280 <tcp_recved+0x90>)
 801121c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8011220:	491a      	ldr	r1, [pc, #104]	@ (801128c <tcp_recved+0x9c>)
 8011222:	4819      	ldr	r0, [pc, #100]	@ (8011288 <tcp_recved+0x98>)
 8011224:	f008 fe5a 	bl	8019edc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801122c:	887b      	ldrh	r3, [r7, #2]
 801122e:	4413      	add	r3, r2
 8011230:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011232:	89fb      	ldrh	r3, [r7, #14]
 8011234:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011238:	d804      	bhi.n	8011244 <tcp_recved+0x54>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801123e:	89fa      	ldrh	r2, [r7, #14]
 8011240:	429a      	cmp	r2, r3
 8011242:	d204      	bcs.n	801124e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801124a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801124c:	e002      	b.n	8011254 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	89fa      	ldrh	r2, [r7, #14]
 8011252:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff ff71 	bl	801113c <tcp_update_rcv_ann_wnd>
 801125a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011262:	d309      	bcc.n	8011278 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	8b5b      	ldrh	r3, [r3, #26]
 8011268:	f043 0302 	orr.w	r3, r3, #2
 801126c:	b29a      	uxth	r2, r3
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f003 fe3e 	bl	8014ef4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	0801bcd0 	.word	0x0801bcd0
 8011284:	0801bf6c 	.word	0x0801bf6c
 8011288:	0801bd14 	.word	0x0801bd14
 801128c:	0801bf84 	.word	0x0801bf84

08011290 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011290:	b5b0      	push	{r4, r5, r7, lr}
 8011292:	b090      	sub	sp, #64	@ 0x40
 8011294:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011296:	2300      	movs	r3, #0
 8011298:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801129c:	4b95      	ldr	r3, [pc, #596]	@ (80114f4 <tcp_slowtmr+0x264>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	3301      	adds	r3, #1
 80112a2:	4a94      	ldr	r2, [pc, #592]	@ (80114f4 <tcp_slowtmr+0x264>)
 80112a4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80112a6:	4b94      	ldr	r3, [pc, #592]	@ (80114f8 <tcp_slowtmr+0x268>)
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	3301      	adds	r3, #1
 80112ac:	b2da      	uxtb	r2, r3
 80112ae:	4b92      	ldr	r3, [pc, #584]	@ (80114f8 <tcp_slowtmr+0x268>)
 80112b0:	701a      	strb	r2, [r3, #0]
 80112b2:	e000      	b.n	80112b6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80112b4:	bf00      	nop
  prev = NULL;
 80112b6:	2300      	movs	r3, #0
 80112b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80112ba:	4b90      	ldr	r3, [pc, #576]	@ (80114fc <tcp_slowtmr+0x26c>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80112c0:	e29d      	b.n	80117fe <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80112c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112c4:	7d1b      	ldrb	r3, [r3, #20]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d106      	bne.n	80112d8 <tcp_slowtmr+0x48>
 80112ca:	4b8d      	ldr	r3, [pc, #564]	@ (8011500 <tcp_slowtmr+0x270>)
 80112cc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80112d0:	498c      	ldr	r1, [pc, #560]	@ (8011504 <tcp_slowtmr+0x274>)
 80112d2:	488d      	ldr	r0, [pc, #564]	@ (8011508 <tcp_slowtmr+0x278>)
 80112d4:	f008 fe02 	bl	8019edc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80112d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112da:	7d1b      	ldrb	r3, [r3, #20]
 80112dc:	2b01      	cmp	r3, #1
 80112de:	d106      	bne.n	80112ee <tcp_slowtmr+0x5e>
 80112e0:	4b87      	ldr	r3, [pc, #540]	@ (8011500 <tcp_slowtmr+0x270>)
 80112e2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80112e6:	4989      	ldr	r1, [pc, #548]	@ (801150c <tcp_slowtmr+0x27c>)
 80112e8:	4887      	ldr	r0, [pc, #540]	@ (8011508 <tcp_slowtmr+0x278>)
 80112ea:	f008 fdf7 	bl	8019edc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80112ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112f0:	7d1b      	ldrb	r3, [r3, #20]
 80112f2:	2b0a      	cmp	r3, #10
 80112f4:	d106      	bne.n	8011304 <tcp_slowtmr+0x74>
 80112f6:	4b82      	ldr	r3, [pc, #520]	@ (8011500 <tcp_slowtmr+0x270>)
 80112f8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80112fc:	4984      	ldr	r1, [pc, #528]	@ (8011510 <tcp_slowtmr+0x280>)
 80112fe:	4882      	ldr	r0, [pc, #520]	@ (8011508 <tcp_slowtmr+0x278>)
 8011300:	f008 fdec 	bl	8019edc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011306:	7f9a      	ldrb	r2, [r3, #30]
 8011308:	4b7b      	ldr	r3, [pc, #492]	@ (80114f8 <tcp_slowtmr+0x268>)
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	429a      	cmp	r2, r3
 801130e:	d105      	bne.n	801131c <tcp_slowtmr+0x8c>
      prev = pcb;
 8011310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011312:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801131a:	e270      	b.n	80117fe <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801131c:	4b76      	ldr	r3, [pc, #472]	@ (80114f8 <tcp_slowtmr+0x268>)
 801131e:	781a      	ldrb	r2, [r3, #0]
 8011320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011322:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8011324:	2300      	movs	r3, #0
 8011326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801132a:	2300      	movs	r3, #0
 801132c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011332:	7d1b      	ldrb	r3, [r3, #20]
 8011334:	2b02      	cmp	r3, #2
 8011336:	d10a      	bne.n	801134e <tcp_slowtmr+0xbe>
 8011338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801133a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801133e:	2b05      	cmp	r3, #5
 8011340:	d905      	bls.n	801134e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8011342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011346:	3301      	adds	r3, #1
 8011348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801134c:	e11e      	b.n	801158c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801134e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011350:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011354:	2b0b      	cmp	r3, #11
 8011356:	d905      	bls.n	8011364 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8011358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801135c:	3301      	adds	r3, #1
 801135e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011362:	e113      	b.n	801158c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8011364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011366:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801136a:	2b00      	cmp	r3, #0
 801136c:	d075      	beq.n	801145a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801136e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011372:	2b00      	cmp	r3, #0
 8011374:	d006      	beq.n	8011384 <tcp_slowtmr+0xf4>
 8011376:	4b62      	ldr	r3, [pc, #392]	@ (8011500 <tcp_slowtmr+0x270>)
 8011378:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801137c:	4965      	ldr	r1, [pc, #404]	@ (8011514 <tcp_slowtmr+0x284>)
 801137e:	4862      	ldr	r0, [pc, #392]	@ (8011508 <tcp_slowtmr+0x278>)
 8011380:	f008 fdac 	bl	8019edc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011388:	2b00      	cmp	r3, #0
 801138a:	d106      	bne.n	801139a <tcp_slowtmr+0x10a>
 801138c:	4b5c      	ldr	r3, [pc, #368]	@ (8011500 <tcp_slowtmr+0x270>)
 801138e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8011392:	4961      	ldr	r1, [pc, #388]	@ (8011518 <tcp_slowtmr+0x288>)
 8011394:	485c      	ldr	r0, [pc, #368]	@ (8011508 <tcp_slowtmr+0x278>)
 8011396:	f008 fda1 	bl	8019edc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801139a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801139c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80113a0:	2b0b      	cmp	r3, #11
 80113a2:	d905      	bls.n	80113b0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80113a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113a8:	3301      	adds	r3, #1
 80113aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80113ae:	e0ed      	b.n	801158c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80113b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113b2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80113b6:	3b01      	subs	r3, #1
 80113b8:	4a58      	ldr	r2, [pc, #352]	@ (801151c <tcp_slowtmr+0x28c>)
 80113ba:	5cd3      	ldrb	r3, [r2, r3]
 80113bc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80113be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80113c4:	7c7a      	ldrb	r2, [r7, #17]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d907      	bls.n	80113da <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80113ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80113d0:	3301      	adds	r3, #1
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80113da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80113e0:	7c7a      	ldrb	r2, [r7, #17]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	f200 80d2 	bhi.w	801158c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80113e8:	2301      	movs	r3, #1
 80113ea:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80113ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d108      	bne.n	8011408 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80113f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80113f8:	f004 fc24 	bl	8015c44 <tcp_zero_window_probe>
 80113fc:	4603      	mov	r3, r0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d014      	beq.n	801142c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8011402:	2300      	movs	r3, #0
 8011404:	623b      	str	r3, [r7, #32]
 8011406:	e011      	b.n	801142c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801140a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801140e:	4619      	mov	r1, r3
 8011410:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011412:	f003 fae9 	bl	80149e8 <tcp_split_unsent_seg>
 8011416:	4603      	mov	r3, r0
 8011418:	2b00      	cmp	r3, #0
 801141a:	d107      	bne.n	801142c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801141c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801141e:	f003 fd69 	bl	8014ef4 <tcp_output>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	d101      	bne.n	801142c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8011428:	2300      	movs	r3, #0
 801142a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801142c:	6a3b      	ldr	r3, [r7, #32]
 801142e:	2b00      	cmp	r3, #0
 8011430:	f000 80ac 	beq.w	801158c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8011434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011436:	2200      	movs	r2, #0
 8011438:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801143c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801143e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011442:	2b06      	cmp	r3, #6
 8011444:	f200 80a2 	bhi.w	801158c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8011448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801144a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801144e:	3301      	adds	r3, #1
 8011450:	b2da      	uxtb	r2, r3
 8011452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011454:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8011458:	e098      	b.n	801158c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801145a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801145c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011460:	2b00      	cmp	r3, #0
 8011462:	db0f      	blt.n	8011484 <tcp_slowtmr+0x1f4>
 8011464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011466:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801146a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801146e:	4293      	cmp	r3, r2
 8011470:	d008      	beq.n	8011484 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8011472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011474:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011478:	b29b      	uxth	r3, r3
 801147a:	3301      	adds	r3, #1
 801147c:	b29b      	uxth	r3, r3
 801147e:	b21a      	sxth	r2, r3
 8011480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011482:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8011484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011486:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801148a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801148c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011490:	429a      	cmp	r2, r3
 8011492:	db7b      	blt.n	801158c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011494:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011496:	f004 f821 	bl	80154dc <tcp_rexmit_rto_prepare>
 801149a:	4603      	mov	r3, r0
 801149c:	2b00      	cmp	r3, #0
 801149e:	d007      	beq.n	80114b0 <tcp_slowtmr+0x220>
 80114a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d171      	bne.n	801158c <tcp_slowtmr+0x2fc>
 80114a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d06d      	beq.n	801158c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80114b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b2:	7d1b      	ldrb	r3, [r3, #20]
 80114b4:	2b02      	cmp	r3, #2
 80114b6:	d03a      	beq.n	801152e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80114b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80114be:	2b0c      	cmp	r3, #12
 80114c0:	bf28      	it	cs
 80114c2:	230c      	movcs	r3, #12
 80114c4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80114c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80114cc:	10db      	asrs	r3, r3, #3
 80114ce:	b21b      	sxth	r3, r3
 80114d0:	461a      	mov	r2, r3
 80114d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80114d8:	4413      	add	r3, r2
 80114da:	7efa      	ldrb	r2, [r7, #27]
 80114dc:	4910      	ldr	r1, [pc, #64]	@ (8011520 <tcp_slowtmr+0x290>)
 80114de:	5c8a      	ldrb	r2, [r1, r2]
 80114e0:	4093      	lsls	r3, r2
 80114e2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80114ea:	4293      	cmp	r3, r2
 80114ec:	dc1a      	bgt.n	8011524 <tcp_slowtmr+0x294>
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	b21a      	sxth	r2, r3
 80114f2:	e019      	b.n	8011528 <tcp_slowtmr+0x298>
 80114f4:	200274ac 	.word	0x200274ac
 80114f8:	200274c2 	.word	0x200274c2
 80114fc:	200274b8 	.word	0x200274b8
 8011500:	0801bcd0 	.word	0x0801bcd0
 8011504:	0801c014 	.word	0x0801c014
 8011508:	0801bd14 	.word	0x0801bd14
 801150c:	0801c040 	.word	0x0801c040
 8011510:	0801c06c 	.word	0x0801c06c
 8011514:	0801c09c 	.word	0x0801c09c
 8011518:	0801c0d0 	.word	0x0801c0d0
 801151c:	0801e1c0 	.word	0x0801e1c0
 8011520:	0801e1b0 	.word	0x0801e1b0
 8011524:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801152e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011530:	2200      	movs	r2, #0
 8011532:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011536:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801153a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801153c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011540:	4293      	cmp	r3, r2
 8011542:	bf28      	it	cs
 8011544:	4613      	movcs	r3, r2
 8011546:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011548:	8a7b      	ldrh	r3, [r7, #18]
 801154a:	085b      	lsrs	r3, r3, #1
 801154c:	b29a      	uxth	r2, r3
 801154e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011550:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011556:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801155a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801155c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801155e:	005b      	lsls	r3, r3, #1
 8011560:	b29b      	uxth	r3, r3
 8011562:	429a      	cmp	r2, r3
 8011564:	d206      	bcs.n	8011574 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011568:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801156a:	005b      	lsls	r3, r3, #1
 801156c:	b29a      	uxth	r2, r3
 801156e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011570:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8011574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011576:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8011578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801157a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801157e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011580:	2200      	movs	r2, #0
 8011582:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8011586:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011588:	f004 f818 	bl	80155bc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801158c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801158e:	7d1b      	ldrb	r3, [r3, #20]
 8011590:	2b06      	cmp	r3, #6
 8011592:	d111      	bne.n	80115b8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8011594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011596:	8b5b      	ldrh	r3, [r3, #26]
 8011598:	f003 0310 	and.w	r3, r3, #16
 801159c:	2b00      	cmp	r3, #0
 801159e:	d00b      	beq.n	80115b8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80115a0:	4b9c      	ldr	r3, [pc, #624]	@ (8011814 <tcp_slowtmr+0x584>)
 80115a2:	681a      	ldr	r2, [r3, #0]
 80115a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a6:	6a1b      	ldr	r3, [r3, #32]
 80115a8:	1ad3      	subs	r3, r2, r3
 80115aa:	2b28      	cmp	r3, #40	@ 0x28
 80115ac:	d904      	bls.n	80115b8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80115ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80115b2:	3301      	adds	r3, #1
 80115b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80115b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ba:	7a5b      	ldrb	r3, [r3, #9]
 80115bc:	f003 0308 	and.w	r3, r3, #8
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d04a      	beq.n	801165a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80115c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80115c8:	2b04      	cmp	r3, #4
 80115ca:	d003      	beq.n	80115d4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80115cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80115d0:	2b07      	cmp	r3, #7
 80115d2:	d142      	bne.n	801165a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80115d4:	4b8f      	ldr	r3, [pc, #572]	@ (8011814 <tcp_slowtmr+0x584>)
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115da:	6a1b      	ldr	r3, [r3, #32]
 80115dc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80115de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80115e4:	4b8c      	ldr	r3, [pc, #560]	@ (8011818 <tcp_slowtmr+0x588>)
 80115e6:	440b      	add	r3, r1
 80115e8:	498c      	ldr	r1, [pc, #560]	@ (801181c <tcp_slowtmr+0x58c>)
 80115ea:	fba1 1303 	umull	r1, r3, r1, r3
 80115ee:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d90a      	bls.n	801160a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80115f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80115f8:	3301      	adds	r3, #1
 80115fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80115fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011602:	3301      	adds	r3, #1
 8011604:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011608:	e027      	b.n	801165a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801160a:	4b82      	ldr	r3, [pc, #520]	@ (8011814 <tcp_slowtmr+0x584>)
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011610:	6a1b      	ldr	r3, [r3, #32]
 8011612:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011616:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801161a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801161c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011620:	4618      	mov	r0, r3
 8011622:	4b7f      	ldr	r3, [pc, #508]	@ (8011820 <tcp_slowtmr+0x590>)
 8011624:	fb00 f303 	mul.w	r3, r0, r3
 8011628:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801162a:	497c      	ldr	r1, [pc, #496]	@ (801181c <tcp_slowtmr+0x58c>)
 801162c:	fba1 1303 	umull	r1, r3, r1, r3
 8011630:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011632:	429a      	cmp	r2, r3
 8011634:	d911      	bls.n	801165a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011638:	f004 fac4 	bl	8015bc4 <tcp_keepalive>
 801163c:	4603      	mov	r3, r0
 801163e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8011642:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011646:	2b00      	cmp	r3, #0
 8011648:	d107      	bne.n	801165a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801164a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801164c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011650:	3301      	adds	r3, #1
 8011652:	b2da      	uxtb	r2, r3
 8011654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011656:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801165a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801165c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801165e:	2b00      	cmp	r3, #0
 8011660:	d011      	beq.n	8011686 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011662:	4b6c      	ldr	r3, [pc, #432]	@ (8011814 <tcp_slowtmr+0x584>)
 8011664:	681a      	ldr	r2, [r3, #0]
 8011666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011668:	6a1b      	ldr	r3, [r3, #32]
 801166a:	1ad2      	subs	r2, r2, r3
 801166c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801166e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011672:	4619      	mov	r1, r3
 8011674:	460b      	mov	r3, r1
 8011676:	005b      	lsls	r3, r3, #1
 8011678:	440b      	add	r3, r1
 801167a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801167c:	429a      	cmp	r2, r3
 801167e:	d302      	bcc.n	8011686 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8011680:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011682:	f000 fddd 	bl	8012240 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8011686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011688:	7d1b      	ldrb	r3, [r3, #20]
 801168a:	2b03      	cmp	r3, #3
 801168c:	d10b      	bne.n	80116a6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801168e:	4b61      	ldr	r3, [pc, #388]	@ (8011814 <tcp_slowtmr+0x584>)
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011694:	6a1b      	ldr	r3, [r3, #32]
 8011696:	1ad3      	subs	r3, r2, r3
 8011698:	2b28      	cmp	r3, #40	@ 0x28
 801169a:	d904      	bls.n	80116a6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801169c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116a0:	3301      	adds	r3, #1
 80116a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80116a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116a8:	7d1b      	ldrb	r3, [r3, #20]
 80116aa:	2b09      	cmp	r3, #9
 80116ac:	d10b      	bne.n	80116c6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80116ae:	4b59      	ldr	r3, [pc, #356]	@ (8011814 <tcp_slowtmr+0x584>)
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116b4:	6a1b      	ldr	r3, [r3, #32]
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	2bf0      	cmp	r3, #240	@ 0xf0
 80116ba:	d904      	bls.n	80116c6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80116bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116c0:	3301      	adds	r3, #1
 80116c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80116c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d060      	beq.n	8011790 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80116ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116d4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80116d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80116d8:	f000 fbfe 	bl	8011ed8 <tcp_pcb_purge>
      if (prev != NULL) {
 80116dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d010      	beq.n	8011704 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80116e2:	4b50      	ldr	r3, [pc, #320]	@ (8011824 <tcp_slowtmr+0x594>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d106      	bne.n	80116fa <tcp_slowtmr+0x46a>
 80116ec:	4b4e      	ldr	r3, [pc, #312]	@ (8011828 <tcp_slowtmr+0x598>)
 80116ee:	f240 526d 	movw	r2, #1389	@ 0x56d
 80116f2:	494e      	ldr	r1, [pc, #312]	@ (801182c <tcp_slowtmr+0x59c>)
 80116f4:	484e      	ldr	r0, [pc, #312]	@ (8011830 <tcp_slowtmr+0x5a0>)
 80116f6:	f008 fbf1 	bl	8019edc <iprintf>
        prev->next = pcb->next;
 80116fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116fc:	68da      	ldr	r2, [r3, #12]
 80116fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011700:	60da      	str	r2, [r3, #12]
 8011702:	e00f      	b.n	8011724 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011704:	4b47      	ldr	r3, [pc, #284]	@ (8011824 <tcp_slowtmr+0x594>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801170a:	429a      	cmp	r2, r3
 801170c:	d006      	beq.n	801171c <tcp_slowtmr+0x48c>
 801170e:	4b46      	ldr	r3, [pc, #280]	@ (8011828 <tcp_slowtmr+0x598>)
 8011710:	f240 5271 	movw	r2, #1393	@ 0x571
 8011714:	4947      	ldr	r1, [pc, #284]	@ (8011834 <tcp_slowtmr+0x5a4>)
 8011716:	4846      	ldr	r0, [pc, #280]	@ (8011830 <tcp_slowtmr+0x5a0>)
 8011718:	f008 fbe0 	bl	8019edc <iprintf>
        tcp_active_pcbs = pcb->next;
 801171c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	4a40      	ldr	r2, [pc, #256]	@ (8011824 <tcp_slowtmr+0x594>)
 8011722:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8011724:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011728:	2b00      	cmp	r3, #0
 801172a:	d013      	beq.n	8011754 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801172c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801172e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011732:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011734:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8011736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011738:	3304      	adds	r3, #4
 801173a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801173c:	8ad2      	ldrh	r2, [r2, #22]
 801173e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011740:	8b09      	ldrh	r1, [r1, #24]
 8011742:	9102      	str	r1, [sp, #8]
 8011744:	9201      	str	r2, [sp, #4]
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	462b      	mov	r3, r5
 801174a:	4622      	mov	r2, r4
 801174c:	4601      	mov	r1, r0
 801174e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011750:	f004 f984 	bl	8015a5c <tcp_rst>
      err_arg = pcb->callback_arg;
 8011754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801175a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801175c:	7d1b      	ldrb	r3, [r3, #20]
 801175e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011762:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801176a:	6838      	ldr	r0, [r7, #0]
 801176c:	f7ff f9f2 	bl	8010b54 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8011770:	4b31      	ldr	r3, [pc, #196]	@ (8011838 <tcp_slowtmr+0x5a8>)
 8011772:	2200      	movs	r2, #0
 8011774:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d004      	beq.n	8011786 <tcp_slowtmr+0x4f6>
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	f06f 010c 	mvn.w	r1, #12
 8011782:	68b8      	ldr	r0, [r7, #8]
 8011784:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011786:	4b2c      	ldr	r3, [pc, #176]	@ (8011838 <tcp_slowtmr+0x5a8>)
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d037      	beq.n	80117fe <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801178e:	e592      	b.n	80112b6 <tcp_slowtmr+0x26>
      prev = pcb;
 8011790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011792:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011796:	68db      	ldr	r3, [r3, #12]
 8011798:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801179a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801179c:	7f1b      	ldrb	r3, [r3, #28]
 801179e:	3301      	adds	r3, #1
 80117a0:	b2da      	uxtb	r2, r3
 80117a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117a4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80117a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117a8:	7f1a      	ldrb	r2, [r3, #28]
 80117aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ac:	7f5b      	ldrb	r3, [r3, #29]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d325      	bcc.n	80117fe <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80117b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117b4:	2200      	movs	r2, #0
 80117b6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80117b8:	4b1f      	ldr	r3, [pc, #124]	@ (8011838 <tcp_slowtmr+0x5a8>)
 80117ba:	2200      	movs	r2, #0
 80117bc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80117be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d00b      	beq.n	80117e0 <tcp_slowtmr+0x550>
 80117c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80117ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117d0:	6912      	ldr	r2, [r2, #16]
 80117d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80117d4:	4610      	mov	r0, r2
 80117d6:	4798      	blx	r3
 80117d8:	4603      	mov	r3, r0
 80117da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80117de:	e002      	b.n	80117e6 <tcp_slowtmr+0x556>
 80117e0:	2300      	movs	r3, #0
 80117e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80117e6:	4b14      	ldr	r3, [pc, #80]	@ (8011838 <tcp_slowtmr+0x5a8>)
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	f47f ad62 	bne.w	80112b4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80117f0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d102      	bne.n	80117fe <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80117f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80117fa:	f003 fb7b 	bl	8014ef4 <tcp_output>
  while (pcb != NULL) {
 80117fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011800:	2b00      	cmp	r3, #0
 8011802:	f47f ad5e 	bne.w	80112c2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011806:	2300      	movs	r3, #0
 8011808:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801180a:	4b0c      	ldr	r3, [pc, #48]	@ (801183c <tcp_slowtmr+0x5ac>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011810:	e069      	b.n	80118e6 <tcp_slowtmr+0x656>
 8011812:	bf00      	nop
 8011814:	200274ac 	.word	0x200274ac
 8011818:	000a4cb8 	.word	0x000a4cb8
 801181c:	10624dd3 	.word	0x10624dd3
 8011820:	000124f8 	.word	0x000124f8
 8011824:	200274b8 	.word	0x200274b8
 8011828:	0801bcd0 	.word	0x0801bcd0
 801182c:	0801c108 	.word	0x0801c108
 8011830:	0801bd14 	.word	0x0801bd14
 8011834:	0801c134 	.word	0x0801c134
 8011838:	200274c0 	.word	0x200274c0
 801183c:	200274bc 	.word	0x200274bc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011842:	7d1b      	ldrb	r3, [r3, #20]
 8011844:	2b0a      	cmp	r3, #10
 8011846:	d006      	beq.n	8011856 <tcp_slowtmr+0x5c6>
 8011848:	4b2b      	ldr	r3, [pc, #172]	@ (80118f8 <tcp_slowtmr+0x668>)
 801184a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801184e:	492b      	ldr	r1, [pc, #172]	@ (80118fc <tcp_slowtmr+0x66c>)
 8011850:	482b      	ldr	r0, [pc, #172]	@ (8011900 <tcp_slowtmr+0x670>)
 8011852:	f008 fb43 	bl	8019edc <iprintf>
    pcb_remove = 0;
 8011856:	2300      	movs	r3, #0
 8011858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801185c:	4b29      	ldr	r3, [pc, #164]	@ (8011904 <tcp_slowtmr+0x674>)
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011862:	6a1b      	ldr	r3, [r3, #32]
 8011864:	1ad3      	subs	r3, r2, r3
 8011866:	2bf0      	cmp	r3, #240	@ 0xf0
 8011868:	d904      	bls.n	8011874 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801186a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801186e:	3301      	adds	r3, #1
 8011870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011878:	2b00      	cmp	r3, #0
 801187a:	d02f      	beq.n	80118dc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801187c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801187e:	f000 fb2b 	bl	8011ed8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011884:	2b00      	cmp	r3, #0
 8011886:	d010      	beq.n	80118aa <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011888:	4b1f      	ldr	r3, [pc, #124]	@ (8011908 <tcp_slowtmr+0x678>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801188e:	429a      	cmp	r2, r3
 8011890:	d106      	bne.n	80118a0 <tcp_slowtmr+0x610>
 8011892:	4b19      	ldr	r3, [pc, #100]	@ (80118f8 <tcp_slowtmr+0x668>)
 8011894:	f240 52af 	movw	r2, #1455	@ 0x5af
 8011898:	491c      	ldr	r1, [pc, #112]	@ (801190c <tcp_slowtmr+0x67c>)
 801189a:	4819      	ldr	r0, [pc, #100]	@ (8011900 <tcp_slowtmr+0x670>)
 801189c:	f008 fb1e 	bl	8019edc <iprintf>
        prev->next = pcb->next;
 80118a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118a2:	68da      	ldr	r2, [r3, #12]
 80118a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118a6:	60da      	str	r2, [r3, #12]
 80118a8:	e00f      	b.n	80118ca <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80118aa:	4b17      	ldr	r3, [pc, #92]	@ (8011908 <tcp_slowtmr+0x678>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d006      	beq.n	80118c2 <tcp_slowtmr+0x632>
 80118b4:	4b10      	ldr	r3, [pc, #64]	@ (80118f8 <tcp_slowtmr+0x668>)
 80118b6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80118ba:	4915      	ldr	r1, [pc, #84]	@ (8011910 <tcp_slowtmr+0x680>)
 80118bc:	4810      	ldr	r0, [pc, #64]	@ (8011900 <tcp_slowtmr+0x670>)
 80118be:	f008 fb0d 	bl	8019edc <iprintf>
        tcp_tw_pcbs = pcb->next;
 80118c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c4:	68db      	ldr	r3, [r3, #12]
 80118c6:	4a10      	ldr	r2, [pc, #64]	@ (8011908 <tcp_slowtmr+0x678>)
 80118c8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80118ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118cc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80118ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118d0:	68db      	ldr	r3, [r3, #12]
 80118d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80118d4:	69f8      	ldr	r0, [r7, #28]
 80118d6:	f7ff f93d 	bl	8010b54 <tcp_free>
 80118da:	e004      	b.n	80118e6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80118dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118de:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80118e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80118e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d1a9      	bne.n	8011840 <tcp_slowtmr+0x5b0>
    }
  }
}
 80118ec:	bf00      	nop
 80118ee:	bf00      	nop
 80118f0:	3730      	adds	r7, #48	@ 0x30
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bdb0      	pop	{r4, r5, r7, pc}
 80118f6:	bf00      	nop
 80118f8:	0801bcd0 	.word	0x0801bcd0
 80118fc:	0801c160 	.word	0x0801c160
 8011900:	0801bd14 	.word	0x0801bd14
 8011904:	200274ac 	.word	0x200274ac
 8011908:	200274bc 	.word	0x200274bc
 801190c:	0801c190 	.word	0x0801c190
 8011910:	0801c1b8 	.word	0x0801c1b8

08011914 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b082      	sub	sp, #8
 8011918:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801191a:	4b2d      	ldr	r3, [pc, #180]	@ (80119d0 <tcp_fasttmr+0xbc>)
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	3301      	adds	r3, #1
 8011920:	b2da      	uxtb	r2, r3
 8011922:	4b2b      	ldr	r3, [pc, #172]	@ (80119d0 <tcp_fasttmr+0xbc>)
 8011924:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011926:	4b2b      	ldr	r3, [pc, #172]	@ (80119d4 <tcp_fasttmr+0xc0>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801192c:	e048      	b.n	80119c0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	7f9a      	ldrb	r2, [r3, #30]
 8011932:	4b27      	ldr	r3, [pc, #156]	@ (80119d0 <tcp_fasttmr+0xbc>)
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	429a      	cmp	r2, r3
 8011938:	d03f      	beq.n	80119ba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801193a:	4b25      	ldr	r3, [pc, #148]	@ (80119d0 <tcp_fasttmr+0xbc>)
 801193c:	781a      	ldrb	r2, [r3, #0]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	8b5b      	ldrh	r3, [r3, #26]
 8011946:	f003 0301 	and.w	r3, r3, #1
 801194a:	2b00      	cmp	r3, #0
 801194c:	d010      	beq.n	8011970 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	8b5b      	ldrh	r3, [r3, #26]
 8011952:	f043 0302 	orr.w	r3, r3, #2
 8011956:	b29a      	uxth	r2, r3
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f003 fac9 	bl	8014ef4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	8b5b      	ldrh	r3, [r3, #26]
 8011966:	f023 0303 	bic.w	r3, r3, #3
 801196a:	b29a      	uxth	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	8b5b      	ldrh	r3, [r3, #26]
 8011974:	f003 0308 	and.w	r3, r3, #8
 8011978:	2b00      	cmp	r3, #0
 801197a:	d009      	beq.n	8011990 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	8b5b      	ldrh	r3, [r3, #26]
 8011980:	f023 0308 	bic.w	r3, r3, #8
 8011984:	b29a      	uxth	r2, r3
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f7ff fa76 	bl	8010e7c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	68db      	ldr	r3, [r3, #12]
 8011994:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801199a:	2b00      	cmp	r3, #0
 801199c:	d00a      	beq.n	80119b4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801199e:	4b0e      	ldr	r3, [pc, #56]	@ (80119d8 <tcp_fasttmr+0xc4>)
 80119a0:	2200      	movs	r2, #0
 80119a2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f000 f819 	bl	80119dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80119aa:	4b0b      	ldr	r3, [pc, #44]	@ (80119d8 <tcp_fasttmr+0xc4>)
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d000      	beq.n	80119b4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80119b2:	e7b8      	b.n	8011926 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	607b      	str	r3, [r7, #4]
 80119b8:	e002      	b.n	80119c0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	68db      	ldr	r3, [r3, #12]
 80119be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d1b3      	bne.n	801192e <tcp_fasttmr+0x1a>
    }
  }
}
 80119c6:	bf00      	nop
 80119c8:	bf00      	nop
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	200274c2 	.word	0x200274c2
 80119d4:	200274b8 	.word	0x200274b8
 80119d8:	200274c0 	.word	0x200274c0

080119dc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80119dc:	b590      	push	{r4, r7, lr}
 80119de:	b085      	sub	sp, #20
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d109      	bne.n	80119fe <tcp_process_refused_data+0x22>
 80119ea:	4b37      	ldr	r3, [pc, #220]	@ (8011ac8 <tcp_process_refused_data+0xec>)
 80119ec:	f240 6209 	movw	r2, #1545	@ 0x609
 80119f0:	4936      	ldr	r1, [pc, #216]	@ (8011acc <tcp_process_refused_data+0xf0>)
 80119f2:	4837      	ldr	r0, [pc, #220]	@ (8011ad0 <tcp_process_refused_data+0xf4>)
 80119f4:	f008 fa72 	bl	8019edc <iprintf>
 80119f8:	f06f 030f 	mvn.w	r3, #15
 80119fc:	e060      	b.n	8011ac0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a02:	7b5b      	ldrb	r3, [r3, #13]
 8011a04:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a0a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d00b      	beq.n	8011a34 <tcp_process_refused_data+0x58>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6918      	ldr	r0, [r3, #16]
 8011a26:	2300      	movs	r3, #0
 8011a28:	68ba      	ldr	r2, [r7, #8]
 8011a2a:	6879      	ldr	r1, [r7, #4]
 8011a2c:	47a0      	blx	r4
 8011a2e:	4603      	mov	r3, r0
 8011a30:	73fb      	strb	r3, [r7, #15]
 8011a32:	e007      	b.n	8011a44 <tcp_process_refused_data+0x68>
 8011a34:	2300      	movs	r3, #0
 8011a36:	68ba      	ldr	r2, [r7, #8]
 8011a38:	6879      	ldr	r1, [r7, #4]
 8011a3a:	2000      	movs	r0, #0
 8011a3c:	f000 f8a4 	bl	8011b88 <tcp_recv_null>
 8011a40:	4603      	mov	r3, r0
 8011a42:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d12a      	bne.n	8011aa2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011a4c:	7bbb      	ldrb	r3, [r7, #14]
 8011a4e:	f003 0320 	and.w	r3, r3, #32
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d033      	beq.n	8011abe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a5a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011a5e:	d005      	beq.n	8011a6c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a64:	3301      	adds	r3, #1
 8011a66:	b29a      	uxth	r2, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d00b      	beq.n	8011a8e <tcp_process_refused_data+0xb2>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6918      	ldr	r0, [r3, #16]
 8011a80:	2300      	movs	r3, #0
 8011a82:	2200      	movs	r2, #0
 8011a84:	6879      	ldr	r1, [r7, #4]
 8011a86:	47a0      	blx	r4
 8011a88:	4603      	mov	r3, r0
 8011a8a:	73fb      	strb	r3, [r7, #15]
 8011a8c:	e001      	b.n	8011a92 <tcp_process_refused_data+0xb6>
 8011a8e:	2300      	movs	r3, #0
 8011a90:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a96:	f113 0f0d 	cmn.w	r3, #13
 8011a9a:	d110      	bne.n	8011abe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011a9c:	f06f 030c 	mvn.w	r3, #12
 8011aa0:	e00e      	b.n	8011ac0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011aa6:	f113 0f0d 	cmn.w	r3, #13
 8011aaa:	d102      	bne.n	8011ab2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011aac:	f06f 030c 	mvn.w	r3, #12
 8011ab0:	e006      	b.n	8011ac0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	68ba      	ldr	r2, [r7, #8]
 8011ab6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8011ab8:	f06f 0304 	mvn.w	r3, #4
 8011abc:	e000      	b.n	8011ac0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011abe:	2300      	movs	r3, #0
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3714      	adds	r7, #20
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd90      	pop	{r4, r7, pc}
 8011ac8:	0801bcd0 	.word	0x0801bcd0
 8011acc:	0801c1e0 	.word	0x0801c1e0
 8011ad0:	0801bd14 	.word	0x0801bd14

08011ad4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011adc:	e007      	b.n	8011aee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f000 f80a 	bl	8011afe <tcp_seg_free>
    seg = next;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d1f4      	bne.n	8011ade <tcp_segs_free+0xa>
  }
}
 8011af4:	bf00      	nop
 8011af6:	bf00      	nop
 8011af8:	3710      	adds	r7, #16
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}

08011afe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011afe:	b580      	push	{r7, lr}
 8011b00:	b082      	sub	sp, #8
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d00c      	beq.n	8011b26 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d004      	beq.n	8011b1e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7fe fd5f 	bl	80105dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011b1e:	6879      	ldr	r1, [r7, #4]
 8011b20:	2003      	movs	r0, #3
 8011b22:	f7fd feb7 	bl	800f894 <memp_free>
  }
}
 8011b26:	bf00      	nop
 8011b28:	3708      	adds	r7, #8
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}
	...

08011b30 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d106      	bne.n	8011b4c <tcp_seg_copy+0x1c>
 8011b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8011b7c <tcp_seg_copy+0x4c>)
 8011b40:	f240 6282 	movw	r2, #1666	@ 0x682
 8011b44:	490e      	ldr	r1, [pc, #56]	@ (8011b80 <tcp_seg_copy+0x50>)
 8011b46:	480f      	ldr	r0, [pc, #60]	@ (8011b84 <tcp_seg_copy+0x54>)
 8011b48:	f008 f9c8 	bl	8019edc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011b4c:	2003      	movs	r0, #3
 8011b4e:	f7fd fe2b 	bl	800f7a8 <memp_malloc>
 8011b52:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d101      	bne.n	8011b5e <tcp_seg_copy+0x2e>
    return NULL;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	e00a      	b.n	8011b74 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011b5e:	2210      	movs	r2, #16
 8011b60:	6879      	ldr	r1, [r7, #4]
 8011b62:	68f8      	ldr	r0, [r7, #12]
 8011b64:	f008 fbe5 	bl	801a332 <memcpy>
  pbuf_ref(cseg->p);
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7fe fddb 	bl	8010728 <pbuf_ref>
  return cseg;
 8011b72:	68fb      	ldr	r3, [r7, #12]
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	3710      	adds	r7, #16
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	0801bcd0 	.word	0x0801bcd0
 8011b80:	0801c224 	.word	0x0801c224
 8011b84:	0801bd14 	.word	0x0801bd14

08011b88 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	60f8      	str	r0, [r7, #12]
 8011b90:	60b9      	str	r1, [r7, #8]
 8011b92:	607a      	str	r2, [r7, #4]
 8011b94:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d109      	bne.n	8011bb0 <tcp_recv_null+0x28>
 8011b9c:	4b12      	ldr	r3, [pc, #72]	@ (8011be8 <tcp_recv_null+0x60>)
 8011b9e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011ba2:	4912      	ldr	r1, [pc, #72]	@ (8011bec <tcp_recv_null+0x64>)
 8011ba4:	4812      	ldr	r0, [pc, #72]	@ (8011bf0 <tcp_recv_null+0x68>)
 8011ba6:	f008 f999 	bl	8019edc <iprintf>
 8011baa:	f06f 030f 	mvn.w	r3, #15
 8011bae:	e016      	b.n	8011bde <tcp_recv_null+0x56>

  if (p != NULL) {
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d009      	beq.n	8011bca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	891b      	ldrh	r3, [r3, #8]
 8011bba:	4619      	mov	r1, r3
 8011bbc:	68b8      	ldr	r0, [r7, #8]
 8011bbe:	f7ff fb17 	bl	80111f0 <tcp_recved>
    pbuf_free(p);
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7fe fd0a 	bl	80105dc <pbuf_free>
 8011bc8:	e008      	b.n	8011bdc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011bca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d104      	bne.n	8011bdc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011bd2:	68b8      	ldr	r0, [r7, #8]
 8011bd4:	f7ff f9bc 	bl	8010f50 <tcp_close>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	e000      	b.n	8011bde <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011bdc:	2300      	movs	r3, #0
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3710      	adds	r7, #16
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	0801bcd0 	.word	0x0801bcd0
 8011bec:	0801c240 	.word	0x0801c240
 8011bf0:	0801bd14 	.word	0x0801bd14

08011bf4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	db01      	blt.n	8011c0a <tcp_kill_prio+0x16>
 8011c06:	79fb      	ldrb	r3, [r7, #7]
 8011c08:	e000      	b.n	8011c0c <tcp_kill_prio+0x18>
 8011c0a:	237f      	movs	r3, #127	@ 0x7f
 8011c0c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011c0e:	7afb      	ldrb	r3, [r7, #11]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d034      	beq.n	8011c7e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011c14:	7afb      	ldrb	r3, [r7, #11]
 8011c16:	3b01      	subs	r3, #1
 8011c18:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c22:	4b19      	ldr	r3, [pc, #100]	@ (8011c88 <tcp_kill_prio+0x94>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	617b      	str	r3, [r7, #20]
 8011c28:	e01f      	b.n	8011c6a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	7d5b      	ldrb	r3, [r3, #21]
 8011c2e:	7afa      	ldrb	r2, [r7, #11]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d80c      	bhi.n	8011c4e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011c38:	7afa      	ldrb	r2, [r7, #11]
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d112      	bne.n	8011c64 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011c3e:	4b13      	ldr	r3, [pc, #76]	@ (8011c8c <tcp_kill_prio+0x98>)
 8011c40:	681a      	ldr	r2, [r3, #0]
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	6a1b      	ldr	r3, [r3, #32]
 8011c46:	1ad3      	subs	r3, r2, r3
 8011c48:	68fa      	ldr	r2, [r7, #12]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d80a      	bhi.n	8011c64 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8011c8c <tcp_kill_prio+0x98>)
 8011c50:	681a      	ldr	r2, [r3, #0]
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	6a1b      	ldr	r3, [r3, #32]
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	7d5b      	ldrb	r3, [r3, #21]
 8011c62:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	68db      	ldr	r3, [r3, #12]
 8011c68:	617b      	str	r3, [r7, #20]
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d1dc      	bne.n	8011c2a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d004      	beq.n	8011c80 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011c76:	6938      	ldr	r0, [r7, #16]
 8011c78:	f7ff fa54 	bl	8011124 <tcp_abort>
 8011c7c:	e000      	b.n	8011c80 <tcp_kill_prio+0x8c>
    return;
 8011c7e:	bf00      	nop
  }
}
 8011c80:	3718      	adds	r7, #24
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	200274b8 	.word	0x200274b8
 8011c8c:	200274ac 	.word	0x200274ac

08011c90 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b086      	sub	sp, #24
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	4603      	mov	r3, r0
 8011c98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011c9a:	79fb      	ldrb	r3, [r7, #7]
 8011c9c:	2b08      	cmp	r3, #8
 8011c9e:	d009      	beq.n	8011cb4 <tcp_kill_state+0x24>
 8011ca0:	79fb      	ldrb	r3, [r7, #7]
 8011ca2:	2b09      	cmp	r3, #9
 8011ca4:	d006      	beq.n	8011cb4 <tcp_kill_state+0x24>
 8011ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8011d10 <tcp_kill_state+0x80>)
 8011ca8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8011cac:	4919      	ldr	r1, [pc, #100]	@ (8011d14 <tcp_kill_state+0x84>)
 8011cae:	481a      	ldr	r0, [pc, #104]	@ (8011d18 <tcp_kill_state+0x88>)
 8011cb0:	f008 f914 	bl	8019edc <iprintf>

  inactivity = 0;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011cbc:	4b17      	ldr	r3, [pc, #92]	@ (8011d1c <tcp_kill_state+0x8c>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	617b      	str	r3, [r7, #20]
 8011cc2:	e017      	b.n	8011cf4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	7d1b      	ldrb	r3, [r3, #20]
 8011cc8:	79fa      	ldrb	r2, [r7, #7]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d10f      	bne.n	8011cee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011cce:	4b14      	ldr	r3, [pc, #80]	@ (8011d20 <tcp_kill_state+0x90>)
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	6a1b      	ldr	r3, [r3, #32]
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d807      	bhi.n	8011cee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011cde:	4b10      	ldr	r3, [pc, #64]	@ (8011d20 <tcp_kill_state+0x90>)
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	6a1b      	ldr	r3, [r3, #32]
 8011ce6:	1ad3      	subs	r3, r2, r3
 8011ce8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	617b      	str	r3, [r7, #20]
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d1e4      	bne.n	8011cc4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d003      	beq.n	8011d08 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011d00:	2100      	movs	r1, #0
 8011d02:	6938      	ldr	r0, [r7, #16]
 8011d04:	f7ff f950 	bl	8010fa8 <tcp_abandon>
  }
}
 8011d08:	bf00      	nop
 8011d0a:	3718      	adds	r7, #24
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	0801bcd0 	.word	0x0801bcd0
 8011d14:	0801c25c 	.word	0x0801c25c
 8011d18:	0801bd14 	.word	0x0801bd14
 8011d1c:	200274b8 	.word	0x200274b8
 8011d20:	200274ac 	.word	0x200274ac

08011d24 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b084      	sub	sp, #16
 8011d28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d32:	4b12      	ldr	r3, [pc, #72]	@ (8011d7c <tcp_kill_timewait+0x58>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	60fb      	str	r3, [r7, #12]
 8011d38:	e012      	b.n	8011d60 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011d3a:	4b11      	ldr	r3, [pc, #68]	@ (8011d80 <tcp_kill_timewait+0x5c>)
 8011d3c:	681a      	ldr	r2, [r3, #0]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	6a1b      	ldr	r3, [r3, #32]
 8011d42:	1ad3      	subs	r3, r2, r3
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d807      	bhi.n	8011d5a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8011d80 <tcp_kill_timewait+0x5c>)
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	6a1b      	ldr	r3, [r3, #32]
 8011d52:	1ad3      	subs	r3, r2, r3
 8011d54:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	68db      	ldr	r3, [r3, #12]
 8011d5e:	60fb      	str	r3, [r7, #12]
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d1e9      	bne.n	8011d3a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d002      	beq.n	8011d72 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011d6c:	68b8      	ldr	r0, [r7, #8]
 8011d6e:	f7ff f9d9 	bl	8011124 <tcp_abort>
  }
}
 8011d72:	bf00      	nop
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	200274bc 	.word	0x200274bc
 8011d80:	200274ac 	.word	0x200274ac

08011d84 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011d8a:	4b10      	ldr	r3, [pc, #64]	@ (8011dcc <tcp_handle_closepend+0x48>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011d90:	e014      	b.n	8011dbc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	8b5b      	ldrh	r3, [r3, #26]
 8011d9c:	f003 0308 	and.w	r3, r3, #8
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d009      	beq.n	8011db8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	8b5b      	ldrh	r3, [r3, #26]
 8011da8:	f023 0308 	bic.w	r3, r3, #8
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7ff f862 	bl	8010e7c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d1e7      	bne.n	8011d92 <tcp_handle_closepend+0xe>
  }
}
 8011dc2:	bf00      	nop
 8011dc4:	bf00      	nop
 8011dc6:	3708      	adds	r7, #8
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	200274b8 	.word	0x200274b8

08011dd0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011dda:	2001      	movs	r0, #1
 8011ddc:	f7fd fce4 	bl	800f7a8 <memp_malloc>
 8011de0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d126      	bne.n	8011e36 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011de8:	f7ff ffcc 	bl	8011d84 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011dec:	f7ff ff9a 	bl	8011d24 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011df0:	2001      	movs	r0, #1
 8011df2:	f7fd fcd9 	bl	800f7a8 <memp_malloc>
 8011df6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d11b      	bne.n	8011e36 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011dfe:	2009      	movs	r0, #9
 8011e00:	f7ff ff46 	bl	8011c90 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011e04:	2001      	movs	r0, #1
 8011e06:	f7fd fccf 	bl	800f7a8 <memp_malloc>
 8011e0a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d111      	bne.n	8011e36 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011e12:	2008      	movs	r0, #8
 8011e14:	f7ff ff3c 	bl	8011c90 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011e18:	2001      	movs	r0, #1
 8011e1a:	f7fd fcc5 	bl	800f7a8 <memp_malloc>
 8011e1e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d107      	bne.n	8011e36 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011e26:	79fb      	ldrb	r3, [r7, #7]
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7ff fee3 	bl	8011bf4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011e2e:	2001      	movs	r0, #1
 8011e30:	f7fd fcba 	bl	800f7a8 <memp_malloc>
 8011e34:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d03f      	beq.n	8011ebc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011e3c:	229c      	movs	r2, #156	@ 0x9c
 8011e3e:	2100      	movs	r1, #0
 8011e40:	68f8      	ldr	r0, [r7, #12]
 8011e42:	f008 f9a3 	bl	801a18c <memset>
    pcb->prio = prio;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	79fa      	ldrb	r2, [r7, #7]
 8011e4a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8011e52:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8011e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	22ff      	movs	r2, #255	@ 0xff
 8011e6a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011e72:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2206      	movs	r2, #6
 8011e78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	2206      	movs	r2, #6
 8011e80:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011e88:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2201      	movs	r2, #1
 8011e8e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8011e92:	4b0d      	ldr	r3, [pc, #52]	@ (8011ec8 <tcp_alloc+0xf8>)
 8011e94:	681a      	ldr	r2, [r3, #0]
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8011ecc <tcp_alloc+0xfc>)
 8011e9c:	781a      	ldrb	r2, [r3, #0]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8011ea8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	4a08      	ldr	r2, [pc, #32]	@ (8011ed0 <tcp_alloc+0x100>)
 8011eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	4a07      	ldr	r2, [pc, #28]	@ (8011ed4 <tcp_alloc+0x104>)
 8011eb8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3710      	adds	r7, #16
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	200274ac 	.word	0x200274ac
 8011ecc:	200274c2 	.word	0x200274c2
 8011ed0:	08011b89 	.word	0x08011b89
 8011ed4:	006ddd00 	.word	0x006ddd00

08011ed8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d107      	bne.n	8011ef6 <tcp_pcb_purge+0x1e>
 8011ee6:	4b21      	ldr	r3, [pc, #132]	@ (8011f6c <tcp_pcb_purge+0x94>)
 8011ee8:	f640 0251 	movw	r2, #2129	@ 0x851
 8011eec:	4920      	ldr	r1, [pc, #128]	@ (8011f70 <tcp_pcb_purge+0x98>)
 8011eee:	4821      	ldr	r0, [pc, #132]	@ (8011f74 <tcp_pcb_purge+0x9c>)
 8011ef0:	f007 fff4 	bl	8019edc <iprintf>
 8011ef4:	e037      	b.n	8011f66 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	7d1b      	ldrb	r3, [r3, #20]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d033      	beq.n	8011f66 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011f02:	2b0a      	cmp	r3, #10
 8011f04:	d02f      	beq.n	8011f66 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d02b      	beq.n	8011f66 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d007      	beq.n	8011f26 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7fe fb5e 	bl	80105dc <pbuf_free>
      pcb->refused_data = NULL;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2200      	movs	r2, #0
 8011f24:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d002      	beq.n	8011f34 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f000 f986 	bl	8012240 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011f3a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7ff fdc7 	bl	8011ad4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7ff fdc2 	bl	8011ad4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2200      	movs	r2, #0
 8011f54:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2200      	movs	r2, #0
 8011f62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	0801bcd0 	.word	0x0801bcd0
 8011f70:	0801c31c 	.word	0x0801c31c
 8011f74:	0801bd14 	.word	0x0801bd14

08011f78 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d106      	bne.n	8011f96 <tcp_pcb_remove+0x1e>
 8011f88:	4b3e      	ldr	r3, [pc, #248]	@ (8012084 <tcp_pcb_remove+0x10c>)
 8011f8a:	f640 0283 	movw	r2, #2179	@ 0x883
 8011f8e:	493e      	ldr	r1, [pc, #248]	@ (8012088 <tcp_pcb_remove+0x110>)
 8011f90:	483e      	ldr	r0, [pc, #248]	@ (801208c <tcp_pcb_remove+0x114>)
 8011f92:	f007 ffa3 	bl	8019edc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d106      	bne.n	8011faa <tcp_pcb_remove+0x32>
 8011f9c:	4b39      	ldr	r3, [pc, #228]	@ (8012084 <tcp_pcb_remove+0x10c>)
 8011f9e:	f640 0284 	movw	r2, #2180	@ 0x884
 8011fa2:	493b      	ldr	r1, [pc, #236]	@ (8012090 <tcp_pcb_remove+0x118>)
 8011fa4:	4839      	ldr	r0, [pc, #228]	@ (801208c <tcp_pcb_remove+0x114>)
 8011fa6:	f007 ff99 	bl	8019edc <iprintf>

  TCP_RMV(pcblist, pcb);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	683a      	ldr	r2, [r7, #0]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d105      	bne.n	8011fc0 <tcp_pcb_remove+0x48>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	68da      	ldr	r2, [r3, #12]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	601a      	str	r2, [r3, #0]
 8011fbe:	e013      	b.n	8011fe8 <tcp_pcb_remove+0x70>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	60fb      	str	r3, [r7, #12]
 8011fc6:	e00c      	b.n	8011fe2 <tcp_pcb_remove+0x6a>
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	683a      	ldr	r2, [r7, #0]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d104      	bne.n	8011fdc <tcp_pcb_remove+0x64>
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	68da      	ldr	r2, [r3, #12]
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	60da      	str	r2, [r3, #12]
 8011fda:	e005      	b.n	8011fe8 <tcp_pcb_remove+0x70>
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	68db      	ldr	r3, [r3, #12]
 8011fe0:	60fb      	str	r3, [r7, #12]
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d1ef      	bne.n	8011fc8 <tcp_pcb_remove+0x50>
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	2200      	movs	r2, #0
 8011fec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011fee:	6838      	ldr	r0, [r7, #0]
 8011ff0:	f7ff ff72 	bl	8011ed8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	7d1b      	ldrb	r3, [r3, #20]
 8011ff8:	2b0a      	cmp	r3, #10
 8011ffa:	d013      	beq.n	8012024 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012000:	2b01      	cmp	r3, #1
 8012002:	d00f      	beq.n	8012024 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	8b5b      	ldrh	r3, [r3, #26]
 8012008:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801200c:	2b00      	cmp	r3, #0
 801200e:	d009      	beq.n	8012024 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	8b5b      	ldrh	r3, [r3, #26]
 8012014:	f043 0302 	orr.w	r3, r3, #2
 8012018:	b29a      	uxth	r2, r3
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801201e:	6838      	ldr	r0, [r7, #0]
 8012020:	f002 ff68 	bl	8014ef4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	7d1b      	ldrb	r3, [r3, #20]
 8012028:	2b01      	cmp	r3, #1
 801202a:	d020      	beq.n	801206e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012030:	2b00      	cmp	r3, #0
 8012032:	d006      	beq.n	8012042 <tcp_pcb_remove+0xca>
 8012034:	4b13      	ldr	r3, [pc, #76]	@ (8012084 <tcp_pcb_remove+0x10c>)
 8012036:	f640 0293 	movw	r2, #2195	@ 0x893
 801203a:	4916      	ldr	r1, [pc, #88]	@ (8012094 <tcp_pcb_remove+0x11c>)
 801203c:	4813      	ldr	r0, [pc, #76]	@ (801208c <tcp_pcb_remove+0x114>)
 801203e:	f007 ff4d 	bl	8019edc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012046:	2b00      	cmp	r3, #0
 8012048:	d006      	beq.n	8012058 <tcp_pcb_remove+0xe0>
 801204a:	4b0e      	ldr	r3, [pc, #56]	@ (8012084 <tcp_pcb_remove+0x10c>)
 801204c:	f640 0294 	movw	r2, #2196	@ 0x894
 8012050:	4911      	ldr	r1, [pc, #68]	@ (8012098 <tcp_pcb_remove+0x120>)
 8012052:	480e      	ldr	r0, [pc, #56]	@ (801208c <tcp_pcb_remove+0x114>)
 8012054:	f007 ff42 	bl	8019edc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801205c:	2b00      	cmp	r3, #0
 801205e:	d006      	beq.n	801206e <tcp_pcb_remove+0xf6>
 8012060:	4b08      	ldr	r3, [pc, #32]	@ (8012084 <tcp_pcb_remove+0x10c>)
 8012062:	f640 0296 	movw	r2, #2198	@ 0x896
 8012066:	490d      	ldr	r1, [pc, #52]	@ (801209c <tcp_pcb_remove+0x124>)
 8012068:	4808      	ldr	r0, [pc, #32]	@ (801208c <tcp_pcb_remove+0x114>)
 801206a:	f007 ff37 	bl	8019edc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	2200      	movs	r2, #0
 8012072:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	2200      	movs	r2, #0
 8012078:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801207a:	bf00      	nop
 801207c:	3710      	adds	r7, #16
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
 8012082:	bf00      	nop
 8012084:	0801bcd0 	.word	0x0801bcd0
 8012088:	0801c338 	.word	0x0801c338
 801208c:	0801bd14 	.word	0x0801bd14
 8012090:	0801c354 	.word	0x0801c354
 8012094:	0801c374 	.word	0x0801c374
 8012098:	0801c38c 	.word	0x0801c38c
 801209c:	0801c3a8 	.word	0x0801c3a8

080120a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d106      	bne.n	80120bc <tcp_next_iss+0x1c>
 80120ae:	4b0a      	ldr	r3, [pc, #40]	@ (80120d8 <tcp_next_iss+0x38>)
 80120b0:	f640 02af 	movw	r2, #2223	@ 0x8af
 80120b4:	4909      	ldr	r1, [pc, #36]	@ (80120dc <tcp_next_iss+0x3c>)
 80120b6:	480a      	ldr	r0, [pc, #40]	@ (80120e0 <tcp_next_iss+0x40>)
 80120b8:	f007 ff10 	bl	8019edc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80120bc:	4b09      	ldr	r3, [pc, #36]	@ (80120e4 <tcp_next_iss+0x44>)
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	4b09      	ldr	r3, [pc, #36]	@ (80120e8 <tcp_next_iss+0x48>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	4413      	add	r3, r2
 80120c6:	4a07      	ldr	r2, [pc, #28]	@ (80120e4 <tcp_next_iss+0x44>)
 80120c8:	6013      	str	r3, [r2, #0]
  return iss;
 80120ca:	4b06      	ldr	r3, [pc, #24]	@ (80120e4 <tcp_next_iss+0x44>)
 80120cc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3708      	adds	r7, #8
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	bf00      	nop
 80120d8:	0801bcd0 	.word	0x0801bcd0
 80120dc:	0801c3c0 	.word	0x0801c3c0
 80120e0:	0801bd14 	.word	0x0801bd14
 80120e4:	20000028 	.word	0x20000028
 80120e8:	200274ac 	.word	0x200274ac

080120ec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b086      	sub	sp, #24
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	4603      	mov	r3, r0
 80120f4:	60b9      	str	r1, [r7, #8]
 80120f6:	607a      	str	r2, [r7, #4]
 80120f8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d106      	bne.n	801210e <tcp_eff_send_mss_netif+0x22>
 8012100:	4b14      	ldr	r3, [pc, #80]	@ (8012154 <tcp_eff_send_mss_netif+0x68>)
 8012102:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8012106:	4914      	ldr	r1, [pc, #80]	@ (8012158 <tcp_eff_send_mss_netif+0x6c>)
 8012108:	4814      	ldr	r0, [pc, #80]	@ (801215c <tcp_eff_send_mss_netif+0x70>)
 801210a:	f007 fee7 	bl	8019edc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d101      	bne.n	8012118 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012114:	89fb      	ldrh	r3, [r7, #14]
 8012116:	e019      	b.n	801214c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801211c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801211e:	8afb      	ldrh	r3, [r7, #22]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d012      	beq.n	801214a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012124:	2328      	movs	r3, #40	@ 0x28
 8012126:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012128:	8afa      	ldrh	r2, [r7, #22]
 801212a:	8abb      	ldrh	r3, [r7, #20]
 801212c:	429a      	cmp	r2, r3
 801212e:	d904      	bls.n	801213a <tcp_eff_send_mss_netif+0x4e>
 8012130:	8afa      	ldrh	r2, [r7, #22]
 8012132:	8abb      	ldrh	r3, [r7, #20]
 8012134:	1ad3      	subs	r3, r2, r3
 8012136:	b29b      	uxth	r3, r3
 8012138:	e000      	b.n	801213c <tcp_eff_send_mss_netif+0x50>
 801213a:	2300      	movs	r3, #0
 801213c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801213e:	8a7a      	ldrh	r2, [r7, #18]
 8012140:	89fb      	ldrh	r3, [r7, #14]
 8012142:	4293      	cmp	r3, r2
 8012144:	bf28      	it	cs
 8012146:	4613      	movcs	r3, r2
 8012148:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801214a:	89fb      	ldrh	r3, [r7, #14]
}
 801214c:	4618      	mov	r0, r3
 801214e:	3718      	adds	r7, #24
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}
 8012154:	0801bcd0 	.word	0x0801bcd0
 8012158:	0801c3dc 	.word	0x0801c3dc
 801215c:	0801bd14 	.word	0x0801bd14

08012160 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d119      	bne.n	80121a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012174:	4b10      	ldr	r3, [pc, #64]	@ (80121b8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012176:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801217a:	4910      	ldr	r1, [pc, #64]	@ (80121bc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801217c:	4810      	ldr	r0, [pc, #64]	@ (80121c0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801217e:	f007 fead 	bl	8019edc <iprintf>

  while (pcb != NULL) {
 8012182:	e011      	b.n	80121a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	429a      	cmp	r2, r3
 801218e:	d108      	bne.n	80121a2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012196:	68f8      	ldr	r0, [r7, #12]
 8012198:	f7fe ffc4 	bl	8011124 <tcp_abort>
      pcb = next;
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	60fb      	str	r3, [r7, #12]
 80121a0:	e002      	b.n	80121a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d1ea      	bne.n	8012184 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80121ae:	bf00      	nop
 80121b0:	bf00      	nop
 80121b2:	3710      	adds	r7, #16
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	0801bcd0 	.word	0x0801bcd0
 80121bc:	0801c404 	.word	0x0801c404
 80121c0:	0801bd14 	.word	0x0801bd14

080121c4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b084      	sub	sp, #16
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d02a      	beq.n	801222a <tcp_netif_ip_addr_changed+0x66>
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d026      	beq.n	801222a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80121dc:	4b15      	ldr	r3, [pc, #84]	@ (8012234 <tcp_netif_ip_addr_changed+0x70>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	4619      	mov	r1, r3
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f7ff ffbc 	bl	8012160 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80121e8:	4b13      	ldr	r3, [pc, #76]	@ (8012238 <tcp_netif_ip_addr_changed+0x74>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	4619      	mov	r1, r3
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f7ff ffb6 	bl	8012160 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d017      	beq.n	801222a <tcp_netif_ip_addr_changed+0x66>
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d013      	beq.n	801222a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012202:	4b0e      	ldr	r3, [pc, #56]	@ (801223c <tcp_netif_ip_addr_changed+0x78>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	60fb      	str	r3, [r7, #12]
 8012208:	e00c      	b.n	8012224 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	429a      	cmp	r2, r3
 8012214:	d103      	bne.n	801221e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	681a      	ldr	r2, [r3, #0]
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	60fb      	str	r3, [r7, #12]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d1ef      	bne.n	801220a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801222a:	bf00      	nop
 801222c:	3710      	adds	r7, #16
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	200274b8 	.word	0x200274b8
 8012238:	200274b0 	.word	0x200274b0
 801223c:	200274b4 	.word	0x200274b4

08012240 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801224c:	2b00      	cmp	r3, #0
 801224e:	d007      	beq.n	8012260 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012254:	4618      	mov	r0, r3
 8012256:	f7ff fc3d 	bl	8011ad4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2200      	movs	r2, #0
 801225e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012260:	bf00      	nop
 8012262:	3708      	adds	r7, #8
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012268:	b590      	push	{r4, r7, lr}
 801226a:	b08d      	sub	sp, #52	@ 0x34
 801226c:	af04      	add	r7, sp, #16
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d105      	bne.n	8012284 <tcp_input+0x1c>
 8012278:	4b9b      	ldr	r3, [pc, #620]	@ (80124e8 <tcp_input+0x280>)
 801227a:	2283      	movs	r2, #131	@ 0x83
 801227c:	499b      	ldr	r1, [pc, #620]	@ (80124ec <tcp_input+0x284>)
 801227e:	489c      	ldr	r0, [pc, #624]	@ (80124f0 <tcp_input+0x288>)
 8012280:	f007 fe2c 	bl	8019edc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	4a9a      	ldr	r2, [pc, #616]	@ (80124f4 <tcp_input+0x28c>)
 801228a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	895b      	ldrh	r3, [r3, #10]
 8012290:	2b13      	cmp	r3, #19
 8012292:	f240 83d1 	bls.w	8012a38 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012296:	4b98      	ldr	r3, [pc, #608]	@ (80124f8 <tcp_input+0x290>)
 8012298:	695b      	ldr	r3, [r3, #20]
 801229a:	4a97      	ldr	r2, [pc, #604]	@ (80124f8 <tcp_input+0x290>)
 801229c:	6812      	ldr	r2, [r2, #0]
 801229e:	4611      	mov	r1, r2
 80122a0:	4618      	mov	r0, r3
 80122a2:	f005 feef 	bl	8018084 <ip4_addr_isbroadcast_u32>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	f040 83c7 	bne.w	8012a3c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80122ae:	4b92      	ldr	r3, [pc, #584]	@ (80124f8 <tcp_input+0x290>)
 80122b0:	695b      	ldr	r3, [r3, #20]
 80122b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80122b6:	2be0      	cmp	r3, #224	@ 0xe0
 80122b8:	f000 83c0 	beq.w	8012a3c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80122bc:	4b8d      	ldr	r3, [pc, #564]	@ (80124f4 <tcp_input+0x28c>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	899b      	ldrh	r3, [r3, #12]
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7fc fd9b 	bl	800ee00 <lwip_htons>
 80122ca:	4603      	mov	r3, r0
 80122cc:	0b1b      	lsrs	r3, r3, #12
 80122ce:	b29b      	uxth	r3, r3
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	009b      	lsls	r3, r3, #2
 80122d4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80122d6:	7cbb      	ldrb	r3, [r7, #18]
 80122d8:	2b13      	cmp	r3, #19
 80122da:	f240 83b1 	bls.w	8012a40 <tcp_input+0x7d8>
 80122de:	7cbb      	ldrb	r3, [r7, #18]
 80122e0:	b29a      	uxth	r2, r3
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	891b      	ldrh	r3, [r3, #8]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	f200 83aa 	bhi.w	8012a40 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80122ec:	7cbb      	ldrb	r3, [r7, #18]
 80122ee:	b29b      	uxth	r3, r3
 80122f0:	3b14      	subs	r3, #20
 80122f2:	b29a      	uxth	r2, r3
 80122f4:	4b81      	ldr	r3, [pc, #516]	@ (80124fc <tcp_input+0x294>)
 80122f6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80122f8:	4b81      	ldr	r3, [pc, #516]	@ (8012500 <tcp_input+0x298>)
 80122fa:	2200      	movs	r2, #0
 80122fc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	895a      	ldrh	r2, [r3, #10]
 8012302:	7cbb      	ldrb	r3, [r7, #18]
 8012304:	b29b      	uxth	r3, r3
 8012306:	429a      	cmp	r2, r3
 8012308:	d309      	bcc.n	801231e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801230a:	4b7c      	ldr	r3, [pc, #496]	@ (80124fc <tcp_input+0x294>)
 801230c:	881a      	ldrh	r2, [r3, #0]
 801230e:	4b7d      	ldr	r3, [pc, #500]	@ (8012504 <tcp_input+0x29c>)
 8012310:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012312:	7cbb      	ldrb	r3, [r7, #18]
 8012314:	4619      	mov	r1, r3
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f7fe f8da 	bl	80104d0 <pbuf_remove_header>
 801231c:	e04e      	b.n	80123bc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d105      	bne.n	8012332 <tcp_input+0xca>
 8012326:	4b70      	ldr	r3, [pc, #448]	@ (80124e8 <tcp_input+0x280>)
 8012328:	22c2      	movs	r2, #194	@ 0xc2
 801232a:	4977      	ldr	r1, [pc, #476]	@ (8012508 <tcp_input+0x2a0>)
 801232c:	4870      	ldr	r0, [pc, #448]	@ (80124f0 <tcp_input+0x288>)
 801232e:	f007 fdd5 	bl	8019edc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012332:	2114      	movs	r1, #20
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f7fe f8cb 	bl	80104d0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	895a      	ldrh	r2, [r3, #10]
 801233e:	4b71      	ldr	r3, [pc, #452]	@ (8012504 <tcp_input+0x29c>)
 8012340:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012342:	4b6e      	ldr	r3, [pc, #440]	@ (80124fc <tcp_input+0x294>)
 8012344:	881a      	ldrh	r2, [r3, #0]
 8012346:	4b6f      	ldr	r3, [pc, #444]	@ (8012504 <tcp_input+0x29c>)
 8012348:	881b      	ldrh	r3, [r3, #0]
 801234a:	1ad3      	subs	r3, r2, r3
 801234c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801234e:	4b6d      	ldr	r3, [pc, #436]	@ (8012504 <tcp_input+0x29c>)
 8012350:	881b      	ldrh	r3, [r3, #0]
 8012352:	4619      	mov	r1, r3
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f7fe f8bb 	bl	80104d0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	895b      	ldrh	r3, [r3, #10]
 8012360:	8a3a      	ldrh	r2, [r7, #16]
 8012362:	429a      	cmp	r2, r3
 8012364:	f200 836e 	bhi.w	8012a44 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	685b      	ldr	r3, [r3, #4]
 801236e:	4a64      	ldr	r2, [pc, #400]	@ (8012500 <tcp_input+0x298>)
 8012370:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	8a3a      	ldrh	r2, [r7, #16]
 8012378:	4611      	mov	r1, r2
 801237a:	4618      	mov	r0, r3
 801237c:	f7fe f8a8 	bl	80104d0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	891a      	ldrh	r2, [r3, #8]
 8012384:	8a3b      	ldrh	r3, [r7, #16]
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	b29a      	uxth	r2, r3
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	895b      	ldrh	r3, [r3, #10]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d005      	beq.n	80123a2 <tcp_input+0x13a>
 8012396:	4b54      	ldr	r3, [pc, #336]	@ (80124e8 <tcp_input+0x280>)
 8012398:	22df      	movs	r2, #223	@ 0xdf
 801239a:	495c      	ldr	r1, [pc, #368]	@ (801250c <tcp_input+0x2a4>)
 801239c:	4854      	ldr	r0, [pc, #336]	@ (80124f0 <tcp_input+0x288>)
 801239e:	f007 fd9d 	bl	8019edc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	891a      	ldrh	r2, [r3, #8]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	891b      	ldrh	r3, [r3, #8]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d005      	beq.n	80123bc <tcp_input+0x154>
 80123b0:	4b4d      	ldr	r3, [pc, #308]	@ (80124e8 <tcp_input+0x280>)
 80123b2:	22e0      	movs	r2, #224	@ 0xe0
 80123b4:	4956      	ldr	r1, [pc, #344]	@ (8012510 <tcp_input+0x2a8>)
 80123b6:	484e      	ldr	r0, [pc, #312]	@ (80124f0 <tcp_input+0x288>)
 80123b8:	f007 fd90 	bl	8019edc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80123bc:	4b4d      	ldr	r3, [pc, #308]	@ (80124f4 <tcp_input+0x28c>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	881b      	ldrh	r3, [r3, #0]
 80123c2:	b29b      	uxth	r3, r3
 80123c4:	4a4b      	ldr	r2, [pc, #300]	@ (80124f4 <tcp_input+0x28c>)
 80123c6:	6814      	ldr	r4, [r2, #0]
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7fc fd19 	bl	800ee00 <lwip_htons>
 80123ce:	4603      	mov	r3, r0
 80123d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80123d2:	4b48      	ldr	r3, [pc, #288]	@ (80124f4 <tcp_input+0x28c>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	885b      	ldrh	r3, [r3, #2]
 80123d8:	b29b      	uxth	r3, r3
 80123da:	4a46      	ldr	r2, [pc, #280]	@ (80124f4 <tcp_input+0x28c>)
 80123dc:	6814      	ldr	r4, [r2, #0]
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fc fd0e 	bl	800ee00 <lwip_htons>
 80123e4:	4603      	mov	r3, r0
 80123e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80123e8:	4b42      	ldr	r3, [pc, #264]	@ (80124f4 <tcp_input+0x28c>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	4a41      	ldr	r2, [pc, #260]	@ (80124f4 <tcp_input+0x28c>)
 80123f0:	6814      	ldr	r4, [r2, #0]
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fc fd1a 	bl	800ee2c <lwip_htonl>
 80123f8:	4603      	mov	r3, r0
 80123fa:	6063      	str	r3, [r4, #4]
 80123fc:	6863      	ldr	r3, [r4, #4]
 80123fe:	4a45      	ldr	r2, [pc, #276]	@ (8012514 <tcp_input+0x2ac>)
 8012400:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012402:	4b3c      	ldr	r3, [pc, #240]	@ (80124f4 <tcp_input+0x28c>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	689b      	ldr	r3, [r3, #8]
 8012408:	4a3a      	ldr	r2, [pc, #232]	@ (80124f4 <tcp_input+0x28c>)
 801240a:	6814      	ldr	r4, [r2, #0]
 801240c:	4618      	mov	r0, r3
 801240e:	f7fc fd0d 	bl	800ee2c <lwip_htonl>
 8012412:	4603      	mov	r3, r0
 8012414:	60a3      	str	r3, [r4, #8]
 8012416:	68a3      	ldr	r3, [r4, #8]
 8012418:	4a3f      	ldr	r2, [pc, #252]	@ (8012518 <tcp_input+0x2b0>)
 801241a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801241c:	4b35      	ldr	r3, [pc, #212]	@ (80124f4 <tcp_input+0x28c>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	89db      	ldrh	r3, [r3, #14]
 8012422:	b29b      	uxth	r3, r3
 8012424:	4a33      	ldr	r2, [pc, #204]	@ (80124f4 <tcp_input+0x28c>)
 8012426:	6814      	ldr	r4, [r2, #0]
 8012428:	4618      	mov	r0, r3
 801242a:	f7fc fce9 	bl	800ee00 <lwip_htons>
 801242e:	4603      	mov	r3, r0
 8012430:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012432:	4b30      	ldr	r3, [pc, #192]	@ (80124f4 <tcp_input+0x28c>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	899b      	ldrh	r3, [r3, #12]
 8012438:	b29b      	uxth	r3, r3
 801243a:	4618      	mov	r0, r3
 801243c:	f7fc fce0 	bl	800ee00 <lwip_htons>
 8012440:	4603      	mov	r3, r0
 8012442:	b2db      	uxtb	r3, r3
 8012444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012448:	b2da      	uxtb	r2, r3
 801244a:	4b34      	ldr	r3, [pc, #208]	@ (801251c <tcp_input+0x2b4>)
 801244c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	891a      	ldrh	r2, [r3, #8]
 8012452:	4b33      	ldr	r3, [pc, #204]	@ (8012520 <tcp_input+0x2b8>)
 8012454:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012456:	4b31      	ldr	r3, [pc, #196]	@ (801251c <tcp_input+0x2b4>)
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	f003 0303 	and.w	r3, r3, #3
 801245e:	2b00      	cmp	r3, #0
 8012460:	d00c      	beq.n	801247c <tcp_input+0x214>
    tcplen++;
 8012462:	4b2f      	ldr	r3, [pc, #188]	@ (8012520 <tcp_input+0x2b8>)
 8012464:	881b      	ldrh	r3, [r3, #0]
 8012466:	3301      	adds	r3, #1
 8012468:	b29a      	uxth	r2, r3
 801246a:	4b2d      	ldr	r3, [pc, #180]	@ (8012520 <tcp_input+0x2b8>)
 801246c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	891a      	ldrh	r2, [r3, #8]
 8012472:	4b2b      	ldr	r3, [pc, #172]	@ (8012520 <tcp_input+0x2b8>)
 8012474:	881b      	ldrh	r3, [r3, #0]
 8012476:	429a      	cmp	r2, r3
 8012478:	f200 82e6 	bhi.w	8012a48 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801247c:	2300      	movs	r3, #0
 801247e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012480:	4b28      	ldr	r3, [pc, #160]	@ (8012524 <tcp_input+0x2bc>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	61fb      	str	r3, [r7, #28]
 8012486:	e09d      	b.n	80125c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012488:	69fb      	ldr	r3, [r7, #28]
 801248a:	7d1b      	ldrb	r3, [r3, #20]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d105      	bne.n	801249c <tcp_input+0x234>
 8012490:	4b15      	ldr	r3, [pc, #84]	@ (80124e8 <tcp_input+0x280>)
 8012492:	22fb      	movs	r2, #251	@ 0xfb
 8012494:	4924      	ldr	r1, [pc, #144]	@ (8012528 <tcp_input+0x2c0>)
 8012496:	4816      	ldr	r0, [pc, #88]	@ (80124f0 <tcp_input+0x288>)
 8012498:	f007 fd20 	bl	8019edc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	7d1b      	ldrb	r3, [r3, #20]
 80124a0:	2b0a      	cmp	r3, #10
 80124a2:	d105      	bne.n	80124b0 <tcp_input+0x248>
 80124a4:	4b10      	ldr	r3, [pc, #64]	@ (80124e8 <tcp_input+0x280>)
 80124a6:	22fc      	movs	r2, #252	@ 0xfc
 80124a8:	4920      	ldr	r1, [pc, #128]	@ (801252c <tcp_input+0x2c4>)
 80124aa:	4811      	ldr	r0, [pc, #68]	@ (80124f0 <tcp_input+0x288>)
 80124ac:	f007 fd16 	bl	8019edc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	7d1b      	ldrb	r3, [r3, #20]
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	d105      	bne.n	80124c4 <tcp_input+0x25c>
 80124b8:	4b0b      	ldr	r3, [pc, #44]	@ (80124e8 <tcp_input+0x280>)
 80124ba:	22fd      	movs	r2, #253	@ 0xfd
 80124bc:	491c      	ldr	r1, [pc, #112]	@ (8012530 <tcp_input+0x2c8>)
 80124be:	480c      	ldr	r0, [pc, #48]	@ (80124f0 <tcp_input+0x288>)
 80124c0:	f007 fd0c 	bl	8019edc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	7a1b      	ldrb	r3, [r3, #8]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d033      	beq.n	8012534 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	7a1a      	ldrb	r2, [r3, #8]
 80124d0:	4b09      	ldr	r3, [pc, #36]	@ (80124f8 <tcp_input+0x290>)
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80124d8:	3301      	adds	r3, #1
 80124da:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80124dc:	429a      	cmp	r2, r3
 80124de:	d029      	beq.n	8012534 <tcp_input+0x2cc>
      prev = pcb;
 80124e0:	69fb      	ldr	r3, [r7, #28]
 80124e2:	61bb      	str	r3, [r7, #24]
      continue;
 80124e4:	e06b      	b.n	80125be <tcp_input+0x356>
 80124e6:	bf00      	nop
 80124e8:	0801c438 	.word	0x0801c438
 80124ec:	0801c46c 	.word	0x0801c46c
 80124f0:	0801c484 	.word	0x0801c484
 80124f4:	200274d4 	.word	0x200274d4
 80124f8:	200243ac 	.word	0x200243ac
 80124fc:	200274d8 	.word	0x200274d8
 8012500:	200274dc 	.word	0x200274dc
 8012504:	200274da 	.word	0x200274da
 8012508:	0801c4ac 	.word	0x0801c4ac
 801250c:	0801c4bc 	.word	0x0801c4bc
 8012510:	0801c4c8 	.word	0x0801c4c8
 8012514:	200274e4 	.word	0x200274e4
 8012518:	200274e8 	.word	0x200274e8
 801251c:	200274f0 	.word	0x200274f0
 8012520:	200274ee 	.word	0x200274ee
 8012524:	200274b8 	.word	0x200274b8
 8012528:	0801c4e8 	.word	0x0801c4e8
 801252c:	0801c510 	.word	0x0801c510
 8012530:	0801c53c 	.word	0x0801c53c
    }

    if (pcb->remote_port == tcphdr->src &&
 8012534:	69fb      	ldr	r3, [r7, #28]
 8012536:	8b1a      	ldrh	r2, [r3, #24]
 8012538:	4b72      	ldr	r3, [pc, #456]	@ (8012704 <tcp_input+0x49c>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	881b      	ldrh	r3, [r3, #0]
 801253e:	b29b      	uxth	r3, r3
 8012540:	429a      	cmp	r2, r3
 8012542:	d13a      	bne.n	80125ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012544:	69fb      	ldr	r3, [r7, #28]
 8012546:	8ada      	ldrh	r2, [r3, #22]
 8012548:	4b6e      	ldr	r3, [pc, #440]	@ (8012704 <tcp_input+0x49c>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	885b      	ldrh	r3, [r3, #2]
 801254e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012550:	429a      	cmp	r2, r3
 8012552:	d132      	bne.n	80125ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	685a      	ldr	r2, [r3, #4]
 8012558:	4b6b      	ldr	r3, [pc, #428]	@ (8012708 <tcp_input+0x4a0>)
 801255a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801255c:	429a      	cmp	r2, r3
 801255e:	d12c      	bne.n	80125ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	4b68      	ldr	r3, [pc, #416]	@ (8012708 <tcp_input+0x4a0>)
 8012566:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012568:	429a      	cmp	r2, r3
 801256a:	d126      	bne.n	80125ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	69fa      	ldr	r2, [r7, #28]
 8012572:	429a      	cmp	r2, r3
 8012574:	d106      	bne.n	8012584 <tcp_input+0x31c>
 8012576:	4b65      	ldr	r3, [pc, #404]	@ (801270c <tcp_input+0x4a4>)
 8012578:	f240 120d 	movw	r2, #269	@ 0x10d
 801257c:	4964      	ldr	r1, [pc, #400]	@ (8012710 <tcp_input+0x4a8>)
 801257e:	4865      	ldr	r0, [pc, #404]	@ (8012714 <tcp_input+0x4ac>)
 8012580:	f007 fcac 	bl	8019edc <iprintf>
      if (prev != NULL) {
 8012584:	69bb      	ldr	r3, [r7, #24]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d00a      	beq.n	80125a0 <tcp_input+0x338>
        prev->next = pcb->next;
 801258a:	69fb      	ldr	r3, [r7, #28]
 801258c:	68da      	ldr	r2, [r3, #12]
 801258e:	69bb      	ldr	r3, [r7, #24]
 8012590:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012592:	4b61      	ldr	r3, [pc, #388]	@ (8012718 <tcp_input+0x4b0>)
 8012594:	681a      	ldr	r2, [r3, #0]
 8012596:	69fb      	ldr	r3, [r7, #28]
 8012598:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801259a:	4a5f      	ldr	r2, [pc, #380]	@ (8012718 <tcp_input+0x4b0>)
 801259c:	69fb      	ldr	r3, [r7, #28]
 801259e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	69fa      	ldr	r2, [r7, #28]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d111      	bne.n	80125ce <tcp_input+0x366>
 80125aa:	4b58      	ldr	r3, [pc, #352]	@ (801270c <tcp_input+0x4a4>)
 80125ac:	f240 1215 	movw	r2, #277	@ 0x115
 80125b0:	495a      	ldr	r1, [pc, #360]	@ (801271c <tcp_input+0x4b4>)
 80125b2:	4858      	ldr	r0, [pc, #352]	@ (8012714 <tcp_input+0x4ac>)
 80125b4:	f007 fc92 	bl	8019edc <iprintf>
      break;
 80125b8:	e009      	b.n	80125ce <tcp_input+0x366>
    }
    prev = pcb;
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80125be:	69fb      	ldr	r3, [r7, #28]
 80125c0:	68db      	ldr	r3, [r3, #12]
 80125c2:	61fb      	str	r3, [r7, #28]
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	f47f af5e 	bne.w	8012488 <tcp_input+0x220>
 80125cc:	e000      	b.n	80125d0 <tcp_input+0x368>
      break;
 80125ce:	bf00      	nop
  }

  if (pcb == NULL) {
 80125d0:	69fb      	ldr	r3, [r7, #28]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	f040 80aa 	bne.w	801272c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80125d8:	4b51      	ldr	r3, [pc, #324]	@ (8012720 <tcp_input+0x4b8>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	61fb      	str	r3, [r7, #28]
 80125de:	e03f      	b.n	8012660 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	7d1b      	ldrb	r3, [r3, #20]
 80125e4:	2b0a      	cmp	r3, #10
 80125e6:	d006      	beq.n	80125f6 <tcp_input+0x38e>
 80125e8:	4b48      	ldr	r3, [pc, #288]	@ (801270c <tcp_input+0x4a4>)
 80125ea:	f240 121f 	movw	r2, #287	@ 0x11f
 80125ee:	494d      	ldr	r1, [pc, #308]	@ (8012724 <tcp_input+0x4bc>)
 80125f0:	4848      	ldr	r0, [pc, #288]	@ (8012714 <tcp_input+0x4ac>)
 80125f2:	f007 fc73 	bl	8019edc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80125f6:	69fb      	ldr	r3, [r7, #28]
 80125f8:	7a1b      	ldrb	r3, [r3, #8]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d009      	beq.n	8012612 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80125fe:	69fb      	ldr	r3, [r7, #28]
 8012600:	7a1a      	ldrb	r2, [r3, #8]
 8012602:	4b41      	ldr	r3, [pc, #260]	@ (8012708 <tcp_input+0x4a0>)
 8012604:	685b      	ldr	r3, [r3, #4]
 8012606:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801260a:	3301      	adds	r3, #1
 801260c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801260e:	429a      	cmp	r2, r3
 8012610:	d122      	bne.n	8012658 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012612:	69fb      	ldr	r3, [r7, #28]
 8012614:	8b1a      	ldrh	r2, [r3, #24]
 8012616:	4b3b      	ldr	r3, [pc, #236]	@ (8012704 <tcp_input+0x49c>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	881b      	ldrh	r3, [r3, #0]
 801261c:	b29b      	uxth	r3, r3
 801261e:	429a      	cmp	r2, r3
 8012620:	d11b      	bne.n	801265a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012622:	69fb      	ldr	r3, [r7, #28]
 8012624:	8ada      	ldrh	r2, [r3, #22]
 8012626:	4b37      	ldr	r3, [pc, #220]	@ (8012704 <tcp_input+0x49c>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	885b      	ldrh	r3, [r3, #2]
 801262c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801262e:	429a      	cmp	r2, r3
 8012630:	d113      	bne.n	801265a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012632:	69fb      	ldr	r3, [r7, #28]
 8012634:	685a      	ldr	r2, [r3, #4]
 8012636:	4b34      	ldr	r3, [pc, #208]	@ (8012708 <tcp_input+0x4a0>)
 8012638:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801263a:	429a      	cmp	r2, r3
 801263c:	d10d      	bne.n	801265a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	681a      	ldr	r2, [r3, #0]
 8012642:	4b31      	ldr	r3, [pc, #196]	@ (8012708 <tcp_input+0x4a0>)
 8012644:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012646:	429a      	cmp	r2, r3
 8012648:	d107      	bne.n	801265a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801264a:	69f8      	ldr	r0, [r7, #28]
 801264c:	f000 fb56 	bl	8012cfc <tcp_timewait_input>
        }
        pbuf_free(p);
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7fd ffc3 	bl	80105dc <pbuf_free>
        return;
 8012656:	e1fd      	b.n	8012a54 <tcp_input+0x7ec>
        continue;
 8012658:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	68db      	ldr	r3, [r3, #12]
 801265e:	61fb      	str	r3, [r7, #28]
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d1bc      	bne.n	80125e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012666:	2300      	movs	r3, #0
 8012668:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801266a:	4b2f      	ldr	r3, [pc, #188]	@ (8012728 <tcp_input+0x4c0>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	617b      	str	r3, [r7, #20]
 8012670:	e02a      	b.n	80126c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	7a1b      	ldrb	r3, [r3, #8]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d00c      	beq.n	8012694 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	7a1a      	ldrb	r2, [r3, #8]
 801267e:	4b22      	ldr	r3, [pc, #136]	@ (8012708 <tcp_input+0x4a0>)
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012686:	3301      	adds	r3, #1
 8012688:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801268a:	429a      	cmp	r2, r3
 801268c:	d002      	beq.n	8012694 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	61bb      	str	r3, [r7, #24]
        continue;
 8012692:	e016      	b.n	80126c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	8ada      	ldrh	r2, [r3, #22]
 8012698:	4b1a      	ldr	r3, [pc, #104]	@ (8012704 <tcp_input+0x49c>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	885b      	ldrh	r3, [r3, #2]
 801269e:	b29b      	uxth	r3, r3
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d10c      	bne.n	80126be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	681a      	ldr	r2, [r3, #0]
 80126a8:	4b17      	ldr	r3, [pc, #92]	@ (8012708 <tcp_input+0x4a0>)
 80126aa:	695b      	ldr	r3, [r3, #20]
 80126ac:	429a      	cmp	r2, r3
 80126ae:	d00f      	beq.n	80126d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d00d      	beq.n	80126d2 <tcp_input+0x46a>
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d009      	beq.n	80126d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	68db      	ldr	r3, [r3, #12]
 80126c6:	617b      	str	r3, [r7, #20]
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d1d1      	bne.n	8012672 <tcp_input+0x40a>
 80126ce:	e000      	b.n	80126d2 <tcp_input+0x46a>
            break;
 80126d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d029      	beq.n	801272c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80126d8:	69bb      	ldr	r3, [r7, #24]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00a      	beq.n	80126f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	68da      	ldr	r2, [r3, #12]
 80126e2:	69bb      	ldr	r3, [r7, #24]
 80126e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80126e6:	4b10      	ldr	r3, [pc, #64]	@ (8012728 <tcp_input+0x4c0>)
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80126ee:	4a0e      	ldr	r2, [pc, #56]	@ (8012728 <tcp_input+0x4c0>)
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80126f4:	6978      	ldr	r0, [r7, #20]
 80126f6:	f000 fa03 	bl	8012b00 <tcp_listen_input>
      }
      pbuf_free(p);
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f7fd ff6e 	bl	80105dc <pbuf_free>
      return;
 8012700:	e1a8      	b.n	8012a54 <tcp_input+0x7ec>
 8012702:	bf00      	nop
 8012704:	200274d4 	.word	0x200274d4
 8012708:	200243ac 	.word	0x200243ac
 801270c:	0801c438 	.word	0x0801c438
 8012710:	0801c564 	.word	0x0801c564
 8012714:	0801c484 	.word	0x0801c484
 8012718:	200274b8 	.word	0x200274b8
 801271c:	0801c590 	.word	0x0801c590
 8012720:	200274bc 	.word	0x200274bc
 8012724:	0801c5bc 	.word	0x0801c5bc
 8012728:	200274b4 	.word	0x200274b4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801272c:	69fb      	ldr	r3, [r7, #28]
 801272e:	2b00      	cmp	r3, #0
 8012730:	f000 8158 	beq.w	80129e4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012734:	4b95      	ldr	r3, [pc, #596]	@ (801298c <tcp_input+0x724>)
 8012736:	2200      	movs	r2, #0
 8012738:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	891a      	ldrh	r2, [r3, #8]
 801273e:	4b93      	ldr	r3, [pc, #588]	@ (801298c <tcp_input+0x724>)
 8012740:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012742:	4a92      	ldr	r2, [pc, #584]	@ (801298c <tcp_input+0x724>)
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012748:	4b91      	ldr	r3, [pc, #580]	@ (8012990 <tcp_input+0x728>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	4a8f      	ldr	r2, [pc, #572]	@ (801298c <tcp_input+0x724>)
 801274e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012750:	4b90      	ldr	r3, [pc, #576]	@ (8012994 <tcp_input+0x72c>)
 8012752:	2200      	movs	r2, #0
 8012754:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012756:	4b90      	ldr	r3, [pc, #576]	@ (8012998 <tcp_input+0x730>)
 8012758:	2200      	movs	r2, #0
 801275a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801275c:	4b8f      	ldr	r3, [pc, #572]	@ (801299c <tcp_input+0x734>)
 801275e:	2200      	movs	r2, #0
 8012760:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012762:	4b8f      	ldr	r3, [pc, #572]	@ (80129a0 <tcp_input+0x738>)
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	f003 0308 	and.w	r3, r3, #8
 801276a:	2b00      	cmp	r3, #0
 801276c:	d006      	beq.n	801277c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	7b5b      	ldrb	r3, [r3, #13]
 8012772:	f043 0301 	orr.w	r3, r3, #1
 8012776:	b2da      	uxtb	r2, r3
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801277c:	69fb      	ldr	r3, [r7, #28]
 801277e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012780:	2b00      	cmp	r3, #0
 8012782:	d017      	beq.n	80127b4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012784:	69f8      	ldr	r0, [r7, #28]
 8012786:	f7ff f929 	bl	80119dc <tcp_process_refused_data>
 801278a:	4603      	mov	r3, r0
 801278c:	f113 0f0d 	cmn.w	r3, #13
 8012790:	d007      	beq.n	80127a2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012796:	2b00      	cmp	r3, #0
 8012798:	d00c      	beq.n	80127b4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801279a:	4b82      	ldr	r3, [pc, #520]	@ (80129a4 <tcp_input+0x73c>)
 801279c:	881b      	ldrh	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d008      	beq.n	80127b4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80127a2:	69fb      	ldr	r3, [r7, #28]
 80127a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	f040 80e3 	bne.w	8012972 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80127ac:	69f8      	ldr	r0, [r7, #28]
 80127ae:	f003 f9a7 	bl	8015b00 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80127b2:	e0de      	b.n	8012972 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80127b4:	4a7c      	ldr	r2, [pc, #496]	@ (80129a8 <tcp_input+0x740>)
 80127b6:	69fb      	ldr	r3, [r7, #28]
 80127b8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80127ba:	69f8      	ldr	r0, [r7, #28]
 80127bc:	f000 fb18 	bl	8012df0 <tcp_process>
 80127c0:	4603      	mov	r3, r0
 80127c2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80127c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80127c8:	f113 0f0d 	cmn.w	r3, #13
 80127cc:	f000 80d3 	beq.w	8012976 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80127d0:	4b71      	ldr	r3, [pc, #452]	@ (8012998 <tcp_input+0x730>)
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	f003 0308 	and.w	r3, r3, #8
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d015      	beq.n	8012808 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80127dc:	69fb      	ldr	r3, [r7, #28]
 80127de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d008      	beq.n	80127f8 <tcp_input+0x590>
 80127e6:	69fb      	ldr	r3, [r7, #28]
 80127e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80127ec:	69fa      	ldr	r2, [r7, #28]
 80127ee:	6912      	ldr	r2, [r2, #16]
 80127f0:	f06f 010d 	mvn.w	r1, #13
 80127f4:	4610      	mov	r0, r2
 80127f6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80127f8:	69f9      	ldr	r1, [r7, #28]
 80127fa:	486c      	ldr	r0, [pc, #432]	@ (80129ac <tcp_input+0x744>)
 80127fc:	f7ff fbbc 	bl	8011f78 <tcp_pcb_remove>
        tcp_free(pcb);
 8012800:	69f8      	ldr	r0, [r7, #28]
 8012802:	f7fe f9a7 	bl	8010b54 <tcp_free>
 8012806:	e0da      	b.n	80129be <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012808:	2300      	movs	r3, #0
 801280a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801280c:	4b63      	ldr	r3, [pc, #396]	@ (801299c <tcp_input+0x734>)
 801280e:	881b      	ldrh	r3, [r3, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d01d      	beq.n	8012850 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012814:	4b61      	ldr	r3, [pc, #388]	@ (801299c <tcp_input+0x734>)
 8012816:	881b      	ldrh	r3, [r3, #0]
 8012818:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012820:	2b00      	cmp	r3, #0
 8012822:	d00a      	beq.n	801283a <tcp_input+0x5d2>
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801282a:	69fa      	ldr	r2, [r7, #28]
 801282c:	6910      	ldr	r0, [r2, #16]
 801282e:	89fa      	ldrh	r2, [r7, #14]
 8012830:	69f9      	ldr	r1, [r7, #28]
 8012832:	4798      	blx	r3
 8012834:	4603      	mov	r3, r0
 8012836:	74fb      	strb	r3, [r7, #19]
 8012838:	e001      	b.n	801283e <tcp_input+0x5d6>
 801283a:	2300      	movs	r3, #0
 801283c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801283e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012842:	f113 0f0d 	cmn.w	r3, #13
 8012846:	f000 8098 	beq.w	801297a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801284a:	4b54      	ldr	r3, [pc, #336]	@ (801299c <tcp_input+0x734>)
 801284c:	2200      	movs	r2, #0
 801284e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012850:	69f8      	ldr	r0, [r7, #28]
 8012852:	f000 f915 	bl	8012a80 <tcp_input_delayed_close>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	f040 8090 	bne.w	801297e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801285e:	4b4d      	ldr	r3, [pc, #308]	@ (8012994 <tcp_input+0x72c>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d041      	beq.n	80128ea <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801286a:	2b00      	cmp	r3, #0
 801286c:	d006      	beq.n	801287c <tcp_input+0x614>
 801286e:	4b50      	ldr	r3, [pc, #320]	@ (80129b0 <tcp_input+0x748>)
 8012870:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012874:	494f      	ldr	r1, [pc, #316]	@ (80129b4 <tcp_input+0x74c>)
 8012876:	4850      	ldr	r0, [pc, #320]	@ (80129b8 <tcp_input+0x750>)
 8012878:	f007 fb30 	bl	8019edc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	8b5b      	ldrh	r3, [r3, #26]
 8012880:	f003 0310 	and.w	r3, r3, #16
 8012884:	2b00      	cmp	r3, #0
 8012886:	d008      	beq.n	801289a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012888:	4b42      	ldr	r3, [pc, #264]	@ (8012994 <tcp_input+0x72c>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	4618      	mov	r0, r3
 801288e:	f7fd fea5 	bl	80105dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012892:	69f8      	ldr	r0, [r7, #28]
 8012894:	f7fe fc46 	bl	8011124 <tcp_abort>
            goto aborted;
 8012898:	e091      	b.n	80129be <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d00c      	beq.n	80128be <tcp_input+0x656>
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80128aa:	69fb      	ldr	r3, [r7, #28]
 80128ac:	6918      	ldr	r0, [r3, #16]
 80128ae:	4b39      	ldr	r3, [pc, #228]	@ (8012994 <tcp_input+0x72c>)
 80128b0:	681a      	ldr	r2, [r3, #0]
 80128b2:	2300      	movs	r3, #0
 80128b4:	69f9      	ldr	r1, [r7, #28]
 80128b6:	47a0      	blx	r4
 80128b8:	4603      	mov	r3, r0
 80128ba:	74fb      	strb	r3, [r7, #19]
 80128bc:	e008      	b.n	80128d0 <tcp_input+0x668>
 80128be:	4b35      	ldr	r3, [pc, #212]	@ (8012994 <tcp_input+0x72c>)
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	2300      	movs	r3, #0
 80128c4:	69f9      	ldr	r1, [r7, #28]
 80128c6:	2000      	movs	r0, #0
 80128c8:	f7ff f95e 	bl	8011b88 <tcp_recv_null>
 80128cc:	4603      	mov	r3, r0
 80128ce:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80128d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80128d4:	f113 0f0d 	cmn.w	r3, #13
 80128d8:	d053      	beq.n	8012982 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80128da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d003      	beq.n	80128ea <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80128e2:	4b2c      	ldr	r3, [pc, #176]	@ (8012994 <tcp_input+0x72c>)
 80128e4:	681a      	ldr	r2, [r3, #0]
 80128e6:	69fb      	ldr	r3, [r7, #28]
 80128e8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80128ea:	4b2b      	ldr	r3, [pc, #172]	@ (8012998 <tcp_input+0x730>)
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	f003 0320 	and.w	r3, r3, #32
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d030      	beq.n	8012958 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80128f6:	69fb      	ldr	r3, [r7, #28]
 80128f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d009      	beq.n	8012912 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80128fe:	69fb      	ldr	r3, [r7, #28]
 8012900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012902:	7b5a      	ldrb	r2, [r3, #13]
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012908:	f042 0220 	orr.w	r2, r2, #32
 801290c:	b2d2      	uxtb	r2, r2
 801290e:	735a      	strb	r2, [r3, #13]
 8012910:	e022      	b.n	8012958 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012912:	69fb      	ldr	r3, [r7, #28]
 8012914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012916:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801291a:	d005      	beq.n	8012928 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012920:	3301      	adds	r3, #1
 8012922:	b29a      	uxth	r2, r3
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012928:	69fb      	ldr	r3, [r7, #28]
 801292a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801292e:	2b00      	cmp	r3, #0
 8012930:	d00b      	beq.n	801294a <tcp_input+0x6e2>
 8012932:	69fb      	ldr	r3, [r7, #28]
 8012934:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	6918      	ldr	r0, [r3, #16]
 801293c:	2300      	movs	r3, #0
 801293e:	2200      	movs	r2, #0
 8012940:	69f9      	ldr	r1, [r7, #28]
 8012942:	47a0      	blx	r4
 8012944:	4603      	mov	r3, r0
 8012946:	74fb      	strb	r3, [r7, #19]
 8012948:	e001      	b.n	801294e <tcp_input+0x6e6>
 801294a:	2300      	movs	r3, #0
 801294c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801294e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012952:	f113 0f0d 	cmn.w	r3, #13
 8012956:	d016      	beq.n	8012986 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012958:	4b13      	ldr	r3, [pc, #76]	@ (80129a8 <tcp_input+0x740>)
 801295a:	2200      	movs	r2, #0
 801295c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801295e:	69f8      	ldr	r0, [r7, #28]
 8012960:	f000 f88e 	bl	8012a80 <tcp_input_delayed_close>
 8012964:	4603      	mov	r3, r0
 8012966:	2b00      	cmp	r3, #0
 8012968:	d128      	bne.n	80129bc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801296a:	69f8      	ldr	r0, [r7, #28]
 801296c:	f002 fac2 	bl	8014ef4 <tcp_output>
 8012970:	e025      	b.n	80129be <tcp_input+0x756>
        goto aborted;
 8012972:	bf00      	nop
 8012974:	e023      	b.n	80129be <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012976:	bf00      	nop
 8012978:	e021      	b.n	80129be <tcp_input+0x756>
              goto aborted;
 801297a:	bf00      	nop
 801297c:	e01f      	b.n	80129be <tcp_input+0x756>
          goto aborted;
 801297e:	bf00      	nop
 8012980:	e01d      	b.n	80129be <tcp_input+0x756>
            goto aborted;
 8012982:	bf00      	nop
 8012984:	e01b      	b.n	80129be <tcp_input+0x756>
              goto aborted;
 8012986:	bf00      	nop
 8012988:	e019      	b.n	80129be <tcp_input+0x756>
 801298a:	bf00      	nop
 801298c:	200274c4 	.word	0x200274c4
 8012990:	200274d4 	.word	0x200274d4
 8012994:	200274f4 	.word	0x200274f4
 8012998:	200274f1 	.word	0x200274f1
 801299c:	200274ec 	.word	0x200274ec
 80129a0:	200274f0 	.word	0x200274f0
 80129a4:	200274ee 	.word	0x200274ee
 80129a8:	200274f8 	.word	0x200274f8
 80129ac:	200274b8 	.word	0x200274b8
 80129b0:	0801c438 	.word	0x0801c438
 80129b4:	0801c5ec 	.word	0x0801c5ec
 80129b8:	0801c484 	.word	0x0801c484
          goto aborted;
 80129bc:	bf00      	nop
    tcp_input_pcb = NULL;
 80129be:	4b27      	ldr	r3, [pc, #156]	@ (8012a5c <tcp_input+0x7f4>)
 80129c0:	2200      	movs	r2, #0
 80129c2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80129c4:	4b26      	ldr	r3, [pc, #152]	@ (8012a60 <tcp_input+0x7f8>)
 80129c6:	2200      	movs	r2, #0
 80129c8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80129ca:	4b26      	ldr	r3, [pc, #152]	@ (8012a64 <tcp_input+0x7fc>)
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d03f      	beq.n	8012a52 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80129d2:	4b24      	ldr	r3, [pc, #144]	@ (8012a64 <tcp_input+0x7fc>)
 80129d4:	685b      	ldr	r3, [r3, #4]
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7fd fe00 	bl	80105dc <pbuf_free>
      inseg.p = NULL;
 80129dc:	4b21      	ldr	r3, [pc, #132]	@ (8012a64 <tcp_input+0x7fc>)
 80129de:	2200      	movs	r2, #0
 80129e0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80129e2:	e036      	b.n	8012a52 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80129e4:	4b20      	ldr	r3, [pc, #128]	@ (8012a68 <tcp_input+0x800>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	899b      	ldrh	r3, [r3, #12]
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7fc fa07 	bl	800ee00 <lwip_htons>
 80129f2:	4603      	mov	r3, r0
 80129f4:	b2db      	uxtb	r3, r3
 80129f6:	f003 0304 	and.w	r3, r3, #4
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d118      	bne.n	8012a30 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129fe:	4b1b      	ldr	r3, [pc, #108]	@ (8012a6c <tcp_input+0x804>)
 8012a00:	6819      	ldr	r1, [r3, #0]
 8012a02:	4b1b      	ldr	r3, [pc, #108]	@ (8012a70 <tcp_input+0x808>)
 8012a04:	881b      	ldrh	r3, [r3, #0]
 8012a06:	461a      	mov	r2, r3
 8012a08:	4b1a      	ldr	r3, [pc, #104]	@ (8012a74 <tcp_input+0x80c>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a0e:	4b16      	ldr	r3, [pc, #88]	@ (8012a68 <tcp_input+0x800>)
 8012a10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a12:	885b      	ldrh	r3, [r3, #2]
 8012a14:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a16:	4a14      	ldr	r2, [pc, #80]	@ (8012a68 <tcp_input+0x800>)
 8012a18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a1a:	8812      	ldrh	r2, [r2, #0]
 8012a1c:	b292      	uxth	r2, r2
 8012a1e:	9202      	str	r2, [sp, #8]
 8012a20:	9301      	str	r3, [sp, #4]
 8012a22:	4b15      	ldr	r3, [pc, #84]	@ (8012a78 <tcp_input+0x810>)
 8012a24:	9300      	str	r3, [sp, #0]
 8012a26:	4b15      	ldr	r3, [pc, #84]	@ (8012a7c <tcp_input+0x814>)
 8012a28:	4602      	mov	r2, r0
 8012a2a:	2000      	movs	r0, #0
 8012a2c:	f003 f816 	bl	8015a5c <tcp_rst>
    pbuf_free(p);
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f7fd fdd3 	bl	80105dc <pbuf_free>
  return;
 8012a36:	e00c      	b.n	8012a52 <tcp_input+0x7ea>
    goto dropped;
 8012a38:	bf00      	nop
 8012a3a:	e006      	b.n	8012a4a <tcp_input+0x7e2>
    goto dropped;
 8012a3c:	bf00      	nop
 8012a3e:	e004      	b.n	8012a4a <tcp_input+0x7e2>
    goto dropped;
 8012a40:	bf00      	nop
 8012a42:	e002      	b.n	8012a4a <tcp_input+0x7e2>
      goto dropped;
 8012a44:	bf00      	nop
 8012a46:	e000      	b.n	8012a4a <tcp_input+0x7e2>
      goto dropped;
 8012a48:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f7fd fdc6 	bl	80105dc <pbuf_free>
 8012a50:	e000      	b.n	8012a54 <tcp_input+0x7ec>
  return;
 8012a52:	bf00      	nop
}
 8012a54:	3724      	adds	r7, #36	@ 0x24
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd90      	pop	{r4, r7, pc}
 8012a5a:	bf00      	nop
 8012a5c:	200274f8 	.word	0x200274f8
 8012a60:	200274f4 	.word	0x200274f4
 8012a64:	200274c4 	.word	0x200274c4
 8012a68:	200274d4 	.word	0x200274d4
 8012a6c:	200274e8 	.word	0x200274e8
 8012a70:	200274ee 	.word	0x200274ee
 8012a74:	200274e4 	.word	0x200274e4
 8012a78:	200243bc 	.word	0x200243bc
 8012a7c:	200243c0 	.word	0x200243c0

08012a80 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d106      	bne.n	8012a9c <tcp_input_delayed_close+0x1c>
 8012a8e:	4b17      	ldr	r3, [pc, #92]	@ (8012aec <tcp_input_delayed_close+0x6c>)
 8012a90:	f240 225a 	movw	r2, #602	@ 0x25a
 8012a94:	4916      	ldr	r1, [pc, #88]	@ (8012af0 <tcp_input_delayed_close+0x70>)
 8012a96:	4817      	ldr	r0, [pc, #92]	@ (8012af4 <tcp_input_delayed_close+0x74>)
 8012a98:	f007 fa20 	bl	8019edc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012a9c:	4b16      	ldr	r3, [pc, #88]	@ (8012af8 <tcp_input_delayed_close+0x78>)
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	f003 0310 	and.w	r3, r3, #16
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d01c      	beq.n	8012ae2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	8b5b      	ldrh	r3, [r3, #26]
 8012aac:	f003 0310 	and.w	r3, r3, #16
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d10d      	bne.n	8012ad0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d008      	beq.n	8012ad0 <tcp_input_delayed_close+0x50>
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ac4:	687a      	ldr	r2, [r7, #4]
 8012ac6:	6912      	ldr	r2, [r2, #16]
 8012ac8:	f06f 010e 	mvn.w	r1, #14
 8012acc:	4610      	mov	r0, r2
 8012ace:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012ad0:	6879      	ldr	r1, [r7, #4]
 8012ad2:	480a      	ldr	r0, [pc, #40]	@ (8012afc <tcp_input_delayed_close+0x7c>)
 8012ad4:	f7ff fa50 	bl	8011f78 <tcp_pcb_remove>
    tcp_free(pcb);
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7fe f83b 	bl	8010b54 <tcp_free>
    return 1;
 8012ade:	2301      	movs	r3, #1
 8012ae0:	e000      	b.n	8012ae4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012ae2:	2300      	movs	r3, #0
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3708      	adds	r7, #8
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}
 8012aec:	0801c438 	.word	0x0801c438
 8012af0:	0801c608 	.word	0x0801c608
 8012af4:	0801c484 	.word	0x0801c484
 8012af8:	200274f1 	.word	0x200274f1
 8012afc:	200274b8 	.word	0x200274b8

08012b00 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012b00:	b590      	push	{r4, r7, lr}
 8012b02:	b08b      	sub	sp, #44	@ 0x2c
 8012b04:	af04      	add	r7, sp, #16
 8012b06:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012b08:	4b6f      	ldr	r3, [pc, #444]	@ (8012cc8 <tcp_listen_input+0x1c8>)
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	f003 0304 	and.w	r3, r3, #4
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	f040 80d2 	bne.w	8012cba <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d106      	bne.n	8012b2a <tcp_listen_input+0x2a>
 8012b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8012ccc <tcp_listen_input+0x1cc>)
 8012b1e:	f240 2281 	movw	r2, #641	@ 0x281
 8012b22:	496b      	ldr	r1, [pc, #428]	@ (8012cd0 <tcp_listen_input+0x1d0>)
 8012b24:	486b      	ldr	r0, [pc, #428]	@ (8012cd4 <tcp_listen_input+0x1d4>)
 8012b26:	f007 f9d9 	bl	8019edc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012b2a:	4b67      	ldr	r3, [pc, #412]	@ (8012cc8 <tcp_listen_input+0x1c8>)
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	f003 0310 	and.w	r3, r3, #16
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d019      	beq.n	8012b6a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b36:	4b68      	ldr	r3, [pc, #416]	@ (8012cd8 <tcp_listen_input+0x1d8>)
 8012b38:	6819      	ldr	r1, [r3, #0]
 8012b3a:	4b68      	ldr	r3, [pc, #416]	@ (8012cdc <tcp_listen_input+0x1dc>)
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	461a      	mov	r2, r3
 8012b40:	4b67      	ldr	r3, [pc, #412]	@ (8012ce0 <tcp_listen_input+0x1e0>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b46:	4b67      	ldr	r3, [pc, #412]	@ (8012ce4 <tcp_listen_input+0x1e4>)
 8012b48:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b4a:	885b      	ldrh	r3, [r3, #2]
 8012b4c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b4e:	4a65      	ldr	r2, [pc, #404]	@ (8012ce4 <tcp_listen_input+0x1e4>)
 8012b50:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b52:	8812      	ldrh	r2, [r2, #0]
 8012b54:	b292      	uxth	r2, r2
 8012b56:	9202      	str	r2, [sp, #8]
 8012b58:	9301      	str	r3, [sp, #4]
 8012b5a:	4b63      	ldr	r3, [pc, #396]	@ (8012ce8 <tcp_listen_input+0x1e8>)
 8012b5c:	9300      	str	r3, [sp, #0]
 8012b5e:	4b63      	ldr	r3, [pc, #396]	@ (8012cec <tcp_listen_input+0x1ec>)
 8012b60:	4602      	mov	r2, r0
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f002 ff7a 	bl	8015a5c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012b68:	e0a9      	b.n	8012cbe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012b6a:	4b57      	ldr	r3, [pc, #348]	@ (8012cc8 <tcp_listen_input+0x1c8>)
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	f003 0302 	and.w	r3, r3, #2
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f000 80a3 	beq.w	8012cbe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	7d5b      	ldrb	r3, [r3, #21]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7ff f927 	bl	8011dd0 <tcp_alloc>
 8012b82:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d111      	bne.n	8012bae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	699b      	ldr	r3, [r3, #24]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d00a      	beq.n	8012ba8 <tcp_listen_input+0xa8>
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	699b      	ldr	r3, [r3, #24]
 8012b96:	687a      	ldr	r2, [r7, #4]
 8012b98:	6910      	ldr	r0, [r2, #16]
 8012b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b9e:	2100      	movs	r1, #0
 8012ba0:	4798      	blx	r3
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	73bb      	strb	r3, [r7, #14]
      return;
 8012ba6:	e08b      	b.n	8012cc0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012ba8:	23f0      	movs	r3, #240	@ 0xf0
 8012baa:	73bb      	strb	r3, [r7, #14]
      return;
 8012bac:	e088      	b.n	8012cc0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012bae:	4b50      	ldr	r3, [pc, #320]	@ (8012cf0 <tcp_listen_input+0x1f0>)
 8012bb0:	695a      	ldr	r2, [r3, #20]
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8012cf0 <tcp_listen_input+0x1f0>)
 8012bb8:	691a      	ldr	r2, [r3, #16]
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	8ada      	ldrh	r2, [r3, #22]
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012bc6:	4b47      	ldr	r3, [pc, #284]	@ (8012ce4 <tcp_listen_input+0x1e4>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	881b      	ldrh	r3, [r3, #0]
 8012bcc:	b29a      	uxth	r2, r3
 8012bce:	697b      	ldr	r3, [r7, #20]
 8012bd0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	2203      	movs	r2, #3
 8012bd6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012bd8:	4b41      	ldr	r3, [pc, #260]	@ (8012ce0 <tcp_listen_input+0x1e0>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	1c5a      	adds	r2, r3, #1
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8012bea:	6978      	ldr	r0, [r7, #20]
 8012bec:	f7ff fa58 	bl	80120a0 <tcp_next_iss>
 8012bf0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	693a      	ldr	r2, [r7, #16]
 8012bf6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	693a      	ldr	r2, [r7, #16]
 8012bfc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8012bfe:	697b      	ldr	r3, [r7, #20]
 8012c00:	693a      	ldr	r2, [r7, #16]
 8012c02:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	693a      	ldr	r2, [r7, #16]
 8012c08:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012c0a:	4b35      	ldr	r3, [pc, #212]	@ (8012ce0 <tcp_listen_input+0x1e0>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	1e5a      	subs	r2, r3, #1
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	691a      	ldr	r2, [r3, #16]
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012c1c:	697b      	ldr	r3, [r7, #20]
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	7a5b      	ldrb	r3, [r3, #9]
 8012c26:	f003 030c 	and.w	r3, r3, #12
 8012c2a:	b2da      	uxtb	r2, r3
 8012c2c:	697b      	ldr	r3, [r7, #20]
 8012c2e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	7a1a      	ldrb	r2, [r3, #8]
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012c38:	4b2e      	ldr	r3, [pc, #184]	@ (8012cf4 <tcp_listen_input+0x1f4>)
 8012c3a:	681a      	ldr	r2, [r3, #0]
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	60da      	str	r2, [r3, #12]
 8012c40:	4a2c      	ldr	r2, [pc, #176]	@ (8012cf4 <tcp_listen_input+0x1f4>)
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	6013      	str	r3, [r2, #0]
 8012c46:	f003 f8cb 	bl	8015de0 <tcp_timer_needed>
 8012c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8012cf8 <tcp_listen_input+0x1f8>)
 8012c4c:	2201      	movs	r2, #1
 8012c4e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012c50:	6978      	ldr	r0, [r7, #20]
 8012c52:	f001 fd8b 	bl	801476c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012c56:	4b23      	ldr	r3, [pc, #140]	@ (8012ce4 <tcp_listen_input+0x1e4>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	89db      	ldrh	r3, [r3, #14]
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012c74:	697b      	ldr	r3, [r7, #20]
 8012c76:	3304      	adds	r3, #4
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f004 ff6d 	bl	8017b58 <ip4_route>
 8012c7e:	4601      	mov	r1, r0
 8012c80:	697b      	ldr	r3, [r7, #20]
 8012c82:	3304      	adds	r3, #4
 8012c84:	461a      	mov	r2, r3
 8012c86:	4620      	mov	r0, r4
 8012c88:	f7ff fa30 	bl	80120ec <tcp_eff_send_mss_netif>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	461a      	mov	r2, r3
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012c94:	2112      	movs	r1, #18
 8012c96:	6978      	ldr	r0, [r7, #20]
 8012c98:	f002 f83e 	bl	8014d18 <tcp_enqueue_flags>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d004      	beq.n	8012cb2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012ca8:	2100      	movs	r1, #0
 8012caa:	6978      	ldr	r0, [r7, #20]
 8012cac:	f7fe f97c 	bl	8010fa8 <tcp_abandon>
      return;
 8012cb0:	e006      	b.n	8012cc0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012cb2:	6978      	ldr	r0, [r7, #20]
 8012cb4:	f002 f91e 	bl	8014ef4 <tcp_output>
  return;
 8012cb8:	e001      	b.n	8012cbe <tcp_listen_input+0x1be>
    return;
 8012cba:	bf00      	nop
 8012cbc:	e000      	b.n	8012cc0 <tcp_listen_input+0x1c0>
  return;
 8012cbe:	bf00      	nop
}
 8012cc0:	371c      	adds	r7, #28
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd90      	pop	{r4, r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	200274f0 	.word	0x200274f0
 8012ccc:	0801c438 	.word	0x0801c438
 8012cd0:	0801c630 	.word	0x0801c630
 8012cd4:	0801c484 	.word	0x0801c484
 8012cd8:	200274e8 	.word	0x200274e8
 8012cdc:	200274ee 	.word	0x200274ee
 8012ce0:	200274e4 	.word	0x200274e4
 8012ce4:	200274d4 	.word	0x200274d4
 8012ce8:	200243bc 	.word	0x200243bc
 8012cec:	200243c0 	.word	0x200243c0
 8012cf0:	200243ac 	.word	0x200243ac
 8012cf4:	200274b8 	.word	0x200274b8
 8012cf8:	200274c0 	.word	0x200274c0

08012cfc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b086      	sub	sp, #24
 8012d00:	af04      	add	r7, sp, #16
 8012d02:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012d04:	4b2f      	ldr	r3, [pc, #188]	@ (8012dc4 <tcp_timewait_input+0xc8>)
 8012d06:	781b      	ldrb	r3, [r3, #0]
 8012d08:	f003 0304 	and.w	r3, r3, #4
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d153      	bne.n	8012db8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d106      	bne.n	8012d24 <tcp_timewait_input+0x28>
 8012d16:	4b2c      	ldr	r3, [pc, #176]	@ (8012dc8 <tcp_timewait_input+0xcc>)
 8012d18:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012d1c:	492b      	ldr	r1, [pc, #172]	@ (8012dcc <tcp_timewait_input+0xd0>)
 8012d1e:	482c      	ldr	r0, [pc, #176]	@ (8012dd0 <tcp_timewait_input+0xd4>)
 8012d20:	f007 f8dc 	bl	8019edc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012d24:	4b27      	ldr	r3, [pc, #156]	@ (8012dc4 <tcp_timewait_input+0xc8>)
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	f003 0302 	and.w	r3, r3, #2
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d02a      	beq.n	8012d86 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012d30:	4b28      	ldr	r3, [pc, #160]	@ (8012dd4 <tcp_timewait_input+0xd8>)
 8012d32:	681a      	ldr	r2, [r3, #0]
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d38:	1ad3      	subs	r3, r2, r3
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	db2d      	blt.n	8012d9a <tcp_timewait_input+0x9e>
 8012d3e:	4b25      	ldr	r3, [pc, #148]	@ (8012dd4 <tcp_timewait_input+0xd8>)
 8012d40:	681a      	ldr	r2, [r3, #0]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d46:	6879      	ldr	r1, [r7, #4]
 8012d48:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012d4a:	440b      	add	r3, r1
 8012d4c:	1ad3      	subs	r3, r2, r3
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	dc23      	bgt.n	8012d9a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d52:	4b21      	ldr	r3, [pc, #132]	@ (8012dd8 <tcp_timewait_input+0xdc>)
 8012d54:	6819      	ldr	r1, [r3, #0]
 8012d56:	4b21      	ldr	r3, [pc, #132]	@ (8012ddc <tcp_timewait_input+0xe0>)
 8012d58:	881b      	ldrh	r3, [r3, #0]
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8012dd4 <tcp_timewait_input+0xd8>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d62:	4b1f      	ldr	r3, [pc, #124]	@ (8012de0 <tcp_timewait_input+0xe4>)
 8012d64:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d66:	885b      	ldrh	r3, [r3, #2]
 8012d68:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8012de0 <tcp_timewait_input+0xe4>)
 8012d6c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d6e:	8812      	ldrh	r2, [r2, #0]
 8012d70:	b292      	uxth	r2, r2
 8012d72:	9202      	str	r2, [sp, #8]
 8012d74:	9301      	str	r3, [sp, #4]
 8012d76:	4b1b      	ldr	r3, [pc, #108]	@ (8012de4 <tcp_timewait_input+0xe8>)
 8012d78:	9300      	str	r3, [sp, #0]
 8012d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8012de8 <tcp_timewait_input+0xec>)
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f002 fe6c 	bl	8015a5c <tcp_rst>
      return;
 8012d84:	e01b      	b.n	8012dbe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012d86:	4b0f      	ldr	r3, [pc, #60]	@ (8012dc4 <tcp_timewait_input+0xc8>)
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	f003 0301 	and.w	r3, r3, #1
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d003      	beq.n	8012d9a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012d92:	4b16      	ldr	r3, [pc, #88]	@ (8012dec <tcp_timewait_input+0xf0>)
 8012d94:	681a      	ldr	r2, [r3, #0]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012d9a:	4b10      	ldr	r3, [pc, #64]	@ (8012ddc <tcp_timewait_input+0xe0>)
 8012d9c:	881b      	ldrh	r3, [r3, #0]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d00c      	beq.n	8012dbc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	8b5b      	ldrh	r3, [r3, #26]
 8012da6:	f043 0302 	orr.w	r3, r3, #2
 8012daa:	b29a      	uxth	r2, r3
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f002 f89f 	bl	8014ef4 <tcp_output>
  }
  return;
 8012db6:	e001      	b.n	8012dbc <tcp_timewait_input+0xc0>
    return;
 8012db8:	bf00      	nop
 8012dba:	e000      	b.n	8012dbe <tcp_timewait_input+0xc2>
  return;
 8012dbc:	bf00      	nop
}
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	200274f0 	.word	0x200274f0
 8012dc8:	0801c438 	.word	0x0801c438
 8012dcc:	0801c650 	.word	0x0801c650
 8012dd0:	0801c484 	.word	0x0801c484
 8012dd4:	200274e4 	.word	0x200274e4
 8012dd8:	200274e8 	.word	0x200274e8
 8012ddc:	200274ee 	.word	0x200274ee
 8012de0:	200274d4 	.word	0x200274d4
 8012de4:	200243bc 	.word	0x200243bc
 8012de8:	200243c0 	.word	0x200243c0
 8012dec:	200274ac 	.word	0x200274ac

08012df0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012df0:	b590      	push	{r4, r7, lr}
 8012df2:	b08d      	sub	sp, #52	@ 0x34
 8012df4:	af04      	add	r7, sp, #16
 8012df6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d106      	bne.n	8012e14 <tcp_process+0x24>
 8012e06:	4b9d      	ldr	r3, [pc, #628]	@ (801307c <tcp_process+0x28c>)
 8012e08:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012e0c:	499c      	ldr	r1, [pc, #624]	@ (8013080 <tcp_process+0x290>)
 8012e0e:	489d      	ldr	r0, [pc, #628]	@ (8013084 <tcp_process+0x294>)
 8012e10:	f007 f864 	bl	8019edc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012e14:	4b9c      	ldr	r3, [pc, #624]	@ (8013088 <tcp_process+0x298>)
 8012e16:	781b      	ldrb	r3, [r3, #0]
 8012e18:	f003 0304 	and.w	r3, r3, #4
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d04e      	beq.n	8012ebe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	7d1b      	ldrb	r3, [r3, #20]
 8012e24:	2b02      	cmp	r3, #2
 8012e26:	d108      	bne.n	8012e3a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012e2c:	4b97      	ldr	r3, [pc, #604]	@ (801308c <tcp_process+0x29c>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d123      	bne.n	8012e7c <tcp_process+0x8c>
        acceptable = 1;
 8012e34:	2301      	movs	r3, #1
 8012e36:	76fb      	strb	r3, [r7, #27]
 8012e38:	e020      	b.n	8012e7c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e3e:	4b94      	ldr	r3, [pc, #592]	@ (8013090 <tcp_process+0x2a0>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d102      	bne.n	8012e4c <tcp_process+0x5c>
        acceptable = 1;
 8012e46:	2301      	movs	r3, #1
 8012e48:	76fb      	strb	r3, [r7, #27]
 8012e4a:	e017      	b.n	8012e7c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012e4c:	4b90      	ldr	r3, [pc, #576]	@ (8013090 <tcp_process+0x2a0>)
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	db10      	blt.n	8012e7c <tcp_process+0x8c>
 8012e5a:	4b8d      	ldr	r3, [pc, #564]	@ (8013090 <tcp_process+0x2a0>)
 8012e5c:	681a      	ldr	r2, [r3, #0]
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e62:	6879      	ldr	r1, [r7, #4]
 8012e64:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012e66:	440b      	add	r3, r1
 8012e68:	1ad3      	subs	r3, r2, r3
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	dc06      	bgt.n	8012e7c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	8b5b      	ldrh	r3, [r3, #26]
 8012e72:	f043 0302 	orr.w	r3, r3, #2
 8012e76:	b29a      	uxth	r2, r3
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012e7c:	7efb      	ldrb	r3, [r7, #27]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d01b      	beq.n	8012eba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	7d1b      	ldrb	r3, [r3, #20]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d106      	bne.n	8012e98 <tcp_process+0xa8>
 8012e8a:	4b7c      	ldr	r3, [pc, #496]	@ (801307c <tcp_process+0x28c>)
 8012e8c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8012e90:	4980      	ldr	r1, [pc, #512]	@ (8013094 <tcp_process+0x2a4>)
 8012e92:	487c      	ldr	r0, [pc, #496]	@ (8013084 <tcp_process+0x294>)
 8012e94:	f007 f822 	bl	8019edc <iprintf>
      recv_flags |= TF_RESET;
 8012e98:	4b7f      	ldr	r3, [pc, #508]	@ (8013098 <tcp_process+0x2a8>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	f043 0308 	orr.w	r3, r3, #8
 8012ea0:	b2da      	uxtb	r2, r3
 8012ea2:	4b7d      	ldr	r3, [pc, #500]	@ (8013098 <tcp_process+0x2a8>)
 8012ea4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	8b5b      	ldrh	r3, [r3, #26]
 8012eaa:	f023 0301 	bic.w	r3, r3, #1
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012eb4:	f06f 030d 	mvn.w	r3, #13
 8012eb8:	e37a      	b.n	80135b0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	e378      	b.n	80135b0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012ebe:	4b72      	ldr	r3, [pc, #456]	@ (8013088 <tcp_process+0x298>)
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	f003 0302 	and.w	r3, r3, #2
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d010      	beq.n	8012eec <tcp_process+0xfc>
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	7d1b      	ldrb	r3, [r3, #20]
 8012ece:	2b02      	cmp	r3, #2
 8012ed0:	d00c      	beq.n	8012eec <tcp_process+0xfc>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	7d1b      	ldrb	r3, [r3, #20]
 8012ed6:	2b03      	cmp	r3, #3
 8012ed8:	d008      	beq.n	8012eec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	8b5b      	ldrh	r3, [r3, #26]
 8012ede:	f043 0302 	orr.w	r3, r3, #2
 8012ee2:	b29a      	uxth	r2, r3
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	e361      	b.n	80135b0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	8b5b      	ldrh	r3, [r3, #26]
 8012ef0:	f003 0310 	and.w	r3, r3, #16
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d103      	bne.n	8012f00 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012ef8:	4b68      	ldr	r3, [pc, #416]	@ (801309c <tcp_process+0x2ac>)
 8012efa:	681a      	ldr	r2, [r3, #0]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2200      	movs	r2, #0
 8012f04:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f001 fc2b 	bl	801476c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	7d1b      	ldrb	r3, [r3, #20]
 8012f1a:	3b02      	subs	r3, #2
 8012f1c:	2b07      	cmp	r3, #7
 8012f1e:	f200 8337 	bhi.w	8013590 <tcp_process+0x7a0>
 8012f22:	a201      	add	r2, pc, #4	@ (adr r2, 8012f28 <tcp_process+0x138>)
 8012f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f28:	08012f49 	.word	0x08012f49
 8012f2c:	08013179 	.word	0x08013179
 8012f30:	080132f1 	.word	0x080132f1
 8012f34:	0801331b 	.word	0x0801331b
 8012f38:	0801343f 	.word	0x0801343f
 8012f3c:	080132f1 	.word	0x080132f1
 8012f40:	080134cb 	.word	0x080134cb
 8012f44:	0801355b 	.word	0x0801355b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012f48:	4b4f      	ldr	r3, [pc, #316]	@ (8013088 <tcp_process+0x298>)
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	f003 0310 	and.w	r3, r3, #16
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	f000 80e4 	beq.w	801311e <tcp_process+0x32e>
 8012f56:	4b4c      	ldr	r3, [pc, #304]	@ (8013088 <tcp_process+0x298>)
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	f003 0302 	and.w	r3, r3, #2
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	f000 80dd 	beq.w	801311e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f68:	1c5a      	adds	r2, r3, #1
 8012f6a:	4b48      	ldr	r3, [pc, #288]	@ (801308c <tcp_process+0x29c>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	f040 80d5 	bne.w	801311e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012f74:	4b46      	ldr	r3, [pc, #280]	@ (8013090 <tcp_process+0x2a0>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	1c5a      	adds	r2, r3, #1
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8012f86:	4b41      	ldr	r3, [pc, #260]	@ (801308c <tcp_process+0x29c>)
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012f8e:	4b44      	ldr	r3, [pc, #272]	@ (80130a0 <tcp_process+0x2b0>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	89db      	ldrh	r3, [r3, #14]
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012fa8:	4b39      	ldr	r3, [pc, #228]	@ (8013090 <tcp_process+0x2a0>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	1e5a      	subs	r2, r3, #1
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2204      	movs	r2, #4
 8012fb6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	3304      	adds	r3, #4
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f004 fdc9 	bl	8017b58 <ip4_route>
 8012fc6:	4601      	mov	r1, r0
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	3304      	adds	r3, #4
 8012fcc:	461a      	mov	r2, r3
 8012fce:	4620      	mov	r0, r4
 8012fd0:	f7ff f88c 	bl	80120ec <tcp_eff_send_mss_netif>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	461a      	mov	r2, r3
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012fe0:	009a      	lsls	r2, r3, #2
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012fe6:	005b      	lsls	r3, r3, #1
 8012fe8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012fec:	428b      	cmp	r3, r1
 8012fee:	bf38      	it	cc
 8012ff0:	460b      	movcc	r3, r1
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d204      	bcs.n	8013000 <tcp_process+0x210>
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ffa:	009b      	lsls	r3, r3, #2
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	e00d      	b.n	801301c <tcp_process+0x22c>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013004:	005b      	lsls	r3, r3, #1
 8013006:	f241 121c 	movw	r2, #4380	@ 0x111c
 801300a:	4293      	cmp	r3, r2
 801300c:	d904      	bls.n	8013018 <tcp_process+0x228>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013012:	005b      	lsls	r3, r3, #1
 8013014:	b29b      	uxth	r3, r3
 8013016:	e001      	b.n	801301c <tcp_process+0x22c>
 8013018:	f241 131c 	movw	r3, #4380	@ 0x111c
 801301c:	687a      	ldr	r2, [r7, #4]
 801301e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013028:	2b00      	cmp	r3, #0
 801302a:	d106      	bne.n	801303a <tcp_process+0x24a>
 801302c:	4b13      	ldr	r3, [pc, #76]	@ (801307c <tcp_process+0x28c>)
 801302e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8013032:	491c      	ldr	r1, [pc, #112]	@ (80130a4 <tcp_process+0x2b4>)
 8013034:	4813      	ldr	r0, [pc, #76]	@ (8013084 <tcp_process+0x294>)
 8013036:	f006 ff51 	bl	8019edc <iprintf>
        --pcb->snd_queuelen;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013040:	3b01      	subs	r3, #1
 8013042:	b29a      	uxth	r2, r3
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801304e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d12a      	bne.n	80130ac <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801305a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d106      	bne.n	8013070 <tcp_process+0x280>
 8013062:	4b06      	ldr	r3, [pc, #24]	@ (801307c <tcp_process+0x28c>)
 8013064:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8013068:	490f      	ldr	r1, [pc, #60]	@ (80130a8 <tcp_process+0x2b8>)
 801306a:	4806      	ldr	r0, [pc, #24]	@ (8013084 <tcp_process+0x294>)
 801306c:	f006 ff36 	bl	8019edc <iprintf>
          pcb->unsent = rseg->next;
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013078:	e01c      	b.n	80130b4 <tcp_process+0x2c4>
 801307a:	bf00      	nop
 801307c:	0801c438 	.word	0x0801c438
 8013080:	0801c670 	.word	0x0801c670
 8013084:	0801c484 	.word	0x0801c484
 8013088:	200274f0 	.word	0x200274f0
 801308c:	200274e8 	.word	0x200274e8
 8013090:	200274e4 	.word	0x200274e4
 8013094:	0801c68c 	.word	0x0801c68c
 8013098:	200274f1 	.word	0x200274f1
 801309c:	200274ac 	.word	0x200274ac
 80130a0:	200274d4 	.word	0x200274d4
 80130a4:	0801c6ac 	.word	0x0801c6ac
 80130a8:	0801c6c4 	.word	0x0801c6c4
        } else {
          pcb->unacked = rseg->next;
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	681a      	ldr	r2, [r3, #0]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80130b4:	69f8      	ldr	r0, [r7, #28]
 80130b6:	f7fe fd22 	bl	8011afe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d104      	bne.n	80130cc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130c8:	861a      	strh	r2, [r3, #48]	@ 0x30
 80130ca:	e006      	b.n	80130da <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2200      	movs	r2, #0
 80130d0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2200      	movs	r2, #0
 80130d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d00a      	beq.n	80130fa <tcp_process+0x30a>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80130ea:	687a      	ldr	r2, [r7, #4]
 80130ec:	6910      	ldr	r0, [r2, #16]
 80130ee:	2200      	movs	r2, #0
 80130f0:	6879      	ldr	r1, [r7, #4]
 80130f2:	4798      	blx	r3
 80130f4:	4603      	mov	r3, r0
 80130f6:	76bb      	strb	r3, [r7, #26]
 80130f8:	e001      	b.n	80130fe <tcp_process+0x30e>
 80130fa:	2300      	movs	r3, #0
 80130fc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80130fe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013102:	f113 0f0d 	cmn.w	r3, #13
 8013106:	d102      	bne.n	801310e <tcp_process+0x31e>
          return ERR_ABRT;
 8013108:	f06f 030c 	mvn.w	r3, #12
 801310c:	e250      	b.n	80135b0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	8b5b      	ldrh	r3, [r3, #26]
 8013112:	f043 0302 	orr.w	r3, r3, #2
 8013116:	b29a      	uxth	r2, r3
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801311c:	e23a      	b.n	8013594 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801311e:	4b98      	ldr	r3, [pc, #608]	@ (8013380 <tcp_process+0x590>)
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	f003 0310 	and.w	r3, r3, #16
 8013126:	2b00      	cmp	r3, #0
 8013128:	f000 8234 	beq.w	8013594 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801312c:	4b95      	ldr	r3, [pc, #596]	@ (8013384 <tcp_process+0x594>)
 801312e:	6819      	ldr	r1, [r3, #0]
 8013130:	4b95      	ldr	r3, [pc, #596]	@ (8013388 <tcp_process+0x598>)
 8013132:	881b      	ldrh	r3, [r3, #0]
 8013134:	461a      	mov	r2, r3
 8013136:	4b95      	ldr	r3, [pc, #596]	@ (801338c <tcp_process+0x59c>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801313c:	4b94      	ldr	r3, [pc, #592]	@ (8013390 <tcp_process+0x5a0>)
 801313e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013140:	885b      	ldrh	r3, [r3, #2]
 8013142:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013144:	4a92      	ldr	r2, [pc, #584]	@ (8013390 <tcp_process+0x5a0>)
 8013146:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013148:	8812      	ldrh	r2, [r2, #0]
 801314a:	b292      	uxth	r2, r2
 801314c:	9202      	str	r2, [sp, #8]
 801314e:	9301      	str	r3, [sp, #4]
 8013150:	4b90      	ldr	r3, [pc, #576]	@ (8013394 <tcp_process+0x5a4>)
 8013152:	9300      	str	r3, [sp, #0]
 8013154:	4b90      	ldr	r3, [pc, #576]	@ (8013398 <tcp_process+0x5a8>)
 8013156:	4602      	mov	r2, r0
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f002 fc7f 	bl	8015a5c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013164:	2b05      	cmp	r3, #5
 8013166:	f200 8215 	bhi.w	8013594 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2200      	movs	r2, #0
 801316e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f002 fa4b 	bl	801560c <tcp_rexmit_rto>
      break;
 8013176:	e20d      	b.n	8013594 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013178:	4b81      	ldr	r3, [pc, #516]	@ (8013380 <tcp_process+0x590>)
 801317a:	781b      	ldrb	r3, [r3, #0]
 801317c:	f003 0310 	and.w	r3, r3, #16
 8013180:	2b00      	cmp	r3, #0
 8013182:	f000 80a1 	beq.w	80132c8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013186:	4b7f      	ldr	r3, [pc, #508]	@ (8013384 <tcp_process+0x594>)
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801318e:	1ad3      	subs	r3, r2, r3
 8013190:	3b01      	subs	r3, #1
 8013192:	2b00      	cmp	r3, #0
 8013194:	db7e      	blt.n	8013294 <tcp_process+0x4a4>
 8013196:	4b7b      	ldr	r3, [pc, #492]	@ (8013384 <tcp_process+0x594>)
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801319e:	1ad3      	subs	r3, r2, r3
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	dc77      	bgt.n	8013294 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2204      	movs	r2, #4
 80131a8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d102      	bne.n	80131b8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80131b2:	23fa      	movs	r3, #250	@ 0xfa
 80131b4:	76bb      	strb	r3, [r7, #26]
 80131b6:	e01d      	b.n	80131f4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131bc:	699b      	ldr	r3, [r3, #24]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d106      	bne.n	80131d0 <tcp_process+0x3e0>
 80131c2:	4b76      	ldr	r3, [pc, #472]	@ (801339c <tcp_process+0x5ac>)
 80131c4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80131c8:	4975      	ldr	r1, [pc, #468]	@ (80133a0 <tcp_process+0x5b0>)
 80131ca:	4876      	ldr	r0, [pc, #472]	@ (80133a4 <tcp_process+0x5b4>)
 80131cc:	f006 fe86 	bl	8019edc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131d4:	699b      	ldr	r3, [r3, #24]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d00a      	beq.n	80131f0 <tcp_process+0x400>
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131de:	699b      	ldr	r3, [r3, #24]
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	6910      	ldr	r0, [r2, #16]
 80131e4:	2200      	movs	r2, #0
 80131e6:	6879      	ldr	r1, [r7, #4]
 80131e8:	4798      	blx	r3
 80131ea:	4603      	mov	r3, r0
 80131ec:	76bb      	strb	r3, [r7, #26]
 80131ee:	e001      	b.n	80131f4 <tcp_process+0x404>
 80131f0:	23f0      	movs	r3, #240	@ 0xf0
 80131f2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80131f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d00a      	beq.n	8013212 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80131fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013200:	f113 0f0d 	cmn.w	r3, #13
 8013204:	d002      	beq.n	801320c <tcp_process+0x41c>
              tcp_abort(pcb);
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7fd ff8c 	bl	8011124 <tcp_abort>
            }
            return ERR_ABRT;
 801320c:	f06f 030c 	mvn.w	r3, #12
 8013210:	e1ce      	b.n	80135b0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f000 fae0 	bl	80137d8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013218:	4b63      	ldr	r3, [pc, #396]	@ (80133a8 <tcp_process+0x5b8>)
 801321a:	881b      	ldrh	r3, [r3, #0]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d005      	beq.n	801322c <tcp_process+0x43c>
            recv_acked--;
 8013220:	4b61      	ldr	r3, [pc, #388]	@ (80133a8 <tcp_process+0x5b8>)
 8013222:	881b      	ldrh	r3, [r3, #0]
 8013224:	3b01      	subs	r3, #1
 8013226:	b29a      	uxth	r2, r3
 8013228:	4b5f      	ldr	r3, [pc, #380]	@ (80133a8 <tcp_process+0x5b8>)
 801322a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013230:	009a      	lsls	r2, r3, #2
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013236:	005b      	lsls	r3, r3, #1
 8013238:	f241 111c 	movw	r1, #4380	@ 0x111c
 801323c:	428b      	cmp	r3, r1
 801323e:	bf38      	it	cc
 8013240:	460b      	movcc	r3, r1
 8013242:	429a      	cmp	r2, r3
 8013244:	d204      	bcs.n	8013250 <tcp_process+0x460>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801324a:	009b      	lsls	r3, r3, #2
 801324c:	b29b      	uxth	r3, r3
 801324e:	e00d      	b.n	801326c <tcp_process+0x47c>
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013254:	005b      	lsls	r3, r3, #1
 8013256:	f241 121c 	movw	r2, #4380	@ 0x111c
 801325a:	4293      	cmp	r3, r2
 801325c:	d904      	bls.n	8013268 <tcp_process+0x478>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013262:	005b      	lsls	r3, r3, #1
 8013264:	b29b      	uxth	r3, r3
 8013266:	e001      	b.n	801326c <tcp_process+0x47c>
 8013268:	f241 131c 	movw	r3, #4380	@ 0x111c
 801326c:	687a      	ldr	r2, [r7, #4]
 801326e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013272:	4b4e      	ldr	r3, [pc, #312]	@ (80133ac <tcp_process+0x5bc>)
 8013274:	781b      	ldrb	r3, [r3, #0]
 8013276:	f003 0320 	and.w	r3, r3, #32
 801327a:	2b00      	cmp	r3, #0
 801327c:	d037      	beq.n	80132ee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	8b5b      	ldrh	r3, [r3, #26]
 8013282:	f043 0302 	orr.w	r3, r3, #2
 8013286:	b29a      	uxth	r2, r3
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2207      	movs	r2, #7
 8013290:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013292:	e02c      	b.n	80132ee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013294:	4b3b      	ldr	r3, [pc, #236]	@ (8013384 <tcp_process+0x594>)
 8013296:	6819      	ldr	r1, [r3, #0]
 8013298:	4b3b      	ldr	r3, [pc, #236]	@ (8013388 <tcp_process+0x598>)
 801329a:	881b      	ldrh	r3, [r3, #0]
 801329c:	461a      	mov	r2, r3
 801329e:	4b3b      	ldr	r3, [pc, #236]	@ (801338c <tcp_process+0x59c>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132a4:	4b3a      	ldr	r3, [pc, #232]	@ (8013390 <tcp_process+0x5a0>)
 80132a6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132a8:	885b      	ldrh	r3, [r3, #2]
 80132aa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132ac:	4a38      	ldr	r2, [pc, #224]	@ (8013390 <tcp_process+0x5a0>)
 80132ae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132b0:	8812      	ldrh	r2, [r2, #0]
 80132b2:	b292      	uxth	r2, r2
 80132b4:	9202      	str	r2, [sp, #8]
 80132b6:	9301      	str	r3, [sp, #4]
 80132b8:	4b36      	ldr	r3, [pc, #216]	@ (8013394 <tcp_process+0x5a4>)
 80132ba:	9300      	str	r3, [sp, #0]
 80132bc:	4b36      	ldr	r3, [pc, #216]	@ (8013398 <tcp_process+0x5a8>)
 80132be:	4602      	mov	r2, r0
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f002 fbcb 	bl	8015a5c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80132c6:	e167      	b.n	8013598 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80132c8:	4b2d      	ldr	r3, [pc, #180]	@ (8013380 <tcp_process+0x590>)
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	f003 0302 	and.w	r3, r3, #2
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	f000 8161 	beq.w	8013598 <tcp_process+0x7a8>
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132da:	1e5a      	subs	r2, r3, #1
 80132dc:	4b2b      	ldr	r3, [pc, #172]	@ (801338c <tcp_process+0x59c>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	429a      	cmp	r2, r3
 80132e2:	f040 8159 	bne.w	8013598 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f002 f9b2 	bl	8015650 <tcp_rexmit>
      break;
 80132ec:	e154      	b.n	8013598 <tcp_process+0x7a8>
 80132ee:	e153      	b.n	8013598 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f000 fa71 	bl	80137d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80132f6:	4b2d      	ldr	r3, [pc, #180]	@ (80133ac <tcp_process+0x5bc>)
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	f003 0320 	and.w	r3, r3, #32
 80132fe:	2b00      	cmp	r3, #0
 8013300:	f000 814c 	beq.w	801359c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	8b5b      	ldrh	r3, [r3, #26]
 8013308:	f043 0302 	orr.w	r3, r3, #2
 801330c:	b29a      	uxth	r2, r3
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2207      	movs	r2, #7
 8013316:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013318:	e140      	b.n	801359c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f000 fa5c 	bl	80137d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013320:	4b22      	ldr	r3, [pc, #136]	@ (80133ac <tcp_process+0x5bc>)
 8013322:	781b      	ldrb	r3, [r3, #0]
 8013324:	f003 0320 	and.w	r3, r3, #32
 8013328:	2b00      	cmp	r3, #0
 801332a:	d071      	beq.n	8013410 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801332c:	4b14      	ldr	r3, [pc, #80]	@ (8013380 <tcp_process+0x590>)
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	f003 0310 	and.w	r3, r3, #16
 8013334:	2b00      	cmp	r3, #0
 8013336:	d060      	beq.n	80133fa <tcp_process+0x60a>
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801333c:	4b11      	ldr	r3, [pc, #68]	@ (8013384 <tcp_process+0x594>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	429a      	cmp	r2, r3
 8013342:	d15a      	bne.n	80133fa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013348:	2b00      	cmp	r3, #0
 801334a:	d156      	bne.n	80133fa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	8b5b      	ldrh	r3, [r3, #26]
 8013350:	f043 0302 	orr.w	r3, r3, #2
 8013354:	b29a      	uxth	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f7fe fdbc 	bl	8011ed8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013360:	4b13      	ldr	r3, [pc, #76]	@ (80133b0 <tcp_process+0x5c0>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	687a      	ldr	r2, [r7, #4]
 8013366:	429a      	cmp	r2, r3
 8013368:	d105      	bne.n	8013376 <tcp_process+0x586>
 801336a:	4b11      	ldr	r3, [pc, #68]	@ (80133b0 <tcp_process+0x5c0>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	68db      	ldr	r3, [r3, #12]
 8013370:	4a0f      	ldr	r2, [pc, #60]	@ (80133b0 <tcp_process+0x5c0>)
 8013372:	6013      	str	r3, [r2, #0]
 8013374:	e02e      	b.n	80133d4 <tcp_process+0x5e4>
 8013376:	4b0e      	ldr	r3, [pc, #56]	@ (80133b0 <tcp_process+0x5c0>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	617b      	str	r3, [r7, #20]
 801337c:	e027      	b.n	80133ce <tcp_process+0x5de>
 801337e:	bf00      	nop
 8013380:	200274f0 	.word	0x200274f0
 8013384:	200274e8 	.word	0x200274e8
 8013388:	200274ee 	.word	0x200274ee
 801338c:	200274e4 	.word	0x200274e4
 8013390:	200274d4 	.word	0x200274d4
 8013394:	200243bc 	.word	0x200243bc
 8013398:	200243c0 	.word	0x200243c0
 801339c:	0801c438 	.word	0x0801c438
 80133a0:	0801c6d8 	.word	0x0801c6d8
 80133a4:	0801c484 	.word	0x0801c484
 80133a8:	200274ec 	.word	0x200274ec
 80133ac:	200274f1 	.word	0x200274f1
 80133b0:	200274b8 	.word	0x200274b8
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	68db      	ldr	r3, [r3, #12]
 80133b8:	687a      	ldr	r2, [r7, #4]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d104      	bne.n	80133c8 <tcp_process+0x5d8>
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	68da      	ldr	r2, [r3, #12]
 80133c2:	697b      	ldr	r3, [r7, #20]
 80133c4:	60da      	str	r2, [r3, #12]
 80133c6:	e005      	b.n	80133d4 <tcp_process+0x5e4>
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	68db      	ldr	r3, [r3, #12]
 80133cc:	617b      	str	r3, [r7, #20]
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d1ef      	bne.n	80133b4 <tcp_process+0x5c4>
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2200      	movs	r2, #0
 80133d8:	60da      	str	r2, [r3, #12]
 80133da:	4b77      	ldr	r3, [pc, #476]	@ (80135b8 <tcp_process+0x7c8>)
 80133dc:	2201      	movs	r2, #1
 80133de:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	220a      	movs	r2, #10
 80133e4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80133e6:	4b75      	ldr	r3, [pc, #468]	@ (80135bc <tcp_process+0x7cc>)
 80133e8:	681a      	ldr	r2, [r3, #0]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	60da      	str	r2, [r3, #12]
 80133ee:	4a73      	ldr	r2, [pc, #460]	@ (80135bc <tcp_process+0x7cc>)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6013      	str	r3, [r2, #0]
 80133f4:	f002 fcf4 	bl	8015de0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80133f8:	e0d2      	b.n	80135a0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	8b5b      	ldrh	r3, [r3, #26]
 80133fe:	f043 0302 	orr.w	r3, r3, #2
 8013402:	b29a      	uxth	r2, r3
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2208      	movs	r2, #8
 801340c:	751a      	strb	r2, [r3, #20]
      break;
 801340e:	e0c7      	b.n	80135a0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013410:	4b6b      	ldr	r3, [pc, #428]	@ (80135c0 <tcp_process+0x7d0>)
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	f003 0310 	and.w	r3, r3, #16
 8013418:	2b00      	cmp	r3, #0
 801341a:	f000 80c1 	beq.w	80135a0 <tcp_process+0x7b0>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013422:	4b68      	ldr	r3, [pc, #416]	@ (80135c4 <tcp_process+0x7d4>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	429a      	cmp	r2, r3
 8013428:	f040 80ba 	bne.w	80135a0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013430:	2b00      	cmp	r3, #0
 8013432:	f040 80b5 	bne.w	80135a0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	2206      	movs	r2, #6
 801343a:	751a      	strb	r2, [r3, #20]
      break;
 801343c:	e0b0      	b.n	80135a0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f000 f9ca 	bl	80137d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013444:	4b60      	ldr	r3, [pc, #384]	@ (80135c8 <tcp_process+0x7d8>)
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	f003 0320 	and.w	r3, r3, #32
 801344c:	2b00      	cmp	r3, #0
 801344e:	f000 80a9 	beq.w	80135a4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	8b5b      	ldrh	r3, [r3, #26]
 8013456:	f043 0302 	orr.w	r3, r3, #2
 801345a:	b29a      	uxth	r2, r3
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f7fe fd39 	bl	8011ed8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013466:	4b59      	ldr	r3, [pc, #356]	@ (80135cc <tcp_process+0x7dc>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	429a      	cmp	r2, r3
 801346e:	d105      	bne.n	801347c <tcp_process+0x68c>
 8013470:	4b56      	ldr	r3, [pc, #344]	@ (80135cc <tcp_process+0x7dc>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	68db      	ldr	r3, [r3, #12]
 8013476:	4a55      	ldr	r2, [pc, #340]	@ (80135cc <tcp_process+0x7dc>)
 8013478:	6013      	str	r3, [r2, #0]
 801347a:	e013      	b.n	80134a4 <tcp_process+0x6b4>
 801347c:	4b53      	ldr	r3, [pc, #332]	@ (80135cc <tcp_process+0x7dc>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	613b      	str	r3, [r7, #16]
 8013482:	e00c      	b.n	801349e <tcp_process+0x6ae>
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	687a      	ldr	r2, [r7, #4]
 801348a:	429a      	cmp	r2, r3
 801348c:	d104      	bne.n	8013498 <tcp_process+0x6a8>
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	68da      	ldr	r2, [r3, #12]
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	60da      	str	r2, [r3, #12]
 8013496:	e005      	b.n	80134a4 <tcp_process+0x6b4>
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	68db      	ldr	r3, [r3, #12]
 801349c:	613b      	str	r3, [r7, #16]
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d1ef      	bne.n	8013484 <tcp_process+0x694>
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2200      	movs	r2, #0
 80134a8:	60da      	str	r2, [r3, #12]
 80134aa:	4b43      	ldr	r3, [pc, #268]	@ (80135b8 <tcp_process+0x7c8>)
 80134ac:	2201      	movs	r2, #1
 80134ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	220a      	movs	r2, #10
 80134b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80134b6:	4b41      	ldr	r3, [pc, #260]	@ (80135bc <tcp_process+0x7cc>)
 80134b8:	681a      	ldr	r2, [r3, #0]
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	60da      	str	r2, [r3, #12]
 80134be:	4a3f      	ldr	r2, [pc, #252]	@ (80135bc <tcp_process+0x7cc>)
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6013      	str	r3, [r2, #0]
 80134c4:	f002 fc8c 	bl	8015de0 <tcp_timer_needed>
      }
      break;
 80134c8:	e06c      	b.n	80135a4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f000 f984 	bl	80137d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80134d0:	4b3b      	ldr	r3, [pc, #236]	@ (80135c0 <tcp_process+0x7d0>)
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	f003 0310 	and.w	r3, r3, #16
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d065      	beq.n	80135a8 <tcp_process+0x7b8>
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80134e0:	4b38      	ldr	r3, [pc, #224]	@ (80135c4 <tcp_process+0x7d4>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d15f      	bne.n	80135a8 <tcp_process+0x7b8>
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d15b      	bne.n	80135a8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f7fe fcf1 	bl	8011ed8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80134f6:	4b35      	ldr	r3, [pc, #212]	@ (80135cc <tcp_process+0x7dc>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	687a      	ldr	r2, [r7, #4]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d105      	bne.n	801350c <tcp_process+0x71c>
 8013500:	4b32      	ldr	r3, [pc, #200]	@ (80135cc <tcp_process+0x7dc>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	68db      	ldr	r3, [r3, #12]
 8013506:	4a31      	ldr	r2, [pc, #196]	@ (80135cc <tcp_process+0x7dc>)
 8013508:	6013      	str	r3, [r2, #0]
 801350a:	e013      	b.n	8013534 <tcp_process+0x744>
 801350c:	4b2f      	ldr	r3, [pc, #188]	@ (80135cc <tcp_process+0x7dc>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	60fb      	str	r3, [r7, #12]
 8013512:	e00c      	b.n	801352e <tcp_process+0x73e>
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	68db      	ldr	r3, [r3, #12]
 8013518:	687a      	ldr	r2, [r7, #4]
 801351a:	429a      	cmp	r2, r3
 801351c:	d104      	bne.n	8013528 <tcp_process+0x738>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	68da      	ldr	r2, [r3, #12]
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	60da      	str	r2, [r3, #12]
 8013526:	e005      	b.n	8013534 <tcp_process+0x744>
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	68db      	ldr	r3, [r3, #12]
 801352c:	60fb      	str	r3, [r7, #12]
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d1ef      	bne.n	8013514 <tcp_process+0x724>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2200      	movs	r2, #0
 8013538:	60da      	str	r2, [r3, #12]
 801353a:	4b1f      	ldr	r3, [pc, #124]	@ (80135b8 <tcp_process+0x7c8>)
 801353c:	2201      	movs	r2, #1
 801353e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	220a      	movs	r2, #10
 8013544:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013546:	4b1d      	ldr	r3, [pc, #116]	@ (80135bc <tcp_process+0x7cc>)
 8013548:	681a      	ldr	r2, [r3, #0]
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	60da      	str	r2, [r3, #12]
 801354e:	4a1b      	ldr	r2, [pc, #108]	@ (80135bc <tcp_process+0x7cc>)
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	6013      	str	r3, [r2, #0]
 8013554:	f002 fc44 	bl	8015de0 <tcp_timer_needed>
      }
      break;
 8013558:	e026      	b.n	80135a8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f000 f93c 	bl	80137d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013560:	4b17      	ldr	r3, [pc, #92]	@ (80135c0 <tcp_process+0x7d0>)
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	f003 0310 	and.w	r3, r3, #16
 8013568:	2b00      	cmp	r3, #0
 801356a:	d01f      	beq.n	80135ac <tcp_process+0x7bc>
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013570:	4b14      	ldr	r3, [pc, #80]	@ (80135c4 <tcp_process+0x7d4>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	429a      	cmp	r2, r3
 8013576:	d119      	bne.n	80135ac <tcp_process+0x7bc>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801357c:	2b00      	cmp	r3, #0
 801357e:	d115      	bne.n	80135ac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013580:	4b11      	ldr	r3, [pc, #68]	@ (80135c8 <tcp_process+0x7d8>)
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	f043 0310 	orr.w	r3, r3, #16
 8013588:	b2da      	uxtb	r2, r3
 801358a:	4b0f      	ldr	r3, [pc, #60]	@ (80135c8 <tcp_process+0x7d8>)
 801358c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801358e:	e00d      	b.n	80135ac <tcp_process+0x7bc>
    default:
      break;
 8013590:	bf00      	nop
 8013592:	e00c      	b.n	80135ae <tcp_process+0x7be>
      break;
 8013594:	bf00      	nop
 8013596:	e00a      	b.n	80135ae <tcp_process+0x7be>
      break;
 8013598:	bf00      	nop
 801359a:	e008      	b.n	80135ae <tcp_process+0x7be>
      break;
 801359c:	bf00      	nop
 801359e:	e006      	b.n	80135ae <tcp_process+0x7be>
      break;
 80135a0:	bf00      	nop
 80135a2:	e004      	b.n	80135ae <tcp_process+0x7be>
      break;
 80135a4:	bf00      	nop
 80135a6:	e002      	b.n	80135ae <tcp_process+0x7be>
      break;
 80135a8:	bf00      	nop
 80135aa:	e000      	b.n	80135ae <tcp_process+0x7be>
      break;
 80135ac:	bf00      	nop
  }
  return ERR_OK;
 80135ae:	2300      	movs	r3, #0
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	3724      	adds	r7, #36	@ 0x24
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd90      	pop	{r4, r7, pc}
 80135b8:	200274c0 	.word	0x200274c0
 80135bc:	200274bc 	.word	0x200274bc
 80135c0:	200274f0 	.word	0x200274f0
 80135c4:	200274e8 	.word	0x200274e8
 80135c8:	200274f1 	.word	0x200274f1
 80135cc:	200274b8 	.word	0x200274b8

080135d0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80135d0:	b590      	push	{r4, r7, lr}
 80135d2:	b085      	sub	sp, #20
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
 80135d8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d106      	bne.n	80135ee <tcp_oos_insert_segment+0x1e>
 80135e0:	4b3b      	ldr	r3, [pc, #236]	@ (80136d0 <tcp_oos_insert_segment+0x100>)
 80135e2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80135e6:	493b      	ldr	r1, [pc, #236]	@ (80136d4 <tcp_oos_insert_segment+0x104>)
 80135e8:	483b      	ldr	r0, [pc, #236]	@ (80136d8 <tcp_oos_insert_segment+0x108>)
 80135ea:	f006 fc77 	bl	8019edc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	899b      	ldrh	r3, [r3, #12]
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7fb fc02 	bl	800ee00 <lwip_htons>
 80135fc:	4603      	mov	r3, r0
 80135fe:	b2db      	uxtb	r3, r3
 8013600:	f003 0301 	and.w	r3, r3, #1
 8013604:	2b00      	cmp	r3, #0
 8013606:	d028      	beq.n	801365a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013608:	6838      	ldr	r0, [r7, #0]
 801360a:	f7fe fa63 	bl	8011ad4 <tcp_segs_free>
    next = NULL;
 801360e:	2300      	movs	r3, #0
 8013610:	603b      	str	r3, [r7, #0]
 8013612:	e056      	b.n	80136c2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	68db      	ldr	r3, [r3, #12]
 8013618:	899b      	ldrh	r3, [r3, #12]
 801361a:	b29b      	uxth	r3, r3
 801361c:	4618      	mov	r0, r3
 801361e:	f7fb fbef 	bl	800ee00 <lwip_htons>
 8013622:	4603      	mov	r3, r0
 8013624:	b2db      	uxtb	r3, r3
 8013626:	f003 0301 	and.w	r3, r3, #1
 801362a:	2b00      	cmp	r3, #0
 801362c:	d00d      	beq.n	801364a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	68db      	ldr	r3, [r3, #12]
 8013632:	899b      	ldrh	r3, [r3, #12]
 8013634:	b29c      	uxth	r4, r3
 8013636:	2001      	movs	r0, #1
 8013638:	f7fb fbe2 	bl	800ee00 <lwip_htons>
 801363c:	4603      	mov	r3, r0
 801363e:	461a      	mov	r2, r3
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	68db      	ldr	r3, [r3, #12]
 8013644:	4322      	orrs	r2, r4
 8013646:	b292      	uxth	r2, r2
 8013648:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013654:	68f8      	ldr	r0, [r7, #12]
 8013656:	f7fe fa52 	bl	8011afe <tcp_seg_free>
    while (next &&
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d00e      	beq.n	801367e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	891b      	ldrh	r3, [r3, #8]
 8013664:	461a      	mov	r2, r3
 8013666:	4b1d      	ldr	r3, [pc, #116]	@ (80136dc <tcp_oos_insert_segment+0x10c>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	441a      	add	r2, r3
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	68db      	ldr	r3, [r3, #12]
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	6839      	ldr	r1, [r7, #0]
 8013674:	8909      	ldrh	r1, [r1, #8]
 8013676:	440b      	add	r3, r1
 8013678:	1ad3      	subs	r3, r2, r3
    while (next &&
 801367a:	2b00      	cmp	r3, #0
 801367c:	daca      	bge.n	8013614 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d01e      	beq.n	80136c2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	891b      	ldrh	r3, [r3, #8]
 8013688:	461a      	mov	r2, r3
 801368a:	4b14      	ldr	r3, [pc, #80]	@ (80136dc <tcp_oos_insert_segment+0x10c>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	441a      	add	r2, r3
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	68db      	ldr	r3, [r3, #12]
 8013694:	685b      	ldr	r3, [r3, #4]
 8013696:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013698:	2b00      	cmp	r3, #0
 801369a:	dd12      	ble.n	80136c2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	68db      	ldr	r3, [r3, #12]
 80136a0:	685b      	ldr	r3, [r3, #4]
 80136a2:	b29a      	uxth	r2, r3
 80136a4:	4b0d      	ldr	r3, [pc, #52]	@ (80136dc <tcp_oos_insert_segment+0x10c>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	b29b      	uxth	r3, r3
 80136aa:	1ad3      	subs	r3, r2, r3
 80136ac:	b29a      	uxth	r2, r3
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	685a      	ldr	r2, [r3, #4]
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	891b      	ldrh	r3, [r3, #8]
 80136ba:	4619      	mov	r1, r3
 80136bc:	4610      	mov	r0, r2
 80136be:	f7fc fe07 	bl	80102d0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	683a      	ldr	r2, [r7, #0]
 80136c6:	601a      	str	r2, [r3, #0]
}
 80136c8:	bf00      	nop
 80136ca:	3714      	adds	r7, #20
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd90      	pop	{r4, r7, pc}
 80136d0:	0801c438 	.word	0x0801c438
 80136d4:	0801c6f8 	.word	0x0801c6f8
 80136d8:	0801c484 	.word	0x0801c484
 80136dc:	200274e4 	.word	0x200274e4

080136e0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80136e0:	b5b0      	push	{r4, r5, r7, lr}
 80136e2:	b086      	sub	sp, #24
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	60f8      	str	r0, [r7, #12]
 80136e8:	60b9      	str	r1, [r7, #8]
 80136ea:	607a      	str	r2, [r7, #4]
 80136ec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80136ee:	e03e      	b.n	801376e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80136f4:	68bb      	ldr	r3, [r7, #8]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fc fffa 	bl	80106f8 <pbuf_clen>
 8013704:	4603      	mov	r3, r0
 8013706:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801370e:	8a7a      	ldrh	r2, [r7, #18]
 8013710:	429a      	cmp	r2, r3
 8013712:	d906      	bls.n	8013722 <tcp_free_acked_segments+0x42>
 8013714:	4b2a      	ldr	r3, [pc, #168]	@ (80137c0 <tcp_free_acked_segments+0xe0>)
 8013716:	f240 4257 	movw	r2, #1111	@ 0x457
 801371a:	492a      	ldr	r1, [pc, #168]	@ (80137c4 <tcp_free_acked_segments+0xe4>)
 801371c:	482a      	ldr	r0, [pc, #168]	@ (80137c8 <tcp_free_acked_segments+0xe8>)
 801371e:	f006 fbdd 	bl	8019edc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8013728:	8a7b      	ldrh	r3, [r7, #18]
 801372a:	1ad3      	subs	r3, r2, r3
 801372c:	b29a      	uxth	r2, r3
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	891a      	ldrh	r2, [r3, #8]
 8013738:	4b24      	ldr	r3, [pc, #144]	@ (80137cc <tcp_free_acked_segments+0xec>)
 801373a:	881b      	ldrh	r3, [r3, #0]
 801373c:	4413      	add	r3, r2
 801373e:	b29a      	uxth	r2, r3
 8013740:	4b22      	ldr	r3, [pc, #136]	@ (80137cc <tcp_free_acked_segments+0xec>)
 8013742:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013744:	6978      	ldr	r0, [r7, #20]
 8013746:	f7fe f9da 	bl	8011afe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013750:	2b00      	cmp	r3, #0
 8013752:	d00c      	beq.n	801376e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d109      	bne.n	801376e <tcp_free_acked_segments+0x8e>
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d106      	bne.n	801376e <tcp_free_acked_segments+0x8e>
 8013760:	4b17      	ldr	r3, [pc, #92]	@ (80137c0 <tcp_free_acked_segments+0xe0>)
 8013762:	f240 4261 	movw	r2, #1121	@ 0x461
 8013766:	491a      	ldr	r1, [pc, #104]	@ (80137d0 <tcp_free_acked_segments+0xf0>)
 8013768:	4817      	ldr	r0, [pc, #92]	@ (80137c8 <tcp_free_acked_segments+0xe8>)
 801376a:	f006 fbb7 	bl	8019edc <iprintf>
  while (seg_list != NULL &&
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d020      	beq.n	80137b6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	68db      	ldr	r3, [r3, #12]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	4618      	mov	r0, r3
 801377c:	f7fb fb56 	bl	800ee2c <lwip_htonl>
 8013780:	4604      	mov	r4, r0
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	891b      	ldrh	r3, [r3, #8]
 8013786:	461d      	mov	r5, r3
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	68db      	ldr	r3, [r3, #12]
 801378c:	899b      	ldrh	r3, [r3, #12]
 801378e:	b29b      	uxth	r3, r3
 8013790:	4618      	mov	r0, r3
 8013792:	f7fb fb35 	bl	800ee00 <lwip_htons>
 8013796:	4603      	mov	r3, r0
 8013798:	b2db      	uxtb	r3, r3
 801379a:	f003 0303 	and.w	r3, r3, #3
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d001      	beq.n	80137a6 <tcp_free_acked_segments+0xc6>
 80137a2:	2301      	movs	r3, #1
 80137a4:	e000      	b.n	80137a8 <tcp_free_acked_segments+0xc8>
 80137a6:	2300      	movs	r3, #0
 80137a8:	442b      	add	r3, r5
 80137aa:	18e2      	adds	r2, r4, r3
 80137ac:	4b09      	ldr	r3, [pc, #36]	@ (80137d4 <tcp_free_acked_segments+0xf4>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	dd9c      	ble.n	80136f0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80137b6:	68bb      	ldr	r3, [r7, #8]
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3718      	adds	r7, #24
 80137bc:	46bd      	mov	sp, r7
 80137be:	bdb0      	pop	{r4, r5, r7, pc}
 80137c0:	0801c438 	.word	0x0801c438
 80137c4:	0801c720 	.word	0x0801c720
 80137c8:	0801c484 	.word	0x0801c484
 80137cc:	200274ec 	.word	0x200274ec
 80137d0:	0801c748 	.word	0x0801c748
 80137d4:	200274e8 	.word	0x200274e8

080137d8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80137d8:	b5b0      	push	{r4, r5, r7, lr}
 80137da:	b094      	sub	sp, #80	@ 0x50
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80137e0:	2300      	movs	r3, #0
 80137e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d106      	bne.n	80137f8 <tcp_receive+0x20>
 80137ea:	4b91      	ldr	r3, [pc, #580]	@ (8013a30 <tcp_receive+0x258>)
 80137ec:	f240 427b 	movw	r2, #1147	@ 0x47b
 80137f0:	4990      	ldr	r1, [pc, #576]	@ (8013a34 <tcp_receive+0x25c>)
 80137f2:	4891      	ldr	r0, [pc, #580]	@ (8013a38 <tcp_receive+0x260>)
 80137f4:	f006 fb72 	bl	8019edc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	7d1b      	ldrb	r3, [r3, #20]
 80137fc:	2b03      	cmp	r3, #3
 80137fe:	d806      	bhi.n	801380e <tcp_receive+0x36>
 8013800:	4b8b      	ldr	r3, [pc, #556]	@ (8013a30 <tcp_receive+0x258>)
 8013802:	f240 427c 	movw	r2, #1148	@ 0x47c
 8013806:	498d      	ldr	r1, [pc, #564]	@ (8013a3c <tcp_receive+0x264>)
 8013808:	488b      	ldr	r0, [pc, #556]	@ (8013a38 <tcp_receive+0x260>)
 801380a:	f006 fb67 	bl	8019edc <iprintf>

  if (flags & TCP_ACK) {
 801380e:	4b8c      	ldr	r3, [pc, #560]	@ (8013a40 <tcp_receive+0x268>)
 8013810:	781b      	ldrb	r3, [r3, #0]
 8013812:	f003 0310 	and.w	r3, r3, #16
 8013816:	2b00      	cmp	r3, #0
 8013818:	f000 8264 	beq.w	8013ce4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013822:	461a      	mov	r2, r3
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013828:	4413      	add	r3, r2
 801382a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013830:	4b84      	ldr	r3, [pc, #528]	@ (8013a44 <tcp_receive+0x26c>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	1ad3      	subs	r3, r2, r3
 8013836:	2b00      	cmp	r3, #0
 8013838:	db1b      	blt.n	8013872 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801383e:	4b81      	ldr	r3, [pc, #516]	@ (8013a44 <tcp_receive+0x26c>)
 8013840:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013842:	429a      	cmp	r2, r3
 8013844:	d106      	bne.n	8013854 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801384a:	4b7f      	ldr	r3, [pc, #508]	@ (8013a48 <tcp_receive+0x270>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	1ad3      	subs	r3, r2, r3
 8013850:	2b00      	cmp	r3, #0
 8013852:	db0e      	blt.n	8013872 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013858:	4b7b      	ldr	r3, [pc, #492]	@ (8013a48 <tcp_receive+0x270>)
 801385a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801385c:	429a      	cmp	r2, r3
 801385e:	d125      	bne.n	80138ac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013860:	4b7a      	ldr	r3, [pc, #488]	@ (8013a4c <tcp_receive+0x274>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	89db      	ldrh	r3, [r3, #14]
 8013866:	b29a      	uxth	r2, r3
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801386e:	429a      	cmp	r2, r3
 8013870:	d91c      	bls.n	80138ac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013872:	4b76      	ldr	r3, [pc, #472]	@ (8013a4c <tcp_receive+0x274>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	89db      	ldrh	r3, [r3, #14]
 8013878:	b29a      	uxth	r2, r3
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801388c:	429a      	cmp	r2, r3
 801388e:	d205      	bcs.n	801389c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801389c:	4b69      	ldr	r3, [pc, #420]	@ (8013a44 <tcp_receive+0x26c>)
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80138a4:	4b68      	ldr	r3, [pc, #416]	@ (8013a48 <tcp_receive+0x270>)
 80138a6:	681a      	ldr	r2, [r3, #0]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80138ac:	4b66      	ldr	r3, [pc, #408]	@ (8013a48 <tcp_receive+0x270>)
 80138ae:	681a      	ldr	r2, [r3, #0]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138b4:	1ad3      	subs	r3, r2, r3
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	dc58      	bgt.n	801396c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80138ba:	4b65      	ldr	r3, [pc, #404]	@ (8013a50 <tcp_receive+0x278>)
 80138bc:	881b      	ldrh	r3, [r3, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d14b      	bne.n	801395a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80138c6:	687a      	ldr	r2, [r7, #4]
 80138c8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80138cc:	4413      	add	r3, r2
 80138ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d142      	bne.n	801395a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80138da:	2b00      	cmp	r3, #0
 80138dc:	db3d      	blt.n	801395a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80138e2:	4b59      	ldr	r3, [pc, #356]	@ (8013a48 <tcp_receive+0x270>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d137      	bne.n	801395a <tcp_receive+0x182>
              found_dupack = 1;
 80138ea:	2301      	movs	r3, #1
 80138ec:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80138f4:	2bff      	cmp	r3, #255	@ 0xff
 80138f6:	d007      	beq.n	8013908 <tcp_receive+0x130>
                ++pcb->dupacks;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80138fe:	3301      	adds	r3, #1
 8013900:	b2da      	uxtb	r2, r3
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801390e:	2b03      	cmp	r3, #3
 8013910:	d91b      	bls.n	801394a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801391c:	4413      	add	r3, r2
 801391e:	b29a      	uxth	r2, r3
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013926:	429a      	cmp	r2, r3
 8013928:	d30a      	bcc.n	8013940 <tcp_receive+0x168>
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013934:	4413      	add	r3, r2
 8013936:	b29a      	uxth	r2, r3
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801393e:	e004      	b.n	801394a <tcp_receive+0x172>
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013946:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013950:	2b02      	cmp	r3, #2
 8013952:	d902      	bls.n	801395a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f001 fee7 	bl	8015728 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801395a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801395c:	2b00      	cmp	r3, #0
 801395e:	f040 8161 	bne.w	8013c24 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2200      	movs	r2, #0
 8013966:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801396a:	e15b      	b.n	8013c24 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801396c:	4b36      	ldr	r3, [pc, #216]	@ (8013a48 <tcp_receive+0x270>)
 801396e:	681a      	ldr	r2, [r3, #0]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013974:	1ad3      	subs	r3, r2, r3
 8013976:	3b01      	subs	r3, #1
 8013978:	2b00      	cmp	r3, #0
 801397a:	f2c0 814e 	blt.w	8013c1a <tcp_receive+0x442>
 801397e:	4b32      	ldr	r3, [pc, #200]	@ (8013a48 <tcp_receive+0x270>)
 8013980:	681a      	ldr	r2, [r3, #0]
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013986:	1ad3      	subs	r3, r2, r3
 8013988:	2b00      	cmp	r3, #0
 801398a:	f300 8146 	bgt.w	8013c1a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	8b5b      	ldrh	r3, [r3, #26]
 8013992:	f003 0304 	and.w	r3, r3, #4
 8013996:	2b00      	cmp	r3, #0
 8013998:	d010      	beq.n	80139bc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	8b5b      	ldrh	r3, [r3, #26]
 801399e:	f023 0304 	bic.w	r3, r3, #4
 80139a2:	b29a      	uxth	r2, r3
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2200      	movs	r2, #0
 80139b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2200      	movs	r2, #0
 80139c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80139ca:	10db      	asrs	r3, r3, #3
 80139cc:	b21b      	sxth	r3, r3
 80139ce:	b29a      	uxth	r2, r3
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	4413      	add	r3, r2
 80139da:	b29b      	uxth	r3, r3
 80139dc:	b21a      	sxth	r2, r3
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80139e4:	4b18      	ldr	r3, [pc, #96]	@ (8013a48 <tcp_receive+0x270>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	b29a      	uxth	r2, r3
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139ee:	b29b      	uxth	r3, r3
 80139f0:	1ad3      	subs	r3, r2, r3
 80139f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2200      	movs	r2, #0
 80139f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80139fc:	4b12      	ldr	r3, [pc, #72]	@ (8013a48 <tcp_receive+0x270>)
 80139fe:	681a      	ldr	r2, [r3, #0]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	7d1b      	ldrb	r3, [r3, #20]
 8013a08:	2b03      	cmp	r3, #3
 8013a0a:	f240 8097 	bls.w	8013b3c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d245      	bcs.n	8013aaa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	8b5b      	ldrh	r3, [r3, #26]
 8013a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d014      	beq.n	8013a54 <tcp_receive+0x27c>
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	e013      	b.n	8013a56 <tcp_receive+0x27e>
 8013a2e:	bf00      	nop
 8013a30:	0801c438 	.word	0x0801c438
 8013a34:	0801c768 	.word	0x0801c768
 8013a38:	0801c484 	.word	0x0801c484
 8013a3c:	0801c784 	.word	0x0801c784
 8013a40:	200274f0 	.word	0x200274f0
 8013a44:	200274e4 	.word	0x200274e4
 8013a48:	200274e8 	.word	0x200274e8
 8013a4c:	200274d4 	.word	0x200274d4
 8013a50:	200274ee 	.word	0x200274ee
 8013a54:	2302      	movs	r3, #2
 8013a56:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013a5a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013a5e:	b29a      	uxth	r2, r3
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013a64:	fb12 f303 	smulbb	r3, r2, r3
 8013a68:	b29b      	uxth	r3, r3
 8013a6a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013a6c:	4293      	cmp	r3, r2
 8013a6e:	bf28      	it	cs
 8013a70:	4613      	movcs	r3, r2
 8013a72:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013a7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013a7c:	4413      	add	r3, r2
 8013a7e:	b29a      	uxth	r2, r3
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d309      	bcc.n	8013a9e <tcp_receive+0x2c6>
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013a90:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013a92:	4413      	add	r3, r2
 8013a94:	b29a      	uxth	r2, r3
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013a9c:	e04e      	b.n	8013b3c <tcp_receive+0x364>
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013aa4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013aa8:	e048      	b.n	8013b3c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013ab0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013ab2:	4413      	add	r3, r2
 8013ab4:	b29a      	uxth	r2, r3
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8013abc:	429a      	cmp	r2, r3
 8013abe:	d309      	bcc.n	8013ad4 <tcp_receive+0x2fc>
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013ac6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013ac8:	4413      	add	r3, r2
 8013aca:	b29a      	uxth	r2, r3
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8013ad2:	e004      	b.n	8013ade <tcp_receive+0x306>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013ada:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d326      	bcc.n	8013b3c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013afa:	1ad3      	subs	r3, r2, r3
 8013afc:	b29a      	uxth	r2, r3
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013b0e:	4413      	add	r3, r2
 8013b10:	b29a      	uxth	r2, r3
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d30a      	bcc.n	8013b32 <tcp_receive+0x35a>
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013b26:	4413      	add	r3, r2
 8013b28:	b29a      	uxth	r2, r3
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013b30:	e004      	b.n	8013b3c <tcp_receive+0x364>
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013b38:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b44:	4a98      	ldr	r2, [pc, #608]	@ (8013da8 <tcp_receive+0x5d0>)
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f7ff fdca 	bl	80136e0 <tcp_free_acked_segments>
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b5a:	4a94      	ldr	r2, [pc, #592]	@ (8013dac <tcp_receive+0x5d4>)
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f7ff fdbf 	bl	80136e0 <tcp_free_acked_segments>
 8013b62:	4602      	mov	r2, r0
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d104      	bne.n	8013b7a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013b76:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013b78:	e002      	b.n	8013b80 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2200      	movs	r2, #0
 8013b84:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d103      	bne.n	8013b96 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2200      	movs	r2, #0
 8013b92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013b9c:	4b84      	ldr	r3, [pc, #528]	@ (8013db0 <tcp_receive+0x5d8>)
 8013b9e:	881b      	ldrh	r3, [r3, #0]
 8013ba0:	4413      	add	r3, r2
 8013ba2:	b29a      	uxth	r2, r3
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	8b5b      	ldrh	r3, [r3, #26]
 8013bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d035      	beq.n	8013c22 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d118      	bne.n	8013bf0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d00c      	beq.n	8013be0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bce:	68db      	ldr	r3, [r3, #12]
 8013bd0:	685b      	ldr	r3, [r3, #4]
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7fb f92a 	bl	800ee2c <lwip_htonl>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	dc20      	bgt.n	8013c22 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	8b5b      	ldrh	r3, [r3, #26]
 8013be4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013be8:	b29a      	uxth	r2, r3
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013bee:	e018      	b.n	8013c22 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013bf8:	68db      	ldr	r3, [r3, #12]
 8013bfa:	685b      	ldr	r3, [r3, #4]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7fb f915 	bl	800ee2c <lwip_htonl>
 8013c02:	4603      	mov	r3, r0
 8013c04:	1ae3      	subs	r3, r4, r3
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	dc0b      	bgt.n	8013c22 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	8b5b      	ldrh	r3, [r3, #26]
 8013c0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013c12:	b29a      	uxth	r2, r3
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c18:	e003      	b.n	8013c22 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	f001 ff70 	bl	8015b00 <tcp_send_empty_ack>
 8013c20:	e000      	b.n	8013c24 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c22:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d05b      	beq.n	8013ce4 <tcp_receive+0x50c>
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c30:	4b60      	ldr	r3, [pc, #384]	@ (8013db4 <tcp_receive+0x5dc>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	1ad3      	subs	r3, r2, r3
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	da54      	bge.n	8013ce4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8013db8 <tcp_receive+0x5e0>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	b29a      	uxth	r2, r3
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c44:	b29b      	uxth	r3, r3
 8013c46:	1ad3      	subs	r3, r2, r3
 8013c48:	b29b      	uxth	r3, r3
 8013c4a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013c4e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013c58:	10db      	asrs	r3, r3, #3
 8013c5a:	b21b      	sxth	r3, r3
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	1ad3      	subs	r3, r2, r3
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013c72:	4413      	add	r3, r2
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	b21a      	sxth	r2, r3
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8013c7c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	da05      	bge.n	8013c90 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013c84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013c88:	425b      	negs	r3, r3
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013c90:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013c9a:	109b      	asrs	r3, r3, #2
 8013c9c:	b21b      	sxth	r3, r3
 8013c9e:	b29b      	uxth	r3, r3
 8013ca0:	1ad3      	subs	r3, r2, r3
 8013ca2:	b29b      	uxth	r3, r3
 8013ca4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013cae:	b29a      	uxth	r2, r3
 8013cb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013cb4:	4413      	add	r3, r2
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	b21a      	sxth	r2, r3
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013cc4:	10db      	asrs	r3, r3, #3
 8013cc6:	b21b      	sxth	r3, r3
 8013cc8:	b29a      	uxth	r2, r3
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013cd0:	b29b      	uxth	r3, r3
 8013cd2:	4413      	add	r3, r2
 8013cd4:	b29b      	uxth	r3, r3
 8013cd6:	b21a      	sxth	r2, r3
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013ce4:	4b35      	ldr	r3, [pc, #212]	@ (8013dbc <tcp_receive+0x5e4>)
 8013ce6:	881b      	ldrh	r3, [r3, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	f000 84df 	beq.w	80146ac <tcp_receive+0xed4>
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	7d1b      	ldrb	r3, [r3, #20]
 8013cf2:	2b06      	cmp	r3, #6
 8013cf4:	f200 84da 	bhi.w	80146ac <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013cfc:	4b30      	ldr	r3, [pc, #192]	@ (8013dc0 <tcp_receive+0x5e8>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	1ad3      	subs	r3, r2, r3
 8013d02:	3b01      	subs	r3, #1
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	f2c0 808f 	blt.w	8013e28 <tcp_receive+0x650>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8013dbc <tcp_receive+0x5e4>)
 8013d10:	881b      	ldrh	r3, [r3, #0]
 8013d12:	4619      	mov	r1, r3
 8013d14:	4b2a      	ldr	r3, [pc, #168]	@ (8013dc0 <tcp_receive+0x5e8>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	440b      	add	r3, r1
 8013d1a:	1ad3      	subs	r3, r2, r3
 8013d1c:	3301      	adds	r3, #1
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	f300 8082 	bgt.w	8013e28 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013d24:	4b27      	ldr	r3, [pc, #156]	@ (8013dc4 <tcp_receive+0x5ec>)
 8013d26:	685b      	ldr	r3, [r3, #4]
 8013d28:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d2e:	4b24      	ldr	r3, [pc, #144]	@ (8013dc0 <tcp_receive+0x5e8>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	1ad3      	subs	r3, r2, r3
 8013d34:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013d36:	4b23      	ldr	r3, [pc, #140]	@ (8013dc4 <tcp_receive+0x5ec>)
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d106      	bne.n	8013d4c <tcp_receive+0x574>
 8013d3e:	4b22      	ldr	r3, [pc, #136]	@ (8013dc8 <tcp_receive+0x5f0>)
 8013d40:	f240 5294 	movw	r2, #1428	@ 0x594
 8013d44:	4921      	ldr	r1, [pc, #132]	@ (8013dcc <tcp_receive+0x5f4>)
 8013d46:	4822      	ldr	r0, [pc, #136]	@ (8013dd0 <tcp_receive+0x5f8>)
 8013d48:	f006 f8c8 	bl	8019edc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d4e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8013d52:	4293      	cmp	r3, r2
 8013d54:	d906      	bls.n	8013d64 <tcp_receive+0x58c>
 8013d56:	4b1c      	ldr	r3, [pc, #112]	@ (8013dc8 <tcp_receive+0x5f0>)
 8013d58:	f240 5295 	movw	r2, #1429	@ 0x595
 8013d5c:	491d      	ldr	r1, [pc, #116]	@ (8013dd4 <tcp_receive+0x5fc>)
 8013d5e:	481c      	ldr	r0, [pc, #112]	@ (8013dd0 <tcp_receive+0x5f8>)
 8013d60:	f006 f8bc 	bl	8019edc <iprintf>
      off = (u16_t)off32;
 8013d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013d6a:	4b16      	ldr	r3, [pc, #88]	@ (8013dc4 <tcp_receive+0x5ec>)
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	891b      	ldrh	r3, [r3, #8]
 8013d70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d906      	bls.n	8013d86 <tcp_receive+0x5ae>
 8013d78:	4b13      	ldr	r3, [pc, #76]	@ (8013dc8 <tcp_receive+0x5f0>)
 8013d7a:	f240 5297 	movw	r2, #1431	@ 0x597
 8013d7e:	4916      	ldr	r1, [pc, #88]	@ (8013dd8 <tcp_receive+0x600>)
 8013d80:	4813      	ldr	r0, [pc, #76]	@ (8013dd0 <tcp_receive+0x5f8>)
 8013d82:	f006 f8ab 	bl	8019edc <iprintf>
      inseg.len -= off;
 8013d86:	4b0f      	ldr	r3, [pc, #60]	@ (8013dc4 <tcp_receive+0x5ec>)
 8013d88:	891a      	ldrh	r2, [r3, #8]
 8013d8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013d8e:	1ad3      	subs	r3, r2, r3
 8013d90:	b29a      	uxth	r2, r3
 8013d92:	4b0c      	ldr	r3, [pc, #48]	@ (8013dc4 <tcp_receive+0x5ec>)
 8013d94:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013d96:	4b0b      	ldr	r3, [pc, #44]	@ (8013dc4 <tcp_receive+0x5ec>)
 8013d98:	685b      	ldr	r3, [r3, #4]
 8013d9a:	891a      	ldrh	r2, [r3, #8]
 8013d9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013da0:	1ad3      	subs	r3, r2, r3
 8013da2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8013da4:	e02a      	b.n	8013dfc <tcp_receive+0x624>
 8013da6:	bf00      	nop
 8013da8:	0801c7a0 	.word	0x0801c7a0
 8013dac:	0801c7a8 	.word	0x0801c7a8
 8013db0:	200274ec 	.word	0x200274ec
 8013db4:	200274e8 	.word	0x200274e8
 8013db8:	200274ac 	.word	0x200274ac
 8013dbc:	200274ee 	.word	0x200274ee
 8013dc0:	200274e4 	.word	0x200274e4
 8013dc4:	200274c4 	.word	0x200274c4
 8013dc8:	0801c438 	.word	0x0801c438
 8013dcc:	0801c7b0 	.word	0x0801c7b0
 8013dd0:	0801c484 	.word	0x0801c484
 8013dd4:	0801c7c0 	.word	0x0801c7c0
 8013dd8:	0801c7d0 	.word	0x0801c7d0
        off -= p->len;
 8013ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dde:	895b      	ldrh	r3, [r3, #10]
 8013de0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013de4:	1ad3      	subs	r3, r2, r3
 8013de6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013dee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013df2:	2200      	movs	r2, #0
 8013df4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8013dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dfe:	895b      	ldrh	r3, [r3, #10]
 8013e00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d8e9      	bhi.n	8013ddc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013e08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013e0c:	4619      	mov	r1, r3
 8013e0e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013e10:	f7fc fb5e 	bl	80104d0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e18:	4a90      	ldr	r2, [pc, #576]	@ (801405c <tcp_receive+0x884>)
 8013e1a:	6013      	str	r3, [r2, #0]
 8013e1c:	4b90      	ldr	r3, [pc, #576]	@ (8014060 <tcp_receive+0x888>)
 8013e1e:	68db      	ldr	r3, [r3, #12]
 8013e20:	4a8e      	ldr	r2, [pc, #568]	@ (801405c <tcp_receive+0x884>)
 8013e22:	6812      	ldr	r2, [r2, #0]
 8013e24:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013e26:	e00d      	b.n	8013e44 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013e28:	4b8c      	ldr	r3, [pc, #560]	@ (801405c <tcp_receive+0x884>)
 8013e2a:	681a      	ldr	r2, [r3, #0]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e30:	1ad3      	subs	r3, r2, r3
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	da06      	bge.n	8013e44 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	8b5b      	ldrh	r3, [r3, #26]
 8013e3a:	f043 0302 	orr.w	r3, r3, #2
 8013e3e:	b29a      	uxth	r2, r3
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013e44:	4b85      	ldr	r3, [pc, #532]	@ (801405c <tcp_receive+0x884>)
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e4c:	1ad3      	subs	r3, r2, r3
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	f2c0 8427 	blt.w	80146a2 <tcp_receive+0xeca>
 8013e54:	4b81      	ldr	r3, [pc, #516]	@ (801405c <tcp_receive+0x884>)
 8013e56:	681a      	ldr	r2, [r3, #0]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e5c:	6879      	ldr	r1, [r7, #4]
 8013e5e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013e60:	440b      	add	r3, r1
 8013e62:	1ad3      	subs	r3, r2, r3
 8013e64:	3301      	adds	r3, #1
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	f300 841b 	bgt.w	80146a2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e70:	4b7a      	ldr	r3, [pc, #488]	@ (801405c <tcp_receive+0x884>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	429a      	cmp	r2, r3
 8013e76:	f040 8298 	bne.w	80143aa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013e7a:	4b79      	ldr	r3, [pc, #484]	@ (8014060 <tcp_receive+0x888>)
 8013e7c:	891c      	ldrh	r4, [r3, #8]
 8013e7e:	4b78      	ldr	r3, [pc, #480]	@ (8014060 <tcp_receive+0x888>)
 8013e80:	68db      	ldr	r3, [r3, #12]
 8013e82:	899b      	ldrh	r3, [r3, #12]
 8013e84:	b29b      	uxth	r3, r3
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7fa ffba 	bl	800ee00 <lwip_htons>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	b2db      	uxtb	r3, r3
 8013e90:	f003 0303 	and.w	r3, r3, #3
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d001      	beq.n	8013e9c <tcp_receive+0x6c4>
 8013e98:	2301      	movs	r3, #1
 8013e9a:	e000      	b.n	8013e9e <tcp_receive+0x6c6>
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	4423      	add	r3, r4
 8013ea0:	b29a      	uxth	r2, r3
 8013ea2:	4b70      	ldr	r3, [pc, #448]	@ (8014064 <tcp_receive+0x88c>)
 8013ea4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8014064 <tcp_receive+0x88c>)
 8013eac:	881b      	ldrh	r3, [r3, #0]
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d274      	bcs.n	8013f9c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013eb2:	4b6b      	ldr	r3, [pc, #428]	@ (8014060 <tcp_receive+0x888>)
 8013eb4:	68db      	ldr	r3, [r3, #12]
 8013eb6:	899b      	ldrh	r3, [r3, #12]
 8013eb8:	b29b      	uxth	r3, r3
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f7fa ffa0 	bl	800ee00 <lwip_htons>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	b2db      	uxtb	r3, r3
 8013ec4:	f003 0301 	and.w	r3, r3, #1
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d01e      	beq.n	8013f0a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013ecc:	4b64      	ldr	r3, [pc, #400]	@ (8014060 <tcp_receive+0x888>)
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	899b      	ldrh	r3, [r3, #12]
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	b21b      	sxth	r3, r3
 8013ed6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013eda:	b21c      	sxth	r4, r3
 8013edc:	4b60      	ldr	r3, [pc, #384]	@ (8014060 <tcp_receive+0x888>)
 8013ede:	68db      	ldr	r3, [r3, #12]
 8013ee0:	899b      	ldrh	r3, [r3, #12]
 8013ee2:	b29b      	uxth	r3, r3
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7fa ff8b 	bl	800ee00 <lwip_htons>
 8013eea:	4603      	mov	r3, r0
 8013eec:	b2db      	uxtb	r3, r3
 8013eee:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7fa ff83 	bl	800ee00 <lwip_htons>
 8013efa:	4603      	mov	r3, r0
 8013efc:	b21b      	sxth	r3, r3
 8013efe:	4323      	orrs	r3, r4
 8013f00:	b21a      	sxth	r2, r3
 8013f02:	4b57      	ldr	r3, [pc, #348]	@ (8014060 <tcp_receive+0x888>)
 8013f04:	68db      	ldr	r3, [r3, #12]
 8013f06:	b292      	uxth	r2, r2
 8013f08:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013f0e:	4b54      	ldr	r3, [pc, #336]	@ (8014060 <tcp_receive+0x888>)
 8013f10:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013f12:	4b53      	ldr	r3, [pc, #332]	@ (8014060 <tcp_receive+0x888>)
 8013f14:	68db      	ldr	r3, [r3, #12]
 8013f16:	899b      	ldrh	r3, [r3, #12]
 8013f18:	b29b      	uxth	r3, r3
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7fa ff70 	bl	800ee00 <lwip_htons>
 8013f20:	4603      	mov	r3, r0
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	f003 0302 	and.w	r3, r3, #2
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d005      	beq.n	8013f38 <tcp_receive+0x760>
            inseg.len -= 1;
 8013f2c:	4b4c      	ldr	r3, [pc, #304]	@ (8014060 <tcp_receive+0x888>)
 8013f2e:	891b      	ldrh	r3, [r3, #8]
 8013f30:	3b01      	subs	r3, #1
 8013f32:	b29a      	uxth	r2, r3
 8013f34:	4b4a      	ldr	r3, [pc, #296]	@ (8014060 <tcp_receive+0x888>)
 8013f36:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013f38:	4b49      	ldr	r3, [pc, #292]	@ (8014060 <tcp_receive+0x888>)
 8013f3a:	685b      	ldr	r3, [r3, #4]
 8013f3c:	4a48      	ldr	r2, [pc, #288]	@ (8014060 <tcp_receive+0x888>)
 8013f3e:	8912      	ldrh	r2, [r2, #8]
 8013f40:	4611      	mov	r1, r2
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7fc f9c4 	bl	80102d0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013f48:	4b45      	ldr	r3, [pc, #276]	@ (8014060 <tcp_receive+0x888>)
 8013f4a:	891c      	ldrh	r4, [r3, #8]
 8013f4c:	4b44      	ldr	r3, [pc, #272]	@ (8014060 <tcp_receive+0x888>)
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	899b      	ldrh	r3, [r3, #12]
 8013f52:	b29b      	uxth	r3, r3
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fa ff53 	bl	800ee00 <lwip_htons>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	b2db      	uxtb	r3, r3
 8013f5e:	f003 0303 	and.w	r3, r3, #3
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d001      	beq.n	8013f6a <tcp_receive+0x792>
 8013f66:	2301      	movs	r3, #1
 8013f68:	e000      	b.n	8013f6c <tcp_receive+0x794>
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	4423      	add	r3, r4
 8013f6e:	b29a      	uxth	r2, r3
 8013f70:	4b3c      	ldr	r3, [pc, #240]	@ (8014064 <tcp_receive+0x88c>)
 8013f72:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013f74:	4b3b      	ldr	r3, [pc, #236]	@ (8014064 <tcp_receive+0x88c>)
 8013f76:	881b      	ldrh	r3, [r3, #0]
 8013f78:	461a      	mov	r2, r3
 8013f7a:	4b38      	ldr	r3, [pc, #224]	@ (801405c <tcp_receive+0x884>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	441a      	add	r2, r3
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f84:	6879      	ldr	r1, [r7, #4]
 8013f86:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013f88:	440b      	add	r3, r1
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d006      	beq.n	8013f9c <tcp_receive+0x7c4>
 8013f8e:	4b36      	ldr	r3, [pc, #216]	@ (8014068 <tcp_receive+0x890>)
 8013f90:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8013f94:	4935      	ldr	r1, [pc, #212]	@ (801406c <tcp_receive+0x894>)
 8013f96:	4836      	ldr	r0, [pc, #216]	@ (8014070 <tcp_receive+0x898>)
 8013f98:	f005 ffa0 	bl	8019edc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	f000 80e6 	beq.w	8014172 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8014060 <tcp_receive+0x888>)
 8013fa8:	68db      	ldr	r3, [r3, #12]
 8013faa:	899b      	ldrh	r3, [r3, #12]
 8013fac:	b29b      	uxth	r3, r3
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7fa ff26 	bl	800ee00 <lwip_htons>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	b2db      	uxtb	r3, r3
 8013fb8:	f003 0301 	and.w	r3, r3, #1
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d010      	beq.n	8013fe2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013fc0:	e00a      	b.n	8013fd8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fc6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fcc:	681a      	ldr	r2, [r3, #0]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8013fd2:	68f8      	ldr	r0, [r7, #12]
 8013fd4:	f7fd fd93 	bl	8011afe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d1f0      	bne.n	8013fc2 <tcp_receive+0x7ea>
 8013fe0:	e0c7      	b.n	8014172 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013fe8:	e051      	b.n	801408e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	899b      	ldrh	r3, [r3, #12]
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fa ff04 	bl	800ee00 <lwip_htons>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	b2db      	uxtb	r3, r3
 8013ffc:	f003 0301 	and.w	r3, r3, #1
 8014000:	2b00      	cmp	r3, #0
 8014002:	d03c      	beq.n	801407e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014004:	4b16      	ldr	r3, [pc, #88]	@ (8014060 <tcp_receive+0x888>)
 8014006:	68db      	ldr	r3, [r3, #12]
 8014008:	899b      	ldrh	r3, [r3, #12]
 801400a:	b29b      	uxth	r3, r3
 801400c:	4618      	mov	r0, r3
 801400e:	f7fa fef7 	bl	800ee00 <lwip_htons>
 8014012:	4603      	mov	r3, r0
 8014014:	b2db      	uxtb	r3, r3
 8014016:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801401a:	2b00      	cmp	r3, #0
 801401c:	d12f      	bne.n	801407e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801401e:	4b10      	ldr	r3, [pc, #64]	@ (8014060 <tcp_receive+0x888>)
 8014020:	68db      	ldr	r3, [r3, #12]
 8014022:	899b      	ldrh	r3, [r3, #12]
 8014024:	b29c      	uxth	r4, r3
 8014026:	2001      	movs	r0, #1
 8014028:	f7fa feea 	bl	800ee00 <lwip_htons>
 801402c:	4603      	mov	r3, r0
 801402e:	461a      	mov	r2, r3
 8014030:	4b0b      	ldr	r3, [pc, #44]	@ (8014060 <tcp_receive+0x888>)
 8014032:	68db      	ldr	r3, [r3, #12]
 8014034:	4322      	orrs	r2, r4
 8014036:	b292      	uxth	r2, r2
 8014038:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801403a:	4b09      	ldr	r3, [pc, #36]	@ (8014060 <tcp_receive+0x888>)
 801403c:	891c      	ldrh	r4, [r3, #8]
 801403e:	4b08      	ldr	r3, [pc, #32]	@ (8014060 <tcp_receive+0x888>)
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	899b      	ldrh	r3, [r3, #12]
 8014044:	b29b      	uxth	r3, r3
 8014046:	4618      	mov	r0, r3
 8014048:	f7fa feda 	bl	800ee00 <lwip_htons>
 801404c:	4603      	mov	r3, r0
 801404e:	b2db      	uxtb	r3, r3
 8014050:	f003 0303 	and.w	r3, r3, #3
 8014054:	2b00      	cmp	r3, #0
 8014056:	d00d      	beq.n	8014074 <tcp_receive+0x89c>
 8014058:	2301      	movs	r3, #1
 801405a:	e00c      	b.n	8014076 <tcp_receive+0x89e>
 801405c:	200274e4 	.word	0x200274e4
 8014060:	200274c4 	.word	0x200274c4
 8014064:	200274ee 	.word	0x200274ee
 8014068:	0801c438 	.word	0x0801c438
 801406c:	0801c7e0 	.word	0x0801c7e0
 8014070:	0801c484 	.word	0x0801c484
 8014074:	2300      	movs	r3, #0
 8014076:	4423      	add	r3, r4
 8014078:	b29a      	uxth	r2, r3
 801407a:	4b98      	ldr	r3, [pc, #608]	@ (80142dc <tcp_receive+0xb04>)
 801407c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801407e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014080:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8014088:	6938      	ldr	r0, [r7, #16]
 801408a:	f7fd fd38 	bl	8011afe <tcp_seg_free>
            while (next &&
 801408e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014090:	2b00      	cmp	r3, #0
 8014092:	d00e      	beq.n	80140b2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014094:	4b91      	ldr	r3, [pc, #580]	@ (80142dc <tcp_receive+0xb04>)
 8014096:	881b      	ldrh	r3, [r3, #0]
 8014098:	461a      	mov	r2, r3
 801409a:	4b91      	ldr	r3, [pc, #580]	@ (80142e0 <tcp_receive+0xb08>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	441a      	add	r2, r3
 80140a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140a2:	68db      	ldr	r3, [r3, #12]
 80140a4:	685b      	ldr	r3, [r3, #4]
 80140a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80140a8:	8909      	ldrh	r1, [r1, #8]
 80140aa:	440b      	add	r3, r1
 80140ac:	1ad3      	subs	r3, r2, r3
            while (next &&
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	da9b      	bge.n	8013fea <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80140b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d059      	beq.n	801416c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80140b8:	4b88      	ldr	r3, [pc, #544]	@ (80142dc <tcp_receive+0xb04>)
 80140ba:	881b      	ldrh	r3, [r3, #0]
 80140bc:	461a      	mov	r2, r3
 80140be:	4b88      	ldr	r3, [pc, #544]	@ (80142e0 <tcp_receive+0xb08>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	441a      	add	r2, r3
 80140c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140c6:	68db      	ldr	r3, [r3, #12]
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	1ad3      	subs	r3, r2, r3
            if (next &&
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	dd4d      	ble.n	801416c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80140d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140d2:	68db      	ldr	r3, [r3, #12]
 80140d4:	685b      	ldr	r3, [r3, #4]
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	4b81      	ldr	r3, [pc, #516]	@ (80142e0 <tcp_receive+0xb08>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	b29b      	uxth	r3, r3
 80140de:	1ad3      	subs	r3, r2, r3
 80140e0:	b29a      	uxth	r2, r3
 80140e2:	4b80      	ldr	r3, [pc, #512]	@ (80142e4 <tcp_receive+0xb0c>)
 80140e4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80140e6:	4b7f      	ldr	r3, [pc, #508]	@ (80142e4 <tcp_receive+0xb0c>)
 80140e8:	68db      	ldr	r3, [r3, #12]
 80140ea:	899b      	ldrh	r3, [r3, #12]
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7fa fe86 	bl	800ee00 <lwip_htons>
 80140f4:	4603      	mov	r3, r0
 80140f6:	b2db      	uxtb	r3, r3
 80140f8:	f003 0302 	and.w	r3, r3, #2
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d005      	beq.n	801410c <tcp_receive+0x934>
                inseg.len -= 1;
 8014100:	4b78      	ldr	r3, [pc, #480]	@ (80142e4 <tcp_receive+0xb0c>)
 8014102:	891b      	ldrh	r3, [r3, #8]
 8014104:	3b01      	subs	r3, #1
 8014106:	b29a      	uxth	r2, r3
 8014108:	4b76      	ldr	r3, [pc, #472]	@ (80142e4 <tcp_receive+0xb0c>)
 801410a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801410c:	4b75      	ldr	r3, [pc, #468]	@ (80142e4 <tcp_receive+0xb0c>)
 801410e:	685b      	ldr	r3, [r3, #4]
 8014110:	4a74      	ldr	r2, [pc, #464]	@ (80142e4 <tcp_receive+0xb0c>)
 8014112:	8912      	ldrh	r2, [r2, #8]
 8014114:	4611      	mov	r1, r2
 8014116:	4618      	mov	r0, r3
 8014118:	f7fc f8da 	bl	80102d0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801411c:	4b71      	ldr	r3, [pc, #452]	@ (80142e4 <tcp_receive+0xb0c>)
 801411e:	891c      	ldrh	r4, [r3, #8]
 8014120:	4b70      	ldr	r3, [pc, #448]	@ (80142e4 <tcp_receive+0xb0c>)
 8014122:	68db      	ldr	r3, [r3, #12]
 8014124:	899b      	ldrh	r3, [r3, #12]
 8014126:	b29b      	uxth	r3, r3
 8014128:	4618      	mov	r0, r3
 801412a:	f7fa fe69 	bl	800ee00 <lwip_htons>
 801412e:	4603      	mov	r3, r0
 8014130:	b2db      	uxtb	r3, r3
 8014132:	f003 0303 	and.w	r3, r3, #3
 8014136:	2b00      	cmp	r3, #0
 8014138:	d001      	beq.n	801413e <tcp_receive+0x966>
 801413a:	2301      	movs	r3, #1
 801413c:	e000      	b.n	8014140 <tcp_receive+0x968>
 801413e:	2300      	movs	r3, #0
 8014140:	4423      	add	r3, r4
 8014142:	b29a      	uxth	r2, r3
 8014144:	4b65      	ldr	r3, [pc, #404]	@ (80142dc <tcp_receive+0xb04>)
 8014146:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014148:	4b64      	ldr	r3, [pc, #400]	@ (80142dc <tcp_receive+0xb04>)
 801414a:	881b      	ldrh	r3, [r3, #0]
 801414c:	461a      	mov	r2, r3
 801414e:	4b64      	ldr	r3, [pc, #400]	@ (80142e0 <tcp_receive+0xb08>)
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	441a      	add	r2, r3
 8014154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014156:	68db      	ldr	r3, [r3, #12]
 8014158:	685b      	ldr	r3, [r3, #4]
 801415a:	429a      	cmp	r2, r3
 801415c:	d006      	beq.n	801416c <tcp_receive+0x994>
 801415e:	4b62      	ldr	r3, [pc, #392]	@ (80142e8 <tcp_receive+0xb10>)
 8014160:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8014164:	4961      	ldr	r1, [pc, #388]	@ (80142ec <tcp_receive+0xb14>)
 8014166:	4862      	ldr	r0, [pc, #392]	@ (80142f0 <tcp_receive+0xb18>)
 8014168:	f005 feb8 	bl	8019edc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014170:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014172:	4b5a      	ldr	r3, [pc, #360]	@ (80142dc <tcp_receive+0xb04>)
 8014174:	881b      	ldrh	r3, [r3, #0]
 8014176:	461a      	mov	r2, r3
 8014178:	4b59      	ldr	r3, [pc, #356]	@ (80142e0 <tcp_receive+0xb08>)
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	441a      	add	r2, r3
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014186:	4b55      	ldr	r3, [pc, #340]	@ (80142dc <tcp_receive+0xb04>)
 8014188:	881b      	ldrh	r3, [r3, #0]
 801418a:	429a      	cmp	r2, r3
 801418c:	d206      	bcs.n	801419c <tcp_receive+0x9c4>
 801418e:	4b56      	ldr	r3, [pc, #344]	@ (80142e8 <tcp_receive+0xb10>)
 8014190:	f240 6207 	movw	r2, #1543	@ 0x607
 8014194:	4957      	ldr	r1, [pc, #348]	@ (80142f4 <tcp_receive+0xb1c>)
 8014196:	4856      	ldr	r0, [pc, #344]	@ (80142f0 <tcp_receive+0xb18>)
 8014198:	f005 fea0 	bl	8019edc <iprintf>
        pcb->rcv_wnd -= tcplen;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80141a0:	4b4e      	ldr	r3, [pc, #312]	@ (80142dc <tcp_receive+0xb04>)
 80141a2:	881b      	ldrh	r3, [r3, #0]
 80141a4:	1ad3      	subs	r3, r2, r3
 80141a6:	b29a      	uxth	r2, r3
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f7fc ffc5 	bl	801113c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80141b2:	4b4c      	ldr	r3, [pc, #304]	@ (80142e4 <tcp_receive+0xb0c>)
 80141b4:	685b      	ldr	r3, [r3, #4]
 80141b6:	891b      	ldrh	r3, [r3, #8]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d006      	beq.n	80141ca <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80141bc:	4b49      	ldr	r3, [pc, #292]	@ (80142e4 <tcp_receive+0xb0c>)
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	4a4d      	ldr	r2, [pc, #308]	@ (80142f8 <tcp_receive+0xb20>)
 80141c2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80141c4:	4b47      	ldr	r3, [pc, #284]	@ (80142e4 <tcp_receive+0xb0c>)
 80141c6:	2200      	movs	r2, #0
 80141c8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80141ca:	4b46      	ldr	r3, [pc, #280]	@ (80142e4 <tcp_receive+0xb0c>)
 80141cc:	68db      	ldr	r3, [r3, #12]
 80141ce:	899b      	ldrh	r3, [r3, #12]
 80141d0:	b29b      	uxth	r3, r3
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7fa fe14 	bl	800ee00 <lwip_htons>
 80141d8:	4603      	mov	r3, r0
 80141da:	b2db      	uxtb	r3, r3
 80141dc:	f003 0301 	and.w	r3, r3, #1
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	f000 80b8 	beq.w	8014356 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80141e6:	4b45      	ldr	r3, [pc, #276]	@ (80142fc <tcp_receive+0xb24>)
 80141e8:	781b      	ldrb	r3, [r3, #0]
 80141ea:	f043 0320 	orr.w	r3, r3, #32
 80141ee:	b2da      	uxtb	r2, r3
 80141f0:	4b42      	ldr	r3, [pc, #264]	@ (80142fc <tcp_receive+0xb24>)
 80141f2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80141f4:	e0af      	b.n	8014356 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80141fa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014200:	68db      	ldr	r3, [r3, #12]
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	4a36      	ldr	r2, [pc, #216]	@ (80142e0 <tcp_receive+0xb08>)
 8014206:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	891b      	ldrh	r3, [r3, #8]
 801420c:	461c      	mov	r4, r3
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	68db      	ldr	r3, [r3, #12]
 8014212:	899b      	ldrh	r3, [r3, #12]
 8014214:	b29b      	uxth	r3, r3
 8014216:	4618      	mov	r0, r3
 8014218:	f7fa fdf2 	bl	800ee00 <lwip_htons>
 801421c:	4603      	mov	r3, r0
 801421e:	b2db      	uxtb	r3, r3
 8014220:	f003 0303 	and.w	r3, r3, #3
 8014224:	2b00      	cmp	r3, #0
 8014226:	d001      	beq.n	801422c <tcp_receive+0xa54>
 8014228:	2301      	movs	r3, #1
 801422a:	e000      	b.n	801422e <tcp_receive+0xa56>
 801422c:	2300      	movs	r3, #0
 801422e:	191a      	adds	r2, r3, r4
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014234:	441a      	add	r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801423e:	461c      	mov	r4, r3
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	891b      	ldrh	r3, [r3, #8]
 8014244:	461d      	mov	r5, r3
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	68db      	ldr	r3, [r3, #12]
 801424a:	899b      	ldrh	r3, [r3, #12]
 801424c:	b29b      	uxth	r3, r3
 801424e:	4618      	mov	r0, r3
 8014250:	f7fa fdd6 	bl	800ee00 <lwip_htons>
 8014254:	4603      	mov	r3, r0
 8014256:	b2db      	uxtb	r3, r3
 8014258:	f003 0303 	and.w	r3, r3, #3
 801425c:	2b00      	cmp	r3, #0
 801425e:	d001      	beq.n	8014264 <tcp_receive+0xa8c>
 8014260:	2301      	movs	r3, #1
 8014262:	e000      	b.n	8014266 <tcp_receive+0xa8e>
 8014264:	2300      	movs	r3, #0
 8014266:	442b      	add	r3, r5
 8014268:	429c      	cmp	r4, r3
 801426a:	d206      	bcs.n	801427a <tcp_receive+0xaa2>
 801426c:	4b1e      	ldr	r3, [pc, #120]	@ (80142e8 <tcp_receive+0xb10>)
 801426e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8014272:	4923      	ldr	r1, [pc, #140]	@ (8014300 <tcp_receive+0xb28>)
 8014274:	481e      	ldr	r0, [pc, #120]	@ (80142f0 <tcp_receive+0xb18>)
 8014276:	f005 fe31 	bl	8019edc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	891b      	ldrh	r3, [r3, #8]
 801427e:	461c      	mov	r4, r3
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	68db      	ldr	r3, [r3, #12]
 8014284:	899b      	ldrh	r3, [r3, #12]
 8014286:	b29b      	uxth	r3, r3
 8014288:	4618      	mov	r0, r3
 801428a:	f7fa fdb9 	bl	800ee00 <lwip_htons>
 801428e:	4603      	mov	r3, r0
 8014290:	b2db      	uxtb	r3, r3
 8014292:	f003 0303 	and.w	r3, r3, #3
 8014296:	2b00      	cmp	r3, #0
 8014298:	d001      	beq.n	801429e <tcp_receive+0xac6>
 801429a:	2301      	movs	r3, #1
 801429c:	e000      	b.n	80142a0 <tcp_receive+0xac8>
 801429e:	2300      	movs	r3, #0
 80142a0:	1919      	adds	r1, r3, r4
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80142a6:	b28b      	uxth	r3, r1
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	b29a      	uxth	r2, r3
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f7fc ff43 	bl	801113c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	891b      	ldrh	r3, [r3, #8]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d028      	beq.n	8014312 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80142c0:	4b0d      	ldr	r3, [pc, #52]	@ (80142f8 <tcp_receive+0xb20>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d01d      	beq.n	8014304 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80142c8:	4b0b      	ldr	r3, [pc, #44]	@ (80142f8 <tcp_receive+0xb20>)
 80142ca:	681a      	ldr	r2, [r3, #0]
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	685b      	ldr	r3, [r3, #4]
 80142d0:	4619      	mov	r1, r3
 80142d2:	4610      	mov	r0, r2
 80142d4:	f7fc fa50 	bl	8010778 <pbuf_cat>
 80142d8:	e018      	b.n	801430c <tcp_receive+0xb34>
 80142da:	bf00      	nop
 80142dc:	200274ee 	.word	0x200274ee
 80142e0:	200274e4 	.word	0x200274e4
 80142e4:	200274c4 	.word	0x200274c4
 80142e8:	0801c438 	.word	0x0801c438
 80142ec:	0801c818 	.word	0x0801c818
 80142f0:	0801c484 	.word	0x0801c484
 80142f4:	0801c854 	.word	0x0801c854
 80142f8:	200274f4 	.word	0x200274f4
 80142fc:	200274f1 	.word	0x200274f1
 8014300:	0801c874 	.word	0x0801c874
            } else {
              recv_data = cseg->p;
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	685b      	ldr	r3, [r3, #4]
 8014308:	4a70      	ldr	r2, [pc, #448]	@ (80144cc <tcp_receive+0xcf4>)
 801430a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	2200      	movs	r2, #0
 8014310:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	68db      	ldr	r3, [r3, #12]
 8014316:	899b      	ldrh	r3, [r3, #12]
 8014318:	b29b      	uxth	r3, r3
 801431a:	4618      	mov	r0, r3
 801431c:	f7fa fd70 	bl	800ee00 <lwip_htons>
 8014320:	4603      	mov	r3, r0
 8014322:	b2db      	uxtb	r3, r3
 8014324:	f003 0301 	and.w	r3, r3, #1
 8014328:	2b00      	cmp	r3, #0
 801432a:	d00d      	beq.n	8014348 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801432c:	4b68      	ldr	r3, [pc, #416]	@ (80144d0 <tcp_receive+0xcf8>)
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	f043 0320 	orr.w	r3, r3, #32
 8014334:	b2da      	uxtb	r2, r3
 8014336:	4b66      	ldr	r3, [pc, #408]	@ (80144d0 <tcp_receive+0xcf8>)
 8014338:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	7d1b      	ldrb	r3, [r3, #20]
 801433e:	2b04      	cmp	r3, #4
 8014340:	d102      	bne.n	8014348 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2207      	movs	r2, #7
 8014346:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	681a      	ldr	r2, [r3, #0]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8014350:	68b8      	ldr	r0, [r7, #8]
 8014352:	f7fd fbd4 	bl	8011afe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801435a:	2b00      	cmp	r3, #0
 801435c:	d008      	beq.n	8014370 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014362:	68db      	ldr	r3, [r3, #12]
 8014364:	685a      	ldr	r2, [r3, #4]
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801436a:	429a      	cmp	r2, r3
 801436c:	f43f af43 	beq.w	80141f6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	8b5b      	ldrh	r3, [r3, #26]
 8014374:	f003 0301 	and.w	r3, r3, #1
 8014378:	2b00      	cmp	r3, #0
 801437a:	d00e      	beq.n	801439a <tcp_receive+0xbc2>
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	8b5b      	ldrh	r3, [r3, #26]
 8014380:	f023 0301 	bic.w	r3, r3, #1
 8014384:	b29a      	uxth	r2, r3
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	835a      	strh	r2, [r3, #26]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	8b5b      	ldrh	r3, [r3, #26]
 801438e:	f043 0302 	orr.w	r3, r3, #2
 8014392:	b29a      	uxth	r2, r3
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014398:	e187      	b.n	80146aa <tcp_receive+0xed2>
        tcp_ack(pcb);
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	8b5b      	ldrh	r3, [r3, #26]
 801439e:	f043 0301 	orr.w	r3, r3, #1
 80143a2:	b29a      	uxth	r2, r3
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80143a8:	e17f      	b.n	80146aa <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d106      	bne.n	80143c0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80143b2:	4848      	ldr	r0, [pc, #288]	@ (80144d4 <tcp_receive+0xcfc>)
 80143b4:	f7fd fbbc 	bl	8011b30 <tcp_seg_copy>
 80143b8:	4602      	mov	r2, r0
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	675a      	str	r2, [r3, #116]	@ 0x74
 80143be:	e16c      	b.n	801469a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80143c0:	2300      	movs	r3, #0
 80143c2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80143ca:	e156      	b.n	801467a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80143cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ce:	68db      	ldr	r3, [r3, #12]
 80143d0:	685a      	ldr	r2, [r3, #4]
 80143d2:	4b41      	ldr	r3, [pc, #260]	@ (80144d8 <tcp_receive+0xd00>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	429a      	cmp	r2, r3
 80143d8:	d11d      	bne.n	8014416 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80143da:	4b3e      	ldr	r3, [pc, #248]	@ (80144d4 <tcp_receive+0xcfc>)
 80143dc:	891a      	ldrh	r2, [r3, #8]
 80143de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143e0:	891b      	ldrh	r3, [r3, #8]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	f240 814e 	bls.w	8014684 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80143e8:	483a      	ldr	r0, [pc, #232]	@ (80144d4 <tcp_receive+0xcfc>)
 80143ea:	f7fd fba1 	bl	8011b30 <tcp_seg_copy>
 80143ee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	f000 8148 	beq.w	8014688 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80143f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d003      	beq.n	8014406 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80143fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014400:	697a      	ldr	r2, [r7, #20]
 8014402:	601a      	str	r2, [r3, #0]
 8014404:	e002      	b.n	801440c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	697a      	ldr	r2, [r7, #20]
 801440a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801440c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801440e:	6978      	ldr	r0, [r7, #20]
 8014410:	f7ff f8de 	bl	80135d0 <tcp_oos_insert_segment>
                }
                break;
 8014414:	e138      	b.n	8014688 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014418:	2b00      	cmp	r3, #0
 801441a:	d117      	bne.n	801444c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801441c:	4b2e      	ldr	r3, [pc, #184]	@ (80144d8 <tcp_receive+0xd00>)
 801441e:	681a      	ldr	r2, [r3, #0]
 8014420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014422:	68db      	ldr	r3, [r3, #12]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	1ad3      	subs	r3, r2, r3
 8014428:	2b00      	cmp	r3, #0
 801442a:	da57      	bge.n	80144dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801442c:	4829      	ldr	r0, [pc, #164]	@ (80144d4 <tcp_receive+0xcfc>)
 801442e:	f7fd fb7f 	bl	8011b30 <tcp_seg_copy>
 8014432:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014434:	69bb      	ldr	r3, [r7, #24]
 8014436:	2b00      	cmp	r3, #0
 8014438:	f000 8128 	beq.w	801468c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	69ba      	ldr	r2, [r7, #24]
 8014440:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014442:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014444:	69b8      	ldr	r0, [r7, #24]
 8014446:	f7ff f8c3 	bl	80135d0 <tcp_oos_insert_segment>
                  }
                  break;
 801444a:	e11f      	b.n	801468c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801444c:	4b22      	ldr	r3, [pc, #136]	@ (80144d8 <tcp_receive+0xd00>)
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014452:	68db      	ldr	r3, [r3, #12]
 8014454:	685b      	ldr	r3, [r3, #4]
 8014456:	1ad3      	subs	r3, r2, r3
 8014458:	3b01      	subs	r3, #1
 801445a:	2b00      	cmp	r3, #0
 801445c:	db3e      	blt.n	80144dc <tcp_receive+0xd04>
 801445e:	4b1e      	ldr	r3, [pc, #120]	@ (80144d8 <tcp_receive+0xd00>)
 8014460:	681a      	ldr	r2, [r3, #0]
 8014462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014464:	68db      	ldr	r3, [r3, #12]
 8014466:	685b      	ldr	r3, [r3, #4]
 8014468:	1ad3      	subs	r3, r2, r3
 801446a:	3301      	adds	r3, #1
 801446c:	2b00      	cmp	r3, #0
 801446e:	dc35      	bgt.n	80144dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014470:	4818      	ldr	r0, [pc, #96]	@ (80144d4 <tcp_receive+0xcfc>)
 8014472:	f7fd fb5d 	bl	8011b30 <tcp_seg_copy>
 8014476:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014478:	69fb      	ldr	r3, [r7, #28]
 801447a:	2b00      	cmp	r3, #0
 801447c:	f000 8108 	beq.w	8014690 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014482:	68db      	ldr	r3, [r3, #12]
 8014484:	685b      	ldr	r3, [r3, #4]
 8014486:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014488:	8912      	ldrh	r2, [r2, #8]
 801448a:	441a      	add	r2, r3
 801448c:	4b12      	ldr	r3, [pc, #72]	@ (80144d8 <tcp_receive+0xd00>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	1ad3      	subs	r3, r2, r3
 8014492:	2b00      	cmp	r3, #0
 8014494:	dd12      	ble.n	80144bc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014496:	4b10      	ldr	r3, [pc, #64]	@ (80144d8 <tcp_receive+0xd00>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	b29a      	uxth	r2, r3
 801449c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801449e:	68db      	ldr	r3, [r3, #12]
 80144a0:	685b      	ldr	r3, [r3, #4]
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	1ad3      	subs	r3, r2, r3
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144aa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80144ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144ae:	685a      	ldr	r2, [r3, #4]
 80144b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144b2:	891b      	ldrh	r3, [r3, #8]
 80144b4:	4619      	mov	r1, r3
 80144b6:	4610      	mov	r0, r2
 80144b8:	f7fb ff0a 	bl	80102d0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80144bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144be:	69fa      	ldr	r2, [r7, #28]
 80144c0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80144c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80144c4:	69f8      	ldr	r0, [r7, #28]
 80144c6:	f7ff f883 	bl	80135d0 <tcp_oos_insert_segment>
                  }
                  break;
 80144ca:	e0e1      	b.n	8014690 <tcp_receive+0xeb8>
 80144cc:	200274f4 	.word	0x200274f4
 80144d0:	200274f1 	.word	0x200274f1
 80144d4:	200274c4 	.word	0x200274c4
 80144d8:	200274e4 	.word	0x200274e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80144dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144de:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80144e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	f040 80c5 	bne.w	8014674 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80144ea:	4b7f      	ldr	r3, [pc, #508]	@ (80146e8 <tcp_receive+0xf10>)
 80144ec:	681a      	ldr	r2, [r3, #0]
 80144ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144f0:	68db      	ldr	r3, [r3, #12]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	f340 80bc 	ble.w	8014674 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80144fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144fe:	68db      	ldr	r3, [r3, #12]
 8014500:	899b      	ldrh	r3, [r3, #12]
 8014502:	b29b      	uxth	r3, r3
 8014504:	4618      	mov	r0, r3
 8014506:	f7fa fc7b 	bl	800ee00 <lwip_htons>
 801450a:	4603      	mov	r3, r0
 801450c:	b2db      	uxtb	r3, r3
 801450e:	f003 0301 	and.w	r3, r3, #1
 8014512:	2b00      	cmp	r3, #0
 8014514:	f040 80be 	bne.w	8014694 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014518:	4874      	ldr	r0, [pc, #464]	@ (80146ec <tcp_receive+0xf14>)
 801451a:	f7fd fb09 	bl	8011b30 <tcp_seg_copy>
 801451e:	4602      	mov	r2, r0
 8014520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014522:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	2b00      	cmp	r3, #0
 801452a:	f000 80b5 	beq.w	8014698 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801452e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014530:	68db      	ldr	r3, [r3, #12]
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014536:	8912      	ldrh	r2, [r2, #8]
 8014538:	441a      	add	r2, r3
 801453a:	4b6b      	ldr	r3, [pc, #428]	@ (80146e8 <tcp_receive+0xf10>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	1ad3      	subs	r3, r2, r3
 8014540:	2b00      	cmp	r3, #0
 8014542:	dd12      	ble.n	801456a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014544:	4b68      	ldr	r3, [pc, #416]	@ (80146e8 <tcp_receive+0xf10>)
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	b29a      	uxth	r2, r3
 801454a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801454c:	68db      	ldr	r3, [r3, #12]
 801454e:	685b      	ldr	r3, [r3, #4]
 8014550:	b29b      	uxth	r3, r3
 8014552:	1ad3      	subs	r3, r2, r3
 8014554:	b29a      	uxth	r2, r3
 8014556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014558:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801455a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801455c:	685a      	ldr	r2, [r3, #4]
 801455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014560:	891b      	ldrh	r3, [r3, #8]
 8014562:	4619      	mov	r1, r3
 8014564:	4610      	mov	r0, r2
 8014566:	f7fb feb3 	bl	80102d0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801456a:	4b61      	ldr	r3, [pc, #388]	@ (80146f0 <tcp_receive+0xf18>)
 801456c:	881b      	ldrh	r3, [r3, #0]
 801456e:	461a      	mov	r2, r3
 8014570:	4b5d      	ldr	r3, [pc, #372]	@ (80146e8 <tcp_receive+0xf10>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	441a      	add	r2, r3
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801457a:	6879      	ldr	r1, [r7, #4]
 801457c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801457e:	440b      	add	r3, r1
 8014580:	1ad3      	subs	r3, r2, r3
 8014582:	2b00      	cmp	r3, #0
 8014584:	f340 8088 	ble.w	8014698 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	68db      	ldr	r3, [r3, #12]
 801458e:	899b      	ldrh	r3, [r3, #12]
 8014590:	b29b      	uxth	r3, r3
 8014592:	4618      	mov	r0, r3
 8014594:	f7fa fc34 	bl	800ee00 <lwip_htons>
 8014598:	4603      	mov	r3, r0
 801459a:	b2db      	uxtb	r3, r3
 801459c:	f003 0301 	and.w	r3, r3, #1
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d021      	beq.n	80145e8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80145a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	899b      	ldrh	r3, [r3, #12]
 80145ac:	b29b      	uxth	r3, r3
 80145ae:	b21b      	sxth	r3, r3
 80145b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80145b4:	b21c      	sxth	r4, r3
 80145b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	68db      	ldr	r3, [r3, #12]
 80145bc:	899b      	ldrh	r3, [r3, #12]
 80145be:	b29b      	uxth	r3, r3
 80145c0:	4618      	mov	r0, r3
 80145c2:	f7fa fc1d 	bl	800ee00 <lwip_htons>
 80145c6:	4603      	mov	r3, r0
 80145c8:	b2db      	uxtb	r3, r3
 80145ca:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80145ce:	b29b      	uxth	r3, r3
 80145d0:	4618      	mov	r0, r3
 80145d2:	f7fa fc15 	bl	800ee00 <lwip_htons>
 80145d6:	4603      	mov	r3, r0
 80145d8:	b21b      	sxth	r3, r3
 80145da:	4323      	orrs	r3, r4
 80145dc:	b21a      	sxth	r2, r3
 80145de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	b292      	uxth	r2, r2
 80145e6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145ec:	b29a      	uxth	r2, r3
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80145f2:	4413      	add	r3, r2
 80145f4:	b299      	uxth	r1, r3
 80145f6:	4b3c      	ldr	r3, [pc, #240]	@ (80146e8 <tcp_receive+0xf10>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	b29a      	uxth	r2, r3
 80145fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	1a8a      	subs	r2, r1, r2
 8014602:	b292      	uxth	r2, r2
 8014604:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	685a      	ldr	r2, [r3, #4]
 801460c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	891b      	ldrh	r3, [r3, #8]
 8014612:	4619      	mov	r1, r3
 8014614:	4610      	mov	r0, r2
 8014616:	f7fb fe5b 	bl	80102d0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801461a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	891c      	ldrh	r4, [r3, #8]
 8014620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	68db      	ldr	r3, [r3, #12]
 8014626:	899b      	ldrh	r3, [r3, #12]
 8014628:	b29b      	uxth	r3, r3
 801462a:	4618      	mov	r0, r3
 801462c:	f7fa fbe8 	bl	800ee00 <lwip_htons>
 8014630:	4603      	mov	r3, r0
 8014632:	b2db      	uxtb	r3, r3
 8014634:	f003 0303 	and.w	r3, r3, #3
 8014638:	2b00      	cmp	r3, #0
 801463a:	d001      	beq.n	8014640 <tcp_receive+0xe68>
 801463c:	2301      	movs	r3, #1
 801463e:	e000      	b.n	8014642 <tcp_receive+0xe6a>
 8014640:	2300      	movs	r3, #0
 8014642:	4423      	add	r3, r4
 8014644:	b29a      	uxth	r2, r3
 8014646:	4b2a      	ldr	r3, [pc, #168]	@ (80146f0 <tcp_receive+0xf18>)
 8014648:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801464a:	4b29      	ldr	r3, [pc, #164]	@ (80146f0 <tcp_receive+0xf18>)
 801464c:	881b      	ldrh	r3, [r3, #0]
 801464e:	461a      	mov	r2, r3
 8014650:	4b25      	ldr	r3, [pc, #148]	@ (80146e8 <tcp_receive+0xf10>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	441a      	add	r2, r3
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801465a:	6879      	ldr	r1, [r7, #4]
 801465c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801465e:	440b      	add	r3, r1
 8014660:	429a      	cmp	r2, r3
 8014662:	d019      	beq.n	8014698 <tcp_receive+0xec0>
 8014664:	4b23      	ldr	r3, [pc, #140]	@ (80146f4 <tcp_receive+0xf1c>)
 8014666:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801466a:	4923      	ldr	r1, [pc, #140]	@ (80146f8 <tcp_receive+0xf20>)
 801466c:	4823      	ldr	r0, [pc, #140]	@ (80146fc <tcp_receive+0xf24>)
 801466e:	f005 fc35 	bl	8019edc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014672:	e011      	b.n	8014698 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	63bb      	str	r3, [r7, #56]	@ 0x38
 801467a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801467c:	2b00      	cmp	r3, #0
 801467e:	f47f aea5 	bne.w	80143cc <tcp_receive+0xbf4>
 8014682:	e00a      	b.n	801469a <tcp_receive+0xec2>
                break;
 8014684:	bf00      	nop
 8014686:	e008      	b.n	801469a <tcp_receive+0xec2>
                break;
 8014688:	bf00      	nop
 801468a:	e006      	b.n	801469a <tcp_receive+0xec2>
                  break;
 801468c:	bf00      	nop
 801468e:	e004      	b.n	801469a <tcp_receive+0xec2>
                  break;
 8014690:	bf00      	nop
 8014692:	e002      	b.n	801469a <tcp_receive+0xec2>
                  break;
 8014694:	bf00      	nop
 8014696:	e000      	b.n	801469a <tcp_receive+0xec2>
                break;
 8014698:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f001 fa30 	bl	8015b00 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80146a0:	e003      	b.n	80146aa <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80146a2:	6878      	ldr	r0, [r7, #4]
 80146a4:	f001 fa2c 	bl	8015b00 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80146a8:	e01a      	b.n	80146e0 <tcp_receive+0xf08>
 80146aa:	e019      	b.n	80146e0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80146ac:	4b0e      	ldr	r3, [pc, #56]	@ (80146e8 <tcp_receive+0xf10>)
 80146ae:	681a      	ldr	r2, [r3, #0]
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146b4:	1ad3      	subs	r3, r2, r3
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	db0a      	blt.n	80146d0 <tcp_receive+0xef8>
 80146ba:	4b0b      	ldr	r3, [pc, #44]	@ (80146e8 <tcp_receive+0xf10>)
 80146bc:	681a      	ldr	r2, [r3, #0]
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146c2:	6879      	ldr	r1, [r7, #4]
 80146c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80146c6:	440b      	add	r3, r1
 80146c8:	1ad3      	subs	r3, r2, r3
 80146ca:	3301      	adds	r3, #1
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	dd07      	ble.n	80146e0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	8b5b      	ldrh	r3, [r3, #26]
 80146d4:	f043 0302 	orr.w	r3, r3, #2
 80146d8:	b29a      	uxth	r2, r3
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80146de:	e7ff      	b.n	80146e0 <tcp_receive+0xf08>
 80146e0:	bf00      	nop
 80146e2:	3750      	adds	r7, #80	@ 0x50
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bdb0      	pop	{r4, r5, r7, pc}
 80146e8:	200274e4 	.word	0x200274e4
 80146ec:	200274c4 	.word	0x200274c4
 80146f0:	200274ee 	.word	0x200274ee
 80146f4:	0801c438 	.word	0x0801c438
 80146f8:	0801c7e0 	.word	0x0801c7e0
 80146fc:	0801c484 	.word	0x0801c484

08014700 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014700:	b480      	push	{r7}
 8014702:	b083      	sub	sp, #12
 8014704:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014706:	4b15      	ldr	r3, [pc, #84]	@ (801475c <tcp_get_next_optbyte+0x5c>)
 8014708:	881b      	ldrh	r3, [r3, #0]
 801470a:	1c5a      	adds	r2, r3, #1
 801470c:	b291      	uxth	r1, r2
 801470e:	4a13      	ldr	r2, [pc, #76]	@ (801475c <tcp_get_next_optbyte+0x5c>)
 8014710:	8011      	strh	r1, [r2, #0]
 8014712:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014714:	4b12      	ldr	r3, [pc, #72]	@ (8014760 <tcp_get_next_optbyte+0x60>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d004      	beq.n	8014726 <tcp_get_next_optbyte+0x26>
 801471c:	4b11      	ldr	r3, [pc, #68]	@ (8014764 <tcp_get_next_optbyte+0x64>)
 801471e:	881b      	ldrh	r3, [r3, #0]
 8014720:	88fa      	ldrh	r2, [r7, #6]
 8014722:	429a      	cmp	r2, r3
 8014724:	d208      	bcs.n	8014738 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014726:	4b10      	ldr	r3, [pc, #64]	@ (8014768 <tcp_get_next_optbyte+0x68>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	3314      	adds	r3, #20
 801472c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801472e:	88fb      	ldrh	r3, [r7, #6]
 8014730:	683a      	ldr	r2, [r7, #0]
 8014732:	4413      	add	r3, r2
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	e00b      	b.n	8014750 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014738:	88fb      	ldrh	r3, [r7, #6]
 801473a:	b2da      	uxtb	r2, r3
 801473c:	4b09      	ldr	r3, [pc, #36]	@ (8014764 <tcp_get_next_optbyte+0x64>)
 801473e:	881b      	ldrh	r3, [r3, #0]
 8014740:	b2db      	uxtb	r3, r3
 8014742:	1ad3      	subs	r3, r2, r3
 8014744:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014746:	4b06      	ldr	r3, [pc, #24]	@ (8014760 <tcp_get_next_optbyte+0x60>)
 8014748:	681a      	ldr	r2, [r3, #0]
 801474a:	797b      	ldrb	r3, [r7, #5]
 801474c:	4413      	add	r3, r2
 801474e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014750:	4618      	mov	r0, r3
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr
 801475c:	200274e0 	.word	0x200274e0
 8014760:	200274dc 	.word	0x200274dc
 8014764:	200274da 	.word	0x200274da
 8014768:	200274d4 	.word	0x200274d4

0801476c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b084      	sub	sp, #16
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d106      	bne.n	8014788 <tcp_parseopt+0x1c>
 801477a:	4b32      	ldr	r3, [pc, #200]	@ (8014844 <tcp_parseopt+0xd8>)
 801477c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8014780:	4931      	ldr	r1, [pc, #196]	@ (8014848 <tcp_parseopt+0xdc>)
 8014782:	4832      	ldr	r0, [pc, #200]	@ (801484c <tcp_parseopt+0xe0>)
 8014784:	f005 fbaa 	bl	8019edc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014788:	4b31      	ldr	r3, [pc, #196]	@ (8014850 <tcp_parseopt+0xe4>)
 801478a:	881b      	ldrh	r3, [r3, #0]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d056      	beq.n	801483e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014790:	4b30      	ldr	r3, [pc, #192]	@ (8014854 <tcp_parseopt+0xe8>)
 8014792:	2200      	movs	r2, #0
 8014794:	801a      	strh	r2, [r3, #0]
 8014796:	e046      	b.n	8014826 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014798:	f7ff ffb2 	bl	8014700 <tcp_get_next_optbyte>
 801479c:	4603      	mov	r3, r0
 801479e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80147a0:	7bfb      	ldrb	r3, [r7, #15]
 80147a2:	2b02      	cmp	r3, #2
 80147a4:	d006      	beq.n	80147b4 <tcp_parseopt+0x48>
 80147a6:	2b02      	cmp	r3, #2
 80147a8:	dc2a      	bgt.n	8014800 <tcp_parseopt+0x94>
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d042      	beq.n	8014834 <tcp_parseopt+0xc8>
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	d038      	beq.n	8014824 <tcp_parseopt+0xb8>
 80147b2:	e025      	b.n	8014800 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80147b4:	f7ff ffa4 	bl	8014700 <tcp_get_next_optbyte>
 80147b8:	4603      	mov	r3, r0
 80147ba:	2b04      	cmp	r3, #4
 80147bc:	d13c      	bne.n	8014838 <tcp_parseopt+0xcc>
 80147be:	4b25      	ldr	r3, [pc, #148]	@ (8014854 <tcp_parseopt+0xe8>)
 80147c0:	881b      	ldrh	r3, [r3, #0]
 80147c2:	3301      	adds	r3, #1
 80147c4:	4a22      	ldr	r2, [pc, #136]	@ (8014850 <tcp_parseopt+0xe4>)
 80147c6:	8812      	ldrh	r2, [r2, #0]
 80147c8:	4293      	cmp	r3, r2
 80147ca:	da35      	bge.n	8014838 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80147cc:	f7ff ff98 	bl	8014700 <tcp_get_next_optbyte>
 80147d0:	4603      	mov	r3, r0
 80147d2:	021b      	lsls	r3, r3, #8
 80147d4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80147d6:	f7ff ff93 	bl	8014700 <tcp_get_next_optbyte>
 80147da:	4603      	mov	r3, r0
 80147dc:	461a      	mov	r2, r3
 80147de:	89bb      	ldrh	r3, [r7, #12]
 80147e0:	4313      	orrs	r3, r2
 80147e2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80147e4:	89bb      	ldrh	r3, [r7, #12]
 80147e6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80147ea:	d804      	bhi.n	80147f6 <tcp_parseopt+0x8a>
 80147ec:	89bb      	ldrh	r3, [r7, #12]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d001      	beq.n	80147f6 <tcp_parseopt+0x8a>
 80147f2:	89ba      	ldrh	r2, [r7, #12]
 80147f4:	e001      	b.n	80147fa <tcp_parseopt+0x8e>
 80147f6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80147fe:	e012      	b.n	8014826 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014800:	f7ff ff7e 	bl	8014700 <tcp_get_next_optbyte>
 8014804:	4603      	mov	r3, r0
 8014806:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014808:	7afb      	ldrb	r3, [r7, #11]
 801480a:	2b01      	cmp	r3, #1
 801480c:	d916      	bls.n	801483c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801480e:	7afb      	ldrb	r3, [r7, #11]
 8014810:	b29a      	uxth	r2, r3
 8014812:	4b10      	ldr	r3, [pc, #64]	@ (8014854 <tcp_parseopt+0xe8>)
 8014814:	881b      	ldrh	r3, [r3, #0]
 8014816:	4413      	add	r3, r2
 8014818:	b29b      	uxth	r3, r3
 801481a:	3b02      	subs	r3, #2
 801481c:	b29a      	uxth	r2, r3
 801481e:	4b0d      	ldr	r3, [pc, #52]	@ (8014854 <tcp_parseopt+0xe8>)
 8014820:	801a      	strh	r2, [r3, #0]
 8014822:	e000      	b.n	8014826 <tcp_parseopt+0xba>
          break;
 8014824:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014826:	4b0b      	ldr	r3, [pc, #44]	@ (8014854 <tcp_parseopt+0xe8>)
 8014828:	881a      	ldrh	r2, [r3, #0]
 801482a:	4b09      	ldr	r3, [pc, #36]	@ (8014850 <tcp_parseopt+0xe4>)
 801482c:	881b      	ldrh	r3, [r3, #0]
 801482e:	429a      	cmp	r2, r3
 8014830:	d3b2      	bcc.n	8014798 <tcp_parseopt+0x2c>
 8014832:	e004      	b.n	801483e <tcp_parseopt+0xd2>
          return;
 8014834:	bf00      	nop
 8014836:	e002      	b.n	801483e <tcp_parseopt+0xd2>
            return;
 8014838:	bf00      	nop
 801483a:	e000      	b.n	801483e <tcp_parseopt+0xd2>
            return;
 801483c:	bf00      	nop
      }
    }
  }
}
 801483e:	3710      	adds	r7, #16
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	0801c438 	.word	0x0801c438
 8014848:	0801c89c 	.word	0x0801c89c
 801484c:	0801c484 	.word	0x0801c484
 8014850:	200274d8 	.word	0x200274d8
 8014854:	200274e0 	.word	0x200274e0

08014858 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014858:	b480      	push	{r7}
 801485a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801485c:	4b05      	ldr	r3, [pc, #20]	@ (8014874 <tcp_trigger_input_pcb_close+0x1c>)
 801485e:	781b      	ldrb	r3, [r3, #0]
 8014860:	f043 0310 	orr.w	r3, r3, #16
 8014864:	b2da      	uxtb	r2, r3
 8014866:	4b03      	ldr	r3, [pc, #12]	@ (8014874 <tcp_trigger_input_pcb_close+0x1c>)
 8014868:	701a      	strb	r2, [r3, #0]
}
 801486a:	bf00      	nop
 801486c:	46bd      	mov	sp, r7
 801486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014872:	4770      	bx	lr
 8014874:	200274f1 	.word	0x200274f1

08014878 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b084      	sub	sp, #16
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d00a      	beq.n	80148a0 <tcp_route+0x28>
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	7a1b      	ldrb	r3, [r3, #8]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d006      	beq.n	80148a0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	7a1b      	ldrb	r3, [r3, #8]
 8014896:	4618      	mov	r0, r3
 8014898:	f7fb fb12 	bl	800fec0 <netif_get_by_index>
 801489c:	4603      	mov	r3, r0
 801489e:	e003      	b.n	80148a8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f003 f959 	bl	8017b58 <ip4_route>
 80148a6:	4603      	mov	r3, r0
  }
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3710      	adds	r7, #16
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}

080148b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80148b0:	b590      	push	{r4, r7, lr}
 80148b2:	b087      	sub	sp, #28
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	60f8      	str	r0, [r7, #12]
 80148b8:	60b9      	str	r1, [r7, #8]
 80148ba:	603b      	str	r3, [r7, #0]
 80148bc:	4613      	mov	r3, r2
 80148be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d105      	bne.n	80148d2 <tcp_create_segment+0x22>
 80148c6:	4b43      	ldr	r3, [pc, #268]	@ (80149d4 <tcp_create_segment+0x124>)
 80148c8:	22a3      	movs	r2, #163	@ 0xa3
 80148ca:	4943      	ldr	r1, [pc, #268]	@ (80149d8 <tcp_create_segment+0x128>)
 80148cc:	4843      	ldr	r0, [pc, #268]	@ (80149dc <tcp_create_segment+0x12c>)
 80148ce:	f005 fb05 	bl	8019edc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d105      	bne.n	80148e4 <tcp_create_segment+0x34>
 80148d8:	4b3e      	ldr	r3, [pc, #248]	@ (80149d4 <tcp_create_segment+0x124>)
 80148da:	22a4      	movs	r2, #164	@ 0xa4
 80148dc:	4940      	ldr	r1, [pc, #256]	@ (80149e0 <tcp_create_segment+0x130>)
 80148de:	483f      	ldr	r0, [pc, #252]	@ (80149dc <tcp_create_segment+0x12c>)
 80148e0:	f005 fafc 	bl	8019edc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80148e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80148e8:	009b      	lsls	r3, r3, #2
 80148ea:	b2db      	uxtb	r3, r3
 80148ec:	f003 0304 	and.w	r3, r3, #4
 80148f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80148f2:	2003      	movs	r0, #3
 80148f4:	f7fa ff58 	bl	800f7a8 <memp_malloc>
 80148f8:	6138      	str	r0, [r7, #16]
 80148fa:	693b      	ldr	r3, [r7, #16]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d104      	bne.n	801490a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014900:	68b8      	ldr	r0, [r7, #8]
 8014902:	f7fb fe6b 	bl	80105dc <pbuf_free>
    return NULL;
 8014906:	2300      	movs	r3, #0
 8014908:	e060      	b.n	80149cc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014910:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014912:	693b      	ldr	r3, [r7, #16]
 8014914:	2200      	movs	r2, #0
 8014916:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014918:	693b      	ldr	r3, [r7, #16]
 801491a:	68ba      	ldr	r2, [r7, #8]
 801491c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801491e:	68bb      	ldr	r3, [r7, #8]
 8014920:	891a      	ldrh	r2, [r3, #8]
 8014922:	7dfb      	ldrb	r3, [r7, #23]
 8014924:	b29b      	uxth	r3, r3
 8014926:	429a      	cmp	r2, r3
 8014928:	d205      	bcs.n	8014936 <tcp_create_segment+0x86>
 801492a:	4b2a      	ldr	r3, [pc, #168]	@ (80149d4 <tcp_create_segment+0x124>)
 801492c:	22b0      	movs	r2, #176	@ 0xb0
 801492e:	492d      	ldr	r1, [pc, #180]	@ (80149e4 <tcp_create_segment+0x134>)
 8014930:	482a      	ldr	r0, [pc, #168]	@ (80149dc <tcp_create_segment+0x12c>)
 8014932:	f005 fad3 	bl	8019edc <iprintf>
  seg->len = p->tot_len - optlen;
 8014936:	68bb      	ldr	r3, [r7, #8]
 8014938:	891a      	ldrh	r2, [r3, #8]
 801493a:	7dfb      	ldrb	r3, [r7, #23]
 801493c:	b29b      	uxth	r3, r3
 801493e:	1ad3      	subs	r3, r2, r3
 8014940:	b29a      	uxth	r2, r3
 8014942:	693b      	ldr	r3, [r7, #16]
 8014944:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014946:	2114      	movs	r1, #20
 8014948:	68b8      	ldr	r0, [r7, #8]
 801494a:	f7fb fdb1 	bl	80104b0 <pbuf_add_header>
 801494e:	4603      	mov	r3, r0
 8014950:	2b00      	cmp	r3, #0
 8014952:	d004      	beq.n	801495e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014954:	6938      	ldr	r0, [r7, #16]
 8014956:	f7fd f8d2 	bl	8011afe <tcp_seg_free>
    return NULL;
 801495a:	2300      	movs	r3, #0
 801495c:	e036      	b.n	80149cc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801495e:	693b      	ldr	r3, [r7, #16]
 8014960:	685b      	ldr	r3, [r3, #4]
 8014962:	685a      	ldr	r2, [r3, #4]
 8014964:	693b      	ldr	r3, [r7, #16]
 8014966:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	8ada      	ldrh	r2, [r3, #22]
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	68dc      	ldr	r4, [r3, #12]
 8014970:	4610      	mov	r0, r2
 8014972:	f7fa fa45 	bl	800ee00 <lwip_htons>
 8014976:	4603      	mov	r3, r0
 8014978:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	8b1a      	ldrh	r2, [r3, #24]
 801497e:	693b      	ldr	r3, [r7, #16]
 8014980:	68dc      	ldr	r4, [r3, #12]
 8014982:	4610      	mov	r0, r2
 8014984:	f7fa fa3c 	bl	800ee00 <lwip_htons>
 8014988:	4603      	mov	r3, r0
 801498a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	68dc      	ldr	r4, [r3, #12]
 8014990:	6838      	ldr	r0, [r7, #0]
 8014992:	f7fa fa4b 	bl	800ee2c <lwip_htonl>
 8014996:	4603      	mov	r3, r0
 8014998:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801499a:	7dfb      	ldrb	r3, [r7, #23]
 801499c:	089b      	lsrs	r3, r3, #2
 801499e:	b2db      	uxtb	r3, r3
 80149a0:	3305      	adds	r3, #5
 80149a2:	b29b      	uxth	r3, r3
 80149a4:	031b      	lsls	r3, r3, #12
 80149a6:	b29a      	uxth	r2, r3
 80149a8:	79fb      	ldrb	r3, [r7, #7]
 80149aa:	b29b      	uxth	r3, r3
 80149ac:	4313      	orrs	r3, r2
 80149ae:	b29a      	uxth	r2, r3
 80149b0:	693b      	ldr	r3, [r7, #16]
 80149b2:	68dc      	ldr	r4, [r3, #12]
 80149b4:	4610      	mov	r0, r2
 80149b6:	f7fa fa23 	bl	800ee00 <lwip_htons>
 80149ba:	4603      	mov	r3, r0
 80149bc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80149be:	693b      	ldr	r3, [r7, #16]
 80149c0:	68db      	ldr	r3, [r3, #12]
 80149c2:	2200      	movs	r2, #0
 80149c4:	749a      	strb	r2, [r3, #18]
 80149c6:	2200      	movs	r2, #0
 80149c8:	74da      	strb	r2, [r3, #19]
  return seg;
 80149ca:	693b      	ldr	r3, [r7, #16]
}
 80149cc:	4618      	mov	r0, r3
 80149ce:	371c      	adds	r7, #28
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd90      	pop	{r4, r7, pc}
 80149d4:	0801c8b8 	.word	0x0801c8b8
 80149d8:	0801c8ec 	.word	0x0801c8ec
 80149dc:	0801c90c 	.word	0x0801c90c
 80149e0:	0801c934 	.word	0x0801c934
 80149e4:	0801c958 	.word	0x0801c958

080149e8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80149e8:	b590      	push	{r4, r7, lr}
 80149ea:	b08b      	sub	sp, #44	@ 0x2c
 80149ec:	af02      	add	r7, sp, #8
 80149ee:	6078      	str	r0, [r7, #4]
 80149f0:	460b      	mov	r3, r1
 80149f2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80149f4:	2300      	movs	r3, #0
 80149f6:	61fb      	str	r3, [r7, #28]
 80149f8:	2300      	movs	r3, #0
 80149fa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80149fc:	2300      	movs	r3, #0
 80149fe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d106      	bne.n	8014a14 <tcp_split_unsent_seg+0x2c>
 8014a06:	4b95      	ldr	r3, [pc, #596]	@ (8014c5c <tcp_split_unsent_seg+0x274>)
 8014a08:	f240 324b 	movw	r2, #843	@ 0x34b
 8014a0c:	4994      	ldr	r1, [pc, #592]	@ (8014c60 <tcp_split_unsent_seg+0x278>)
 8014a0e:	4895      	ldr	r0, [pc, #596]	@ (8014c64 <tcp_split_unsent_seg+0x27c>)
 8014a10:	f005 fa64 	bl	8019edc <iprintf>

  useg = pcb->unsent;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a18:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d102      	bne.n	8014a26 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014a20:	f04f 33ff 	mov.w	r3, #4294967295
 8014a24:	e116      	b.n	8014c54 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014a26:	887b      	ldrh	r3, [r7, #2]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d109      	bne.n	8014a40 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014a2c:	4b8b      	ldr	r3, [pc, #556]	@ (8014c5c <tcp_split_unsent_seg+0x274>)
 8014a2e:	f240 3253 	movw	r2, #851	@ 0x353
 8014a32:	498d      	ldr	r1, [pc, #564]	@ (8014c68 <tcp_split_unsent_seg+0x280>)
 8014a34:	488b      	ldr	r0, [pc, #556]	@ (8014c64 <tcp_split_unsent_seg+0x27c>)
 8014a36:	f005 fa51 	bl	8019edc <iprintf>
    return ERR_VAL;
 8014a3a:	f06f 0305 	mvn.w	r3, #5
 8014a3e:	e109      	b.n	8014c54 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	891b      	ldrh	r3, [r3, #8]
 8014a44:	887a      	ldrh	r2, [r7, #2]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d301      	bcc.n	8014a4e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	e102      	b.n	8014c54 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a52:	887a      	ldrh	r2, [r7, #2]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d906      	bls.n	8014a66 <tcp_split_unsent_seg+0x7e>
 8014a58:	4b80      	ldr	r3, [pc, #512]	@ (8014c5c <tcp_split_unsent_seg+0x274>)
 8014a5a:	f240 325b 	movw	r2, #859	@ 0x35b
 8014a5e:	4983      	ldr	r1, [pc, #524]	@ (8014c6c <tcp_split_unsent_seg+0x284>)
 8014a60:	4880      	ldr	r0, [pc, #512]	@ (8014c64 <tcp_split_unsent_seg+0x27c>)
 8014a62:	f005 fa3b 	bl	8019edc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	891b      	ldrh	r3, [r3, #8]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d106      	bne.n	8014a7c <tcp_split_unsent_seg+0x94>
 8014a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8014c5c <tcp_split_unsent_seg+0x274>)
 8014a70:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8014a74:	497e      	ldr	r1, [pc, #504]	@ (8014c70 <tcp_split_unsent_seg+0x288>)
 8014a76:	487b      	ldr	r0, [pc, #492]	@ (8014c64 <tcp_split_unsent_seg+0x27c>)
 8014a78:	f005 fa30 	bl	8019edc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	7a9b      	ldrb	r3, [r3, #10]
 8014a80:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014a82:	7bfb      	ldrb	r3, [r7, #15]
 8014a84:	009b      	lsls	r3, r3, #2
 8014a86:	b2db      	uxtb	r3, r3
 8014a88:	f003 0304 	and.w	r3, r3, #4
 8014a8c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	891a      	ldrh	r2, [r3, #8]
 8014a92:	887b      	ldrh	r3, [r7, #2]
 8014a94:	1ad3      	subs	r3, r2, r3
 8014a96:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014a98:	7bbb      	ldrb	r3, [r7, #14]
 8014a9a:	b29a      	uxth	r2, r3
 8014a9c:	89bb      	ldrh	r3, [r7, #12]
 8014a9e:	4413      	add	r3, r2
 8014aa0:	b29b      	uxth	r3, r3
 8014aa2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	2036      	movs	r0, #54	@ 0x36
 8014aaa:	f7fb fab3 	bl	8010014 <pbuf_alloc>
 8014aae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014ab0:	693b      	ldr	r3, [r7, #16]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	f000 80b7 	beq.w	8014c26 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	685b      	ldr	r3, [r3, #4]
 8014abc:	891a      	ldrh	r2, [r3, #8]
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	891b      	ldrh	r3, [r3, #8]
 8014ac2:	1ad3      	subs	r3, r2, r3
 8014ac4:	b29a      	uxth	r2, r3
 8014ac6:	887b      	ldrh	r3, [r7, #2]
 8014ac8:	4413      	add	r3, r2
 8014aca:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	6858      	ldr	r0, [r3, #4]
 8014ad0:	693b      	ldr	r3, [r7, #16]
 8014ad2:	685a      	ldr	r2, [r3, #4]
 8014ad4:	7bbb      	ldrb	r3, [r7, #14]
 8014ad6:	18d1      	adds	r1, r2, r3
 8014ad8:	897b      	ldrh	r3, [r7, #10]
 8014ada:	89ba      	ldrh	r2, [r7, #12]
 8014adc:	f7fb ff84 	bl	80109e8 <pbuf_copy_partial>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	89bb      	ldrh	r3, [r7, #12]
 8014ae6:	4293      	cmp	r3, r2
 8014ae8:	f040 809f 	bne.w	8014c2a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	68db      	ldr	r3, [r3, #12]
 8014af0:	899b      	ldrh	r3, [r3, #12]
 8014af2:	b29b      	uxth	r3, r3
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7fa f983 	bl	800ee00 <lwip_htons>
 8014afa:	4603      	mov	r3, r0
 8014afc:	b2db      	uxtb	r3, r3
 8014afe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014b02:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014b04:	2300      	movs	r3, #0
 8014b06:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014b08:	7efb      	ldrb	r3, [r7, #27]
 8014b0a:	f003 0308 	and.w	r3, r3, #8
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d007      	beq.n	8014b22 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014b12:	7efb      	ldrb	r3, [r7, #27]
 8014b14:	f023 0308 	bic.w	r3, r3, #8
 8014b18:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014b1a:	7ebb      	ldrb	r3, [r7, #26]
 8014b1c:	f043 0308 	orr.w	r3, r3, #8
 8014b20:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014b22:	7efb      	ldrb	r3, [r7, #27]
 8014b24:	f003 0301 	and.w	r3, r3, #1
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d007      	beq.n	8014b3c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014b2c:	7efb      	ldrb	r3, [r7, #27]
 8014b2e:	f023 0301 	bic.w	r3, r3, #1
 8014b32:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014b34:	7ebb      	ldrb	r3, [r7, #26]
 8014b36:	f043 0301 	orr.w	r3, r3, #1
 8014b3a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7fa f972 	bl	800ee2c <lwip_htonl>
 8014b48:	4602      	mov	r2, r0
 8014b4a:	887b      	ldrh	r3, [r7, #2]
 8014b4c:	18d1      	adds	r1, r2, r3
 8014b4e:	7eba      	ldrb	r2, [r7, #26]
 8014b50:	7bfb      	ldrb	r3, [r7, #15]
 8014b52:	9300      	str	r3, [sp, #0]
 8014b54:	460b      	mov	r3, r1
 8014b56:	6939      	ldr	r1, [r7, #16]
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f7ff fea9 	bl	80148b0 <tcp_create_segment>
 8014b5e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014b60:	69fb      	ldr	r3, [r7, #28]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d063      	beq.n	8014c2e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	685b      	ldr	r3, [r3, #4]
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7fb fdc4 	bl	80106f8 <pbuf_clen>
 8014b70:	4603      	mov	r3, r0
 8014b72:	461a      	mov	r2, r3
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014b7a:	1a9b      	subs	r3, r3, r2
 8014b7c:	b29a      	uxth	r2, r3
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	6858      	ldr	r0, [r3, #4]
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	685b      	ldr	r3, [r3, #4]
 8014b8c:	891a      	ldrh	r2, [r3, #8]
 8014b8e:	89bb      	ldrh	r3, [r7, #12]
 8014b90:	1ad3      	subs	r3, r2, r3
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	4619      	mov	r1, r3
 8014b96:	f7fb fb9b 	bl	80102d0 <pbuf_realloc>
  useg->len -= remainder;
 8014b9a:	697b      	ldr	r3, [r7, #20]
 8014b9c:	891a      	ldrh	r2, [r3, #8]
 8014b9e:	89bb      	ldrh	r3, [r7, #12]
 8014ba0:	1ad3      	subs	r3, r2, r3
 8014ba2:	b29a      	uxth	r2, r3
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	68db      	ldr	r3, [r3, #12]
 8014bac:	899b      	ldrh	r3, [r3, #12]
 8014bae:	b29c      	uxth	r4, r3
 8014bb0:	7efb      	ldrb	r3, [r7, #27]
 8014bb2:	b29b      	uxth	r3, r3
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7fa f923 	bl	800ee00 <lwip_htons>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	461a      	mov	r2, r3
 8014bbe:	697b      	ldr	r3, [r7, #20]
 8014bc0:	68db      	ldr	r3, [r3, #12]
 8014bc2:	4322      	orrs	r2, r4
 8014bc4:	b292      	uxth	r2, r2
 8014bc6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014bc8:	697b      	ldr	r3, [r7, #20]
 8014bca:	685b      	ldr	r3, [r3, #4]
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7fb fd93 	bl	80106f8 <pbuf_clen>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	461a      	mov	r2, r3
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014bdc:	4413      	add	r3, r2
 8014bde:	b29a      	uxth	r2, r3
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014be6:	69fb      	ldr	r3, [r7, #28]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7fb fd84 	bl	80106f8 <pbuf_clen>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	461a      	mov	r2, r3
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014bfa:	4413      	add	r3, r2
 8014bfc:	b29a      	uxth	r2, r3
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	69fb      	ldr	r3, [r7, #28]
 8014c0a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	69fa      	ldr	r2, [r7, #28]
 8014c10:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014c12:	69fb      	ldr	r3, [r7, #28]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d103      	bne.n	8014c22 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014c22:	2300      	movs	r3, #0
 8014c24:	e016      	b.n	8014c54 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014c26:	bf00      	nop
 8014c28:	e002      	b.n	8014c30 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014c2a:	bf00      	nop
 8014c2c:	e000      	b.n	8014c30 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014c2e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014c30:	69fb      	ldr	r3, [r7, #28]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d006      	beq.n	8014c44 <tcp_split_unsent_seg+0x25c>
 8014c36:	4b09      	ldr	r3, [pc, #36]	@ (8014c5c <tcp_split_unsent_seg+0x274>)
 8014c38:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014c3c:	490d      	ldr	r1, [pc, #52]	@ (8014c74 <tcp_split_unsent_seg+0x28c>)
 8014c3e:	4809      	ldr	r0, [pc, #36]	@ (8014c64 <tcp_split_unsent_seg+0x27c>)
 8014c40:	f005 f94c 	bl	8019edc <iprintf>
  if (p != NULL) {
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d002      	beq.n	8014c50 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014c4a:	6938      	ldr	r0, [r7, #16]
 8014c4c:	f7fb fcc6 	bl	80105dc <pbuf_free>
  }

  return ERR_MEM;
 8014c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	3724      	adds	r7, #36	@ 0x24
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd90      	pop	{r4, r7, pc}
 8014c5c:	0801c8b8 	.word	0x0801c8b8
 8014c60:	0801cc4c 	.word	0x0801cc4c
 8014c64:	0801c90c 	.word	0x0801c90c
 8014c68:	0801cc70 	.word	0x0801cc70
 8014c6c:	0801cc94 	.word	0x0801cc94
 8014c70:	0801cca4 	.word	0x0801cca4
 8014c74:	0801ccb4 	.word	0x0801ccb4

08014c78 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014c78:	b590      	push	{r4, r7, lr}
 8014c7a:	b085      	sub	sp, #20
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d106      	bne.n	8014c94 <tcp_send_fin+0x1c>
 8014c86:	4b21      	ldr	r3, [pc, #132]	@ (8014d0c <tcp_send_fin+0x94>)
 8014c88:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014c8c:	4920      	ldr	r1, [pc, #128]	@ (8014d10 <tcp_send_fin+0x98>)
 8014c8e:	4821      	ldr	r0, [pc, #132]	@ (8014d14 <tcp_send_fin+0x9c>)
 8014c90:	f005 f924 	bl	8019edc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d02e      	beq.n	8014cfa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ca0:	60fb      	str	r3, [r7, #12]
 8014ca2:	e002      	b.n	8014caa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d1f8      	bne.n	8014ca4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	68db      	ldr	r3, [r3, #12]
 8014cb6:	899b      	ldrh	r3, [r3, #12]
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fa f8a0 	bl	800ee00 <lwip_htons>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	b2db      	uxtb	r3, r3
 8014cc4:	f003 0307 	and.w	r3, r3, #7
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d116      	bne.n	8014cfa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	68db      	ldr	r3, [r3, #12]
 8014cd0:	899b      	ldrh	r3, [r3, #12]
 8014cd2:	b29c      	uxth	r4, r3
 8014cd4:	2001      	movs	r0, #1
 8014cd6:	f7fa f893 	bl	800ee00 <lwip_htons>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	461a      	mov	r2, r3
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	68db      	ldr	r3, [r3, #12]
 8014ce2:	4322      	orrs	r2, r4
 8014ce4:	b292      	uxth	r2, r2
 8014ce6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	8b5b      	ldrh	r3, [r3, #26]
 8014cec:	f043 0320 	orr.w	r3, r3, #32
 8014cf0:	b29a      	uxth	r2, r3
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	e004      	b.n	8014d04 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014cfa:	2101      	movs	r1, #1
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f000 f80b 	bl	8014d18 <tcp_enqueue_flags>
 8014d02:	4603      	mov	r3, r0
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3714      	adds	r7, #20
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd90      	pop	{r4, r7, pc}
 8014d0c:	0801c8b8 	.word	0x0801c8b8
 8014d10:	0801ccc0 	.word	0x0801ccc0
 8014d14:	0801c90c 	.word	0x0801c90c

08014d18 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b08a      	sub	sp, #40	@ 0x28
 8014d1c:	af02      	add	r7, sp, #8
 8014d1e:	6078      	str	r0, [r7, #4]
 8014d20:	460b      	mov	r3, r1
 8014d22:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014d24:	2300      	movs	r3, #0
 8014d26:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014d2c:	78fb      	ldrb	r3, [r7, #3]
 8014d2e:	f003 0303 	and.w	r3, r3, #3
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d106      	bne.n	8014d44 <tcp_enqueue_flags+0x2c>
 8014d36:	4b67      	ldr	r3, [pc, #412]	@ (8014ed4 <tcp_enqueue_flags+0x1bc>)
 8014d38:	f240 4211 	movw	r2, #1041	@ 0x411
 8014d3c:	4966      	ldr	r1, [pc, #408]	@ (8014ed8 <tcp_enqueue_flags+0x1c0>)
 8014d3e:	4867      	ldr	r0, [pc, #412]	@ (8014edc <tcp_enqueue_flags+0x1c4>)
 8014d40:	f005 f8cc 	bl	8019edc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d106      	bne.n	8014d58 <tcp_enqueue_flags+0x40>
 8014d4a:	4b62      	ldr	r3, [pc, #392]	@ (8014ed4 <tcp_enqueue_flags+0x1bc>)
 8014d4c:	f240 4213 	movw	r2, #1043	@ 0x413
 8014d50:	4963      	ldr	r1, [pc, #396]	@ (8014ee0 <tcp_enqueue_flags+0x1c8>)
 8014d52:	4862      	ldr	r0, [pc, #392]	@ (8014edc <tcp_enqueue_flags+0x1c4>)
 8014d54:	f005 f8c2 	bl	8019edc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014d58:	78fb      	ldrb	r3, [r7, #3]
 8014d5a:	f003 0302 	and.w	r3, r3, #2
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d001      	beq.n	8014d66 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014d62:	2301      	movs	r3, #1
 8014d64:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014d66:	7ffb      	ldrb	r3, [r7, #31]
 8014d68:	009b      	lsls	r3, r3, #2
 8014d6a:	b2db      	uxtb	r3, r3
 8014d6c:	f003 0304 	and.w	r3, r3, #4
 8014d70:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014d72:	7dfb      	ldrb	r3, [r7, #23]
 8014d74:	b29b      	uxth	r3, r3
 8014d76:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014d7a:	4619      	mov	r1, r3
 8014d7c:	2036      	movs	r0, #54	@ 0x36
 8014d7e:	f7fb f949 	bl	8010014 <pbuf_alloc>
 8014d82:	6138      	str	r0, [r7, #16]
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d109      	bne.n	8014d9e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	8b5b      	ldrh	r3, [r3, #26]
 8014d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d92:	b29a      	uxth	r2, r3
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014d98:	f04f 33ff 	mov.w	r3, #4294967295
 8014d9c:	e095      	b.n	8014eca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014d9e:	693b      	ldr	r3, [r7, #16]
 8014da0:	895a      	ldrh	r2, [r3, #10]
 8014da2:	7dfb      	ldrb	r3, [r7, #23]
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d206      	bcs.n	8014db8 <tcp_enqueue_flags+0xa0>
 8014daa:	4b4a      	ldr	r3, [pc, #296]	@ (8014ed4 <tcp_enqueue_flags+0x1bc>)
 8014dac:	f240 4239 	movw	r2, #1081	@ 0x439
 8014db0:	494c      	ldr	r1, [pc, #304]	@ (8014ee4 <tcp_enqueue_flags+0x1cc>)
 8014db2:	484a      	ldr	r0, [pc, #296]	@ (8014edc <tcp_enqueue_flags+0x1c4>)
 8014db4:	f005 f892 	bl	8019edc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8014dbc:	78fa      	ldrb	r2, [r7, #3]
 8014dbe:	7ffb      	ldrb	r3, [r7, #31]
 8014dc0:	9300      	str	r3, [sp, #0]
 8014dc2:	460b      	mov	r3, r1
 8014dc4:	6939      	ldr	r1, [r7, #16]
 8014dc6:	6878      	ldr	r0, [r7, #4]
 8014dc8:	f7ff fd72 	bl	80148b0 <tcp_create_segment>
 8014dcc:	60f8      	str	r0, [r7, #12]
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d109      	bne.n	8014de8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	8b5b      	ldrh	r3, [r3, #26]
 8014dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014ddc:	b29a      	uxth	r2, r3
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014de2:	f04f 33ff 	mov.w	r3, #4294967295
 8014de6:	e070      	b.n	8014eca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	68db      	ldr	r3, [r3, #12]
 8014dec:	f003 0303 	and.w	r3, r3, #3
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d006      	beq.n	8014e02 <tcp_enqueue_flags+0xea>
 8014df4:	4b37      	ldr	r3, [pc, #220]	@ (8014ed4 <tcp_enqueue_flags+0x1bc>)
 8014df6:	f240 4242 	movw	r2, #1090	@ 0x442
 8014dfa:	493b      	ldr	r1, [pc, #236]	@ (8014ee8 <tcp_enqueue_flags+0x1d0>)
 8014dfc:	4837      	ldr	r0, [pc, #220]	@ (8014edc <tcp_enqueue_flags+0x1c4>)
 8014dfe:	f005 f86d 	bl	8019edc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	891b      	ldrh	r3, [r3, #8]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d006      	beq.n	8014e18 <tcp_enqueue_flags+0x100>
 8014e0a:	4b32      	ldr	r3, [pc, #200]	@ (8014ed4 <tcp_enqueue_flags+0x1bc>)
 8014e0c:	f240 4243 	movw	r2, #1091	@ 0x443
 8014e10:	4936      	ldr	r1, [pc, #216]	@ (8014eec <tcp_enqueue_flags+0x1d4>)
 8014e12:	4832      	ldr	r0, [pc, #200]	@ (8014edc <tcp_enqueue_flags+0x1c4>)
 8014e14:	f005 f862 	bl	8019edc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d103      	bne.n	8014e28 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	68fa      	ldr	r2, [r7, #12]
 8014e24:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014e26:	e00d      	b.n	8014e44 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e2c:	61bb      	str	r3, [r7, #24]
 8014e2e:	e002      	b.n	8014e36 <tcp_enqueue_flags+0x11e>
 8014e30:	69bb      	ldr	r3, [r7, #24]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	61bb      	str	r3, [r7, #24]
 8014e36:	69bb      	ldr	r3, [r7, #24]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d1f8      	bne.n	8014e30 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014e3e:	69bb      	ldr	r3, [r7, #24]
 8014e40:	68fa      	ldr	r2, [r7, #12]
 8014e42:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	2200      	movs	r2, #0
 8014e48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014e4c:	78fb      	ldrb	r3, [r7, #3]
 8014e4e:	f003 0302 	and.w	r3, r3, #2
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d104      	bne.n	8014e60 <tcp_enqueue_flags+0x148>
 8014e56:	78fb      	ldrb	r3, [r7, #3]
 8014e58:	f003 0301 	and.w	r3, r3, #1
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d004      	beq.n	8014e6a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014e64:	1c5a      	adds	r2, r3, #1
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014e6a:	78fb      	ldrb	r3, [r7, #3]
 8014e6c:	f003 0301 	and.w	r3, r3, #1
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d006      	beq.n	8014e82 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	8b5b      	ldrh	r3, [r3, #26]
 8014e78:	f043 0320 	orr.w	r3, r3, #32
 8014e7c:	b29a      	uxth	r2, r3
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	685b      	ldr	r3, [r3, #4]
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7fb fc36 	bl	80106f8 <pbuf_clen>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	461a      	mov	r2, r3
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014e96:	4413      	add	r3, r2
 8014e98:	b29a      	uxth	r2, r3
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d00e      	beq.n	8014ec8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d10a      	bne.n	8014ec8 <tcp_enqueue_flags+0x1b0>
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d106      	bne.n	8014ec8 <tcp_enqueue_flags+0x1b0>
 8014eba:	4b06      	ldr	r3, [pc, #24]	@ (8014ed4 <tcp_enqueue_flags+0x1bc>)
 8014ebc:	f240 4265 	movw	r2, #1125	@ 0x465
 8014ec0:	490b      	ldr	r1, [pc, #44]	@ (8014ef0 <tcp_enqueue_flags+0x1d8>)
 8014ec2:	4806      	ldr	r0, [pc, #24]	@ (8014edc <tcp_enqueue_flags+0x1c4>)
 8014ec4:	f005 f80a 	bl	8019edc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014ec8:	2300      	movs	r3, #0
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3720      	adds	r7, #32
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}
 8014ed2:	bf00      	nop
 8014ed4:	0801c8b8 	.word	0x0801c8b8
 8014ed8:	0801ccdc 	.word	0x0801ccdc
 8014edc:	0801c90c 	.word	0x0801c90c
 8014ee0:	0801cd34 	.word	0x0801cd34
 8014ee4:	0801cd54 	.word	0x0801cd54
 8014ee8:	0801cd90 	.word	0x0801cd90
 8014eec:	0801cda8 	.word	0x0801cda8
 8014ef0:	0801cdd4 	.word	0x0801cdd4

08014ef4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014ef4:	b5b0      	push	{r4, r5, r7, lr}
 8014ef6:	b08a      	sub	sp, #40	@ 0x28
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d106      	bne.n	8014f10 <tcp_output+0x1c>
 8014f02:	4b8a      	ldr	r3, [pc, #552]	@ (801512c <tcp_output+0x238>)
 8014f04:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014f08:	4989      	ldr	r1, [pc, #548]	@ (8015130 <tcp_output+0x23c>)
 8014f0a:	488a      	ldr	r0, [pc, #552]	@ (8015134 <tcp_output+0x240>)
 8014f0c:	f004 ffe6 	bl	8019edc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	7d1b      	ldrb	r3, [r3, #20]
 8014f14:	2b01      	cmp	r3, #1
 8014f16:	d106      	bne.n	8014f26 <tcp_output+0x32>
 8014f18:	4b84      	ldr	r3, [pc, #528]	@ (801512c <tcp_output+0x238>)
 8014f1a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8014f1e:	4986      	ldr	r1, [pc, #536]	@ (8015138 <tcp_output+0x244>)
 8014f20:	4884      	ldr	r0, [pc, #528]	@ (8015134 <tcp_output+0x240>)
 8014f22:	f004 ffdb 	bl	8019edc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014f26:	4b85      	ldr	r3, [pc, #532]	@ (801513c <tcp_output+0x248>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d101      	bne.n	8014f34 <tcp_output+0x40>
    return ERR_OK;
 8014f30:	2300      	movs	r3, #0
 8014f32:	e1ce      	b.n	80152d2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014f40:	4293      	cmp	r3, r2
 8014f42:	bf28      	it	cs
 8014f44:	4613      	movcs	r3, r2
 8014f46:	b29b      	uxth	r3, r3
 8014f48:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f4e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8014f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d10b      	bne.n	8014f6e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	8b5b      	ldrh	r3, [r3, #26]
 8014f5a:	f003 0302 	and.w	r3, r3, #2
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	f000 81aa 	beq.w	80152b8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f000 fdcb 	bl	8015b00 <tcp_send_empty_ack>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	e1b1      	b.n	80152d2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014f6e:	6879      	ldr	r1, [r7, #4]
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	3304      	adds	r3, #4
 8014f74:	461a      	mov	r2, r3
 8014f76:	6878      	ldr	r0, [r7, #4]
 8014f78:	f7ff fc7e 	bl	8014878 <tcp_route>
 8014f7c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014f7e:	697b      	ldr	r3, [r7, #20]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d102      	bne.n	8014f8a <tcp_output+0x96>
    return ERR_RTE;
 8014f84:	f06f 0303 	mvn.w	r3, #3
 8014f88:	e1a3      	b.n	80152d2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d003      	beq.n	8014f98 <tcp_output+0xa4>
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d111      	bne.n	8014fbc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d002      	beq.n	8014fa4 <tcp_output+0xb0>
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	3304      	adds	r3, #4
 8014fa2:	e000      	b.n	8014fa6 <tcp_output+0xb2>
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d102      	bne.n	8014fb4 <tcp_output+0xc0>
      return ERR_RTE;
 8014fae:	f06f 0303 	mvn.w	r3, #3
 8014fb2:	e18e      	b.n	80152d2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fbe:	68db      	ldr	r3, [r3, #12]
 8014fc0:	685b      	ldr	r3, [r3, #4]
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7f9 ff32 	bl	800ee2c <lwip_htonl>
 8014fc8:	4602      	mov	r2, r0
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014fce:	1ad3      	subs	r3, r2, r3
 8014fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fd2:	8912      	ldrh	r2, [r2, #8]
 8014fd4:	4413      	add	r3, r2
 8014fd6:	69ba      	ldr	r2, [r7, #24]
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d227      	bcs.n	801502c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014fe2:	461a      	mov	r2, r3
 8014fe4:	69bb      	ldr	r3, [r7, #24]
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d114      	bne.n	8015014 <tcp_output+0x120>
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d110      	bne.n	8015014 <tcp_output+0x120>
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d10b      	bne.n	8015014 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	2200      	movs	r2, #0
 8015000:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2201      	movs	r2, #1
 8015008:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	2200      	movs	r2, #0
 8015010:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	8b5b      	ldrh	r3, [r3, #26]
 8015018:	f003 0302 	and.w	r3, r3, #2
 801501c:	2b00      	cmp	r3, #0
 801501e:	f000 814d 	beq.w	80152bc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015022:	6878      	ldr	r0, [r7, #4]
 8015024:	f000 fd6c 	bl	8015b00 <tcp_send_empty_ack>
 8015028:	4603      	mov	r3, r0
 801502a:	e152      	b.n	80152d2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2200      	movs	r2, #0
 8015030:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015038:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801503a:	6a3b      	ldr	r3, [r7, #32]
 801503c:	2b00      	cmp	r3, #0
 801503e:	f000 811c 	beq.w	801527a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015042:	e002      	b.n	801504a <tcp_output+0x156>
 8015044:	6a3b      	ldr	r3, [r7, #32]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	623b      	str	r3, [r7, #32]
 801504a:	6a3b      	ldr	r3, [r7, #32]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d1f8      	bne.n	8015044 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015052:	e112      	b.n	801527a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015056:	68db      	ldr	r3, [r3, #12]
 8015058:	899b      	ldrh	r3, [r3, #12]
 801505a:	b29b      	uxth	r3, r3
 801505c:	4618      	mov	r0, r3
 801505e:	f7f9 fecf 	bl	800ee00 <lwip_htons>
 8015062:	4603      	mov	r3, r0
 8015064:	b2db      	uxtb	r3, r3
 8015066:	f003 0304 	and.w	r3, r3, #4
 801506a:	2b00      	cmp	r3, #0
 801506c:	d006      	beq.n	801507c <tcp_output+0x188>
 801506e:	4b2f      	ldr	r3, [pc, #188]	@ (801512c <tcp_output+0x238>)
 8015070:	f240 5236 	movw	r2, #1334	@ 0x536
 8015074:	4932      	ldr	r1, [pc, #200]	@ (8015140 <tcp_output+0x24c>)
 8015076:	482f      	ldr	r0, [pc, #188]	@ (8015134 <tcp_output+0x240>)
 8015078:	f004 ff30 	bl	8019edc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015080:	2b00      	cmp	r3, #0
 8015082:	d01f      	beq.n	80150c4 <tcp_output+0x1d0>
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	8b5b      	ldrh	r3, [r3, #26]
 8015088:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801508c:	2b00      	cmp	r3, #0
 801508e:	d119      	bne.n	80150c4 <tcp_output+0x1d0>
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015094:	2b00      	cmp	r3, #0
 8015096:	d00b      	beq.n	80150b0 <tcp_output+0x1bc>
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d110      	bne.n	80150c4 <tcp_output+0x1d0>
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150a6:	891a      	ldrh	r2, [r3, #8]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80150ac:	429a      	cmp	r2, r3
 80150ae:	d209      	bcs.n	80150c4 <tcp_output+0x1d0>
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d004      	beq.n	80150c4 <tcp_output+0x1d0>
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80150c0:	2b08      	cmp	r3, #8
 80150c2:	d901      	bls.n	80150c8 <tcp_output+0x1d4>
 80150c4:	2301      	movs	r3, #1
 80150c6:	e000      	b.n	80150ca <tcp_output+0x1d6>
 80150c8:	2300      	movs	r3, #0
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d106      	bne.n	80150dc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	8b5b      	ldrh	r3, [r3, #26]
 80150d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	f000 80e4 	beq.w	80152a4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	7d1b      	ldrb	r3, [r3, #20]
 80150e0:	2b02      	cmp	r3, #2
 80150e2:	d00d      	beq.n	8015100 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80150e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150e6:	68db      	ldr	r3, [r3, #12]
 80150e8:	899b      	ldrh	r3, [r3, #12]
 80150ea:	b29c      	uxth	r4, r3
 80150ec:	2010      	movs	r0, #16
 80150ee:	f7f9 fe87 	bl	800ee00 <lwip_htons>
 80150f2:	4603      	mov	r3, r0
 80150f4:	461a      	mov	r2, r3
 80150f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150f8:	68db      	ldr	r3, [r3, #12]
 80150fa:	4322      	orrs	r2, r4
 80150fc:	b292      	uxth	r2, r2
 80150fe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015100:	697a      	ldr	r2, [r7, #20]
 8015102:	6879      	ldr	r1, [r7, #4]
 8015104:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015106:	f000 f909 	bl	801531c <tcp_output_segment>
 801510a:	4603      	mov	r3, r0
 801510c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801510e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d016      	beq.n	8015144 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	8b5b      	ldrh	r3, [r3, #26]
 801511a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801511e:	b29a      	uxth	r2, r3
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	835a      	strh	r2, [r3, #26]
      return err;
 8015124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015128:	e0d3      	b.n	80152d2 <tcp_output+0x3de>
 801512a:	bf00      	nop
 801512c:	0801c8b8 	.word	0x0801c8b8
 8015130:	0801cdfc 	.word	0x0801cdfc
 8015134:	0801c90c 	.word	0x0801c90c
 8015138:	0801ce14 	.word	0x0801ce14
 801513c:	200274f8 	.word	0x200274f8
 8015140:	0801ce3c 	.word	0x0801ce3c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015146:	681a      	ldr	r2, [r3, #0]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	7d1b      	ldrb	r3, [r3, #20]
 8015150:	2b02      	cmp	r3, #2
 8015152:	d006      	beq.n	8015162 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	8b5b      	ldrh	r3, [r3, #26]
 8015158:	f023 0303 	bic.w	r3, r3, #3
 801515c:	b29a      	uxth	r2, r3
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015164:	68db      	ldr	r3, [r3, #12]
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	4618      	mov	r0, r3
 801516a:	f7f9 fe5f 	bl	800ee2c <lwip_htonl>
 801516e:	4604      	mov	r4, r0
 8015170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015172:	891b      	ldrh	r3, [r3, #8]
 8015174:	461d      	mov	r5, r3
 8015176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015178:	68db      	ldr	r3, [r3, #12]
 801517a:	899b      	ldrh	r3, [r3, #12]
 801517c:	b29b      	uxth	r3, r3
 801517e:	4618      	mov	r0, r3
 8015180:	f7f9 fe3e 	bl	800ee00 <lwip_htons>
 8015184:	4603      	mov	r3, r0
 8015186:	b2db      	uxtb	r3, r3
 8015188:	f003 0303 	and.w	r3, r3, #3
 801518c:	2b00      	cmp	r3, #0
 801518e:	d001      	beq.n	8015194 <tcp_output+0x2a0>
 8015190:	2301      	movs	r3, #1
 8015192:	e000      	b.n	8015196 <tcp_output+0x2a2>
 8015194:	2300      	movs	r3, #0
 8015196:	442b      	add	r3, r5
 8015198:	4423      	add	r3, r4
 801519a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	1ad3      	subs	r3, r2, r3
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	da02      	bge.n	80151ae <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	68ba      	ldr	r2, [r7, #8]
 80151ac:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80151ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151b0:	891b      	ldrh	r3, [r3, #8]
 80151b2:	461c      	mov	r4, r3
 80151b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151b6:	68db      	ldr	r3, [r3, #12]
 80151b8:	899b      	ldrh	r3, [r3, #12]
 80151ba:	b29b      	uxth	r3, r3
 80151bc:	4618      	mov	r0, r3
 80151be:	f7f9 fe1f 	bl	800ee00 <lwip_htons>
 80151c2:	4603      	mov	r3, r0
 80151c4:	b2db      	uxtb	r3, r3
 80151c6:	f003 0303 	and.w	r3, r3, #3
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d001      	beq.n	80151d2 <tcp_output+0x2de>
 80151ce:	2301      	movs	r3, #1
 80151d0:	e000      	b.n	80151d4 <tcp_output+0x2e0>
 80151d2:	2300      	movs	r3, #0
 80151d4:	4423      	add	r3, r4
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d049      	beq.n	801526e <tcp_output+0x37a>
      seg->next = NULL;
 80151da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151dc:	2200      	movs	r2, #0
 80151de:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d105      	bne.n	80151f4 <tcp_output+0x300>
        pcb->unacked = seg;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151ec:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80151ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f0:	623b      	str	r3, [r7, #32]
 80151f2:	e03f      	b.n	8015274 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80151f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f6:	68db      	ldr	r3, [r3, #12]
 80151f8:	685b      	ldr	r3, [r3, #4]
 80151fa:	4618      	mov	r0, r3
 80151fc:	f7f9 fe16 	bl	800ee2c <lwip_htonl>
 8015200:	4604      	mov	r4, r0
 8015202:	6a3b      	ldr	r3, [r7, #32]
 8015204:	68db      	ldr	r3, [r3, #12]
 8015206:	685b      	ldr	r3, [r3, #4]
 8015208:	4618      	mov	r0, r3
 801520a:	f7f9 fe0f 	bl	800ee2c <lwip_htonl>
 801520e:	4603      	mov	r3, r0
 8015210:	1ae3      	subs	r3, r4, r3
 8015212:	2b00      	cmp	r3, #0
 8015214:	da24      	bge.n	8015260 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	3370      	adds	r3, #112	@ 0x70
 801521a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801521c:	e002      	b.n	8015224 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801521e:	69fb      	ldr	r3, [r7, #28]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015224:	69fb      	ldr	r3, [r7, #28]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d011      	beq.n	8015250 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801522c:	69fb      	ldr	r3, [r7, #28]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	68db      	ldr	r3, [r3, #12]
 8015232:	685b      	ldr	r3, [r3, #4]
 8015234:	4618      	mov	r0, r3
 8015236:	f7f9 fdf9 	bl	800ee2c <lwip_htonl>
 801523a:	4604      	mov	r4, r0
 801523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801523e:	68db      	ldr	r3, [r3, #12]
 8015240:	685b      	ldr	r3, [r3, #4]
 8015242:	4618      	mov	r0, r3
 8015244:	f7f9 fdf2 	bl	800ee2c <lwip_htonl>
 8015248:	4603      	mov	r3, r0
 801524a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801524c:	2b00      	cmp	r3, #0
 801524e:	dbe6      	blt.n	801521e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015250:	69fb      	ldr	r3, [r7, #28]
 8015252:	681a      	ldr	r2, [r3, #0]
 8015254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015256:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015258:	69fb      	ldr	r3, [r7, #28]
 801525a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801525c:	601a      	str	r2, [r3, #0]
 801525e:	e009      	b.n	8015274 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015260:	6a3b      	ldr	r3, [r7, #32]
 8015262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015264:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015266:	6a3b      	ldr	r3, [r7, #32]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	623b      	str	r3, [r7, #32]
 801526c:	e002      	b.n	8015274 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801526e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015270:	f7fc fc45 	bl	8011afe <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015278:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801527c:	2b00      	cmp	r3, #0
 801527e:	d012      	beq.n	80152a6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015282:	68db      	ldr	r3, [r3, #12]
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	4618      	mov	r0, r3
 8015288:	f7f9 fdd0 	bl	800ee2c <lwip_htonl>
 801528c:	4602      	mov	r2, r0
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015292:	1ad3      	subs	r3, r2, r3
 8015294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015296:	8912      	ldrh	r2, [r2, #8]
 8015298:	4413      	add	r3, r2
  while (seg != NULL &&
 801529a:	69ba      	ldr	r2, [r7, #24]
 801529c:	429a      	cmp	r2, r3
 801529e:	f4bf aed9 	bcs.w	8015054 <tcp_output+0x160>
 80152a2:	e000      	b.n	80152a6 <tcp_output+0x3b2>
      break;
 80152a4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d108      	bne.n	80152c0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2200      	movs	r2, #0
 80152b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80152b6:	e004      	b.n	80152c2 <tcp_output+0x3ce>
    goto output_done;
 80152b8:	bf00      	nop
 80152ba:	e002      	b.n	80152c2 <tcp_output+0x3ce>
    goto output_done;
 80152bc:	bf00      	nop
 80152be:	e000      	b.n	80152c2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80152c0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	8b5b      	ldrh	r3, [r3, #26]
 80152c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80152ca:	b29a      	uxth	r2, r3
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80152d0:	2300      	movs	r3, #0
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	3728      	adds	r7, #40	@ 0x28
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bdb0      	pop	{r4, r5, r7, pc}
 80152da:	bf00      	nop

080152dc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b082      	sub	sp, #8
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d106      	bne.n	80152f8 <tcp_output_segment_busy+0x1c>
 80152ea:	4b09      	ldr	r3, [pc, #36]	@ (8015310 <tcp_output_segment_busy+0x34>)
 80152ec:	f240 529a 	movw	r2, #1434	@ 0x59a
 80152f0:	4908      	ldr	r1, [pc, #32]	@ (8015314 <tcp_output_segment_busy+0x38>)
 80152f2:	4809      	ldr	r0, [pc, #36]	@ (8015318 <tcp_output_segment_busy+0x3c>)
 80152f4:	f004 fdf2 	bl	8019edc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	685b      	ldr	r3, [r3, #4]
 80152fc:	7b9b      	ldrb	r3, [r3, #14]
 80152fe:	2b01      	cmp	r3, #1
 8015300:	d001      	beq.n	8015306 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015302:	2301      	movs	r3, #1
 8015304:	e000      	b.n	8015308 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015306:	2300      	movs	r3, #0
}
 8015308:	4618      	mov	r0, r3
 801530a:	3708      	adds	r7, #8
 801530c:	46bd      	mov	sp, r7
 801530e:	bd80      	pop	{r7, pc}
 8015310:	0801c8b8 	.word	0x0801c8b8
 8015314:	0801ce54 	.word	0x0801ce54
 8015318:	0801c90c 	.word	0x0801c90c

0801531c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801531c:	b5b0      	push	{r4, r5, r7, lr}
 801531e:	b08c      	sub	sp, #48	@ 0x30
 8015320:	af04      	add	r7, sp, #16
 8015322:	60f8      	str	r0, [r7, #12]
 8015324:	60b9      	str	r1, [r7, #8]
 8015326:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d106      	bne.n	801533c <tcp_output_segment+0x20>
 801532e:	4b64      	ldr	r3, [pc, #400]	@ (80154c0 <tcp_output_segment+0x1a4>)
 8015330:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8015334:	4963      	ldr	r1, [pc, #396]	@ (80154c4 <tcp_output_segment+0x1a8>)
 8015336:	4864      	ldr	r0, [pc, #400]	@ (80154c8 <tcp_output_segment+0x1ac>)
 8015338:	f004 fdd0 	bl	8019edc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d106      	bne.n	8015350 <tcp_output_segment+0x34>
 8015342:	4b5f      	ldr	r3, [pc, #380]	@ (80154c0 <tcp_output_segment+0x1a4>)
 8015344:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8015348:	4960      	ldr	r1, [pc, #384]	@ (80154cc <tcp_output_segment+0x1b0>)
 801534a:	485f      	ldr	r0, [pc, #380]	@ (80154c8 <tcp_output_segment+0x1ac>)
 801534c:	f004 fdc6 	bl	8019edc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d106      	bne.n	8015364 <tcp_output_segment+0x48>
 8015356:	4b5a      	ldr	r3, [pc, #360]	@ (80154c0 <tcp_output_segment+0x1a4>)
 8015358:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801535c:	495c      	ldr	r1, [pc, #368]	@ (80154d0 <tcp_output_segment+0x1b4>)
 801535e:	485a      	ldr	r0, [pc, #360]	@ (80154c8 <tcp_output_segment+0x1ac>)
 8015360:	f004 fdbc 	bl	8019edc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015364:	68f8      	ldr	r0, [r7, #12]
 8015366:	f7ff ffb9 	bl	80152dc <tcp_output_segment_busy>
 801536a:	4603      	mov	r3, r0
 801536c:	2b00      	cmp	r3, #0
 801536e:	d001      	beq.n	8015374 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015370:	2300      	movs	r3, #0
 8015372:	e0a1      	b.n	80154b8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	68dc      	ldr	r4, [r3, #12]
 801537c:	4610      	mov	r0, r2
 801537e:	f7f9 fd55 	bl	800ee2c <lwip_htonl>
 8015382:	4603      	mov	r3, r0
 8015384:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	68dc      	ldr	r4, [r3, #12]
 801538e:	4610      	mov	r0, r2
 8015390:	f7f9 fd36 	bl	800ee00 <lwip_htons>
 8015394:	4603      	mov	r3, r0
 8015396:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801539c:	68ba      	ldr	r2, [r7, #8]
 801539e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80153a0:	441a      	add	r2, r3
 80153a2:	68bb      	ldr	r3, [r7, #8]
 80153a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	68db      	ldr	r3, [r3, #12]
 80153aa:	3314      	adds	r3, #20
 80153ac:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	7a9b      	ldrb	r3, [r3, #10]
 80153b2:	f003 0301 	and.w	r3, r3, #1
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d015      	beq.n	80153e6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	3304      	adds	r3, #4
 80153be:	461a      	mov	r2, r3
 80153c0:	6879      	ldr	r1, [r7, #4]
 80153c2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80153c6:	f7fc fe91 	bl	80120ec <tcp_eff_send_mss_netif>
 80153ca:	4603      	mov	r3, r0
 80153cc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80153ce:	8b7b      	ldrh	r3, [r7, #26]
 80153d0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80153d4:	4618      	mov	r0, r3
 80153d6:	f7f9 fd29 	bl	800ee2c <lwip_htonl>
 80153da:	4602      	mov	r2, r0
 80153dc:	69fb      	ldr	r3, [r7, #28]
 80153de:	601a      	str	r2, [r3, #0]
    opts += 1;
 80153e0:	69fb      	ldr	r3, [r7, #28]
 80153e2:	3304      	adds	r3, #4
 80153e4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80153e6:	68bb      	ldr	r3, [r7, #8]
 80153e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	da02      	bge.n	80153f6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80153f0:	68bb      	ldr	r3, [r7, #8]
 80153f2:	2200      	movs	r2, #0
 80153f4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80153f6:	68bb      	ldr	r3, [r7, #8]
 80153f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d10c      	bne.n	8015418 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80153fe:	4b35      	ldr	r3, [pc, #212]	@ (80154d4 <tcp_output_segment+0x1b8>)
 8015400:	681a      	ldr	r2, [r3, #0]
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	68db      	ldr	r3, [r3, #12]
 801540a:	685b      	ldr	r3, [r3, #4]
 801540c:	4618      	mov	r0, r3
 801540e:	f7f9 fd0d 	bl	800ee2c <lwip_htonl>
 8015412:	4602      	mov	r2, r0
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	68da      	ldr	r2, [r3, #12]
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	685b      	ldr	r3, [r3, #4]
 8015420:	685b      	ldr	r3, [r3, #4]
 8015422:	1ad3      	subs	r3, r2, r3
 8015424:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	685b      	ldr	r3, [r3, #4]
 801542a:	8959      	ldrh	r1, [r3, #10]
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	685b      	ldr	r3, [r3, #4]
 8015430:	8b3a      	ldrh	r2, [r7, #24]
 8015432:	1a8a      	subs	r2, r1, r2
 8015434:	b292      	uxth	r2, r2
 8015436:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	685b      	ldr	r3, [r3, #4]
 801543c:	8919      	ldrh	r1, [r3, #8]
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	685b      	ldr	r3, [r3, #4]
 8015442:	8b3a      	ldrh	r2, [r7, #24]
 8015444:	1a8a      	subs	r2, r1, r2
 8015446:	b292      	uxth	r2, r2
 8015448:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	685b      	ldr	r3, [r3, #4]
 801544e:	68fa      	ldr	r2, [r7, #12]
 8015450:	68d2      	ldr	r2, [r2, #12]
 8015452:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	68db      	ldr	r3, [r3, #12]
 8015458:	2200      	movs	r2, #0
 801545a:	741a      	strb	r2, [r3, #16]
 801545c:	2200      	movs	r2, #0
 801545e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	68da      	ldr	r2, [r3, #12]
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	7a9b      	ldrb	r3, [r3, #10]
 8015468:	f003 0301 	and.w	r3, r3, #1
 801546c:	2b00      	cmp	r3, #0
 801546e:	d001      	beq.n	8015474 <tcp_output_segment+0x158>
 8015470:	2318      	movs	r3, #24
 8015472:	e000      	b.n	8015476 <tcp_output_segment+0x15a>
 8015474:	2314      	movs	r3, #20
 8015476:	4413      	add	r3, r2
 8015478:	69fa      	ldr	r2, [r7, #28]
 801547a:	429a      	cmp	r2, r3
 801547c:	d006      	beq.n	801548c <tcp_output_segment+0x170>
 801547e:	4b10      	ldr	r3, [pc, #64]	@ (80154c0 <tcp_output_segment+0x1a4>)
 8015480:	f240 621c 	movw	r2, #1564	@ 0x61c
 8015484:	4914      	ldr	r1, [pc, #80]	@ (80154d8 <tcp_output_segment+0x1bc>)
 8015486:	4810      	ldr	r0, [pc, #64]	@ (80154c8 <tcp_output_segment+0x1ac>)
 8015488:	f004 fd28 	bl	8019edc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	6858      	ldr	r0, [r3, #4]
 8015490:	68b9      	ldr	r1, [r7, #8]
 8015492:	68bb      	ldr	r3, [r7, #8]
 8015494:	1d1c      	adds	r4, r3, #4
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	7add      	ldrb	r5, [r3, #11]
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	7a9b      	ldrb	r3, [r3, #10]
 801549e:	687a      	ldr	r2, [r7, #4]
 80154a0:	9202      	str	r2, [sp, #8]
 80154a2:	2206      	movs	r2, #6
 80154a4:	9201      	str	r2, [sp, #4]
 80154a6:	9300      	str	r3, [sp, #0]
 80154a8:	462b      	mov	r3, r5
 80154aa:	4622      	mov	r2, r4
 80154ac:	f002 fd12 	bl	8017ed4 <ip4_output_if>
 80154b0:	4603      	mov	r3, r0
 80154b2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80154b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3720      	adds	r7, #32
 80154bc:	46bd      	mov	sp, r7
 80154be:	bdb0      	pop	{r4, r5, r7, pc}
 80154c0:	0801c8b8 	.word	0x0801c8b8
 80154c4:	0801ce7c 	.word	0x0801ce7c
 80154c8:	0801c90c 	.word	0x0801c90c
 80154cc:	0801ce9c 	.word	0x0801ce9c
 80154d0:	0801cebc 	.word	0x0801cebc
 80154d4:	200274ac 	.word	0x200274ac
 80154d8:	0801cee0 	.word	0x0801cee0

080154dc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80154dc:	b5b0      	push	{r4, r5, r7, lr}
 80154de:	b084      	sub	sp, #16
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d106      	bne.n	80154f8 <tcp_rexmit_rto_prepare+0x1c>
 80154ea:	4b31      	ldr	r3, [pc, #196]	@ (80155b0 <tcp_rexmit_rto_prepare+0xd4>)
 80154ec:	f240 6263 	movw	r2, #1635	@ 0x663
 80154f0:	4930      	ldr	r1, [pc, #192]	@ (80155b4 <tcp_rexmit_rto_prepare+0xd8>)
 80154f2:	4831      	ldr	r0, [pc, #196]	@ (80155b8 <tcp_rexmit_rto_prepare+0xdc>)
 80154f4:	f004 fcf2 	bl	8019edc <iprintf>

  if (pcb->unacked == NULL) {
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d102      	bne.n	8015506 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015500:	f06f 0305 	mvn.w	r3, #5
 8015504:	e050      	b.n	80155a8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801550a:	60fb      	str	r3, [r7, #12]
 801550c:	e00b      	b.n	8015526 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801550e:	68f8      	ldr	r0, [r7, #12]
 8015510:	f7ff fee4 	bl	80152dc <tcp_output_segment_busy>
 8015514:	4603      	mov	r3, r0
 8015516:	2b00      	cmp	r3, #0
 8015518:	d002      	beq.n	8015520 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801551a:	f06f 0305 	mvn.w	r3, #5
 801551e:	e043      	b.n	80155a8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	60fb      	str	r3, [r7, #12]
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d1ef      	bne.n	801550e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801552e:	68f8      	ldr	r0, [r7, #12]
 8015530:	f7ff fed4 	bl	80152dc <tcp_output_segment_busy>
 8015534:	4603      	mov	r3, r0
 8015536:	2b00      	cmp	r3, #0
 8015538:	d002      	beq.n	8015540 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801553a:	f06f 0305 	mvn.w	r3, #5
 801553e:	e033      	b.n	80155a8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	2200      	movs	r2, #0
 8015554:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	8b5b      	ldrh	r3, [r3, #26]
 801555a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801555e:	b29a      	uxth	r2, r3
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	685b      	ldr	r3, [r3, #4]
 801556a:	4618      	mov	r0, r3
 801556c:	f7f9 fc5e 	bl	800ee2c <lwip_htonl>
 8015570:	4604      	mov	r4, r0
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	891b      	ldrh	r3, [r3, #8]
 8015576:	461d      	mov	r5, r3
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	68db      	ldr	r3, [r3, #12]
 801557c:	899b      	ldrh	r3, [r3, #12]
 801557e:	b29b      	uxth	r3, r3
 8015580:	4618      	mov	r0, r3
 8015582:	f7f9 fc3d 	bl	800ee00 <lwip_htons>
 8015586:	4603      	mov	r3, r0
 8015588:	b2db      	uxtb	r3, r3
 801558a:	f003 0303 	and.w	r3, r3, #3
 801558e:	2b00      	cmp	r3, #0
 8015590:	d001      	beq.n	8015596 <tcp_rexmit_rto_prepare+0xba>
 8015592:	2301      	movs	r3, #1
 8015594:	e000      	b.n	8015598 <tcp_rexmit_rto_prepare+0xbc>
 8015596:	2300      	movs	r3, #0
 8015598:	442b      	add	r3, r5
 801559a:	18e2      	adds	r2, r4, r3
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2200      	movs	r2, #0
 80155a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80155a6:	2300      	movs	r3, #0
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3710      	adds	r7, #16
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bdb0      	pop	{r4, r5, r7, pc}
 80155b0:	0801c8b8 	.word	0x0801c8b8
 80155b4:	0801cef4 	.word	0x0801cef4
 80155b8:	0801c90c 	.word	0x0801c90c

080155bc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d106      	bne.n	80155d8 <tcp_rexmit_rto_commit+0x1c>
 80155ca:	4b0d      	ldr	r3, [pc, #52]	@ (8015600 <tcp_rexmit_rto_commit+0x44>)
 80155cc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80155d0:	490c      	ldr	r1, [pc, #48]	@ (8015604 <tcp_rexmit_rto_commit+0x48>)
 80155d2:	480d      	ldr	r0, [pc, #52]	@ (8015608 <tcp_rexmit_rto_commit+0x4c>)
 80155d4:	f004 fc82 	bl	8019edc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80155de:	2bff      	cmp	r3, #255	@ 0xff
 80155e0:	d007      	beq.n	80155f2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80155e8:	3301      	adds	r3, #1
 80155ea:	b2da      	uxtb	r2, r3
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f7ff fc7e 	bl	8014ef4 <tcp_output>
}
 80155f8:	bf00      	nop
 80155fa:	3708      	adds	r7, #8
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}
 8015600:	0801c8b8 	.word	0x0801c8b8
 8015604:	0801cf18 	.word	0x0801cf18
 8015608:	0801c90c 	.word	0x0801c90c

0801560c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b082      	sub	sp, #8
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d106      	bne.n	8015628 <tcp_rexmit_rto+0x1c>
 801561a:	4b0a      	ldr	r3, [pc, #40]	@ (8015644 <tcp_rexmit_rto+0x38>)
 801561c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8015620:	4909      	ldr	r1, [pc, #36]	@ (8015648 <tcp_rexmit_rto+0x3c>)
 8015622:	480a      	ldr	r0, [pc, #40]	@ (801564c <tcp_rexmit_rto+0x40>)
 8015624:	f004 fc5a 	bl	8019edc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015628:	6878      	ldr	r0, [r7, #4]
 801562a:	f7ff ff57 	bl	80154dc <tcp_rexmit_rto_prepare>
 801562e:	4603      	mov	r3, r0
 8015630:	2b00      	cmp	r3, #0
 8015632:	d102      	bne.n	801563a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015634:	6878      	ldr	r0, [r7, #4]
 8015636:	f7ff ffc1 	bl	80155bc <tcp_rexmit_rto_commit>
  }
}
 801563a:	bf00      	nop
 801563c:	3708      	adds	r7, #8
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}
 8015642:	bf00      	nop
 8015644:	0801c8b8 	.word	0x0801c8b8
 8015648:	0801cf3c 	.word	0x0801cf3c
 801564c:	0801c90c 	.word	0x0801c90c

08015650 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015650:	b590      	push	{r4, r7, lr}
 8015652:	b085      	sub	sp, #20
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d106      	bne.n	801566c <tcp_rexmit+0x1c>
 801565e:	4b2f      	ldr	r3, [pc, #188]	@ (801571c <tcp_rexmit+0xcc>)
 8015660:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8015664:	492e      	ldr	r1, [pc, #184]	@ (8015720 <tcp_rexmit+0xd0>)
 8015666:	482f      	ldr	r0, [pc, #188]	@ (8015724 <tcp_rexmit+0xd4>)
 8015668:	f004 fc38 	bl	8019edc <iprintf>

  if (pcb->unacked == NULL) {
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015670:	2b00      	cmp	r3, #0
 8015672:	d102      	bne.n	801567a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015674:	f06f 0305 	mvn.w	r3, #5
 8015678:	e04c      	b.n	8015714 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801567e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015680:	68b8      	ldr	r0, [r7, #8]
 8015682:	f7ff fe2b 	bl	80152dc <tcp_output_segment_busy>
 8015686:	4603      	mov	r3, r0
 8015688:	2b00      	cmp	r3, #0
 801568a:	d002      	beq.n	8015692 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801568c:	f06f 0305 	mvn.w	r3, #5
 8015690:	e040      	b.n	8015714 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	681a      	ldr	r2, [r3, #0]
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	336c      	adds	r3, #108	@ 0x6c
 801569e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80156a0:	e002      	b.n	80156a8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d011      	beq.n	80156d4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	68db      	ldr	r3, [r3, #12]
 80156b6:	685b      	ldr	r3, [r3, #4]
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7f9 fbb7 	bl	800ee2c <lwip_htonl>
 80156be:	4604      	mov	r4, r0
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	68db      	ldr	r3, [r3, #12]
 80156c4:	685b      	ldr	r3, [r3, #4]
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7f9 fbb0 	bl	800ee2c <lwip_htonl>
 80156cc:	4603      	mov	r3, r0
 80156ce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	dbe6      	blt.n	80156a2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	681a      	ldr	r2, [r3, #0]
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	68ba      	ldr	r2, [r7, #8]
 80156e0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d103      	bne.n	80156f2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	2200      	movs	r2, #0
 80156ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80156f8:	2bff      	cmp	r3, #255	@ 0xff
 80156fa:	d007      	beq.n	801570c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015702:	3301      	adds	r3, #1
 8015704:	b2da      	uxtb	r2, r3
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2200      	movs	r2, #0
 8015710:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015712:	2300      	movs	r3, #0
}
 8015714:	4618      	mov	r0, r3
 8015716:	3714      	adds	r7, #20
 8015718:	46bd      	mov	sp, r7
 801571a:	bd90      	pop	{r4, r7, pc}
 801571c:	0801c8b8 	.word	0x0801c8b8
 8015720:	0801cf58 	.word	0x0801cf58
 8015724:	0801c90c 	.word	0x0801c90c

08015728 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d106      	bne.n	8015744 <tcp_rexmit_fast+0x1c>
 8015736:	4b2a      	ldr	r3, [pc, #168]	@ (80157e0 <tcp_rexmit_fast+0xb8>)
 8015738:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801573c:	4929      	ldr	r1, [pc, #164]	@ (80157e4 <tcp_rexmit_fast+0xbc>)
 801573e:	482a      	ldr	r0, [pc, #168]	@ (80157e8 <tcp_rexmit_fast+0xc0>)
 8015740:	f004 fbcc 	bl	8019edc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015748:	2b00      	cmp	r3, #0
 801574a:	d045      	beq.n	80157d8 <tcp_rexmit_fast+0xb0>
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	8b5b      	ldrh	r3, [r3, #26]
 8015750:	f003 0304 	and.w	r3, r3, #4
 8015754:	2b00      	cmp	r3, #0
 8015756:	d13f      	bne.n	80157d8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	f7ff ff79 	bl	8015650 <tcp_rexmit>
 801575e:	4603      	mov	r3, r0
 8015760:	2b00      	cmp	r3, #0
 8015762:	d139      	bne.n	80157d8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015770:	4293      	cmp	r3, r2
 8015772:	bf28      	it	cs
 8015774:	4613      	movcs	r3, r2
 8015776:	b29b      	uxth	r3, r3
 8015778:	2b00      	cmp	r3, #0
 801577a:	da00      	bge.n	801577e <tcp_rexmit_fast+0x56>
 801577c:	3301      	adds	r3, #1
 801577e:	105b      	asrs	r3, r3, #1
 8015780:	b29a      	uxth	r2, r3
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801578e:	461a      	mov	r2, r3
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015794:	005b      	lsls	r3, r3, #1
 8015796:	429a      	cmp	r2, r3
 8015798:	d206      	bcs.n	80157a8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801579e:	005b      	lsls	r3, r3, #1
 80157a0:	b29a      	uxth	r2, r3
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80157b2:	4619      	mov	r1, r3
 80157b4:	0049      	lsls	r1, r1, #1
 80157b6:	440b      	add	r3, r1
 80157b8:	b29b      	uxth	r3, r3
 80157ba:	4413      	add	r3, r2
 80157bc:	b29a      	uxth	r2, r3
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	8b5b      	ldrh	r3, [r3, #26]
 80157c8:	f043 0304 	orr.w	r3, r3, #4
 80157cc:	b29a      	uxth	r2, r3
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2200      	movs	r2, #0
 80157d6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80157d8:	bf00      	nop
 80157da:	3708      	adds	r7, #8
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	0801c8b8 	.word	0x0801c8b8
 80157e4:	0801cf70 	.word	0x0801cf70
 80157e8:	0801c90c 	.word	0x0801c90c

080157ec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b086      	sub	sp, #24
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	60f8      	str	r0, [r7, #12]
 80157f4:	607b      	str	r3, [r7, #4]
 80157f6:	460b      	mov	r3, r1
 80157f8:	817b      	strh	r3, [r7, #10]
 80157fa:	4613      	mov	r3, r2
 80157fc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80157fe:	897a      	ldrh	r2, [r7, #10]
 8015800:	893b      	ldrh	r3, [r7, #8]
 8015802:	4413      	add	r3, r2
 8015804:	b29b      	uxth	r3, r3
 8015806:	3314      	adds	r3, #20
 8015808:	b29b      	uxth	r3, r3
 801580a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801580e:	4619      	mov	r1, r3
 8015810:	2022      	movs	r0, #34	@ 0x22
 8015812:	f7fa fbff 	bl	8010014 <pbuf_alloc>
 8015816:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d04d      	beq.n	80158ba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801581e:	897b      	ldrh	r3, [r7, #10]
 8015820:	3313      	adds	r3, #19
 8015822:	697a      	ldr	r2, [r7, #20]
 8015824:	8952      	ldrh	r2, [r2, #10]
 8015826:	4293      	cmp	r3, r2
 8015828:	db06      	blt.n	8015838 <tcp_output_alloc_header_common+0x4c>
 801582a:	4b26      	ldr	r3, [pc, #152]	@ (80158c4 <tcp_output_alloc_header_common+0xd8>)
 801582c:	f240 7223 	movw	r2, #1827	@ 0x723
 8015830:	4925      	ldr	r1, [pc, #148]	@ (80158c8 <tcp_output_alloc_header_common+0xdc>)
 8015832:	4826      	ldr	r0, [pc, #152]	@ (80158cc <tcp_output_alloc_header_common+0xe0>)
 8015834:	f004 fb52 	bl	8019edc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	685b      	ldr	r3, [r3, #4]
 801583c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801583e:	8c3b      	ldrh	r3, [r7, #32]
 8015840:	4618      	mov	r0, r3
 8015842:	f7f9 fadd 	bl	800ee00 <lwip_htons>
 8015846:	4603      	mov	r3, r0
 8015848:	461a      	mov	r2, r3
 801584a:	693b      	ldr	r3, [r7, #16]
 801584c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801584e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015850:	4618      	mov	r0, r3
 8015852:	f7f9 fad5 	bl	800ee00 <lwip_htons>
 8015856:	4603      	mov	r3, r0
 8015858:	461a      	mov	r2, r3
 801585a:	693b      	ldr	r3, [r7, #16]
 801585c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801585e:	693b      	ldr	r3, [r7, #16]
 8015860:	687a      	ldr	r2, [r7, #4]
 8015862:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015864:	68f8      	ldr	r0, [r7, #12]
 8015866:	f7f9 fae1 	bl	800ee2c <lwip_htonl>
 801586a:	4602      	mov	r2, r0
 801586c:	693b      	ldr	r3, [r7, #16]
 801586e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015870:	897b      	ldrh	r3, [r7, #10]
 8015872:	089b      	lsrs	r3, r3, #2
 8015874:	b29b      	uxth	r3, r3
 8015876:	3305      	adds	r3, #5
 8015878:	b29b      	uxth	r3, r3
 801587a:	031b      	lsls	r3, r3, #12
 801587c:	b29a      	uxth	r2, r3
 801587e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015882:	b29b      	uxth	r3, r3
 8015884:	4313      	orrs	r3, r2
 8015886:	b29b      	uxth	r3, r3
 8015888:	4618      	mov	r0, r3
 801588a:	f7f9 fab9 	bl	800ee00 <lwip_htons>
 801588e:	4603      	mov	r3, r0
 8015890:	461a      	mov	r2, r3
 8015892:	693b      	ldr	r3, [r7, #16]
 8015894:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015896:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015898:	4618      	mov	r0, r3
 801589a:	f7f9 fab1 	bl	800ee00 <lwip_htons>
 801589e:	4603      	mov	r3, r0
 80158a0:	461a      	mov	r2, r3
 80158a2:	693b      	ldr	r3, [r7, #16]
 80158a4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80158a6:	693b      	ldr	r3, [r7, #16]
 80158a8:	2200      	movs	r2, #0
 80158aa:	741a      	strb	r2, [r3, #16]
 80158ac:	2200      	movs	r2, #0
 80158ae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80158b0:	693b      	ldr	r3, [r7, #16]
 80158b2:	2200      	movs	r2, #0
 80158b4:	749a      	strb	r2, [r3, #18]
 80158b6:	2200      	movs	r2, #0
 80158b8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80158ba:	697b      	ldr	r3, [r7, #20]
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3718      	adds	r7, #24
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	0801c8b8 	.word	0x0801c8b8
 80158c8:	0801cf90 	.word	0x0801cf90
 80158cc:	0801c90c 	.word	0x0801c90c

080158d0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80158d0:	b5b0      	push	{r4, r5, r7, lr}
 80158d2:	b08a      	sub	sp, #40	@ 0x28
 80158d4:	af04      	add	r7, sp, #16
 80158d6:	60f8      	str	r0, [r7, #12]
 80158d8:	607b      	str	r3, [r7, #4]
 80158da:	460b      	mov	r3, r1
 80158dc:	817b      	strh	r3, [r7, #10]
 80158de:	4613      	mov	r3, r2
 80158e0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d106      	bne.n	80158f6 <tcp_output_alloc_header+0x26>
 80158e8:	4b15      	ldr	r3, [pc, #84]	@ (8015940 <tcp_output_alloc_header+0x70>)
 80158ea:	f240 7242 	movw	r2, #1858	@ 0x742
 80158ee:	4915      	ldr	r1, [pc, #84]	@ (8015944 <tcp_output_alloc_header+0x74>)
 80158f0:	4815      	ldr	r0, [pc, #84]	@ (8015948 <tcp_output_alloc_header+0x78>)
 80158f2:	f004 faf3 	bl	8019edc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	8adb      	ldrh	r3, [r3, #22]
 80158fe:	68fa      	ldr	r2, [r7, #12]
 8015900:	8b12      	ldrh	r2, [r2, #24]
 8015902:	68f9      	ldr	r1, [r7, #12]
 8015904:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8015906:	893d      	ldrh	r5, [r7, #8]
 8015908:	897c      	ldrh	r4, [r7, #10]
 801590a:	9103      	str	r1, [sp, #12]
 801590c:	2110      	movs	r1, #16
 801590e:	9102      	str	r1, [sp, #8]
 8015910:	9201      	str	r2, [sp, #4]
 8015912:	9300      	str	r3, [sp, #0]
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	462a      	mov	r2, r5
 8015918:	4621      	mov	r1, r4
 801591a:	f7ff ff67 	bl	80157ec <tcp_output_alloc_header_common>
 801591e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d006      	beq.n	8015934 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801592a:	68fa      	ldr	r2, [r7, #12]
 801592c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801592e:	441a      	add	r2, r3
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8015934:	697b      	ldr	r3, [r7, #20]
}
 8015936:	4618      	mov	r0, r3
 8015938:	3718      	adds	r7, #24
 801593a:	46bd      	mov	sp, r7
 801593c:	bdb0      	pop	{r4, r5, r7, pc}
 801593e:	bf00      	nop
 8015940:	0801c8b8 	.word	0x0801c8b8
 8015944:	0801cfc0 	.word	0x0801cfc0
 8015948:	0801c90c 	.word	0x0801c90c

0801594c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b088      	sub	sp, #32
 8015950:	af00      	add	r7, sp, #0
 8015952:	60f8      	str	r0, [r7, #12]
 8015954:	60b9      	str	r1, [r7, #8]
 8015956:	4611      	mov	r1, r2
 8015958:	461a      	mov	r2, r3
 801595a:	460b      	mov	r3, r1
 801595c:	71fb      	strb	r3, [r7, #7]
 801595e:	4613      	mov	r3, r2
 8015960:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015962:	2300      	movs	r3, #0
 8015964:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015966:	68bb      	ldr	r3, [r7, #8]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d106      	bne.n	801597a <tcp_output_fill_options+0x2e>
 801596c:	4b12      	ldr	r3, [pc, #72]	@ (80159b8 <tcp_output_fill_options+0x6c>)
 801596e:	f240 7256 	movw	r2, #1878	@ 0x756
 8015972:	4912      	ldr	r1, [pc, #72]	@ (80159bc <tcp_output_fill_options+0x70>)
 8015974:	4812      	ldr	r0, [pc, #72]	@ (80159c0 <tcp_output_fill_options+0x74>)
 8015976:	f004 fab1 	bl	8019edc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801597a:	68bb      	ldr	r3, [r7, #8]
 801597c:	685b      	ldr	r3, [r3, #4]
 801597e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015980:	69bb      	ldr	r3, [r7, #24]
 8015982:	3314      	adds	r3, #20
 8015984:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015986:	8bfb      	ldrh	r3, [r7, #30]
 8015988:	009b      	lsls	r3, r3, #2
 801598a:	461a      	mov	r2, r3
 801598c:	79fb      	ldrb	r3, [r7, #7]
 801598e:	009b      	lsls	r3, r3, #2
 8015990:	f003 0304 	and.w	r3, r3, #4
 8015994:	4413      	add	r3, r2
 8015996:	3314      	adds	r3, #20
 8015998:	69ba      	ldr	r2, [r7, #24]
 801599a:	4413      	add	r3, r2
 801599c:	697a      	ldr	r2, [r7, #20]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d006      	beq.n	80159b0 <tcp_output_fill_options+0x64>
 80159a2:	4b05      	ldr	r3, [pc, #20]	@ (80159b8 <tcp_output_fill_options+0x6c>)
 80159a4:	f240 7275 	movw	r2, #1909	@ 0x775
 80159a8:	4906      	ldr	r1, [pc, #24]	@ (80159c4 <tcp_output_fill_options+0x78>)
 80159aa:	4805      	ldr	r0, [pc, #20]	@ (80159c0 <tcp_output_fill_options+0x74>)
 80159ac:	f004 fa96 	bl	8019edc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80159b0:	bf00      	nop
 80159b2:	3720      	adds	r7, #32
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bd80      	pop	{r7, pc}
 80159b8:	0801c8b8 	.word	0x0801c8b8
 80159bc:	0801cfe8 	.word	0x0801cfe8
 80159c0:	0801c90c 	.word	0x0801c90c
 80159c4:	0801cee0 	.word	0x0801cee0

080159c8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b08a      	sub	sp, #40	@ 0x28
 80159cc:	af04      	add	r7, sp, #16
 80159ce:	60f8      	str	r0, [r7, #12]
 80159d0:	60b9      	str	r1, [r7, #8]
 80159d2:	607a      	str	r2, [r7, #4]
 80159d4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d106      	bne.n	80159ea <tcp_output_control_segment+0x22>
 80159dc:	4b1c      	ldr	r3, [pc, #112]	@ (8015a50 <tcp_output_control_segment+0x88>)
 80159de:	f240 7287 	movw	r2, #1927	@ 0x787
 80159e2:	491c      	ldr	r1, [pc, #112]	@ (8015a54 <tcp_output_control_segment+0x8c>)
 80159e4:	481c      	ldr	r0, [pc, #112]	@ (8015a58 <tcp_output_control_segment+0x90>)
 80159e6:	f004 fa79 	bl	8019edc <iprintf>

  netif = tcp_route(pcb, src, dst);
 80159ea:	683a      	ldr	r2, [r7, #0]
 80159ec:	6879      	ldr	r1, [r7, #4]
 80159ee:	68f8      	ldr	r0, [r7, #12]
 80159f0:	f7fe ff42 	bl	8014878 <tcp_route>
 80159f4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80159f6:	693b      	ldr	r3, [r7, #16]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d102      	bne.n	8015a02 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80159fc:	23fc      	movs	r3, #252	@ 0xfc
 80159fe:	75fb      	strb	r3, [r7, #23]
 8015a00:	e01c      	b.n	8015a3c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d006      	beq.n	8015a16 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	7adb      	ldrb	r3, [r3, #11]
 8015a0c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	7a9b      	ldrb	r3, [r3, #10]
 8015a12:	757b      	strb	r3, [r7, #21]
 8015a14:	e003      	b.n	8015a1e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015a16:	23ff      	movs	r3, #255	@ 0xff
 8015a18:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015a1e:	7dba      	ldrb	r2, [r7, #22]
 8015a20:	693b      	ldr	r3, [r7, #16]
 8015a22:	9302      	str	r3, [sp, #8]
 8015a24:	2306      	movs	r3, #6
 8015a26:	9301      	str	r3, [sp, #4]
 8015a28:	7d7b      	ldrb	r3, [r7, #21]
 8015a2a:	9300      	str	r3, [sp, #0]
 8015a2c:	4613      	mov	r3, r2
 8015a2e:	683a      	ldr	r2, [r7, #0]
 8015a30:	6879      	ldr	r1, [r7, #4]
 8015a32:	68b8      	ldr	r0, [r7, #8]
 8015a34:	f002 fa4e 	bl	8017ed4 <ip4_output_if>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015a3c:	68b8      	ldr	r0, [r7, #8]
 8015a3e:	f7fa fdcd 	bl	80105dc <pbuf_free>
  return err;
 8015a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3718      	adds	r7, #24
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}
 8015a4e:	bf00      	nop
 8015a50:	0801c8b8 	.word	0x0801c8b8
 8015a54:	0801d010 	.word	0x0801d010
 8015a58:	0801c90c 	.word	0x0801c90c

08015a5c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015a5c:	b590      	push	{r4, r7, lr}
 8015a5e:	b08b      	sub	sp, #44	@ 0x2c
 8015a60:	af04      	add	r7, sp, #16
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	60b9      	str	r1, [r7, #8]
 8015a66:	607a      	str	r2, [r7, #4]
 8015a68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d106      	bne.n	8015a7e <tcp_rst+0x22>
 8015a70:	4b1f      	ldr	r3, [pc, #124]	@ (8015af0 <tcp_rst+0x94>)
 8015a72:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8015a76:	491f      	ldr	r1, [pc, #124]	@ (8015af4 <tcp_rst+0x98>)
 8015a78:	481f      	ldr	r0, [pc, #124]	@ (8015af8 <tcp_rst+0x9c>)
 8015a7a:	f004 fa2f 	bl	8019edc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d106      	bne.n	8015a92 <tcp_rst+0x36>
 8015a84:	4b1a      	ldr	r3, [pc, #104]	@ (8015af0 <tcp_rst+0x94>)
 8015a86:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015a8a:	491c      	ldr	r1, [pc, #112]	@ (8015afc <tcp_rst+0xa0>)
 8015a8c:	481a      	ldr	r0, [pc, #104]	@ (8015af8 <tcp_rst+0x9c>)
 8015a8e:	f004 fa25 	bl	8019edc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015a92:	2300      	movs	r3, #0
 8015a94:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015a96:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015a9a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015a9c:	7dfb      	ldrb	r3, [r7, #23]
 8015a9e:	b29c      	uxth	r4, r3
 8015aa0:	68b8      	ldr	r0, [r7, #8]
 8015aa2:	f7f9 f9c3 	bl	800ee2c <lwip_htonl>
 8015aa6:	4602      	mov	r2, r0
 8015aa8:	8abb      	ldrh	r3, [r7, #20]
 8015aaa:	9303      	str	r3, [sp, #12]
 8015aac:	2314      	movs	r3, #20
 8015aae:	9302      	str	r3, [sp, #8]
 8015ab0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015ab2:	9301      	str	r3, [sp, #4]
 8015ab4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015ab6:	9300      	str	r3, [sp, #0]
 8015ab8:	4613      	mov	r3, r2
 8015aba:	2200      	movs	r2, #0
 8015abc:	4621      	mov	r1, r4
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f7ff fe94 	bl	80157ec <tcp_output_alloc_header_common>
 8015ac4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015ac6:	693b      	ldr	r3, [r7, #16]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d00c      	beq.n	8015ae6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015acc:	7dfb      	ldrb	r3, [r7, #23]
 8015ace:	2200      	movs	r2, #0
 8015ad0:	6939      	ldr	r1, [r7, #16]
 8015ad2:	68f8      	ldr	r0, [r7, #12]
 8015ad4:	f7ff ff3a 	bl	801594c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ada:	683a      	ldr	r2, [r7, #0]
 8015adc:	6939      	ldr	r1, [r7, #16]
 8015ade:	68f8      	ldr	r0, [r7, #12]
 8015ae0:	f7ff ff72 	bl	80159c8 <tcp_output_control_segment>
 8015ae4:	e000      	b.n	8015ae8 <tcp_rst+0x8c>
    return;
 8015ae6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015ae8:	371c      	adds	r7, #28
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd90      	pop	{r4, r7, pc}
 8015aee:	bf00      	nop
 8015af0:	0801c8b8 	.word	0x0801c8b8
 8015af4:	0801d03c 	.word	0x0801d03c
 8015af8:	0801c90c 	.word	0x0801c90c
 8015afc:	0801d058 	.word	0x0801d058

08015b00 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015b00:	b590      	push	{r4, r7, lr}
 8015b02:	b087      	sub	sp, #28
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d106      	bne.n	8015b24 <tcp_send_empty_ack+0x24>
 8015b16:	4b28      	ldr	r3, [pc, #160]	@ (8015bb8 <tcp_send_empty_ack+0xb8>)
 8015b18:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015b1c:	4927      	ldr	r1, [pc, #156]	@ (8015bbc <tcp_send_empty_ack+0xbc>)
 8015b1e:	4828      	ldr	r0, [pc, #160]	@ (8015bc0 <tcp_send_empty_ack+0xc0>)
 8015b20:	f004 f9dc 	bl	8019edc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015b24:	7dfb      	ldrb	r3, [r7, #23]
 8015b26:	009b      	lsls	r3, r3, #2
 8015b28:	b2db      	uxtb	r3, r3
 8015b2a:	f003 0304 	and.w	r3, r3, #4
 8015b2e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015b30:	7d7b      	ldrb	r3, [r7, #21]
 8015b32:	b29c      	uxth	r4, r3
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f7f9 f977 	bl	800ee2c <lwip_htonl>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	2200      	movs	r2, #0
 8015b42:	4621      	mov	r1, r4
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f7ff fec3 	bl	80158d0 <tcp_output_alloc_header>
 8015b4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015b4c:	693b      	ldr	r3, [r7, #16]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d109      	bne.n	8015b66 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	8b5b      	ldrh	r3, [r3, #26]
 8015b56:	f043 0303 	orr.w	r3, r3, #3
 8015b5a:	b29a      	uxth	r2, r3
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015b60:	f06f 0301 	mvn.w	r3, #1
 8015b64:	e023      	b.n	8015bae <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015b66:	7dbb      	ldrb	r3, [r7, #22]
 8015b68:	7dfa      	ldrb	r2, [r7, #23]
 8015b6a:	6939      	ldr	r1, [r7, #16]
 8015b6c:	6878      	ldr	r0, [r7, #4]
 8015b6e:	f7ff feed 	bl	801594c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015b72:	687a      	ldr	r2, [r7, #4]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	3304      	adds	r3, #4
 8015b78:	6939      	ldr	r1, [r7, #16]
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f7ff ff24 	bl	80159c8 <tcp_output_control_segment>
 8015b80:	4603      	mov	r3, r0
 8015b82:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d007      	beq.n	8015b9c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	8b5b      	ldrh	r3, [r3, #26]
 8015b90:	f043 0303 	orr.w	r3, r3, #3
 8015b94:	b29a      	uxth	r2, r3
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	835a      	strh	r2, [r3, #26]
 8015b9a:	e006      	b.n	8015baa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	8b5b      	ldrh	r3, [r3, #26]
 8015ba0:	f023 0303 	bic.w	r3, r3, #3
 8015ba4:	b29a      	uxth	r2, r3
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	371c      	adds	r7, #28
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd90      	pop	{r4, r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	0801c8b8 	.word	0x0801c8b8
 8015bbc:	0801d074 	.word	0x0801d074
 8015bc0:	0801c90c 	.word	0x0801c90c

08015bc4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015bc4:	b590      	push	{r4, r7, lr}
 8015bc6:	b087      	sub	sp, #28
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015bcc:	2300      	movs	r3, #0
 8015bce:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d106      	bne.n	8015be4 <tcp_keepalive+0x20>
 8015bd6:	4b18      	ldr	r3, [pc, #96]	@ (8015c38 <tcp_keepalive+0x74>)
 8015bd8:	f640 0224 	movw	r2, #2084	@ 0x824
 8015bdc:	4917      	ldr	r1, [pc, #92]	@ (8015c3c <tcp_keepalive+0x78>)
 8015bde:	4818      	ldr	r0, [pc, #96]	@ (8015c40 <tcp_keepalive+0x7c>)
 8015be0:	f004 f97c 	bl	8019edc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015be4:	7dfb      	ldrb	r3, [r7, #23]
 8015be6:	b29c      	uxth	r4, r3
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015bec:	3b01      	subs	r3, #1
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f7f9 f91c 	bl	800ee2c <lwip_htonl>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	4621      	mov	r1, r4
 8015bfa:	6878      	ldr	r0, [r7, #4]
 8015bfc:	f7ff fe68 	bl	80158d0 <tcp_output_alloc_header>
 8015c00:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015c02:	693b      	ldr	r3, [r7, #16]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d102      	bne.n	8015c0e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015c08:	f04f 33ff 	mov.w	r3, #4294967295
 8015c0c:	e010      	b.n	8015c30 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015c0e:	7dfb      	ldrb	r3, [r7, #23]
 8015c10:	2200      	movs	r2, #0
 8015c12:	6939      	ldr	r1, [r7, #16]
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f7ff fe99 	bl	801594c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015c1a:	687a      	ldr	r2, [r7, #4]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	3304      	adds	r3, #4
 8015c20:	6939      	ldr	r1, [r7, #16]
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f7ff fed0 	bl	80159c8 <tcp_output_control_segment>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015c30:	4618      	mov	r0, r3
 8015c32:	371c      	adds	r7, #28
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd90      	pop	{r4, r7, pc}
 8015c38:	0801c8b8 	.word	0x0801c8b8
 8015c3c:	0801d094 	.word	0x0801d094
 8015c40:	0801c90c 	.word	0x0801c90c

08015c44 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015c44:	b590      	push	{r4, r7, lr}
 8015c46:	b08b      	sub	sp, #44	@ 0x2c
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d106      	bne.n	8015c66 <tcp_zero_window_probe+0x22>
 8015c58:	4b4c      	ldr	r3, [pc, #304]	@ (8015d8c <tcp_zero_window_probe+0x148>)
 8015c5a:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015c5e:	494c      	ldr	r1, [pc, #304]	@ (8015d90 <tcp_zero_window_probe+0x14c>)
 8015c60:	484c      	ldr	r0, [pc, #304]	@ (8015d94 <tcp_zero_window_probe+0x150>)
 8015c62:	f004 f93b 	bl	8019edc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c6a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015c6c:	6a3b      	ldr	r3, [r7, #32]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d101      	bne.n	8015c76 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015c72:	2300      	movs	r3, #0
 8015c74:	e086      	b.n	8015d84 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015c7c:	2bff      	cmp	r3, #255	@ 0xff
 8015c7e:	d007      	beq.n	8015c90 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015c86:	3301      	adds	r3, #1
 8015c88:	b2da      	uxtb	r2, r3
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015c90:	6a3b      	ldr	r3, [r7, #32]
 8015c92:	68db      	ldr	r3, [r3, #12]
 8015c94:	899b      	ldrh	r3, [r3, #12]
 8015c96:	b29b      	uxth	r3, r3
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7f9 f8b1 	bl	800ee00 <lwip_htons>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	b2db      	uxtb	r3, r3
 8015ca2:	f003 0301 	and.w	r3, r3, #1
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d005      	beq.n	8015cb6 <tcp_zero_window_probe+0x72>
 8015caa:	6a3b      	ldr	r3, [r7, #32]
 8015cac:	891b      	ldrh	r3, [r3, #8]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d101      	bne.n	8015cb6 <tcp_zero_window_probe+0x72>
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	e000      	b.n	8015cb8 <tcp_zero_window_probe+0x74>
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015cba:	7ffb      	ldrb	r3, [r7, #31]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	bf0c      	ite	eq
 8015cc0:	2301      	moveq	r3, #1
 8015cc2:	2300      	movne	r3, #0
 8015cc4:	b2db      	uxtb	r3, r3
 8015cc6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ccc:	b299      	uxth	r1, r3
 8015cce:	6a3b      	ldr	r3, [r7, #32]
 8015cd0:	68db      	ldr	r3, [r3, #12]
 8015cd2:	685b      	ldr	r3, [r3, #4]
 8015cd4:	8bba      	ldrh	r2, [r7, #28]
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	f7ff fdfa 	bl	80158d0 <tcp_output_alloc_header>
 8015cdc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015cde:	69bb      	ldr	r3, [r7, #24]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d102      	bne.n	8015cea <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ce8:	e04c      	b.n	8015d84 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015cea:	69bb      	ldr	r3, [r7, #24]
 8015cec:	685b      	ldr	r3, [r3, #4]
 8015cee:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015cf0:	7ffb      	ldrb	r3, [r7, #31]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d011      	beq.n	8015d1a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015cf6:	697b      	ldr	r3, [r7, #20]
 8015cf8:	899b      	ldrh	r3, [r3, #12]
 8015cfa:	b29b      	uxth	r3, r3
 8015cfc:	b21b      	sxth	r3, r3
 8015cfe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015d02:	b21c      	sxth	r4, r3
 8015d04:	2011      	movs	r0, #17
 8015d06:	f7f9 f87b 	bl	800ee00 <lwip_htons>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	b21b      	sxth	r3, r3
 8015d0e:	4323      	orrs	r3, r4
 8015d10:	b21b      	sxth	r3, r3
 8015d12:	b29a      	uxth	r2, r3
 8015d14:	697b      	ldr	r3, [r7, #20]
 8015d16:	819a      	strh	r2, [r3, #12]
 8015d18:	e010      	b.n	8015d3c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015d1a:	69bb      	ldr	r3, [r7, #24]
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	3314      	adds	r3, #20
 8015d20:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015d22:	6a3b      	ldr	r3, [r7, #32]
 8015d24:	6858      	ldr	r0, [r3, #4]
 8015d26:	6a3b      	ldr	r3, [r7, #32]
 8015d28:	685b      	ldr	r3, [r3, #4]
 8015d2a:	891a      	ldrh	r2, [r3, #8]
 8015d2c:	6a3b      	ldr	r3, [r7, #32]
 8015d2e:	891b      	ldrh	r3, [r3, #8]
 8015d30:	1ad3      	subs	r3, r2, r3
 8015d32:	b29b      	uxth	r3, r3
 8015d34:	2201      	movs	r2, #1
 8015d36:	6939      	ldr	r1, [r7, #16]
 8015d38:	f7fa fe56 	bl	80109e8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015d3c:	6a3b      	ldr	r3, [r7, #32]
 8015d3e:	68db      	ldr	r3, [r3, #12]
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7f9 f872 	bl	800ee2c <lwip_htonl>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	1ad3      	subs	r3, r2, r3
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	da02      	bge.n	8015d60 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	68fa      	ldr	r2, [r7, #12]
 8015d5e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d64:	2200      	movs	r2, #0
 8015d66:	69b9      	ldr	r1, [r7, #24]
 8015d68:	6878      	ldr	r0, [r7, #4]
 8015d6a:	f7ff fdef 	bl	801594c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015d6e:	687a      	ldr	r2, [r7, #4]
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	3304      	adds	r3, #4
 8015d74:	69b9      	ldr	r1, [r7, #24]
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f7ff fe26 	bl	80159c8 <tcp_output_control_segment>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015d80:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015d84:	4618      	mov	r0, r3
 8015d86:	372c      	adds	r7, #44	@ 0x2c
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	bd90      	pop	{r4, r7, pc}
 8015d8c:	0801c8b8 	.word	0x0801c8b8
 8015d90:	0801d0b0 	.word	0x0801d0b0
 8015d94:	0801c90c 	.word	0x0801c90c

08015d98 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b082      	sub	sp, #8
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015da0:	f7fa ff10 	bl	8010bc4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015da4:	4b0a      	ldr	r3, [pc, #40]	@ (8015dd0 <tcpip_tcp_timer+0x38>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d103      	bne.n	8015db4 <tcpip_tcp_timer+0x1c>
 8015dac:	4b09      	ldr	r3, [pc, #36]	@ (8015dd4 <tcpip_tcp_timer+0x3c>)
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d005      	beq.n	8015dc0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015db4:	2200      	movs	r2, #0
 8015db6:	4908      	ldr	r1, [pc, #32]	@ (8015dd8 <tcpip_tcp_timer+0x40>)
 8015db8:	20fa      	movs	r0, #250	@ 0xfa
 8015dba:	f000 f8f3 	bl	8015fa4 <sys_timeout>
 8015dbe:	e003      	b.n	8015dc8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015dc0:	4b06      	ldr	r3, [pc, #24]	@ (8015ddc <tcpip_tcp_timer+0x44>)
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	601a      	str	r2, [r3, #0]
  }
}
 8015dc6:	bf00      	nop
 8015dc8:	bf00      	nop
 8015dca:	3708      	adds	r7, #8
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}
 8015dd0:	200274b8 	.word	0x200274b8
 8015dd4:	200274bc 	.word	0x200274bc
 8015dd8:	08015d99 	.word	0x08015d99
 8015ddc:	20027504 	.word	0x20027504

08015de0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015de4:	4b0a      	ldr	r3, [pc, #40]	@ (8015e10 <tcp_timer_needed+0x30>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d10f      	bne.n	8015e0c <tcp_timer_needed+0x2c>
 8015dec:	4b09      	ldr	r3, [pc, #36]	@ (8015e14 <tcp_timer_needed+0x34>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d103      	bne.n	8015dfc <tcp_timer_needed+0x1c>
 8015df4:	4b08      	ldr	r3, [pc, #32]	@ (8015e18 <tcp_timer_needed+0x38>)
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d007      	beq.n	8015e0c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015dfc:	4b04      	ldr	r3, [pc, #16]	@ (8015e10 <tcp_timer_needed+0x30>)
 8015dfe:	2201      	movs	r2, #1
 8015e00:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015e02:	2200      	movs	r2, #0
 8015e04:	4905      	ldr	r1, [pc, #20]	@ (8015e1c <tcp_timer_needed+0x3c>)
 8015e06:	20fa      	movs	r0, #250	@ 0xfa
 8015e08:	f000 f8cc 	bl	8015fa4 <sys_timeout>
  }
}
 8015e0c:	bf00      	nop
 8015e0e:	bd80      	pop	{r7, pc}
 8015e10:	20027504 	.word	0x20027504
 8015e14:	200274b8 	.word	0x200274b8
 8015e18:	200274bc 	.word	0x200274bc
 8015e1c:	08015d99 	.word	0x08015d99

08015e20 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b086      	sub	sp, #24
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	60b9      	str	r1, [r7, #8]
 8015e2a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015e2c:	200a      	movs	r0, #10
 8015e2e:	f7f9 fcbb 	bl	800f7a8 <memp_malloc>
 8015e32:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d109      	bne.n	8015e4e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d151      	bne.n	8015ee4 <sys_timeout_abs+0xc4>
 8015e40:	4b2a      	ldr	r3, [pc, #168]	@ (8015eec <sys_timeout_abs+0xcc>)
 8015e42:	22be      	movs	r2, #190	@ 0xbe
 8015e44:	492a      	ldr	r1, [pc, #168]	@ (8015ef0 <sys_timeout_abs+0xd0>)
 8015e46:	482b      	ldr	r0, [pc, #172]	@ (8015ef4 <sys_timeout_abs+0xd4>)
 8015e48:	f004 f848 	bl	8019edc <iprintf>
    return;
 8015e4c:	e04a      	b.n	8015ee4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015e4e:	693b      	ldr	r3, [r7, #16]
 8015e50:	2200      	movs	r2, #0
 8015e52:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015e54:	693b      	ldr	r3, [r7, #16]
 8015e56:	68ba      	ldr	r2, [r7, #8]
 8015e58:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015e5a:	693b      	ldr	r3, [r7, #16]
 8015e5c:	687a      	ldr	r2, [r7, #4]
 8015e5e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015e60:	693b      	ldr	r3, [r7, #16]
 8015e62:	68fa      	ldr	r2, [r7, #12]
 8015e64:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015e66:	4b24      	ldr	r3, [pc, #144]	@ (8015ef8 <sys_timeout_abs+0xd8>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d103      	bne.n	8015e76 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015e6e:	4a22      	ldr	r2, [pc, #136]	@ (8015ef8 <sys_timeout_abs+0xd8>)
 8015e70:	693b      	ldr	r3, [r7, #16]
 8015e72:	6013      	str	r3, [r2, #0]
    return;
 8015e74:	e037      	b.n	8015ee6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015e76:	693b      	ldr	r3, [r7, #16]
 8015e78:	685a      	ldr	r2, [r3, #4]
 8015e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8015ef8 <sys_timeout_abs+0xd8>)
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	685b      	ldr	r3, [r3, #4]
 8015e80:	1ad3      	subs	r3, r2, r3
 8015e82:	0fdb      	lsrs	r3, r3, #31
 8015e84:	f003 0301 	and.w	r3, r3, #1
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d007      	beq.n	8015e9e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8015ef8 <sys_timeout_abs+0xd8>)
 8015e90:	681a      	ldr	r2, [r3, #0]
 8015e92:	693b      	ldr	r3, [r7, #16]
 8015e94:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015e96:	4a18      	ldr	r2, [pc, #96]	@ (8015ef8 <sys_timeout_abs+0xd8>)
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	6013      	str	r3, [r2, #0]
 8015e9c:	e023      	b.n	8015ee6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015e9e:	4b16      	ldr	r3, [pc, #88]	@ (8015ef8 <sys_timeout_abs+0xd8>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	617b      	str	r3, [r7, #20]
 8015ea4:	e01a      	b.n	8015edc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015ea6:	697b      	ldr	r3, [r7, #20]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d00b      	beq.n	8015ec6 <sys_timeout_abs+0xa6>
 8015eae:	693b      	ldr	r3, [r7, #16]
 8015eb0:	685a      	ldr	r2, [r3, #4]
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	685b      	ldr	r3, [r3, #4]
 8015eb8:	1ad3      	subs	r3, r2, r3
 8015eba:	0fdb      	lsrs	r3, r3, #31
 8015ebc:	f003 0301 	and.w	r3, r3, #1
 8015ec0:	b2db      	uxtb	r3, r3
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d007      	beq.n	8015ed6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	681a      	ldr	r2, [r3, #0]
 8015eca:	693b      	ldr	r3, [r7, #16]
 8015ecc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	693a      	ldr	r2, [r7, #16]
 8015ed2:	601a      	str	r2, [r3, #0]
        break;
 8015ed4:	e007      	b.n	8015ee6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015ed6:	697b      	ldr	r3, [r7, #20]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	617b      	str	r3, [r7, #20]
 8015edc:	697b      	ldr	r3, [r7, #20]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d1e1      	bne.n	8015ea6 <sys_timeout_abs+0x86>
 8015ee2:	e000      	b.n	8015ee6 <sys_timeout_abs+0xc6>
    return;
 8015ee4:	bf00      	nop
      }
    }
  }
}
 8015ee6:	3718      	adds	r7, #24
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bd80      	pop	{r7, pc}
 8015eec:	0801d0d4 	.word	0x0801d0d4
 8015ef0:	0801d108 	.word	0x0801d108
 8015ef4:	0801d148 	.word	0x0801d148
 8015ef8:	200274fc 	.word	0x200274fc

08015efc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b086      	sub	sp, #24
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015f08:	697b      	ldr	r3, [r7, #20]
 8015f0a:	685b      	ldr	r3, [r3, #4]
 8015f0c:	4798      	blx	r3

  now = sys_now();
 8015f0e:	f7f4 fad1 	bl	800a4b4 <sys_now>
 8015f12:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015f14:	697b      	ldr	r3, [r7, #20]
 8015f16:	681a      	ldr	r2, [r3, #0]
 8015f18:	4b0f      	ldr	r3, [pc, #60]	@ (8015f58 <lwip_cyclic_timer+0x5c>)
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	4413      	add	r3, r2
 8015f1e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015f20:	68fa      	ldr	r2, [r7, #12]
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	1ad3      	subs	r3, r2, r3
 8015f26:	0fdb      	lsrs	r3, r3, #31
 8015f28:	f003 0301 	and.w	r3, r3, #1
 8015f2c:	b2db      	uxtb	r3, r3
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d009      	beq.n	8015f46 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015f32:	697b      	ldr	r3, [r7, #20]
 8015f34:	681a      	ldr	r2, [r3, #0]
 8015f36:	693b      	ldr	r3, [r7, #16]
 8015f38:	4413      	add	r3, r2
 8015f3a:	687a      	ldr	r2, [r7, #4]
 8015f3c:	4907      	ldr	r1, [pc, #28]	@ (8015f5c <lwip_cyclic_timer+0x60>)
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f7ff ff6e 	bl	8015e20 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015f44:	e004      	b.n	8015f50 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015f46:	687a      	ldr	r2, [r7, #4]
 8015f48:	4904      	ldr	r1, [pc, #16]	@ (8015f5c <lwip_cyclic_timer+0x60>)
 8015f4a:	68f8      	ldr	r0, [r7, #12]
 8015f4c:	f7ff ff68 	bl	8015e20 <sys_timeout_abs>
}
 8015f50:	bf00      	nop
 8015f52:	3718      	adds	r7, #24
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}
 8015f58:	20027500 	.word	0x20027500
 8015f5c:	08015efd 	.word	0x08015efd

08015f60 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015f66:	2301      	movs	r3, #1
 8015f68:	607b      	str	r3, [r7, #4]
 8015f6a:	e00e      	b.n	8015f8a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8015f9c <sys_timeouts_init+0x3c>)
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	00db      	lsls	r3, r3, #3
 8015f78:	4a08      	ldr	r2, [pc, #32]	@ (8015f9c <sys_timeouts_init+0x3c>)
 8015f7a:	4413      	add	r3, r2
 8015f7c:	461a      	mov	r2, r3
 8015f7e:	4908      	ldr	r1, [pc, #32]	@ (8015fa0 <sys_timeouts_init+0x40>)
 8015f80:	f000 f810 	bl	8015fa4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	3301      	adds	r3, #1
 8015f88:	607b      	str	r3, [r7, #4]
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	2b02      	cmp	r3, #2
 8015f8e:	d9ed      	bls.n	8015f6c <sys_timeouts_init+0xc>
  }
}
 8015f90:	bf00      	nop
 8015f92:	bf00      	nop
 8015f94:	3708      	adds	r7, #8
 8015f96:	46bd      	mov	sp, r7
 8015f98:	bd80      	pop	{r7, pc}
 8015f9a:	bf00      	nop
 8015f9c:	0801e1d8 	.word	0x0801e1d8
 8015fa0:	08015efd 	.word	0x08015efd

08015fa4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b086      	sub	sp, #24
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	60f8      	str	r0, [r7, #12]
 8015fac:	60b9      	str	r1, [r7, #8]
 8015fae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015fb6:	d306      	bcc.n	8015fc6 <sys_timeout+0x22>
 8015fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8015fe4 <sys_timeout+0x40>)
 8015fba:	f240 1229 	movw	r2, #297	@ 0x129
 8015fbe:	490a      	ldr	r1, [pc, #40]	@ (8015fe8 <sys_timeout+0x44>)
 8015fc0:	480a      	ldr	r0, [pc, #40]	@ (8015fec <sys_timeout+0x48>)
 8015fc2:	f003 ff8b 	bl	8019edc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015fc6:	f7f4 fa75 	bl	800a4b4 <sys_now>
 8015fca:	4602      	mov	r2, r0
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	4413      	add	r3, r2
 8015fd0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	68b9      	ldr	r1, [r7, #8]
 8015fd6:	6978      	ldr	r0, [r7, #20]
 8015fd8:	f7ff ff22 	bl	8015e20 <sys_timeout_abs>
#endif
}
 8015fdc:	bf00      	nop
 8015fde:	3718      	adds	r7, #24
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd80      	pop	{r7, pc}
 8015fe4:	0801d0d4 	.word	0x0801d0d4
 8015fe8:	0801d170 	.word	0x0801d170
 8015fec:	0801d148 	.word	0x0801d148

08015ff0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b084      	sub	sp, #16
 8015ff4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015ff6:	f7f4 fa5d 	bl	800a4b4 <sys_now>
 8015ffa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015ffc:	4b17      	ldr	r3, [pc, #92]	@ (801605c <sys_check_timeouts+0x6c>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016002:	68bb      	ldr	r3, [r7, #8]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d022      	beq.n	801604e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	685b      	ldr	r3, [r3, #4]
 801600c:	68fa      	ldr	r2, [r7, #12]
 801600e:	1ad3      	subs	r3, r2, r3
 8016010:	0fdb      	lsrs	r3, r3, #31
 8016012:	f003 0301 	and.w	r3, r3, #1
 8016016:	b2db      	uxtb	r3, r3
 8016018:	2b00      	cmp	r3, #0
 801601a:	d11a      	bne.n	8016052 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	4a0e      	ldr	r2, [pc, #56]	@ (801605c <sys_check_timeouts+0x6c>)
 8016022:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016024:	68bb      	ldr	r3, [r7, #8]
 8016026:	689b      	ldr	r3, [r3, #8]
 8016028:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	68db      	ldr	r3, [r3, #12]
 801602e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016030:	68bb      	ldr	r3, [r7, #8]
 8016032:	685b      	ldr	r3, [r3, #4]
 8016034:	4a0a      	ldr	r2, [pc, #40]	@ (8016060 <sys_check_timeouts+0x70>)
 8016036:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016038:	68b9      	ldr	r1, [r7, #8]
 801603a:	200a      	movs	r0, #10
 801603c:	f7f9 fc2a 	bl	800f894 <memp_free>
    if (handler != NULL) {
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d0da      	beq.n	8015ffc <sys_check_timeouts+0xc>
      handler(arg);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6838      	ldr	r0, [r7, #0]
 801604a:	4798      	blx	r3
  do {
 801604c:	e7d6      	b.n	8015ffc <sys_check_timeouts+0xc>
      return;
 801604e:	bf00      	nop
 8016050:	e000      	b.n	8016054 <sys_check_timeouts+0x64>
      return;
 8016052:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016054:	3710      	adds	r7, #16
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}
 801605a:	bf00      	nop
 801605c:	200274fc 	.word	0x200274fc
 8016060:	20027500 	.word	0x20027500

08016064 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b082      	sub	sp, #8
 8016068:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801606a:	4b16      	ldr	r3, [pc, #88]	@ (80160c4 <sys_timeouts_sleeptime+0x60>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d102      	bne.n	8016078 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016072:	f04f 33ff 	mov.w	r3, #4294967295
 8016076:	e020      	b.n	80160ba <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016078:	f7f4 fa1c 	bl	800a4b4 <sys_now>
 801607c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801607e:	4b11      	ldr	r3, [pc, #68]	@ (80160c4 <sys_timeouts_sleeptime+0x60>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	685a      	ldr	r2, [r3, #4]
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	1ad3      	subs	r3, r2, r3
 8016088:	0fdb      	lsrs	r3, r3, #31
 801608a:	f003 0301 	and.w	r3, r3, #1
 801608e:	b2db      	uxtb	r3, r3
 8016090:	2b00      	cmp	r3, #0
 8016092:	d001      	beq.n	8016098 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016094:	2300      	movs	r3, #0
 8016096:	e010      	b.n	80160ba <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016098:	4b0a      	ldr	r3, [pc, #40]	@ (80160c4 <sys_timeouts_sleeptime+0x60>)
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	685a      	ldr	r2, [r3, #4]
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	1ad3      	subs	r3, r2, r3
 80160a2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	da06      	bge.n	80160b8 <sys_timeouts_sleeptime+0x54>
 80160aa:	4b07      	ldr	r3, [pc, #28]	@ (80160c8 <sys_timeouts_sleeptime+0x64>)
 80160ac:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80160b0:	4906      	ldr	r1, [pc, #24]	@ (80160cc <sys_timeouts_sleeptime+0x68>)
 80160b2:	4807      	ldr	r0, [pc, #28]	@ (80160d0 <sys_timeouts_sleeptime+0x6c>)
 80160b4:	f003 ff12 	bl	8019edc <iprintf>
    return ret;
 80160b8:	683b      	ldr	r3, [r7, #0]
  }
}
 80160ba:	4618      	mov	r0, r3
 80160bc:	3708      	adds	r7, #8
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}
 80160c2:	bf00      	nop
 80160c4:	200274fc 	.word	0x200274fc
 80160c8:	0801d0d4 	.word	0x0801d0d4
 80160cc:	0801d1a8 	.word	0x0801d1a8
 80160d0:	0801d148 	.word	0x0801d148

080160d4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80160d8:	f003 fe00 	bl	8019cdc <rand>
 80160dc:	4603      	mov	r3, r0
 80160de:	b29b      	uxth	r3, r3
 80160e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80160e4:	b29b      	uxth	r3, r3
 80160e6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80160ea:	b29a      	uxth	r2, r3
 80160ec:	4b01      	ldr	r3, [pc, #4]	@ (80160f4 <udp_init+0x20>)
 80160ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80160f0:	bf00      	nop
 80160f2:	bd80      	pop	{r7, pc}
 80160f4:	2000002c 	.word	0x2000002c

080160f8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80160f8:	b480      	push	{r7}
 80160fa:	b083      	sub	sp, #12
 80160fc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80160fe:	2300      	movs	r3, #0
 8016100:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016102:	4b17      	ldr	r3, [pc, #92]	@ (8016160 <udp_new_port+0x68>)
 8016104:	881b      	ldrh	r3, [r3, #0]
 8016106:	1c5a      	adds	r2, r3, #1
 8016108:	b291      	uxth	r1, r2
 801610a:	4a15      	ldr	r2, [pc, #84]	@ (8016160 <udp_new_port+0x68>)
 801610c:	8011      	strh	r1, [r2, #0]
 801610e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016112:	4293      	cmp	r3, r2
 8016114:	d103      	bne.n	801611e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016116:	4b12      	ldr	r3, [pc, #72]	@ (8016160 <udp_new_port+0x68>)
 8016118:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801611c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801611e:	4b11      	ldr	r3, [pc, #68]	@ (8016164 <udp_new_port+0x6c>)
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	603b      	str	r3, [r7, #0]
 8016124:	e011      	b.n	801614a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	8a5a      	ldrh	r2, [r3, #18]
 801612a:	4b0d      	ldr	r3, [pc, #52]	@ (8016160 <udp_new_port+0x68>)
 801612c:	881b      	ldrh	r3, [r3, #0]
 801612e:	429a      	cmp	r2, r3
 8016130:	d108      	bne.n	8016144 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016132:	88fb      	ldrh	r3, [r7, #6]
 8016134:	3301      	adds	r3, #1
 8016136:	80fb      	strh	r3, [r7, #6]
 8016138:	88fb      	ldrh	r3, [r7, #6]
 801613a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801613e:	d3e0      	bcc.n	8016102 <udp_new_port+0xa>
        return 0;
 8016140:	2300      	movs	r3, #0
 8016142:	e007      	b.n	8016154 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	68db      	ldr	r3, [r3, #12]
 8016148:	603b      	str	r3, [r7, #0]
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d1ea      	bne.n	8016126 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016150:	4b03      	ldr	r3, [pc, #12]	@ (8016160 <udp_new_port+0x68>)
 8016152:	881b      	ldrh	r3, [r3, #0]
}
 8016154:	4618      	mov	r0, r3
 8016156:	370c      	adds	r7, #12
 8016158:	46bd      	mov	sp, r7
 801615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615e:	4770      	bx	lr
 8016160:	2000002c 	.word	0x2000002c
 8016164:	20027508 	.word	0x20027508

08016168 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b084      	sub	sp, #16
 801616c:	af00      	add	r7, sp, #0
 801616e:	60f8      	str	r0, [r7, #12]
 8016170:	60b9      	str	r1, [r7, #8]
 8016172:	4613      	mov	r3, r2
 8016174:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d105      	bne.n	8016188 <udp_input_local_match+0x20>
 801617c:	4b27      	ldr	r3, [pc, #156]	@ (801621c <udp_input_local_match+0xb4>)
 801617e:	2287      	movs	r2, #135	@ 0x87
 8016180:	4927      	ldr	r1, [pc, #156]	@ (8016220 <udp_input_local_match+0xb8>)
 8016182:	4828      	ldr	r0, [pc, #160]	@ (8016224 <udp_input_local_match+0xbc>)
 8016184:	f003 feaa 	bl	8019edc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d105      	bne.n	801619a <udp_input_local_match+0x32>
 801618e:	4b23      	ldr	r3, [pc, #140]	@ (801621c <udp_input_local_match+0xb4>)
 8016190:	2288      	movs	r2, #136	@ 0x88
 8016192:	4925      	ldr	r1, [pc, #148]	@ (8016228 <udp_input_local_match+0xc0>)
 8016194:	4823      	ldr	r0, [pc, #140]	@ (8016224 <udp_input_local_match+0xbc>)
 8016196:	f003 fea1 	bl	8019edc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	7a1b      	ldrb	r3, [r3, #8]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d00b      	beq.n	80161ba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	7a1a      	ldrb	r2, [r3, #8]
 80161a6:	4b21      	ldr	r3, [pc, #132]	@ (801622c <udp_input_local_match+0xc4>)
 80161a8:	685b      	ldr	r3, [r3, #4]
 80161aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80161ae:	3301      	adds	r3, #1
 80161b0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80161b2:	429a      	cmp	r2, r3
 80161b4:	d001      	beq.n	80161ba <udp_input_local_match+0x52>
    return 0;
 80161b6:	2300      	movs	r3, #0
 80161b8:	e02b      	b.n	8016212 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80161ba:	79fb      	ldrb	r3, [r7, #7]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d018      	beq.n	80161f2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d013      	beq.n	80161ee <udp_input_local_match+0x86>
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d00f      	beq.n	80161ee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80161ce:	4b17      	ldr	r3, [pc, #92]	@ (801622c <udp_input_local_match+0xc4>)
 80161d0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80161d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161d6:	d00a      	beq.n	80161ee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	681a      	ldr	r2, [r3, #0]
 80161dc:	4b13      	ldr	r3, [pc, #76]	@ (801622c <udp_input_local_match+0xc4>)
 80161de:	695b      	ldr	r3, [r3, #20]
 80161e0:	405a      	eors	r2, r3
 80161e2:	68bb      	ldr	r3, [r7, #8]
 80161e4:	3308      	adds	r3, #8
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d110      	bne.n	8016210 <udp_input_local_match+0xa8>
          return 1;
 80161ee:	2301      	movs	r3, #1
 80161f0:	e00f      	b.n	8016212 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d009      	beq.n	801620c <udp_input_local_match+0xa4>
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d005      	beq.n	801620c <udp_input_local_match+0xa4>
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	681a      	ldr	r2, [r3, #0]
 8016204:	4b09      	ldr	r3, [pc, #36]	@ (801622c <udp_input_local_match+0xc4>)
 8016206:	695b      	ldr	r3, [r3, #20]
 8016208:	429a      	cmp	r2, r3
 801620a:	d101      	bne.n	8016210 <udp_input_local_match+0xa8>
        return 1;
 801620c:	2301      	movs	r3, #1
 801620e:	e000      	b.n	8016212 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016210:	2300      	movs	r3, #0
}
 8016212:	4618      	mov	r0, r3
 8016214:	3710      	adds	r7, #16
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}
 801621a:	bf00      	nop
 801621c:	0801d1bc 	.word	0x0801d1bc
 8016220:	0801d1ec 	.word	0x0801d1ec
 8016224:	0801d210 	.word	0x0801d210
 8016228:	0801d238 	.word	0x0801d238
 801622c:	200243ac 	.word	0x200243ac

08016230 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016230:	b590      	push	{r4, r7, lr}
 8016232:	b08d      	sub	sp, #52	@ 0x34
 8016234:	af02      	add	r7, sp, #8
 8016236:	6078      	str	r0, [r7, #4]
 8016238:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801623a:	2300      	movs	r3, #0
 801623c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d105      	bne.n	8016250 <udp_input+0x20>
 8016244:	4b7c      	ldr	r3, [pc, #496]	@ (8016438 <udp_input+0x208>)
 8016246:	22cf      	movs	r2, #207	@ 0xcf
 8016248:	497c      	ldr	r1, [pc, #496]	@ (801643c <udp_input+0x20c>)
 801624a:	487d      	ldr	r0, [pc, #500]	@ (8016440 <udp_input+0x210>)
 801624c:	f003 fe46 	bl	8019edc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016250:	683b      	ldr	r3, [r7, #0]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d105      	bne.n	8016262 <udp_input+0x32>
 8016256:	4b78      	ldr	r3, [pc, #480]	@ (8016438 <udp_input+0x208>)
 8016258:	22d0      	movs	r2, #208	@ 0xd0
 801625a:	497a      	ldr	r1, [pc, #488]	@ (8016444 <udp_input+0x214>)
 801625c:	4878      	ldr	r0, [pc, #480]	@ (8016440 <udp_input+0x210>)
 801625e:	f003 fe3d 	bl	8019edc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	895b      	ldrh	r3, [r3, #10]
 8016266:	2b07      	cmp	r3, #7
 8016268:	d803      	bhi.n	8016272 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f7fa f9b6 	bl	80105dc <pbuf_free>
    goto end;
 8016270:	e0de      	b.n	8016430 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	685b      	ldr	r3, [r3, #4]
 8016276:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016278:	4b73      	ldr	r3, [pc, #460]	@ (8016448 <udp_input+0x218>)
 801627a:	695b      	ldr	r3, [r3, #20]
 801627c:	4a72      	ldr	r2, [pc, #456]	@ (8016448 <udp_input+0x218>)
 801627e:	6812      	ldr	r2, [r2, #0]
 8016280:	4611      	mov	r1, r2
 8016282:	4618      	mov	r0, r3
 8016284:	f001 fefe 	bl	8018084 <ip4_addr_isbroadcast_u32>
 8016288:	4603      	mov	r3, r0
 801628a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801628c:	697b      	ldr	r3, [r7, #20]
 801628e:	881b      	ldrh	r3, [r3, #0]
 8016290:	b29b      	uxth	r3, r3
 8016292:	4618      	mov	r0, r3
 8016294:	f7f8 fdb4 	bl	800ee00 <lwip_htons>
 8016298:	4603      	mov	r3, r0
 801629a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	885b      	ldrh	r3, [r3, #2]
 80162a0:	b29b      	uxth	r3, r3
 80162a2:	4618      	mov	r0, r3
 80162a4:	f7f8 fdac 	bl	800ee00 <lwip_htons>
 80162a8:	4603      	mov	r3, r0
 80162aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80162ac:	2300      	movs	r3, #0
 80162ae:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80162b0:	2300      	movs	r3, #0
 80162b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80162b4:	2300      	movs	r3, #0
 80162b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80162b8:	4b64      	ldr	r3, [pc, #400]	@ (801644c <udp_input+0x21c>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80162be:	e054      	b.n	801636a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80162c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162c2:	8a5b      	ldrh	r3, [r3, #18]
 80162c4:	89fa      	ldrh	r2, [r7, #14]
 80162c6:	429a      	cmp	r2, r3
 80162c8:	d14a      	bne.n	8016360 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80162ca:	7cfb      	ldrb	r3, [r7, #19]
 80162cc:	461a      	mov	r2, r3
 80162ce:	6839      	ldr	r1, [r7, #0]
 80162d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80162d2:	f7ff ff49 	bl	8016168 <udp_input_local_match>
 80162d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d041      	beq.n	8016360 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80162dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162de:	7c1b      	ldrb	r3, [r3, #16]
 80162e0:	f003 0304 	and.w	r3, r3, #4
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d11d      	bne.n	8016324 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80162e8:	69fb      	ldr	r3, [r7, #28]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d102      	bne.n	80162f4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80162ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162f0:	61fb      	str	r3, [r7, #28]
 80162f2:	e017      	b.n	8016324 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80162f4:	7cfb      	ldrb	r3, [r7, #19]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d014      	beq.n	8016324 <udp_input+0xf4>
 80162fa:	4b53      	ldr	r3, [pc, #332]	@ (8016448 <udp_input+0x218>)
 80162fc:	695b      	ldr	r3, [r3, #20]
 80162fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016302:	d10f      	bne.n	8016324 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016304:	69fb      	ldr	r3, [r7, #28]
 8016306:	681a      	ldr	r2, [r3, #0]
 8016308:	683b      	ldr	r3, [r7, #0]
 801630a:	3304      	adds	r3, #4
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	429a      	cmp	r2, r3
 8016310:	d008      	beq.n	8016324 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	3304      	adds	r3, #4
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	429a      	cmp	r2, r3
 801631e:	d101      	bne.n	8016324 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016322:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016326:	8a9b      	ldrh	r3, [r3, #20]
 8016328:	8a3a      	ldrh	r2, [r7, #16]
 801632a:	429a      	cmp	r2, r3
 801632c:	d118      	bne.n	8016360 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016330:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016332:	2b00      	cmp	r3, #0
 8016334:	d005      	beq.n	8016342 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016338:	685a      	ldr	r2, [r3, #4]
 801633a:	4b43      	ldr	r3, [pc, #268]	@ (8016448 <udp_input+0x218>)
 801633c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801633e:	429a      	cmp	r2, r3
 8016340:	d10e      	bne.n	8016360 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016342:	6a3b      	ldr	r3, [r7, #32]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d014      	beq.n	8016372 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801634a:	68da      	ldr	r2, [r3, #12]
 801634c:	6a3b      	ldr	r3, [r7, #32]
 801634e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016350:	4b3e      	ldr	r3, [pc, #248]	@ (801644c <udp_input+0x21c>)
 8016352:	681a      	ldr	r2, [r3, #0]
 8016354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016356:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016358:	4a3c      	ldr	r2, [pc, #240]	@ (801644c <udp_input+0x21c>)
 801635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801635c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801635e:	e008      	b.n	8016372 <udp_input+0x142>
      }
    }

    prev = pcb;
 8016360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016362:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016366:	68db      	ldr	r3, [r3, #12]
 8016368:	627b      	str	r3, [r7, #36]	@ 0x24
 801636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801636c:	2b00      	cmp	r3, #0
 801636e:	d1a7      	bne.n	80162c0 <udp_input+0x90>
 8016370:	e000      	b.n	8016374 <udp_input+0x144>
        break;
 8016372:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016376:	2b00      	cmp	r3, #0
 8016378:	d101      	bne.n	801637e <udp_input+0x14e>
    pcb = uncon_pcb;
 801637a:	69fb      	ldr	r3, [r7, #28]
 801637c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016380:	2b00      	cmp	r3, #0
 8016382:	d002      	beq.n	801638a <udp_input+0x15a>
    for_us = 1;
 8016384:	2301      	movs	r3, #1
 8016386:	76fb      	strb	r3, [r7, #27]
 8016388:	e00a      	b.n	80163a0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801638a:	683b      	ldr	r3, [r7, #0]
 801638c:	3304      	adds	r3, #4
 801638e:	681a      	ldr	r2, [r3, #0]
 8016390:	4b2d      	ldr	r3, [pc, #180]	@ (8016448 <udp_input+0x218>)
 8016392:	695b      	ldr	r3, [r3, #20]
 8016394:	429a      	cmp	r2, r3
 8016396:	bf0c      	ite	eq
 8016398:	2301      	moveq	r3, #1
 801639a:	2300      	movne	r3, #0
 801639c:	b2db      	uxtb	r3, r3
 801639e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80163a0:	7efb      	ldrb	r3, [r7, #27]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d041      	beq.n	801642a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80163a6:	2108      	movs	r1, #8
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f7fa f891 	bl	80104d0 <pbuf_remove_header>
 80163ae:	4603      	mov	r3, r0
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d00a      	beq.n	80163ca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80163b4:	4b20      	ldr	r3, [pc, #128]	@ (8016438 <udp_input+0x208>)
 80163b6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80163ba:	4925      	ldr	r1, [pc, #148]	@ (8016450 <udp_input+0x220>)
 80163bc:	4820      	ldr	r0, [pc, #128]	@ (8016440 <udp_input+0x210>)
 80163be:	f003 fd8d 	bl	8019edc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80163c2:	6878      	ldr	r0, [r7, #4]
 80163c4:	f7fa f90a 	bl	80105dc <pbuf_free>
      goto end;
 80163c8:	e032      	b.n	8016430 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80163ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d012      	beq.n	80163f6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80163d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163d2:	699b      	ldr	r3, [r3, #24]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d00a      	beq.n	80163ee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80163d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163da:	699c      	ldr	r4, [r3, #24]
 80163dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163de:	69d8      	ldr	r0, [r3, #28]
 80163e0:	8a3b      	ldrh	r3, [r7, #16]
 80163e2:	9300      	str	r3, [sp, #0]
 80163e4:	4b1b      	ldr	r3, [pc, #108]	@ (8016454 <udp_input+0x224>)
 80163e6:	687a      	ldr	r2, [r7, #4]
 80163e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80163ea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80163ec:	e021      	b.n	8016432 <udp_input+0x202>
        pbuf_free(p);
 80163ee:	6878      	ldr	r0, [r7, #4]
 80163f0:	f7fa f8f4 	bl	80105dc <pbuf_free>
        goto end;
 80163f4:	e01c      	b.n	8016430 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80163f6:	7cfb      	ldrb	r3, [r7, #19]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d112      	bne.n	8016422 <udp_input+0x1f2>
 80163fc:	4b12      	ldr	r3, [pc, #72]	@ (8016448 <udp_input+0x218>)
 80163fe:	695b      	ldr	r3, [r3, #20]
 8016400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016404:	2be0      	cmp	r3, #224	@ 0xe0
 8016406:	d00c      	beq.n	8016422 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016408:	4b0f      	ldr	r3, [pc, #60]	@ (8016448 <udp_input+0x218>)
 801640a:	899b      	ldrh	r3, [r3, #12]
 801640c:	3308      	adds	r3, #8
 801640e:	b29b      	uxth	r3, r3
 8016410:	b21b      	sxth	r3, r3
 8016412:	4619      	mov	r1, r3
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	f7fa f8ce 	bl	80105b6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801641a:	2103      	movs	r1, #3
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f001 fb11 	bl	8017a44 <icmp_dest_unreach>
      pbuf_free(p);
 8016422:	6878      	ldr	r0, [r7, #4]
 8016424:	f7fa f8da 	bl	80105dc <pbuf_free>
  return;
 8016428:	e003      	b.n	8016432 <udp_input+0x202>
    pbuf_free(p);
 801642a:	6878      	ldr	r0, [r7, #4]
 801642c:	f7fa f8d6 	bl	80105dc <pbuf_free>
  return;
 8016430:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016432:	372c      	adds	r7, #44	@ 0x2c
 8016434:	46bd      	mov	sp, r7
 8016436:	bd90      	pop	{r4, r7, pc}
 8016438:	0801d1bc 	.word	0x0801d1bc
 801643c:	0801d260 	.word	0x0801d260
 8016440:	0801d210 	.word	0x0801d210
 8016444:	0801d278 	.word	0x0801d278
 8016448:	200243ac 	.word	0x200243ac
 801644c:	20027508 	.word	0x20027508
 8016450:	0801d294 	.word	0x0801d294
 8016454:	200243bc 	.word	0x200243bc

08016458 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b088      	sub	sp, #32
 801645c:	af02      	add	r7, sp, #8
 801645e:	60f8      	str	r0, [r7, #12]
 8016460:	60b9      	str	r1, [r7, #8]
 8016462:	607a      	str	r2, [r7, #4]
 8016464:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d109      	bne.n	8016480 <udp_sendto+0x28>
 801646c:	4b23      	ldr	r3, [pc, #140]	@ (80164fc <udp_sendto+0xa4>)
 801646e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016472:	4923      	ldr	r1, [pc, #140]	@ (8016500 <udp_sendto+0xa8>)
 8016474:	4823      	ldr	r0, [pc, #140]	@ (8016504 <udp_sendto+0xac>)
 8016476:	f003 fd31 	bl	8019edc <iprintf>
 801647a:	f06f 030f 	mvn.w	r3, #15
 801647e:	e038      	b.n	80164f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d109      	bne.n	801649a <udp_sendto+0x42>
 8016486:	4b1d      	ldr	r3, [pc, #116]	@ (80164fc <udp_sendto+0xa4>)
 8016488:	f240 2219 	movw	r2, #537	@ 0x219
 801648c:	491e      	ldr	r1, [pc, #120]	@ (8016508 <udp_sendto+0xb0>)
 801648e:	481d      	ldr	r0, [pc, #116]	@ (8016504 <udp_sendto+0xac>)
 8016490:	f003 fd24 	bl	8019edc <iprintf>
 8016494:	f06f 030f 	mvn.w	r3, #15
 8016498:	e02b      	b.n	80164f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d109      	bne.n	80164b4 <udp_sendto+0x5c>
 80164a0:	4b16      	ldr	r3, [pc, #88]	@ (80164fc <udp_sendto+0xa4>)
 80164a2:	f240 221a 	movw	r2, #538	@ 0x21a
 80164a6:	4919      	ldr	r1, [pc, #100]	@ (801650c <udp_sendto+0xb4>)
 80164a8:	4816      	ldr	r0, [pc, #88]	@ (8016504 <udp_sendto+0xac>)
 80164aa:	f003 fd17 	bl	8019edc <iprintf>
 80164ae:	f06f 030f 	mvn.w	r3, #15
 80164b2:	e01e      	b.n	80164f2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	7a1b      	ldrb	r3, [r3, #8]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d006      	beq.n	80164ca <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	7a1b      	ldrb	r3, [r3, #8]
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7f9 fcfd 	bl	800fec0 <netif_get_by_index>
 80164c6:	6178      	str	r0, [r7, #20]
 80164c8:	e003      	b.n	80164d2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	f001 fb44 	bl	8017b58 <ip4_route>
 80164d0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80164d2:	697b      	ldr	r3, [r7, #20]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d102      	bne.n	80164de <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80164d8:	f06f 0303 	mvn.w	r3, #3
 80164dc:	e009      	b.n	80164f2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80164de:	887a      	ldrh	r2, [r7, #2]
 80164e0:	697b      	ldr	r3, [r7, #20]
 80164e2:	9300      	str	r3, [sp, #0]
 80164e4:	4613      	mov	r3, r2
 80164e6:	687a      	ldr	r2, [r7, #4]
 80164e8:	68b9      	ldr	r1, [r7, #8]
 80164ea:	68f8      	ldr	r0, [r7, #12]
 80164ec:	f000 f810 	bl	8016510 <udp_sendto_if>
 80164f0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3718      	adds	r7, #24
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}
 80164fa:	bf00      	nop
 80164fc:	0801d1bc 	.word	0x0801d1bc
 8016500:	0801d2e0 	.word	0x0801d2e0
 8016504:	0801d210 	.word	0x0801d210
 8016508:	0801d2f8 	.word	0x0801d2f8
 801650c:	0801d314 	.word	0x0801d314

08016510 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b088      	sub	sp, #32
 8016514:	af02      	add	r7, sp, #8
 8016516:	60f8      	str	r0, [r7, #12]
 8016518:	60b9      	str	r1, [r7, #8]
 801651a:	607a      	str	r2, [r7, #4]
 801651c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d109      	bne.n	8016538 <udp_sendto_if+0x28>
 8016524:	4b2e      	ldr	r3, [pc, #184]	@ (80165e0 <udp_sendto_if+0xd0>)
 8016526:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801652a:	492e      	ldr	r1, [pc, #184]	@ (80165e4 <udp_sendto_if+0xd4>)
 801652c:	482e      	ldr	r0, [pc, #184]	@ (80165e8 <udp_sendto_if+0xd8>)
 801652e:	f003 fcd5 	bl	8019edc <iprintf>
 8016532:	f06f 030f 	mvn.w	r3, #15
 8016536:	e04f      	b.n	80165d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016538:	68bb      	ldr	r3, [r7, #8]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d109      	bne.n	8016552 <udp_sendto_if+0x42>
 801653e:	4b28      	ldr	r3, [pc, #160]	@ (80165e0 <udp_sendto_if+0xd0>)
 8016540:	f240 2281 	movw	r2, #641	@ 0x281
 8016544:	4929      	ldr	r1, [pc, #164]	@ (80165ec <udp_sendto_if+0xdc>)
 8016546:	4828      	ldr	r0, [pc, #160]	@ (80165e8 <udp_sendto_if+0xd8>)
 8016548:	f003 fcc8 	bl	8019edc <iprintf>
 801654c:	f06f 030f 	mvn.w	r3, #15
 8016550:	e042      	b.n	80165d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d109      	bne.n	801656c <udp_sendto_if+0x5c>
 8016558:	4b21      	ldr	r3, [pc, #132]	@ (80165e0 <udp_sendto_if+0xd0>)
 801655a:	f240 2282 	movw	r2, #642	@ 0x282
 801655e:	4924      	ldr	r1, [pc, #144]	@ (80165f0 <udp_sendto_if+0xe0>)
 8016560:	4821      	ldr	r0, [pc, #132]	@ (80165e8 <udp_sendto_if+0xd8>)
 8016562:	f003 fcbb 	bl	8019edc <iprintf>
 8016566:	f06f 030f 	mvn.w	r3, #15
 801656a:	e035      	b.n	80165d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801656c:	6a3b      	ldr	r3, [r7, #32]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d109      	bne.n	8016586 <udp_sendto_if+0x76>
 8016572:	4b1b      	ldr	r3, [pc, #108]	@ (80165e0 <udp_sendto_if+0xd0>)
 8016574:	f240 2283 	movw	r2, #643	@ 0x283
 8016578:	491e      	ldr	r1, [pc, #120]	@ (80165f4 <udp_sendto_if+0xe4>)
 801657a:	481b      	ldr	r0, [pc, #108]	@ (80165e8 <udp_sendto_if+0xd8>)
 801657c:	f003 fcae 	bl	8019edc <iprintf>
 8016580:	f06f 030f 	mvn.w	r3, #15
 8016584:	e028      	b.n	80165d8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d009      	beq.n	80165a0 <udp_sendto_if+0x90>
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d005      	beq.n	80165a0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801659c:	2be0      	cmp	r3, #224	@ 0xe0
 801659e:	d103      	bne.n	80165a8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80165a0:	6a3b      	ldr	r3, [r7, #32]
 80165a2:	3304      	adds	r3, #4
 80165a4:	617b      	str	r3, [r7, #20]
 80165a6:	e00b      	b.n	80165c0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	6a3b      	ldr	r3, [r7, #32]
 80165ae:	3304      	adds	r3, #4
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d002      	beq.n	80165bc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80165b6:	f06f 0303 	mvn.w	r3, #3
 80165ba:	e00d      	b.n	80165d8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80165c0:	887a      	ldrh	r2, [r7, #2]
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	9301      	str	r3, [sp, #4]
 80165c6:	6a3b      	ldr	r3, [r7, #32]
 80165c8:	9300      	str	r3, [sp, #0]
 80165ca:	4613      	mov	r3, r2
 80165cc:	687a      	ldr	r2, [r7, #4]
 80165ce:	68b9      	ldr	r1, [r7, #8]
 80165d0:	68f8      	ldr	r0, [r7, #12]
 80165d2:	f000 f811 	bl	80165f8 <udp_sendto_if_src>
 80165d6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3718      	adds	r7, #24
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}
 80165e0:	0801d1bc 	.word	0x0801d1bc
 80165e4:	0801d330 	.word	0x0801d330
 80165e8:	0801d210 	.word	0x0801d210
 80165ec:	0801d34c 	.word	0x0801d34c
 80165f0:	0801d368 	.word	0x0801d368
 80165f4:	0801d388 	.word	0x0801d388

080165f8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b08c      	sub	sp, #48	@ 0x30
 80165fc:	af04      	add	r7, sp, #16
 80165fe:	60f8      	str	r0, [r7, #12]
 8016600:	60b9      	str	r1, [r7, #8]
 8016602:	607a      	str	r2, [r7, #4]
 8016604:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d109      	bne.n	8016620 <udp_sendto_if_src+0x28>
 801660c:	4b65      	ldr	r3, [pc, #404]	@ (80167a4 <udp_sendto_if_src+0x1ac>)
 801660e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8016612:	4965      	ldr	r1, [pc, #404]	@ (80167a8 <udp_sendto_if_src+0x1b0>)
 8016614:	4865      	ldr	r0, [pc, #404]	@ (80167ac <udp_sendto_if_src+0x1b4>)
 8016616:	f003 fc61 	bl	8019edc <iprintf>
 801661a:	f06f 030f 	mvn.w	r3, #15
 801661e:	e0bc      	b.n	801679a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d109      	bne.n	801663a <udp_sendto_if_src+0x42>
 8016626:	4b5f      	ldr	r3, [pc, #380]	@ (80167a4 <udp_sendto_if_src+0x1ac>)
 8016628:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801662c:	4960      	ldr	r1, [pc, #384]	@ (80167b0 <udp_sendto_if_src+0x1b8>)
 801662e:	485f      	ldr	r0, [pc, #380]	@ (80167ac <udp_sendto_if_src+0x1b4>)
 8016630:	f003 fc54 	bl	8019edc <iprintf>
 8016634:	f06f 030f 	mvn.w	r3, #15
 8016638:	e0af      	b.n	801679a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d109      	bne.n	8016654 <udp_sendto_if_src+0x5c>
 8016640:	4b58      	ldr	r3, [pc, #352]	@ (80167a4 <udp_sendto_if_src+0x1ac>)
 8016642:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8016646:	495b      	ldr	r1, [pc, #364]	@ (80167b4 <udp_sendto_if_src+0x1bc>)
 8016648:	4858      	ldr	r0, [pc, #352]	@ (80167ac <udp_sendto_if_src+0x1b4>)
 801664a:	f003 fc47 	bl	8019edc <iprintf>
 801664e:	f06f 030f 	mvn.w	r3, #15
 8016652:	e0a2      	b.n	801679a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016656:	2b00      	cmp	r3, #0
 8016658:	d109      	bne.n	801666e <udp_sendto_if_src+0x76>
 801665a:	4b52      	ldr	r3, [pc, #328]	@ (80167a4 <udp_sendto_if_src+0x1ac>)
 801665c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8016660:	4955      	ldr	r1, [pc, #340]	@ (80167b8 <udp_sendto_if_src+0x1c0>)
 8016662:	4852      	ldr	r0, [pc, #328]	@ (80167ac <udp_sendto_if_src+0x1b4>)
 8016664:	f003 fc3a 	bl	8019edc <iprintf>
 8016668:	f06f 030f 	mvn.w	r3, #15
 801666c:	e095      	b.n	801679a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016670:	2b00      	cmp	r3, #0
 8016672:	d109      	bne.n	8016688 <udp_sendto_if_src+0x90>
 8016674:	4b4b      	ldr	r3, [pc, #300]	@ (80167a4 <udp_sendto_if_src+0x1ac>)
 8016676:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801667a:	4950      	ldr	r1, [pc, #320]	@ (80167bc <udp_sendto_if_src+0x1c4>)
 801667c:	484b      	ldr	r0, [pc, #300]	@ (80167ac <udp_sendto_if_src+0x1b4>)
 801667e:	f003 fc2d 	bl	8019edc <iprintf>
 8016682:	f06f 030f 	mvn.w	r3, #15
 8016686:	e088      	b.n	801679a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	8a5b      	ldrh	r3, [r3, #18]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d10f      	bne.n	80166b0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016690:	68f9      	ldr	r1, [r7, #12]
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	8a5b      	ldrh	r3, [r3, #18]
 8016696:	461a      	mov	r2, r3
 8016698:	68f8      	ldr	r0, [r7, #12]
 801669a:	f000 f893 	bl	80167c4 <udp_bind>
 801669e:	4603      	mov	r3, r0
 80166a0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80166a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d002      	beq.n	80166b0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80166aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80166ae:	e074      	b.n	801679a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	891b      	ldrh	r3, [r3, #8]
 80166b4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80166b8:	4293      	cmp	r3, r2
 80166ba:	d902      	bls.n	80166c2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80166bc:	f04f 33ff 	mov.w	r3, #4294967295
 80166c0:	e06b      	b.n	801679a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80166c2:	2108      	movs	r1, #8
 80166c4:	68b8      	ldr	r0, [r7, #8]
 80166c6:	f7f9 fef3 	bl	80104b0 <pbuf_add_header>
 80166ca:	4603      	mov	r3, r0
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d015      	beq.n	80166fc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80166d0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80166d4:	2108      	movs	r1, #8
 80166d6:	2022      	movs	r0, #34	@ 0x22
 80166d8:	f7f9 fc9c 	bl	8010014 <pbuf_alloc>
 80166dc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80166de:	69fb      	ldr	r3, [r7, #28]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d102      	bne.n	80166ea <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80166e4:	f04f 33ff 	mov.w	r3, #4294967295
 80166e8:	e057      	b.n	801679a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80166ea:	68bb      	ldr	r3, [r7, #8]
 80166ec:	891b      	ldrh	r3, [r3, #8]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d006      	beq.n	8016700 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80166f2:	68b9      	ldr	r1, [r7, #8]
 80166f4:	69f8      	ldr	r0, [r7, #28]
 80166f6:	f7fa f895 	bl	8010824 <pbuf_chain>
 80166fa:	e001      	b.n	8016700 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80166fc:	68bb      	ldr	r3, [r7, #8]
 80166fe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016700:	69fb      	ldr	r3, [r7, #28]
 8016702:	895b      	ldrh	r3, [r3, #10]
 8016704:	2b07      	cmp	r3, #7
 8016706:	d806      	bhi.n	8016716 <udp_sendto_if_src+0x11e>
 8016708:	4b26      	ldr	r3, [pc, #152]	@ (80167a4 <udp_sendto_if_src+0x1ac>)
 801670a:	f240 320d 	movw	r2, #781	@ 0x30d
 801670e:	492c      	ldr	r1, [pc, #176]	@ (80167c0 <udp_sendto_if_src+0x1c8>)
 8016710:	4826      	ldr	r0, [pc, #152]	@ (80167ac <udp_sendto_if_src+0x1b4>)
 8016712:	f003 fbe3 	bl	8019edc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016716:	69fb      	ldr	r3, [r7, #28]
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	8a5b      	ldrh	r3, [r3, #18]
 8016720:	4618      	mov	r0, r3
 8016722:	f7f8 fb6d 	bl	800ee00 <lwip_htons>
 8016726:	4603      	mov	r3, r0
 8016728:	461a      	mov	r2, r3
 801672a:	697b      	ldr	r3, [r7, #20]
 801672c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801672e:	887b      	ldrh	r3, [r7, #2]
 8016730:	4618      	mov	r0, r3
 8016732:	f7f8 fb65 	bl	800ee00 <lwip_htons>
 8016736:	4603      	mov	r3, r0
 8016738:	461a      	mov	r2, r3
 801673a:	697b      	ldr	r3, [r7, #20]
 801673c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801673e:	697b      	ldr	r3, [r7, #20]
 8016740:	2200      	movs	r2, #0
 8016742:	719a      	strb	r2, [r3, #6]
 8016744:	2200      	movs	r2, #0
 8016746:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016748:	69fb      	ldr	r3, [r7, #28]
 801674a:	891b      	ldrh	r3, [r3, #8]
 801674c:	4618      	mov	r0, r3
 801674e:	f7f8 fb57 	bl	800ee00 <lwip_htons>
 8016752:	4603      	mov	r3, r0
 8016754:	461a      	mov	r2, r3
 8016756:	697b      	ldr	r3, [r7, #20]
 8016758:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801675a:	2311      	movs	r3, #17
 801675c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	7adb      	ldrb	r3, [r3, #11]
 8016762:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	7a9b      	ldrb	r3, [r3, #10]
 8016768:	7cb9      	ldrb	r1, [r7, #18]
 801676a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801676c:	9202      	str	r2, [sp, #8]
 801676e:	7cfa      	ldrb	r2, [r7, #19]
 8016770:	9201      	str	r2, [sp, #4]
 8016772:	9300      	str	r3, [sp, #0]
 8016774:	460b      	mov	r3, r1
 8016776:	687a      	ldr	r2, [r7, #4]
 8016778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801677a:	69f8      	ldr	r0, [r7, #28]
 801677c:	f001 fbd4 	bl	8017f28 <ip4_output_if_src>
 8016780:	4603      	mov	r3, r0
 8016782:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016784:	69fa      	ldr	r2, [r7, #28]
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	429a      	cmp	r2, r3
 801678a:	d004      	beq.n	8016796 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801678c:	69f8      	ldr	r0, [r7, #28]
 801678e:	f7f9 ff25 	bl	80105dc <pbuf_free>
    q = NULL;
 8016792:	2300      	movs	r3, #0
 8016794:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016796:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801679a:	4618      	mov	r0, r3
 801679c:	3720      	adds	r7, #32
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}
 80167a2:	bf00      	nop
 80167a4:	0801d1bc 	.word	0x0801d1bc
 80167a8:	0801d3a8 	.word	0x0801d3a8
 80167ac:	0801d210 	.word	0x0801d210
 80167b0:	0801d3c8 	.word	0x0801d3c8
 80167b4:	0801d3e8 	.word	0x0801d3e8
 80167b8:	0801d40c 	.word	0x0801d40c
 80167bc:	0801d430 	.word	0x0801d430
 80167c0:	0801d454 	.word	0x0801d454

080167c4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b086      	sub	sp, #24
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	60f8      	str	r0, [r7, #12]
 80167cc:	60b9      	str	r1, [r7, #8]
 80167ce:	4613      	mov	r3, r2
 80167d0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80167d2:	68bb      	ldr	r3, [r7, #8]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d101      	bne.n	80167dc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80167d8:	4b39      	ldr	r3, [pc, #228]	@ (80168c0 <udp_bind+0xfc>)
 80167da:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d109      	bne.n	80167f6 <udp_bind+0x32>
 80167e2:	4b38      	ldr	r3, [pc, #224]	@ (80168c4 <udp_bind+0x100>)
 80167e4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80167e8:	4937      	ldr	r1, [pc, #220]	@ (80168c8 <udp_bind+0x104>)
 80167ea:	4838      	ldr	r0, [pc, #224]	@ (80168cc <udp_bind+0x108>)
 80167ec:	f003 fb76 	bl	8019edc <iprintf>
 80167f0:	f06f 030f 	mvn.w	r3, #15
 80167f4:	e060      	b.n	80168b8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80167f6:	2300      	movs	r3, #0
 80167f8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80167fa:	4b35      	ldr	r3, [pc, #212]	@ (80168d0 <udp_bind+0x10c>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	617b      	str	r3, [r7, #20]
 8016800:	e009      	b.n	8016816 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016802:	68fa      	ldr	r2, [r7, #12]
 8016804:	697b      	ldr	r3, [r7, #20]
 8016806:	429a      	cmp	r2, r3
 8016808:	d102      	bne.n	8016810 <udp_bind+0x4c>
      rebind = 1;
 801680a:	2301      	movs	r3, #1
 801680c:	74fb      	strb	r3, [r7, #19]
      break;
 801680e:	e005      	b.n	801681c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016810:	697b      	ldr	r3, [r7, #20]
 8016812:	68db      	ldr	r3, [r3, #12]
 8016814:	617b      	str	r3, [r7, #20]
 8016816:	697b      	ldr	r3, [r7, #20]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d1f2      	bne.n	8016802 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801681c:	88fb      	ldrh	r3, [r7, #6]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d109      	bne.n	8016836 <udp_bind+0x72>
    port = udp_new_port();
 8016822:	f7ff fc69 	bl	80160f8 <udp_new_port>
 8016826:	4603      	mov	r3, r0
 8016828:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801682a:	88fb      	ldrh	r3, [r7, #6]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d12c      	bne.n	801688a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016830:	f06f 0307 	mvn.w	r3, #7
 8016834:	e040      	b.n	80168b8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016836:	4b26      	ldr	r3, [pc, #152]	@ (80168d0 <udp_bind+0x10c>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	617b      	str	r3, [r7, #20]
 801683c:	e022      	b.n	8016884 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801683e:	68fa      	ldr	r2, [r7, #12]
 8016840:	697b      	ldr	r3, [r7, #20]
 8016842:	429a      	cmp	r2, r3
 8016844:	d01b      	beq.n	801687e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016846:	697b      	ldr	r3, [r7, #20]
 8016848:	8a5b      	ldrh	r3, [r3, #18]
 801684a:	88fa      	ldrh	r2, [r7, #6]
 801684c:	429a      	cmp	r2, r3
 801684e:	d116      	bne.n	801687e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	681a      	ldr	r2, [r3, #0]
 8016854:	68bb      	ldr	r3, [r7, #8]
 8016856:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016858:	429a      	cmp	r2, r3
 801685a:	d00d      	beq.n	8016878 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801685c:	68bb      	ldr	r3, [r7, #8]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d00a      	beq.n	8016878 <udp_bind+0xb4>
 8016862:	68bb      	ldr	r3, [r7, #8]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d006      	beq.n	8016878 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801686a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801686c:	2b00      	cmp	r3, #0
 801686e:	d003      	beq.n	8016878 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016870:	697b      	ldr	r3, [r7, #20]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d102      	bne.n	801687e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016878:	f06f 0307 	mvn.w	r3, #7
 801687c:	e01c      	b.n	80168b8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801687e:	697b      	ldr	r3, [r7, #20]
 8016880:	68db      	ldr	r3, [r3, #12]
 8016882:	617b      	str	r3, [r7, #20]
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d1d9      	bne.n	801683e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801688a:	68bb      	ldr	r3, [r7, #8]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d002      	beq.n	8016896 <udp_bind+0xd2>
 8016890:	68bb      	ldr	r3, [r7, #8]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	e000      	b.n	8016898 <udp_bind+0xd4>
 8016896:	2300      	movs	r3, #0
 8016898:	68fa      	ldr	r2, [r7, #12]
 801689a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	88fa      	ldrh	r2, [r7, #6]
 80168a0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80168a2:	7cfb      	ldrb	r3, [r7, #19]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d106      	bne.n	80168b6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80168a8:	4b09      	ldr	r3, [pc, #36]	@ (80168d0 <udp_bind+0x10c>)
 80168aa:	681a      	ldr	r2, [r3, #0]
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80168b0:	4a07      	ldr	r2, [pc, #28]	@ (80168d0 <udp_bind+0x10c>)
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80168b6:	2300      	movs	r3, #0
}
 80168b8:	4618      	mov	r0, r3
 80168ba:	3718      	adds	r7, #24
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}
 80168c0:	0801e1f0 	.word	0x0801e1f0
 80168c4:	0801d1bc 	.word	0x0801d1bc
 80168c8:	0801d484 	.word	0x0801d484
 80168cc:	0801d210 	.word	0x0801d210
 80168d0:	20027508 	.word	0x20027508

080168d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b084      	sub	sp, #16
 80168d8:	af00      	add	r7, sp, #0
 80168da:	60f8      	str	r0, [r7, #12]
 80168dc:	60b9      	str	r1, [r7, #8]
 80168de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d107      	bne.n	80168f6 <udp_recv+0x22>
 80168e6:	4b08      	ldr	r3, [pc, #32]	@ (8016908 <udp_recv+0x34>)
 80168e8:	f240 428a 	movw	r2, #1162	@ 0x48a
 80168ec:	4907      	ldr	r1, [pc, #28]	@ (801690c <udp_recv+0x38>)
 80168ee:	4808      	ldr	r0, [pc, #32]	@ (8016910 <udp_recv+0x3c>)
 80168f0:	f003 faf4 	bl	8019edc <iprintf>
 80168f4:	e005      	b.n	8016902 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	68ba      	ldr	r2, [r7, #8]
 80168fa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	687a      	ldr	r2, [r7, #4]
 8016900:	61da      	str	r2, [r3, #28]
}
 8016902:	3710      	adds	r7, #16
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}
 8016908:	0801d1bc 	.word	0x0801d1bc
 801690c:	0801d4f0 	.word	0x0801d4f0
 8016910:	0801d210 	.word	0x0801d210

08016914 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b082      	sub	sp, #8
 8016918:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801691a:	2000      	movs	r0, #0
 801691c:	f7f8 ff44 	bl	800f7a8 <memp_malloc>
 8016920:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d007      	beq.n	8016938 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016928:	2220      	movs	r2, #32
 801692a:	2100      	movs	r1, #0
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f003 fc2d 	bl	801a18c <memset>
    pcb->ttl = UDP_TTL;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	22ff      	movs	r2, #255	@ 0xff
 8016936:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016938:	687b      	ldr	r3, [r7, #4]
}
 801693a:	4618      	mov	r0, r3
 801693c:	3708      	adds	r7, #8
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}
	...

08016944 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016944:	b480      	push	{r7}
 8016946:	b085      	sub	sp, #20
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
 801694c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d01e      	beq.n	8016992 <udp_netif_ip_addr_changed+0x4e>
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d01a      	beq.n	8016992 <udp_netif_ip_addr_changed+0x4e>
 801695c:	683b      	ldr	r3, [r7, #0]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d017      	beq.n	8016992 <udp_netif_ip_addr_changed+0x4e>
 8016962:	683b      	ldr	r3, [r7, #0]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d013      	beq.n	8016992 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801696a:	4b0d      	ldr	r3, [pc, #52]	@ (80169a0 <udp_netif_ip_addr_changed+0x5c>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	60fb      	str	r3, [r7, #12]
 8016970:	e00c      	b.n	801698c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	681a      	ldr	r2, [r3, #0]
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	429a      	cmp	r2, r3
 801697c:	d103      	bne.n	8016986 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801697e:	683b      	ldr	r3, [r7, #0]
 8016980:	681a      	ldr	r2, [r3, #0]
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	68db      	ldr	r3, [r3, #12]
 801698a:	60fb      	str	r3, [r7, #12]
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d1ef      	bne.n	8016972 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016992:	bf00      	nop
 8016994:	3714      	adds	r7, #20
 8016996:	46bd      	mov	sp, r7
 8016998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699c:	4770      	bx	lr
 801699e:	bf00      	nop
 80169a0:	20027508 	.word	0x20027508

080169a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b082      	sub	sp, #8
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80169ac:	4915      	ldr	r1, [pc, #84]	@ (8016a04 <etharp_free_entry+0x60>)
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	4613      	mov	r3, r2
 80169b2:	005b      	lsls	r3, r3, #1
 80169b4:	4413      	add	r3, r2
 80169b6:	00db      	lsls	r3, r3, #3
 80169b8:	440b      	add	r3, r1
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d013      	beq.n	80169e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80169c0:	4910      	ldr	r1, [pc, #64]	@ (8016a04 <etharp_free_entry+0x60>)
 80169c2:	687a      	ldr	r2, [r7, #4]
 80169c4:	4613      	mov	r3, r2
 80169c6:	005b      	lsls	r3, r3, #1
 80169c8:	4413      	add	r3, r2
 80169ca:	00db      	lsls	r3, r3, #3
 80169cc:	440b      	add	r3, r1
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	4618      	mov	r0, r3
 80169d2:	f7f9 fe03 	bl	80105dc <pbuf_free>
    arp_table[i].q = NULL;
 80169d6:	490b      	ldr	r1, [pc, #44]	@ (8016a04 <etharp_free_entry+0x60>)
 80169d8:	687a      	ldr	r2, [r7, #4]
 80169da:	4613      	mov	r3, r2
 80169dc:	005b      	lsls	r3, r3, #1
 80169de:	4413      	add	r3, r2
 80169e0:	00db      	lsls	r3, r3, #3
 80169e2:	440b      	add	r3, r1
 80169e4:	2200      	movs	r2, #0
 80169e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80169e8:	4906      	ldr	r1, [pc, #24]	@ (8016a04 <etharp_free_entry+0x60>)
 80169ea:	687a      	ldr	r2, [r7, #4]
 80169ec:	4613      	mov	r3, r2
 80169ee:	005b      	lsls	r3, r3, #1
 80169f0:	4413      	add	r3, r2
 80169f2:	00db      	lsls	r3, r3, #3
 80169f4:	440b      	add	r3, r1
 80169f6:	3314      	adds	r3, #20
 80169f8:	2200      	movs	r2, #0
 80169fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80169fc:	bf00      	nop
 80169fe:	3708      	adds	r7, #8
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}
 8016a04:	2002750c 	.word	0x2002750c

08016a08 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b082      	sub	sp, #8
 8016a0c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a0e:	2300      	movs	r3, #0
 8016a10:	607b      	str	r3, [r7, #4]
 8016a12:	e096      	b.n	8016b42 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016a14:	494f      	ldr	r1, [pc, #316]	@ (8016b54 <etharp_tmr+0x14c>)
 8016a16:	687a      	ldr	r2, [r7, #4]
 8016a18:	4613      	mov	r3, r2
 8016a1a:	005b      	lsls	r3, r3, #1
 8016a1c:	4413      	add	r3, r2
 8016a1e:	00db      	lsls	r3, r3, #3
 8016a20:	440b      	add	r3, r1
 8016a22:	3314      	adds	r3, #20
 8016a24:	781b      	ldrb	r3, [r3, #0]
 8016a26:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016a28:	78fb      	ldrb	r3, [r7, #3]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	f000 8086 	beq.w	8016b3c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016a30:	4948      	ldr	r1, [pc, #288]	@ (8016b54 <etharp_tmr+0x14c>)
 8016a32:	687a      	ldr	r2, [r7, #4]
 8016a34:	4613      	mov	r3, r2
 8016a36:	005b      	lsls	r3, r3, #1
 8016a38:	4413      	add	r3, r2
 8016a3a:	00db      	lsls	r3, r3, #3
 8016a3c:	440b      	add	r3, r1
 8016a3e:	3312      	adds	r3, #18
 8016a40:	881b      	ldrh	r3, [r3, #0]
 8016a42:	3301      	adds	r3, #1
 8016a44:	b298      	uxth	r0, r3
 8016a46:	4943      	ldr	r1, [pc, #268]	@ (8016b54 <etharp_tmr+0x14c>)
 8016a48:	687a      	ldr	r2, [r7, #4]
 8016a4a:	4613      	mov	r3, r2
 8016a4c:	005b      	lsls	r3, r3, #1
 8016a4e:	4413      	add	r3, r2
 8016a50:	00db      	lsls	r3, r3, #3
 8016a52:	440b      	add	r3, r1
 8016a54:	3312      	adds	r3, #18
 8016a56:	4602      	mov	r2, r0
 8016a58:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016a5a:	493e      	ldr	r1, [pc, #248]	@ (8016b54 <etharp_tmr+0x14c>)
 8016a5c:	687a      	ldr	r2, [r7, #4]
 8016a5e:	4613      	mov	r3, r2
 8016a60:	005b      	lsls	r3, r3, #1
 8016a62:	4413      	add	r3, r2
 8016a64:	00db      	lsls	r3, r3, #3
 8016a66:	440b      	add	r3, r1
 8016a68:	3312      	adds	r3, #18
 8016a6a:	881b      	ldrh	r3, [r3, #0]
 8016a6c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016a70:	d215      	bcs.n	8016a9e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016a72:	4938      	ldr	r1, [pc, #224]	@ (8016b54 <etharp_tmr+0x14c>)
 8016a74:	687a      	ldr	r2, [r7, #4]
 8016a76:	4613      	mov	r3, r2
 8016a78:	005b      	lsls	r3, r3, #1
 8016a7a:	4413      	add	r3, r2
 8016a7c:	00db      	lsls	r3, r3, #3
 8016a7e:	440b      	add	r3, r1
 8016a80:	3314      	adds	r3, #20
 8016a82:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016a84:	2b01      	cmp	r3, #1
 8016a86:	d10e      	bne.n	8016aa6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016a88:	4932      	ldr	r1, [pc, #200]	@ (8016b54 <etharp_tmr+0x14c>)
 8016a8a:	687a      	ldr	r2, [r7, #4]
 8016a8c:	4613      	mov	r3, r2
 8016a8e:	005b      	lsls	r3, r3, #1
 8016a90:	4413      	add	r3, r2
 8016a92:	00db      	lsls	r3, r3, #3
 8016a94:	440b      	add	r3, r1
 8016a96:	3312      	adds	r3, #18
 8016a98:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016a9a:	2b04      	cmp	r3, #4
 8016a9c:	d903      	bls.n	8016aa6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016a9e:	6878      	ldr	r0, [r7, #4]
 8016aa0:	f7ff ff80 	bl	80169a4 <etharp_free_entry>
 8016aa4:	e04a      	b.n	8016b3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016aa6:	492b      	ldr	r1, [pc, #172]	@ (8016b54 <etharp_tmr+0x14c>)
 8016aa8:	687a      	ldr	r2, [r7, #4]
 8016aaa:	4613      	mov	r3, r2
 8016aac:	005b      	lsls	r3, r3, #1
 8016aae:	4413      	add	r3, r2
 8016ab0:	00db      	lsls	r3, r3, #3
 8016ab2:	440b      	add	r3, r1
 8016ab4:	3314      	adds	r3, #20
 8016ab6:	781b      	ldrb	r3, [r3, #0]
 8016ab8:	2b03      	cmp	r3, #3
 8016aba:	d10a      	bne.n	8016ad2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016abc:	4925      	ldr	r1, [pc, #148]	@ (8016b54 <etharp_tmr+0x14c>)
 8016abe:	687a      	ldr	r2, [r7, #4]
 8016ac0:	4613      	mov	r3, r2
 8016ac2:	005b      	lsls	r3, r3, #1
 8016ac4:	4413      	add	r3, r2
 8016ac6:	00db      	lsls	r3, r3, #3
 8016ac8:	440b      	add	r3, r1
 8016aca:	3314      	adds	r3, #20
 8016acc:	2204      	movs	r2, #4
 8016ace:	701a      	strb	r2, [r3, #0]
 8016ad0:	e034      	b.n	8016b3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016ad2:	4920      	ldr	r1, [pc, #128]	@ (8016b54 <etharp_tmr+0x14c>)
 8016ad4:	687a      	ldr	r2, [r7, #4]
 8016ad6:	4613      	mov	r3, r2
 8016ad8:	005b      	lsls	r3, r3, #1
 8016ada:	4413      	add	r3, r2
 8016adc:	00db      	lsls	r3, r3, #3
 8016ade:	440b      	add	r3, r1
 8016ae0:	3314      	adds	r3, #20
 8016ae2:	781b      	ldrb	r3, [r3, #0]
 8016ae4:	2b04      	cmp	r3, #4
 8016ae6:	d10a      	bne.n	8016afe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016ae8:	491a      	ldr	r1, [pc, #104]	@ (8016b54 <etharp_tmr+0x14c>)
 8016aea:	687a      	ldr	r2, [r7, #4]
 8016aec:	4613      	mov	r3, r2
 8016aee:	005b      	lsls	r3, r3, #1
 8016af0:	4413      	add	r3, r2
 8016af2:	00db      	lsls	r3, r3, #3
 8016af4:	440b      	add	r3, r1
 8016af6:	3314      	adds	r3, #20
 8016af8:	2202      	movs	r2, #2
 8016afa:	701a      	strb	r2, [r3, #0]
 8016afc:	e01e      	b.n	8016b3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016afe:	4915      	ldr	r1, [pc, #84]	@ (8016b54 <etharp_tmr+0x14c>)
 8016b00:	687a      	ldr	r2, [r7, #4]
 8016b02:	4613      	mov	r3, r2
 8016b04:	005b      	lsls	r3, r3, #1
 8016b06:	4413      	add	r3, r2
 8016b08:	00db      	lsls	r3, r3, #3
 8016b0a:	440b      	add	r3, r1
 8016b0c:	3314      	adds	r3, #20
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	2b01      	cmp	r3, #1
 8016b12:	d113      	bne.n	8016b3c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016b14:	490f      	ldr	r1, [pc, #60]	@ (8016b54 <etharp_tmr+0x14c>)
 8016b16:	687a      	ldr	r2, [r7, #4]
 8016b18:	4613      	mov	r3, r2
 8016b1a:	005b      	lsls	r3, r3, #1
 8016b1c:	4413      	add	r3, r2
 8016b1e:	00db      	lsls	r3, r3, #3
 8016b20:	440b      	add	r3, r1
 8016b22:	3308      	adds	r3, #8
 8016b24:	6818      	ldr	r0, [r3, #0]
 8016b26:	687a      	ldr	r2, [r7, #4]
 8016b28:	4613      	mov	r3, r2
 8016b2a:	005b      	lsls	r3, r3, #1
 8016b2c:	4413      	add	r3, r2
 8016b2e:	00db      	lsls	r3, r3, #3
 8016b30:	4a08      	ldr	r2, [pc, #32]	@ (8016b54 <etharp_tmr+0x14c>)
 8016b32:	4413      	add	r3, r2
 8016b34:	3304      	adds	r3, #4
 8016b36:	4619      	mov	r1, r3
 8016b38:	f000 fe6e 	bl	8017818 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	3301      	adds	r3, #1
 8016b40:	607b      	str	r3, [r7, #4]
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	2b09      	cmp	r3, #9
 8016b46:	f77f af65 	ble.w	8016a14 <etharp_tmr+0xc>
      }
    }
  }
}
 8016b4a:	bf00      	nop
 8016b4c:	bf00      	nop
 8016b4e:	3708      	adds	r7, #8
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}
 8016b54:	2002750c 	.word	0x2002750c

08016b58 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b08a      	sub	sp, #40	@ 0x28
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	60f8      	str	r0, [r7, #12]
 8016b60:	460b      	mov	r3, r1
 8016b62:	607a      	str	r2, [r7, #4]
 8016b64:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016b66:	230a      	movs	r3, #10
 8016b68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8016b6a:	230a      	movs	r3, #10
 8016b6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016b6e:	230a      	movs	r3, #10
 8016b70:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8016b72:	2300      	movs	r3, #0
 8016b74:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016b76:	230a      	movs	r3, #10
 8016b78:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	83bb      	strh	r3, [r7, #28]
 8016b7e:	2300      	movs	r3, #0
 8016b80:	837b      	strh	r3, [r7, #26]
 8016b82:	2300      	movs	r3, #0
 8016b84:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b86:	2300      	movs	r3, #0
 8016b88:	843b      	strh	r3, [r7, #32]
 8016b8a:	e0ae      	b.n	8016cea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016b8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b90:	49a6      	ldr	r1, [pc, #664]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016b92:	4613      	mov	r3, r2
 8016b94:	005b      	lsls	r3, r3, #1
 8016b96:	4413      	add	r3, r2
 8016b98:	00db      	lsls	r3, r3, #3
 8016b9a:	440b      	add	r3, r1
 8016b9c:	3314      	adds	r3, #20
 8016b9e:	781b      	ldrb	r3, [r3, #0]
 8016ba0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016ba2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016ba6:	2b0a      	cmp	r3, #10
 8016ba8:	d105      	bne.n	8016bb6 <etharp_find_entry+0x5e>
 8016baa:	7dfb      	ldrb	r3, [r7, #23]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d102      	bne.n	8016bb6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016bb0:	8c3b      	ldrh	r3, [r7, #32]
 8016bb2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8016bb4:	e095      	b.n	8016ce2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016bb6:	7dfb      	ldrb	r3, [r7, #23]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	f000 8092 	beq.w	8016ce2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016bbe:	7dfb      	ldrb	r3, [r7, #23]
 8016bc0:	2b01      	cmp	r3, #1
 8016bc2:	d009      	beq.n	8016bd8 <etharp_find_entry+0x80>
 8016bc4:	7dfb      	ldrb	r3, [r7, #23]
 8016bc6:	2b01      	cmp	r3, #1
 8016bc8:	d806      	bhi.n	8016bd8 <etharp_find_entry+0x80>
 8016bca:	4b99      	ldr	r3, [pc, #612]	@ (8016e30 <etharp_find_entry+0x2d8>)
 8016bcc:	f240 1223 	movw	r2, #291	@ 0x123
 8016bd0:	4998      	ldr	r1, [pc, #608]	@ (8016e34 <etharp_find_entry+0x2dc>)
 8016bd2:	4899      	ldr	r0, [pc, #612]	@ (8016e38 <etharp_find_entry+0x2e0>)
 8016bd4:	f003 f982 	bl	8019edc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d020      	beq.n	8016c20 <etharp_find_entry+0xc8>
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	6819      	ldr	r1, [r3, #0]
 8016be2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016be6:	4891      	ldr	r0, [pc, #580]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016be8:	4613      	mov	r3, r2
 8016bea:	005b      	lsls	r3, r3, #1
 8016bec:	4413      	add	r3, r2
 8016bee:	00db      	lsls	r3, r3, #3
 8016bf0:	4403      	add	r3, r0
 8016bf2:	3304      	adds	r3, #4
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	4299      	cmp	r1, r3
 8016bf8:	d112      	bne.n	8016c20 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d00c      	beq.n	8016c1a <etharp_find_entry+0xc2>
 8016c00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c04:	4989      	ldr	r1, [pc, #548]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016c06:	4613      	mov	r3, r2
 8016c08:	005b      	lsls	r3, r3, #1
 8016c0a:	4413      	add	r3, r2
 8016c0c:	00db      	lsls	r3, r3, #3
 8016c0e:	440b      	add	r3, r1
 8016c10:	3308      	adds	r3, #8
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	687a      	ldr	r2, [r7, #4]
 8016c16:	429a      	cmp	r2, r3
 8016c18:	d102      	bne.n	8016c20 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016c1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c1e:	e100      	b.n	8016e22 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016c20:	7dfb      	ldrb	r3, [r7, #23]
 8016c22:	2b01      	cmp	r3, #1
 8016c24:	d140      	bne.n	8016ca8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016c26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c2a:	4980      	ldr	r1, [pc, #512]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016c2c:	4613      	mov	r3, r2
 8016c2e:	005b      	lsls	r3, r3, #1
 8016c30:	4413      	add	r3, r2
 8016c32:	00db      	lsls	r3, r3, #3
 8016c34:	440b      	add	r3, r1
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d01a      	beq.n	8016c72 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016c3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c40:	497a      	ldr	r1, [pc, #488]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016c42:	4613      	mov	r3, r2
 8016c44:	005b      	lsls	r3, r3, #1
 8016c46:	4413      	add	r3, r2
 8016c48:	00db      	lsls	r3, r3, #3
 8016c4a:	440b      	add	r3, r1
 8016c4c:	3312      	adds	r3, #18
 8016c4e:	881b      	ldrh	r3, [r3, #0]
 8016c50:	8bba      	ldrh	r2, [r7, #28]
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d845      	bhi.n	8016ce2 <etharp_find_entry+0x18a>
            old_queue = i;
 8016c56:	8c3b      	ldrh	r3, [r7, #32]
 8016c58:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016c5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c5e:	4973      	ldr	r1, [pc, #460]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016c60:	4613      	mov	r3, r2
 8016c62:	005b      	lsls	r3, r3, #1
 8016c64:	4413      	add	r3, r2
 8016c66:	00db      	lsls	r3, r3, #3
 8016c68:	440b      	add	r3, r1
 8016c6a:	3312      	adds	r3, #18
 8016c6c:	881b      	ldrh	r3, [r3, #0]
 8016c6e:	83bb      	strh	r3, [r7, #28]
 8016c70:	e037      	b.n	8016ce2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016c72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c76:	496d      	ldr	r1, [pc, #436]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016c78:	4613      	mov	r3, r2
 8016c7a:	005b      	lsls	r3, r3, #1
 8016c7c:	4413      	add	r3, r2
 8016c7e:	00db      	lsls	r3, r3, #3
 8016c80:	440b      	add	r3, r1
 8016c82:	3312      	adds	r3, #18
 8016c84:	881b      	ldrh	r3, [r3, #0]
 8016c86:	8b7a      	ldrh	r2, [r7, #26]
 8016c88:	429a      	cmp	r2, r3
 8016c8a:	d82a      	bhi.n	8016ce2 <etharp_find_entry+0x18a>
            old_pending = i;
 8016c8c:	8c3b      	ldrh	r3, [r7, #32]
 8016c8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016c90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c94:	4965      	ldr	r1, [pc, #404]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016c96:	4613      	mov	r3, r2
 8016c98:	005b      	lsls	r3, r3, #1
 8016c9a:	4413      	add	r3, r2
 8016c9c:	00db      	lsls	r3, r3, #3
 8016c9e:	440b      	add	r3, r1
 8016ca0:	3312      	adds	r3, #18
 8016ca2:	881b      	ldrh	r3, [r3, #0]
 8016ca4:	837b      	strh	r3, [r7, #26]
 8016ca6:	e01c      	b.n	8016ce2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016ca8:	7dfb      	ldrb	r3, [r7, #23]
 8016caa:	2b01      	cmp	r3, #1
 8016cac:	d919      	bls.n	8016ce2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cb2:	495e      	ldr	r1, [pc, #376]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016cb4:	4613      	mov	r3, r2
 8016cb6:	005b      	lsls	r3, r3, #1
 8016cb8:	4413      	add	r3, r2
 8016cba:	00db      	lsls	r3, r3, #3
 8016cbc:	440b      	add	r3, r1
 8016cbe:	3312      	adds	r3, #18
 8016cc0:	881b      	ldrh	r3, [r3, #0]
 8016cc2:	8b3a      	ldrh	r2, [r7, #24]
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d80c      	bhi.n	8016ce2 <etharp_find_entry+0x18a>
            old_stable = i;
 8016cc8:	8c3b      	ldrh	r3, [r7, #32]
 8016cca:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8016ccc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cd0:	4956      	ldr	r1, [pc, #344]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016cd2:	4613      	mov	r3, r2
 8016cd4:	005b      	lsls	r3, r3, #1
 8016cd6:	4413      	add	r3, r2
 8016cd8:	00db      	lsls	r3, r3, #3
 8016cda:	440b      	add	r3, r1
 8016cdc:	3312      	adds	r3, #18
 8016cde:	881b      	ldrh	r3, [r3, #0]
 8016ce0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ce2:	8c3b      	ldrh	r3, [r7, #32]
 8016ce4:	3301      	adds	r3, #1
 8016ce6:	b29b      	uxth	r3, r3
 8016ce8:	843b      	strh	r3, [r7, #32]
 8016cea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016cee:	2b09      	cmp	r3, #9
 8016cf0:	f77f af4c 	ble.w	8016b8c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016cf4:	7afb      	ldrb	r3, [r7, #11]
 8016cf6:	f003 0302 	and.w	r3, r3, #2
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d108      	bne.n	8016d10 <etharp_find_entry+0x1b8>
 8016cfe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016d02:	2b0a      	cmp	r3, #10
 8016d04:	d107      	bne.n	8016d16 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016d06:	7afb      	ldrb	r3, [r7, #11]
 8016d08:	f003 0301 	and.w	r3, r3, #1
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d102      	bne.n	8016d16 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016d10:	f04f 33ff 	mov.w	r3, #4294967295
 8016d14:	e085      	b.n	8016e22 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016d16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016d1a:	2b09      	cmp	r3, #9
 8016d1c:	dc02      	bgt.n	8016d24 <etharp_find_entry+0x1cc>
    i = empty;
 8016d1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016d20:	843b      	strh	r3, [r7, #32]
 8016d22:	e039      	b.n	8016d98 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016d24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016d28:	2b09      	cmp	r3, #9
 8016d2a:	dc14      	bgt.n	8016d56 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016d2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016d2e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016d30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d34:	493d      	ldr	r1, [pc, #244]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016d36:	4613      	mov	r3, r2
 8016d38:	005b      	lsls	r3, r3, #1
 8016d3a:	4413      	add	r3, r2
 8016d3c:	00db      	lsls	r3, r3, #3
 8016d3e:	440b      	add	r3, r1
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d018      	beq.n	8016d78 <etharp_find_entry+0x220>
 8016d46:	4b3a      	ldr	r3, [pc, #232]	@ (8016e30 <etharp_find_entry+0x2d8>)
 8016d48:	f240 126d 	movw	r2, #365	@ 0x16d
 8016d4c:	493b      	ldr	r1, [pc, #236]	@ (8016e3c <etharp_find_entry+0x2e4>)
 8016d4e:	483a      	ldr	r0, [pc, #232]	@ (8016e38 <etharp_find_entry+0x2e0>)
 8016d50:	f003 f8c4 	bl	8019edc <iprintf>
 8016d54:	e010      	b.n	8016d78 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016d56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8016d5a:	2b09      	cmp	r3, #9
 8016d5c:	dc02      	bgt.n	8016d64 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016d5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016d60:	843b      	strh	r3, [r7, #32]
 8016d62:	e009      	b.n	8016d78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016d64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016d68:	2b09      	cmp	r3, #9
 8016d6a:	dc02      	bgt.n	8016d72 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016d6c:	8bfb      	ldrh	r3, [r7, #30]
 8016d6e:	843b      	strh	r3, [r7, #32]
 8016d70:	e002      	b.n	8016d78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016d72:	f04f 33ff 	mov.w	r3, #4294967295
 8016d76:	e054      	b.n	8016e22 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016d78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d7c:	2b09      	cmp	r3, #9
 8016d7e:	dd06      	ble.n	8016d8e <etharp_find_entry+0x236>
 8016d80:	4b2b      	ldr	r3, [pc, #172]	@ (8016e30 <etharp_find_entry+0x2d8>)
 8016d82:	f240 127f 	movw	r2, #383	@ 0x17f
 8016d86:	492e      	ldr	r1, [pc, #184]	@ (8016e40 <etharp_find_entry+0x2e8>)
 8016d88:	482b      	ldr	r0, [pc, #172]	@ (8016e38 <etharp_find_entry+0x2e0>)
 8016d8a:	f003 f8a7 	bl	8019edc <iprintf>
    etharp_free_entry(i);
 8016d8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d92:	4618      	mov	r0, r3
 8016d94:	f7ff fe06 	bl	80169a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016d98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d9c:	2b09      	cmp	r3, #9
 8016d9e:	dd06      	ble.n	8016dae <etharp_find_entry+0x256>
 8016da0:	4b23      	ldr	r3, [pc, #140]	@ (8016e30 <etharp_find_entry+0x2d8>)
 8016da2:	f240 1283 	movw	r2, #387	@ 0x183
 8016da6:	4926      	ldr	r1, [pc, #152]	@ (8016e40 <etharp_find_entry+0x2e8>)
 8016da8:	4823      	ldr	r0, [pc, #140]	@ (8016e38 <etharp_find_entry+0x2e0>)
 8016daa:	f003 f897 	bl	8019edc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016dae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016db2:	491e      	ldr	r1, [pc, #120]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016db4:	4613      	mov	r3, r2
 8016db6:	005b      	lsls	r3, r3, #1
 8016db8:	4413      	add	r3, r2
 8016dba:	00db      	lsls	r3, r3, #3
 8016dbc:	440b      	add	r3, r1
 8016dbe:	3314      	adds	r3, #20
 8016dc0:	781b      	ldrb	r3, [r3, #0]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d006      	beq.n	8016dd4 <etharp_find_entry+0x27c>
 8016dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8016e30 <etharp_find_entry+0x2d8>)
 8016dc8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8016dcc:	491d      	ldr	r1, [pc, #116]	@ (8016e44 <etharp_find_entry+0x2ec>)
 8016dce:	481a      	ldr	r0, [pc, #104]	@ (8016e38 <etharp_find_entry+0x2e0>)
 8016dd0:	f003 f884 	bl	8019edc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d00b      	beq.n	8016df2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016dda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	6819      	ldr	r1, [r3, #0]
 8016de2:	4812      	ldr	r0, [pc, #72]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016de4:	4613      	mov	r3, r2
 8016de6:	005b      	lsls	r3, r3, #1
 8016de8:	4413      	add	r3, r2
 8016dea:	00db      	lsls	r3, r3, #3
 8016dec:	4403      	add	r3, r0
 8016dee:	3304      	adds	r3, #4
 8016df0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016df2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016df6:	490d      	ldr	r1, [pc, #52]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016df8:	4613      	mov	r3, r2
 8016dfa:	005b      	lsls	r3, r3, #1
 8016dfc:	4413      	add	r3, r2
 8016dfe:	00db      	lsls	r3, r3, #3
 8016e00:	440b      	add	r3, r1
 8016e02:	3312      	adds	r3, #18
 8016e04:	2200      	movs	r2, #0
 8016e06:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016e08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e0c:	4907      	ldr	r1, [pc, #28]	@ (8016e2c <etharp_find_entry+0x2d4>)
 8016e0e:	4613      	mov	r3, r2
 8016e10:	005b      	lsls	r3, r3, #1
 8016e12:	4413      	add	r3, r2
 8016e14:	00db      	lsls	r3, r3, #3
 8016e16:	440b      	add	r3, r1
 8016e18:	3308      	adds	r3, #8
 8016e1a:	687a      	ldr	r2, [r7, #4]
 8016e1c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016e1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3728      	adds	r7, #40	@ 0x28
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}
 8016e2a:	bf00      	nop
 8016e2c:	2002750c 	.word	0x2002750c
 8016e30:	0801d520 	.word	0x0801d520
 8016e34:	0801d558 	.word	0x0801d558
 8016e38:	0801d598 	.word	0x0801d598
 8016e3c:	0801d5c0 	.word	0x0801d5c0
 8016e40:	0801d5d8 	.word	0x0801d5d8
 8016e44:	0801d5ec 	.word	0x0801d5ec

08016e48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b088      	sub	sp, #32
 8016e4c:	af02      	add	r7, sp, #8
 8016e4e:	60f8      	str	r0, [r7, #12]
 8016e50:	60b9      	str	r1, [r7, #8]
 8016e52:	607a      	str	r2, [r7, #4]
 8016e54:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016e5c:	2b06      	cmp	r3, #6
 8016e5e:	d006      	beq.n	8016e6e <etharp_update_arp_entry+0x26>
 8016e60:	4b48      	ldr	r3, [pc, #288]	@ (8016f84 <etharp_update_arp_entry+0x13c>)
 8016e62:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016e66:	4948      	ldr	r1, [pc, #288]	@ (8016f88 <etharp_update_arp_entry+0x140>)
 8016e68:	4848      	ldr	r0, [pc, #288]	@ (8016f8c <etharp_update_arp_entry+0x144>)
 8016e6a:	f003 f837 	bl	8019edc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016e6e:	68bb      	ldr	r3, [r7, #8]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d012      	beq.n	8016e9a <etharp_update_arp_entry+0x52>
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d00e      	beq.n	8016e9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016e7c:	68bb      	ldr	r3, [r7, #8]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	68f9      	ldr	r1, [r7, #12]
 8016e82:	4618      	mov	r0, r3
 8016e84:	f001 f8fe 	bl	8018084 <ip4_addr_isbroadcast_u32>
 8016e88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d105      	bne.n	8016e9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016e96:	2be0      	cmp	r3, #224	@ 0xe0
 8016e98:	d102      	bne.n	8016ea0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016e9a:	f06f 030f 	mvn.w	r3, #15
 8016e9e:	e06c      	b.n	8016f7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016ea0:	78fb      	ldrb	r3, [r7, #3]
 8016ea2:	68fa      	ldr	r2, [r7, #12]
 8016ea4:	4619      	mov	r1, r3
 8016ea6:	68b8      	ldr	r0, [r7, #8]
 8016ea8:	f7ff fe56 	bl	8016b58 <etharp_find_entry>
 8016eac:	4603      	mov	r3, r0
 8016eae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016eb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	da02      	bge.n	8016ebe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016eb8:	8afb      	ldrh	r3, [r7, #22]
 8016eba:	b25b      	sxtb	r3, r3
 8016ebc:	e05d      	b.n	8016f7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016ebe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ec2:	4933      	ldr	r1, [pc, #204]	@ (8016f90 <etharp_update_arp_entry+0x148>)
 8016ec4:	4613      	mov	r3, r2
 8016ec6:	005b      	lsls	r3, r3, #1
 8016ec8:	4413      	add	r3, r2
 8016eca:	00db      	lsls	r3, r3, #3
 8016ecc:	440b      	add	r3, r1
 8016ece:	3314      	adds	r3, #20
 8016ed0:	2202      	movs	r2, #2
 8016ed2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016ed4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ed8:	492d      	ldr	r1, [pc, #180]	@ (8016f90 <etharp_update_arp_entry+0x148>)
 8016eda:	4613      	mov	r3, r2
 8016edc:	005b      	lsls	r3, r3, #1
 8016ede:	4413      	add	r3, r2
 8016ee0:	00db      	lsls	r3, r3, #3
 8016ee2:	440b      	add	r3, r1
 8016ee4:	3308      	adds	r3, #8
 8016ee6:	68fa      	ldr	r2, [r7, #12]
 8016ee8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016eea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016eee:	4613      	mov	r3, r2
 8016ef0:	005b      	lsls	r3, r3, #1
 8016ef2:	4413      	add	r3, r2
 8016ef4:	00db      	lsls	r3, r3, #3
 8016ef6:	3308      	adds	r3, #8
 8016ef8:	4a25      	ldr	r2, [pc, #148]	@ (8016f90 <etharp_update_arp_entry+0x148>)
 8016efa:	4413      	add	r3, r2
 8016efc:	3304      	adds	r3, #4
 8016efe:	2206      	movs	r2, #6
 8016f00:	6879      	ldr	r1, [r7, #4]
 8016f02:	4618      	mov	r0, r3
 8016f04:	f003 fa15 	bl	801a332 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016f08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f0c:	4920      	ldr	r1, [pc, #128]	@ (8016f90 <etharp_update_arp_entry+0x148>)
 8016f0e:	4613      	mov	r3, r2
 8016f10:	005b      	lsls	r3, r3, #1
 8016f12:	4413      	add	r3, r2
 8016f14:	00db      	lsls	r3, r3, #3
 8016f16:	440b      	add	r3, r1
 8016f18:	3312      	adds	r3, #18
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016f1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f22:	491b      	ldr	r1, [pc, #108]	@ (8016f90 <etharp_update_arp_entry+0x148>)
 8016f24:	4613      	mov	r3, r2
 8016f26:	005b      	lsls	r3, r3, #1
 8016f28:	4413      	add	r3, r2
 8016f2a:	00db      	lsls	r3, r3, #3
 8016f2c:	440b      	add	r3, r1
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d021      	beq.n	8016f78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016f34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f38:	4915      	ldr	r1, [pc, #84]	@ (8016f90 <etharp_update_arp_entry+0x148>)
 8016f3a:	4613      	mov	r3, r2
 8016f3c:	005b      	lsls	r3, r3, #1
 8016f3e:	4413      	add	r3, r2
 8016f40:	00db      	lsls	r3, r3, #3
 8016f42:	440b      	add	r3, r1
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016f48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f4c:	4910      	ldr	r1, [pc, #64]	@ (8016f90 <etharp_update_arp_entry+0x148>)
 8016f4e:	4613      	mov	r3, r2
 8016f50:	005b      	lsls	r3, r3, #1
 8016f52:	4413      	add	r3, r2
 8016f54:	00db      	lsls	r3, r3, #3
 8016f56:	440b      	add	r3, r1
 8016f58:	2200      	movs	r2, #0
 8016f5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016f62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016f66:	9300      	str	r3, [sp, #0]
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	6939      	ldr	r1, [r7, #16]
 8016f6c:	68f8      	ldr	r0, [r7, #12]
 8016f6e:	f002 f827 	bl	8018fc0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016f72:	6938      	ldr	r0, [r7, #16]
 8016f74:	f7f9 fb32 	bl	80105dc <pbuf_free>
  }
  return ERR_OK;
 8016f78:	2300      	movs	r3, #0
}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3718      	adds	r7, #24
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}
 8016f82:	bf00      	nop
 8016f84:	0801d520 	.word	0x0801d520
 8016f88:	0801d618 	.word	0x0801d618
 8016f8c:	0801d598 	.word	0x0801d598
 8016f90:	2002750c 	.word	0x2002750c

08016f94 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b084      	sub	sp, #16
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	60fb      	str	r3, [r7, #12]
 8016fa0:	e01e      	b.n	8016fe0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016fa2:	4913      	ldr	r1, [pc, #76]	@ (8016ff0 <etharp_cleanup_netif+0x5c>)
 8016fa4:	68fa      	ldr	r2, [r7, #12]
 8016fa6:	4613      	mov	r3, r2
 8016fa8:	005b      	lsls	r3, r3, #1
 8016faa:	4413      	add	r3, r2
 8016fac:	00db      	lsls	r3, r3, #3
 8016fae:	440b      	add	r3, r1
 8016fb0:	3314      	adds	r3, #20
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016fb6:	7afb      	ldrb	r3, [r7, #11]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d00e      	beq.n	8016fda <etharp_cleanup_netif+0x46>
 8016fbc:	490c      	ldr	r1, [pc, #48]	@ (8016ff0 <etharp_cleanup_netif+0x5c>)
 8016fbe:	68fa      	ldr	r2, [r7, #12]
 8016fc0:	4613      	mov	r3, r2
 8016fc2:	005b      	lsls	r3, r3, #1
 8016fc4:	4413      	add	r3, r2
 8016fc6:	00db      	lsls	r3, r3, #3
 8016fc8:	440b      	add	r3, r1
 8016fca:	3308      	adds	r3, #8
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	687a      	ldr	r2, [r7, #4]
 8016fd0:	429a      	cmp	r2, r3
 8016fd2:	d102      	bne.n	8016fda <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016fd4:	68f8      	ldr	r0, [r7, #12]
 8016fd6:	f7ff fce5 	bl	80169a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	3301      	adds	r3, #1
 8016fde:	60fb      	str	r3, [r7, #12]
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	2b09      	cmp	r3, #9
 8016fe4:	dddd      	ble.n	8016fa2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016fe6:	bf00      	nop
 8016fe8:	bf00      	nop
 8016fea:	3710      	adds	r7, #16
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd80      	pop	{r7, pc}
 8016ff0:	2002750c 	.word	0x2002750c

08016ff4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016ff4:	b5b0      	push	{r4, r5, r7, lr}
 8016ff6:	b08a      	sub	sp, #40	@ 0x28
 8016ff8:	af04      	add	r7, sp, #16
 8016ffa:	6078      	str	r0, [r7, #4]
 8016ffc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016ffe:	683b      	ldr	r3, [r7, #0]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d107      	bne.n	8017014 <etharp_input+0x20>
 8017004:	4b3d      	ldr	r3, [pc, #244]	@ (80170fc <etharp_input+0x108>)
 8017006:	f240 228a 	movw	r2, #650	@ 0x28a
 801700a:	493d      	ldr	r1, [pc, #244]	@ (8017100 <etharp_input+0x10c>)
 801700c:	483d      	ldr	r0, [pc, #244]	@ (8017104 <etharp_input+0x110>)
 801700e:	f002 ff65 	bl	8019edc <iprintf>
 8017012:	e06f      	b.n	80170f4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	685b      	ldr	r3, [r3, #4]
 8017018:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801701a:	693b      	ldr	r3, [r7, #16]
 801701c:	881b      	ldrh	r3, [r3, #0]
 801701e:	b29b      	uxth	r3, r3
 8017020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017024:	d10c      	bne.n	8017040 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017026:	693b      	ldr	r3, [r7, #16]
 8017028:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801702a:	2b06      	cmp	r3, #6
 801702c:	d108      	bne.n	8017040 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801702e:	693b      	ldr	r3, [r7, #16]
 8017030:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017032:	2b04      	cmp	r3, #4
 8017034:	d104      	bne.n	8017040 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017036:	693b      	ldr	r3, [r7, #16]
 8017038:	885b      	ldrh	r3, [r3, #2]
 801703a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801703c:	2b08      	cmp	r3, #8
 801703e:	d003      	beq.n	8017048 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f7f9 facb 	bl	80105dc <pbuf_free>
    return;
 8017046:	e055      	b.n	80170f4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017048:	693b      	ldr	r3, [r7, #16]
 801704a:	330e      	adds	r3, #14
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017050:	693b      	ldr	r3, [r7, #16]
 8017052:	3318      	adds	r3, #24
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017058:	683b      	ldr	r3, [r7, #0]
 801705a:	3304      	adds	r3, #4
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d102      	bne.n	8017068 <etharp_input+0x74>
    for_us = 0;
 8017062:	2300      	movs	r3, #0
 8017064:	75fb      	strb	r3, [r7, #23]
 8017066:	e009      	b.n	801707c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017068:	68ba      	ldr	r2, [r7, #8]
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	3304      	adds	r3, #4
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	429a      	cmp	r2, r3
 8017072:	bf0c      	ite	eq
 8017074:	2301      	moveq	r3, #1
 8017076:	2300      	movne	r3, #0
 8017078:	b2db      	uxtb	r3, r3
 801707a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801707c:	693b      	ldr	r3, [r7, #16]
 801707e:	f103 0208 	add.w	r2, r3, #8
 8017082:	7dfb      	ldrb	r3, [r7, #23]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d001      	beq.n	801708c <etharp_input+0x98>
 8017088:	2301      	movs	r3, #1
 801708a:	e000      	b.n	801708e <etharp_input+0x9a>
 801708c:	2302      	movs	r3, #2
 801708e:	f107 010c 	add.w	r1, r7, #12
 8017092:	6838      	ldr	r0, [r7, #0]
 8017094:	f7ff fed8 	bl	8016e48 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017098:	693b      	ldr	r3, [r7, #16]
 801709a:	88db      	ldrh	r3, [r3, #6]
 801709c:	b29b      	uxth	r3, r3
 801709e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80170a2:	d003      	beq.n	80170ac <etharp_input+0xb8>
 80170a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80170a8:	d01e      	beq.n	80170e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80170aa:	e020      	b.n	80170ee <etharp_input+0xfa>
      if (for_us) {
 80170ac:	7dfb      	ldrb	r3, [r7, #23]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d01c      	beq.n	80170ec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80170b2:	683b      	ldr	r3, [r7, #0]
 80170b4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80170b8:	693b      	ldr	r3, [r7, #16]
 80170ba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80170c4:	683b      	ldr	r3, [r7, #0]
 80170c6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80170c8:	693a      	ldr	r2, [r7, #16]
 80170ca:	3208      	adds	r2, #8
        etharp_raw(netif,
 80170cc:	2102      	movs	r1, #2
 80170ce:	9103      	str	r1, [sp, #12]
 80170d0:	f107 010c 	add.w	r1, r7, #12
 80170d4:	9102      	str	r1, [sp, #8]
 80170d6:	9201      	str	r2, [sp, #4]
 80170d8:	9300      	str	r3, [sp, #0]
 80170da:	462b      	mov	r3, r5
 80170dc:	4622      	mov	r2, r4
 80170de:	4601      	mov	r1, r0
 80170e0:	6838      	ldr	r0, [r7, #0]
 80170e2:	f000 faeb 	bl	80176bc <etharp_raw>
      break;
 80170e6:	e001      	b.n	80170ec <etharp_input+0xf8>
      break;
 80170e8:	bf00      	nop
 80170ea:	e000      	b.n	80170ee <etharp_input+0xfa>
      break;
 80170ec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80170ee:	6878      	ldr	r0, [r7, #4]
 80170f0:	f7f9 fa74 	bl	80105dc <pbuf_free>
}
 80170f4:	3718      	adds	r7, #24
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bdb0      	pop	{r4, r5, r7, pc}
 80170fa:	bf00      	nop
 80170fc:	0801d520 	.word	0x0801d520
 8017100:	0801d670 	.word	0x0801d670
 8017104:	0801d598 	.word	0x0801d598

08017108 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b086      	sub	sp, #24
 801710c:	af02      	add	r7, sp, #8
 801710e:	60f8      	str	r0, [r7, #12]
 8017110:	60b9      	str	r1, [r7, #8]
 8017112:	4613      	mov	r3, r2
 8017114:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017116:	79fa      	ldrb	r2, [r7, #7]
 8017118:	4944      	ldr	r1, [pc, #272]	@ (801722c <etharp_output_to_arp_index+0x124>)
 801711a:	4613      	mov	r3, r2
 801711c:	005b      	lsls	r3, r3, #1
 801711e:	4413      	add	r3, r2
 8017120:	00db      	lsls	r3, r3, #3
 8017122:	440b      	add	r3, r1
 8017124:	3314      	adds	r3, #20
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	2b01      	cmp	r3, #1
 801712a:	d806      	bhi.n	801713a <etharp_output_to_arp_index+0x32>
 801712c:	4b40      	ldr	r3, [pc, #256]	@ (8017230 <etharp_output_to_arp_index+0x128>)
 801712e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8017132:	4940      	ldr	r1, [pc, #256]	@ (8017234 <etharp_output_to_arp_index+0x12c>)
 8017134:	4840      	ldr	r0, [pc, #256]	@ (8017238 <etharp_output_to_arp_index+0x130>)
 8017136:	f002 fed1 	bl	8019edc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801713a:	79fa      	ldrb	r2, [r7, #7]
 801713c:	493b      	ldr	r1, [pc, #236]	@ (801722c <etharp_output_to_arp_index+0x124>)
 801713e:	4613      	mov	r3, r2
 8017140:	005b      	lsls	r3, r3, #1
 8017142:	4413      	add	r3, r2
 8017144:	00db      	lsls	r3, r3, #3
 8017146:	440b      	add	r3, r1
 8017148:	3314      	adds	r3, #20
 801714a:	781b      	ldrb	r3, [r3, #0]
 801714c:	2b02      	cmp	r3, #2
 801714e:	d153      	bne.n	80171f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017150:	79fa      	ldrb	r2, [r7, #7]
 8017152:	4936      	ldr	r1, [pc, #216]	@ (801722c <etharp_output_to_arp_index+0x124>)
 8017154:	4613      	mov	r3, r2
 8017156:	005b      	lsls	r3, r3, #1
 8017158:	4413      	add	r3, r2
 801715a:	00db      	lsls	r3, r3, #3
 801715c:	440b      	add	r3, r1
 801715e:	3312      	adds	r3, #18
 8017160:	881b      	ldrh	r3, [r3, #0]
 8017162:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8017166:	d919      	bls.n	801719c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017168:	79fa      	ldrb	r2, [r7, #7]
 801716a:	4613      	mov	r3, r2
 801716c:	005b      	lsls	r3, r3, #1
 801716e:	4413      	add	r3, r2
 8017170:	00db      	lsls	r3, r3, #3
 8017172:	4a2e      	ldr	r2, [pc, #184]	@ (801722c <etharp_output_to_arp_index+0x124>)
 8017174:	4413      	add	r3, r2
 8017176:	3304      	adds	r3, #4
 8017178:	4619      	mov	r1, r3
 801717a:	68f8      	ldr	r0, [r7, #12]
 801717c:	f000 fb4c 	bl	8017818 <etharp_request>
 8017180:	4603      	mov	r3, r0
 8017182:	2b00      	cmp	r3, #0
 8017184:	d138      	bne.n	80171f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017186:	79fa      	ldrb	r2, [r7, #7]
 8017188:	4928      	ldr	r1, [pc, #160]	@ (801722c <etharp_output_to_arp_index+0x124>)
 801718a:	4613      	mov	r3, r2
 801718c:	005b      	lsls	r3, r3, #1
 801718e:	4413      	add	r3, r2
 8017190:	00db      	lsls	r3, r3, #3
 8017192:	440b      	add	r3, r1
 8017194:	3314      	adds	r3, #20
 8017196:	2203      	movs	r2, #3
 8017198:	701a      	strb	r2, [r3, #0]
 801719a:	e02d      	b.n	80171f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801719c:	79fa      	ldrb	r2, [r7, #7]
 801719e:	4923      	ldr	r1, [pc, #140]	@ (801722c <etharp_output_to_arp_index+0x124>)
 80171a0:	4613      	mov	r3, r2
 80171a2:	005b      	lsls	r3, r3, #1
 80171a4:	4413      	add	r3, r2
 80171a6:	00db      	lsls	r3, r3, #3
 80171a8:	440b      	add	r3, r1
 80171aa:	3312      	adds	r3, #18
 80171ac:	881b      	ldrh	r3, [r3, #0]
 80171ae:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80171b2:	d321      	bcc.n	80171f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80171b4:	79fa      	ldrb	r2, [r7, #7]
 80171b6:	4613      	mov	r3, r2
 80171b8:	005b      	lsls	r3, r3, #1
 80171ba:	4413      	add	r3, r2
 80171bc:	00db      	lsls	r3, r3, #3
 80171be:	4a1b      	ldr	r2, [pc, #108]	@ (801722c <etharp_output_to_arp_index+0x124>)
 80171c0:	4413      	add	r3, r2
 80171c2:	1d19      	adds	r1, r3, #4
 80171c4:	79fa      	ldrb	r2, [r7, #7]
 80171c6:	4613      	mov	r3, r2
 80171c8:	005b      	lsls	r3, r3, #1
 80171ca:	4413      	add	r3, r2
 80171cc:	00db      	lsls	r3, r3, #3
 80171ce:	3308      	adds	r3, #8
 80171d0:	4a16      	ldr	r2, [pc, #88]	@ (801722c <etharp_output_to_arp_index+0x124>)
 80171d2:	4413      	add	r3, r2
 80171d4:	3304      	adds	r3, #4
 80171d6:	461a      	mov	r2, r3
 80171d8:	68f8      	ldr	r0, [r7, #12]
 80171da:	f000 fafb 	bl	80177d4 <etharp_request_dst>
 80171de:	4603      	mov	r3, r0
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d109      	bne.n	80171f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80171e4:	79fa      	ldrb	r2, [r7, #7]
 80171e6:	4911      	ldr	r1, [pc, #68]	@ (801722c <etharp_output_to_arp_index+0x124>)
 80171e8:	4613      	mov	r3, r2
 80171ea:	005b      	lsls	r3, r3, #1
 80171ec:	4413      	add	r3, r2
 80171ee:	00db      	lsls	r3, r3, #3
 80171f0:	440b      	add	r3, r1
 80171f2:	3314      	adds	r3, #20
 80171f4:	2203      	movs	r2, #3
 80171f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80171fe:	79fa      	ldrb	r2, [r7, #7]
 8017200:	4613      	mov	r3, r2
 8017202:	005b      	lsls	r3, r3, #1
 8017204:	4413      	add	r3, r2
 8017206:	00db      	lsls	r3, r3, #3
 8017208:	3308      	adds	r3, #8
 801720a:	4a08      	ldr	r2, [pc, #32]	@ (801722c <etharp_output_to_arp_index+0x124>)
 801720c:	4413      	add	r3, r2
 801720e:	3304      	adds	r3, #4
 8017210:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017214:	9200      	str	r2, [sp, #0]
 8017216:	460a      	mov	r2, r1
 8017218:	68b9      	ldr	r1, [r7, #8]
 801721a:	68f8      	ldr	r0, [r7, #12]
 801721c:	f001 fed0 	bl	8018fc0 <ethernet_output>
 8017220:	4603      	mov	r3, r0
}
 8017222:	4618      	mov	r0, r3
 8017224:	3710      	adds	r7, #16
 8017226:	46bd      	mov	sp, r7
 8017228:	bd80      	pop	{r7, pc}
 801722a:	bf00      	nop
 801722c:	2002750c 	.word	0x2002750c
 8017230:	0801d520 	.word	0x0801d520
 8017234:	0801d690 	.word	0x0801d690
 8017238:	0801d598 	.word	0x0801d598

0801723c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b08a      	sub	sp, #40	@ 0x28
 8017240:	af02      	add	r7, sp, #8
 8017242:	60f8      	str	r0, [r7, #12]
 8017244:	60b9      	str	r1, [r7, #8]
 8017246:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d106      	bne.n	8017260 <etharp_output+0x24>
 8017252:	4b73      	ldr	r3, [pc, #460]	@ (8017420 <etharp_output+0x1e4>)
 8017254:	f240 321e 	movw	r2, #798	@ 0x31e
 8017258:	4972      	ldr	r1, [pc, #456]	@ (8017424 <etharp_output+0x1e8>)
 801725a:	4873      	ldr	r0, [pc, #460]	@ (8017428 <etharp_output+0x1ec>)
 801725c:	f002 fe3e 	bl	8019edc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017260:	68bb      	ldr	r3, [r7, #8]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d106      	bne.n	8017274 <etharp_output+0x38>
 8017266:	4b6e      	ldr	r3, [pc, #440]	@ (8017420 <etharp_output+0x1e4>)
 8017268:	f240 321f 	movw	r2, #799	@ 0x31f
 801726c:	496f      	ldr	r1, [pc, #444]	@ (801742c <etharp_output+0x1f0>)
 801726e:	486e      	ldr	r0, [pc, #440]	@ (8017428 <etharp_output+0x1ec>)
 8017270:	f002 fe34 	bl	8019edc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d106      	bne.n	8017288 <etharp_output+0x4c>
 801727a:	4b69      	ldr	r3, [pc, #420]	@ (8017420 <etharp_output+0x1e4>)
 801727c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017280:	496b      	ldr	r1, [pc, #428]	@ (8017430 <etharp_output+0x1f4>)
 8017282:	4869      	ldr	r0, [pc, #420]	@ (8017428 <etharp_output+0x1ec>)
 8017284:	f002 fe2a 	bl	8019edc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	68f9      	ldr	r1, [r7, #12]
 801728e:	4618      	mov	r0, r3
 8017290:	f000 fef8 	bl	8018084 <ip4_addr_isbroadcast_u32>
 8017294:	4603      	mov	r3, r0
 8017296:	2b00      	cmp	r3, #0
 8017298:	d002      	beq.n	80172a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801729a:	4b66      	ldr	r3, [pc, #408]	@ (8017434 <etharp_output+0x1f8>)
 801729c:	61fb      	str	r3, [r7, #28]
 801729e:	e0af      	b.n	8017400 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80172a8:	2be0      	cmp	r3, #224	@ 0xe0
 80172aa:	d118      	bne.n	80172de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80172ac:	2301      	movs	r3, #1
 80172ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80172b0:	2300      	movs	r3, #0
 80172b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80172b4:	235e      	movs	r3, #94	@ 0x5e
 80172b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	3301      	adds	r3, #1
 80172bc:	781b      	ldrb	r3, [r3, #0]
 80172be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80172c2:	b2db      	uxtb	r3, r3
 80172c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	3302      	adds	r3, #2
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	3303      	adds	r3, #3
 80172d2:	781b      	ldrb	r3, [r3, #0]
 80172d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80172d6:	f107 0310 	add.w	r3, r7, #16
 80172da:	61fb      	str	r3, [r7, #28]
 80172dc:	e090      	b.n	8017400 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	681a      	ldr	r2, [r3, #0]
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	3304      	adds	r3, #4
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	405a      	eors	r2, r3
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	3308      	adds	r3, #8
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	4013      	ands	r3, r2
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d012      	beq.n	801731c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80172fc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8017300:	4293      	cmp	r3, r2
 8017302:	d00b      	beq.n	801731c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	330c      	adds	r3, #12
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d003      	beq.n	8017316 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	330c      	adds	r3, #12
 8017312:	61bb      	str	r3, [r7, #24]
 8017314:	e002      	b.n	801731c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017316:	f06f 0303 	mvn.w	r3, #3
 801731a:	e07d      	b.n	8017418 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801731c:	4b46      	ldr	r3, [pc, #280]	@ (8017438 <etharp_output+0x1fc>)
 801731e:	781b      	ldrb	r3, [r3, #0]
 8017320:	4619      	mov	r1, r3
 8017322:	4a46      	ldr	r2, [pc, #280]	@ (801743c <etharp_output+0x200>)
 8017324:	460b      	mov	r3, r1
 8017326:	005b      	lsls	r3, r3, #1
 8017328:	440b      	add	r3, r1
 801732a:	00db      	lsls	r3, r3, #3
 801732c:	4413      	add	r3, r2
 801732e:	3314      	adds	r3, #20
 8017330:	781b      	ldrb	r3, [r3, #0]
 8017332:	2b01      	cmp	r3, #1
 8017334:	d925      	bls.n	8017382 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017336:	4b40      	ldr	r3, [pc, #256]	@ (8017438 <etharp_output+0x1fc>)
 8017338:	781b      	ldrb	r3, [r3, #0]
 801733a:	4619      	mov	r1, r3
 801733c:	4a3f      	ldr	r2, [pc, #252]	@ (801743c <etharp_output+0x200>)
 801733e:	460b      	mov	r3, r1
 8017340:	005b      	lsls	r3, r3, #1
 8017342:	440b      	add	r3, r1
 8017344:	00db      	lsls	r3, r3, #3
 8017346:	4413      	add	r3, r2
 8017348:	3308      	adds	r3, #8
 801734a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801734c:	68fa      	ldr	r2, [r7, #12]
 801734e:	429a      	cmp	r2, r3
 8017350:	d117      	bne.n	8017382 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017352:	69bb      	ldr	r3, [r7, #24]
 8017354:	681a      	ldr	r2, [r3, #0]
 8017356:	4b38      	ldr	r3, [pc, #224]	@ (8017438 <etharp_output+0x1fc>)
 8017358:	781b      	ldrb	r3, [r3, #0]
 801735a:	4618      	mov	r0, r3
 801735c:	4937      	ldr	r1, [pc, #220]	@ (801743c <etharp_output+0x200>)
 801735e:	4603      	mov	r3, r0
 8017360:	005b      	lsls	r3, r3, #1
 8017362:	4403      	add	r3, r0
 8017364:	00db      	lsls	r3, r3, #3
 8017366:	440b      	add	r3, r1
 8017368:	3304      	adds	r3, #4
 801736a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801736c:	429a      	cmp	r2, r3
 801736e:	d108      	bne.n	8017382 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017370:	4b31      	ldr	r3, [pc, #196]	@ (8017438 <etharp_output+0x1fc>)
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	461a      	mov	r2, r3
 8017376:	68b9      	ldr	r1, [r7, #8]
 8017378:	68f8      	ldr	r0, [r7, #12]
 801737a:	f7ff fec5 	bl	8017108 <etharp_output_to_arp_index>
 801737e:	4603      	mov	r3, r0
 8017380:	e04a      	b.n	8017418 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017382:	2300      	movs	r3, #0
 8017384:	75fb      	strb	r3, [r7, #23]
 8017386:	e031      	b.n	80173ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017388:	7dfa      	ldrb	r2, [r7, #23]
 801738a:	492c      	ldr	r1, [pc, #176]	@ (801743c <etharp_output+0x200>)
 801738c:	4613      	mov	r3, r2
 801738e:	005b      	lsls	r3, r3, #1
 8017390:	4413      	add	r3, r2
 8017392:	00db      	lsls	r3, r3, #3
 8017394:	440b      	add	r3, r1
 8017396:	3314      	adds	r3, #20
 8017398:	781b      	ldrb	r3, [r3, #0]
 801739a:	2b01      	cmp	r3, #1
 801739c:	d923      	bls.n	80173e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801739e:	7dfa      	ldrb	r2, [r7, #23]
 80173a0:	4926      	ldr	r1, [pc, #152]	@ (801743c <etharp_output+0x200>)
 80173a2:	4613      	mov	r3, r2
 80173a4:	005b      	lsls	r3, r3, #1
 80173a6:	4413      	add	r3, r2
 80173a8:	00db      	lsls	r3, r3, #3
 80173aa:	440b      	add	r3, r1
 80173ac:	3308      	adds	r3, #8
 80173ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80173b0:	68fa      	ldr	r2, [r7, #12]
 80173b2:	429a      	cmp	r2, r3
 80173b4:	d117      	bne.n	80173e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80173b6:	69bb      	ldr	r3, [r7, #24]
 80173b8:	6819      	ldr	r1, [r3, #0]
 80173ba:	7dfa      	ldrb	r2, [r7, #23]
 80173bc:	481f      	ldr	r0, [pc, #124]	@ (801743c <etharp_output+0x200>)
 80173be:	4613      	mov	r3, r2
 80173c0:	005b      	lsls	r3, r3, #1
 80173c2:	4413      	add	r3, r2
 80173c4:	00db      	lsls	r3, r3, #3
 80173c6:	4403      	add	r3, r0
 80173c8:	3304      	adds	r3, #4
 80173ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80173cc:	4299      	cmp	r1, r3
 80173ce:	d10a      	bne.n	80173e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80173d0:	4a19      	ldr	r2, [pc, #100]	@ (8017438 <etharp_output+0x1fc>)
 80173d2:	7dfb      	ldrb	r3, [r7, #23]
 80173d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80173d6:	7dfb      	ldrb	r3, [r7, #23]
 80173d8:	461a      	mov	r2, r3
 80173da:	68b9      	ldr	r1, [r7, #8]
 80173dc:	68f8      	ldr	r0, [r7, #12]
 80173de:	f7ff fe93 	bl	8017108 <etharp_output_to_arp_index>
 80173e2:	4603      	mov	r3, r0
 80173e4:	e018      	b.n	8017418 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80173e6:	7dfb      	ldrb	r3, [r7, #23]
 80173e8:	3301      	adds	r3, #1
 80173ea:	75fb      	strb	r3, [r7, #23]
 80173ec:	7dfb      	ldrb	r3, [r7, #23]
 80173ee:	2b09      	cmp	r3, #9
 80173f0:	d9ca      	bls.n	8017388 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80173f2:	68ba      	ldr	r2, [r7, #8]
 80173f4:	69b9      	ldr	r1, [r7, #24]
 80173f6:	68f8      	ldr	r0, [r7, #12]
 80173f8:	f000 f822 	bl	8017440 <etharp_query>
 80173fc:	4603      	mov	r3, r0
 80173fe:	e00b      	b.n	8017418 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8017406:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801740a:	9300      	str	r3, [sp, #0]
 801740c:	69fb      	ldr	r3, [r7, #28]
 801740e:	68b9      	ldr	r1, [r7, #8]
 8017410:	68f8      	ldr	r0, [r7, #12]
 8017412:	f001 fdd5 	bl	8018fc0 <ethernet_output>
 8017416:	4603      	mov	r3, r0
}
 8017418:	4618      	mov	r0, r3
 801741a:	3720      	adds	r7, #32
 801741c:	46bd      	mov	sp, r7
 801741e:	bd80      	pop	{r7, pc}
 8017420:	0801d520 	.word	0x0801d520
 8017424:	0801d670 	.word	0x0801d670
 8017428:	0801d598 	.word	0x0801d598
 801742c:	0801d6c0 	.word	0x0801d6c0
 8017430:	0801d660 	.word	0x0801d660
 8017434:	0801e1f4 	.word	0x0801e1f4
 8017438:	200275fc 	.word	0x200275fc
 801743c:	2002750c 	.word	0x2002750c

08017440 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b08c      	sub	sp, #48	@ 0x30
 8017444:	af02      	add	r7, sp, #8
 8017446:	60f8      	str	r0, [r7, #12]
 8017448:	60b9      	str	r1, [r7, #8]
 801744a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	3326      	adds	r3, #38	@ 0x26
 8017450:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017452:	23ff      	movs	r3, #255	@ 0xff
 8017454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8017458:	2300      	movs	r3, #0
 801745a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	68f9      	ldr	r1, [r7, #12]
 8017462:	4618      	mov	r0, r3
 8017464:	f000 fe0e 	bl	8018084 <ip4_addr_isbroadcast_u32>
 8017468:	4603      	mov	r3, r0
 801746a:	2b00      	cmp	r3, #0
 801746c:	d10c      	bne.n	8017488 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017476:	2be0      	cmp	r3, #224	@ 0xe0
 8017478:	d006      	beq.n	8017488 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d003      	beq.n	8017488 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017480:	68bb      	ldr	r3, [r7, #8]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d102      	bne.n	801748e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017488:	f06f 030f 	mvn.w	r3, #15
 801748c:	e101      	b.n	8017692 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801748e:	68fa      	ldr	r2, [r7, #12]
 8017490:	2101      	movs	r1, #1
 8017492:	68b8      	ldr	r0, [r7, #8]
 8017494:	f7ff fb60 	bl	8016b58 <etharp_find_entry>
 8017498:	4603      	mov	r3, r0
 801749a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801749c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	da02      	bge.n	80174aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80174a4:	8a7b      	ldrh	r3, [r7, #18]
 80174a6:	b25b      	sxtb	r3, r3
 80174a8:	e0f3      	b.n	8017692 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80174aa:	8a7b      	ldrh	r3, [r7, #18]
 80174ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80174ae:	d906      	bls.n	80174be <etharp_query+0x7e>
 80174b0:	4b7a      	ldr	r3, [pc, #488]	@ (801769c <etharp_query+0x25c>)
 80174b2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80174b6:	497a      	ldr	r1, [pc, #488]	@ (80176a0 <etharp_query+0x260>)
 80174b8:	487a      	ldr	r0, [pc, #488]	@ (80176a4 <etharp_query+0x264>)
 80174ba:	f002 fd0f 	bl	8019edc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80174be:	8a7b      	ldrh	r3, [r7, #18]
 80174c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80174c2:	7c7a      	ldrb	r2, [r7, #17]
 80174c4:	4978      	ldr	r1, [pc, #480]	@ (80176a8 <etharp_query+0x268>)
 80174c6:	4613      	mov	r3, r2
 80174c8:	005b      	lsls	r3, r3, #1
 80174ca:	4413      	add	r3, r2
 80174cc:	00db      	lsls	r3, r3, #3
 80174ce:	440b      	add	r3, r1
 80174d0:	3314      	adds	r3, #20
 80174d2:	781b      	ldrb	r3, [r3, #0]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d115      	bne.n	8017504 <etharp_query+0xc4>
    is_new_entry = 1;
 80174d8:	2301      	movs	r3, #1
 80174da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80174dc:	7c7a      	ldrb	r2, [r7, #17]
 80174de:	4972      	ldr	r1, [pc, #456]	@ (80176a8 <etharp_query+0x268>)
 80174e0:	4613      	mov	r3, r2
 80174e2:	005b      	lsls	r3, r3, #1
 80174e4:	4413      	add	r3, r2
 80174e6:	00db      	lsls	r3, r3, #3
 80174e8:	440b      	add	r3, r1
 80174ea:	3314      	adds	r3, #20
 80174ec:	2201      	movs	r2, #1
 80174ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80174f0:	7c7a      	ldrb	r2, [r7, #17]
 80174f2:	496d      	ldr	r1, [pc, #436]	@ (80176a8 <etharp_query+0x268>)
 80174f4:	4613      	mov	r3, r2
 80174f6:	005b      	lsls	r3, r3, #1
 80174f8:	4413      	add	r3, r2
 80174fa:	00db      	lsls	r3, r3, #3
 80174fc:	440b      	add	r3, r1
 80174fe:	3308      	adds	r3, #8
 8017500:	68fa      	ldr	r2, [r7, #12]
 8017502:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017504:	7c7a      	ldrb	r2, [r7, #17]
 8017506:	4968      	ldr	r1, [pc, #416]	@ (80176a8 <etharp_query+0x268>)
 8017508:	4613      	mov	r3, r2
 801750a:	005b      	lsls	r3, r3, #1
 801750c:	4413      	add	r3, r2
 801750e:	00db      	lsls	r3, r3, #3
 8017510:	440b      	add	r3, r1
 8017512:	3314      	adds	r3, #20
 8017514:	781b      	ldrb	r3, [r3, #0]
 8017516:	2b01      	cmp	r3, #1
 8017518:	d011      	beq.n	801753e <etharp_query+0xfe>
 801751a:	7c7a      	ldrb	r2, [r7, #17]
 801751c:	4962      	ldr	r1, [pc, #392]	@ (80176a8 <etharp_query+0x268>)
 801751e:	4613      	mov	r3, r2
 8017520:	005b      	lsls	r3, r3, #1
 8017522:	4413      	add	r3, r2
 8017524:	00db      	lsls	r3, r3, #3
 8017526:	440b      	add	r3, r1
 8017528:	3314      	adds	r3, #20
 801752a:	781b      	ldrb	r3, [r3, #0]
 801752c:	2b01      	cmp	r3, #1
 801752e:	d806      	bhi.n	801753e <etharp_query+0xfe>
 8017530:	4b5a      	ldr	r3, [pc, #360]	@ (801769c <etharp_query+0x25c>)
 8017532:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8017536:	495d      	ldr	r1, [pc, #372]	@ (80176ac <etharp_query+0x26c>)
 8017538:	485a      	ldr	r0, [pc, #360]	@ (80176a4 <etharp_query+0x264>)
 801753a:	f002 fccf 	bl	8019edc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801753e:	6a3b      	ldr	r3, [r7, #32]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d102      	bne.n	801754a <etharp_query+0x10a>
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d10c      	bne.n	8017564 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801754a:	68b9      	ldr	r1, [r7, #8]
 801754c:	68f8      	ldr	r0, [r7, #12]
 801754e:	f000 f963 	bl	8017818 <etharp_request>
 8017552:	4603      	mov	r3, r0
 8017554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d102      	bne.n	8017564 <etharp_query+0x124>
      return result;
 801755e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8017562:	e096      	b.n	8017692 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d106      	bne.n	8017578 <etharp_query+0x138>
 801756a:	4b4c      	ldr	r3, [pc, #304]	@ (801769c <etharp_query+0x25c>)
 801756c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8017570:	494f      	ldr	r1, [pc, #316]	@ (80176b0 <etharp_query+0x270>)
 8017572:	484c      	ldr	r0, [pc, #304]	@ (80176a4 <etharp_query+0x264>)
 8017574:	f002 fcb2 	bl	8019edc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017578:	7c7a      	ldrb	r2, [r7, #17]
 801757a:	494b      	ldr	r1, [pc, #300]	@ (80176a8 <etharp_query+0x268>)
 801757c:	4613      	mov	r3, r2
 801757e:	005b      	lsls	r3, r3, #1
 8017580:	4413      	add	r3, r2
 8017582:	00db      	lsls	r3, r3, #3
 8017584:	440b      	add	r3, r1
 8017586:	3314      	adds	r3, #20
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	2b01      	cmp	r3, #1
 801758c:	d917      	bls.n	80175be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801758e:	4a49      	ldr	r2, [pc, #292]	@ (80176b4 <etharp_query+0x274>)
 8017590:	7c7b      	ldrb	r3, [r7, #17]
 8017592:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017594:	7c7a      	ldrb	r2, [r7, #17]
 8017596:	4613      	mov	r3, r2
 8017598:	005b      	lsls	r3, r3, #1
 801759a:	4413      	add	r3, r2
 801759c:	00db      	lsls	r3, r3, #3
 801759e:	3308      	adds	r3, #8
 80175a0:	4a41      	ldr	r2, [pc, #260]	@ (80176a8 <etharp_query+0x268>)
 80175a2:	4413      	add	r3, r2
 80175a4:	3304      	adds	r3, #4
 80175a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80175aa:	9200      	str	r2, [sp, #0]
 80175ac:	697a      	ldr	r2, [r7, #20]
 80175ae:	6879      	ldr	r1, [r7, #4]
 80175b0:	68f8      	ldr	r0, [r7, #12]
 80175b2:	f001 fd05 	bl	8018fc0 <ethernet_output>
 80175b6:	4603      	mov	r3, r0
 80175b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80175bc:	e067      	b.n	801768e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80175be:	7c7a      	ldrb	r2, [r7, #17]
 80175c0:	4939      	ldr	r1, [pc, #228]	@ (80176a8 <etharp_query+0x268>)
 80175c2:	4613      	mov	r3, r2
 80175c4:	005b      	lsls	r3, r3, #1
 80175c6:	4413      	add	r3, r2
 80175c8:	00db      	lsls	r3, r3, #3
 80175ca:	440b      	add	r3, r1
 80175cc:	3314      	adds	r3, #20
 80175ce:	781b      	ldrb	r3, [r3, #0]
 80175d0:	2b01      	cmp	r3, #1
 80175d2:	d15c      	bne.n	801768e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80175d4:	2300      	movs	r3, #0
 80175d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80175dc:	e01c      	b.n	8017618 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80175de:	69fb      	ldr	r3, [r7, #28]
 80175e0:	895a      	ldrh	r2, [r3, #10]
 80175e2:	69fb      	ldr	r3, [r7, #28]
 80175e4:	891b      	ldrh	r3, [r3, #8]
 80175e6:	429a      	cmp	r2, r3
 80175e8:	d10a      	bne.n	8017600 <etharp_query+0x1c0>
 80175ea:	69fb      	ldr	r3, [r7, #28]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d006      	beq.n	8017600 <etharp_query+0x1c0>
 80175f2:	4b2a      	ldr	r3, [pc, #168]	@ (801769c <etharp_query+0x25c>)
 80175f4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80175f8:	492f      	ldr	r1, [pc, #188]	@ (80176b8 <etharp_query+0x278>)
 80175fa:	482a      	ldr	r0, [pc, #168]	@ (80176a4 <etharp_query+0x264>)
 80175fc:	f002 fc6e 	bl	8019edc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017600:	69fb      	ldr	r3, [r7, #28]
 8017602:	7b1b      	ldrb	r3, [r3, #12]
 8017604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017608:	2b00      	cmp	r3, #0
 801760a:	d002      	beq.n	8017612 <etharp_query+0x1d2>
        copy_needed = 1;
 801760c:	2301      	movs	r3, #1
 801760e:	61bb      	str	r3, [r7, #24]
        break;
 8017610:	e005      	b.n	801761e <etharp_query+0x1de>
      }
      p = p->next;
 8017612:	69fb      	ldr	r3, [r7, #28]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017618:	69fb      	ldr	r3, [r7, #28]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d1df      	bne.n	80175de <etharp_query+0x19e>
    }
    if (copy_needed) {
 801761e:	69bb      	ldr	r3, [r7, #24]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d007      	beq.n	8017634 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017624:	687a      	ldr	r2, [r7, #4]
 8017626:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801762a:	200e      	movs	r0, #14
 801762c:	f7f9 fa4e 	bl	8010acc <pbuf_clone>
 8017630:	61f8      	str	r0, [r7, #28]
 8017632:	e004      	b.n	801763e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017638:	69f8      	ldr	r0, [r7, #28]
 801763a:	f7f9 f875 	bl	8010728 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801763e:	69fb      	ldr	r3, [r7, #28]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d021      	beq.n	8017688 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017644:	7c7a      	ldrb	r2, [r7, #17]
 8017646:	4918      	ldr	r1, [pc, #96]	@ (80176a8 <etharp_query+0x268>)
 8017648:	4613      	mov	r3, r2
 801764a:	005b      	lsls	r3, r3, #1
 801764c:	4413      	add	r3, r2
 801764e:	00db      	lsls	r3, r3, #3
 8017650:	440b      	add	r3, r1
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d00a      	beq.n	801766e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017658:	7c7a      	ldrb	r2, [r7, #17]
 801765a:	4913      	ldr	r1, [pc, #76]	@ (80176a8 <etharp_query+0x268>)
 801765c:	4613      	mov	r3, r2
 801765e:	005b      	lsls	r3, r3, #1
 8017660:	4413      	add	r3, r2
 8017662:	00db      	lsls	r3, r3, #3
 8017664:	440b      	add	r3, r1
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	4618      	mov	r0, r3
 801766a:	f7f8 ffb7 	bl	80105dc <pbuf_free>
      }
      arp_table[i].q = p;
 801766e:	7c7a      	ldrb	r2, [r7, #17]
 8017670:	490d      	ldr	r1, [pc, #52]	@ (80176a8 <etharp_query+0x268>)
 8017672:	4613      	mov	r3, r2
 8017674:	005b      	lsls	r3, r3, #1
 8017676:	4413      	add	r3, r2
 8017678:	00db      	lsls	r3, r3, #3
 801767a:	440b      	add	r3, r1
 801767c:	69fa      	ldr	r2, [r7, #28]
 801767e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017680:	2300      	movs	r3, #0
 8017682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017686:	e002      	b.n	801768e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017688:	23ff      	movs	r3, #255	@ 0xff
 801768a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801768e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8017692:	4618      	mov	r0, r3
 8017694:	3728      	adds	r7, #40	@ 0x28
 8017696:	46bd      	mov	sp, r7
 8017698:	bd80      	pop	{r7, pc}
 801769a:	bf00      	nop
 801769c:	0801d520 	.word	0x0801d520
 80176a0:	0801d6cc 	.word	0x0801d6cc
 80176a4:	0801d598 	.word	0x0801d598
 80176a8:	2002750c 	.word	0x2002750c
 80176ac:	0801d6dc 	.word	0x0801d6dc
 80176b0:	0801d6c0 	.word	0x0801d6c0
 80176b4:	200275fc 	.word	0x200275fc
 80176b8:	0801d704 	.word	0x0801d704

080176bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b08a      	sub	sp, #40	@ 0x28
 80176c0:	af02      	add	r7, sp, #8
 80176c2:	60f8      	str	r0, [r7, #12]
 80176c4:	60b9      	str	r1, [r7, #8]
 80176c6:	607a      	str	r2, [r7, #4]
 80176c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80176ca:	2300      	movs	r3, #0
 80176cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d106      	bne.n	80176e2 <etharp_raw+0x26>
 80176d4:	4b3a      	ldr	r3, [pc, #232]	@ (80177c0 <etharp_raw+0x104>)
 80176d6:	f240 4257 	movw	r2, #1111	@ 0x457
 80176da:	493a      	ldr	r1, [pc, #232]	@ (80177c4 <etharp_raw+0x108>)
 80176dc:	483a      	ldr	r0, [pc, #232]	@ (80177c8 <etharp_raw+0x10c>)
 80176de:	f002 fbfd 	bl	8019edc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80176e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80176e6:	211c      	movs	r1, #28
 80176e8:	200e      	movs	r0, #14
 80176ea:	f7f8 fc93 	bl	8010014 <pbuf_alloc>
 80176ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80176f0:	69bb      	ldr	r3, [r7, #24]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d102      	bne.n	80176fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80176f6:	f04f 33ff 	mov.w	r3, #4294967295
 80176fa:	e05d      	b.n	80177b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80176fc:	69bb      	ldr	r3, [r7, #24]
 80176fe:	895b      	ldrh	r3, [r3, #10]
 8017700:	2b1b      	cmp	r3, #27
 8017702:	d806      	bhi.n	8017712 <etharp_raw+0x56>
 8017704:	4b2e      	ldr	r3, [pc, #184]	@ (80177c0 <etharp_raw+0x104>)
 8017706:	f240 4262 	movw	r2, #1122	@ 0x462
 801770a:	4930      	ldr	r1, [pc, #192]	@ (80177cc <etharp_raw+0x110>)
 801770c:	482e      	ldr	r0, [pc, #184]	@ (80177c8 <etharp_raw+0x10c>)
 801770e:	f002 fbe5 	bl	8019edc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017712:	69bb      	ldr	r3, [r7, #24]
 8017714:	685b      	ldr	r3, [r3, #4]
 8017716:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017718:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801771a:	4618      	mov	r0, r3
 801771c:	f7f7 fb70 	bl	800ee00 <lwip_htons>
 8017720:	4603      	mov	r3, r0
 8017722:	461a      	mov	r2, r3
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801772e:	2b06      	cmp	r3, #6
 8017730:	d006      	beq.n	8017740 <etharp_raw+0x84>
 8017732:	4b23      	ldr	r3, [pc, #140]	@ (80177c0 <etharp_raw+0x104>)
 8017734:	f240 4269 	movw	r2, #1129	@ 0x469
 8017738:	4925      	ldr	r1, [pc, #148]	@ (80177d0 <etharp_raw+0x114>)
 801773a:	4823      	ldr	r0, [pc, #140]	@ (80177c8 <etharp_raw+0x10c>)
 801773c:	f002 fbce 	bl	8019edc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017740:	697b      	ldr	r3, [r7, #20]
 8017742:	3308      	adds	r3, #8
 8017744:	2206      	movs	r2, #6
 8017746:	6839      	ldr	r1, [r7, #0]
 8017748:	4618      	mov	r0, r3
 801774a:	f002 fdf2 	bl	801a332 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801774e:	697b      	ldr	r3, [r7, #20]
 8017750:	3312      	adds	r3, #18
 8017752:	2206      	movs	r2, #6
 8017754:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017756:	4618      	mov	r0, r3
 8017758:	f002 fdeb 	bl	801a332 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801775c:	697b      	ldr	r3, [r7, #20]
 801775e:	330e      	adds	r3, #14
 8017760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017762:	6812      	ldr	r2, [r2, #0]
 8017764:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017766:	697b      	ldr	r3, [r7, #20]
 8017768:	3318      	adds	r3, #24
 801776a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801776c:	6812      	ldr	r2, [r2, #0]
 801776e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017770:	697b      	ldr	r3, [r7, #20]
 8017772:	2200      	movs	r2, #0
 8017774:	701a      	strb	r2, [r3, #0]
 8017776:	2200      	movs	r2, #0
 8017778:	f042 0201 	orr.w	r2, r2, #1
 801777c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801777e:	697b      	ldr	r3, [r7, #20]
 8017780:	2200      	movs	r2, #0
 8017782:	f042 0208 	orr.w	r2, r2, #8
 8017786:	709a      	strb	r2, [r3, #2]
 8017788:	2200      	movs	r2, #0
 801778a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	2206      	movs	r2, #6
 8017790:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017792:	697b      	ldr	r3, [r7, #20]
 8017794:	2204      	movs	r2, #4
 8017796:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017798:	f640 0306 	movw	r3, #2054	@ 0x806
 801779c:	9300      	str	r3, [sp, #0]
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	68ba      	ldr	r2, [r7, #8]
 80177a2:	69b9      	ldr	r1, [r7, #24]
 80177a4:	68f8      	ldr	r0, [r7, #12]
 80177a6:	f001 fc0b 	bl	8018fc0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80177aa:	69b8      	ldr	r0, [r7, #24]
 80177ac:	f7f8 ff16 	bl	80105dc <pbuf_free>
  p = NULL;
 80177b0:	2300      	movs	r3, #0
 80177b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80177b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80177b8:	4618      	mov	r0, r3
 80177ba:	3720      	adds	r7, #32
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd80      	pop	{r7, pc}
 80177c0:	0801d520 	.word	0x0801d520
 80177c4:	0801d670 	.word	0x0801d670
 80177c8:	0801d598 	.word	0x0801d598
 80177cc:	0801d720 	.word	0x0801d720
 80177d0:	0801d754 	.word	0x0801d754

080177d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b088      	sub	sp, #32
 80177d8:	af04      	add	r7, sp, #16
 80177da:	60f8      	str	r0, [r7, #12]
 80177dc:	60b9      	str	r1, [r7, #8]
 80177de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80177f0:	2201      	movs	r2, #1
 80177f2:	9203      	str	r2, [sp, #12]
 80177f4:	68ba      	ldr	r2, [r7, #8]
 80177f6:	9202      	str	r2, [sp, #8]
 80177f8:	4a06      	ldr	r2, [pc, #24]	@ (8017814 <etharp_request_dst+0x40>)
 80177fa:	9201      	str	r2, [sp, #4]
 80177fc:	9300      	str	r3, [sp, #0]
 80177fe:	4603      	mov	r3, r0
 8017800:	687a      	ldr	r2, [r7, #4]
 8017802:	68f8      	ldr	r0, [r7, #12]
 8017804:	f7ff ff5a 	bl	80176bc <etharp_raw>
 8017808:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801780a:	4618      	mov	r0, r3
 801780c:	3710      	adds	r7, #16
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}
 8017812:	bf00      	nop
 8017814:	0801e1fc 	.word	0x0801e1fc

08017818 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b082      	sub	sp, #8
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]
 8017820:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017822:	4a05      	ldr	r2, [pc, #20]	@ (8017838 <etharp_request+0x20>)
 8017824:	6839      	ldr	r1, [r7, #0]
 8017826:	6878      	ldr	r0, [r7, #4]
 8017828:	f7ff ffd4 	bl	80177d4 <etharp_request_dst>
 801782c:	4603      	mov	r3, r0
}
 801782e:	4618      	mov	r0, r3
 8017830:	3708      	adds	r7, #8
 8017832:	46bd      	mov	sp, r7
 8017834:	bd80      	pop	{r7, pc}
 8017836:	bf00      	nop
 8017838:	0801e1f4 	.word	0x0801e1f4

0801783c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b08e      	sub	sp, #56	@ 0x38
 8017840:	af04      	add	r7, sp, #16
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017846:	4b79      	ldr	r3, [pc, #484]	@ (8017a2c <icmp_input+0x1f0>)
 8017848:	689b      	ldr	r3, [r3, #8]
 801784a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801784c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	f003 030f 	and.w	r3, r3, #15
 8017854:	b2db      	uxtb	r3, r3
 8017856:	009b      	lsls	r3, r3, #2
 8017858:	b2db      	uxtb	r3, r3
 801785a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801785c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801785e:	2b13      	cmp	r3, #19
 8017860:	f240 80cd 	bls.w	80179fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	895b      	ldrh	r3, [r3, #10]
 8017868:	2b03      	cmp	r3, #3
 801786a:	f240 80ca 	bls.w	8017a02 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	685b      	ldr	r3, [r3, #4]
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017878:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801787c:	2b00      	cmp	r3, #0
 801787e:	f000 80b7 	beq.w	80179f0 <icmp_input+0x1b4>
 8017882:	2b08      	cmp	r3, #8
 8017884:	f040 80b7 	bne.w	80179f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017888:	4b69      	ldr	r3, [pc, #420]	@ (8017a30 <icmp_input+0x1f4>)
 801788a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801788c:	4b67      	ldr	r3, [pc, #412]	@ (8017a2c <icmp_input+0x1f0>)
 801788e:	695b      	ldr	r3, [r3, #20]
 8017890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017894:	2be0      	cmp	r3, #224	@ 0xe0
 8017896:	f000 80bb 	beq.w	8017a10 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801789a:	4b64      	ldr	r3, [pc, #400]	@ (8017a2c <icmp_input+0x1f0>)
 801789c:	695b      	ldr	r3, [r3, #20]
 801789e:	4a63      	ldr	r2, [pc, #396]	@ (8017a2c <icmp_input+0x1f0>)
 80178a0:	6812      	ldr	r2, [r2, #0]
 80178a2:	4611      	mov	r1, r2
 80178a4:	4618      	mov	r0, r3
 80178a6:	f000 fbed 	bl	8018084 <ip4_addr_isbroadcast_u32>
 80178aa:	4603      	mov	r3, r0
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	f040 80b1 	bne.w	8017a14 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	891b      	ldrh	r3, [r3, #8]
 80178b6:	2b07      	cmp	r3, #7
 80178b8:	f240 80a5 	bls.w	8017a06 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80178bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80178be:	330e      	adds	r3, #14
 80178c0:	4619      	mov	r1, r3
 80178c2:	6878      	ldr	r0, [r7, #4]
 80178c4:	f7f8 fdf4 	bl	80104b0 <pbuf_add_header>
 80178c8:	4603      	mov	r3, r0
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d04b      	beq.n	8017966 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	891a      	ldrh	r2, [r3, #8]
 80178d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80178d4:	4413      	add	r3, r2
 80178d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	891b      	ldrh	r3, [r3, #8]
 80178dc:	8b7a      	ldrh	r2, [r7, #26]
 80178de:	429a      	cmp	r2, r3
 80178e0:	f0c0 809a 	bcc.w	8017a18 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80178e4:	8b7b      	ldrh	r3, [r7, #26]
 80178e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80178ea:	4619      	mov	r1, r3
 80178ec:	200e      	movs	r0, #14
 80178ee:	f7f8 fb91 	bl	8010014 <pbuf_alloc>
 80178f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80178f4:	697b      	ldr	r3, [r7, #20]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	f000 8090 	beq.w	8017a1c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80178fc:	697b      	ldr	r3, [r7, #20]
 80178fe:	895b      	ldrh	r3, [r3, #10]
 8017900:	461a      	mov	r2, r3
 8017902:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017904:	3308      	adds	r3, #8
 8017906:	429a      	cmp	r2, r3
 8017908:	d203      	bcs.n	8017912 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801790a:	6978      	ldr	r0, [r7, #20]
 801790c:	f7f8 fe66 	bl	80105dc <pbuf_free>
          goto icmperr;
 8017910:	e085      	b.n	8017a1e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017912:	697b      	ldr	r3, [r7, #20]
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017918:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801791a:	4618      	mov	r0, r3
 801791c:	f002 fd09 	bl	801a332 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017920:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017922:	4619      	mov	r1, r3
 8017924:	6978      	ldr	r0, [r7, #20]
 8017926:	f7f8 fdd3 	bl	80104d0 <pbuf_remove_header>
 801792a:	4603      	mov	r3, r0
 801792c:	2b00      	cmp	r3, #0
 801792e:	d009      	beq.n	8017944 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017930:	4b40      	ldr	r3, [pc, #256]	@ (8017a34 <icmp_input+0x1f8>)
 8017932:	22b6      	movs	r2, #182	@ 0xb6
 8017934:	4940      	ldr	r1, [pc, #256]	@ (8017a38 <icmp_input+0x1fc>)
 8017936:	4841      	ldr	r0, [pc, #260]	@ (8017a3c <icmp_input+0x200>)
 8017938:	f002 fad0 	bl	8019edc <iprintf>
          pbuf_free(r);
 801793c:	6978      	ldr	r0, [r7, #20]
 801793e:	f7f8 fe4d 	bl	80105dc <pbuf_free>
          goto icmperr;
 8017942:	e06c      	b.n	8017a1e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017944:	6879      	ldr	r1, [r7, #4]
 8017946:	6978      	ldr	r0, [r7, #20]
 8017948:	f7f8 ff7c 	bl	8010844 <pbuf_copy>
 801794c:	4603      	mov	r3, r0
 801794e:	2b00      	cmp	r3, #0
 8017950:	d003      	beq.n	801795a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017952:	6978      	ldr	r0, [r7, #20]
 8017954:	f7f8 fe42 	bl	80105dc <pbuf_free>
          goto icmperr;
 8017958:	e061      	b.n	8017a1e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801795a:	6878      	ldr	r0, [r7, #4]
 801795c:	f7f8 fe3e 	bl	80105dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017960:	697b      	ldr	r3, [r7, #20]
 8017962:	607b      	str	r3, [r7, #4]
 8017964:	e00f      	b.n	8017986 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017966:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017968:	330e      	adds	r3, #14
 801796a:	4619      	mov	r1, r3
 801796c:	6878      	ldr	r0, [r7, #4]
 801796e:	f7f8 fdaf 	bl	80104d0 <pbuf_remove_header>
 8017972:	4603      	mov	r3, r0
 8017974:	2b00      	cmp	r3, #0
 8017976:	d006      	beq.n	8017986 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017978:	4b2e      	ldr	r3, [pc, #184]	@ (8017a34 <icmp_input+0x1f8>)
 801797a:	22c7      	movs	r2, #199	@ 0xc7
 801797c:	4930      	ldr	r1, [pc, #192]	@ (8017a40 <icmp_input+0x204>)
 801797e:	482f      	ldr	r0, [pc, #188]	@ (8017a3c <icmp_input+0x200>)
 8017980:	f002 faac 	bl	8019edc <iprintf>
          goto icmperr;
 8017984:	e04b      	b.n	8017a1e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	685b      	ldr	r3, [r3, #4]
 801798a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801798c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801798e:	4619      	mov	r1, r3
 8017990:	6878      	ldr	r0, [r7, #4]
 8017992:	f7f8 fd8d 	bl	80104b0 <pbuf_add_header>
 8017996:	4603      	mov	r3, r0
 8017998:	2b00      	cmp	r3, #0
 801799a:	d12b      	bne.n	80179f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	685b      	ldr	r3, [r3, #4]
 80179a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80179a2:	69fb      	ldr	r3, [r7, #28]
 80179a4:	681a      	ldr	r2, [r3, #0]
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80179aa:	4b20      	ldr	r3, [pc, #128]	@ (8017a2c <icmp_input+0x1f0>)
 80179ac:	691a      	ldr	r2, [r3, #16]
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80179b2:	693b      	ldr	r3, [r7, #16]
 80179b4:	2200      	movs	r2, #0
 80179b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80179b8:	693b      	ldr	r3, [r7, #16]
 80179ba:	2200      	movs	r2, #0
 80179bc:	709a      	strb	r2, [r3, #2]
 80179be:	2200      	movs	r2, #0
 80179c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	22ff      	movs	r2, #255	@ 0xff
 80179c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	2200      	movs	r2, #0
 80179cc:	729a      	strb	r2, [r3, #10]
 80179ce:	2200      	movs	r2, #0
 80179d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80179d2:	683b      	ldr	r3, [r7, #0]
 80179d4:	9302      	str	r3, [sp, #8]
 80179d6:	2301      	movs	r3, #1
 80179d8:	9301      	str	r3, [sp, #4]
 80179da:	2300      	movs	r3, #0
 80179dc:	9300      	str	r3, [sp, #0]
 80179de:	23ff      	movs	r3, #255	@ 0xff
 80179e0:	2200      	movs	r2, #0
 80179e2:	69f9      	ldr	r1, [r7, #28]
 80179e4:	6878      	ldr	r0, [r7, #4]
 80179e6:	f000 fa75 	bl	8017ed4 <ip4_output_if>
 80179ea:	4603      	mov	r3, r0
 80179ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80179ee:	e001      	b.n	80179f4 <icmp_input+0x1b8>
      break;
 80179f0:	bf00      	nop
 80179f2:	e000      	b.n	80179f6 <icmp_input+0x1ba>
      break;
 80179f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80179f6:	6878      	ldr	r0, [r7, #4]
 80179f8:	f7f8 fdf0 	bl	80105dc <pbuf_free>
  return;
 80179fc:	e013      	b.n	8017a26 <icmp_input+0x1ea>
    goto lenerr;
 80179fe:	bf00      	nop
 8017a00:	e002      	b.n	8017a08 <icmp_input+0x1cc>
    goto lenerr;
 8017a02:	bf00      	nop
 8017a04:	e000      	b.n	8017a08 <icmp_input+0x1cc>
        goto lenerr;
 8017a06:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017a08:	6878      	ldr	r0, [r7, #4]
 8017a0a:	f7f8 fde7 	bl	80105dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017a0e:	e00a      	b.n	8017a26 <icmp_input+0x1ea>
        goto icmperr;
 8017a10:	bf00      	nop
 8017a12:	e004      	b.n	8017a1e <icmp_input+0x1e2>
        goto icmperr;
 8017a14:	bf00      	nop
 8017a16:	e002      	b.n	8017a1e <icmp_input+0x1e2>
          goto icmperr;
 8017a18:	bf00      	nop
 8017a1a:	e000      	b.n	8017a1e <icmp_input+0x1e2>
          goto icmperr;
 8017a1c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f7f8 fddc 	bl	80105dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017a24:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017a26:	3728      	adds	r7, #40	@ 0x28
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	bd80      	pop	{r7, pc}
 8017a2c:	200243ac 	.word	0x200243ac
 8017a30:	200243c0 	.word	0x200243c0
 8017a34:	0801d798 	.word	0x0801d798
 8017a38:	0801d7d0 	.word	0x0801d7d0
 8017a3c:	0801d808 	.word	0x0801d808
 8017a40:	0801d830 	.word	0x0801d830

08017a44 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b082      	sub	sp, #8
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
 8017a4c:	460b      	mov	r3, r1
 8017a4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017a50:	78fb      	ldrb	r3, [r7, #3]
 8017a52:	461a      	mov	r2, r3
 8017a54:	2103      	movs	r1, #3
 8017a56:	6878      	ldr	r0, [r7, #4]
 8017a58:	f000 f814 	bl	8017a84 <icmp_send_response>
}
 8017a5c:	bf00      	nop
 8017a5e:	3708      	adds	r7, #8
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}

08017a64 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b082      	sub	sp, #8
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	460b      	mov	r3, r1
 8017a6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017a70:	78fb      	ldrb	r3, [r7, #3]
 8017a72:	461a      	mov	r2, r3
 8017a74:	210b      	movs	r1, #11
 8017a76:	6878      	ldr	r0, [r7, #4]
 8017a78:	f000 f804 	bl	8017a84 <icmp_send_response>
}
 8017a7c:	bf00      	nop
 8017a7e:	3708      	adds	r7, #8
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}

08017a84 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b08c      	sub	sp, #48	@ 0x30
 8017a88:	af04      	add	r7, sp, #16
 8017a8a:	6078      	str	r0, [r7, #4]
 8017a8c:	460b      	mov	r3, r1
 8017a8e:	70fb      	strb	r3, [r7, #3]
 8017a90:	4613      	mov	r3, r2
 8017a92:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017a94:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017a98:	2124      	movs	r1, #36	@ 0x24
 8017a9a:	2022      	movs	r0, #34	@ 0x22
 8017a9c:	f7f8 faba 	bl	8010014 <pbuf_alloc>
 8017aa0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017aa2:	69fb      	ldr	r3, [r7, #28]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d04c      	beq.n	8017b42 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017aa8:	69fb      	ldr	r3, [r7, #28]
 8017aaa:	895b      	ldrh	r3, [r3, #10]
 8017aac:	2b23      	cmp	r3, #35	@ 0x23
 8017aae:	d806      	bhi.n	8017abe <icmp_send_response+0x3a>
 8017ab0:	4b26      	ldr	r3, [pc, #152]	@ (8017b4c <icmp_send_response+0xc8>)
 8017ab2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8017ab6:	4926      	ldr	r1, [pc, #152]	@ (8017b50 <icmp_send_response+0xcc>)
 8017ab8:	4826      	ldr	r0, [pc, #152]	@ (8017b54 <icmp_send_response+0xd0>)
 8017aba:	f002 fa0f 	bl	8019edc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017ac4:	69fb      	ldr	r3, [r7, #28]
 8017ac6:	685b      	ldr	r3, [r3, #4]
 8017ac8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017aca:	697b      	ldr	r3, [r7, #20]
 8017acc:	78fa      	ldrb	r2, [r7, #3]
 8017ace:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017ad0:	697b      	ldr	r3, [r7, #20]
 8017ad2:	78ba      	ldrb	r2, [r7, #2]
 8017ad4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	2200      	movs	r2, #0
 8017ada:	711a      	strb	r2, [r3, #4]
 8017adc:	2200      	movs	r2, #0
 8017ade:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017ae0:	697b      	ldr	r3, [r7, #20]
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	719a      	strb	r2, [r3, #6]
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017aea:	69fb      	ldr	r3, [r7, #28]
 8017aec:	685b      	ldr	r3, [r3, #4]
 8017aee:	f103 0008 	add.w	r0, r3, #8
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	685b      	ldr	r3, [r3, #4]
 8017af6:	221c      	movs	r2, #28
 8017af8:	4619      	mov	r1, r3
 8017afa:	f002 fc1a 	bl	801a332 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017afe:	69bb      	ldr	r3, [r7, #24]
 8017b00:	68db      	ldr	r3, [r3, #12]
 8017b02:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017b04:	f107 030c 	add.w	r3, r7, #12
 8017b08:	4618      	mov	r0, r3
 8017b0a:	f000 f825 	bl	8017b58 <ip4_route>
 8017b0e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017b10:	693b      	ldr	r3, [r7, #16]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d011      	beq.n	8017b3a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017b16:	697b      	ldr	r3, [r7, #20]
 8017b18:	2200      	movs	r2, #0
 8017b1a:	709a      	strb	r2, [r3, #2]
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017b20:	f107 020c 	add.w	r2, r7, #12
 8017b24:	693b      	ldr	r3, [r7, #16]
 8017b26:	9302      	str	r3, [sp, #8]
 8017b28:	2301      	movs	r3, #1
 8017b2a:	9301      	str	r3, [sp, #4]
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	9300      	str	r3, [sp, #0]
 8017b30:	23ff      	movs	r3, #255	@ 0xff
 8017b32:	2100      	movs	r1, #0
 8017b34:	69f8      	ldr	r0, [r7, #28]
 8017b36:	f000 f9cd 	bl	8017ed4 <ip4_output_if>
  }
  pbuf_free(q);
 8017b3a:	69f8      	ldr	r0, [r7, #28]
 8017b3c:	f7f8 fd4e 	bl	80105dc <pbuf_free>
 8017b40:	e000      	b.n	8017b44 <icmp_send_response+0xc0>
    return;
 8017b42:	bf00      	nop
}
 8017b44:	3720      	adds	r7, #32
 8017b46:	46bd      	mov	sp, r7
 8017b48:	bd80      	pop	{r7, pc}
 8017b4a:	bf00      	nop
 8017b4c:	0801d798 	.word	0x0801d798
 8017b50:	0801d864 	.word	0x0801d864
 8017b54:	0801d808 	.word	0x0801d808

08017b58 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017b58:	b480      	push	{r7}
 8017b5a:	b085      	sub	sp, #20
 8017b5c:	af00      	add	r7, sp, #0
 8017b5e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017b60:	4b33      	ldr	r3, [pc, #204]	@ (8017c30 <ip4_route+0xd8>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	60fb      	str	r3, [r7, #12]
 8017b66:	e036      	b.n	8017bd6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017b6e:	f003 0301 	and.w	r3, r3, #1
 8017b72:	b2db      	uxtb	r3, r3
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d02b      	beq.n	8017bd0 <ip4_route+0x78>
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017b7e:	089b      	lsrs	r3, r3, #2
 8017b80:	f003 0301 	and.w	r3, r3, #1
 8017b84:	b2db      	uxtb	r3, r3
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d022      	beq.n	8017bd0 <ip4_route+0x78>
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	3304      	adds	r3, #4
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d01d      	beq.n	8017bd0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	681a      	ldr	r2, [r3, #0]
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	3304      	adds	r3, #4
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	405a      	eors	r2, r3
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	3308      	adds	r3, #8
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	4013      	ands	r3, r2
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d101      	bne.n	8017bb0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	e038      	b.n	8017c22 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017bb6:	f003 0302 	and.w	r3, r3, #2
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d108      	bne.n	8017bd0 <ip4_route+0x78>
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	681a      	ldr	r2, [r3, #0]
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	330c      	adds	r3, #12
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	d101      	bne.n	8017bd0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	e028      	b.n	8017c22 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	60fb      	str	r3, [r7, #12]
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d1c5      	bne.n	8017b68 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017bdc:	4b15      	ldr	r3, [pc, #84]	@ (8017c34 <ip4_route+0xdc>)
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d01a      	beq.n	8017c1a <ip4_route+0xc2>
 8017be4:	4b13      	ldr	r3, [pc, #76]	@ (8017c34 <ip4_route+0xdc>)
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017bec:	f003 0301 	and.w	r3, r3, #1
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d012      	beq.n	8017c1a <ip4_route+0xc2>
 8017bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8017c34 <ip4_route+0xdc>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017bfc:	f003 0304 	and.w	r3, r3, #4
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d00a      	beq.n	8017c1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017c04:	4b0b      	ldr	r3, [pc, #44]	@ (8017c34 <ip4_route+0xdc>)
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	3304      	adds	r3, #4
 8017c0a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d004      	beq.n	8017c1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	b2db      	uxtb	r3, r3
 8017c16:	2b7f      	cmp	r3, #127	@ 0x7f
 8017c18:	d101      	bne.n	8017c1e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	e001      	b.n	8017c22 <ip4_route+0xca>
  }

  return netif_default;
 8017c1e:	4b05      	ldr	r3, [pc, #20]	@ (8017c34 <ip4_route+0xdc>)
 8017c20:	681b      	ldr	r3, [r3, #0]
}
 8017c22:	4618      	mov	r0, r3
 8017c24:	3714      	adds	r7, #20
 8017c26:	46bd      	mov	sp, r7
 8017c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2c:	4770      	bx	lr
 8017c2e:	bf00      	nop
 8017c30:	200274a0 	.word	0x200274a0
 8017c34:	200274a4 	.word	0x200274a4

08017c38 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b082      	sub	sp, #8
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017c46:	f003 0301 	and.w	r3, r3, #1
 8017c4a:	b2db      	uxtb	r3, r3
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d016      	beq.n	8017c7e <ip4_input_accept+0x46>
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	3304      	adds	r3, #4
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d011      	beq.n	8017c7e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8017c88 <ip4_input_accept+0x50>)
 8017c5c:	695a      	ldr	r2, [r3, #20]
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	3304      	adds	r3, #4
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	429a      	cmp	r2, r3
 8017c66:	d008      	beq.n	8017c7a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017c68:	4b07      	ldr	r3, [pc, #28]	@ (8017c88 <ip4_input_accept+0x50>)
 8017c6a:	695b      	ldr	r3, [r3, #20]
 8017c6c:	6879      	ldr	r1, [r7, #4]
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f000 fa08 	bl	8018084 <ip4_addr_isbroadcast_u32>
 8017c74:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d001      	beq.n	8017c7e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017c7a:	2301      	movs	r3, #1
 8017c7c:	e000      	b.n	8017c80 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017c7e:	2300      	movs	r3, #0
}
 8017c80:	4618      	mov	r0, r3
 8017c82:	3708      	adds	r7, #8
 8017c84:	46bd      	mov	sp, r7
 8017c86:	bd80      	pop	{r7, pc}
 8017c88:	200243ac 	.word	0x200243ac

08017c8c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b086      	sub	sp, #24
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	685b      	ldr	r3, [r3, #4]
 8017c9a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017c9c:	697b      	ldr	r3, [r7, #20]
 8017c9e:	781b      	ldrb	r3, [r3, #0]
 8017ca0:	091b      	lsrs	r3, r3, #4
 8017ca2:	b2db      	uxtb	r3, r3
 8017ca4:	2b04      	cmp	r3, #4
 8017ca6:	d004      	beq.n	8017cb2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017ca8:	6878      	ldr	r0, [r7, #4]
 8017caa:	f7f8 fc97 	bl	80105dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017cae:	2300      	movs	r3, #0
 8017cb0:	e107      	b.n	8017ec2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017cb2:	697b      	ldr	r3, [r7, #20]
 8017cb4:	781b      	ldrb	r3, [r3, #0]
 8017cb6:	f003 030f 	and.w	r3, r3, #15
 8017cba:	b2db      	uxtb	r3, r3
 8017cbc:	009b      	lsls	r3, r3, #2
 8017cbe:	b2db      	uxtb	r3, r3
 8017cc0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017cc2:	697b      	ldr	r3, [r7, #20]
 8017cc4:	885b      	ldrh	r3, [r3, #2]
 8017cc6:	b29b      	uxth	r3, r3
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7f7 f899 	bl	800ee00 <lwip_htons>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	891b      	ldrh	r3, [r3, #8]
 8017cd6:	89ba      	ldrh	r2, [r7, #12]
 8017cd8:	429a      	cmp	r2, r3
 8017cda:	d204      	bcs.n	8017ce6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017cdc:	89bb      	ldrh	r3, [r7, #12]
 8017cde:	4619      	mov	r1, r3
 8017ce0:	6878      	ldr	r0, [r7, #4]
 8017ce2:	f7f8 faf5 	bl	80102d0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	895b      	ldrh	r3, [r3, #10]
 8017cea:	89fa      	ldrh	r2, [r7, #14]
 8017cec:	429a      	cmp	r2, r3
 8017cee:	d807      	bhi.n	8017d00 <ip4_input+0x74>
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	891b      	ldrh	r3, [r3, #8]
 8017cf4:	89ba      	ldrh	r2, [r7, #12]
 8017cf6:	429a      	cmp	r2, r3
 8017cf8:	d802      	bhi.n	8017d00 <ip4_input+0x74>
 8017cfa:	89fb      	ldrh	r3, [r7, #14]
 8017cfc:	2b13      	cmp	r3, #19
 8017cfe:	d804      	bhi.n	8017d0a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017d00:	6878      	ldr	r0, [r7, #4]
 8017d02:	f7f8 fc6b 	bl	80105dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017d06:	2300      	movs	r3, #0
 8017d08:	e0db      	b.n	8017ec2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	691b      	ldr	r3, [r3, #16]
 8017d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8017ecc <ip4_input+0x240>)
 8017d10:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017d12:	697b      	ldr	r3, [r7, #20]
 8017d14:	68db      	ldr	r3, [r3, #12]
 8017d16:	4a6d      	ldr	r2, [pc, #436]	@ (8017ecc <ip4_input+0x240>)
 8017d18:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017d1a:	4b6c      	ldr	r3, [pc, #432]	@ (8017ecc <ip4_input+0x240>)
 8017d1c:	695b      	ldr	r3, [r3, #20]
 8017d1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017d22:	2be0      	cmp	r3, #224	@ 0xe0
 8017d24:	d112      	bne.n	8017d4c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017d26:	683b      	ldr	r3, [r7, #0]
 8017d28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017d2c:	f003 0301 	and.w	r3, r3, #1
 8017d30:	b2db      	uxtb	r3, r3
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d007      	beq.n	8017d46 <ip4_input+0xba>
 8017d36:	683b      	ldr	r3, [r7, #0]
 8017d38:	3304      	adds	r3, #4
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d002      	beq.n	8017d46 <ip4_input+0xba>
      netif = inp;
 8017d40:	683b      	ldr	r3, [r7, #0]
 8017d42:	613b      	str	r3, [r7, #16]
 8017d44:	e02a      	b.n	8017d9c <ip4_input+0x110>
    } else {
      netif = NULL;
 8017d46:	2300      	movs	r3, #0
 8017d48:	613b      	str	r3, [r7, #16]
 8017d4a:	e027      	b.n	8017d9c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017d4c:	6838      	ldr	r0, [r7, #0]
 8017d4e:	f7ff ff73 	bl	8017c38 <ip4_input_accept>
 8017d52:	4603      	mov	r3, r0
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d002      	beq.n	8017d5e <ip4_input+0xd2>
      netif = inp;
 8017d58:	683b      	ldr	r3, [r7, #0]
 8017d5a:	613b      	str	r3, [r7, #16]
 8017d5c:	e01e      	b.n	8017d9c <ip4_input+0x110>
    } else {
      netif = NULL;
 8017d5e:	2300      	movs	r3, #0
 8017d60:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017d62:	4b5a      	ldr	r3, [pc, #360]	@ (8017ecc <ip4_input+0x240>)
 8017d64:	695b      	ldr	r3, [r3, #20]
 8017d66:	b2db      	uxtb	r3, r3
 8017d68:	2b7f      	cmp	r3, #127	@ 0x7f
 8017d6a:	d017      	beq.n	8017d9c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017d6c:	4b58      	ldr	r3, [pc, #352]	@ (8017ed0 <ip4_input+0x244>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	613b      	str	r3, [r7, #16]
 8017d72:	e00e      	b.n	8017d92 <ip4_input+0x106>
          if (netif == inp) {
 8017d74:	693a      	ldr	r2, [r7, #16]
 8017d76:	683b      	ldr	r3, [r7, #0]
 8017d78:	429a      	cmp	r2, r3
 8017d7a:	d006      	beq.n	8017d8a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017d7c:	6938      	ldr	r0, [r7, #16]
 8017d7e:	f7ff ff5b 	bl	8017c38 <ip4_input_accept>
 8017d82:	4603      	mov	r3, r0
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d108      	bne.n	8017d9a <ip4_input+0x10e>
 8017d88:	e000      	b.n	8017d8c <ip4_input+0x100>
            continue;
 8017d8a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017d8c:	693b      	ldr	r3, [r7, #16]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	613b      	str	r3, [r7, #16]
 8017d92:	693b      	ldr	r3, [r7, #16]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d1ed      	bne.n	8017d74 <ip4_input+0xe8>
 8017d98:	e000      	b.n	8017d9c <ip4_input+0x110>
            break;
 8017d9a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8017ecc <ip4_input+0x240>)
 8017d9e:	691b      	ldr	r3, [r3, #16]
 8017da0:	6839      	ldr	r1, [r7, #0]
 8017da2:	4618      	mov	r0, r3
 8017da4:	f000 f96e 	bl	8018084 <ip4_addr_isbroadcast_u32>
 8017da8:	4603      	mov	r3, r0
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d105      	bne.n	8017dba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017dae:	4b47      	ldr	r3, [pc, #284]	@ (8017ecc <ip4_input+0x240>)
 8017db0:	691b      	ldr	r3, [r3, #16]
 8017db2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017db6:	2be0      	cmp	r3, #224	@ 0xe0
 8017db8:	d104      	bne.n	8017dc4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017dba:	6878      	ldr	r0, [r7, #4]
 8017dbc:	f7f8 fc0e 	bl	80105dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	e07e      	b.n	8017ec2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017dc4:	693b      	ldr	r3, [r7, #16]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d104      	bne.n	8017dd4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017dca:	6878      	ldr	r0, [r7, #4]
 8017dcc:	f7f8 fc06 	bl	80105dc <pbuf_free>
    return ERR_OK;
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	e076      	b.n	8017ec2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017dd4:	697b      	ldr	r3, [r7, #20]
 8017dd6:	88db      	ldrh	r3, [r3, #6]
 8017dd8:	b29b      	uxth	r3, r3
 8017dda:	461a      	mov	r2, r3
 8017ddc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017de0:	4013      	ands	r3, r2
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d00b      	beq.n	8017dfe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017de6:	6878      	ldr	r0, [r7, #4]
 8017de8:	f000 fd22 	bl	8018830 <ip4_reass>
 8017dec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d101      	bne.n	8017df8 <ip4_input+0x16c>
      return ERR_OK;
 8017df4:	2300      	movs	r3, #0
 8017df6:	e064      	b.n	8017ec2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	685b      	ldr	r3, [r3, #4]
 8017dfc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017dfe:	4a33      	ldr	r2, [pc, #204]	@ (8017ecc <ip4_input+0x240>)
 8017e00:	693b      	ldr	r3, [r7, #16]
 8017e02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017e04:	4a31      	ldr	r2, [pc, #196]	@ (8017ecc <ip4_input+0x240>)
 8017e06:	683b      	ldr	r3, [r7, #0]
 8017e08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017e0a:	4a30      	ldr	r2, [pc, #192]	@ (8017ecc <ip4_input+0x240>)
 8017e0c:	697b      	ldr	r3, [r7, #20]
 8017e0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017e10:	697b      	ldr	r3, [r7, #20]
 8017e12:	781b      	ldrb	r3, [r3, #0]
 8017e14:	f003 030f 	and.w	r3, r3, #15
 8017e18:	b2db      	uxtb	r3, r3
 8017e1a:	009b      	lsls	r3, r3, #2
 8017e1c:	b2db      	uxtb	r3, r3
 8017e1e:	461a      	mov	r2, r3
 8017e20:	4b2a      	ldr	r3, [pc, #168]	@ (8017ecc <ip4_input+0x240>)
 8017e22:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017e24:	89fb      	ldrh	r3, [r7, #14]
 8017e26:	4619      	mov	r1, r3
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f7f8 fb51 	bl	80104d0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017e2e:	697b      	ldr	r3, [r7, #20]
 8017e30:	7a5b      	ldrb	r3, [r3, #9]
 8017e32:	2b11      	cmp	r3, #17
 8017e34:	d006      	beq.n	8017e44 <ip4_input+0x1b8>
 8017e36:	2b11      	cmp	r3, #17
 8017e38:	dc13      	bgt.n	8017e62 <ip4_input+0x1d6>
 8017e3a:	2b01      	cmp	r3, #1
 8017e3c:	d00c      	beq.n	8017e58 <ip4_input+0x1cc>
 8017e3e:	2b06      	cmp	r3, #6
 8017e40:	d005      	beq.n	8017e4e <ip4_input+0x1c2>
 8017e42:	e00e      	b.n	8017e62 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017e44:	6839      	ldr	r1, [r7, #0]
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f7fe f9f2 	bl	8016230 <udp_input>
        break;
 8017e4c:	e026      	b.n	8017e9c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017e4e:	6839      	ldr	r1, [r7, #0]
 8017e50:	6878      	ldr	r0, [r7, #4]
 8017e52:	f7fa fa09 	bl	8012268 <tcp_input>
        break;
 8017e56:	e021      	b.n	8017e9c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017e58:	6839      	ldr	r1, [r7, #0]
 8017e5a:	6878      	ldr	r0, [r7, #4]
 8017e5c:	f7ff fcee 	bl	801783c <icmp_input>
        break;
 8017e60:	e01c      	b.n	8017e9c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017e62:	4b1a      	ldr	r3, [pc, #104]	@ (8017ecc <ip4_input+0x240>)
 8017e64:	695b      	ldr	r3, [r3, #20]
 8017e66:	6939      	ldr	r1, [r7, #16]
 8017e68:	4618      	mov	r0, r3
 8017e6a:	f000 f90b 	bl	8018084 <ip4_addr_isbroadcast_u32>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d10f      	bne.n	8017e94 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017e74:	4b15      	ldr	r3, [pc, #84]	@ (8017ecc <ip4_input+0x240>)
 8017e76:	695b      	ldr	r3, [r3, #20]
 8017e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017e7c:	2be0      	cmp	r3, #224	@ 0xe0
 8017e7e:	d009      	beq.n	8017e94 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017e80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017e84:	4619      	mov	r1, r3
 8017e86:	6878      	ldr	r0, [r7, #4]
 8017e88:	f7f8 fb95 	bl	80105b6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017e8c:	2102      	movs	r1, #2
 8017e8e:	6878      	ldr	r0, [r7, #4]
 8017e90:	f7ff fdd8 	bl	8017a44 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017e94:	6878      	ldr	r0, [r7, #4]
 8017e96:	f7f8 fba1 	bl	80105dc <pbuf_free>
        break;
 8017e9a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8017ecc <ip4_input+0x240>)
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8017ecc <ip4_input+0x240>)
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017ea8:	4b08      	ldr	r3, [pc, #32]	@ (8017ecc <ip4_input+0x240>)
 8017eaa:	2200      	movs	r2, #0
 8017eac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017eae:	4b07      	ldr	r3, [pc, #28]	@ (8017ecc <ip4_input+0x240>)
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017eb4:	4b05      	ldr	r3, [pc, #20]	@ (8017ecc <ip4_input+0x240>)
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017eba:	4b04      	ldr	r3, [pc, #16]	@ (8017ecc <ip4_input+0x240>)
 8017ebc:	2200      	movs	r2, #0
 8017ebe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017ec0:	2300      	movs	r3, #0
}
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	3718      	adds	r7, #24
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	bd80      	pop	{r7, pc}
 8017eca:	bf00      	nop
 8017ecc:	200243ac 	.word	0x200243ac
 8017ed0:	200274a0 	.word	0x200274a0

08017ed4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b08a      	sub	sp, #40	@ 0x28
 8017ed8:	af04      	add	r7, sp, #16
 8017eda:	60f8      	str	r0, [r7, #12]
 8017edc:	60b9      	str	r1, [r7, #8]
 8017ede:	607a      	str	r2, [r7, #4]
 8017ee0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017ee2:	68bb      	ldr	r3, [r7, #8]
 8017ee4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d009      	beq.n	8017f00 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017eec:	68bb      	ldr	r3, [r7, #8]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d003      	beq.n	8017efa <ip4_output_if+0x26>
 8017ef2:	68bb      	ldr	r3, [r7, #8]
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d102      	bne.n	8017f00 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017efc:	3304      	adds	r3, #4
 8017efe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017f00:	78fa      	ldrb	r2, [r7, #3]
 8017f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f04:	9302      	str	r3, [sp, #8]
 8017f06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017f0a:	9301      	str	r3, [sp, #4]
 8017f0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017f10:	9300      	str	r3, [sp, #0]
 8017f12:	4613      	mov	r3, r2
 8017f14:	687a      	ldr	r2, [r7, #4]
 8017f16:	6979      	ldr	r1, [r7, #20]
 8017f18:	68f8      	ldr	r0, [r7, #12]
 8017f1a:	f000 f805 	bl	8017f28 <ip4_output_if_src>
 8017f1e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017f20:	4618      	mov	r0, r3
 8017f22:	3718      	adds	r7, #24
 8017f24:	46bd      	mov	sp, r7
 8017f26:	bd80      	pop	{r7, pc}

08017f28 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b088      	sub	sp, #32
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	60f8      	str	r0, [r7, #12]
 8017f30:	60b9      	str	r1, [r7, #8]
 8017f32:	607a      	str	r2, [r7, #4]
 8017f34:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	7b9b      	ldrb	r3, [r3, #14]
 8017f3a:	2b01      	cmp	r3, #1
 8017f3c:	d006      	beq.n	8017f4c <ip4_output_if_src+0x24>
 8017f3e:	4b4b      	ldr	r3, [pc, #300]	@ (801806c <ip4_output_if_src+0x144>)
 8017f40:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017f44:	494a      	ldr	r1, [pc, #296]	@ (8018070 <ip4_output_if_src+0x148>)
 8017f46:	484b      	ldr	r0, [pc, #300]	@ (8018074 <ip4_output_if_src+0x14c>)
 8017f48:	f001 ffc8 	bl	8019edc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d060      	beq.n	8018014 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017f52:	2314      	movs	r3, #20
 8017f54:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017f56:	2114      	movs	r1, #20
 8017f58:	68f8      	ldr	r0, [r7, #12]
 8017f5a:	f7f8 faa9 	bl	80104b0 <pbuf_add_header>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d002      	beq.n	8017f6a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017f64:	f06f 0301 	mvn.w	r3, #1
 8017f68:	e07c      	b.n	8018064 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	685b      	ldr	r3, [r3, #4]
 8017f6e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	895b      	ldrh	r3, [r3, #10]
 8017f74:	2b13      	cmp	r3, #19
 8017f76:	d806      	bhi.n	8017f86 <ip4_output_if_src+0x5e>
 8017f78:	4b3c      	ldr	r3, [pc, #240]	@ (801806c <ip4_output_if_src+0x144>)
 8017f7a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017f7e:	493e      	ldr	r1, [pc, #248]	@ (8018078 <ip4_output_if_src+0x150>)
 8017f80:	483c      	ldr	r0, [pc, #240]	@ (8018074 <ip4_output_if_src+0x14c>)
 8017f82:	f001 ffab 	bl	8019edc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017f86:	69fb      	ldr	r3, [r7, #28]
 8017f88:	78fa      	ldrb	r2, [r7, #3]
 8017f8a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017f8c:	69fb      	ldr	r3, [r7, #28]
 8017f8e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017f92:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	681a      	ldr	r2, [r3, #0]
 8017f98:	69fb      	ldr	r3, [r7, #28]
 8017f9a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017f9c:	8b7b      	ldrh	r3, [r7, #26]
 8017f9e:	089b      	lsrs	r3, r3, #2
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	b2db      	uxtb	r3, r3
 8017fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017fa8:	b2da      	uxtb	r2, r3
 8017faa:	69fb      	ldr	r3, [r7, #28]
 8017fac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017fae:	69fb      	ldr	r3, [r7, #28]
 8017fb0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017fb4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	891b      	ldrh	r3, [r3, #8]
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f7f6 ff20 	bl	800ee00 <lwip_htons>
 8017fc0:	4603      	mov	r3, r0
 8017fc2:	461a      	mov	r2, r3
 8017fc4:	69fb      	ldr	r3, [r7, #28]
 8017fc6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017fc8:	69fb      	ldr	r3, [r7, #28]
 8017fca:	2200      	movs	r2, #0
 8017fcc:	719a      	strb	r2, [r3, #6]
 8017fce:	2200      	movs	r2, #0
 8017fd0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017fd2:	4b2a      	ldr	r3, [pc, #168]	@ (801807c <ip4_output_if_src+0x154>)
 8017fd4:	881b      	ldrh	r3, [r3, #0]
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	f7f6 ff12 	bl	800ee00 <lwip_htons>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	461a      	mov	r2, r3
 8017fe0:	69fb      	ldr	r3, [r7, #28]
 8017fe2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017fe4:	4b25      	ldr	r3, [pc, #148]	@ (801807c <ip4_output_if_src+0x154>)
 8017fe6:	881b      	ldrh	r3, [r3, #0]
 8017fe8:	3301      	adds	r3, #1
 8017fea:	b29a      	uxth	r2, r3
 8017fec:	4b23      	ldr	r3, [pc, #140]	@ (801807c <ip4_output_if_src+0x154>)
 8017fee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d104      	bne.n	8018000 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017ff6:	4b22      	ldr	r3, [pc, #136]	@ (8018080 <ip4_output_if_src+0x158>)
 8017ff8:	681a      	ldr	r2, [r3, #0]
 8017ffa:	69fb      	ldr	r3, [r7, #28]
 8017ffc:	60da      	str	r2, [r3, #12]
 8017ffe:	e003      	b.n	8018008 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018000:	68bb      	ldr	r3, [r7, #8]
 8018002:	681a      	ldr	r2, [r3, #0]
 8018004:	69fb      	ldr	r3, [r7, #28]
 8018006:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018008:	69fb      	ldr	r3, [r7, #28]
 801800a:	2200      	movs	r2, #0
 801800c:	729a      	strb	r2, [r3, #10]
 801800e:	2200      	movs	r2, #0
 8018010:	72da      	strb	r2, [r3, #11]
 8018012:	e00f      	b.n	8018034 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	895b      	ldrh	r3, [r3, #10]
 8018018:	2b13      	cmp	r3, #19
 801801a:	d802      	bhi.n	8018022 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801801c:	f06f 0301 	mvn.w	r3, #1
 8018020:	e020      	b.n	8018064 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	685b      	ldr	r3, [r3, #4]
 8018026:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018028:	69fb      	ldr	r3, [r7, #28]
 801802a:	691b      	ldr	r3, [r3, #16]
 801802c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801802e:	f107 0314 	add.w	r3, r7, #20
 8018032:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018036:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018038:	2b00      	cmp	r3, #0
 801803a:	d00c      	beq.n	8018056 <ip4_output_if_src+0x12e>
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	891a      	ldrh	r2, [r3, #8]
 8018040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018042:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018044:	429a      	cmp	r2, r3
 8018046:	d906      	bls.n	8018056 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018048:	687a      	ldr	r2, [r7, #4]
 801804a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801804c:	68f8      	ldr	r0, [r7, #12]
 801804e:	f000 fde3 	bl	8018c18 <ip4_frag>
 8018052:	4603      	mov	r3, r0
 8018054:	e006      	b.n	8018064 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018058:	695b      	ldr	r3, [r3, #20]
 801805a:	687a      	ldr	r2, [r7, #4]
 801805c:	68f9      	ldr	r1, [r7, #12]
 801805e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018060:	4798      	blx	r3
 8018062:	4603      	mov	r3, r0
}
 8018064:	4618      	mov	r0, r3
 8018066:	3720      	adds	r7, #32
 8018068:	46bd      	mov	sp, r7
 801806a:	bd80      	pop	{r7, pc}
 801806c:	0801d890 	.word	0x0801d890
 8018070:	0801d8c4 	.word	0x0801d8c4
 8018074:	0801d8d0 	.word	0x0801d8d0
 8018078:	0801d8f8 	.word	0x0801d8f8
 801807c:	200275fe 	.word	0x200275fe
 8018080:	0801e1f0 	.word	0x0801e1f0

08018084 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018084:	b480      	push	{r7}
 8018086:	b085      	sub	sp, #20
 8018088:	af00      	add	r7, sp, #0
 801808a:	6078      	str	r0, [r7, #4]
 801808c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018098:	d002      	beq.n	80180a0 <ip4_addr_isbroadcast_u32+0x1c>
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d101      	bne.n	80180a4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80180a0:	2301      	movs	r3, #1
 80180a2:	e02a      	b.n	80180fa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80180a4:	683b      	ldr	r3, [r7, #0]
 80180a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80180aa:	f003 0302 	and.w	r3, r3, #2
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d101      	bne.n	80180b6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80180b2:	2300      	movs	r3, #0
 80180b4:	e021      	b.n	80180fa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	3304      	adds	r3, #4
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	687a      	ldr	r2, [r7, #4]
 80180be:	429a      	cmp	r2, r3
 80180c0:	d101      	bne.n	80180c6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80180c2:	2300      	movs	r3, #0
 80180c4:	e019      	b.n	80180fa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80180c6:	68fa      	ldr	r2, [r7, #12]
 80180c8:	683b      	ldr	r3, [r7, #0]
 80180ca:	3304      	adds	r3, #4
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	405a      	eors	r2, r3
 80180d0:	683b      	ldr	r3, [r7, #0]
 80180d2:	3308      	adds	r3, #8
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	4013      	ands	r3, r2
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d10d      	bne.n	80180f8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80180dc:	683b      	ldr	r3, [r7, #0]
 80180de:	3308      	adds	r3, #8
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	43da      	mvns	r2, r3
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80180e8:	683b      	ldr	r3, [r7, #0]
 80180ea:	3308      	adds	r3, #8
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d101      	bne.n	80180f8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80180f4:	2301      	movs	r3, #1
 80180f6:	e000      	b.n	80180fa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80180f8:	2300      	movs	r3, #0
  }
}
 80180fa:	4618      	mov	r0, r3
 80180fc:	3714      	adds	r7, #20
 80180fe:	46bd      	mov	sp, r7
 8018100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018104:	4770      	bx	lr
	...

08018108 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b082      	sub	sp, #8
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8018110:	2210      	movs	r2, #16
 8018112:	4904      	ldr	r1, [pc, #16]	@ (8018124 <ip4addr_ntoa+0x1c>)
 8018114:	6878      	ldr	r0, [r7, #4]
 8018116:	f000 f807 	bl	8018128 <ip4addr_ntoa_r>
 801811a:	4603      	mov	r3, r0
}
 801811c:	4618      	mov	r0, r3
 801811e:	3708      	adds	r7, #8
 8018120:	46bd      	mov	sp, r7
 8018122:	bd80      	pop	{r7, pc}
 8018124:	20027600 	.word	0x20027600

08018128 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8018128:	b480      	push	{r7}
 801812a:	b08d      	sub	sp, #52	@ 0x34
 801812c:	af00      	add	r7, sp, #0
 801812e:	60f8      	str	r0, [r7, #12]
 8018130:	60b9      	str	r1, [r7, #8]
 8018132:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8018134:	2300      	movs	r3, #0
 8018136:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801813e:	68bb      	ldr	r3, [r7, #8]
 8018140:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8018142:	f107 0318 	add.w	r3, r7, #24
 8018146:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8018148:	2300      	movs	r3, #0
 801814a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801814e:	e058      	b.n	8018202 <ip4addr_ntoa_r+0xda>
    i = 0;
 8018150:	2300      	movs	r3, #0
 8018152:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8018156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018158:	781a      	ldrb	r2, [r3, #0]
 801815a:	4b32      	ldr	r3, [pc, #200]	@ (8018224 <ip4addr_ntoa_r+0xfc>)
 801815c:	fba3 1302 	umull	r1, r3, r3, r2
 8018160:	08d9      	lsrs	r1, r3, #3
 8018162:	460b      	mov	r3, r1
 8018164:	009b      	lsls	r3, r3, #2
 8018166:	440b      	add	r3, r1
 8018168:	005b      	lsls	r3, r3, #1
 801816a:	1ad3      	subs	r3, r2, r3
 801816c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018170:	781b      	ldrb	r3, [r3, #0]
 8018172:	4a2c      	ldr	r2, [pc, #176]	@ (8018224 <ip4addr_ntoa_r+0xfc>)
 8018174:	fba2 2303 	umull	r2, r3, r2, r3
 8018178:	08db      	lsrs	r3, r3, #3
 801817a:	b2da      	uxtb	r2, r3
 801817c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801817e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8018180:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018184:	1c5a      	adds	r2, r3, #1
 8018186:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801818a:	4619      	mov	r1, r3
 801818c:	7ffb      	ldrb	r3, [r7, #31]
 801818e:	3330      	adds	r3, #48	@ 0x30
 8018190:	b2da      	uxtb	r2, r3
 8018192:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8018196:	443b      	add	r3, r7
 8018198:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801819c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801819e:	781b      	ldrb	r3, [r3, #0]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d1d8      	bne.n	8018156 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80181a4:	e011      	b.n	80181ca <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80181a6:	6a3b      	ldr	r3, [r7, #32]
 80181a8:	1c5a      	adds	r2, r3, #1
 80181aa:	623a      	str	r2, [r7, #32]
 80181ac:	687a      	ldr	r2, [r7, #4]
 80181ae:	429a      	cmp	r2, r3
 80181b0:	dc01      	bgt.n	80181b6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 80181b2:	2300      	movs	r3, #0
 80181b4:	e030      	b.n	8018218 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80181b6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80181ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181bc:	1c59      	adds	r1, r3, #1
 80181be:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80181c0:	3230      	adds	r2, #48	@ 0x30
 80181c2:	443a      	add	r2, r7
 80181c4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80181c8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80181ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80181ce:	1e5a      	subs	r2, r3, #1
 80181d0:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d1e6      	bne.n	80181a6 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80181d8:	6a3b      	ldr	r3, [r7, #32]
 80181da:	1c5a      	adds	r2, r3, #1
 80181dc:	623a      	str	r2, [r7, #32]
 80181de:	687a      	ldr	r2, [r7, #4]
 80181e0:	429a      	cmp	r2, r3
 80181e2:	dc01      	bgt.n	80181e8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80181e4:	2300      	movs	r3, #0
 80181e6:	e017      	b.n	8018218 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80181e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181ea:	1c5a      	adds	r2, r3, #1
 80181ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80181ee:	222e      	movs	r2, #46	@ 0x2e
 80181f0:	701a      	strb	r2, [r3, #0]
    ap++;
 80181f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181f4:	3301      	adds	r3, #1
 80181f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 80181f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80181fc:	3301      	adds	r3, #1
 80181fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018202:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018206:	2b03      	cmp	r3, #3
 8018208:	d9a2      	bls.n	8018150 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801820a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801820c:	3b01      	subs	r3, #1
 801820e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018212:	2200      	movs	r2, #0
 8018214:	701a      	strb	r2, [r3, #0]
  return buf;
 8018216:	68bb      	ldr	r3, [r7, #8]
}
 8018218:	4618      	mov	r0, r3
 801821a:	3734      	adds	r7, #52	@ 0x34
 801821c:	46bd      	mov	sp, r7
 801821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018222:	4770      	bx	lr
 8018224:	cccccccd 	.word	0xcccccccd

08018228 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b084      	sub	sp, #16
 801822c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801822e:	2300      	movs	r3, #0
 8018230:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018232:	4b12      	ldr	r3, [pc, #72]	@ (801827c <ip_reass_tmr+0x54>)
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018238:	e018      	b.n	801826c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	7fdb      	ldrb	r3, [r3, #31]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d00b      	beq.n	801825a <ip_reass_tmr+0x32>
      r->timer--;
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	7fdb      	ldrb	r3, [r3, #31]
 8018246:	3b01      	subs	r3, #1
 8018248:	b2da      	uxtb	r2, r3
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	60fb      	str	r3, [r7, #12]
 8018258:	e008      	b.n	801826c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018264:	68b9      	ldr	r1, [r7, #8]
 8018266:	6878      	ldr	r0, [r7, #4]
 8018268:	f000 f80a 	bl	8018280 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d1e3      	bne.n	801823a <ip_reass_tmr+0x12>
    }
  }
}
 8018272:	bf00      	nop
 8018274:	bf00      	nop
 8018276:	3710      	adds	r7, #16
 8018278:	46bd      	mov	sp, r7
 801827a:	bd80      	pop	{r7, pc}
 801827c:	20027610 	.word	0x20027610

08018280 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b088      	sub	sp, #32
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
 8018288:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801828a:	2300      	movs	r3, #0
 801828c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801828e:	683a      	ldr	r2, [r7, #0]
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	429a      	cmp	r2, r3
 8018294:	d105      	bne.n	80182a2 <ip_reass_free_complete_datagram+0x22>
 8018296:	4b45      	ldr	r3, [pc, #276]	@ (80183ac <ip_reass_free_complete_datagram+0x12c>)
 8018298:	22ab      	movs	r2, #171	@ 0xab
 801829a:	4945      	ldr	r1, [pc, #276]	@ (80183b0 <ip_reass_free_complete_datagram+0x130>)
 801829c:	4845      	ldr	r0, [pc, #276]	@ (80183b4 <ip_reass_free_complete_datagram+0x134>)
 801829e:	f001 fe1d 	bl	8019edc <iprintf>
  if (prev != NULL) {
 80182a2:	683b      	ldr	r3, [r7, #0]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d00a      	beq.n	80182be <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80182a8:	683b      	ldr	r3, [r7, #0]
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	687a      	ldr	r2, [r7, #4]
 80182ae:	429a      	cmp	r2, r3
 80182b0:	d005      	beq.n	80182be <ip_reass_free_complete_datagram+0x3e>
 80182b2:	4b3e      	ldr	r3, [pc, #248]	@ (80183ac <ip_reass_free_complete_datagram+0x12c>)
 80182b4:	22ad      	movs	r2, #173	@ 0xad
 80182b6:	4940      	ldr	r1, [pc, #256]	@ (80183b8 <ip_reass_free_complete_datagram+0x138>)
 80182b8:	483e      	ldr	r0, [pc, #248]	@ (80183b4 <ip_reass_free_complete_datagram+0x134>)
 80182ba:	f001 fe0f 	bl	8019edc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	685b      	ldr	r3, [r3, #4]
 80182c2:	685b      	ldr	r3, [r3, #4]
 80182c4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80182c6:	697b      	ldr	r3, [r7, #20]
 80182c8:	889b      	ldrh	r3, [r3, #4]
 80182ca:	b29b      	uxth	r3, r3
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d12a      	bne.n	8018326 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	685b      	ldr	r3, [r3, #4]
 80182d4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80182d6:	697b      	ldr	r3, [r7, #20]
 80182d8:	681a      	ldr	r2, [r3, #0]
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80182de:	69bb      	ldr	r3, [r7, #24]
 80182e0:	6858      	ldr	r0, [r3, #4]
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	3308      	adds	r3, #8
 80182e6:	2214      	movs	r2, #20
 80182e8:	4619      	mov	r1, r3
 80182ea:	f002 f822 	bl	801a332 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80182ee:	2101      	movs	r1, #1
 80182f0:	69b8      	ldr	r0, [r7, #24]
 80182f2:	f7ff fbb7 	bl	8017a64 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80182f6:	69b8      	ldr	r0, [r7, #24]
 80182f8:	f7f8 f9fe 	bl	80106f8 <pbuf_clen>
 80182fc:	4603      	mov	r3, r0
 80182fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018300:	8bfa      	ldrh	r2, [r7, #30]
 8018302:	8a7b      	ldrh	r3, [r7, #18]
 8018304:	4413      	add	r3, r2
 8018306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801830a:	db05      	blt.n	8018318 <ip_reass_free_complete_datagram+0x98>
 801830c:	4b27      	ldr	r3, [pc, #156]	@ (80183ac <ip_reass_free_complete_datagram+0x12c>)
 801830e:	22bc      	movs	r2, #188	@ 0xbc
 8018310:	492a      	ldr	r1, [pc, #168]	@ (80183bc <ip_reass_free_complete_datagram+0x13c>)
 8018312:	4828      	ldr	r0, [pc, #160]	@ (80183b4 <ip_reass_free_complete_datagram+0x134>)
 8018314:	f001 fde2 	bl	8019edc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018318:	8bfa      	ldrh	r2, [r7, #30]
 801831a:	8a7b      	ldrh	r3, [r7, #18]
 801831c:	4413      	add	r3, r2
 801831e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018320:	69b8      	ldr	r0, [r7, #24]
 8018322:	f7f8 f95b 	bl	80105dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	685b      	ldr	r3, [r3, #4]
 801832a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801832c:	e01f      	b.n	801836e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801832e:	69bb      	ldr	r3, [r7, #24]
 8018330:	685b      	ldr	r3, [r3, #4]
 8018332:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018334:	69bb      	ldr	r3, [r7, #24]
 8018336:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018338:	697b      	ldr	r3, [r7, #20]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801833e:	68f8      	ldr	r0, [r7, #12]
 8018340:	f7f8 f9da 	bl	80106f8 <pbuf_clen>
 8018344:	4603      	mov	r3, r0
 8018346:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018348:	8bfa      	ldrh	r2, [r7, #30]
 801834a:	8a7b      	ldrh	r3, [r7, #18]
 801834c:	4413      	add	r3, r2
 801834e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018352:	db05      	blt.n	8018360 <ip_reass_free_complete_datagram+0xe0>
 8018354:	4b15      	ldr	r3, [pc, #84]	@ (80183ac <ip_reass_free_complete_datagram+0x12c>)
 8018356:	22cc      	movs	r2, #204	@ 0xcc
 8018358:	4918      	ldr	r1, [pc, #96]	@ (80183bc <ip_reass_free_complete_datagram+0x13c>)
 801835a:	4816      	ldr	r0, [pc, #88]	@ (80183b4 <ip_reass_free_complete_datagram+0x134>)
 801835c:	f001 fdbe 	bl	8019edc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018360:	8bfa      	ldrh	r2, [r7, #30]
 8018362:	8a7b      	ldrh	r3, [r7, #18]
 8018364:	4413      	add	r3, r2
 8018366:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018368:	68f8      	ldr	r0, [r7, #12]
 801836a:	f7f8 f937 	bl	80105dc <pbuf_free>
  while (p != NULL) {
 801836e:	69bb      	ldr	r3, [r7, #24]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d1dc      	bne.n	801832e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018374:	6839      	ldr	r1, [r7, #0]
 8018376:	6878      	ldr	r0, [r7, #4]
 8018378:	f000 f8c2 	bl	8018500 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801837c:	4b10      	ldr	r3, [pc, #64]	@ (80183c0 <ip_reass_free_complete_datagram+0x140>)
 801837e:	881b      	ldrh	r3, [r3, #0]
 8018380:	8bfa      	ldrh	r2, [r7, #30]
 8018382:	429a      	cmp	r2, r3
 8018384:	d905      	bls.n	8018392 <ip_reass_free_complete_datagram+0x112>
 8018386:	4b09      	ldr	r3, [pc, #36]	@ (80183ac <ip_reass_free_complete_datagram+0x12c>)
 8018388:	22d2      	movs	r2, #210	@ 0xd2
 801838a:	490e      	ldr	r1, [pc, #56]	@ (80183c4 <ip_reass_free_complete_datagram+0x144>)
 801838c:	4809      	ldr	r0, [pc, #36]	@ (80183b4 <ip_reass_free_complete_datagram+0x134>)
 801838e:	f001 fda5 	bl	8019edc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018392:	4b0b      	ldr	r3, [pc, #44]	@ (80183c0 <ip_reass_free_complete_datagram+0x140>)
 8018394:	881a      	ldrh	r2, [r3, #0]
 8018396:	8bfb      	ldrh	r3, [r7, #30]
 8018398:	1ad3      	subs	r3, r2, r3
 801839a:	b29a      	uxth	r2, r3
 801839c:	4b08      	ldr	r3, [pc, #32]	@ (80183c0 <ip_reass_free_complete_datagram+0x140>)
 801839e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80183a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80183a2:	4618      	mov	r0, r3
 80183a4:	3720      	adds	r7, #32
 80183a6:	46bd      	mov	sp, r7
 80183a8:	bd80      	pop	{r7, pc}
 80183aa:	bf00      	nop
 80183ac:	0801d928 	.word	0x0801d928
 80183b0:	0801d964 	.word	0x0801d964
 80183b4:	0801d970 	.word	0x0801d970
 80183b8:	0801d998 	.word	0x0801d998
 80183bc:	0801d9ac 	.word	0x0801d9ac
 80183c0:	20027614 	.word	0x20027614
 80183c4:	0801d9cc 	.word	0x0801d9cc

080183c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b08a      	sub	sp, #40	@ 0x28
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]
 80183d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80183d2:	2300      	movs	r3, #0
 80183d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80183d6:	2300      	movs	r3, #0
 80183d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80183da:	2300      	movs	r3, #0
 80183dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80183de:	2300      	movs	r3, #0
 80183e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80183e2:	2300      	movs	r3, #0
 80183e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80183e6:	4b28      	ldr	r3, [pc, #160]	@ (8018488 <ip_reass_remove_oldest_datagram+0xc0>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80183ec:	e030      	b.n	8018450 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80183ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183f0:	695a      	ldr	r2, [r3, #20]
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	68db      	ldr	r3, [r3, #12]
 80183f6:	429a      	cmp	r2, r3
 80183f8:	d10c      	bne.n	8018414 <ip_reass_remove_oldest_datagram+0x4c>
 80183fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183fc:	699a      	ldr	r2, [r3, #24]
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	691b      	ldr	r3, [r3, #16]
 8018402:	429a      	cmp	r2, r3
 8018404:	d106      	bne.n	8018414 <ip_reass_remove_oldest_datagram+0x4c>
 8018406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018408:	899a      	ldrh	r2, [r3, #12]
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	889b      	ldrh	r3, [r3, #4]
 801840e:	b29b      	uxth	r3, r3
 8018410:	429a      	cmp	r2, r3
 8018412:	d014      	beq.n	801843e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018414:	693b      	ldr	r3, [r7, #16]
 8018416:	3301      	adds	r3, #1
 8018418:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801841a:	6a3b      	ldr	r3, [r7, #32]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d104      	bne.n	801842a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018422:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018424:	69fb      	ldr	r3, [r7, #28]
 8018426:	61bb      	str	r3, [r7, #24]
 8018428:	e009      	b.n	801843e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801842c:	7fda      	ldrb	r2, [r3, #31]
 801842e:	6a3b      	ldr	r3, [r7, #32]
 8018430:	7fdb      	ldrb	r3, [r3, #31]
 8018432:	429a      	cmp	r2, r3
 8018434:	d803      	bhi.n	801843e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018438:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801843a:	69fb      	ldr	r3, [r7, #28]
 801843c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d001      	beq.n	801844a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018448:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018452:	2b00      	cmp	r3, #0
 8018454:	d1cb      	bne.n	80183ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018456:	6a3b      	ldr	r3, [r7, #32]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d008      	beq.n	801846e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801845c:	69b9      	ldr	r1, [r7, #24]
 801845e:	6a38      	ldr	r0, [r7, #32]
 8018460:	f7ff ff0e 	bl	8018280 <ip_reass_free_complete_datagram>
 8018464:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018466:	697a      	ldr	r2, [r7, #20]
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	4413      	add	r3, r2
 801846c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801846e:	697a      	ldr	r2, [r7, #20]
 8018470:	683b      	ldr	r3, [r7, #0]
 8018472:	429a      	cmp	r2, r3
 8018474:	da02      	bge.n	801847c <ip_reass_remove_oldest_datagram+0xb4>
 8018476:	693b      	ldr	r3, [r7, #16]
 8018478:	2b01      	cmp	r3, #1
 801847a:	dcac      	bgt.n	80183d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801847c:	697b      	ldr	r3, [r7, #20]
}
 801847e:	4618      	mov	r0, r3
 8018480:	3728      	adds	r7, #40	@ 0x28
 8018482:	46bd      	mov	sp, r7
 8018484:	bd80      	pop	{r7, pc}
 8018486:	bf00      	nop
 8018488:	20027610 	.word	0x20027610

0801848c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b084      	sub	sp, #16
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
 8018494:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018496:	2004      	movs	r0, #4
 8018498:	f7f7 f986 	bl	800f7a8 <memp_malloc>
 801849c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d110      	bne.n	80184c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80184a4:	6839      	ldr	r1, [r7, #0]
 80184a6:	6878      	ldr	r0, [r7, #4]
 80184a8:	f7ff ff8e 	bl	80183c8 <ip_reass_remove_oldest_datagram>
 80184ac:	4602      	mov	r2, r0
 80184ae:	683b      	ldr	r3, [r7, #0]
 80184b0:	4293      	cmp	r3, r2
 80184b2:	dc03      	bgt.n	80184bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80184b4:	2004      	movs	r0, #4
 80184b6:	f7f7 f977 	bl	800f7a8 <memp_malloc>
 80184ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d101      	bne.n	80184c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80184c2:	2300      	movs	r3, #0
 80184c4:	e016      	b.n	80184f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80184c6:	2220      	movs	r2, #32
 80184c8:	2100      	movs	r1, #0
 80184ca:	68f8      	ldr	r0, [r7, #12]
 80184cc:	f001 fe5e 	bl	801a18c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	220f      	movs	r2, #15
 80184d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80184d6:	4b09      	ldr	r3, [pc, #36]	@ (80184fc <ip_reass_enqueue_new_datagram+0x70>)
 80184d8:	681a      	ldr	r2, [r3, #0]
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80184de:	4a07      	ldr	r2, [pc, #28]	@ (80184fc <ip_reass_enqueue_new_datagram+0x70>)
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	3308      	adds	r3, #8
 80184e8:	2214      	movs	r2, #20
 80184ea:	6879      	ldr	r1, [r7, #4]
 80184ec:	4618      	mov	r0, r3
 80184ee:	f001 ff20 	bl	801a332 <memcpy>
  return ipr;
 80184f2:	68fb      	ldr	r3, [r7, #12]
}
 80184f4:	4618      	mov	r0, r3
 80184f6:	3710      	adds	r7, #16
 80184f8:	46bd      	mov	sp, r7
 80184fa:	bd80      	pop	{r7, pc}
 80184fc:	20027610 	.word	0x20027610

08018500 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b082      	sub	sp, #8
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
 8018508:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801850a:	4b10      	ldr	r3, [pc, #64]	@ (801854c <ip_reass_dequeue_datagram+0x4c>)
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	687a      	ldr	r2, [r7, #4]
 8018510:	429a      	cmp	r2, r3
 8018512:	d104      	bne.n	801851e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	4a0c      	ldr	r2, [pc, #48]	@ (801854c <ip_reass_dequeue_datagram+0x4c>)
 801851a:	6013      	str	r3, [r2, #0]
 801851c:	e00d      	b.n	801853a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801851e:	683b      	ldr	r3, [r7, #0]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d106      	bne.n	8018532 <ip_reass_dequeue_datagram+0x32>
 8018524:	4b0a      	ldr	r3, [pc, #40]	@ (8018550 <ip_reass_dequeue_datagram+0x50>)
 8018526:	f240 1245 	movw	r2, #325	@ 0x145
 801852a:	490a      	ldr	r1, [pc, #40]	@ (8018554 <ip_reass_dequeue_datagram+0x54>)
 801852c:	480a      	ldr	r0, [pc, #40]	@ (8018558 <ip_reass_dequeue_datagram+0x58>)
 801852e:	f001 fcd5 	bl	8019edc <iprintf>
    prev->next = ipr->next;
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	681a      	ldr	r2, [r3, #0]
 8018536:	683b      	ldr	r3, [r7, #0]
 8018538:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801853a:	6879      	ldr	r1, [r7, #4]
 801853c:	2004      	movs	r0, #4
 801853e:	f7f7 f9a9 	bl	800f894 <memp_free>
}
 8018542:	bf00      	nop
 8018544:	3708      	adds	r7, #8
 8018546:	46bd      	mov	sp, r7
 8018548:	bd80      	pop	{r7, pc}
 801854a:	bf00      	nop
 801854c:	20027610 	.word	0x20027610
 8018550:	0801d928 	.word	0x0801d928
 8018554:	0801d9f0 	.word	0x0801d9f0
 8018558:	0801d970 	.word	0x0801d970

0801855c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b08c      	sub	sp, #48	@ 0x30
 8018560:	af00      	add	r7, sp, #0
 8018562:	60f8      	str	r0, [r7, #12]
 8018564:	60b9      	str	r1, [r7, #8]
 8018566:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018568:	2300      	movs	r3, #0
 801856a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801856c:	2301      	movs	r3, #1
 801856e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018570:	68bb      	ldr	r3, [r7, #8]
 8018572:	685b      	ldr	r3, [r3, #4]
 8018574:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018576:	69fb      	ldr	r3, [r7, #28]
 8018578:	885b      	ldrh	r3, [r3, #2]
 801857a:	b29b      	uxth	r3, r3
 801857c:	4618      	mov	r0, r3
 801857e:	f7f6 fc3f 	bl	800ee00 <lwip_htons>
 8018582:	4603      	mov	r3, r0
 8018584:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018586:	69fb      	ldr	r3, [r7, #28]
 8018588:	781b      	ldrb	r3, [r3, #0]
 801858a:	f003 030f 	and.w	r3, r3, #15
 801858e:	b2db      	uxtb	r3, r3
 8018590:	009b      	lsls	r3, r3, #2
 8018592:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018594:	7e7b      	ldrb	r3, [r7, #25]
 8018596:	b29b      	uxth	r3, r3
 8018598:	8b7a      	ldrh	r2, [r7, #26]
 801859a:	429a      	cmp	r2, r3
 801859c:	d202      	bcs.n	80185a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801859e:	f04f 33ff 	mov.w	r3, #4294967295
 80185a2:	e135      	b.n	8018810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80185a4:	7e7b      	ldrb	r3, [r7, #25]
 80185a6:	b29b      	uxth	r3, r3
 80185a8:	8b7a      	ldrh	r2, [r7, #26]
 80185aa:	1ad3      	subs	r3, r2, r3
 80185ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80185ae:	69fb      	ldr	r3, [r7, #28]
 80185b0:	88db      	ldrh	r3, [r3, #6]
 80185b2:	b29b      	uxth	r3, r3
 80185b4:	4618      	mov	r0, r3
 80185b6:	f7f6 fc23 	bl	800ee00 <lwip_htons>
 80185ba:	4603      	mov	r3, r0
 80185bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80185c0:	b29b      	uxth	r3, r3
 80185c2:	00db      	lsls	r3, r3, #3
 80185c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80185c6:	68bb      	ldr	r3, [r7, #8]
 80185c8:	685b      	ldr	r3, [r3, #4]
 80185ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80185cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185ce:	2200      	movs	r2, #0
 80185d0:	701a      	strb	r2, [r3, #0]
 80185d2:	2200      	movs	r2, #0
 80185d4:	705a      	strb	r2, [r3, #1]
 80185d6:	2200      	movs	r2, #0
 80185d8:	709a      	strb	r2, [r3, #2]
 80185da:	2200      	movs	r2, #0
 80185dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80185de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185e0:	8afa      	ldrh	r2, [r7, #22]
 80185e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80185e4:	8afa      	ldrh	r2, [r7, #22]
 80185e6:	8b7b      	ldrh	r3, [r7, #26]
 80185e8:	4413      	add	r3, r2
 80185ea:	b29a      	uxth	r2, r3
 80185ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80185f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185f2:	88db      	ldrh	r3, [r3, #6]
 80185f4:	b29b      	uxth	r3, r3
 80185f6:	8afa      	ldrh	r2, [r7, #22]
 80185f8:	429a      	cmp	r2, r3
 80185fa:	d902      	bls.n	8018602 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80185fc:	f04f 33ff 	mov.w	r3, #4294967295
 8018600:	e106      	b.n	8018810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	685b      	ldr	r3, [r3, #4]
 8018606:	627b      	str	r3, [r7, #36]	@ 0x24
 8018608:	e068      	b.n	80186dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801860a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801860c:	685b      	ldr	r3, [r3, #4]
 801860e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018612:	889b      	ldrh	r3, [r3, #4]
 8018614:	b29a      	uxth	r2, r3
 8018616:	693b      	ldr	r3, [r7, #16]
 8018618:	889b      	ldrh	r3, [r3, #4]
 801861a:	b29b      	uxth	r3, r3
 801861c:	429a      	cmp	r2, r3
 801861e:	d235      	bcs.n	801868c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018624:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018628:	2b00      	cmp	r3, #0
 801862a:	d020      	beq.n	801866e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801862c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801862e:	889b      	ldrh	r3, [r3, #4]
 8018630:	b29a      	uxth	r2, r3
 8018632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018634:	88db      	ldrh	r3, [r3, #6]
 8018636:	b29b      	uxth	r3, r3
 8018638:	429a      	cmp	r2, r3
 801863a:	d307      	bcc.n	801864c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801863c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801863e:	88db      	ldrh	r3, [r3, #6]
 8018640:	b29a      	uxth	r2, r3
 8018642:	693b      	ldr	r3, [r7, #16]
 8018644:	889b      	ldrh	r3, [r3, #4]
 8018646:	b29b      	uxth	r3, r3
 8018648:	429a      	cmp	r2, r3
 801864a:	d902      	bls.n	8018652 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801864c:	f04f 33ff 	mov.w	r3, #4294967295
 8018650:	e0de      	b.n	8018810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018654:	68ba      	ldr	r2, [r7, #8]
 8018656:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801865a:	88db      	ldrh	r3, [r3, #6]
 801865c:	b29a      	uxth	r2, r3
 801865e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018660:	889b      	ldrh	r3, [r3, #4]
 8018662:	b29b      	uxth	r3, r3
 8018664:	429a      	cmp	r2, r3
 8018666:	d03d      	beq.n	80186e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018668:	2300      	movs	r3, #0
 801866a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801866c:	e03a      	b.n	80186e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801866e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018670:	88db      	ldrh	r3, [r3, #6]
 8018672:	b29a      	uxth	r2, r3
 8018674:	693b      	ldr	r3, [r7, #16]
 8018676:	889b      	ldrh	r3, [r3, #4]
 8018678:	b29b      	uxth	r3, r3
 801867a:	429a      	cmp	r2, r3
 801867c:	d902      	bls.n	8018684 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801867e:	f04f 33ff 	mov.w	r3, #4294967295
 8018682:	e0c5      	b.n	8018810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	68ba      	ldr	r2, [r7, #8]
 8018688:	605a      	str	r2, [r3, #4]
      break;
 801868a:	e02b      	b.n	80186e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801868c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801868e:	889b      	ldrh	r3, [r3, #4]
 8018690:	b29a      	uxth	r2, r3
 8018692:	693b      	ldr	r3, [r7, #16]
 8018694:	889b      	ldrh	r3, [r3, #4]
 8018696:	b29b      	uxth	r3, r3
 8018698:	429a      	cmp	r2, r3
 801869a:	d102      	bne.n	80186a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801869c:	f04f 33ff 	mov.w	r3, #4294967295
 80186a0:	e0b6      	b.n	8018810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80186a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186a4:	889b      	ldrh	r3, [r3, #4]
 80186a6:	b29a      	uxth	r2, r3
 80186a8:	693b      	ldr	r3, [r7, #16]
 80186aa:	88db      	ldrh	r3, [r3, #6]
 80186ac:	b29b      	uxth	r3, r3
 80186ae:	429a      	cmp	r2, r3
 80186b0:	d202      	bcs.n	80186b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80186b2:	f04f 33ff 	mov.w	r3, #4294967295
 80186b6:	e0ab      	b.n	8018810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80186b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d009      	beq.n	80186d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80186be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186c0:	88db      	ldrh	r3, [r3, #6]
 80186c2:	b29a      	uxth	r2, r3
 80186c4:	693b      	ldr	r3, [r7, #16]
 80186c6:	889b      	ldrh	r3, [r3, #4]
 80186c8:	b29b      	uxth	r3, r3
 80186ca:	429a      	cmp	r2, r3
 80186cc:	d001      	beq.n	80186d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80186ce:	2300      	movs	r3, #0
 80186d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80186d2:	693b      	ldr	r3, [r7, #16]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80186d8:	693b      	ldr	r3, [r7, #16]
 80186da:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80186dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d193      	bne.n	801860a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80186e2:	e000      	b.n	80186e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80186e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80186e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d12d      	bne.n	8018748 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80186ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d01c      	beq.n	801872c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80186f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186f4:	88db      	ldrh	r3, [r3, #6]
 80186f6:	b29a      	uxth	r2, r3
 80186f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186fa:	889b      	ldrh	r3, [r3, #4]
 80186fc:	b29b      	uxth	r3, r3
 80186fe:	429a      	cmp	r2, r3
 8018700:	d906      	bls.n	8018710 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018702:	4b45      	ldr	r3, [pc, #276]	@ (8018818 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018704:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8018708:	4944      	ldr	r1, [pc, #272]	@ (801881c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801870a:	4845      	ldr	r0, [pc, #276]	@ (8018820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801870c:	f001 fbe6 	bl	8019edc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018712:	68ba      	ldr	r2, [r7, #8]
 8018714:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018718:	88db      	ldrh	r3, [r3, #6]
 801871a:	b29a      	uxth	r2, r3
 801871c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801871e:	889b      	ldrh	r3, [r3, #4]
 8018720:	b29b      	uxth	r3, r3
 8018722:	429a      	cmp	r2, r3
 8018724:	d010      	beq.n	8018748 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018726:	2300      	movs	r3, #0
 8018728:	623b      	str	r3, [r7, #32]
 801872a:	e00d      	b.n	8018748 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	685b      	ldr	r3, [r3, #4]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d006      	beq.n	8018742 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018734:	4b38      	ldr	r3, [pc, #224]	@ (8018818 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018736:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801873a:	493a      	ldr	r1, [pc, #232]	@ (8018824 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801873c:	4838      	ldr	r0, [pc, #224]	@ (8018820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801873e:	f001 fbcd 	bl	8019edc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	68ba      	ldr	r2, [r7, #8]
 8018746:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d105      	bne.n	801875a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	7f9b      	ldrb	r3, [r3, #30]
 8018752:	f003 0301 	and.w	r3, r3, #1
 8018756:	2b00      	cmp	r3, #0
 8018758:	d059      	beq.n	801880e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801875a:	6a3b      	ldr	r3, [r7, #32]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d04f      	beq.n	8018800 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	685b      	ldr	r3, [r3, #4]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d006      	beq.n	8018776 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	685b      	ldr	r3, [r3, #4]
 801876c:	685b      	ldr	r3, [r3, #4]
 801876e:	889b      	ldrh	r3, [r3, #4]
 8018770:	b29b      	uxth	r3, r3
 8018772:	2b00      	cmp	r3, #0
 8018774:	d002      	beq.n	801877c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018776:	2300      	movs	r3, #0
 8018778:	623b      	str	r3, [r7, #32]
 801877a:	e041      	b.n	8018800 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801877c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801877e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8018780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018786:	e012      	b.n	80187ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801878a:	685b      	ldr	r3, [r3, #4]
 801878c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801878e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018790:	88db      	ldrh	r3, [r3, #6]
 8018792:	b29a      	uxth	r2, r3
 8018794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018796:	889b      	ldrh	r3, [r3, #4]
 8018798:	b29b      	uxth	r3, r3
 801879a:	429a      	cmp	r2, r3
 801879c:	d002      	beq.n	80187a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801879e:	2300      	movs	r3, #0
 80187a0:	623b      	str	r3, [r7, #32]
            break;
 80187a2:	e007      	b.n	80187b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80187a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187a6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80187a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80187ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d1e9      	bne.n	8018788 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80187b4:	6a3b      	ldr	r3, [r7, #32]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d022      	beq.n	8018800 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	685b      	ldr	r3, [r3, #4]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d106      	bne.n	80187d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80187c2:	4b15      	ldr	r3, [pc, #84]	@ (8018818 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80187c4:	f240 12df 	movw	r2, #479	@ 0x1df
 80187c8:	4917      	ldr	r1, [pc, #92]	@ (8018828 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80187ca:	4815      	ldr	r0, [pc, #84]	@ (8018820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80187cc:	f001 fb86 	bl	8019edc <iprintf>
          LWIP_ASSERT("sanity check",
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	685b      	ldr	r3, [r3, #4]
 80187d4:	685b      	ldr	r3, [r3, #4]
 80187d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80187d8:	429a      	cmp	r2, r3
 80187da:	d106      	bne.n	80187ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80187dc:	4b0e      	ldr	r3, [pc, #56]	@ (8018818 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80187de:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80187e2:	4911      	ldr	r1, [pc, #68]	@ (8018828 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80187e4:	480e      	ldr	r0, [pc, #56]	@ (8018820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80187e6:	f001 fb79 	bl	8019edc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80187ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d006      	beq.n	8018800 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80187f2:	4b09      	ldr	r3, [pc, #36]	@ (8018818 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80187f4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80187f8:	490c      	ldr	r1, [pc, #48]	@ (801882c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80187fa:	4809      	ldr	r0, [pc, #36]	@ (8018820 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80187fc:	f001 fb6e 	bl	8019edc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018800:	6a3b      	ldr	r3, [r7, #32]
 8018802:	2b00      	cmp	r3, #0
 8018804:	bf14      	ite	ne
 8018806:	2301      	movne	r3, #1
 8018808:	2300      	moveq	r3, #0
 801880a:	b2db      	uxtb	r3, r3
 801880c:	e000      	b.n	8018810 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801880e:	2300      	movs	r3, #0
}
 8018810:	4618      	mov	r0, r3
 8018812:	3730      	adds	r7, #48	@ 0x30
 8018814:	46bd      	mov	sp, r7
 8018816:	bd80      	pop	{r7, pc}
 8018818:	0801d928 	.word	0x0801d928
 801881c:	0801da0c 	.word	0x0801da0c
 8018820:	0801d970 	.word	0x0801d970
 8018824:	0801da2c 	.word	0x0801da2c
 8018828:	0801da64 	.word	0x0801da64
 801882c:	0801da74 	.word	0x0801da74

08018830 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b08e      	sub	sp, #56	@ 0x38
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	685b      	ldr	r3, [r3, #4]
 801883c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801883e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018840:	781b      	ldrb	r3, [r3, #0]
 8018842:	f003 030f 	and.w	r3, r3, #15
 8018846:	b2db      	uxtb	r3, r3
 8018848:	009b      	lsls	r3, r3, #2
 801884a:	b2db      	uxtb	r3, r3
 801884c:	2b14      	cmp	r3, #20
 801884e:	f040 8171 	bne.w	8018b34 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018854:	88db      	ldrh	r3, [r3, #6]
 8018856:	b29b      	uxth	r3, r3
 8018858:	4618      	mov	r0, r3
 801885a:	f7f6 fad1 	bl	800ee00 <lwip_htons>
 801885e:	4603      	mov	r3, r0
 8018860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018864:	b29b      	uxth	r3, r3
 8018866:	00db      	lsls	r3, r3, #3
 8018868:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801886a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801886c:	885b      	ldrh	r3, [r3, #2]
 801886e:	b29b      	uxth	r3, r3
 8018870:	4618      	mov	r0, r3
 8018872:	f7f6 fac5 	bl	800ee00 <lwip_htons>
 8018876:	4603      	mov	r3, r0
 8018878:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801887a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801887c:	781b      	ldrb	r3, [r3, #0]
 801887e:	f003 030f 	and.w	r3, r3, #15
 8018882:	b2db      	uxtb	r3, r3
 8018884:	009b      	lsls	r3, r3, #2
 8018886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801888a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801888e:	b29b      	uxth	r3, r3
 8018890:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018892:	429a      	cmp	r2, r3
 8018894:	f0c0 8150 	bcc.w	8018b38 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018898:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801889c:	b29b      	uxth	r3, r3
 801889e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80188a0:	1ad3      	subs	r3, r2, r3
 80188a2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80188a4:	6878      	ldr	r0, [r7, #4]
 80188a6:	f7f7 ff27 	bl	80106f8 <pbuf_clen>
 80188aa:	4603      	mov	r3, r0
 80188ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80188ae:	4b8c      	ldr	r3, [pc, #560]	@ (8018ae0 <ip4_reass+0x2b0>)
 80188b0:	881b      	ldrh	r3, [r3, #0]
 80188b2:	461a      	mov	r2, r3
 80188b4:	8c3b      	ldrh	r3, [r7, #32]
 80188b6:	4413      	add	r3, r2
 80188b8:	2b0a      	cmp	r3, #10
 80188ba:	dd10      	ble.n	80188de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80188bc:	8c3b      	ldrh	r3, [r7, #32]
 80188be:	4619      	mov	r1, r3
 80188c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80188c2:	f7ff fd81 	bl	80183c8 <ip_reass_remove_oldest_datagram>
 80188c6:	4603      	mov	r3, r0
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	f000 8137 	beq.w	8018b3c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80188ce:	4b84      	ldr	r3, [pc, #528]	@ (8018ae0 <ip4_reass+0x2b0>)
 80188d0:	881b      	ldrh	r3, [r3, #0]
 80188d2:	461a      	mov	r2, r3
 80188d4:	8c3b      	ldrh	r3, [r7, #32]
 80188d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80188d8:	2b0a      	cmp	r3, #10
 80188da:	f300 812f 	bgt.w	8018b3c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80188de:	4b81      	ldr	r3, [pc, #516]	@ (8018ae4 <ip4_reass+0x2b4>)
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80188e4:	e015      	b.n	8018912 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80188e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188e8:	695a      	ldr	r2, [r3, #20]
 80188ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188ec:	68db      	ldr	r3, [r3, #12]
 80188ee:	429a      	cmp	r2, r3
 80188f0:	d10c      	bne.n	801890c <ip4_reass+0xdc>
 80188f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188f4:	699a      	ldr	r2, [r3, #24]
 80188f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188f8:	691b      	ldr	r3, [r3, #16]
 80188fa:	429a      	cmp	r2, r3
 80188fc:	d106      	bne.n	801890c <ip4_reass+0xdc>
 80188fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018900:	899a      	ldrh	r2, [r3, #12]
 8018902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018904:	889b      	ldrh	r3, [r3, #4]
 8018906:	b29b      	uxth	r3, r3
 8018908:	429a      	cmp	r2, r3
 801890a:	d006      	beq.n	801891a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801890c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	633b      	str	r3, [r7, #48]	@ 0x30
 8018912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018914:	2b00      	cmp	r3, #0
 8018916:	d1e6      	bne.n	80188e6 <ip4_reass+0xb6>
 8018918:	e000      	b.n	801891c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801891a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801891c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801891e:	2b00      	cmp	r3, #0
 8018920:	d109      	bne.n	8018936 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018922:	8c3b      	ldrh	r3, [r7, #32]
 8018924:	4619      	mov	r1, r3
 8018926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018928:	f7ff fdb0 	bl	801848c <ip_reass_enqueue_new_datagram>
 801892c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018930:	2b00      	cmp	r3, #0
 8018932:	d11c      	bne.n	801896e <ip4_reass+0x13e>
      goto nullreturn;
 8018934:	e105      	b.n	8018b42 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018938:	88db      	ldrh	r3, [r3, #6]
 801893a:	b29b      	uxth	r3, r3
 801893c:	4618      	mov	r0, r3
 801893e:	f7f6 fa5f 	bl	800ee00 <lwip_htons>
 8018942:	4603      	mov	r3, r0
 8018944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018948:	2b00      	cmp	r3, #0
 801894a:	d110      	bne.n	801896e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801894c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801894e:	89db      	ldrh	r3, [r3, #14]
 8018950:	4618      	mov	r0, r3
 8018952:	f7f6 fa55 	bl	800ee00 <lwip_htons>
 8018956:	4603      	mov	r3, r0
 8018958:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801895c:	2b00      	cmp	r3, #0
 801895e:	d006      	beq.n	801896e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018962:	3308      	adds	r3, #8
 8018964:	2214      	movs	r2, #20
 8018966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018968:	4618      	mov	r0, r3
 801896a:	f001 fce2 	bl	801a332 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018970:	88db      	ldrh	r3, [r3, #6]
 8018972:	b29b      	uxth	r3, r3
 8018974:	f003 0320 	and.w	r3, r3, #32
 8018978:	2b00      	cmp	r3, #0
 801897a:	bf0c      	ite	eq
 801897c:	2301      	moveq	r3, #1
 801897e:	2300      	movne	r3, #0
 8018980:	b2db      	uxtb	r3, r3
 8018982:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018984:	69fb      	ldr	r3, [r7, #28]
 8018986:	2b00      	cmp	r3, #0
 8018988:	d00e      	beq.n	80189a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801898a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801898c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801898e:	4413      	add	r3, r2
 8018990:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018992:	8b7a      	ldrh	r2, [r7, #26]
 8018994:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018996:	429a      	cmp	r2, r3
 8018998:	f0c0 80a0 	bcc.w	8018adc <ip4_reass+0x2ac>
 801899c:	8b7b      	ldrh	r3, [r7, #26]
 801899e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80189a2:	4293      	cmp	r3, r2
 80189a4:	f200 809a 	bhi.w	8018adc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80189a8:	69fa      	ldr	r2, [r7, #28]
 80189aa:	6879      	ldr	r1, [r7, #4]
 80189ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80189ae:	f7ff fdd5 	bl	801855c <ip_reass_chain_frag_into_datagram_and_validate>
 80189b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80189b4:	697b      	ldr	r3, [r7, #20]
 80189b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189ba:	f000 809b 	beq.w	8018af4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80189be:	4b48      	ldr	r3, [pc, #288]	@ (8018ae0 <ip4_reass+0x2b0>)
 80189c0:	881a      	ldrh	r2, [r3, #0]
 80189c2:	8c3b      	ldrh	r3, [r7, #32]
 80189c4:	4413      	add	r3, r2
 80189c6:	b29a      	uxth	r2, r3
 80189c8:	4b45      	ldr	r3, [pc, #276]	@ (8018ae0 <ip4_reass+0x2b0>)
 80189ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80189cc:	69fb      	ldr	r3, [r7, #28]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d00d      	beq.n	80189ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80189d2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80189d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80189d6:	4413      	add	r3, r2
 80189d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80189da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189dc:	8a7a      	ldrh	r2, [r7, #18]
 80189de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80189e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189e2:	7f9b      	ldrb	r3, [r3, #30]
 80189e4:	f043 0301 	orr.w	r3, r3, #1
 80189e8:	b2da      	uxtb	r2, r3
 80189ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80189ee:	697b      	ldr	r3, [r7, #20]
 80189f0:	2b01      	cmp	r3, #1
 80189f2:	d171      	bne.n	8018ad8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80189f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189f6:	8b9b      	ldrh	r3, [r3, #28]
 80189f8:	3314      	adds	r3, #20
 80189fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80189fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80189fe:	685b      	ldr	r3, [r3, #4]
 8018a00:	685b      	ldr	r3, [r3, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a08:	685b      	ldr	r3, [r3, #4]
 8018a0a:	685b      	ldr	r3, [r3, #4]
 8018a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a10:	3308      	adds	r3, #8
 8018a12:	2214      	movs	r2, #20
 8018a14:	4619      	mov	r1, r3
 8018a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018a18:	f001 fc8b 	bl	801a332 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018a1c:	8a3b      	ldrh	r3, [r7, #16]
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f7f6 f9ee 	bl	800ee00 <lwip_htons>
 8018a24:	4603      	mov	r3, r0
 8018a26:	461a      	mov	r2, r3
 8018a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a2a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a2e:	2200      	movs	r2, #0
 8018a30:	719a      	strb	r2, [r3, #6]
 8018a32:	2200      	movs	r2, #0
 8018a34:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a38:	2200      	movs	r2, #0
 8018a3a:	729a      	strb	r2, [r3, #10]
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a42:	685b      	ldr	r3, [r3, #4]
 8018a44:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018a46:	e00d      	b.n	8018a64 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a4a:	685b      	ldr	r3, [r3, #4]
 8018a4c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018a4e:	2114      	movs	r1, #20
 8018a50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018a52:	f7f7 fd3d 	bl	80104d0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018a56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018a58:	6878      	ldr	r0, [r7, #4]
 8018a5a:	f7f7 fe8d 	bl	8010778 <pbuf_cat>
      r = iprh->next_pbuf;
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8018a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d1ee      	bne.n	8018a48 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8018ae4 <ip4_reass+0x2b4>)
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018a70:	429a      	cmp	r2, r3
 8018a72:	d102      	bne.n	8018a7a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018a74:	2300      	movs	r3, #0
 8018a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a78:	e010      	b.n	8018a9c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8018ae4 <ip4_reass+0x2b4>)
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a80:	e007      	b.n	8018a92 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018a88:	429a      	cmp	r2, r3
 8018a8a:	d006      	beq.n	8018a9a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d1f4      	bne.n	8018a82 <ip4_reass+0x252>
 8018a98:	e000      	b.n	8018a9c <ip4_reass+0x26c>
          break;
 8018a9a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018a9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018a9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018aa0:	f7ff fd2e 	bl	8018500 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018aa4:	6878      	ldr	r0, [r7, #4]
 8018aa6:	f7f7 fe27 	bl	80106f8 <pbuf_clen>
 8018aaa:	4603      	mov	r3, r0
 8018aac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018aae:	4b0c      	ldr	r3, [pc, #48]	@ (8018ae0 <ip4_reass+0x2b0>)
 8018ab0:	881b      	ldrh	r3, [r3, #0]
 8018ab2:	8c3a      	ldrh	r2, [r7, #32]
 8018ab4:	429a      	cmp	r2, r3
 8018ab6:	d906      	bls.n	8018ac6 <ip4_reass+0x296>
 8018ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8018ae8 <ip4_reass+0x2b8>)
 8018aba:	f240 229b 	movw	r2, #667	@ 0x29b
 8018abe:	490b      	ldr	r1, [pc, #44]	@ (8018aec <ip4_reass+0x2bc>)
 8018ac0:	480b      	ldr	r0, [pc, #44]	@ (8018af0 <ip4_reass+0x2c0>)
 8018ac2:	f001 fa0b 	bl	8019edc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018ac6:	4b06      	ldr	r3, [pc, #24]	@ (8018ae0 <ip4_reass+0x2b0>)
 8018ac8:	881a      	ldrh	r2, [r3, #0]
 8018aca:	8c3b      	ldrh	r3, [r7, #32]
 8018acc:	1ad3      	subs	r3, r2, r3
 8018ace:	b29a      	uxth	r2, r3
 8018ad0:	4b03      	ldr	r3, [pc, #12]	@ (8018ae0 <ip4_reass+0x2b0>)
 8018ad2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	e038      	b.n	8018b4a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018ad8:	2300      	movs	r3, #0
 8018ada:	e036      	b.n	8018b4a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018adc:	bf00      	nop
 8018ade:	e00a      	b.n	8018af6 <ip4_reass+0x2c6>
 8018ae0:	20027614 	.word	0x20027614
 8018ae4:	20027610 	.word	0x20027610
 8018ae8:	0801d928 	.word	0x0801d928
 8018aec:	0801da98 	.word	0x0801da98
 8018af0:	0801d970 	.word	0x0801d970
    goto nullreturn_ipr;
 8018af4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d106      	bne.n	8018b0a <ip4_reass+0x2da>
 8018afc:	4b15      	ldr	r3, [pc, #84]	@ (8018b54 <ip4_reass+0x324>)
 8018afe:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8018b02:	4915      	ldr	r1, [pc, #84]	@ (8018b58 <ip4_reass+0x328>)
 8018b04:	4815      	ldr	r0, [pc, #84]	@ (8018b5c <ip4_reass+0x32c>)
 8018b06:	f001 f9e9 	bl	8019edc <iprintf>
  if (ipr->p == NULL) {
 8018b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b0c:	685b      	ldr	r3, [r3, #4]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d116      	bne.n	8018b40 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018b12:	4b13      	ldr	r3, [pc, #76]	@ (8018b60 <ip4_reass+0x330>)
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018b18:	429a      	cmp	r2, r3
 8018b1a:	d006      	beq.n	8018b2a <ip4_reass+0x2fa>
 8018b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8018b54 <ip4_reass+0x324>)
 8018b1e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018b22:	4910      	ldr	r1, [pc, #64]	@ (8018b64 <ip4_reass+0x334>)
 8018b24:	480d      	ldr	r0, [pc, #52]	@ (8018b5c <ip4_reass+0x32c>)
 8018b26:	f001 f9d9 	bl	8019edc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018b2a:	2100      	movs	r1, #0
 8018b2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018b2e:	f7ff fce7 	bl	8018500 <ip_reass_dequeue_datagram>
 8018b32:	e006      	b.n	8018b42 <ip4_reass+0x312>
    goto nullreturn;
 8018b34:	bf00      	nop
 8018b36:	e004      	b.n	8018b42 <ip4_reass+0x312>
    goto nullreturn;
 8018b38:	bf00      	nop
 8018b3a:	e002      	b.n	8018b42 <ip4_reass+0x312>
      goto nullreturn;
 8018b3c:	bf00      	nop
 8018b3e:	e000      	b.n	8018b42 <ip4_reass+0x312>
  }

nullreturn:
 8018b40:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018b42:	6878      	ldr	r0, [r7, #4]
 8018b44:	f7f7 fd4a 	bl	80105dc <pbuf_free>
  return NULL;
 8018b48:	2300      	movs	r3, #0
}
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	3738      	adds	r7, #56	@ 0x38
 8018b4e:	46bd      	mov	sp, r7
 8018b50:	bd80      	pop	{r7, pc}
 8018b52:	bf00      	nop
 8018b54:	0801d928 	.word	0x0801d928
 8018b58:	0801dab4 	.word	0x0801dab4
 8018b5c:	0801d970 	.word	0x0801d970
 8018b60:	20027610 	.word	0x20027610
 8018b64:	0801dac0 	.word	0x0801dac0

08018b68 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018b6c:	2005      	movs	r0, #5
 8018b6e:	f7f6 fe1b 	bl	800f7a8 <memp_malloc>
 8018b72:	4603      	mov	r3, r0
}
 8018b74:	4618      	mov	r0, r3
 8018b76:	bd80      	pop	{r7, pc}

08018b78 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b082      	sub	sp, #8
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d106      	bne.n	8018b94 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018b86:	4b07      	ldr	r3, [pc, #28]	@ (8018ba4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018b88:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018b8c:	4906      	ldr	r1, [pc, #24]	@ (8018ba8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018b8e:	4807      	ldr	r0, [pc, #28]	@ (8018bac <ip_frag_free_pbuf_custom_ref+0x34>)
 8018b90:	f001 f9a4 	bl	8019edc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018b94:	6879      	ldr	r1, [r7, #4]
 8018b96:	2005      	movs	r0, #5
 8018b98:	f7f6 fe7c 	bl	800f894 <memp_free>
}
 8018b9c:	bf00      	nop
 8018b9e:	3708      	adds	r7, #8
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}
 8018ba4:	0801d928 	.word	0x0801d928
 8018ba8:	0801dae0 	.word	0x0801dae0
 8018bac:	0801d970 	.word	0x0801d970

08018bb0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018bb0:	b580      	push	{r7, lr}
 8018bb2:	b084      	sub	sp, #16
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d106      	bne.n	8018bd0 <ipfrag_free_pbuf_custom+0x20>
 8018bc2:	4b11      	ldr	r3, [pc, #68]	@ (8018c08 <ipfrag_free_pbuf_custom+0x58>)
 8018bc4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018bc8:	4910      	ldr	r1, [pc, #64]	@ (8018c0c <ipfrag_free_pbuf_custom+0x5c>)
 8018bca:	4811      	ldr	r0, [pc, #68]	@ (8018c10 <ipfrag_free_pbuf_custom+0x60>)
 8018bcc:	f001 f986 	bl	8019edc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018bd0:	68fa      	ldr	r2, [r7, #12]
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	429a      	cmp	r2, r3
 8018bd6:	d006      	beq.n	8018be6 <ipfrag_free_pbuf_custom+0x36>
 8018bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8018c08 <ipfrag_free_pbuf_custom+0x58>)
 8018bda:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8018bde:	490d      	ldr	r1, [pc, #52]	@ (8018c14 <ipfrag_free_pbuf_custom+0x64>)
 8018be0:	480b      	ldr	r0, [pc, #44]	@ (8018c10 <ipfrag_free_pbuf_custom+0x60>)
 8018be2:	f001 f97b 	bl	8019edc <iprintf>
  if (pcr->original != NULL) {
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	695b      	ldr	r3, [r3, #20]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d004      	beq.n	8018bf8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	695b      	ldr	r3, [r3, #20]
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	f7f7 fcf2 	bl	80105dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018bf8:	68f8      	ldr	r0, [r7, #12]
 8018bfa:	f7ff ffbd 	bl	8018b78 <ip_frag_free_pbuf_custom_ref>
}
 8018bfe:	bf00      	nop
 8018c00:	3710      	adds	r7, #16
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}
 8018c06:	bf00      	nop
 8018c08:	0801d928 	.word	0x0801d928
 8018c0c:	0801daec 	.word	0x0801daec
 8018c10:	0801d970 	.word	0x0801d970
 8018c14:	0801daf8 	.word	0x0801daf8

08018c18 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b094      	sub	sp, #80	@ 0x50
 8018c1c:	af02      	add	r7, sp, #8
 8018c1e:	60f8      	str	r0, [r7, #12]
 8018c20:	60b9      	str	r1, [r7, #8]
 8018c22:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018c24:	2300      	movs	r3, #0
 8018c26:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018c2a:	68bb      	ldr	r3, [r7, #8]
 8018c2c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018c2e:	3b14      	subs	r3, #20
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	da00      	bge.n	8018c36 <ip4_frag+0x1e>
 8018c34:	3307      	adds	r3, #7
 8018c36:	10db      	asrs	r3, r3, #3
 8018c38:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018c3a:	2314      	movs	r3, #20
 8018c3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	685b      	ldr	r3, [r3, #4]
 8018c42:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018c46:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c4a:	781b      	ldrb	r3, [r3, #0]
 8018c4c:	f003 030f 	and.w	r3, r3, #15
 8018c50:	b2db      	uxtb	r3, r3
 8018c52:	009b      	lsls	r3, r3, #2
 8018c54:	b2db      	uxtb	r3, r3
 8018c56:	2b14      	cmp	r3, #20
 8018c58:	d002      	beq.n	8018c60 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018c5a:	f06f 0305 	mvn.w	r3, #5
 8018c5e:	e110      	b.n	8018e82 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	895b      	ldrh	r3, [r3, #10]
 8018c64:	2b13      	cmp	r3, #19
 8018c66:	d809      	bhi.n	8018c7c <ip4_frag+0x64>
 8018c68:	4b88      	ldr	r3, [pc, #544]	@ (8018e8c <ip4_frag+0x274>)
 8018c6a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8018c6e:	4988      	ldr	r1, [pc, #544]	@ (8018e90 <ip4_frag+0x278>)
 8018c70:	4888      	ldr	r0, [pc, #544]	@ (8018e94 <ip4_frag+0x27c>)
 8018c72:	f001 f933 	bl	8019edc <iprintf>
 8018c76:	f06f 0305 	mvn.w	r3, #5
 8018c7a:	e102      	b.n	8018e82 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c7e:	88db      	ldrh	r3, [r3, #6]
 8018c80:	b29b      	uxth	r3, r3
 8018c82:	4618      	mov	r0, r3
 8018c84:	f7f6 f8bc 	bl	800ee00 <lwip_htons>
 8018c88:	4603      	mov	r3, r0
 8018c8a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018c8c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018c8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c92:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018c96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	891b      	ldrh	r3, [r3, #8]
 8018ca2:	3b14      	subs	r3, #20
 8018ca4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8018ca8:	e0e1      	b.n	8018e6e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018caa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018cac:	00db      	lsls	r3, r3, #3
 8018cae:	b29b      	uxth	r3, r3
 8018cb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018cb4:	4293      	cmp	r3, r2
 8018cb6:	bf28      	it	cs
 8018cb8:	4613      	movcs	r3, r2
 8018cba:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018cbc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018cc0:	2114      	movs	r1, #20
 8018cc2:	200e      	movs	r0, #14
 8018cc4:	f7f7 f9a6 	bl	8010014 <pbuf_alloc>
 8018cc8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8018cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	f000 80d5 	beq.w	8018e7c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cd4:	895b      	ldrh	r3, [r3, #10]
 8018cd6:	2b13      	cmp	r3, #19
 8018cd8:	d806      	bhi.n	8018ce8 <ip4_frag+0xd0>
 8018cda:	4b6c      	ldr	r3, [pc, #432]	@ (8018e8c <ip4_frag+0x274>)
 8018cdc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8018ce0:	496d      	ldr	r1, [pc, #436]	@ (8018e98 <ip4_frag+0x280>)
 8018ce2:	486c      	ldr	r0, [pc, #432]	@ (8018e94 <ip4_frag+0x27c>)
 8018ce4:	f001 f8fa 	bl	8019edc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cea:	685b      	ldr	r3, [r3, #4]
 8018cec:	2214      	movs	r2, #20
 8018cee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	f001 fb1e 	bl	801a332 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cf8:	685b      	ldr	r3, [r3, #4]
 8018cfa:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8018cfc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018cfe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8018d02:	e064      	b.n	8018dce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	895a      	ldrh	r2, [r3, #10]
 8018d08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018d0a:	1ad3      	subs	r3, r2, r3
 8018d0c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	895b      	ldrh	r3, [r3, #10]
 8018d12:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018d14:	429a      	cmp	r2, r3
 8018d16:	d906      	bls.n	8018d26 <ip4_frag+0x10e>
 8018d18:	4b5c      	ldr	r3, [pc, #368]	@ (8018e8c <ip4_frag+0x274>)
 8018d1a:	f240 322d 	movw	r2, #813	@ 0x32d
 8018d1e:	495f      	ldr	r1, [pc, #380]	@ (8018e9c <ip4_frag+0x284>)
 8018d20:	485c      	ldr	r0, [pc, #368]	@ (8018e94 <ip4_frag+0x27c>)
 8018d22:	f001 f8db 	bl	8019edc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018d26:	8bfa      	ldrh	r2, [r7, #30]
 8018d28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018d2c:	4293      	cmp	r3, r2
 8018d2e:	bf28      	it	cs
 8018d30:	4613      	movcs	r3, r2
 8018d32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018d36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d105      	bne.n	8018d4a <ip4_frag+0x132>
        poff = 0;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	60fb      	str	r3, [r7, #12]
        continue;
 8018d48:	e041      	b.n	8018dce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018d4a:	f7ff ff0d 	bl	8018b68 <ip_frag_alloc_pbuf_custom_ref>
 8018d4e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018d50:	69bb      	ldr	r3, [r7, #24]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d103      	bne.n	8018d5e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018d56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018d58:	f7f7 fc40 	bl	80105dc <pbuf_free>
        goto memerr;
 8018d5c:	e08f      	b.n	8018e7e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018d5e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018d64:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018d66:	4413      	add	r3, r2
 8018d68:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018d6c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018d70:	9201      	str	r2, [sp, #4]
 8018d72:	9300      	str	r3, [sp, #0]
 8018d74:	4603      	mov	r3, r0
 8018d76:	2241      	movs	r2, #65	@ 0x41
 8018d78:	2000      	movs	r0, #0
 8018d7a:	f7f7 fa75 	bl	8010268 <pbuf_alloced_custom>
 8018d7e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018d80:	697b      	ldr	r3, [r7, #20]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d106      	bne.n	8018d94 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018d86:	69b8      	ldr	r0, [r7, #24]
 8018d88:	f7ff fef6 	bl	8018b78 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018d8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018d8e:	f7f7 fc25 	bl	80105dc <pbuf_free>
        goto memerr;
 8018d92:	e074      	b.n	8018e7e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018d94:	68f8      	ldr	r0, [r7, #12]
 8018d96:	f7f7 fcc7 	bl	8010728 <pbuf_ref>
      pcr->original = p;
 8018d9a:	69bb      	ldr	r3, [r7, #24]
 8018d9c:	68fa      	ldr	r2, [r7, #12]
 8018d9e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018da0:	69bb      	ldr	r3, [r7, #24]
 8018da2:	4a3f      	ldr	r2, [pc, #252]	@ (8018ea0 <ip4_frag+0x288>)
 8018da4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018da6:	6979      	ldr	r1, [r7, #20]
 8018da8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018daa:	f7f7 fce5 	bl	8010778 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018dae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8018db2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018db6:	1ad3      	subs	r3, r2, r3
 8018db8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018dbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d004      	beq.n	8018dce <ip4_frag+0x1b6>
        poff = 0;
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018dce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d196      	bne.n	8018d04 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018dd6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018dd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018ddc:	4413      	add	r3, r2
 8018dde:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018de0:	68bb      	ldr	r3, [r7, #8]
 8018de2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018de4:	f1a3 0213 	sub.w	r2, r3, #19
 8018de8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018dec:	429a      	cmp	r2, r3
 8018dee:	bfcc      	ite	gt
 8018df0:	2301      	movgt	r3, #1
 8018df2:	2300      	movle	r3, #0
 8018df4:	b2db      	uxtb	r3, r3
 8018df6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018df8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018dfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018e00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8018e02:	6a3b      	ldr	r3, [r7, #32]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d002      	beq.n	8018e0e <ip4_frag+0x1f6>
 8018e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d003      	beq.n	8018e16 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018e0e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018e10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018e14:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018e16:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018e18:	4618      	mov	r0, r3
 8018e1a:	f7f5 fff1 	bl	800ee00 <lwip_htons>
 8018e1e:	4603      	mov	r3, r0
 8018e20:	461a      	mov	r2, r3
 8018e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e24:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018e26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018e28:	3314      	adds	r3, #20
 8018e2a:	b29b      	uxth	r3, r3
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	f7f5 ffe7 	bl	800ee00 <lwip_htons>
 8018e32:	4603      	mov	r3, r0
 8018e34:	461a      	mov	r2, r3
 8018e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e38:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e3c:	2200      	movs	r2, #0
 8018e3e:	729a      	strb	r2, [r3, #10]
 8018e40:	2200      	movs	r2, #0
 8018e42:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018e44:	68bb      	ldr	r3, [r7, #8]
 8018e46:	695b      	ldr	r3, [r3, #20]
 8018e48:	687a      	ldr	r2, [r7, #4]
 8018e4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018e4c:	68b8      	ldr	r0, [r7, #8]
 8018e4e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018e50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018e52:	f7f7 fbc3 	bl	80105dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018e56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018e5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018e5c:	1ad3      	subs	r3, r2, r3
 8018e5e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8018e62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018e66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018e68:	4413      	add	r3, r2
 8018e6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018e6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	f47f af19 	bne.w	8018caa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018e78:	2300      	movs	r3, #0
 8018e7a:	e002      	b.n	8018e82 <ip4_frag+0x26a>
      goto memerr;
 8018e7c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018e82:	4618      	mov	r0, r3
 8018e84:	3748      	adds	r7, #72	@ 0x48
 8018e86:	46bd      	mov	sp, r7
 8018e88:	bd80      	pop	{r7, pc}
 8018e8a:	bf00      	nop
 8018e8c:	0801d928 	.word	0x0801d928
 8018e90:	0801db04 	.word	0x0801db04
 8018e94:	0801d970 	.word	0x0801d970
 8018e98:	0801db20 	.word	0x0801db20
 8018e9c:	0801db40 	.word	0x0801db40
 8018ea0:	08018bb1 	.word	0x08018bb1

08018ea4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b086      	sub	sp, #24
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
 8018eac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018eae:	230e      	movs	r3, #14
 8018eb0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	895b      	ldrh	r3, [r3, #10]
 8018eb6:	2b0e      	cmp	r3, #14
 8018eb8:	d96e      	bls.n	8018f98 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	7bdb      	ldrb	r3, [r3, #15]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d106      	bne.n	8018ed0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018ec2:	683b      	ldr	r3, [r7, #0]
 8018ec4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018ec8:	3301      	adds	r3, #1
 8018eca:	b2da      	uxtb	r2, r3
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	685b      	ldr	r3, [r3, #4]
 8018ed4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018ed6:	693b      	ldr	r3, [r7, #16]
 8018ed8:	7b1a      	ldrb	r2, [r3, #12]
 8018eda:	7b5b      	ldrb	r3, [r3, #13]
 8018edc:	021b      	lsls	r3, r3, #8
 8018ede:	4313      	orrs	r3, r2
 8018ee0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018ee2:	693b      	ldr	r3, [r7, #16]
 8018ee4:	781b      	ldrb	r3, [r3, #0]
 8018ee6:	f003 0301 	and.w	r3, r3, #1
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d023      	beq.n	8018f36 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018eee:	693b      	ldr	r3, [r7, #16]
 8018ef0:	781b      	ldrb	r3, [r3, #0]
 8018ef2:	2b01      	cmp	r3, #1
 8018ef4:	d10f      	bne.n	8018f16 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018ef6:	693b      	ldr	r3, [r7, #16]
 8018ef8:	785b      	ldrb	r3, [r3, #1]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d11b      	bne.n	8018f36 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018efe:	693b      	ldr	r3, [r7, #16]
 8018f00:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018f02:	2b5e      	cmp	r3, #94	@ 0x5e
 8018f04:	d117      	bne.n	8018f36 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	7b5b      	ldrb	r3, [r3, #13]
 8018f0a:	f043 0310 	orr.w	r3, r3, #16
 8018f0e:	b2da      	uxtb	r2, r3
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	735a      	strb	r2, [r3, #13]
 8018f14:	e00f      	b.n	8018f36 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018f16:	693b      	ldr	r3, [r7, #16]
 8018f18:	2206      	movs	r2, #6
 8018f1a:	4928      	ldr	r1, [pc, #160]	@ (8018fbc <ethernet_input+0x118>)
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	f001 f925 	bl	801a16c <memcmp>
 8018f22:	4603      	mov	r3, r0
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d106      	bne.n	8018f36 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	7b5b      	ldrb	r3, [r3, #13]
 8018f2c:	f043 0308 	orr.w	r3, r3, #8
 8018f30:	b2da      	uxtb	r2, r3
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018f36:	89fb      	ldrh	r3, [r7, #14]
 8018f38:	2b08      	cmp	r3, #8
 8018f3a:	d003      	beq.n	8018f44 <ethernet_input+0xa0>
 8018f3c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8018f40:	d014      	beq.n	8018f6c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018f42:	e032      	b.n	8018faa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f44:	683b      	ldr	r3, [r7, #0]
 8018f46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018f4a:	f003 0308 	and.w	r3, r3, #8
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d024      	beq.n	8018f9c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018f52:	8afb      	ldrh	r3, [r7, #22]
 8018f54:	4619      	mov	r1, r3
 8018f56:	6878      	ldr	r0, [r7, #4]
 8018f58:	f7f7 faba 	bl	80104d0 <pbuf_remove_header>
 8018f5c:	4603      	mov	r3, r0
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d11e      	bne.n	8018fa0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018f62:	6839      	ldr	r1, [r7, #0]
 8018f64:	6878      	ldr	r0, [r7, #4]
 8018f66:	f7fe fe91 	bl	8017c8c <ip4_input>
      break;
 8018f6a:	e013      	b.n	8018f94 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f6c:	683b      	ldr	r3, [r7, #0]
 8018f6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018f72:	f003 0308 	and.w	r3, r3, #8
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d014      	beq.n	8018fa4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018f7a:	8afb      	ldrh	r3, [r7, #22]
 8018f7c:	4619      	mov	r1, r3
 8018f7e:	6878      	ldr	r0, [r7, #4]
 8018f80:	f7f7 faa6 	bl	80104d0 <pbuf_remove_header>
 8018f84:	4603      	mov	r3, r0
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d10e      	bne.n	8018fa8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018f8a:	6839      	ldr	r1, [r7, #0]
 8018f8c:	6878      	ldr	r0, [r7, #4]
 8018f8e:	f7fe f831 	bl	8016ff4 <etharp_input>
      break;
 8018f92:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018f94:	2300      	movs	r3, #0
 8018f96:	e00c      	b.n	8018fb2 <ethernet_input+0x10e>
    goto free_and_return;
 8018f98:	bf00      	nop
 8018f9a:	e006      	b.n	8018faa <ethernet_input+0x106>
        goto free_and_return;
 8018f9c:	bf00      	nop
 8018f9e:	e004      	b.n	8018faa <ethernet_input+0x106>
        goto free_and_return;
 8018fa0:	bf00      	nop
 8018fa2:	e002      	b.n	8018faa <ethernet_input+0x106>
        goto free_and_return;
 8018fa4:	bf00      	nop
 8018fa6:	e000      	b.n	8018faa <ethernet_input+0x106>
        goto free_and_return;
 8018fa8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018faa:	6878      	ldr	r0, [r7, #4]
 8018fac:	f7f7 fb16 	bl	80105dc <pbuf_free>
  return ERR_OK;
 8018fb0:	2300      	movs	r3, #0
}
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	3718      	adds	r7, #24
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	bd80      	pop	{r7, pc}
 8018fba:	bf00      	nop
 8018fbc:	0801e1f4 	.word	0x0801e1f4

08018fc0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b086      	sub	sp, #24
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	60f8      	str	r0, [r7, #12]
 8018fc8:	60b9      	str	r1, [r7, #8]
 8018fca:	607a      	str	r2, [r7, #4]
 8018fcc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018fce:	8c3b      	ldrh	r3, [r7, #32]
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f7f5 ff15 	bl	800ee00 <lwip_htons>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018fda:	210e      	movs	r1, #14
 8018fdc:	68b8      	ldr	r0, [r7, #8]
 8018fde:	f7f7 fa67 	bl	80104b0 <pbuf_add_header>
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d125      	bne.n	8019034 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018fe8:	68bb      	ldr	r3, [r7, #8]
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018fee:	693b      	ldr	r3, [r7, #16]
 8018ff0:	8afa      	ldrh	r2, [r7, #22]
 8018ff2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018ff4:	693b      	ldr	r3, [r7, #16]
 8018ff6:	2206      	movs	r2, #6
 8018ff8:	6839      	ldr	r1, [r7, #0]
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	f001 f999 	bl	801a332 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019000:	693b      	ldr	r3, [r7, #16]
 8019002:	3306      	adds	r3, #6
 8019004:	2206      	movs	r2, #6
 8019006:	6879      	ldr	r1, [r7, #4]
 8019008:	4618      	mov	r0, r3
 801900a:	f001 f992 	bl	801a332 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019014:	2b06      	cmp	r3, #6
 8019016:	d006      	beq.n	8019026 <ethernet_output+0x66>
 8019018:	4b0a      	ldr	r3, [pc, #40]	@ (8019044 <ethernet_output+0x84>)
 801901a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801901e:	490a      	ldr	r1, [pc, #40]	@ (8019048 <ethernet_output+0x88>)
 8019020:	480a      	ldr	r0, [pc, #40]	@ (801904c <ethernet_output+0x8c>)
 8019022:	f000 ff5b 	bl	8019edc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	699b      	ldr	r3, [r3, #24]
 801902a:	68b9      	ldr	r1, [r7, #8]
 801902c:	68f8      	ldr	r0, [r7, #12]
 801902e:	4798      	blx	r3
 8019030:	4603      	mov	r3, r0
 8019032:	e002      	b.n	801903a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019034:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019036:	f06f 0301 	mvn.w	r3, #1
}
 801903a:	4618      	mov	r0, r3
 801903c:	3718      	adds	r7, #24
 801903e:	46bd      	mov	sp, r7
 8019040:	bd80      	pop	{r7, pc}
 8019042:	bf00      	nop
 8019044:	0801db50 	.word	0x0801db50
 8019048:	0801db88 	.word	0x0801db88
 801904c:	0801dbbc 	.word	0x0801dbbc

08019050 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b082      	sub	sp, #8
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
 8019058:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801905a:	683b      	ldr	r3, [r7, #0]
 801905c:	2200      	movs	r2, #0
 801905e:	2104      	movs	r1, #4
 8019060:	4618      	mov	r0, r3
 8019062:	f7f2 f85f 	bl	800b124 <osMessageQueueNew>
 8019066:	4602      	mov	r2, r0
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	2b00      	cmp	r3, #0
 8019072:	d102      	bne.n	801907a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8019074:	f04f 33ff 	mov.w	r3, #4294967295
 8019078:	e000      	b.n	801907c <sys_mbox_new+0x2c>

  return ERR_OK;
 801907a:	2300      	movs	r3, #0
}
 801907c:	4618      	mov	r0, r3
 801907e:	3708      	adds	r7, #8
 8019080:	46bd      	mov	sp, r7
 8019082:	bd80      	pop	{r7, pc}

08019084 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b084      	sub	sp, #16
 8019088:	af00      	add	r7, sp, #0
 801908a:	6078      	str	r0, [r7, #4]
 801908c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	6818      	ldr	r0, [r3, #0]
 8019092:	4639      	mov	r1, r7
 8019094:	2300      	movs	r3, #0
 8019096:	2200      	movs	r2, #0
 8019098:	f7f2 f8ca 	bl	800b230 <osMessageQueuePut>
 801909c:	4603      	mov	r3, r0
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d102      	bne.n	80190a8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80190a2:	2300      	movs	r3, #0
 80190a4:	73fb      	strb	r3, [r7, #15]
 80190a6:	e001      	b.n	80190ac <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80190a8:	23ff      	movs	r3, #255	@ 0xff
 80190aa:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80190ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80190b0:	4618      	mov	r0, r3
 80190b2:	3710      	adds	r7, #16
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}

080190b8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b086      	sub	sp, #24
 80190bc:	af00      	add	r7, sp, #0
 80190be:	60f8      	str	r0, [r7, #12]
 80190c0:	60b9      	str	r1, [r7, #8]
 80190c2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80190c4:	f7f1 fc90 	bl	800a9e8 <osKernelGetTickCount>
 80190c8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d013      	beq.n	80190f8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	6818      	ldr	r0, [r3, #0]
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	2200      	movs	r2, #0
 80190d8:	68b9      	ldr	r1, [r7, #8]
 80190da:	f7f2 f91d 	bl	800b318 <osMessageQueueGet>
 80190de:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80190e0:	693b      	ldr	r3, [r7, #16]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d105      	bne.n	80190f2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80190e6:	f7f1 fc7f 	bl	800a9e8 <osKernelGetTickCount>
 80190ea:	4602      	mov	r2, r0
 80190ec:	697b      	ldr	r3, [r7, #20]
 80190ee:	1ad3      	subs	r3, r2, r3
 80190f0:	e00f      	b.n	8019112 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80190f2:	f04f 33ff 	mov.w	r3, #4294967295
 80190f6:	e00c      	b.n	8019112 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	6818      	ldr	r0, [r3, #0]
 80190fc:	f04f 33ff 	mov.w	r3, #4294967295
 8019100:	2200      	movs	r2, #0
 8019102:	68b9      	ldr	r1, [r7, #8]
 8019104:	f7f2 f908 	bl	800b318 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8019108:	f7f1 fc6e 	bl	800a9e8 <osKernelGetTickCount>
 801910c:	4602      	mov	r2, r0
 801910e:	697b      	ldr	r3, [r7, #20]
 8019110:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019112:	4618      	mov	r0, r3
 8019114:	3718      	adds	r7, #24
 8019116:	46bd      	mov	sp, r7
 8019118:	bd80      	pop	{r7, pc}

0801911a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801911a:	b480      	push	{r7}
 801911c:	b083      	sub	sp, #12
 801911e:	af00      	add	r7, sp, #0
 8019120:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d101      	bne.n	801912e <sys_mbox_valid+0x14>
    return 0;
 801912a:	2300      	movs	r3, #0
 801912c:	e000      	b.n	8019130 <sys_mbox_valid+0x16>
  else
    return 1;
 801912e:	2301      	movs	r3, #1
}
 8019130:	4618      	mov	r0, r3
 8019132:	370c      	adds	r7, #12
 8019134:	46bd      	mov	sp, r7
 8019136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801913a:	4770      	bx	lr

0801913c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8019140:	2000      	movs	r0, #0
 8019142:	f7f1 fd4d 	bl	800abe0 <osMutexNew>
 8019146:	4603      	mov	r3, r0
 8019148:	4a01      	ldr	r2, [pc, #4]	@ (8019150 <sys_init+0x14>)
 801914a:	6013      	str	r3, [r2, #0]
#endif
}
 801914c:	bf00      	nop
 801914e:	bd80      	pop	{r7, pc}
 8019150:	20027618 	.word	0x20027618

08019154 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019154:	b580      	push	{r7, lr}
 8019156:	b082      	sub	sp, #8
 8019158:	af00      	add	r7, sp, #0
 801915a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801915c:	2000      	movs	r0, #0
 801915e:	f7f1 fd3f 	bl	800abe0 <osMutexNew>
 8019162:	4602      	mov	r2, r0
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d102      	bne.n	8019176 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019170:	f04f 33ff 	mov.w	r3, #4294967295
 8019174:	e000      	b.n	8019178 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019176:	2300      	movs	r3, #0
}
 8019178:	4618      	mov	r0, r3
 801917a:	3708      	adds	r7, #8
 801917c:	46bd      	mov	sp, r7
 801917e:	bd80      	pop	{r7, pc}

08019180 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019180:	b580      	push	{r7, lr}
 8019182:	b082      	sub	sp, #8
 8019184:	af00      	add	r7, sp, #0
 8019186:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	f04f 31ff 	mov.w	r1, #4294967295
 8019190:	4618      	mov	r0, r3
 8019192:	f7f1 fdbf 	bl	800ad14 <osMutexAcquire>
#endif
}
 8019196:	bf00      	nop
 8019198:	3708      	adds	r7, #8
 801919a:	46bd      	mov	sp, r7
 801919c:	bd80      	pop	{r7, pc}

0801919e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801919e:	b580      	push	{r7, lr}
 80191a0:	b082      	sub	sp, #8
 80191a2:	af00      	add	r7, sp, #0
 80191a4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	4618      	mov	r0, r3
 80191ac:	f7f1 fe10 	bl	800add0 <osMutexRelease>
}
 80191b0:	bf00      	nop
 80191b2:	3708      	adds	r7, #8
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}

080191b8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b08e      	sub	sp, #56	@ 0x38
 80191bc:	af00      	add	r7, sp, #0
 80191be:	60f8      	str	r0, [r7, #12]
 80191c0:	60b9      	str	r1, [r7, #8]
 80191c2:	607a      	str	r2, [r7, #4]
 80191c4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80191c6:	f107 0314 	add.w	r3, r7, #20
 80191ca:	2224      	movs	r2, #36	@ 0x24
 80191cc:	2100      	movs	r1, #0
 80191ce:	4618      	mov	r0, r3
 80191d0:	f000 ffdc 	bl	801a18c <memset>
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	617b      	str	r3, [r7, #20]
 80191d8:	683b      	ldr	r3, [r7, #0]
 80191da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80191dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80191de:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80191e0:	f107 0314 	add.w	r3, r7, #20
 80191e4:	461a      	mov	r2, r3
 80191e6:	6879      	ldr	r1, [r7, #4]
 80191e8:	68b8      	ldr	r0, [r7, #8]
 80191ea:	f7f1 fc25 	bl	800aa38 <osThreadNew>
 80191ee:	4603      	mov	r3, r0
#endif
}
 80191f0:	4618      	mov	r0, r3
 80191f2:	3738      	adds	r7, #56	@ 0x38
 80191f4:	46bd      	mov	sp, r7
 80191f6:	bd80      	pop	{r7, pc}

080191f8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80191fc:	4b04      	ldr	r3, [pc, #16]	@ (8019210 <sys_arch_protect+0x18>)
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	f04f 31ff 	mov.w	r1, #4294967295
 8019204:	4618      	mov	r0, r3
 8019206:	f7f1 fd85 	bl	800ad14 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801920a:	2301      	movs	r3, #1
}
 801920c:	4618      	mov	r0, r3
 801920e:	bd80      	pop	{r7, pc}
 8019210:	20027618 	.word	0x20027618

08019214 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b082      	sub	sp, #8
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801921c:	4b04      	ldr	r3, [pc, #16]	@ (8019230 <sys_arch_unprotect+0x1c>)
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	4618      	mov	r0, r3
 8019222:	f7f1 fdd5 	bl	800add0 <osMutexRelease>
}
 8019226:	bf00      	nop
 8019228:	3708      	adds	r7, #8
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}
 801922e:	bf00      	nop
 8019230:	20027618 	.word	0x20027618

08019234 <i2c_testing>:
#define I2C_SENDER 		(&hi2c4) // Master
#define I2C_RECEIVER 	(&hi2c1) // Slave
#define SLAVE_ADDR      (0x3C << 1)


result_pro_t i2c_testing(test_command_t* command){
 8019234:	b580      	push	{r7, lr}
 8019236:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801923a:	af00      	add	r7, sp, #0
 801923c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019240:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019244:	6018      	str	r0, [r3, #0]
 8019246:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801924a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801924e:	6019      	str	r1, [r3, #0]


	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 8019250:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019254:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8019258:	4618      	mov	r0, r3
 801925a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801925e:	461a      	mov	r2, r3
 8019260:	2100      	movs	r1, #0
 8019262:	f000 ff93 	bl	801a18c <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 8019266:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801926a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801926e:	4618      	mov	r0, r3
 8019270:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019274:	461a      	mov	r2, r3
 8019276:	2100      	movs	r1, #0
 8019278:	f000 ff88 	bl	801a18c <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801927c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019280:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	2b00      	cmp	r3, #0
 8019288:	d118      	bne.n	80192bc <i2c_testing+0x88>
        printf("I2C_TEST: Received NULL command pointer. Skipping.\n");
 801928a:	48b9      	ldr	r0, [pc, #740]	@ (8019570 <i2c_testing+0x33c>)
 801928c:	f000 fe8e 	bl	8019fac <puts>
        response.test_result = TEST_ERR;
 8019290:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019294:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019298:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801929c:	809a      	strh	r2, [r3, #4]
        return response;
 801929e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80192a2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80192a6:	6819      	ldr	r1, [r3, #0]
 80192a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80192ac:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80192b0:	460b      	mov	r3, r1
 80192b2:	6810      	ldr	r0, [r2, #0]
 80192b4:	6018      	str	r0, [r3, #0]
 80192b6:	8892      	ldrh	r2, [r2, #4]
 80192b8:	809a      	strh	r2, [r3, #4]
 80192ba:	e1f7      	b.n	80196ac <i2c_testing+0x478>
	}

	response.test_id = command->test_id;
 80192bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80192c0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	681a      	ldr	r2, [r3, #0]
 80192c8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80192cc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80192d0:	601a      	str	r2, [r3, #0]
	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 80192d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80192d6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	1dd9      	adds	r1, r3, #7
 80192de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80192e2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	799b      	ldrb	r3, [r3, #6]
 80192ea:	461a      	mov	r2, r3
 80192ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80192f0:	4618      	mov	r0, r3
 80192f2:	f001 f81e 	bl	801a332 <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 80192f6:	2300      	movs	r3, #0
 80192f8:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 80192fc:	e1b0      	b.n	8019660 <i2c_testing+0x42c>
	    printf("I2C_TEST: Iteration %u/%u -\n", i + 1, command->iterations);
 80192fe:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019302:	1c59      	adds	r1, r3, #1
 8019304:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019308:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	795b      	ldrb	r3, [r3, #5]
 8019310:	461a      	mov	r2, r3
 8019312:	4898      	ldr	r0, [pc, #608]	@ (8019574 <i2c_testing+0x340>)
 8019314:	f000 fde2 	bl	8019edc <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 8019318:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801931c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	799b      	ldrb	r3, [r3, #6]
 8019324:	461a      	mov	r2, r3
 8019326:	f107 0310 	add.w	r3, r7, #16
 801932a:	2100      	movs	r1, #0
 801932c:	4618      	mov	r0, r3
 801932e:	f000 ff2d 	bl	801a18c <memset>

	    // --- 1. START RECEIVE DMA ---
	    HAL_StatusTypeDef rx_status = HAL_I2C_Slave_Receive_DMA(I2C_RECEIVER, rx_buffer, command->bit_pattern_length);
 8019332:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019336:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	799b      	ldrb	r3, [r3, #6]
 801933e:	461a      	mov	r2, r3
 8019340:	f107 0310 	add.w	r3, r7, #16
 8019344:	4619      	mov	r1, r3
 8019346:	488c      	ldr	r0, [pc, #560]	@ (8019578 <i2c_testing+0x344>)
 8019348:	f7eb fab6 	bl	80048b8 <HAL_I2C_Slave_Receive_DMA>
 801934c:	4603      	mov	r3, r0
 801934e:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 8019352:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8019356:	2b00      	cmp	r3, #0
 8019358:	d021      	beq.n	801939e <i2c_testing+0x16a>
	        printf("Failed to start receive DMA: %d\n", rx_status);
 801935a:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801935e:	4619      	mov	r1, r3
 8019360:	4886      	ldr	r0, [pc, #536]	@ (801957c <i2c_testing+0x348>)
 8019362:	f000 fdbb 	bl	8019edc <iprintf>
	        response.test_result = TEST_FAIL;
 8019366:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801936a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801936e:	22ff      	movs	r2, #255	@ 0xff
 8019370:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 8019372:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019376:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801937a:	6818      	ldr	r0, [r3, #0]
 801937c:	f7f5 fa82 	bl	800e884 <vPortFree>
	        return response;
 8019380:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019384:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019388:	6819      	ldr	r1, [r3, #0]
 801938a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801938e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019392:	460b      	mov	r3, r1
 8019394:	6810      	ldr	r0, [r2, #0]
 8019396:	6018      	str	r0, [r3, #0]
 8019398:	8892      	ldrh	r2, [r2, #4]
 801939a:	809a      	strh	r2, [r3, #4]
 801939c:	e186      	b.n	80196ac <i2c_testing+0x478>
	    }

	    // --- 2. TRANSMIT a block of data via DMA ---
	    HAL_StatusTypeDef tx_status = HAL_I2C_Master_Transmit_DMA(I2C_SENDER, SLAVE_ADDR, tx_buffer, command->bit_pattern_length);
 801939e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80193a2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	799b      	ldrb	r3, [r3, #6]
 80193aa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80193ae:	2178      	movs	r1, #120	@ 0x78
 80193b0:	4873      	ldr	r0, [pc, #460]	@ (8019580 <i2c_testing+0x34c>)
 80193b2:	f7eb f96d 	bl	8004690 <HAL_I2C_Master_Transmit_DMA>
 80193b6:	4603      	mov	r3, r0
 80193b8:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 80193bc:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d024      	beq.n	801940e <i2c_testing+0x1da>
	        printf("Failed to send DMA on I2C sender: %d\n", tx_status);
 80193c4:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 80193c8:	4619      	mov	r1, r3
 80193ca:	486e      	ldr	r0, [pc, #440]	@ (8019584 <i2c_testing+0x350>)
 80193cc:	f000 fd86 	bl	8019edc <iprintf>
	        response.test_result = TEST_FAIL;
 80193d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80193d4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80193d8:	22ff      	movs	r2, #255	@ 0xff
 80193da:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 80193dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80193e0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80193e4:	6818      	ldr	r0, [r3, #0]
 80193e6:	f7f5 fa4d 	bl	800e884 <vPortFree>
	        HAL_UART_DMAStop(I2C_RECEIVER); // Stop the pending receive
 80193ea:	4863      	ldr	r0, [pc, #396]	@ (8019578 <i2c_testing+0x344>)
 80193ec:	f7ee fed8 	bl	80081a0 <HAL_UART_DMAStop>
	        return response;
 80193f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80193f4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80193f8:	6819      	ldr	r1, [r3, #0]
 80193fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80193fe:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019402:	460b      	mov	r3, r1
 8019404:	6810      	ldr	r0, [r2, #0]
 8019406:	6018      	str	r0, [r3, #0]
 8019408:	8892      	ldrh	r2, [r2, #4]
 801940a:	809a      	strh	r2, [r3, #4]
 801940c:	e14e      	b.n	80196ac <i2c_testing+0x478>
	    }

	    // --- 3. WAIT FOR BOTH TX AND RX DMA COMPLETION ---
	    if (xSemaphoreTake(I2cTxHandle, TIMEOUT) != pdPASS) {
 801940e:	4b5e      	ldr	r3, [pc, #376]	@ (8019588 <i2c_testing+0x354>)
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8019416:	4618      	mov	r0, r3
 8019418:	f7f2 fe92 	bl	800c140 <xQueueSemaphoreTake>
 801941c:	4603      	mov	r3, r0
 801941e:	2b01      	cmp	r3, #1
 8019420:	d021      	beq.n	8019466 <i2c_testing+0x232>
	         printf("fail to get TxSemaphore\n");
 8019422:	485a      	ldr	r0, [pc, #360]	@ (801958c <i2c_testing+0x358>)
 8019424:	f000 fdc2 	bl	8019fac <puts>
	         response.test_result = TEST_FAIL;
 8019428:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801942c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019430:	22ff      	movs	r2, #255	@ 0xff
 8019432:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 8019434:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019438:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801943c:	6818      	ldr	r0, [r3, #0]
 801943e:	f7f5 fa21 	bl	800e884 <vPortFree>
	         HAL_UART_DMAStop(I2C_RECEIVER); // Stop the pending receive
 8019442:	484d      	ldr	r0, [pc, #308]	@ (8019578 <i2c_testing+0x344>)
 8019444:	f7ee feac 	bl	80081a0 <HAL_UART_DMAStop>
	         return response;
 8019448:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801944c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019450:	6819      	ldr	r1, [r3, #0]
 8019452:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019456:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801945a:	460b      	mov	r3, r1
 801945c:	6810      	ldr	r0, [r2, #0]
 801945e:	6018      	str	r0, [r3, #0]
 8019460:	8892      	ldrh	r2, [r2, #4]
 8019462:	809a      	strh	r2, [r3, #4]
 8019464:	e122      	b.n	80196ac <i2c_testing+0x478>
	    }

	    if (xSemaphoreTake(I2cRxHandle, TIMEOUT) != pdPASS) {
 8019466:	4b4a      	ldr	r3, [pc, #296]	@ (8019590 <i2c_testing+0x35c>)
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801946e:	4618      	mov	r0, r3
 8019470:	f7f2 fe66 	bl	800c140 <xQueueSemaphoreTake>
 8019474:	4603      	mov	r3, r0
 8019476:	2b01      	cmp	r3, #1
 8019478:	d021      	beq.n	80194be <i2c_testing+0x28a>
	         printf("fail to get RxSemaphore\n");
 801947a:	4846      	ldr	r0, [pc, #280]	@ (8019594 <i2c_testing+0x360>)
 801947c:	f000 fd96 	bl	8019fac <puts>
	        response.test_result = TEST_FAIL;
 8019480:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019484:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019488:	22ff      	movs	r2, #255	@ 0xff
 801948a:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801948c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019490:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019494:	6818      	ldr	r0, [r3, #0]
 8019496:	f7f5 f9f5 	bl	800e884 <vPortFree>
	        HAL_UART_DMAStop(I2C_RECEIVER); //Stop the stuck receive
 801949a:	4837      	ldr	r0, [pc, #220]	@ (8019578 <i2c_testing+0x344>)
 801949c:	f7ee fe80 	bl	80081a0 <HAL_UART_DMAStop>
	        return response;
 80194a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80194a4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80194a8:	6819      	ldr	r1, [r3, #0]
 80194aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80194ae:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80194b2:	460b      	mov	r3, r1
 80194b4:	6810      	ldr	r0, [r2, #0]
 80194b6:	6018      	str	r0, [r3, #0]
 80194b8:	8892      	ldrh	r2, [r2, #4]
 80194ba:	809a      	strh	r2, [r3, #4]
 80194bc:	e0f6      	b.n	80196ac <i2c_testing+0x478>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 80194be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80194c2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	799b      	ldrb	r3, [r3, #6]
 80194ca:	2b64      	cmp	r3, #100	@ 0x64
 80194cc:	d968      	bls.n	80195a0 <i2c_testing+0x36c>
			printf("bit_pattern_length more than 100\n");
 80194ce:	4832      	ldr	r0, [pc, #200]	@ (8019598 <i2c_testing+0x364>)
 80194d0:	f000 fd6c 	bl	8019fac <puts>

			// Use CRC comparison for large data
			uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 80194d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80194d8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	799b      	ldrb	r3, [r3, #6]
 80194e0:	461a      	mov	r2, r3
 80194e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80194e6:	4611      	mov	r1, r2
 80194e8:	4618      	mov	r0, r3
 80194ea:	f7e7 fcf7 	bl	8000edc <calculate_crc>
 80194ee:	4603      	mov	r3, r0
 80194f0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
			uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 80194f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80194f8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	799b      	ldrb	r3, [r3, #6]
 8019500:	461a      	mov	r2, r3
 8019502:	f107 0310 	add.w	r3, r7, #16
 8019506:	4611      	mov	r1, r2
 8019508:	4618      	mov	r0, r3
 801950a:	f7e7 fce7 	bl	8000edc <calculate_crc>
 801950e:	4603      	mov	r3, r0
 8019510:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
			if (sent_crc != received_crc) {
 8019514:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8019518:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801951c:	429a      	cmp	r2, r3
 801951e:	f000 8090 	beq.w	8019642 <i2c_testing+0x40e>
				printf("I2C_TEST: CRC mismatch on iteration %u. Sent CRC: 0x%lX, Received CRC: 0x%lX\n",
 8019522:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019526:	1c59      	adds	r1, r3, #1
 8019528:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801952c:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8019530:	481a      	ldr	r0, [pc, #104]	@ (801959c <i2c_testing+0x368>)
 8019532:	f000 fcd3 	bl	8019edc <iprintf>
					   i + 1, sent_crc, received_crc);
				response.test_result = TEST_FAIL;
 8019536:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801953a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801953e:	22ff      	movs	r2, #255	@ 0xff
 8019540:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 8019542:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019546:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801954a:	6818      	ldr	r0, [r3, #0]
 801954c:	f7f5 f99a 	bl	800e884 <vPortFree>
				return response;
 8019550:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019554:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019558:	6819      	ldr	r1, [r3, #0]
 801955a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801955e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019562:	460b      	mov	r3, r1
 8019564:	6810      	ldr	r0, [r2, #0]
 8019566:	6018      	str	r0, [r3, #0]
 8019568:	8892      	ldrh	r2, [r2, #4]
 801956a:	809a      	strh	r2, [r3, #4]
 801956c:	e09e      	b.n	80196ac <i2c_testing+0x478>
 801956e:	bf00      	nop
 8019570:	0801dbe4 	.word	0x0801dbe4
 8019574:	0801dc18 	.word	0x0801dc18
 8019578:	20000214 	.word	0x20000214
 801957c:	0801dc38 	.word	0x0801dc38
 8019580:	20000268 	.word	0x20000268
 8019584:	0801dc5c 	.word	0x0801dc5c
 8019588:	20000ad4 	.word	0x20000ad4
 801958c:	0801dc84 	.word	0x0801dc84
 8019590:	20000ad0 	.word	0x20000ad0
 8019594:	0801dc9c 	.word	0x0801dc9c
 8019598:	0801dcb4 	.word	0x0801dcb4
 801959c:	0801dcd8 	.word	0x0801dcd8
			}
	    }
	    else {
			int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 80195a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80195a4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	799b      	ldrb	r3, [r3, #6]
 80195ac:	461a      	mov	r2, r3
 80195ae:	f107 0110 	add.w	r1, r7, #16
 80195b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80195b6:	4618      	mov	r0, r3
 80195b8:	f000 fdd8 	bl	801a16c <memcmp>
 80195bc:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
			if (comp != 0) {
 80195c0:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d03c      	beq.n	8019642 <i2c_testing+0x40e>
				printf("Data mismatch on iteration %u.\n", i + 1);
 80195c8:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80195cc:	3301      	adds	r3, #1
 80195ce:	4619      	mov	r1, r3
 80195d0:	483b      	ldr	r0, [pc, #236]	@ (80196c0 <i2c_testing+0x48c>)
 80195d2:	f000 fc83 	bl	8019edc <iprintf>
				printf("Sent: %.*s\n", command->bit_pattern_length, tx_buffer);
 80195d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80195da:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	799b      	ldrb	r3, [r3, #6]
 80195e2:	4619      	mov	r1, r3
 80195e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80195e8:	461a      	mov	r2, r3
 80195ea:	4836      	ldr	r0, [pc, #216]	@ (80196c4 <i2c_testing+0x490>)
 80195ec:	f000 fc76 	bl	8019edc <iprintf>
				printf("Recv: %.*s\n", command->bit_pattern_length, rx_buffer);
 80195f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80195f4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	799b      	ldrb	r3, [r3, #6]
 80195fc:	4619      	mov	r1, r3
 80195fe:	f107 0310 	add.w	r3, r7, #16
 8019602:	461a      	mov	r2, r3
 8019604:	4830      	ldr	r0, [pc, #192]	@ (80196c8 <i2c_testing+0x494>)
 8019606:	f000 fc69 	bl	8019edc <iprintf>
				response.test_result = TEST_FAIL;
 801960a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801960e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019612:	22ff      	movs	r2, #255	@ 0xff
 8019614:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 8019616:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801961a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801961e:	6818      	ldr	r0, [r3, #0]
 8019620:	f7f5 f930 	bl	800e884 <vPortFree>
				return response;
 8019624:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019628:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801962c:	6819      	ldr	r1, [r3, #0]
 801962e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019632:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019636:	460b      	mov	r3, r1
 8019638:	6810      	ldr	r0, [r2, #0]
 801963a:	6018      	str	r0, [r3, #0]
 801963c:	8892      	ldrh	r2, [r2, #4]
 801963e:	809a      	strh	r2, [r3, #4]
 8019640:	e034      	b.n	80196ac <i2c_testing+0x478>
			}
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 8019642:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019646:	3301      	adds	r3, #1
 8019648:	4619      	mov	r1, r3
 801964a:	4820      	ldr	r0, [pc, #128]	@ (80196cc <i2c_testing+0x498>)
 801964c:	f000 fc46 	bl	8019edc <iprintf>

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 8019650:	200a      	movs	r0, #10
 8019652:	f7f1 fa97 	bl	800ab84 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 8019656:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801965a:	3301      	adds	r3, #1
 801965c:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 8019660:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019664:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	795b      	ldrb	r3, [r3, #5]
 801966c:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 8019670:	429a      	cmp	r2, r3
 8019672:	f4ff ae44 	bcc.w	80192fe <i2c_testing+0xca>
	}
    response.test_result = TEST_PASS;
 8019676:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801967a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801967e:	2201      	movs	r2, #1
 8019680:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 8019682:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019686:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801968a:	6818      	ldr	r0, [r3, #0]
 801968c:	f7f5 f8fa 	bl	800e884 <vPortFree>
    return response;
 8019690:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019694:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019698:	6819      	ldr	r1, [r3, #0]
 801969a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801969e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80196a2:	460b      	mov	r3, r1
 80196a4:	6810      	ldr	r0, [r2, #0]
 80196a6:	6018      	str	r0, [r3, #0]
 80196a8:	8892      	ldrh	r2, [r2, #4]
 80196aa:	809a      	strh	r2, [r3, #4]
}
 80196ac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80196b0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80196b4:	6818      	ldr	r0, [r3, #0]
 80196b6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80196ba:	46bd      	mov	sp, r7
 80196bc:	bd80      	pop	{r7, pc}
 80196be:	bf00      	nop
 80196c0:	0801dd28 	.word	0x0801dd28
 80196c4:	0801dd48 	.word	0x0801dd48
 80196c8:	0801dd54 	.word	0x0801dd54
 80196cc:	0801dd60 	.word	0x0801dd60

080196d0 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80196d0:	b580      	push	{r7, lr}
 80196d2:	b084      	sub	sp, #16
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80196d8:	2300      	movs	r3, #0
 80196da:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	681a      	ldr	r2, [r3, #0]
 80196e0:	4b0e      	ldr	r3, [pc, #56]	@ (801971c <HAL_I2C_MasterTxCpltCallback+0x4c>)
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	429a      	cmp	r2, r3
 80196e6:	d10a      	bne.n	80196fe <HAL_I2C_MasterTxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(I2cTxHandle, &xHigherPriorityTaskWoken);
 80196e8:	4b0d      	ldr	r3, [pc, #52]	@ (8019720 <HAL_I2C_MasterTxCpltCallback+0x50>)
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	f107 020c 	add.w	r2, r7, #12
 80196f0:	4611      	mov	r1, r2
 80196f2:	4618      	mov	r0, r3
 80196f4:	f7f2 fba3 	bl	800be3e <xQueueGiveFromISR>
        printf("TX callback fired and freed the semaphore\n");
 80196f8:	480a      	ldr	r0, [pc, #40]	@ (8019724 <HAL_I2C_MasterTxCpltCallback+0x54>)
 80196fa:	f000 fc57 	bl	8019fac <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d007      	beq.n	8019714 <HAL_I2C_MasterTxCpltCallback+0x44>
 8019704:	4b08      	ldr	r3, [pc, #32]	@ (8019728 <HAL_I2C_MasterTxCpltCallback+0x58>)
 8019706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801970a:	601a      	str	r2, [r3, #0]
 801970c:	f3bf 8f4f 	dsb	sy
 8019710:	f3bf 8f6f 	isb	sy

}
 8019714:	bf00      	nop
 8019716:	3710      	adds	r7, #16
 8019718:	46bd      	mov	sp, r7
 801971a:	bd80      	pop	{r7, pc}
 801971c:	20000268 	.word	0x20000268
 8019720:	20000ad4 	.word	0x20000ad4
 8019724:	0801dd80 	.word	0x0801dd80
 8019728:	e000ed04 	.word	0xe000ed04

0801972c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b084      	sub	sp, #16
 8019730:	af00      	add	r7, sp, #0
 8019732:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8019734:	2300      	movs	r3, #0
 8019736:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_RECEIVER->Instance) // Check the instance of your receiver UART
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	681a      	ldr	r2, [r3, #0]
 801973c:	4b0e      	ldr	r3, [pc, #56]	@ (8019778 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	429a      	cmp	r2, r3
 8019742:	d10a      	bne.n	801975a <HAL_I2C_SlaveRxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(I2cRxHandle, &xHigherPriorityTaskWoken);
 8019744:	4b0d      	ldr	r3, [pc, #52]	@ (801977c <HAL_I2C_SlaveRxCpltCallback+0x50>)
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	f107 020c 	add.w	r2, r7, #12
 801974c:	4611      	mov	r1, r2
 801974e:	4618      	mov	r0, r3
 8019750:	f7f2 fb75 	bl	800be3e <xQueueGiveFromISR>
        printf("RX callback fired and freed the semaphore\n");
 8019754:	480a      	ldr	r0, [pc, #40]	@ (8019780 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 8019756:	f000 fc29 	bl	8019fac <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d007      	beq.n	8019770 <HAL_I2C_SlaveRxCpltCallback+0x44>
 8019760:	4b08      	ldr	r3, [pc, #32]	@ (8019784 <HAL_I2C_SlaveRxCpltCallback+0x58>)
 8019762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019766:	601a      	str	r2, [r3, #0]
 8019768:	f3bf 8f4f 	dsb	sy
 801976c:	f3bf 8f6f 	isb	sy
}
 8019770:	bf00      	nop
 8019772:	3710      	adds	r7, #16
 8019774:	46bd      	mov	sp, r7
 8019776:	bd80      	pop	{r7, pc}
 8019778:	20000214 	.word	0x20000214
 801977c:	20000ad0 	.word	0x20000ad0
 8019780:	0801ddac 	.word	0x0801ddac
 8019784:	e000ed04 	.word	0xe000ed04

08019788 <uart_testing>:
#include "uarts.h"

#define UART_SENDER 		(&huart2)
#define UART_RECEIVER 		(&huart4)

result_pro_t uart_testing(test_command_t* command){
 8019788:	b580      	push	{r7, lr}
 801978a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801978e:	af00      	add	r7, sp, #0
 8019790:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019794:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019798:	6018      	str	r0, [r3, #0]
 801979a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801979e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80197a2:	6019      	str	r1, [r3, #0]


	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 80197a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80197a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80197ac:	4618      	mov	r0, r3
 80197ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80197b2:	461a      	mov	r2, r3
 80197b4:	2100      	movs	r1, #0
 80197b6:	f000 fce9 	bl	801a18c <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 80197ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80197be:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80197c2:	4618      	mov	r0, r3
 80197c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80197c8:	461a      	mov	r2, r3
 80197ca:	2100      	movs	r1, #0
 80197cc:	f000 fcde 	bl	801a18c <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 80197d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80197d4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d118      	bne.n	8019810 <uart_testing+0x88>
        printf("UART_TEST: Received NULL command pointer. Skipping.\n");
 80197de:	48b9      	ldr	r0, [pc, #740]	@ (8019ac4 <uart_testing+0x33c>)
 80197e0:	f000 fbe4 	bl	8019fac <puts>
        response.test_result = TEST_ERR;
 80197e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80197e8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80197ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80197f0:	809a      	strh	r2, [r3, #4]
        return response;
 80197f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80197f6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80197fa:	6819      	ldr	r1, [r3, #0]
 80197fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019800:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019804:	460b      	mov	r3, r1
 8019806:	6810      	ldr	r0, [r2, #0]
 8019808:	6018      	str	r0, [r3, #0]
 801980a:	8892      	ldrh	r2, [r2, #4]
 801980c:	809a      	strh	r2, [r3, #4]
 801980e:	e1f7      	b.n	8019c00 <uart_testing+0x478>
	}

	response.test_id = command->test_id;
 8019810:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019814:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	681a      	ldr	r2, [r3, #0]
 801981c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019820:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019824:	601a      	str	r2, [r3, #0]
	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 8019826:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801982a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	1dd9      	adds	r1, r3, #7
 8019832:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019836:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	799b      	ldrb	r3, [r3, #6]
 801983e:	461a      	mov	r2, r3
 8019840:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019844:	4618      	mov	r0, r3
 8019846:	f000 fd74 	bl	801a332 <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801984a:	2300      	movs	r3, #0
 801984c:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 8019850:	e1b0      	b.n	8019bb4 <uart_testing+0x42c>
	    printf("UART_TEST: Iteration %u/%u -\n", i + 1, command->iterations);
 8019852:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019856:	1c59      	adds	r1, r3, #1
 8019858:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801985c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	795b      	ldrb	r3, [r3, #5]
 8019864:	461a      	mov	r2, r3
 8019866:	4898      	ldr	r0, [pc, #608]	@ (8019ac8 <uart_testing+0x340>)
 8019868:	f000 fb38 	bl	8019edc <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801986c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019870:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	799b      	ldrb	r3, [r3, #6]
 8019878:	461a      	mov	r2, r3
 801987a:	f107 0310 	add.w	r3, r7, #16
 801987e:	2100      	movs	r1, #0
 8019880:	4618      	mov	r0, r3
 8019882:	f000 fc83 	bl	801a18c <memset>

	    // --- 1. START RECEIVE DMA ---
	    HAL_StatusTypeDef rx_status = HAL_UART_Receive_DMA(UART_RECEIVER, rx_buffer, command->bit_pattern_length);
 8019886:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801988a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	799b      	ldrb	r3, [r3, #6]
 8019892:	461a      	mov	r2, r3
 8019894:	f107 0310 	add.w	r3, r7, #16
 8019898:	4619      	mov	r1, r3
 801989a:	488c      	ldr	r0, [pc, #560]	@ (8019acc <uart_testing+0x344>)
 801989c:	f7ee fc3c 	bl	8008118 <HAL_UART_Receive_DMA>
 80198a0:	4603      	mov	r3, r0
 80198a2:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 80198a6:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d021      	beq.n	80198f2 <uart_testing+0x16a>
	        printf("Failed to start receive DMA: %d\n", rx_status);
 80198ae:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80198b2:	4619      	mov	r1, r3
 80198b4:	4886      	ldr	r0, [pc, #536]	@ (8019ad0 <uart_testing+0x348>)
 80198b6:	f000 fb11 	bl	8019edc <iprintf>
	        response.test_result = TEST_FAIL;
 80198ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80198be:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80198c2:	22ff      	movs	r2, #255	@ 0xff
 80198c4:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 80198c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80198ca:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80198ce:	6818      	ldr	r0, [r3, #0]
 80198d0:	f7f4 ffd8 	bl	800e884 <vPortFree>
	        return response;
 80198d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80198d8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80198dc:	6819      	ldr	r1, [r3, #0]
 80198de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80198e2:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80198e6:	460b      	mov	r3, r1
 80198e8:	6810      	ldr	r0, [r2, #0]
 80198ea:	6018      	str	r0, [r3, #0]
 80198ec:	8892      	ldrh	r2, [r2, #4]
 80198ee:	809a      	strh	r2, [r3, #4]
 80198f0:	e186      	b.n	8019c00 <uart_testing+0x478>
	    }

	    // --- 2. TRANSMIT a block of data via DMA ---
	    HAL_StatusTypeDef tx_status = HAL_UART_Transmit_DMA(UART_SENDER, tx_buffer, command->bit_pattern_length);
 80198f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80198f6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	799b      	ldrb	r3, [r3, #6]
 80198fe:	461a      	mov	r2, r3
 8019900:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019904:	4619      	mov	r1, r3
 8019906:	4873      	ldr	r0, [pc, #460]	@ (8019ad4 <uart_testing+0x34c>)
 8019908:	f7ee fb8a 	bl	8008020 <HAL_UART_Transmit_DMA>
 801990c:	4603      	mov	r3, r0
 801990e:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 8019912:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 8019916:	2b00      	cmp	r3, #0
 8019918:	d024      	beq.n	8019964 <uart_testing+0x1dc>
	        printf("Failed to send DMA on UART sender: %d\n", tx_status);
 801991a:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 801991e:	4619      	mov	r1, r3
 8019920:	486d      	ldr	r0, [pc, #436]	@ (8019ad8 <uart_testing+0x350>)
 8019922:	f000 fadb 	bl	8019edc <iprintf>
	        response.test_result = TEST_FAIL;
 8019926:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801992a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801992e:	22ff      	movs	r2, #255	@ 0xff
 8019930:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 8019932:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019936:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801993a:	6818      	ldr	r0, [r3, #0]
 801993c:	f7f4 ffa2 	bl	800e884 <vPortFree>
	        HAL_UART_DMAStop(UART_RECEIVER); // Stop the pending receive
 8019940:	4862      	ldr	r0, [pc, #392]	@ (8019acc <uart_testing+0x344>)
 8019942:	f7ee fc2d 	bl	80081a0 <HAL_UART_DMAStop>
	        return response;
 8019946:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801994a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801994e:	6819      	ldr	r1, [r3, #0]
 8019950:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019954:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019958:	460b      	mov	r3, r1
 801995a:	6810      	ldr	r0, [r2, #0]
 801995c:	6018      	str	r0, [r3, #0]
 801995e:	8892      	ldrh	r2, [r2, #4]
 8019960:	809a      	strh	r2, [r3, #4]
 8019962:	e14d      	b.n	8019c00 <uart_testing+0x478>
	    }

	    // --- 3. WAIT FOR BOTH TX AND RX DMA COMPLETION ---
	    if (xSemaphoreTake(UartTxHandle, TIMEOUT) != pdPASS) {
 8019964:	4b5d      	ldr	r3, [pc, #372]	@ (8019adc <uart_testing+0x354>)
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801996c:	4618      	mov	r0, r3
 801996e:	f7f2 fbe7 	bl	800c140 <xQueueSemaphoreTake>
 8019972:	4603      	mov	r3, r0
 8019974:	2b01      	cmp	r3, #1
 8019976:	d021      	beq.n	80199bc <uart_testing+0x234>
	         printf("fail to get TxSemaphore\n");
 8019978:	4859      	ldr	r0, [pc, #356]	@ (8019ae0 <uart_testing+0x358>)
 801997a:	f000 fb17 	bl	8019fac <puts>
	         response.test_result = TEST_FAIL;
 801997e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019982:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019986:	22ff      	movs	r2, #255	@ 0xff
 8019988:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 801998a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801998e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019992:	6818      	ldr	r0, [r3, #0]
 8019994:	f7f4 ff76 	bl	800e884 <vPortFree>
	         HAL_UART_DMAStop(UART_RECEIVER); // Stop the pending receive
 8019998:	484c      	ldr	r0, [pc, #304]	@ (8019acc <uart_testing+0x344>)
 801999a:	f7ee fc01 	bl	80081a0 <HAL_UART_DMAStop>
	         return response;
 801999e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80199a2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80199a6:	6819      	ldr	r1, [r3, #0]
 80199a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80199ac:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80199b0:	460b      	mov	r3, r1
 80199b2:	6810      	ldr	r0, [r2, #0]
 80199b4:	6018      	str	r0, [r3, #0]
 80199b6:	8892      	ldrh	r2, [r2, #4]
 80199b8:	809a      	strh	r2, [r3, #4]
 80199ba:	e121      	b.n	8019c00 <uart_testing+0x478>
	    }

	    if (xSemaphoreTake(UartRxHandle, TIMEOUT) != pdPASS) {
 80199bc:	4b49      	ldr	r3, [pc, #292]	@ (8019ae4 <uart_testing+0x35c>)
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80199c4:	4618      	mov	r0, r3
 80199c6:	f7f2 fbbb 	bl	800c140 <xQueueSemaphoreTake>
 80199ca:	4603      	mov	r3, r0
 80199cc:	2b01      	cmp	r3, #1
 80199ce:	d021      	beq.n	8019a14 <uart_testing+0x28c>
	         printf("fail to get RxSemaphore\n");
 80199d0:	4845      	ldr	r0, [pc, #276]	@ (8019ae8 <uart_testing+0x360>)
 80199d2:	f000 faeb 	bl	8019fac <puts>
	        response.test_result = TEST_FAIL;
 80199d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80199da:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80199de:	22ff      	movs	r2, #255	@ 0xff
 80199e0:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 80199e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80199e6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80199ea:	6818      	ldr	r0, [r3, #0]
 80199ec:	f7f4 ff4a 	bl	800e884 <vPortFree>
	        HAL_UART_DMAStop(UART_RECEIVER); //Stop the stuck receive
 80199f0:	4836      	ldr	r0, [pc, #216]	@ (8019acc <uart_testing+0x344>)
 80199f2:	f7ee fbd5 	bl	80081a0 <HAL_UART_DMAStop>
	        return response;
 80199f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80199fa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80199fe:	6819      	ldr	r1, [r3, #0]
 8019a00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a04:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019a08:	460b      	mov	r3, r1
 8019a0a:	6810      	ldr	r0, [r2, #0]
 8019a0c:	6018      	str	r0, [r3, #0]
 8019a0e:	8892      	ldrh	r2, [r2, #4]
 8019a10:	809a      	strh	r2, [r3, #4]
 8019a12:	e0f5      	b.n	8019c00 <uart_testing+0x478>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 8019a14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a18:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	799b      	ldrb	r3, [r3, #6]
 8019a20:	2b64      	cmp	r3, #100	@ 0x64
 8019a22:	d967      	bls.n	8019af4 <uart_testing+0x36c>
			printf("bit_pattern_length more than 100\n");
 8019a24:	4831      	ldr	r0, [pc, #196]	@ (8019aec <uart_testing+0x364>)
 8019a26:	f000 fac1 	bl	8019fac <puts>

			// Use CRC comparison for large data
			uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 8019a2a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a2e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	799b      	ldrb	r3, [r3, #6]
 8019a36:	461a      	mov	r2, r3
 8019a38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019a3c:	4611      	mov	r1, r2
 8019a3e:	4618      	mov	r0, r3
 8019a40:	f7e7 fa4c 	bl	8000edc <calculate_crc>
 8019a44:	4603      	mov	r3, r0
 8019a46:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
			uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 8019a4a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a4e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	799b      	ldrb	r3, [r3, #6]
 8019a56:	461a      	mov	r2, r3
 8019a58:	f107 0310 	add.w	r3, r7, #16
 8019a5c:	4611      	mov	r1, r2
 8019a5e:	4618      	mov	r0, r3
 8019a60:	f7e7 fa3c 	bl	8000edc <calculate_crc>
 8019a64:	4603      	mov	r3, r0
 8019a66:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
			if (sent_crc != received_crc) {
 8019a6a:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8019a6e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8019a72:	429a      	cmp	r2, r3
 8019a74:	f000 808f 	beq.w	8019b96 <uart_testing+0x40e>
				printf("UART_TEST: CRC mismatch on iteration %u. Sent CRC: 0x%lX, Received CRC: 0x%lX\n",
 8019a78:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019a7c:	1c59      	adds	r1, r3, #1
 8019a7e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8019a82:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8019a86:	481a      	ldr	r0, [pc, #104]	@ (8019af0 <uart_testing+0x368>)
 8019a88:	f000 fa28 	bl	8019edc <iprintf>
					   i + 1, sent_crc, received_crc);
				response.test_result = TEST_FAIL;
 8019a8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a90:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019a94:	22ff      	movs	r2, #255	@ 0xff
 8019a96:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 8019a98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a9c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019aa0:	6818      	ldr	r0, [r3, #0]
 8019aa2:	f7f4 feef 	bl	800e884 <vPortFree>
				return response;
 8019aa6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019aaa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019aae:	6819      	ldr	r1, [r3, #0]
 8019ab0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019ab4:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019ab8:	460b      	mov	r3, r1
 8019aba:	6810      	ldr	r0, [r2, #0]
 8019abc:	6018      	str	r0, [r3, #0]
 8019abe:	8892      	ldrh	r2, [r2, #4]
 8019ac0:	809a      	strh	r2, [r3, #4]
 8019ac2:	e09d      	b.n	8019c00 <uart_testing+0x478>
 8019ac4:	0801ddd8 	.word	0x0801ddd8
 8019ac8:	0801de0c 	.word	0x0801de0c
 8019acc:	2000037c 	.word	0x2000037c
 8019ad0:	0801de2c 	.word	0x0801de2c
 8019ad4:	20000404 	.word	0x20000404
 8019ad8:	0801de50 	.word	0x0801de50
 8019adc:	20000acc 	.word	0x20000acc
 8019ae0:	0801de78 	.word	0x0801de78
 8019ae4:	20000ac8 	.word	0x20000ac8
 8019ae8:	0801de90 	.word	0x0801de90
 8019aec:	0801dea8 	.word	0x0801dea8
 8019af0:	0801decc 	.word	0x0801decc
			}
	    }
	    else {
			int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 8019af4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019af8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	799b      	ldrb	r3, [r3, #6]
 8019b00:	461a      	mov	r2, r3
 8019b02:	f107 0110 	add.w	r1, r7, #16
 8019b06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	f000 fb2e 	bl	801a16c <memcmp>
 8019b10:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
			if (comp != 0) {
 8019b14:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d03c      	beq.n	8019b96 <uart_testing+0x40e>
				printf("Data mismatch on iteration %u.\n", i + 1);
 8019b1c:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019b20:	3301      	adds	r3, #1
 8019b22:	4619      	mov	r1, r3
 8019b24:	483b      	ldr	r0, [pc, #236]	@ (8019c14 <uart_testing+0x48c>)
 8019b26:	f000 f9d9 	bl	8019edc <iprintf>
				printf("Sent: %.*s\n", command->bit_pattern_length, tx_buffer);
 8019b2a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b2e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	799b      	ldrb	r3, [r3, #6]
 8019b36:	4619      	mov	r1, r3
 8019b38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019b3c:	461a      	mov	r2, r3
 8019b3e:	4836      	ldr	r0, [pc, #216]	@ (8019c18 <uart_testing+0x490>)
 8019b40:	f000 f9cc 	bl	8019edc <iprintf>
				printf("Recv: %.*s\n", command->bit_pattern_length, rx_buffer);
 8019b44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b48:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	799b      	ldrb	r3, [r3, #6]
 8019b50:	4619      	mov	r1, r3
 8019b52:	f107 0310 	add.w	r3, r7, #16
 8019b56:	461a      	mov	r2, r3
 8019b58:	4830      	ldr	r0, [pc, #192]	@ (8019c1c <uart_testing+0x494>)
 8019b5a:	f000 f9bf 	bl	8019edc <iprintf>
				response.test_result = TEST_FAIL;
 8019b5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b62:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019b66:	22ff      	movs	r2, #255	@ 0xff
 8019b68:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 8019b6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b6e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019b72:	6818      	ldr	r0, [r3, #0]
 8019b74:	f7f4 fe86 	bl	800e884 <vPortFree>
				return response;
 8019b78:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b7c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019b80:	6819      	ldr	r1, [r3, #0]
 8019b82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b86:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019b8a:	460b      	mov	r3, r1
 8019b8c:	6810      	ldr	r0, [r2, #0]
 8019b8e:	6018      	str	r0, [r3, #0]
 8019b90:	8892      	ldrh	r2, [r2, #4]
 8019b92:	809a      	strh	r2, [r3, #4]
 8019b94:	e034      	b.n	8019c00 <uart_testing+0x478>
			}
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 8019b96:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019b9a:	3301      	adds	r3, #1
 8019b9c:	4619      	mov	r1, r3
 8019b9e:	4820      	ldr	r0, [pc, #128]	@ (8019c20 <uart_testing+0x498>)
 8019ba0:	f000 f99c 	bl	8019edc <iprintf>

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 8019ba4:	200a      	movs	r0, #10
 8019ba6:	f7f0 ffed 	bl	800ab84 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 8019baa:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019bae:	3301      	adds	r3, #1
 8019bb0:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 8019bb4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019bb8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	795b      	ldrb	r3, [r3, #5]
 8019bc0:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 8019bc4:	429a      	cmp	r2, r3
 8019bc6:	f4ff ae44 	bcc.w	8019852 <uart_testing+0xca>
	}
    response.test_result = TEST_PASS;
 8019bca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019bce:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019bd2:	2201      	movs	r2, #1
 8019bd4:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 8019bd6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019bda:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019bde:	6818      	ldr	r0, [r3, #0]
 8019be0:	f7f4 fe50 	bl	800e884 <vPortFree>
    return response;
 8019be4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019be8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019bec:	6819      	ldr	r1, [r3, #0]
 8019bee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019bf2:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019bf6:	460b      	mov	r3, r1
 8019bf8:	6810      	ldr	r0, [r2, #0]
 8019bfa:	6018      	str	r0, [r3, #0]
 8019bfc:	8892      	ldrh	r2, [r2, #4]
 8019bfe:	809a      	strh	r2, [r3, #4]
}
 8019c00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019c04:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019c08:	6818      	ldr	r0, [r3, #0]
 8019c0a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	bd80      	pop	{r7, pc}
 8019c12:	bf00      	nop
 8019c14:	0801df1c 	.word	0x0801df1c
 8019c18:	0801df3c 	.word	0x0801df3c
 8019c1c:	0801df48 	.word	0x0801df48
 8019c20:	0801df54 	.word	0x0801df54

08019c24 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b084      	sub	sp, #16
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_SENDER->Instance) // Check the instance of your sender UART
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681a      	ldr	r2, [r3, #0]
 8019c34:	4b0e      	ldr	r3, [pc, #56]	@ (8019c70 <HAL_UART_TxCpltCallback+0x4c>)
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	429a      	cmp	r2, r3
 8019c3a:	d10a      	bne.n	8019c52 <HAL_UART_TxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(UartTxHandle, &xHigherPriorityTaskWoken);
 8019c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8019c74 <HAL_UART_TxCpltCallback+0x50>)
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	f107 020c 	add.w	r2, r7, #12
 8019c44:	4611      	mov	r1, r2
 8019c46:	4618      	mov	r0, r3
 8019c48:	f7f2 f8f9 	bl	800be3e <xQueueGiveFromISR>
        printf("TX callback fired and freed the semaphore\n");
 8019c4c:	480a      	ldr	r0, [pc, #40]	@ (8019c78 <HAL_UART_TxCpltCallback+0x54>)
 8019c4e:	f000 f9ad 	bl	8019fac <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d007      	beq.n	8019c68 <HAL_UART_TxCpltCallback+0x44>
 8019c58:	4b08      	ldr	r3, [pc, #32]	@ (8019c7c <HAL_UART_TxCpltCallback+0x58>)
 8019c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019c5e:	601a      	str	r2, [r3, #0]
 8019c60:	f3bf 8f4f 	dsb	sy
 8019c64:	f3bf 8f6f 	isb	sy

}
 8019c68:	bf00      	nop
 8019c6a:	3710      	adds	r7, #16
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd80      	pop	{r7, pc}
 8019c70:	20000404 	.word	0x20000404
 8019c74:	20000acc 	.word	0x20000acc
 8019c78:	0801df74 	.word	0x0801df74
 8019c7c:	e000ed04 	.word	0xe000ed04

08019c80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8019c80:	b580      	push	{r7, lr}
 8019c82:	b084      	sub	sp, #16
 8019c84:	af00      	add	r7, sp, #0
 8019c86:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8019c88:	2300      	movs	r3, #0
 8019c8a:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance) // Check the instance of your receiver UART
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	681a      	ldr	r2, [r3, #0]
 8019c90:	4b0e      	ldr	r3, [pc, #56]	@ (8019ccc <HAL_UART_RxCpltCallback+0x4c>)
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	429a      	cmp	r2, r3
 8019c96:	d10a      	bne.n	8019cae <HAL_UART_RxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(UartRxHandle, &xHigherPriorityTaskWoken);
 8019c98:	4b0d      	ldr	r3, [pc, #52]	@ (8019cd0 <HAL_UART_RxCpltCallback+0x50>)
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	f107 020c 	add.w	r2, r7, #12
 8019ca0:	4611      	mov	r1, r2
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	f7f2 f8cb 	bl	800be3e <xQueueGiveFromISR>
        printf("RX callback fired and freed the semaphore\n");
 8019ca8:	480a      	ldr	r0, [pc, #40]	@ (8019cd4 <HAL_UART_RxCpltCallback+0x54>)
 8019caa:	f000 f97f 	bl	8019fac <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d007      	beq.n	8019cc4 <HAL_UART_RxCpltCallback+0x44>
 8019cb4:	4b08      	ldr	r3, [pc, #32]	@ (8019cd8 <HAL_UART_RxCpltCallback+0x58>)
 8019cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019cba:	601a      	str	r2, [r3, #0]
 8019cbc:	f3bf 8f4f 	dsb	sy
 8019cc0:	f3bf 8f6f 	isb	sy
}
 8019cc4:	bf00      	nop
 8019cc6:	3710      	adds	r7, #16
 8019cc8:	46bd      	mov	sp, r7
 8019cca:	bd80      	pop	{r7, pc}
 8019ccc:	2000037c 	.word	0x2000037c
 8019cd0:	20000ac8 	.word	0x20000ac8
 8019cd4:	0801dfa0 	.word	0x0801dfa0
 8019cd8:	e000ed04 	.word	0xe000ed04

08019cdc <rand>:
 8019cdc:	4b16      	ldr	r3, [pc, #88]	@ (8019d38 <rand+0x5c>)
 8019cde:	b510      	push	{r4, lr}
 8019ce0:	681c      	ldr	r4, [r3, #0]
 8019ce2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019ce4:	b9b3      	cbnz	r3, 8019d14 <rand+0x38>
 8019ce6:	2018      	movs	r0, #24
 8019ce8:	f000 fb9a 	bl	801a420 <malloc>
 8019cec:	4602      	mov	r2, r0
 8019cee:	6320      	str	r0, [r4, #48]	@ 0x30
 8019cf0:	b920      	cbnz	r0, 8019cfc <rand+0x20>
 8019cf2:	4b12      	ldr	r3, [pc, #72]	@ (8019d3c <rand+0x60>)
 8019cf4:	4812      	ldr	r0, [pc, #72]	@ (8019d40 <rand+0x64>)
 8019cf6:	2152      	movs	r1, #82	@ 0x52
 8019cf8:	f000 fb2a 	bl	801a350 <__assert_func>
 8019cfc:	4911      	ldr	r1, [pc, #68]	@ (8019d44 <rand+0x68>)
 8019cfe:	4b12      	ldr	r3, [pc, #72]	@ (8019d48 <rand+0x6c>)
 8019d00:	e9c0 1300 	strd	r1, r3, [r0]
 8019d04:	4b11      	ldr	r3, [pc, #68]	@ (8019d4c <rand+0x70>)
 8019d06:	6083      	str	r3, [r0, #8]
 8019d08:	230b      	movs	r3, #11
 8019d0a:	8183      	strh	r3, [r0, #12]
 8019d0c:	2100      	movs	r1, #0
 8019d0e:	2001      	movs	r0, #1
 8019d10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019d14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019d16:	480e      	ldr	r0, [pc, #56]	@ (8019d50 <rand+0x74>)
 8019d18:	690b      	ldr	r3, [r1, #16]
 8019d1a:	694c      	ldr	r4, [r1, #20]
 8019d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8019d54 <rand+0x78>)
 8019d1e:	4358      	muls	r0, r3
 8019d20:	fb02 0004 	mla	r0, r2, r4, r0
 8019d24:	fba3 3202 	umull	r3, r2, r3, r2
 8019d28:	3301      	adds	r3, #1
 8019d2a:	eb40 0002 	adc.w	r0, r0, r2
 8019d2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019d32:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019d36:	bd10      	pop	{r4, pc}
 8019d38:	2000003c 	.word	0x2000003c
 8019d3c:	0801e202 	.word	0x0801e202
 8019d40:	0801e219 	.word	0x0801e219
 8019d44:	abcd330e 	.word	0xabcd330e
 8019d48:	e66d1234 	.word	0xe66d1234
 8019d4c:	0005deec 	.word	0x0005deec
 8019d50:	5851f42d 	.word	0x5851f42d
 8019d54:	4c957f2d 	.word	0x4c957f2d

08019d58 <std>:
 8019d58:	2300      	movs	r3, #0
 8019d5a:	b510      	push	{r4, lr}
 8019d5c:	4604      	mov	r4, r0
 8019d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8019d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019d66:	6083      	str	r3, [r0, #8]
 8019d68:	8181      	strh	r1, [r0, #12]
 8019d6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8019d6c:	81c2      	strh	r2, [r0, #14]
 8019d6e:	6183      	str	r3, [r0, #24]
 8019d70:	4619      	mov	r1, r3
 8019d72:	2208      	movs	r2, #8
 8019d74:	305c      	adds	r0, #92	@ 0x5c
 8019d76:	f000 fa09 	bl	801a18c <memset>
 8019d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8019db0 <std+0x58>)
 8019d7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8019d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8019db4 <std+0x5c>)
 8019d80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019d82:	4b0d      	ldr	r3, [pc, #52]	@ (8019db8 <std+0x60>)
 8019d84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019d86:	4b0d      	ldr	r3, [pc, #52]	@ (8019dbc <std+0x64>)
 8019d88:	6323      	str	r3, [r4, #48]	@ 0x30
 8019d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8019dc0 <std+0x68>)
 8019d8c:	6224      	str	r4, [r4, #32]
 8019d8e:	429c      	cmp	r4, r3
 8019d90:	d006      	beq.n	8019da0 <std+0x48>
 8019d92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019d96:	4294      	cmp	r4, r2
 8019d98:	d002      	beq.n	8019da0 <std+0x48>
 8019d9a:	33d0      	adds	r3, #208	@ 0xd0
 8019d9c:	429c      	cmp	r4, r3
 8019d9e:	d105      	bne.n	8019dac <std+0x54>
 8019da0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019da8:	f000 bac0 	b.w	801a32c <__retarget_lock_init_recursive>
 8019dac:	bd10      	pop	{r4, pc}
 8019dae:	bf00      	nop
 8019db0:	08019fbd 	.word	0x08019fbd
 8019db4:	08019fdf 	.word	0x08019fdf
 8019db8:	0801a017 	.word	0x0801a017
 8019dbc:	0801a03b 	.word	0x0801a03b
 8019dc0:	2002761c 	.word	0x2002761c

08019dc4 <stdio_exit_handler>:
 8019dc4:	4a02      	ldr	r2, [pc, #8]	@ (8019dd0 <stdio_exit_handler+0xc>)
 8019dc6:	4903      	ldr	r1, [pc, #12]	@ (8019dd4 <stdio_exit_handler+0x10>)
 8019dc8:	4803      	ldr	r0, [pc, #12]	@ (8019dd8 <stdio_exit_handler+0x14>)
 8019dca:	f000 b869 	b.w	8019ea0 <_fwalk_sglue>
 8019dce:	bf00      	nop
 8019dd0:	20000030 	.word	0x20000030
 8019dd4:	0801ac31 	.word	0x0801ac31
 8019dd8:	20000040 	.word	0x20000040

08019ddc <cleanup_stdio>:
 8019ddc:	6841      	ldr	r1, [r0, #4]
 8019dde:	4b0c      	ldr	r3, [pc, #48]	@ (8019e10 <cleanup_stdio+0x34>)
 8019de0:	4299      	cmp	r1, r3
 8019de2:	b510      	push	{r4, lr}
 8019de4:	4604      	mov	r4, r0
 8019de6:	d001      	beq.n	8019dec <cleanup_stdio+0x10>
 8019de8:	f000 ff22 	bl	801ac30 <_fflush_r>
 8019dec:	68a1      	ldr	r1, [r4, #8]
 8019dee:	4b09      	ldr	r3, [pc, #36]	@ (8019e14 <cleanup_stdio+0x38>)
 8019df0:	4299      	cmp	r1, r3
 8019df2:	d002      	beq.n	8019dfa <cleanup_stdio+0x1e>
 8019df4:	4620      	mov	r0, r4
 8019df6:	f000 ff1b 	bl	801ac30 <_fflush_r>
 8019dfa:	68e1      	ldr	r1, [r4, #12]
 8019dfc:	4b06      	ldr	r3, [pc, #24]	@ (8019e18 <cleanup_stdio+0x3c>)
 8019dfe:	4299      	cmp	r1, r3
 8019e00:	d004      	beq.n	8019e0c <cleanup_stdio+0x30>
 8019e02:	4620      	mov	r0, r4
 8019e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e08:	f000 bf12 	b.w	801ac30 <_fflush_r>
 8019e0c:	bd10      	pop	{r4, pc}
 8019e0e:	bf00      	nop
 8019e10:	2002761c 	.word	0x2002761c
 8019e14:	20027684 	.word	0x20027684
 8019e18:	200276ec 	.word	0x200276ec

08019e1c <global_stdio_init.part.0>:
 8019e1c:	b510      	push	{r4, lr}
 8019e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8019e4c <global_stdio_init.part.0+0x30>)
 8019e20:	4c0b      	ldr	r4, [pc, #44]	@ (8019e50 <global_stdio_init.part.0+0x34>)
 8019e22:	4a0c      	ldr	r2, [pc, #48]	@ (8019e54 <global_stdio_init.part.0+0x38>)
 8019e24:	601a      	str	r2, [r3, #0]
 8019e26:	4620      	mov	r0, r4
 8019e28:	2200      	movs	r2, #0
 8019e2a:	2104      	movs	r1, #4
 8019e2c:	f7ff ff94 	bl	8019d58 <std>
 8019e30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019e34:	2201      	movs	r2, #1
 8019e36:	2109      	movs	r1, #9
 8019e38:	f7ff ff8e 	bl	8019d58 <std>
 8019e3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019e40:	2202      	movs	r2, #2
 8019e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e46:	2112      	movs	r1, #18
 8019e48:	f7ff bf86 	b.w	8019d58 <std>
 8019e4c:	20027754 	.word	0x20027754
 8019e50:	2002761c 	.word	0x2002761c
 8019e54:	08019dc5 	.word	0x08019dc5

08019e58 <__sfp_lock_acquire>:
 8019e58:	4801      	ldr	r0, [pc, #4]	@ (8019e60 <__sfp_lock_acquire+0x8>)
 8019e5a:	f000 ba68 	b.w	801a32e <__retarget_lock_acquire_recursive>
 8019e5e:	bf00      	nop
 8019e60:	2002775d 	.word	0x2002775d

08019e64 <__sfp_lock_release>:
 8019e64:	4801      	ldr	r0, [pc, #4]	@ (8019e6c <__sfp_lock_release+0x8>)
 8019e66:	f000 ba63 	b.w	801a330 <__retarget_lock_release_recursive>
 8019e6a:	bf00      	nop
 8019e6c:	2002775d 	.word	0x2002775d

08019e70 <__sinit>:
 8019e70:	b510      	push	{r4, lr}
 8019e72:	4604      	mov	r4, r0
 8019e74:	f7ff fff0 	bl	8019e58 <__sfp_lock_acquire>
 8019e78:	6a23      	ldr	r3, [r4, #32]
 8019e7a:	b11b      	cbz	r3, 8019e84 <__sinit+0x14>
 8019e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e80:	f7ff bff0 	b.w	8019e64 <__sfp_lock_release>
 8019e84:	4b04      	ldr	r3, [pc, #16]	@ (8019e98 <__sinit+0x28>)
 8019e86:	6223      	str	r3, [r4, #32]
 8019e88:	4b04      	ldr	r3, [pc, #16]	@ (8019e9c <__sinit+0x2c>)
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d1f5      	bne.n	8019e7c <__sinit+0xc>
 8019e90:	f7ff ffc4 	bl	8019e1c <global_stdio_init.part.0>
 8019e94:	e7f2      	b.n	8019e7c <__sinit+0xc>
 8019e96:	bf00      	nop
 8019e98:	08019ddd 	.word	0x08019ddd
 8019e9c:	20027754 	.word	0x20027754

08019ea0 <_fwalk_sglue>:
 8019ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ea4:	4607      	mov	r7, r0
 8019ea6:	4688      	mov	r8, r1
 8019ea8:	4614      	mov	r4, r2
 8019eaa:	2600      	movs	r6, #0
 8019eac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019eb0:	f1b9 0901 	subs.w	r9, r9, #1
 8019eb4:	d505      	bpl.n	8019ec2 <_fwalk_sglue+0x22>
 8019eb6:	6824      	ldr	r4, [r4, #0]
 8019eb8:	2c00      	cmp	r4, #0
 8019eba:	d1f7      	bne.n	8019eac <_fwalk_sglue+0xc>
 8019ebc:	4630      	mov	r0, r6
 8019ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ec2:	89ab      	ldrh	r3, [r5, #12]
 8019ec4:	2b01      	cmp	r3, #1
 8019ec6:	d907      	bls.n	8019ed8 <_fwalk_sglue+0x38>
 8019ec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019ecc:	3301      	adds	r3, #1
 8019ece:	d003      	beq.n	8019ed8 <_fwalk_sglue+0x38>
 8019ed0:	4629      	mov	r1, r5
 8019ed2:	4638      	mov	r0, r7
 8019ed4:	47c0      	blx	r8
 8019ed6:	4306      	orrs	r6, r0
 8019ed8:	3568      	adds	r5, #104	@ 0x68
 8019eda:	e7e9      	b.n	8019eb0 <_fwalk_sglue+0x10>

08019edc <iprintf>:
 8019edc:	b40f      	push	{r0, r1, r2, r3}
 8019ede:	b507      	push	{r0, r1, r2, lr}
 8019ee0:	4906      	ldr	r1, [pc, #24]	@ (8019efc <iprintf+0x20>)
 8019ee2:	ab04      	add	r3, sp, #16
 8019ee4:	6808      	ldr	r0, [r1, #0]
 8019ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8019eea:	6881      	ldr	r1, [r0, #8]
 8019eec:	9301      	str	r3, [sp, #4]
 8019eee:	f000 fb77 	bl	801a5e0 <_vfiprintf_r>
 8019ef2:	b003      	add	sp, #12
 8019ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ef8:	b004      	add	sp, #16
 8019efa:	4770      	bx	lr
 8019efc:	2000003c 	.word	0x2000003c

08019f00 <_puts_r>:
 8019f00:	6a03      	ldr	r3, [r0, #32]
 8019f02:	b570      	push	{r4, r5, r6, lr}
 8019f04:	6884      	ldr	r4, [r0, #8]
 8019f06:	4605      	mov	r5, r0
 8019f08:	460e      	mov	r6, r1
 8019f0a:	b90b      	cbnz	r3, 8019f10 <_puts_r+0x10>
 8019f0c:	f7ff ffb0 	bl	8019e70 <__sinit>
 8019f10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019f12:	07db      	lsls	r3, r3, #31
 8019f14:	d405      	bmi.n	8019f22 <_puts_r+0x22>
 8019f16:	89a3      	ldrh	r3, [r4, #12]
 8019f18:	0598      	lsls	r0, r3, #22
 8019f1a:	d402      	bmi.n	8019f22 <_puts_r+0x22>
 8019f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019f1e:	f000 fa06 	bl	801a32e <__retarget_lock_acquire_recursive>
 8019f22:	89a3      	ldrh	r3, [r4, #12]
 8019f24:	0719      	lsls	r1, r3, #28
 8019f26:	d502      	bpl.n	8019f2e <_puts_r+0x2e>
 8019f28:	6923      	ldr	r3, [r4, #16]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d135      	bne.n	8019f9a <_puts_r+0x9a>
 8019f2e:	4621      	mov	r1, r4
 8019f30:	4628      	mov	r0, r5
 8019f32:	f000 f8c5 	bl	801a0c0 <__swsetup_r>
 8019f36:	b380      	cbz	r0, 8019f9a <_puts_r+0x9a>
 8019f38:	f04f 35ff 	mov.w	r5, #4294967295
 8019f3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019f3e:	07da      	lsls	r2, r3, #31
 8019f40:	d405      	bmi.n	8019f4e <_puts_r+0x4e>
 8019f42:	89a3      	ldrh	r3, [r4, #12]
 8019f44:	059b      	lsls	r3, r3, #22
 8019f46:	d402      	bmi.n	8019f4e <_puts_r+0x4e>
 8019f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019f4a:	f000 f9f1 	bl	801a330 <__retarget_lock_release_recursive>
 8019f4e:	4628      	mov	r0, r5
 8019f50:	bd70      	pop	{r4, r5, r6, pc}
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	da04      	bge.n	8019f60 <_puts_r+0x60>
 8019f56:	69a2      	ldr	r2, [r4, #24]
 8019f58:	429a      	cmp	r2, r3
 8019f5a:	dc17      	bgt.n	8019f8c <_puts_r+0x8c>
 8019f5c:	290a      	cmp	r1, #10
 8019f5e:	d015      	beq.n	8019f8c <_puts_r+0x8c>
 8019f60:	6823      	ldr	r3, [r4, #0]
 8019f62:	1c5a      	adds	r2, r3, #1
 8019f64:	6022      	str	r2, [r4, #0]
 8019f66:	7019      	strb	r1, [r3, #0]
 8019f68:	68a3      	ldr	r3, [r4, #8]
 8019f6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019f6e:	3b01      	subs	r3, #1
 8019f70:	60a3      	str	r3, [r4, #8]
 8019f72:	2900      	cmp	r1, #0
 8019f74:	d1ed      	bne.n	8019f52 <_puts_r+0x52>
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	da11      	bge.n	8019f9e <_puts_r+0x9e>
 8019f7a:	4622      	mov	r2, r4
 8019f7c:	210a      	movs	r1, #10
 8019f7e:	4628      	mov	r0, r5
 8019f80:	f000 f85f 	bl	801a042 <__swbuf_r>
 8019f84:	3001      	adds	r0, #1
 8019f86:	d0d7      	beq.n	8019f38 <_puts_r+0x38>
 8019f88:	250a      	movs	r5, #10
 8019f8a:	e7d7      	b.n	8019f3c <_puts_r+0x3c>
 8019f8c:	4622      	mov	r2, r4
 8019f8e:	4628      	mov	r0, r5
 8019f90:	f000 f857 	bl	801a042 <__swbuf_r>
 8019f94:	3001      	adds	r0, #1
 8019f96:	d1e7      	bne.n	8019f68 <_puts_r+0x68>
 8019f98:	e7ce      	b.n	8019f38 <_puts_r+0x38>
 8019f9a:	3e01      	subs	r6, #1
 8019f9c:	e7e4      	b.n	8019f68 <_puts_r+0x68>
 8019f9e:	6823      	ldr	r3, [r4, #0]
 8019fa0:	1c5a      	adds	r2, r3, #1
 8019fa2:	6022      	str	r2, [r4, #0]
 8019fa4:	220a      	movs	r2, #10
 8019fa6:	701a      	strb	r2, [r3, #0]
 8019fa8:	e7ee      	b.n	8019f88 <_puts_r+0x88>
	...

08019fac <puts>:
 8019fac:	4b02      	ldr	r3, [pc, #8]	@ (8019fb8 <puts+0xc>)
 8019fae:	4601      	mov	r1, r0
 8019fb0:	6818      	ldr	r0, [r3, #0]
 8019fb2:	f7ff bfa5 	b.w	8019f00 <_puts_r>
 8019fb6:	bf00      	nop
 8019fb8:	2000003c 	.word	0x2000003c

08019fbc <__sread>:
 8019fbc:	b510      	push	{r4, lr}
 8019fbe:	460c      	mov	r4, r1
 8019fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fc4:	f000 f96a 	bl	801a29c <_read_r>
 8019fc8:	2800      	cmp	r0, #0
 8019fca:	bfab      	itete	ge
 8019fcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019fce:	89a3      	ldrhlt	r3, [r4, #12]
 8019fd0:	181b      	addge	r3, r3, r0
 8019fd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019fd6:	bfac      	ite	ge
 8019fd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019fda:	81a3      	strhlt	r3, [r4, #12]
 8019fdc:	bd10      	pop	{r4, pc}

08019fde <__swrite>:
 8019fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fe2:	461f      	mov	r7, r3
 8019fe4:	898b      	ldrh	r3, [r1, #12]
 8019fe6:	05db      	lsls	r3, r3, #23
 8019fe8:	4605      	mov	r5, r0
 8019fea:	460c      	mov	r4, r1
 8019fec:	4616      	mov	r6, r2
 8019fee:	d505      	bpl.n	8019ffc <__swrite+0x1e>
 8019ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ff4:	2302      	movs	r3, #2
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	f000 f93e 	bl	801a278 <_lseek_r>
 8019ffc:	89a3      	ldrh	r3, [r4, #12]
 8019ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a002:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a006:	81a3      	strh	r3, [r4, #12]
 801a008:	4632      	mov	r2, r6
 801a00a:	463b      	mov	r3, r7
 801a00c:	4628      	mov	r0, r5
 801a00e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a012:	f000 b955 	b.w	801a2c0 <_write_r>

0801a016 <__sseek>:
 801a016:	b510      	push	{r4, lr}
 801a018:	460c      	mov	r4, r1
 801a01a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a01e:	f000 f92b 	bl	801a278 <_lseek_r>
 801a022:	1c43      	adds	r3, r0, #1
 801a024:	89a3      	ldrh	r3, [r4, #12]
 801a026:	bf15      	itete	ne
 801a028:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a02a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a02e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a032:	81a3      	strheq	r3, [r4, #12]
 801a034:	bf18      	it	ne
 801a036:	81a3      	strhne	r3, [r4, #12]
 801a038:	bd10      	pop	{r4, pc}

0801a03a <__sclose>:
 801a03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a03e:	f000 b8ad 	b.w	801a19c <_close_r>

0801a042 <__swbuf_r>:
 801a042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a044:	460e      	mov	r6, r1
 801a046:	4614      	mov	r4, r2
 801a048:	4605      	mov	r5, r0
 801a04a:	b118      	cbz	r0, 801a054 <__swbuf_r+0x12>
 801a04c:	6a03      	ldr	r3, [r0, #32]
 801a04e:	b90b      	cbnz	r3, 801a054 <__swbuf_r+0x12>
 801a050:	f7ff ff0e 	bl	8019e70 <__sinit>
 801a054:	69a3      	ldr	r3, [r4, #24]
 801a056:	60a3      	str	r3, [r4, #8]
 801a058:	89a3      	ldrh	r3, [r4, #12]
 801a05a:	071a      	lsls	r2, r3, #28
 801a05c:	d501      	bpl.n	801a062 <__swbuf_r+0x20>
 801a05e:	6923      	ldr	r3, [r4, #16]
 801a060:	b943      	cbnz	r3, 801a074 <__swbuf_r+0x32>
 801a062:	4621      	mov	r1, r4
 801a064:	4628      	mov	r0, r5
 801a066:	f000 f82b 	bl	801a0c0 <__swsetup_r>
 801a06a:	b118      	cbz	r0, 801a074 <__swbuf_r+0x32>
 801a06c:	f04f 37ff 	mov.w	r7, #4294967295
 801a070:	4638      	mov	r0, r7
 801a072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a074:	6823      	ldr	r3, [r4, #0]
 801a076:	6922      	ldr	r2, [r4, #16]
 801a078:	1a98      	subs	r0, r3, r2
 801a07a:	6963      	ldr	r3, [r4, #20]
 801a07c:	b2f6      	uxtb	r6, r6
 801a07e:	4283      	cmp	r3, r0
 801a080:	4637      	mov	r7, r6
 801a082:	dc05      	bgt.n	801a090 <__swbuf_r+0x4e>
 801a084:	4621      	mov	r1, r4
 801a086:	4628      	mov	r0, r5
 801a088:	f000 fdd2 	bl	801ac30 <_fflush_r>
 801a08c:	2800      	cmp	r0, #0
 801a08e:	d1ed      	bne.n	801a06c <__swbuf_r+0x2a>
 801a090:	68a3      	ldr	r3, [r4, #8]
 801a092:	3b01      	subs	r3, #1
 801a094:	60a3      	str	r3, [r4, #8]
 801a096:	6823      	ldr	r3, [r4, #0]
 801a098:	1c5a      	adds	r2, r3, #1
 801a09a:	6022      	str	r2, [r4, #0]
 801a09c:	701e      	strb	r6, [r3, #0]
 801a09e:	6962      	ldr	r2, [r4, #20]
 801a0a0:	1c43      	adds	r3, r0, #1
 801a0a2:	429a      	cmp	r2, r3
 801a0a4:	d004      	beq.n	801a0b0 <__swbuf_r+0x6e>
 801a0a6:	89a3      	ldrh	r3, [r4, #12]
 801a0a8:	07db      	lsls	r3, r3, #31
 801a0aa:	d5e1      	bpl.n	801a070 <__swbuf_r+0x2e>
 801a0ac:	2e0a      	cmp	r6, #10
 801a0ae:	d1df      	bne.n	801a070 <__swbuf_r+0x2e>
 801a0b0:	4621      	mov	r1, r4
 801a0b2:	4628      	mov	r0, r5
 801a0b4:	f000 fdbc 	bl	801ac30 <_fflush_r>
 801a0b8:	2800      	cmp	r0, #0
 801a0ba:	d0d9      	beq.n	801a070 <__swbuf_r+0x2e>
 801a0bc:	e7d6      	b.n	801a06c <__swbuf_r+0x2a>
	...

0801a0c0 <__swsetup_r>:
 801a0c0:	b538      	push	{r3, r4, r5, lr}
 801a0c2:	4b29      	ldr	r3, [pc, #164]	@ (801a168 <__swsetup_r+0xa8>)
 801a0c4:	4605      	mov	r5, r0
 801a0c6:	6818      	ldr	r0, [r3, #0]
 801a0c8:	460c      	mov	r4, r1
 801a0ca:	b118      	cbz	r0, 801a0d4 <__swsetup_r+0x14>
 801a0cc:	6a03      	ldr	r3, [r0, #32]
 801a0ce:	b90b      	cbnz	r3, 801a0d4 <__swsetup_r+0x14>
 801a0d0:	f7ff fece 	bl	8019e70 <__sinit>
 801a0d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0d8:	0719      	lsls	r1, r3, #28
 801a0da:	d422      	bmi.n	801a122 <__swsetup_r+0x62>
 801a0dc:	06da      	lsls	r2, r3, #27
 801a0de:	d407      	bmi.n	801a0f0 <__swsetup_r+0x30>
 801a0e0:	2209      	movs	r2, #9
 801a0e2:	602a      	str	r2, [r5, #0]
 801a0e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a0e8:	81a3      	strh	r3, [r4, #12]
 801a0ea:	f04f 30ff 	mov.w	r0, #4294967295
 801a0ee:	e033      	b.n	801a158 <__swsetup_r+0x98>
 801a0f0:	0758      	lsls	r0, r3, #29
 801a0f2:	d512      	bpl.n	801a11a <__swsetup_r+0x5a>
 801a0f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a0f6:	b141      	cbz	r1, 801a10a <__swsetup_r+0x4a>
 801a0f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a0fc:	4299      	cmp	r1, r3
 801a0fe:	d002      	beq.n	801a106 <__swsetup_r+0x46>
 801a100:	4628      	mov	r0, r5
 801a102:	f000 f943 	bl	801a38c <_free_r>
 801a106:	2300      	movs	r3, #0
 801a108:	6363      	str	r3, [r4, #52]	@ 0x34
 801a10a:	89a3      	ldrh	r3, [r4, #12]
 801a10c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a110:	81a3      	strh	r3, [r4, #12]
 801a112:	2300      	movs	r3, #0
 801a114:	6063      	str	r3, [r4, #4]
 801a116:	6923      	ldr	r3, [r4, #16]
 801a118:	6023      	str	r3, [r4, #0]
 801a11a:	89a3      	ldrh	r3, [r4, #12]
 801a11c:	f043 0308 	orr.w	r3, r3, #8
 801a120:	81a3      	strh	r3, [r4, #12]
 801a122:	6923      	ldr	r3, [r4, #16]
 801a124:	b94b      	cbnz	r3, 801a13a <__swsetup_r+0x7a>
 801a126:	89a3      	ldrh	r3, [r4, #12]
 801a128:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a12c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a130:	d003      	beq.n	801a13a <__swsetup_r+0x7a>
 801a132:	4621      	mov	r1, r4
 801a134:	4628      	mov	r0, r5
 801a136:	f000 fddb 	bl	801acf0 <__smakebuf_r>
 801a13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a13e:	f013 0201 	ands.w	r2, r3, #1
 801a142:	d00a      	beq.n	801a15a <__swsetup_r+0x9a>
 801a144:	2200      	movs	r2, #0
 801a146:	60a2      	str	r2, [r4, #8]
 801a148:	6962      	ldr	r2, [r4, #20]
 801a14a:	4252      	negs	r2, r2
 801a14c:	61a2      	str	r2, [r4, #24]
 801a14e:	6922      	ldr	r2, [r4, #16]
 801a150:	b942      	cbnz	r2, 801a164 <__swsetup_r+0xa4>
 801a152:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a156:	d1c5      	bne.n	801a0e4 <__swsetup_r+0x24>
 801a158:	bd38      	pop	{r3, r4, r5, pc}
 801a15a:	0799      	lsls	r1, r3, #30
 801a15c:	bf58      	it	pl
 801a15e:	6962      	ldrpl	r2, [r4, #20]
 801a160:	60a2      	str	r2, [r4, #8]
 801a162:	e7f4      	b.n	801a14e <__swsetup_r+0x8e>
 801a164:	2000      	movs	r0, #0
 801a166:	e7f7      	b.n	801a158 <__swsetup_r+0x98>
 801a168:	2000003c 	.word	0x2000003c

0801a16c <memcmp>:
 801a16c:	b510      	push	{r4, lr}
 801a16e:	3901      	subs	r1, #1
 801a170:	4402      	add	r2, r0
 801a172:	4290      	cmp	r0, r2
 801a174:	d101      	bne.n	801a17a <memcmp+0xe>
 801a176:	2000      	movs	r0, #0
 801a178:	e005      	b.n	801a186 <memcmp+0x1a>
 801a17a:	7803      	ldrb	r3, [r0, #0]
 801a17c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a180:	42a3      	cmp	r3, r4
 801a182:	d001      	beq.n	801a188 <memcmp+0x1c>
 801a184:	1b18      	subs	r0, r3, r4
 801a186:	bd10      	pop	{r4, pc}
 801a188:	3001      	adds	r0, #1
 801a18a:	e7f2      	b.n	801a172 <memcmp+0x6>

0801a18c <memset>:
 801a18c:	4402      	add	r2, r0
 801a18e:	4603      	mov	r3, r0
 801a190:	4293      	cmp	r3, r2
 801a192:	d100      	bne.n	801a196 <memset+0xa>
 801a194:	4770      	bx	lr
 801a196:	f803 1b01 	strb.w	r1, [r3], #1
 801a19a:	e7f9      	b.n	801a190 <memset+0x4>

0801a19c <_close_r>:
 801a19c:	b538      	push	{r3, r4, r5, lr}
 801a19e:	4d06      	ldr	r5, [pc, #24]	@ (801a1b8 <_close_r+0x1c>)
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	4604      	mov	r4, r0
 801a1a4:	4608      	mov	r0, r1
 801a1a6:	602b      	str	r3, [r5, #0]
 801a1a8:	f7e7 fc72 	bl	8001a90 <_close>
 801a1ac:	1c43      	adds	r3, r0, #1
 801a1ae:	d102      	bne.n	801a1b6 <_close_r+0x1a>
 801a1b0:	682b      	ldr	r3, [r5, #0]
 801a1b2:	b103      	cbz	r3, 801a1b6 <_close_r+0x1a>
 801a1b4:	6023      	str	r3, [r4, #0]
 801a1b6:	bd38      	pop	{r3, r4, r5, pc}
 801a1b8:	20027758 	.word	0x20027758

0801a1bc <_reclaim_reent>:
 801a1bc:	4b2d      	ldr	r3, [pc, #180]	@ (801a274 <_reclaim_reent+0xb8>)
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	4283      	cmp	r3, r0
 801a1c2:	b570      	push	{r4, r5, r6, lr}
 801a1c4:	4604      	mov	r4, r0
 801a1c6:	d053      	beq.n	801a270 <_reclaim_reent+0xb4>
 801a1c8:	69c3      	ldr	r3, [r0, #28]
 801a1ca:	b31b      	cbz	r3, 801a214 <_reclaim_reent+0x58>
 801a1cc:	68db      	ldr	r3, [r3, #12]
 801a1ce:	b163      	cbz	r3, 801a1ea <_reclaim_reent+0x2e>
 801a1d0:	2500      	movs	r5, #0
 801a1d2:	69e3      	ldr	r3, [r4, #28]
 801a1d4:	68db      	ldr	r3, [r3, #12]
 801a1d6:	5959      	ldr	r1, [r3, r5]
 801a1d8:	b9b1      	cbnz	r1, 801a208 <_reclaim_reent+0x4c>
 801a1da:	3504      	adds	r5, #4
 801a1dc:	2d80      	cmp	r5, #128	@ 0x80
 801a1de:	d1f8      	bne.n	801a1d2 <_reclaim_reent+0x16>
 801a1e0:	69e3      	ldr	r3, [r4, #28]
 801a1e2:	4620      	mov	r0, r4
 801a1e4:	68d9      	ldr	r1, [r3, #12]
 801a1e6:	f000 f8d1 	bl	801a38c <_free_r>
 801a1ea:	69e3      	ldr	r3, [r4, #28]
 801a1ec:	6819      	ldr	r1, [r3, #0]
 801a1ee:	b111      	cbz	r1, 801a1f6 <_reclaim_reent+0x3a>
 801a1f0:	4620      	mov	r0, r4
 801a1f2:	f000 f8cb 	bl	801a38c <_free_r>
 801a1f6:	69e3      	ldr	r3, [r4, #28]
 801a1f8:	689d      	ldr	r5, [r3, #8]
 801a1fa:	b15d      	cbz	r5, 801a214 <_reclaim_reent+0x58>
 801a1fc:	4629      	mov	r1, r5
 801a1fe:	4620      	mov	r0, r4
 801a200:	682d      	ldr	r5, [r5, #0]
 801a202:	f000 f8c3 	bl	801a38c <_free_r>
 801a206:	e7f8      	b.n	801a1fa <_reclaim_reent+0x3e>
 801a208:	680e      	ldr	r6, [r1, #0]
 801a20a:	4620      	mov	r0, r4
 801a20c:	f000 f8be 	bl	801a38c <_free_r>
 801a210:	4631      	mov	r1, r6
 801a212:	e7e1      	b.n	801a1d8 <_reclaim_reent+0x1c>
 801a214:	6961      	ldr	r1, [r4, #20]
 801a216:	b111      	cbz	r1, 801a21e <_reclaim_reent+0x62>
 801a218:	4620      	mov	r0, r4
 801a21a:	f000 f8b7 	bl	801a38c <_free_r>
 801a21e:	69e1      	ldr	r1, [r4, #28]
 801a220:	b111      	cbz	r1, 801a228 <_reclaim_reent+0x6c>
 801a222:	4620      	mov	r0, r4
 801a224:	f000 f8b2 	bl	801a38c <_free_r>
 801a228:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a22a:	b111      	cbz	r1, 801a232 <_reclaim_reent+0x76>
 801a22c:	4620      	mov	r0, r4
 801a22e:	f000 f8ad 	bl	801a38c <_free_r>
 801a232:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a234:	b111      	cbz	r1, 801a23c <_reclaim_reent+0x80>
 801a236:	4620      	mov	r0, r4
 801a238:	f000 f8a8 	bl	801a38c <_free_r>
 801a23c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801a23e:	b111      	cbz	r1, 801a246 <_reclaim_reent+0x8a>
 801a240:	4620      	mov	r0, r4
 801a242:	f000 f8a3 	bl	801a38c <_free_r>
 801a246:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801a248:	b111      	cbz	r1, 801a250 <_reclaim_reent+0x94>
 801a24a:	4620      	mov	r0, r4
 801a24c:	f000 f89e 	bl	801a38c <_free_r>
 801a250:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801a252:	b111      	cbz	r1, 801a25a <_reclaim_reent+0x9e>
 801a254:	4620      	mov	r0, r4
 801a256:	f000 f899 	bl	801a38c <_free_r>
 801a25a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a25c:	b111      	cbz	r1, 801a264 <_reclaim_reent+0xa8>
 801a25e:	4620      	mov	r0, r4
 801a260:	f000 f894 	bl	801a38c <_free_r>
 801a264:	6a23      	ldr	r3, [r4, #32]
 801a266:	b11b      	cbz	r3, 801a270 <_reclaim_reent+0xb4>
 801a268:	4620      	mov	r0, r4
 801a26a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a26e:	4718      	bx	r3
 801a270:	bd70      	pop	{r4, r5, r6, pc}
 801a272:	bf00      	nop
 801a274:	2000003c 	.word	0x2000003c

0801a278 <_lseek_r>:
 801a278:	b538      	push	{r3, r4, r5, lr}
 801a27a:	4d07      	ldr	r5, [pc, #28]	@ (801a298 <_lseek_r+0x20>)
 801a27c:	4604      	mov	r4, r0
 801a27e:	4608      	mov	r0, r1
 801a280:	4611      	mov	r1, r2
 801a282:	2200      	movs	r2, #0
 801a284:	602a      	str	r2, [r5, #0]
 801a286:	461a      	mov	r2, r3
 801a288:	f7e7 fc29 	bl	8001ade <_lseek>
 801a28c:	1c43      	adds	r3, r0, #1
 801a28e:	d102      	bne.n	801a296 <_lseek_r+0x1e>
 801a290:	682b      	ldr	r3, [r5, #0]
 801a292:	b103      	cbz	r3, 801a296 <_lseek_r+0x1e>
 801a294:	6023      	str	r3, [r4, #0]
 801a296:	bd38      	pop	{r3, r4, r5, pc}
 801a298:	20027758 	.word	0x20027758

0801a29c <_read_r>:
 801a29c:	b538      	push	{r3, r4, r5, lr}
 801a29e:	4d07      	ldr	r5, [pc, #28]	@ (801a2bc <_read_r+0x20>)
 801a2a0:	4604      	mov	r4, r0
 801a2a2:	4608      	mov	r0, r1
 801a2a4:	4611      	mov	r1, r2
 801a2a6:	2200      	movs	r2, #0
 801a2a8:	602a      	str	r2, [r5, #0]
 801a2aa:	461a      	mov	r2, r3
 801a2ac:	f7e7 fbb7 	bl	8001a1e <_read>
 801a2b0:	1c43      	adds	r3, r0, #1
 801a2b2:	d102      	bne.n	801a2ba <_read_r+0x1e>
 801a2b4:	682b      	ldr	r3, [r5, #0]
 801a2b6:	b103      	cbz	r3, 801a2ba <_read_r+0x1e>
 801a2b8:	6023      	str	r3, [r4, #0]
 801a2ba:	bd38      	pop	{r3, r4, r5, pc}
 801a2bc:	20027758 	.word	0x20027758

0801a2c0 <_write_r>:
 801a2c0:	b538      	push	{r3, r4, r5, lr}
 801a2c2:	4d07      	ldr	r5, [pc, #28]	@ (801a2e0 <_write_r+0x20>)
 801a2c4:	4604      	mov	r4, r0
 801a2c6:	4608      	mov	r0, r1
 801a2c8:	4611      	mov	r1, r2
 801a2ca:	2200      	movs	r2, #0
 801a2cc:	602a      	str	r2, [r5, #0]
 801a2ce:	461a      	mov	r2, r3
 801a2d0:	f7e7 fbc2 	bl	8001a58 <_write>
 801a2d4:	1c43      	adds	r3, r0, #1
 801a2d6:	d102      	bne.n	801a2de <_write_r+0x1e>
 801a2d8:	682b      	ldr	r3, [r5, #0]
 801a2da:	b103      	cbz	r3, 801a2de <_write_r+0x1e>
 801a2dc:	6023      	str	r3, [r4, #0]
 801a2de:	bd38      	pop	{r3, r4, r5, pc}
 801a2e0:	20027758 	.word	0x20027758

0801a2e4 <__libc_init_array>:
 801a2e4:	b570      	push	{r4, r5, r6, lr}
 801a2e6:	4d0d      	ldr	r5, [pc, #52]	@ (801a31c <__libc_init_array+0x38>)
 801a2e8:	4c0d      	ldr	r4, [pc, #52]	@ (801a320 <__libc_init_array+0x3c>)
 801a2ea:	1b64      	subs	r4, r4, r5
 801a2ec:	10a4      	asrs	r4, r4, #2
 801a2ee:	2600      	movs	r6, #0
 801a2f0:	42a6      	cmp	r6, r4
 801a2f2:	d109      	bne.n	801a308 <__libc_init_array+0x24>
 801a2f4:	4d0b      	ldr	r5, [pc, #44]	@ (801a324 <__libc_init_array+0x40>)
 801a2f6:	4c0c      	ldr	r4, [pc, #48]	@ (801a328 <__libc_init_array+0x44>)
 801a2f8:	f000 fdb4 	bl	801ae64 <_init>
 801a2fc:	1b64      	subs	r4, r4, r5
 801a2fe:	10a4      	asrs	r4, r4, #2
 801a300:	2600      	movs	r6, #0
 801a302:	42a6      	cmp	r6, r4
 801a304:	d105      	bne.n	801a312 <__libc_init_array+0x2e>
 801a306:	bd70      	pop	{r4, r5, r6, pc}
 801a308:	f855 3b04 	ldr.w	r3, [r5], #4
 801a30c:	4798      	blx	r3
 801a30e:	3601      	adds	r6, #1
 801a310:	e7ee      	b.n	801a2f0 <__libc_init_array+0xc>
 801a312:	f855 3b04 	ldr.w	r3, [r5], #4
 801a316:	4798      	blx	r3
 801a318:	3601      	adds	r6, #1
 801a31a:	e7f2      	b.n	801a302 <__libc_init_array+0x1e>
 801a31c:	0801e2e8 	.word	0x0801e2e8
 801a320:	0801e2e8 	.word	0x0801e2e8
 801a324:	0801e2e8 	.word	0x0801e2e8
 801a328:	0801e2ec 	.word	0x0801e2ec

0801a32c <__retarget_lock_init_recursive>:
 801a32c:	4770      	bx	lr

0801a32e <__retarget_lock_acquire_recursive>:
 801a32e:	4770      	bx	lr

0801a330 <__retarget_lock_release_recursive>:
 801a330:	4770      	bx	lr

0801a332 <memcpy>:
 801a332:	440a      	add	r2, r1
 801a334:	4291      	cmp	r1, r2
 801a336:	f100 33ff 	add.w	r3, r0, #4294967295
 801a33a:	d100      	bne.n	801a33e <memcpy+0xc>
 801a33c:	4770      	bx	lr
 801a33e:	b510      	push	{r4, lr}
 801a340:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a344:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a348:	4291      	cmp	r1, r2
 801a34a:	d1f9      	bne.n	801a340 <memcpy+0xe>
 801a34c:	bd10      	pop	{r4, pc}
	...

0801a350 <__assert_func>:
 801a350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a352:	4614      	mov	r4, r2
 801a354:	461a      	mov	r2, r3
 801a356:	4b09      	ldr	r3, [pc, #36]	@ (801a37c <__assert_func+0x2c>)
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	4605      	mov	r5, r0
 801a35c:	68d8      	ldr	r0, [r3, #12]
 801a35e:	b14c      	cbz	r4, 801a374 <__assert_func+0x24>
 801a360:	4b07      	ldr	r3, [pc, #28]	@ (801a380 <__assert_func+0x30>)
 801a362:	9100      	str	r1, [sp, #0]
 801a364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a368:	4906      	ldr	r1, [pc, #24]	@ (801a384 <__assert_func+0x34>)
 801a36a:	462b      	mov	r3, r5
 801a36c:	f000 fc88 	bl	801ac80 <fiprintf>
 801a370:	f000 fd2c 	bl	801adcc <abort>
 801a374:	4b04      	ldr	r3, [pc, #16]	@ (801a388 <__assert_func+0x38>)
 801a376:	461c      	mov	r4, r3
 801a378:	e7f3      	b.n	801a362 <__assert_func+0x12>
 801a37a:	bf00      	nop
 801a37c:	2000003c 	.word	0x2000003c
 801a380:	0801e271 	.word	0x0801e271
 801a384:	0801e27e 	.word	0x0801e27e
 801a388:	0801e2ac 	.word	0x0801e2ac

0801a38c <_free_r>:
 801a38c:	b538      	push	{r3, r4, r5, lr}
 801a38e:	4605      	mov	r5, r0
 801a390:	2900      	cmp	r1, #0
 801a392:	d041      	beq.n	801a418 <_free_r+0x8c>
 801a394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a398:	1f0c      	subs	r4, r1, #4
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	bfb8      	it	lt
 801a39e:	18e4      	addlt	r4, r4, r3
 801a3a0:	f000 f8e8 	bl	801a574 <__malloc_lock>
 801a3a4:	4a1d      	ldr	r2, [pc, #116]	@ (801a41c <_free_r+0x90>)
 801a3a6:	6813      	ldr	r3, [r2, #0]
 801a3a8:	b933      	cbnz	r3, 801a3b8 <_free_r+0x2c>
 801a3aa:	6063      	str	r3, [r4, #4]
 801a3ac:	6014      	str	r4, [r2, #0]
 801a3ae:	4628      	mov	r0, r5
 801a3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a3b4:	f000 b8e4 	b.w	801a580 <__malloc_unlock>
 801a3b8:	42a3      	cmp	r3, r4
 801a3ba:	d908      	bls.n	801a3ce <_free_r+0x42>
 801a3bc:	6820      	ldr	r0, [r4, #0]
 801a3be:	1821      	adds	r1, r4, r0
 801a3c0:	428b      	cmp	r3, r1
 801a3c2:	bf01      	itttt	eq
 801a3c4:	6819      	ldreq	r1, [r3, #0]
 801a3c6:	685b      	ldreq	r3, [r3, #4]
 801a3c8:	1809      	addeq	r1, r1, r0
 801a3ca:	6021      	streq	r1, [r4, #0]
 801a3cc:	e7ed      	b.n	801a3aa <_free_r+0x1e>
 801a3ce:	461a      	mov	r2, r3
 801a3d0:	685b      	ldr	r3, [r3, #4]
 801a3d2:	b10b      	cbz	r3, 801a3d8 <_free_r+0x4c>
 801a3d4:	42a3      	cmp	r3, r4
 801a3d6:	d9fa      	bls.n	801a3ce <_free_r+0x42>
 801a3d8:	6811      	ldr	r1, [r2, #0]
 801a3da:	1850      	adds	r0, r2, r1
 801a3dc:	42a0      	cmp	r0, r4
 801a3de:	d10b      	bne.n	801a3f8 <_free_r+0x6c>
 801a3e0:	6820      	ldr	r0, [r4, #0]
 801a3e2:	4401      	add	r1, r0
 801a3e4:	1850      	adds	r0, r2, r1
 801a3e6:	4283      	cmp	r3, r0
 801a3e8:	6011      	str	r1, [r2, #0]
 801a3ea:	d1e0      	bne.n	801a3ae <_free_r+0x22>
 801a3ec:	6818      	ldr	r0, [r3, #0]
 801a3ee:	685b      	ldr	r3, [r3, #4]
 801a3f0:	6053      	str	r3, [r2, #4]
 801a3f2:	4408      	add	r0, r1
 801a3f4:	6010      	str	r0, [r2, #0]
 801a3f6:	e7da      	b.n	801a3ae <_free_r+0x22>
 801a3f8:	d902      	bls.n	801a400 <_free_r+0x74>
 801a3fa:	230c      	movs	r3, #12
 801a3fc:	602b      	str	r3, [r5, #0]
 801a3fe:	e7d6      	b.n	801a3ae <_free_r+0x22>
 801a400:	6820      	ldr	r0, [r4, #0]
 801a402:	1821      	adds	r1, r4, r0
 801a404:	428b      	cmp	r3, r1
 801a406:	bf04      	itt	eq
 801a408:	6819      	ldreq	r1, [r3, #0]
 801a40a:	685b      	ldreq	r3, [r3, #4]
 801a40c:	6063      	str	r3, [r4, #4]
 801a40e:	bf04      	itt	eq
 801a410:	1809      	addeq	r1, r1, r0
 801a412:	6021      	streq	r1, [r4, #0]
 801a414:	6054      	str	r4, [r2, #4]
 801a416:	e7ca      	b.n	801a3ae <_free_r+0x22>
 801a418:	bd38      	pop	{r3, r4, r5, pc}
 801a41a:	bf00      	nop
 801a41c:	20027764 	.word	0x20027764

0801a420 <malloc>:
 801a420:	4b02      	ldr	r3, [pc, #8]	@ (801a42c <malloc+0xc>)
 801a422:	4601      	mov	r1, r0
 801a424:	6818      	ldr	r0, [r3, #0]
 801a426:	f000 b825 	b.w	801a474 <_malloc_r>
 801a42a:	bf00      	nop
 801a42c:	2000003c 	.word	0x2000003c

0801a430 <sbrk_aligned>:
 801a430:	b570      	push	{r4, r5, r6, lr}
 801a432:	4e0f      	ldr	r6, [pc, #60]	@ (801a470 <sbrk_aligned+0x40>)
 801a434:	460c      	mov	r4, r1
 801a436:	6831      	ldr	r1, [r6, #0]
 801a438:	4605      	mov	r5, r0
 801a43a:	b911      	cbnz	r1, 801a442 <sbrk_aligned+0x12>
 801a43c:	f000 fcb6 	bl	801adac <_sbrk_r>
 801a440:	6030      	str	r0, [r6, #0]
 801a442:	4621      	mov	r1, r4
 801a444:	4628      	mov	r0, r5
 801a446:	f000 fcb1 	bl	801adac <_sbrk_r>
 801a44a:	1c43      	adds	r3, r0, #1
 801a44c:	d103      	bne.n	801a456 <sbrk_aligned+0x26>
 801a44e:	f04f 34ff 	mov.w	r4, #4294967295
 801a452:	4620      	mov	r0, r4
 801a454:	bd70      	pop	{r4, r5, r6, pc}
 801a456:	1cc4      	adds	r4, r0, #3
 801a458:	f024 0403 	bic.w	r4, r4, #3
 801a45c:	42a0      	cmp	r0, r4
 801a45e:	d0f8      	beq.n	801a452 <sbrk_aligned+0x22>
 801a460:	1a21      	subs	r1, r4, r0
 801a462:	4628      	mov	r0, r5
 801a464:	f000 fca2 	bl	801adac <_sbrk_r>
 801a468:	3001      	adds	r0, #1
 801a46a:	d1f2      	bne.n	801a452 <sbrk_aligned+0x22>
 801a46c:	e7ef      	b.n	801a44e <sbrk_aligned+0x1e>
 801a46e:	bf00      	nop
 801a470:	20027760 	.word	0x20027760

0801a474 <_malloc_r>:
 801a474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a478:	1ccd      	adds	r5, r1, #3
 801a47a:	f025 0503 	bic.w	r5, r5, #3
 801a47e:	3508      	adds	r5, #8
 801a480:	2d0c      	cmp	r5, #12
 801a482:	bf38      	it	cc
 801a484:	250c      	movcc	r5, #12
 801a486:	2d00      	cmp	r5, #0
 801a488:	4606      	mov	r6, r0
 801a48a:	db01      	blt.n	801a490 <_malloc_r+0x1c>
 801a48c:	42a9      	cmp	r1, r5
 801a48e:	d904      	bls.n	801a49a <_malloc_r+0x26>
 801a490:	230c      	movs	r3, #12
 801a492:	6033      	str	r3, [r6, #0]
 801a494:	2000      	movs	r0, #0
 801a496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a49a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a570 <_malloc_r+0xfc>
 801a49e:	f000 f869 	bl	801a574 <__malloc_lock>
 801a4a2:	f8d8 3000 	ldr.w	r3, [r8]
 801a4a6:	461c      	mov	r4, r3
 801a4a8:	bb44      	cbnz	r4, 801a4fc <_malloc_r+0x88>
 801a4aa:	4629      	mov	r1, r5
 801a4ac:	4630      	mov	r0, r6
 801a4ae:	f7ff ffbf 	bl	801a430 <sbrk_aligned>
 801a4b2:	1c43      	adds	r3, r0, #1
 801a4b4:	4604      	mov	r4, r0
 801a4b6:	d158      	bne.n	801a56a <_malloc_r+0xf6>
 801a4b8:	f8d8 4000 	ldr.w	r4, [r8]
 801a4bc:	4627      	mov	r7, r4
 801a4be:	2f00      	cmp	r7, #0
 801a4c0:	d143      	bne.n	801a54a <_malloc_r+0xd6>
 801a4c2:	2c00      	cmp	r4, #0
 801a4c4:	d04b      	beq.n	801a55e <_malloc_r+0xea>
 801a4c6:	6823      	ldr	r3, [r4, #0]
 801a4c8:	4639      	mov	r1, r7
 801a4ca:	4630      	mov	r0, r6
 801a4cc:	eb04 0903 	add.w	r9, r4, r3
 801a4d0:	f000 fc6c 	bl	801adac <_sbrk_r>
 801a4d4:	4581      	cmp	r9, r0
 801a4d6:	d142      	bne.n	801a55e <_malloc_r+0xea>
 801a4d8:	6821      	ldr	r1, [r4, #0]
 801a4da:	1a6d      	subs	r5, r5, r1
 801a4dc:	4629      	mov	r1, r5
 801a4de:	4630      	mov	r0, r6
 801a4e0:	f7ff ffa6 	bl	801a430 <sbrk_aligned>
 801a4e4:	3001      	adds	r0, #1
 801a4e6:	d03a      	beq.n	801a55e <_malloc_r+0xea>
 801a4e8:	6823      	ldr	r3, [r4, #0]
 801a4ea:	442b      	add	r3, r5
 801a4ec:	6023      	str	r3, [r4, #0]
 801a4ee:	f8d8 3000 	ldr.w	r3, [r8]
 801a4f2:	685a      	ldr	r2, [r3, #4]
 801a4f4:	bb62      	cbnz	r2, 801a550 <_malloc_r+0xdc>
 801a4f6:	f8c8 7000 	str.w	r7, [r8]
 801a4fa:	e00f      	b.n	801a51c <_malloc_r+0xa8>
 801a4fc:	6822      	ldr	r2, [r4, #0]
 801a4fe:	1b52      	subs	r2, r2, r5
 801a500:	d420      	bmi.n	801a544 <_malloc_r+0xd0>
 801a502:	2a0b      	cmp	r2, #11
 801a504:	d917      	bls.n	801a536 <_malloc_r+0xc2>
 801a506:	1961      	adds	r1, r4, r5
 801a508:	42a3      	cmp	r3, r4
 801a50a:	6025      	str	r5, [r4, #0]
 801a50c:	bf18      	it	ne
 801a50e:	6059      	strne	r1, [r3, #4]
 801a510:	6863      	ldr	r3, [r4, #4]
 801a512:	bf08      	it	eq
 801a514:	f8c8 1000 	streq.w	r1, [r8]
 801a518:	5162      	str	r2, [r4, r5]
 801a51a:	604b      	str	r3, [r1, #4]
 801a51c:	4630      	mov	r0, r6
 801a51e:	f000 f82f 	bl	801a580 <__malloc_unlock>
 801a522:	f104 000b 	add.w	r0, r4, #11
 801a526:	1d23      	adds	r3, r4, #4
 801a528:	f020 0007 	bic.w	r0, r0, #7
 801a52c:	1ac2      	subs	r2, r0, r3
 801a52e:	bf1c      	itt	ne
 801a530:	1a1b      	subne	r3, r3, r0
 801a532:	50a3      	strne	r3, [r4, r2]
 801a534:	e7af      	b.n	801a496 <_malloc_r+0x22>
 801a536:	6862      	ldr	r2, [r4, #4]
 801a538:	42a3      	cmp	r3, r4
 801a53a:	bf0c      	ite	eq
 801a53c:	f8c8 2000 	streq.w	r2, [r8]
 801a540:	605a      	strne	r2, [r3, #4]
 801a542:	e7eb      	b.n	801a51c <_malloc_r+0xa8>
 801a544:	4623      	mov	r3, r4
 801a546:	6864      	ldr	r4, [r4, #4]
 801a548:	e7ae      	b.n	801a4a8 <_malloc_r+0x34>
 801a54a:	463c      	mov	r4, r7
 801a54c:	687f      	ldr	r7, [r7, #4]
 801a54e:	e7b6      	b.n	801a4be <_malloc_r+0x4a>
 801a550:	461a      	mov	r2, r3
 801a552:	685b      	ldr	r3, [r3, #4]
 801a554:	42a3      	cmp	r3, r4
 801a556:	d1fb      	bne.n	801a550 <_malloc_r+0xdc>
 801a558:	2300      	movs	r3, #0
 801a55a:	6053      	str	r3, [r2, #4]
 801a55c:	e7de      	b.n	801a51c <_malloc_r+0xa8>
 801a55e:	230c      	movs	r3, #12
 801a560:	6033      	str	r3, [r6, #0]
 801a562:	4630      	mov	r0, r6
 801a564:	f000 f80c 	bl	801a580 <__malloc_unlock>
 801a568:	e794      	b.n	801a494 <_malloc_r+0x20>
 801a56a:	6005      	str	r5, [r0, #0]
 801a56c:	e7d6      	b.n	801a51c <_malloc_r+0xa8>
 801a56e:	bf00      	nop
 801a570:	20027764 	.word	0x20027764

0801a574 <__malloc_lock>:
 801a574:	4801      	ldr	r0, [pc, #4]	@ (801a57c <__malloc_lock+0x8>)
 801a576:	f7ff beda 	b.w	801a32e <__retarget_lock_acquire_recursive>
 801a57a:	bf00      	nop
 801a57c:	2002775c 	.word	0x2002775c

0801a580 <__malloc_unlock>:
 801a580:	4801      	ldr	r0, [pc, #4]	@ (801a588 <__malloc_unlock+0x8>)
 801a582:	f7ff bed5 	b.w	801a330 <__retarget_lock_release_recursive>
 801a586:	bf00      	nop
 801a588:	2002775c 	.word	0x2002775c

0801a58c <__sfputc_r>:
 801a58c:	6893      	ldr	r3, [r2, #8]
 801a58e:	3b01      	subs	r3, #1
 801a590:	2b00      	cmp	r3, #0
 801a592:	b410      	push	{r4}
 801a594:	6093      	str	r3, [r2, #8]
 801a596:	da08      	bge.n	801a5aa <__sfputc_r+0x1e>
 801a598:	6994      	ldr	r4, [r2, #24]
 801a59a:	42a3      	cmp	r3, r4
 801a59c:	db01      	blt.n	801a5a2 <__sfputc_r+0x16>
 801a59e:	290a      	cmp	r1, #10
 801a5a0:	d103      	bne.n	801a5aa <__sfputc_r+0x1e>
 801a5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5a6:	f7ff bd4c 	b.w	801a042 <__swbuf_r>
 801a5aa:	6813      	ldr	r3, [r2, #0]
 801a5ac:	1c58      	adds	r0, r3, #1
 801a5ae:	6010      	str	r0, [r2, #0]
 801a5b0:	7019      	strb	r1, [r3, #0]
 801a5b2:	4608      	mov	r0, r1
 801a5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5b8:	4770      	bx	lr

0801a5ba <__sfputs_r>:
 801a5ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5bc:	4606      	mov	r6, r0
 801a5be:	460f      	mov	r7, r1
 801a5c0:	4614      	mov	r4, r2
 801a5c2:	18d5      	adds	r5, r2, r3
 801a5c4:	42ac      	cmp	r4, r5
 801a5c6:	d101      	bne.n	801a5cc <__sfputs_r+0x12>
 801a5c8:	2000      	movs	r0, #0
 801a5ca:	e007      	b.n	801a5dc <__sfputs_r+0x22>
 801a5cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5d0:	463a      	mov	r2, r7
 801a5d2:	4630      	mov	r0, r6
 801a5d4:	f7ff ffda 	bl	801a58c <__sfputc_r>
 801a5d8:	1c43      	adds	r3, r0, #1
 801a5da:	d1f3      	bne.n	801a5c4 <__sfputs_r+0xa>
 801a5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a5e0 <_vfiprintf_r>:
 801a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5e4:	460d      	mov	r5, r1
 801a5e6:	b09d      	sub	sp, #116	@ 0x74
 801a5e8:	4614      	mov	r4, r2
 801a5ea:	4698      	mov	r8, r3
 801a5ec:	4606      	mov	r6, r0
 801a5ee:	b118      	cbz	r0, 801a5f8 <_vfiprintf_r+0x18>
 801a5f0:	6a03      	ldr	r3, [r0, #32]
 801a5f2:	b90b      	cbnz	r3, 801a5f8 <_vfiprintf_r+0x18>
 801a5f4:	f7ff fc3c 	bl	8019e70 <__sinit>
 801a5f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a5fa:	07d9      	lsls	r1, r3, #31
 801a5fc:	d405      	bmi.n	801a60a <_vfiprintf_r+0x2a>
 801a5fe:	89ab      	ldrh	r3, [r5, #12]
 801a600:	059a      	lsls	r2, r3, #22
 801a602:	d402      	bmi.n	801a60a <_vfiprintf_r+0x2a>
 801a604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a606:	f7ff fe92 	bl	801a32e <__retarget_lock_acquire_recursive>
 801a60a:	89ab      	ldrh	r3, [r5, #12]
 801a60c:	071b      	lsls	r3, r3, #28
 801a60e:	d501      	bpl.n	801a614 <_vfiprintf_r+0x34>
 801a610:	692b      	ldr	r3, [r5, #16]
 801a612:	b99b      	cbnz	r3, 801a63c <_vfiprintf_r+0x5c>
 801a614:	4629      	mov	r1, r5
 801a616:	4630      	mov	r0, r6
 801a618:	f7ff fd52 	bl	801a0c0 <__swsetup_r>
 801a61c:	b170      	cbz	r0, 801a63c <_vfiprintf_r+0x5c>
 801a61e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a620:	07dc      	lsls	r4, r3, #31
 801a622:	d504      	bpl.n	801a62e <_vfiprintf_r+0x4e>
 801a624:	f04f 30ff 	mov.w	r0, #4294967295
 801a628:	b01d      	add	sp, #116	@ 0x74
 801a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a62e:	89ab      	ldrh	r3, [r5, #12]
 801a630:	0598      	lsls	r0, r3, #22
 801a632:	d4f7      	bmi.n	801a624 <_vfiprintf_r+0x44>
 801a634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a636:	f7ff fe7b 	bl	801a330 <__retarget_lock_release_recursive>
 801a63a:	e7f3      	b.n	801a624 <_vfiprintf_r+0x44>
 801a63c:	2300      	movs	r3, #0
 801a63e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a640:	2320      	movs	r3, #32
 801a642:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a646:	f8cd 800c 	str.w	r8, [sp, #12]
 801a64a:	2330      	movs	r3, #48	@ 0x30
 801a64c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a7fc <_vfiprintf_r+0x21c>
 801a650:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a654:	f04f 0901 	mov.w	r9, #1
 801a658:	4623      	mov	r3, r4
 801a65a:	469a      	mov	sl, r3
 801a65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a660:	b10a      	cbz	r2, 801a666 <_vfiprintf_r+0x86>
 801a662:	2a25      	cmp	r2, #37	@ 0x25
 801a664:	d1f9      	bne.n	801a65a <_vfiprintf_r+0x7a>
 801a666:	ebba 0b04 	subs.w	fp, sl, r4
 801a66a:	d00b      	beq.n	801a684 <_vfiprintf_r+0xa4>
 801a66c:	465b      	mov	r3, fp
 801a66e:	4622      	mov	r2, r4
 801a670:	4629      	mov	r1, r5
 801a672:	4630      	mov	r0, r6
 801a674:	f7ff ffa1 	bl	801a5ba <__sfputs_r>
 801a678:	3001      	adds	r0, #1
 801a67a:	f000 80a7 	beq.w	801a7cc <_vfiprintf_r+0x1ec>
 801a67e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a680:	445a      	add	r2, fp
 801a682:	9209      	str	r2, [sp, #36]	@ 0x24
 801a684:	f89a 3000 	ldrb.w	r3, [sl]
 801a688:	2b00      	cmp	r3, #0
 801a68a:	f000 809f 	beq.w	801a7cc <_vfiprintf_r+0x1ec>
 801a68e:	2300      	movs	r3, #0
 801a690:	f04f 32ff 	mov.w	r2, #4294967295
 801a694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a698:	f10a 0a01 	add.w	sl, sl, #1
 801a69c:	9304      	str	r3, [sp, #16]
 801a69e:	9307      	str	r3, [sp, #28]
 801a6a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a6a4:	931a      	str	r3, [sp, #104]	@ 0x68
 801a6a6:	4654      	mov	r4, sl
 801a6a8:	2205      	movs	r2, #5
 801a6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a6ae:	4853      	ldr	r0, [pc, #332]	@ (801a7fc <_vfiprintf_r+0x21c>)
 801a6b0:	f7e5 fdae 	bl	8000210 <memchr>
 801a6b4:	9a04      	ldr	r2, [sp, #16]
 801a6b6:	b9d8      	cbnz	r0, 801a6f0 <_vfiprintf_r+0x110>
 801a6b8:	06d1      	lsls	r1, r2, #27
 801a6ba:	bf44      	itt	mi
 801a6bc:	2320      	movmi	r3, #32
 801a6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a6c2:	0713      	lsls	r3, r2, #28
 801a6c4:	bf44      	itt	mi
 801a6c6:	232b      	movmi	r3, #43	@ 0x2b
 801a6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a6cc:	f89a 3000 	ldrb.w	r3, [sl]
 801a6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 801a6d2:	d015      	beq.n	801a700 <_vfiprintf_r+0x120>
 801a6d4:	9a07      	ldr	r2, [sp, #28]
 801a6d6:	4654      	mov	r4, sl
 801a6d8:	2000      	movs	r0, #0
 801a6da:	f04f 0c0a 	mov.w	ip, #10
 801a6de:	4621      	mov	r1, r4
 801a6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a6e4:	3b30      	subs	r3, #48	@ 0x30
 801a6e6:	2b09      	cmp	r3, #9
 801a6e8:	d94b      	bls.n	801a782 <_vfiprintf_r+0x1a2>
 801a6ea:	b1b0      	cbz	r0, 801a71a <_vfiprintf_r+0x13a>
 801a6ec:	9207      	str	r2, [sp, #28]
 801a6ee:	e014      	b.n	801a71a <_vfiprintf_r+0x13a>
 801a6f0:	eba0 0308 	sub.w	r3, r0, r8
 801a6f4:	fa09 f303 	lsl.w	r3, r9, r3
 801a6f8:	4313      	orrs	r3, r2
 801a6fa:	9304      	str	r3, [sp, #16]
 801a6fc:	46a2      	mov	sl, r4
 801a6fe:	e7d2      	b.n	801a6a6 <_vfiprintf_r+0xc6>
 801a700:	9b03      	ldr	r3, [sp, #12]
 801a702:	1d19      	adds	r1, r3, #4
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	9103      	str	r1, [sp, #12]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	bfbb      	ittet	lt
 801a70c:	425b      	neglt	r3, r3
 801a70e:	f042 0202 	orrlt.w	r2, r2, #2
 801a712:	9307      	strge	r3, [sp, #28]
 801a714:	9307      	strlt	r3, [sp, #28]
 801a716:	bfb8      	it	lt
 801a718:	9204      	strlt	r2, [sp, #16]
 801a71a:	7823      	ldrb	r3, [r4, #0]
 801a71c:	2b2e      	cmp	r3, #46	@ 0x2e
 801a71e:	d10a      	bne.n	801a736 <_vfiprintf_r+0x156>
 801a720:	7863      	ldrb	r3, [r4, #1]
 801a722:	2b2a      	cmp	r3, #42	@ 0x2a
 801a724:	d132      	bne.n	801a78c <_vfiprintf_r+0x1ac>
 801a726:	9b03      	ldr	r3, [sp, #12]
 801a728:	1d1a      	adds	r2, r3, #4
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	9203      	str	r2, [sp, #12]
 801a72e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a732:	3402      	adds	r4, #2
 801a734:	9305      	str	r3, [sp, #20]
 801a736:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a80c <_vfiprintf_r+0x22c>
 801a73a:	7821      	ldrb	r1, [r4, #0]
 801a73c:	2203      	movs	r2, #3
 801a73e:	4650      	mov	r0, sl
 801a740:	f7e5 fd66 	bl	8000210 <memchr>
 801a744:	b138      	cbz	r0, 801a756 <_vfiprintf_r+0x176>
 801a746:	9b04      	ldr	r3, [sp, #16]
 801a748:	eba0 000a 	sub.w	r0, r0, sl
 801a74c:	2240      	movs	r2, #64	@ 0x40
 801a74e:	4082      	lsls	r2, r0
 801a750:	4313      	orrs	r3, r2
 801a752:	3401      	adds	r4, #1
 801a754:	9304      	str	r3, [sp, #16]
 801a756:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a75a:	4829      	ldr	r0, [pc, #164]	@ (801a800 <_vfiprintf_r+0x220>)
 801a75c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a760:	2206      	movs	r2, #6
 801a762:	f7e5 fd55 	bl	8000210 <memchr>
 801a766:	2800      	cmp	r0, #0
 801a768:	d03f      	beq.n	801a7ea <_vfiprintf_r+0x20a>
 801a76a:	4b26      	ldr	r3, [pc, #152]	@ (801a804 <_vfiprintf_r+0x224>)
 801a76c:	bb1b      	cbnz	r3, 801a7b6 <_vfiprintf_r+0x1d6>
 801a76e:	9b03      	ldr	r3, [sp, #12]
 801a770:	3307      	adds	r3, #7
 801a772:	f023 0307 	bic.w	r3, r3, #7
 801a776:	3308      	adds	r3, #8
 801a778:	9303      	str	r3, [sp, #12]
 801a77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a77c:	443b      	add	r3, r7
 801a77e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a780:	e76a      	b.n	801a658 <_vfiprintf_r+0x78>
 801a782:	fb0c 3202 	mla	r2, ip, r2, r3
 801a786:	460c      	mov	r4, r1
 801a788:	2001      	movs	r0, #1
 801a78a:	e7a8      	b.n	801a6de <_vfiprintf_r+0xfe>
 801a78c:	2300      	movs	r3, #0
 801a78e:	3401      	adds	r4, #1
 801a790:	9305      	str	r3, [sp, #20]
 801a792:	4619      	mov	r1, r3
 801a794:	f04f 0c0a 	mov.w	ip, #10
 801a798:	4620      	mov	r0, r4
 801a79a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a79e:	3a30      	subs	r2, #48	@ 0x30
 801a7a0:	2a09      	cmp	r2, #9
 801a7a2:	d903      	bls.n	801a7ac <_vfiprintf_r+0x1cc>
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d0c6      	beq.n	801a736 <_vfiprintf_r+0x156>
 801a7a8:	9105      	str	r1, [sp, #20]
 801a7aa:	e7c4      	b.n	801a736 <_vfiprintf_r+0x156>
 801a7ac:	fb0c 2101 	mla	r1, ip, r1, r2
 801a7b0:	4604      	mov	r4, r0
 801a7b2:	2301      	movs	r3, #1
 801a7b4:	e7f0      	b.n	801a798 <_vfiprintf_r+0x1b8>
 801a7b6:	ab03      	add	r3, sp, #12
 801a7b8:	9300      	str	r3, [sp, #0]
 801a7ba:	462a      	mov	r2, r5
 801a7bc:	4b12      	ldr	r3, [pc, #72]	@ (801a808 <_vfiprintf_r+0x228>)
 801a7be:	a904      	add	r1, sp, #16
 801a7c0:	4630      	mov	r0, r6
 801a7c2:	f3af 8000 	nop.w
 801a7c6:	4607      	mov	r7, r0
 801a7c8:	1c78      	adds	r0, r7, #1
 801a7ca:	d1d6      	bne.n	801a77a <_vfiprintf_r+0x19a>
 801a7cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a7ce:	07d9      	lsls	r1, r3, #31
 801a7d0:	d405      	bmi.n	801a7de <_vfiprintf_r+0x1fe>
 801a7d2:	89ab      	ldrh	r3, [r5, #12]
 801a7d4:	059a      	lsls	r2, r3, #22
 801a7d6:	d402      	bmi.n	801a7de <_vfiprintf_r+0x1fe>
 801a7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a7da:	f7ff fda9 	bl	801a330 <__retarget_lock_release_recursive>
 801a7de:	89ab      	ldrh	r3, [r5, #12]
 801a7e0:	065b      	lsls	r3, r3, #25
 801a7e2:	f53f af1f 	bmi.w	801a624 <_vfiprintf_r+0x44>
 801a7e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a7e8:	e71e      	b.n	801a628 <_vfiprintf_r+0x48>
 801a7ea:	ab03      	add	r3, sp, #12
 801a7ec:	9300      	str	r3, [sp, #0]
 801a7ee:	462a      	mov	r2, r5
 801a7f0:	4b05      	ldr	r3, [pc, #20]	@ (801a808 <_vfiprintf_r+0x228>)
 801a7f2:	a904      	add	r1, sp, #16
 801a7f4:	4630      	mov	r0, r6
 801a7f6:	f000 f879 	bl	801a8ec <_printf_i>
 801a7fa:	e7e4      	b.n	801a7c6 <_vfiprintf_r+0x1e6>
 801a7fc:	0801e2ad 	.word	0x0801e2ad
 801a800:	0801e2b7 	.word	0x0801e2b7
 801a804:	00000000 	.word	0x00000000
 801a808:	0801a5bb 	.word	0x0801a5bb
 801a80c:	0801e2b3 	.word	0x0801e2b3

0801a810 <_printf_common>:
 801a810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a814:	4616      	mov	r6, r2
 801a816:	4698      	mov	r8, r3
 801a818:	688a      	ldr	r2, [r1, #8]
 801a81a:	690b      	ldr	r3, [r1, #16]
 801a81c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a820:	4293      	cmp	r3, r2
 801a822:	bfb8      	it	lt
 801a824:	4613      	movlt	r3, r2
 801a826:	6033      	str	r3, [r6, #0]
 801a828:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a82c:	4607      	mov	r7, r0
 801a82e:	460c      	mov	r4, r1
 801a830:	b10a      	cbz	r2, 801a836 <_printf_common+0x26>
 801a832:	3301      	adds	r3, #1
 801a834:	6033      	str	r3, [r6, #0]
 801a836:	6823      	ldr	r3, [r4, #0]
 801a838:	0699      	lsls	r1, r3, #26
 801a83a:	bf42      	ittt	mi
 801a83c:	6833      	ldrmi	r3, [r6, #0]
 801a83e:	3302      	addmi	r3, #2
 801a840:	6033      	strmi	r3, [r6, #0]
 801a842:	6825      	ldr	r5, [r4, #0]
 801a844:	f015 0506 	ands.w	r5, r5, #6
 801a848:	d106      	bne.n	801a858 <_printf_common+0x48>
 801a84a:	f104 0a19 	add.w	sl, r4, #25
 801a84e:	68e3      	ldr	r3, [r4, #12]
 801a850:	6832      	ldr	r2, [r6, #0]
 801a852:	1a9b      	subs	r3, r3, r2
 801a854:	42ab      	cmp	r3, r5
 801a856:	dc26      	bgt.n	801a8a6 <_printf_common+0x96>
 801a858:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a85c:	6822      	ldr	r2, [r4, #0]
 801a85e:	3b00      	subs	r3, #0
 801a860:	bf18      	it	ne
 801a862:	2301      	movne	r3, #1
 801a864:	0692      	lsls	r2, r2, #26
 801a866:	d42b      	bmi.n	801a8c0 <_printf_common+0xb0>
 801a868:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a86c:	4641      	mov	r1, r8
 801a86e:	4638      	mov	r0, r7
 801a870:	47c8      	blx	r9
 801a872:	3001      	adds	r0, #1
 801a874:	d01e      	beq.n	801a8b4 <_printf_common+0xa4>
 801a876:	6823      	ldr	r3, [r4, #0]
 801a878:	6922      	ldr	r2, [r4, #16]
 801a87a:	f003 0306 	and.w	r3, r3, #6
 801a87e:	2b04      	cmp	r3, #4
 801a880:	bf02      	ittt	eq
 801a882:	68e5      	ldreq	r5, [r4, #12]
 801a884:	6833      	ldreq	r3, [r6, #0]
 801a886:	1aed      	subeq	r5, r5, r3
 801a888:	68a3      	ldr	r3, [r4, #8]
 801a88a:	bf0c      	ite	eq
 801a88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a890:	2500      	movne	r5, #0
 801a892:	4293      	cmp	r3, r2
 801a894:	bfc4      	itt	gt
 801a896:	1a9b      	subgt	r3, r3, r2
 801a898:	18ed      	addgt	r5, r5, r3
 801a89a:	2600      	movs	r6, #0
 801a89c:	341a      	adds	r4, #26
 801a89e:	42b5      	cmp	r5, r6
 801a8a0:	d11a      	bne.n	801a8d8 <_printf_common+0xc8>
 801a8a2:	2000      	movs	r0, #0
 801a8a4:	e008      	b.n	801a8b8 <_printf_common+0xa8>
 801a8a6:	2301      	movs	r3, #1
 801a8a8:	4652      	mov	r2, sl
 801a8aa:	4641      	mov	r1, r8
 801a8ac:	4638      	mov	r0, r7
 801a8ae:	47c8      	blx	r9
 801a8b0:	3001      	adds	r0, #1
 801a8b2:	d103      	bne.n	801a8bc <_printf_common+0xac>
 801a8b4:	f04f 30ff 	mov.w	r0, #4294967295
 801a8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8bc:	3501      	adds	r5, #1
 801a8be:	e7c6      	b.n	801a84e <_printf_common+0x3e>
 801a8c0:	18e1      	adds	r1, r4, r3
 801a8c2:	1c5a      	adds	r2, r3, #1
 801a8c4:	2030      	movs	r0, #48	@ 0x30
 801a8c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a8ca:	4422      	add	r2, r4
 801a8cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a8d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a8d4:	3302      	adds	r3, #2
 801a8d6:	e7c7      	b.n	801a868 <_printf_common+0x58>
 801a8d8:	2301      	movs	r3, #1
 801a8da:	4622      	mov	r2, r4
 801a8dc:	4641      	mov	r1, r8
 801a8de:	4638      	mov	r0, r7
 801a8e0:	47c8      	blx	r9
 801a8e2:	3001      	adds	r0, #1
 801a8e4:	d0e6      	beq.n	801a8b4 <_printf_common+0xa4>
 801a8e6:	3601      	adds	r6, #1
 801a8e8:	e7d9      	b.n	801a89e <_printf_common+0x8e>
	...

0801a8ec <_printf_i>:
 801a8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a8f0:	7e0f      	ldrb	r7, [r1, #24]
 801a8f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a8f4:	2f78      	cmp	r7, #120	@ 0x78
 801a8f6:	4691      	mov	r9, r2
 801a8f8:	4680      	mov	r8, r0
 801a8fa:	460c      	mov	r4, r1
 801a8fc:	469a      	mov	sl, r3
 801a8fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a902:	d807      	bhi.n	801a914 <_printf_i+0x28>
 801a904:	2f62      	cmp	r7, #98	@ 0x62
 801a906:	d80a      	bhi.n	801a91e <_printf_i+0x32>
 801a908:	2f00      	cmp	r7, #0
 801a90a:	f000 80d1 	beq.w	801aab0 <_printf_i+0x1c4>
 801a90e:	2f58      	cmp	r7, #88	@ 0x58
 801a910:	f000 80b8 	beq.w	801aa84 <_printf_i+0x198>
 801a914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a918:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a91c:	e03a      	b.n	801a994 <_printf_i+0xa8>
 801a91e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a922:	2b15      	cmp	r3, #21
 801a924:	d8f6      	bhi.n	801a914 <_printf_i+0x28>
 801a926:	a101      	add	r1, pc, #4	@ (adr r1, 801a92c <_printf_i+0x40>)
 801a928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a92c:	0801a985 	.word	0x0801a985
 801a930:	0801a999 	.word	0x0801a999
 801a934:	0801a915 	.word	0x0801a915
 801a938:	0801a915 	.word	0x0801a915
 801a93c:	0801a915 	.word	0x0801a915
 801a940:	0801a915 	.word	0x0801a915
 801a944:	0801a999 	.word	0x0801a999
 801a948:	0801a915 	.word	0x0801a915
 801a94c:	0801a915 	.word	0x0801a915
 801a950:	0801a915 	.word	0x0801a915
 801a954:	0801a915 	.word	0x0801a915
 801a958:	0801aa97 	.word	0x0801aa97
 801a95c:	0801a9c3 	.word	0x0801a9c3
 801a960:	0801aa51 	.word	0x0801aa51
 801a964:	0801a915 	.word	0x0801a915
 801a968:	0801a915 	.word	0x0801a915
 801a96c:	0801aab9 	.word	0x0801aab9
 801a970:	0801a915 	.word	0x0801a915
 801a974:	0801a9c3 	.word	0x0801a9c3
 801a978:	0801a915 	.word	0x0801a915
 801a97c:	0801a915 	.word	0x0801a915
 801a980:	0801aa59 	.word	0x0801aa59
 801a984:	6833      	ldr	r3, [r6, #0]
 801a986:	1d1a      	adds	r2, r3, #4
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	6032      	str	r2, [r6, #0]
 801a98c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a990:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a994:	2301      	movs	r3, #1
 801a996:	e09c      	b.n	801aad2 <_printf_i+0x1e6>
 801a998:	6833      	ldr	r3, [r6, #0]
 801a99a:	6820      	ldr	r0, [r4, #0]
 801a99c:	1d19      	adds	r1, r3, #4
 801a99e:	6031      	str	r1, [r6, #0]
 801a9a0:	0606      	lsls	r6, r0, #24
 801a9a2:	d501      	bpl.n	801a9a8 <_printf_i+0xbc>
 801a9a4:	681d      	ldr	r5, [r3, #0]
 801a9a6:	e003      	b.n	801a9b0 <_printf_i+0xc4>
 801a9a8:	0645      	lsls	r5, r0, #25
 801a9aa:	d5fb      	bpl.n	801a9a4 <_printf_i+0xb8>
 801a9ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a9b0:	2d00      	cmp	r5, #0
 801a9b2:	da03      	bge.n	801a9bc <_printf_i+0xd0>
 801a9b4:	232d      	movs	r3, #45	@ 0x2d
 801a9b6:	426d      	negs	r5, r5
 801a9b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a9bc:	4858      	ldr	r0, [pc, #352]	@ (801ab20 <_printf_i+0x234>)
 801a9be:	230a      	movs	r3, #10
 801a9c0:	e011      	b.n	801a9e6 <_printf_i+0xfa>
 801a9c2:	6821      	ldr	r1, [r4, #0]
 801a9c4:	6833      	ldr	r3, [r6, #0]
 801a9c6:	0608      	lsls	r0, r1, #24
 801a9c8:	f853 5b04 	ldr.w	r5, [r3], #4
 801a9cc:	d402      	bmi.n	801a9d4 <_printf_i+0xe8>
 801a9ce:	0649      	lsls	r1, r1, #25
 801a9d0:	bf48      	it	mi
 801a9d2:	b2ad      	uxthmi	r5, r5
 801a9d4:	2f6f      	cmp	r7, #111	@ 0x6f
 801a9d6:	4852      	ldr	r0, [pc, #328]	@ (801ab20 <_printf_i+0x234>)
 801a9d8:	6033      	str	r3, [r6, #0]
 801a9da:	bf14      	ite	ne
 801a9dc:	230a      	movne	r3, #10
 801a9de:	2308      	moveq	r3, #8
 801a9e0:	2100      	movs	r1, #0
 801a9e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a9e6:	6866      	ldr	r6, [r4, #4]
 801a9e8:	60a6      	str	r6, [r4, #8]
 801a9ea:	2e00      	cmp	r6, #0
 801a9ec:	db05      	blt.n	801a9fa <_printf_i+0x10e>
 801a9ee:	6821      	ldr	r1, [r4, #0]
 801a9f0:	432e      	orrs	r6, r5
 801a9f2:	f021 0104 	bic.w	r1, r1, #4
 801a9f6:	6021      	str	r1, [r4, #0]
 801a9f8:	d04b      	beq.n	801aa92 <_printf_i+0x1a6>
 801a9fa:	4616      	mov	r6, r2
 801a9fc:	fbb5 f1f3 	udiv	r1, r5, r3
 801aa00:	fb03 5711 	mls	r7, r3, r1, r5
 801aa04:	5dc7      	ldrb	r7, [r0, r7]
 801aa06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801aa0a:	462f      	mov	r7, r5
 801aa0c:	42bb      	cmp	r3, r7
 801aa0e:	460d      	mov	r5, r1
 801aa10:	d9f4      	bls.n	801a9fc <_printf_i+0x110>
 801aa12:	2b08      	cmp	r3, #8
 801aa14:	d10b      	bne.n	801aa2e <_printf_i+0x142>
 801aa16:	6823      	ldr	r3, [r4, #0]
 801aa18:	07df      	lsls	r7, r3, #31
 801aa1a:	d508      	bpl.n	801aa2e <_printf_i+0x142>
 801aa1c:	6923      	ldr	r3, [r4, #16]
 801aa1e:	6861      	ldr	r1, [r4, #4]
 801aa20:	4299      	cmp	r1, r3
 801aa22:	bfde      	ittt	le
 801aa24:	2330      	movle	r3, #48	@ 0x30
 801aa26:	f806 3c01 	strble.w	r3, [r6, #-1]
 801aa2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801aa2e:	1b92      	subs	r2, r2, r6
 801aa30:	6122      	str	r2, [r4, #16]
 801aa32:	f8cd a000 	str.w	sl, [sp]
 801aa36:	464b      	mov	r3, r9
 801aa38:	aa03      	add	r2, sp, #12
 801aa3a:	4621      	mov	r1, r4
 801aa3c:	4640      	mov	r0, r8
 801aa3e:	f7ff fee7 	bl	801a810 <_printf_common>
 801aa42:	3001      	adds	r0, #1
 801aa44:	d14a      	bne.n	801aadc <_printf_i+0x1f0>
 801aa46:	f04f 30ff 	mov.w	r0, #4294967295
 801aa4a:	b004      	add	sp, #16
 801aa4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa50:	6823      	ldr	r3, [r4, #0]
 801aa52:	f043 0320 	orr.w	r3, r3, #32
 801aa56:	6023      	str	r3, [r4, #0]
 801aa58:	4832      	ldr	r0, [pc, #200]	@ (801ab24 <_printf_i+0x238>)
 801aa5a:	2778      	movs	r7, #120	@ 0x78
 801aa5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801aa60:	6823      	ldr	r3, [r4, #0]
 801aa62:	6831      	ldr	r1, [r6, #0]
 801aa64:	061f      	lsls	r7, r3, #24
 801aa66:	f851 5b04 	ldr.w	r5, [r1], #4
 801aa6a:	d402      	bmi.n	801aa72 <_printf_i+0x186>
 801aa6c:	065f      	lsls	r7, r3, #25
 801aa6e:	bf48      	it	mi
 801aa70:	b2ad      	uxthmi	r5, r5
 801aa72:	6031      	str	r1, [r6, #0]
 801aa74:	07d9      	lsls	r1, r3, #31
 801aa76:	bf44      	itt	mi
 801aa78:	f043 0320 	orrmi.w	r3, r3, #32
 801aa7c:	6023      	strmi	r3, [r4, #0]
 801aa7e:	b11d      	cbz	r5, 801aa88 <_printf_i+0x19c>
 801aa80:	2310      	movs	r3, #16
 801aa82:	e7ad      	b.n	801a9e0 <_printf_i+0xf4>
 801aa84:	4826      	ldr	r0, [pc, #152]	@ (801ab20 <_printf_i+0x234>)
 801aa86:	e7e9      	b.n	801aa5c <_printf_i+0x170>
 801aa88:	6823      	ldr	r3, [r4, #0]
 801aa8a:	f023 0320 	bic.w	r3, r3, #32
 801aa8e:	6023      	str	r3, [r4, #0]
 801aa90:	e7f6      	b.n	801aa80 <_printf_i+0x194>
 801aa92:	4616      	mov	r6, r2
 801aa94:	e7bd      	b.n	801aa12 <_printf_i+0x126>
 801aa96:	6833      	ldr	r3, [r6, #0]
 801aa98:	6825      	ldr	r5, [r4, #0]
 801aa9a:	6961      	ldr	r1, [r4, #20]
 801aa9c:	1d18      	adds	r0, r3, #4
 801aa9e:	6030      	str	r0, [r6, #0]
 801aaa0:	062e      	lsls	r6, r5, #24
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	d501      	bpl.n	801aaaa <_printf_i+0x1be>
 801aaa6:	6019      	str	r1, [r3, #0]
 801aaa8:	e002      	b.n	801aab0 <_printf_i+0x1c4>
 801aaaa:	0668      	lsls	r0, r5, #25
 801aaac:	d5fb      	bpl.n	801aaa6 <_printf_i+0x1ba>
 801aaae:	8019      	strh	r1, [r3, #0]
 801aab0:	2300      	movs	r3, #0
 801aab2:	6123      	str	r3, [r4, #16]
 801aab4:	4616      	mov	r6, r2
 801aab6:	e7bc      	b.n	801aa32 <_printf_i+0x146>
 801aab8:	6833      	ldr	r3, [r6, #0]
 801aaba:	1d1a      	adds	r2, r3, #4
 801aabc:	6032      	str	r2, [r6, #0]
 801aabe:	681e      	ldr	r6, [r3, #0]
 801aac0:	6862      	ldr	r2, [r4, #4]
 801aac2:	2100      	movs	r1, #0
 801aac4:	4630      	mov	r0, r6
 801aac6:	f7e5 fba3 	bl	8000210 <memchr>
 801aaca:	b108      	cbz	r0, 801aad0 <_printf_i+0x1e4>
 801aacc:	1b80      	subs	r0, r0, r6
 801aace:	6060      	str	r0, [r4, #4]
 801aad0:	6863      	ldr	r3, [r4, #4]
 801aad2:	6123      	str	r3, [r4, #16]
 801aad4:	2300      	movs	r3, #0
 801aad6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aada:	e7aa      	b.n	801aa32 <_printf_i+0x146>
 801aadc:	6923      	ldr	r3, [r4, #16]
 801aade:	4632      	mov	r2, r6
 801aae0:	4649      	mov	r1, r9
 801aae2:	4640      	mov	r0, r8
 801aae4:	47d0      	blx	sl
 801aae6:	3001      	adds	r0, #1
 801aae8:	d0ad      	beq.n	801aa46 <_printf_i+0x15a>
 801aaea:	6823      	ldr	r3, [r4, #0]
 801aaec:	079b      	lsls	r3, r3, #30
 801aaee:	d413      	bmi.n	801ab18 <_printf_i+0x22c>
 801aaf0:	68e0      	ldr	r0, [r4, #12]
 801aaf2:	9b03      	ldr	r3, [sp, #12]
 801aaf4:	4298      	cmp	r0, r3
 801aaf6:	bfb8      	it	lt
 801aaf8:	4618      	movlt	r0, r3
 801aafa:	e7a6      	b.n	801aa4a <_printf_i+0x15e>
 801aafc:	2301      	movs	r3, #1
 801aafe:	4632      	mov	r2, r6
 801ab00:	4649      	mov	r1, r9
 801ab02:	4640      	mov	r0, r8
 801ab04:	47d0      	blx	sl
 801ab06:	3001      	adds	r0, #1
 801ab08:	d09d      	beq.n	801aa46 <_printf_i+0x15a>
 801ab0a:	3501      	adds	r5, #1
 801ab0c:	68e3      	ldr	r3, [r4, #12]
 801ab0e:	9903      	ldr	r1, [sp, #12]
 801ab10:	1a5b      	subs	r3, r3, r1
 801ab12:	42ab      	cmp	r3, r5
 801ab14:	dcf2      	bgt.n	801aafc <_printf_i+0x210>
 801ab16:	e7eb      	b.n	801aaf0 <_printf_i+0x204>
 801ab18:	2500      	movs	r5, #0
 801ab1a:	f104 0619 	add.w	r6, r4, #25
 801ab1e:	e7f5      	b.n	801ab0c <_printf_i+0x220>
 801ab20:	0801e2be 	.word	0x0801e2be
 801ab24:	0801e2cf 	.word	0x0801e2cf

0801ab28 <__sflush_r>:
 801ab28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ab2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab30:	0716      	lsls	r6, r2, #28
 801ab32:	4605      	mov	r5, r0
 801ab34:	460c      	mov	r4, r1
 801ab36:	d454      	bmi.n	801abe2 <__sflush_r+0xba>
 801ab38:	684b      	ldr	r3, [r1, #4]
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	dc02      	bgt.n	801ab44 <__sflush_r+0x1c>
 801ab3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	dd48      	ble.n	801abd6 <__sflush_r+0xae>
 801ab44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ab46:	2e00      	cmp	r6, #0
 801ab48:	d045      	beq.n	801abd6 <__sflush_r+0xae>
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ab50:	682f      	ldr	r7, [r5, #0]
 801ab52:	6a21      	ldr	r1, [r4, #32]
 801ab54:	602b      	str	r3, [r5, #0]
 801ab56:	d030      	beq.n	801abba <__sflush_r+0x92>
 801ab58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ab5a:	89a3      	ldrh	r3, [r4, #12]
 801ab5c:	0759      	lsls	r1, r3, #29
 801ab5e:	d505      	bpl.n	801ab6c <__sflush_r+0x44>
 801ab60:	6863      	ldr	r3, [r4, #4]
 801ab62:	1ad2      	subs	r2, r2, r3
 801ab64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ab66:	b10b      	cbz	r3, 801ab6c <__sflush_r+0x44>
 801ab68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ab6a:	1ad2      	subs	r2, r2, r3
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ab70:	6a21      	ldr	r1, [r4, #32]
 801ab72:	4628      	mov	r0, r5
 801ab74:	47b0      	blx	r6
 801ab76:	1c43      	adds	r3, r0, #1
 801ab78:	89a3      	ldrh	r3, [r4, #12]
 801ab7a:	d106      	bne.n	801ab8a <__sflush_r+0x62>
 801ab7c:	6829      	ldr	r1, [r5, #0]
 801ab7e:	291d      	cmp	r1, #29
 801ab80:	d82b      	bhi.n	801abda <__sflush_r+0xb2>
 801ab82:	4a2a      	ldr	r2, [pc, #168]	@ (801ac2c <__sflush_r+0x104>)
 801ab84:	40ca      	lsrs	r2, r1
 801ab86:	07d6      	lsls	r6, r2, #31
 801ab88:	d527      	bpl.n	801abda <__sflush_r+0xb2>
 801ab8a:	2200      	movs	r2, #0
 801ab8c:	6062      	str	r2, [r4, #4]
 801ab8e:	04d9      	lsls	r1, r3, #19
 801ab90:	6922      	ldr	r2, [r4, #16]
 801ab92:	6022      	str	r2, [r4, #0]
 801ab94:	d504      	bpl.n	801aba0 <__sflush_r+0x78>
 801ab96:	1c42      	adds	r2, r0, #1
 801ab98:	d101      	bne.n	801ab9e <__sflush_r+0x76>
 801ab9a:	682b      	ldr	r3, [r5, #0]
 801ab9c:	b903      	cbnz	r3, 801aba0 <__sflush_r+0x78>
 801ab9e:	6560      	str	r0, [r4, #84]	@ 0x54
 801aba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801aba2:	602f      	str	r7, [r5, #0]
 801aba4:	b1b9      	cbz	r1, 801abd6 <__sflush_r+0xae>
 801aba6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801abaa:	4299      	cmp	r1, r3
 801abac:	d002      	beq.n	801abb4 <__sflush_r+0x8c>
 801abae:	4628      	mov	r0, r5
 801abb0:	f7ff fbec 	bl	801a38c <_free_r>
 801abb4:	2300      	movs	r3, #0
 801abb6:	6363      	str	r3, [r4, #52]	@ 0x34
 801abb8:	e00d      	b.n	801abd6 <__sflush_r+0xae>
 801abba:	2301      	movs	r3, #1
 801abbc:	4628      	mov	r0, r5
 801abbe:	47b0      	blx	r6
 801abc0:	4602      	mov	r2, r0
 801abc2:	1c50      	adds	r0, r2, #1
 801abc4:	d1c9      	bne.n	801ab5a <__sflush_r+0x32>
 801abc6:	682b      	ldr	r3, [r5, #0]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d0c6      	beq.n	801ab5a <__sflush_r+0x32>
 801abcc:	2b1d      	cmp	r3, #29
 801abce:	d001      	beq.n	801abd4 <__sflush_r+0xac>
 801abd0:	2b16      	cmp	r3, #22
 801abd2:	d11e      	bne.n	801ac12 <__sflush_r+0xea>
 801abd4:	602f      	str	r7, [r5, #0]
 801abd6:	2000      	movs	r0, #0
 801abd8:	e022      	b.n	801ac20 <__sflush_r+0xf8>
 801abda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801abde:	b21b      	sxth	r3, r3
 801abe0:	e01b      	b.n	801ac1a <__sflush_r+0xf2>
 801abe2:	690f      	ldr	r7, [r1, #16]
 801abe4:	2f00      	cmp	r7, #0
 801abe6:	d0f6      	beq.n	801abd6 <__sflush_r+0xae>
 801abe8:	0793      	lsls	r3, r2, #30
 801abea:	680e      	ldr	r6, [r1, #0]
 801abec:	bf08      	it	eq
 801abee:	694b      	ldreq	r3, [r1, #20]
 801abf0:	600f      	str	r7, [r1, #0]
 801abf2:	bf18      	it	ne
 801abf4:	2300      	movne	r3, #0
 801abf6:	eba6 0807 	sub.w	r8, r6, r7
 801abfa:	608b      	str	r3, [r1, #8]
 801abfc:	f1b8 0f00 	cmp.w	r8, #0
 801ac00:	dde9      	ble.n	801abd6 <__sflush_r+0xae>
 801ac02:	6a21      	ldr	r1, [r4, #32]
 801ac04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ac06:	4643      	mov	r3, r8
 801ac08:	463a      	mov	r2, r7
 801ac0a:	4628      	mov	r0, r5
 801ac0c:	47b0      	blx	r6
 801ac0e:	2800      	cmp	r0, #0
 801ac10:	dc08      	bgt.n	801ac24 <__sflush_r+0xfc>
 801ac12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ac16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ac1a:	81a3      	strh	r3, [r4, #12]
 801ac1c:	f04f 30ff 	mov.w	r0, #4294967295
 801ac20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac24:	4407      	add	r7, r0
 801ac26:	eba8 0800 	sub.w	r8, r8, r0
 801ac2a:	e7e7      	b.n	801abfc <__sflush_r+0xd4>
 801ac2c:	20400001 	.word	0x20400001

0801ac30 <_fflush_r>:
 801ac30:	b538      	push	{r3, r4, r5, lr}
 801ac32:	690b      	ldr	r3, [r1, #16]
 801ac34:	4605      	mov	r5, r0
 801ac36:	460c      	mov	r4, r1
 801ac38:	b913      	cbnz	r3, 801ac40 <_fflush_r+0x10>
 801ac3a:	2500      	movs	r5, #0
 801ac3c:	4628      	mov	r0, r5
 801ac3e:	bd38      	pop	{r3, r4, r5, pc}
 801ac40:	b118      	cbz	r0, 801ac4a <_fflush_r+0x1a>
 801ac42:	6a03      	ldr	r3, [r0, #32]
 801ac44:	b90b      	cbnz	r3, 801ac4a <_fflush_r+0x1a>
 801ac46:	f7ff f913 	bl	8019e70 <__sinit>
 801ac4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d0f3      	beq.n	801ac3a <_fflush_r+0xa>
 801ac52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ac54:	07d0      	lsls	r0, r2, #31
 801ac56:	d404      	bmi.n	801ac62 <_fflush_r+0x32>
 801ac58:	0599      	lsls	r1, r3, #22
 801ac5a:	d402      	bmi.n	801ac62 <_fflush_r+0x32>
 801ac5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ac5e:	f7ff fb66 	bl	801a32e <__retarget_lock_acquire_recursive>
 801ac62:	4628      	mov	r0, r5
 801ac64:	4621      	mov	r1, r4
 801ac66:	f7ff ff5f 	bl	801ab28 <__sflush_r>
 801ac6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ac6c:	07da      	lsls	r2, r3, #31
 801ac6e:	4605      	mov	r5, r0
 801ac70:	d4e4      	bmi.n	801ac3c <_fflush_r+0xc>
 801ac72:	89a3      	ldrh	r3, [r4, #12]
 801ac74:	059b      	lsls	r3, r3, #22
 801ac76:	d4e1      	bmi.n	801ac3c <_fflush_r+0xc>
 801ac78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ac7a:	f7ff fb59 	bl	801a330 <__retarget_lock_release_recursive>
 801ac7e:	e7dd      	b.n	801ac3c <_fflush_r+0xc>

0801ac80 <fiprintf>:
 801ac80:	b40e      	push	{r1, r2, r3}
 801ac82:	b503      	push	{r0, r1, lr}
 801ac84:	4601      	mov	r1, r0
 801ac86:	ab03      	add	r3, sp, #12
 801ac88:	4805      	ldr	r0, [pc, #20]	@ (801aca0 <fiprintf+0x20>)
 801ac8a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac8e:	6800      	ldr	r0, [r0, #0]
 801ac90:	9301      	str	r3, [sp, #4]
 801ac92:	f7ff fca5 	bl	801a5e0 <_vfiprintf_r>
 801ac96:	b002      	add	sp, #8
 801ac98:	f85d eb04 	ldr.w	lr, [sp], #4
 801ac9c:	b003      	add	sp, #12
 801ac9e:	4770      	bx	lr
 801aca0:	2000003c 	.word	0x2000003c

0801aca4 <__swhatbuf_r>:
 801aca4:	b570      	push	{r4, r5, r6, lr}
 801aca6:	460c      	mov	r4, r1
 801aca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acac:	2900      	cmp	r1, #0
 801acae:	b096      	sub	sp, #88	@ 0x58
 801acb0:	4615      	mov	r5, r2
 801acb2:	461e      	mov	r6, r3
 801acb4:	da0d      	bge.n	801acd2 <__swhatbuf_r+0x2e>
 801acb6:	89a3      	ldrh	r3, [r4, #12]
 801acb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801acbc:	f04f 0100 	mov.w	r1, #0
 801acc0:	bf14      	ite	ne
 801acc2:	2340      	movne	r3, #64	@ 0x40
 801acc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801acc8:	2000      	movs	r0, #0
 801acca:	6031      	str	r1, [r6, #0]
 801accc:	602b      	str	r3, [r5, #0]
 801acce:	b016      	add	sp, #88	@ 0x58
 801acd0:	bd70      	pop	{r4, r5, r6, pc}
 801acd2:	466a      	mov	r2, sp
 801acd4:	f000 f848 	bl	801ad68 <_fstat_r>
 801acd8:	2800      	cmp	r0, #0
 801acda:	dbec      	blt.n	801acb6 <__swhatbuf_r+0x12>
 801acdc:	9901      	ldr	r1, [sp, #4]
 801acde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ace2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ace6:	4259      	negs	r1, r3
 801ace8:	4159      	adcs	r1, r3
 801acea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801acee:	e7eb      	b.n	801acc8 <__swhatbuf_r+0x24>

0801acf0 <__smakebuf_r>:
 801acf0:	898b      	ldrh	r3, [r1, #12]
 801acf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801acf4:	079d      	lsls	r5, r3, #30
 801acf6:	4606      	mov	r6, r0
 801acf8:	460c      	mov	r4, r1
 801acfa:	d507      	bpl.n	801ad0c <__smakebuf_r+0x1c>
 801acfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ad00:	6023      	str	r3, [r4, #0]
 801ad02:	6123      	str	r3, [r4, #16]
 801ad04:	2301      	movs	r3, #1
 801ad06:	6163      	str	r3, [r4, #20]
 801ad08:	b003      	add	sp, #12
 801ad0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad0c:	ab01      	add	r3, sp, #4
 801ad0e:	466a      	mov	r2, sp
 801ad10:	f7ff ffc8 	bl	801aca4 <__swhatbuf_r>
 801ad14:	9f00      	ldr	r7, [sp, #0]
 801ad16:	4605      	mov	r5, r0
 801ad18:	4639      	mov	r1, r7
 801ad1a:	4630      	mov	r0, r6
 801ad1c:	f7ff fbaa 	bl	801a474 <_malloc_r>
 801ad20:	b948      	cbnz	r0, 801ad36 <__smakebuf_r+0x46>
 801ad22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad26:	059a      	lsls	r2, r3, #22
 801ad28:	d4ee      	bmi.n	801ad08 <__smakebuf_r+0x18>
 801ad2a:	f023 0303 	bic.w	r3, r3, #3
 801ad2e:	f043 0302 	orr.w	r3, r3, #2
 801ad32:	81a3      	strh	r3, [r4, #12]
 801ad34:	e7e2      	b.n	801acfc <__smakebuf_r+0xc>
 801ad36:	89a3      	ldrh	r3, [r4, #12]
 801ad38:	6020      	str	r0, [r4, #0]
 801ad3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ad3e:	81a3      	strh	r3, [r4, #12]
 801ad40:	9b01      	ldr	r3, [sp, #4]
 801ad42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ad46:	b15b      	cbz	r3, 801ad60 <__smakebuf_r+0x70>
 801ad48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ad4c:	4630      	mov	r0, r6
 801ad4e:	f000 f81d 	bl	801ad8c <_isatty_r>
 801ad52:	b128      	cbz	r0, 801ad60 <__smakebuf_r+0x70>
 801ad54:	89a3      	ldrh	r3, [r4, #12]
 801ad56:	f023 0303 	bic.w	r3, r3, #3
 801ad5a:	f043 0301 	orr.w	r3, r3, #1
 801ad5e:	81a3      	strh	r3, [r4, #12]
 801ad60:	89a3      	ldrh	r3, [r4, #12]
 801ad62:	431d      	orrs	r5, r3
 801ad64:	81a5      	strh	r5, [r4, #12]
 801ad66:	e7cf      	b.n	801ad08 <__smakebuf_r+0x18>

0801ad68 <_fstat_r>:
 801ad68:	b538      	push	{r3, r4, r5, lr}
 801ad6a:	4d07      	ldr	r5, [pc, #28]	@ (801ad88 <_fstat_r+0x20>)
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	4604      	mov	r4, r0
 801ad70:	4608      	mov	r0, r1
 801ad72:	4611      	mov	r1, r2
 801ad74:	602b      	str	r3, [r5, #0]
 801ad76:	f7e6 fe97 	bl	8001aa8 <_fstat>
 801ad7a:	1c43      	adds	r3, r0, #1
 801ad7c:	d102      	bne.n	801ad84 <_fstat_r+0x1c>
 801ad7e:	682b      	ldr	r3, [r5, #0]
 801ad80:	b103      	cbz	r3, 801ad84 <_fstat_r+0x1c>
 801ad82:	6023      	str	r3, [r4, #0]
 801ad84:	bd38      	pop	{r3, r4, r5, pc}
 801ad86:	bf00      	nop
 801ad88:	20027758 	.word	0x20027758

0801ad8c <_isatty_r>:
 801ad8c:	b538      	push	{r3, r4, r5, lr}
 801ad8e:	4d06      	ldr	r5, [pc, #24]	@ (801ada8 <_isatty_r+0x1c>)
 801ad90:	2300      	movs	r3, #0
 801ad92:	4604      	mov	r4, r0
 801ad94:	4608      	mov	r0, r1
 801ad96:	602b      	str	r3, [r5, #0]
 801ad98:	f7e6 fe96 	bl	8001ac8 <_isatty>
 801ad9c:	1c43      	adds	r3, r0, #1
 801ad9e:	d102      	bne.n	801ada6 <_isatty_r+0x1a>
 801ada0:	682b      	ldr	r3, [r5, #0]
 801ada2:	b103      	cbz	r3, 801ada6 <_isatty_r+0x1a>
 801ada4:	6023      	str	r3, [r4, #0]
 801ada6:	bd38      	pop	{r3, r4, r5, pc}
 801ada8:	20027758 	.word	0x20027758

0801adac <_sbrk_r>:
 801adac:	b538      	push	{r3, r4, r5, lr}
 801adae:	4d06      	ldr	r5, [pc, #24]	@ (801adc8 <_sbrk_r+0x1c>)
 801adb0:	2300      	movs	r3, #0
 801adb2:	4604      	mov	r4, r0
 801adb4:	4608      	mov	r0, r1
 801adb6:	602b      	str	r3, [r5, #0]
 801adb8:	f7e6 fe9e 	bl	8001af8 <_sbrk>
 801adbc:	1c43      	adds	r3, r0, #1
 801adbe:	d102      	bne.n	801adc6 <_sbrk_r+0x1a>
 801adc0:	682b      	ldr	r3, [r5, #0]
 801adc2:	b103      	cbz	r3, 801adc6 <_sbrk_r+0x1a>
 801adc4:	6023      	str	r3, [r4, #0]
 801adc6:	bd38      	pop	{r3, r4, r5, pc}
 801adc8:	20027758 	.word	0x20027758

0801adcc <abort>:
 801adcc:	b508      	push	{r3, lr}
 801adce:	2006      	movs	r0, #6
 801add0:	f000 f82c 	bl	801ae2c <raise>
 801add4:	2001      	movs	r0, #1
 801add6:	f7e6 fe17 	bl	8001a08 <_exit>

0801adda <_raise_r>:
 801adda:	291f      	cmp	r1, #31
 801addc:	b538      	push	{r3, r4, r5, lr}
 801adde:	4605      	mov	r5, r0
 801ade0:	460c      	mov	r4, r1
 801ade2:	d904      	bls.n	801adee <_raise_r+0x14>
 801ade4:	2316      	movs	r3, #22
 801ade6:	6003      	str	r3, [r0, #0]
 801ade8:	f04f 30ff 	mov.w	r0, #4294967295
 801adec:	bd38      	pop	{r3, r4, r5, pc}
 801adee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801adf0:	b112      	cbz	r2, 801adf8 <_raise_r+0x1e>
 801adf2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801adf6:	b94b      	cbnz	r3, 801ae0c <_raise_r+0x32>
 801adf8:	4628      	mov	r0, r5
 801adfa:	f000 f831 	bl	801ae60 <_getpid_r>
 801adfe:	4622      	mov	r2, r4
 801ae00:	4601      	mov	r1, r0
 801ae02:	4628      	mov	r0, r5
 801ae04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae08:	f000 b818 	b.w	801ae3c <_kill_r>
 801ae0c:	2b01      	cmp	r3, #1
 801ae0e:	d00a      	beq.n	801ae26 <_raise_r+0x4c>
 801ae10:	1c59      	adds	r1, r3, #1
 801ae12:	d103      	bne.n	801ae1c <_raise_r+0x42>
 801ae14:	2316      	movs	r3, #22
 801ae16:	6003      	str	r3, [r0, #0]
 801ae18:	2001      	movs	r0, #1
 801ae1a:	e7e7      	b.n	801adec <_raise_r+0x12>
 801ae1c:	2100      	movs	r1, #0
 801ae1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ae22:	4620      	mov	r0, r4
 801ae24:	4798      	blx	r3
 801ae26:	2000      	movs	r0, #0
 801ae28:	e7e0      	b.n	801adec <_raise_r+0x12>
	...

0801ae2c <raise>:
 801ae2c:	4b02      	ldr	r3, [pc, #8]	@ (801ae38 <raise+0xc>)
 801ae2e:	4601      	mov	r1, r0
 801ae30:	6818      	ldr	r0, [r3, #0]
 801ae32:	f7ff bfd2 	b.w	801adda <_raise_r>
 801ae36:	bf00      	nop
 801ae38:	2000003c 	.word	0x2000003c

0801ae3c <_kill_r>:
 801ae3c:	b538      	push	{r3, r4, r5, lr}
 801ae3e:	4d07      	ldr	r5, [pc, #28]	@ (801ae5c <_kill_r+0x20>)
 801ae40:	2300      	movs	r3, #0
 801ae42:	4604      	mov	r4, r0
 801ae44:	4608      	mov	r0, r1
 801ae46:	4611      	mov	r1, r2
 801ae48:	602b      	str	r3, [r5, #0]
 801ae4a:	f7e6 fdcb 	bl	80019e4 <_kill>
 801ae4e:	1c43      	adds	r3, r0, #1
 801ae50:	d102      	bne.n	801ae58 <_kill_r+0x1c>
 801ae52:	682b      	ldr	r3, [r5, #0]
 801ae54:	b103      	cbz	r3, 801ae58 <_kill_r+0x1c>
 801ae56:	6023      	str	r3, [r4, #0]
 801ae58:	bd38      	pop	{r3, r4, r5, pc}
 801ae5a:	bf00      	nop
 801ae5c:	20027758 	.word	0x20027758

0801ae60 <_getpid_r>:
 801ae60:	f7e6 bdb8 	b.w	80019d4 <_getpid>

0801ae64 <_init>:
 801ae64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae66:	bf00      	nop
 801ae68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae6a:	bc08      	pop	{r3}
 801ae6c:	469e      	mov	lr, r3
 801ae6e:	4770      	bx	lr

0801ae70 <_fini>:
 801ae70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae72:	bf00      	nop
 801ae74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae76:	bc08      	pop	{r3}
 801ae78:	469e      	mov	lr, r3
 801ae7a:	4770      	bx	lr
