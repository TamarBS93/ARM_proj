
Final_ARM_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c6c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031e8  08017e3c  08017e3c  00018e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b024  0801b024  0001d1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b024  0801b024  0001c024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b02c  0801b02c  0001d1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b02c  0801b02c  0001c02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b030  0801b030  0001c030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801b034  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801b0c0  0001d08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801b160  0001d12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00027454  200001cc  0801b200  0001d1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20027620  0801b200  0001d620  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001d1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039a50  00000000  00000000  0001d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000086c6  00000000  00000000  00056c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002aa0  00000000  00000000  0005f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000021c2  00000000  00000000  00061db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001331b  00000000  00000000  00063f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00040786  00000000  00000000  00077295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011d38c  00000000  00000000  000b7a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001d4da7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000bba0  00000000  00000000  001d4dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  001e098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017e24 	.word	0x08017e24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08017e24 	.word	0x08017e24

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fa0b 	bl	80019fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f87e 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa14 	bl	8000a14 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 f9e0 	bl	80009b0 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f8e0 	bl	80007b4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f94e 	bl	8000894 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 f9ac 	bl	8000954 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f91a 	bl	8000834 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000600:	f000 f978 	bl	80008f4 <MX_USART6_UART_Init>
  // ethernetif_init(&gnetif);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000604:	f007 fe92 	bl	800832c <osKernelInitialize>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xUartRxSemaphore */
  xUartRxSemaphoreHandle = osSemaphoreNew(1, 1, &xUartRxSemaphore_attributes);
 8000608:	4a23      	ldr	r2, [pc, #140]	@ (8000698 <main+0xbc>)
 800060a:	2101      	movs	r1, #1
 800060c:	2001      	movs	r0, #1
 800060e:	f008 f93b 	bl	8008888 <osSemaphoreNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <main+0xc0>)
 8000616:	6013      	str	r3, [r2, #0]

  /* creation of xUartTxSemaphore */
  xUartTxSemaphoreHandle = osSemaphoreNew(1, 1, &xUartTxSemaphore_attributes);
 8000618:	4a21      	ldr	r2, [pc, #132]	@ (80006a0 <main+0xc4>)
 800061a:	2101      	movs	r1, #1
 800061c:	2001      	movs	r0, #1
 800061e:	f008 f933 	bl	8008888 <osSemaphoreNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a1f      	ldr	r2, [pc, #124]	@ (80006a4 <main+0xc8>)
 8000626:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  if (xUartTxSemaphoreHandle == NULL || xUartRxSemaphoreHandle == NULL){
 8000628:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <main+0xc8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d003      	beq.n	8000638 <main+0x5c>
 8000630:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <main+0xc0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <main+0x62>
	  printf("Failed to create semaphores!\n");
 8000638:	481b      	ldr	r0, [pc, #108]	@ (80006a8 <main+0xcc>)
 800063a:	f016 fc97 	bl	8016f6c <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testsQ */
  testsQHandle = osMessageQueueNew (16, 4, &testsQ_attributes);
 800063e:	4a1b      	ldr	r2, [pc, #108]	@ (80006ac <main+0xd0>)
 8000640:	2104      	movs	r1, #4
 8000642:	2010      	movs	r0, #16
 8000644:	f008 fa7a 	bl	8008b3c <osMessageQueueNew>
 8000648:	4603      	mov	r3, r0
 800064a:	4a19      	ldr	r2, [pc, #100]	@ (80006b0 <main+0xd4>)
 800064c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(lwip_initiation, NULL, &defaultTask_attributes);
 800064e:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <main+0xd8>)
 8000650:	2100      	movs	r1, #0
 8000652:	4819      	ldr	r0, [pc, #100]	@ (80006b8 <main+0xdc>)
 8000654:	f007 fefc 	bl	8008450 <osThreadNew>
 8000658:	4603      	mov	r3, r0
 800065a:	4a18      	ldr	r2, [pc, #96]	@ (80006bc <main+0xe0>)
 800065c:	6013      	str	r3, [r2, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blinking_blue, NULL, &blink_task_attributes);
 800065e:	4a18      	ldr	r2, [pc, #96]	@ (80006c0 <main+0xe4>)
 8000660:	2100      	movs	r1, #0
 8000662:	4818      	ldr	r0, [pc, #96]	@ (80006c4 <main+0xe8>)
 8000664:	f007 fef4 	bl	8008450 <osThreadNew>
 8000668:	4603      	mov	r3, r0
 800066a:	4a17      	ldr	r2, [pc, #92]	@ (80006c8 <main+0xec>)
 800066c:	6013      	str	r3, [r2, #0]

  /* creation of udp_task */
  udp_taskHandle = osThreadNew(udp_function, NULL, &udp_task_attributes);
 800066e:	4a17      	ldr	r2, [pc, #92]	@ (80006cc <main+0xf0>)
 8000670:	2100      	movs	r1, #0
 8000672:	4817      	ldr	r0, [pc, #92]	@ (80006d0 <main+0xf4>)
 8000674:	f007 feec 	bl	8008450 <osThreadNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a16      	ldr	r2, [pc, #88]	@ (80006d4 <main+0xf8>)
 800067c:	6013      	str	r3, [r2, #0]

  /* creation of performing_task */
  performing_taskHandle = osThreadNew(perform_tests, NULL, &performing_task_attributes);
 800067e:	4a16      	ldr	r2, [pc, #88]	@ (80006d8 <main+0xfc>)
 8000680:	2100      	movs	r1, #0
 8000682:	4816      	ldr	r0, [pc, #88]	@ (80006dc <main+0x100>)
 8000684:	f007 fee4 	bl	8008450 <osThreadNew>
 8000688:	4603      	mov	r3, r0
 800068a:	4a15      	ldr	r2, [pc, #84]	@ (80006e0 <main+0x104>)
 800068c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800068e:	f007 fe81 	bl	8008394 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <main+0xb6>
 8000696:	bf00      	nop
 8000698:	0801add8 	.word	0x0801add8
 800069c:	20000988 	.word	0x20000988
 80006a0:	0801ade8 	.word	0x0801ade8
 80006a4:	2000098c 	.word	0x2000098c
 80006a8:	08017ea0 	.word	0x08017ea0
 80006ac:	0801adc0 	.word	0x0801adc0
 80006b0:	20000984 	.word	0x20000984
 80006b4:	0801ad30 	.word	0x0801ad30
 80006b8:	08000d51 	.word	0x08000d51
 80006bc:	20000974 	.word	0x20000974
 80006c0:	0801ad54 	.word	0x0801ad54
 80006c4:	08000d65 	.word	0x08000d65
 80006c8:	20000978 	.word	0x20000978
 80006cc:	0801ad78 	.word	0x0801ad78
 80006d0:	08000da9 	.word	0x08000da9
 80006d4:	2000097c 	.word	0x2000097c
 80006d8:	0801ad9c 	.word	0x0801ad9c
 80006dc:	08000dbd 	.word	0x08000dbd
 80006e0:	20000980 	.word	0x20000980

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	@ 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	@ 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f016 fd2a 	bl	801714c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000708:	f003 fd78 	bl	80041fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	4b27      	ldr	r3, [pc, #156]	@ (80007ac <SystemClock_Config+0xc8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	4a26      	ldr	r2, [pc, #152]	@ (80007ac <SystemClock_Config+0xc8>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	@ 0x40
 8000718:	4b24      	ldr	r3, [pc, #144]	@ (80007ac <SystemClock_Config+0xc8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000724:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <SystemClock_Config+0xcc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800072c:	4a20      	ldr	r2, [pc, #128]	@ (80007b0 <SystemClock_Config+0xcc>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <SystemClock_Config+0xcc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000744:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000758:	2348      	movs	r3, #72	@ 0x48
 800075a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000760:	2303      	movs	r3, #3
 8000762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f003 fd57 	bl	800421c <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 fb98 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2102      	movs	r1, #2
 8000794:	4618      	mov	r0, r3
 8000796:	f003 ffe5 	bl	8004764 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007a0:	f000 fb82 	bl	8000ea8 <Error_Handler>
  }
}
 80007a4:	bf00      	nop
 80007a6:	3750      	adds	r7, #80	@ 0x50
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_I2C1_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	@ (800082c <MX_I2C1_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_I2C1_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000830 <MX_I2C1_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_I2C1_Init+0x74>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_I2C1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	@ (8000828 <MX_I2C1_Init+0x74>)
 80007f0:	f003 fa96 	bl	8003d20 <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007fa:	f000 fb55 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	@ (8000828 <MX_I2C1_Init+0x74>)
 8000802:	f003 fb29 	bl	8003e58 <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800080c:	f000 fb4c 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_I2C1_Init+0x74>)
 8000814:	f003 fb6b 	bl	8003eee <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 fb43 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200001e8 	.word	0x200001e8
 800082c:	40005400 	.word	0x40005400
 8000830:	00808cd2 	.word	0x00808cd2

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_USART2_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	@ (8000890 <MX_USART2_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_USART2_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_USART2_UART_Init+0x58>)
 8000878:	f005 f88a 	bl	8005990 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 fb11 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000023c 	.word	0x2000023c
 8000890:	40004400 	.word	0x40004400

08000894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_USART3_UART_Init+0x58>)
 800089a:	4a15      	ldr	r2, [pc, #84]	@ (80008f0 <MX_USART3_UART_Init+0x5c>)
 800089c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_USART3_UART_Init+0x58>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_USART3_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_USART3_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_USART3_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_USART3_UART_Init+0x58>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_USART3_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_USART3_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_USART3_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_USART3_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_USART3_UART_Init+0x58>)
 80008d8:	f005 f85a 	bl	8005990 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 fae1 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200002c4 	.word	0x200002c4
 80008f0:	40004800 	.word	0x40004800

080008f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USART6_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_USART6_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART6_UART_Init+0x58>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USART6_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_USART6_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USART6_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USART6_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USART6_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USART6_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USART6_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USART6_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART6_UART_Init+0x58>)
 8000938:	f005 f82a 	bl	8005990 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 fab1 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000034c 	.word	0x2000034c
 8000950:	40011400 	.word	0x40011400

08000954 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800095e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2206      	movs	r2, #6
 8000964:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2202      	movs	r2, #2
 800096a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	2202      	movs	r2, #2
 8000976:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	2201      	movs	r2, #1
 800097c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	2201      	movs	r2, #1
 800098e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	f003 faf5 	bl	8003f86 <HAL_PCD_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 fa81 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000494 	.word	0x20000494

080009b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_DMA_Init+0x60>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <MX_DMA_Init+0x60>)
 80009bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_DMA_Init+0x60>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <MX_DMA_Init+0x60>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a10 <MX_DMA_Init+0x60>)
 80009d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <MX_DMA_Init+0x60>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2105      	movs	r1, #5
 80009ea:	2011      	movs	r0, #17
 80009ec:	f001 f90e 	bl	8001c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009f0:	2011      	movs	r0, #17
 80009f2:	f001 f927 	bl	8001c44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	203a      	movs	r0, #58	@ 0x3a
 80009fc:	f001 f906 	bl	8001c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a00:	203a      	movs	r0, #58	@ 0x3a
 8000a02:	f001 f91f 	bl	8001c44 <HAL_NVIC_EnableIRQ>

}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	@ 0x30
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b47      	ldr	r3, [pc, #284]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a46      	ldr	r2, [pc, #280]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b44      	ldr	r3, [pc, #272]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	4b41      	ldr	r3, [pc, #260]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a40      	ldr	r2, [pc, #256]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b38      	ldr	r3, [pc, #224]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b35      	ldr	r3, [pc, #212]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a34      	ldr	r2, [pc, #208]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b32      	ldr	r3, [pc, #200]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a28      	ldr	r2, [pc, #160]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ac0:	4822      	ldr	r0, [pc, #136]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000ac2:	f003 f8f9 	bl	8003cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	@ 0x40
 8000aca:	4821      	ldr	r0, [pc, #132]	@ (8000b50 <MX_GPIO_Init+0x13c>)
 8000acc:	f003 f8f4 	bl	8003cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481b      	ldr	r0, [pc, #108]	@ (8000b54 <MX_GPIO_Init+0x140>)
 8000ae8:	f002 ff3a 	bl	8003960 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aec:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000b06:	f002 ff2b 	bl	8003960 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b0a:	2340      	movs	r3, #64	@ 0x40
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <MX_GPIO_Init+0x13c>)
 8000b22:	f002 ff1d 	bl	8003960 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_GPIO_Init+0x13c>)
 8000b3a:	f002 ff11 	bl	8003960 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	@ 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40021800 	.word	0x40021800
 8000b54:	40020800 	.word	0x40020800

08000b58 <vApplicationStackOverflowHook>:
 *
 * @param xTask Task handle of the task whose stack overflowed.
 * @param pcTaskName Pointer to the name of the task whose stack overflowed.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
    // A stack overflow has been detected. This is a critical error.
    // The system is in an unstable state.
    // It is generally not safe to continue execution or call complex functions.

    printf("\n!!! STACK OVERFLOW DETECTED !!!\n");
 8000b62:	4811      	ldr	r0, [pc, #68]	@ (8000ba8 <vApplicationStackOverflowHook+0x50>)
 8000b64:	f016 fa02 	bl	8016f6c <puts>
    printf("Task: %s\n", pcTaskName);
 8000b68:	6839      	ldr	r1, [r7, #0]
 8000b6a:	4810      	ldr	r0, [pc, #64]	@ (8000bac <vApplicationStackOverflowHook+0x54>)
 8000b6c:	f016 f996 	bl	8016e9c <iprintf>
    printf("Handle: 0x%lX\n", (uint32_t)xTask);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4619      	mov	r1, r3
 8000b74:	480e      	ldr	r0, [pc, #56]	@ (8000bb0 <vApplicationStackOverflowHook+0x58>)
 8000b76:	f016 f991 	bl	8016e9c <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b7e:	b672      	cpsid	i
 8000b80:	f383 8811 	msr	BASEPRI, r3
 8000b84:	f3bf 8f6f 	isb	sy
 8000b88:	f3bf 8f4f 	dsb	sy
 8000b8c:	b662      	cpsie	i
 8000b8e:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b90:	bf00      	nop
    // Disable interrupts to prevent further execution and potential damage
    taskDISABLE_INTERRUPTS();
    for(;;)
    {
        // RED LED toggle for visual indication
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000b92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b96:	4807      	ldr	r0, [pc, #28]	@ (8000bb4 <vApplicationStackOverflowHook+0x5c>)
 8000b98:	f003 f8a7 	bl	8003cea <HAL_GPIO_TogglePin>
        osDelay(1000);
 8000b9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ba0:	f007 fcfc 	bl	800859c <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ba4:	bf00      	nop
 8000ba6:	e7f4      	b.n	8000b92 <vApplicationStackOverflowHook+0x3a>
 8000ba8:	08017ec0 	.word	0x08017ec0
 8000bac:	08017ee4 	.word	0x08017ee4
 8000bb0:	08017ef0 	.word	0x08017ef0
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <udp_receive_init>:
    }
}

void udp_receive_init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	//printf("udp_receive_init() called\n");

    udp_pcb_handle = udp_new();
 8000bbc:	f013 f9f4 	bl	8013fa8 <udp_new>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a13      	ldr	r2, [pc, #76]	@ (8000c10 <udp_receive_init+0x58>)
 8000bc4:	6013      	str	r3, [r2, #0]
    if (!udp_pcb_handle) {
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <udp_receive_init+0x58>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d103      	bne.n	8000bd6 <udp_receive_init+0x1e>
        printf("Failed to create UDP PCB\n");
 8000bce:	4811      	ldr	r0, [pc, #68]	@ (8000c14 <udp_receive_init+0x5c>)
 8000bd0:	f016 f9cc 	bl	8016f6c <puts>
        return;
 8000bd4:	e01a      	b.n	8000c0c <udp_receive_init+0x54>
    }

    if (udp_bind(udp_pcb_handle, IP_ADDR_ANY, LOCAL_PORT) != ERR_OK) {
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <udp_receive_init+0x58>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f241 328d 	movw	r2, #5005	@ 0x138d
 8000bde:	490e      	ldr	r1, [pc, #56]	@ (8000c18 <udp_receive_init+0x60>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f013 f939 	bl	8013e58 <udp_bind>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <udp_receive_init+0x3c>
        printf("UDP bind failed\n");
 8000bec:	480b      	ldr	r0, [pc, #44]	@ (8000c1c <udp_receive_init+0x64>)
 8000bee:	f016 f9bd 	bl	8016f6c <puts>
        return;
 8000bf2:	e00b      	b.n	8000c0c <udp_receive_init+0x54>
    }

    udp_recv(udp_pcb_handle, udp_receive_callback, NULL);
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <udp_receive_init+0x58>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4909      	ldr	r1, [pc, #36]	@ (8000c20 <udp_receive_init+0x68>)
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f013 f9b3 	bl	8013f68 <udp_recv>
    printf("UDP ready, listening on port %d\n", LOCAL_PORT);
 8000c02:	f241 318d 	movw	r1, #5005	@ 0x138d
 8000c06:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <udp_receive_init+0x6c>)
 8000c08:	f016 f948 	bl	8016e9c <iprintf>
}
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000990 	.word	0x20000990
 8000c14:	08017f00 	.word	0x08017f00
 8000c18:	0801af34 	.word	0x0801af34
 8000c1c:	08017f1c 	.word	0x08017f1c
 8000c20:	08000c29 	.word	0x08000c29
 8000c24:	08017f2c 	.word	0x08017f2c

08000c28 <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af02      	add	r7, sp, #8
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d06d      	beq.n	8000d18 <udp_receive_callback+0xf0>
        printf("Received from %s:%d -> %.*s\n",
 8000c3c:	6838      	ldr	r0, [r7, #0]
 8000c3e:	f014 fdad 	bl	801579c <ip4addr_ntoa>
 8000c42:	4601      	mov	r1, r0
 8000c44:	8c3a      	ldrh	r2, [r7, #32]
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	895b      	ldrh	r3, [r3, #10]
        printf("Received from %s:%d -> %.*s\n",
 8000c4a:	4618      	mov	r0, r3
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
        printf("Received from %s:%d -> %.*s\n",
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	4603      	mov	r3, r0
 8000c54:	4832      	ldr	r0, [pc, #200]	@ (8000d20 <udp_receive_callback+0xf8>)
 8000c56:	f016 f921 	bl	8016e9c <iprintf>

        if (p->len >= sizeof(test_command_t)) {
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	895b      	ldrh	r3, [r3, #10]
 8000c5e:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000c62:	d950      	bls.n	8000d06 <udp_receive_callback+0xde>
            test_command_t *cmd = (test_command_t *)pvPortMalloc(sizeof(test_command_t));
 8000c64:	f240 1007 	movw	r0, #263	@ 0x107
 8000c68:	f00b fa4e 	bl	800c108 <pvPortMalloc>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	617b      	str	r3, [r7, #20]
            if (cmd != NULL) {
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d029      	beq.n	8000cca <udp_receive_callback+0xa2>
			   // Copy the data from the pbuf payload to the allocated memory
			   memcpy(cmd, p->payload, sizeof(test_command_t)); // Only copy the struct size
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f240 1207 	movw	r2, #263	@ 0x107
 8000c80:	4619      	mov	r1, r3
 8000c82:	f016 fb36 	bl	80172f2 <memcpy>
				// Debug print received data
				printf("Received Test Command:\n");
 8000c86:	4827      	ldr	r0, [pc, #156]	@ (8000d24 <udp_receive_callback+0xfc>)
 8000c88:	f016 f970 	bl	8016f6c <puts>
				printf("test_id: %lu\n", cmd->test_id);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4825      	ldr	r0, [pc, #148]	@ (8000d28 <udp_receive_callback+0x100>)
 8000c94:	f016 f902 	bl	8016e9c <iprintf>
				printf("peripheral bitfield: 0x%02X\n", cmd->peripheral);
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	791b      	ldrb	r3, [r3, #4]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4823      	ldr	r0, [pc, #140]	@ (8000d2c <udp_receive_callback+0x104>)
 8000ca0:	f016 f8fc 	bl	8016e9c <iprintf>
				printf("iterations: %u\n", cmd->iterations);
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	795b      	ldrb	r3, [r3, #5]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4821      	ldr	r0, [pc, #132]	@ (8000d30 <udp_receive_callback+0x108>)
 8000cac:	f016 f8f6 	bl	8016e9c <iprintf>
				printf("bit pattern length: %u\n", cmd->bit_pattern_length);
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	799b      	ldrb	r3, [r3, #6]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481f      	ldr	r0, [pc, #124]	@ (8000d34 <udp_receive_callback+0x10c>)
 8000cb8:	f016 f8f0 	bl	8016e9c <iprintf>
				printf("bit pattern: %s\n",cmd->bit_pattern);
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3307      	adds	r3, #7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	481d      	ldr	r0, [pc, #116]	@ (8000d38 <udp_receive_callback+0x110>)
 8000cc4:	f016 f8ea 	bl	8016e9c <iprintf>
 8000cc8:	e002      	b.n	8000cd0 <udp_receive_callback+0xa8>
            }
            else{
                printf("Failed to allocate memory for test_command_t!\n");
 8000cca:	481c      	ldr	r0, [pc, #112]	@ (8000d3c <udp_receive_callback+0x114>)
 8000ccc:	f016 f94e 	bl	8016f6c <puts>
            }
            // Send the POINTER to the newly allocated and copied* data to the queue
            if (xQueueSendToBack(testsQHandle, &cmd, 1) != pdPASS){ // Pass address of pointer
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <udp_receive_callback+0x118>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	f107 0114 	add.w	r1, r7, #20
 8000cd8:	2300      	movs	r3, #0
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f008 fc0e 	bl	80094fc <xQueueGenericSend>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d007      	beq.n	8000cf6 <udp_receive_callback+0xce>
                printf("Failed to send data to tests queue.\n");
 8000ce6:	4817      	ldr	r0, [pc, #92]	@ (8000d44 <udp_receive_callback+0x11c>)
 8000ce8:	f016 f940 	bl	8016f6c <puts>
                // If send fails, free the allocated memory immediately
                vPortFree(cmd);
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f00b fad8 	bl	800c2a4 <vPortFree>
 8000cf4:	e00d      	b.n	8000d12 <udp_receive_callback+0xea>
            } else {
                // Only notify if successfully sent to queue
            	//printf("udp_receive_callback sent a command to the tests queue successfully\n");
                xTaskNotifyGive(performing_taskHandle);
 8000cf6:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <udp_receive_callback+0x120>)
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f00a fb40 	bl	800b384 <xTaskGenericNotify>
 8000d04:	e005      	b.n	8000d12 <udp_receive_callback+0xea>
            }
        } else {
            printf("Packet too short: %d bytes\n", p->len);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	895b      	ldrh	r3, [r3, #10]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480f      	ldr	r0, [pc, #60]	@ (8000d4c <udp_receive_callback+0x124>)
 8000d0e:	f016 f8c5 	bl	8016e9c <iprintf>
        }
        pbuf_free(p);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f00d f972 	bl	800dffc <pbuf_free>
    }
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	08017f50 	.word	0x08017f50
 8000d24:	08017f70 	.word	0x08017f70
 8000d28:	08017f88 	.word	0x08017f88
 8000d2c:	08017f98 	.word	0x08017f98
 8000d30:	08017fb8 	.word	0x08017fb8
 8000d34:	08017fc8 	.word	0x08017fc8
 8000d38:	08017fe0 	.word	0x08017fe0
 8000d3c:	08017ff4 	.word	0x08017ff4
 8000d40:	20000984 	.word	0x20000984
 8000d44:	08018024 	.word	0x08018024
 8000d48:	20000980 	.word	0x20000980
 8000d4c:	08018048 	.word	0x08018048

08000d50 <lwip_initiation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_lwip_initiation */
void lwip_initiation(void *argument)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000d58:	f006 fc7c 	bl	8007654 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f007 fc1d 	bl	800859c <osDelay>
 8000d62:	e7fb      	b.n	8000d5c <lwip_initiation+0xc>

08000d64 <blinking_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinking_blue */
void blinking_blue(void *argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinking_blue */
  /* Infinite loop */
  for(;;)
  {
	/* visual heartbeat */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000d6c:	2180      	movs	r1, #128	@ 0x80
 8000d6e:	4804      	ldr	r0, [pc, #16]	@ (8000d80 <blinking_blue+0x1c>)
 8000d70:	f002 ffbb 	bl	8003cea <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000d74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d78:	f007 fc10 	bl	800859c <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000d7c:	bf00      	nop
 8000d7e:	e7f5      	b.n	8000d6c <blinking_blue+0x8>
 8000d80:	40020400 	.word	0x40020400

08000d84 <__io_putchar>:
  /* USER CODE END blinking_blue */
}

/* USER CODE BEGIN Header_udp_function */
int __io_putchar(int ch)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000d8c:	1d39      	adds	r1, r7, #4
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	2201      	movs	r2, #1
 8000d94:	4803      	ldr	r0, [pc, #12]	@ (8000da4 <__io_putchar+0x20>)
 8000d96:	f004 fe49 	bl	8005a2c <HAL_UART_Transmit>
    return ch;
 8000d9a:	687b      	ldr	r3, [r7, #4]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200002c4 	.word	0x200002c4

08000da8 <udp_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_udp_function */
void udp_function(void *argument)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN udp_function */
	udp_receive_init();
 8000db0:	f7ff ff02 	bl	8000bb8 <udp_receive_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f007 fbf1 	bl	800859c <osDelay>
 8000dba:	e7fb      	b.n	8000db4 <udp_function+0xc>

08000dbc <perform_tests>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_perform_tests */
void perform_tests(void *argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
	test_command_t *cmd;

  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f00a fa8f 	bl	800b2ec <ulTaskNotifyTake>
	printf("perform_tests woke up!\n");
 8000dce:	482a      	ldr	r0, [pc, #168]	@ (8000e78 <perform_tests+0xbc>)
 8000dd0:	f016 f8cc 	bl	8016f6c <puts>

	if (xQueueReceive(testsQHandle, &cmd, 0) != pdPASS)
 8000dd4:	4b29      	ldr	r3, [pc, #164]	@ (8000e7c <perform_tests+0xc0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f107 011c 	add.w	r1, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f008 fdd2 	bl	8009988 <xQueueReceive>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d003      	beq.n	8000df2 <perform_tests+0x36>
	{
		printf("perform_tests: No test command received\n");
 8000dea:	4825      	ldr	r0, [pc, #148]	@ (8000e80 <perform_tests+0xc4>)
 8000dec:	f016 f8be 	bl	8016f6c <puts>
		continue;
 8000df0:	e040      	b.n	8000e74 <perform_tests+0xb8>
	}
	if(cmd->bit_pattern_length > MAX_BIT_PATTERN_LENGTH || cmd->test_id == NULL || cmd->iterations<1){
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <perform_tests+0x46>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	795b      	ldrb	r3, [r3, #5]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d105      	bne.n	8000e0e <perform_tests+0x52>
		result_pro_t response = {cmd->test_id, TEST_ERR};
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e0c:	833b      	strh	r3, [r7, #24]
//		response.test_result = TEST_ERR;
		// send response
	}
	switch (cmd->peripheral){
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	791b      	ldrb	r3, [r3, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d82a      	bhi.n	8000e6e <perform_tests+0xb2>
 8000e18:	a201      	add	r2, pc, #4	@ (adr r2, 8000e20 <perform_tests+0x64>)
 8000e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1e:	bf00      	nop
 8000e20:	08000e6f 	.word	0x08000e6f
 8000e24:	08000e61 	.word	0x08000e61
 8000e28:	08000e6f 	.word	0x08000e6f
 8000e2c:	08000e6f 	.word	0x08000e6f
 8000e30:	08000e6f 	.word	0x08000e6f
 8000e34:	08000e6f 	.word	0x08000e6f
 8000e38:	08000e6f 	.word	0x08000e6f
 8000e3c:	08000e6f 	.word	0x08000e6f
 8000e40:	08000e6f 	.word	0x08000e6f
 8000e44:	08000e6f 	.word	0x08000e6f
 8000e48:	08000e6f 	.word	0x08000e6f
 8000e4c:	08000e6f 	.word	0x08000e6f
 8000e50:	08000e6f 	.word	0x08000e6f
 8000e54:	08000e6f 	.word	0x08000e6f
 8000e58:	08000e6f 	.word	0x08000e6f
 8000e5c:	08000e6f 	.word	0x08000e6f
	case TIMER:
		break;
	case UART:
		uart_testing(cmd);
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	463b      	mov	r3, r7
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f015 fd2e 	bl	80168c8 <uart_testing>
		break;
 8000e6c:	bf00      	nop
	case ADC_P:
		break;
	default:
	}
	//vPortFree(cmd); // until i will handle it
    osDelay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f007 fb94 	bl	800859c <osDelay>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 8000e74:	e7a6      	b.n	8000dc4 <perform_tests+0x8>
 8000e76:	bf00      	nop
 8000e78:	08018064 	.word	0x08018064
 8000e7c:	20000984 	.word	0x20000984
 8000e80:	0801807c 	.word	0x0801807c

08000e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e96:	f000 fdbd 	bl	8001a14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40001000 	.word	0x40001000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a10      	ldr	r2, [pc, #64]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	210f      	movs	r1, #15
 8000eee:	f06f 0001 	mvn.w	r0, #1
 8000ef2:	f000 fe8b 	bl	8001c0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0aa      	sub	sp, #168	@ 0xa8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2284      	movs	r2, #132	@ 0x84
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f016 f911 	bl	801714c <memset>
  if(hi2c->Instance==I2C1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a22      	ldr	r2, [pc, #136]	@ (8000fb8 <HAL_I2C_MspInit+0xb4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d13c      	bne.n	8000fae <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f38:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 fe66 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f4e:	f7ff ffab 	bl	8000ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f72:	2312      	movs	r3, #18
 8000f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f84:	2304      	movs	r3, #4
 8000f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480b      	ldr	r0, [pc, #44]	@ (8000fc0 <HAL_I2C_MspInit+0xbc>)
 8000f92:	f002 fce5 	bl	8003960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000f9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fae:	bf00      	nop
 8000fb0:	37a8      	adds	r7, #168	@ 0xa8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020400 	.word	0x40020400

08000fc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0b0      	sub	sp, #192	@ 0xc0
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fe0:	2284      	movs	r2, #132	@ 0x84
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f016 f8b1 	bl	801714c <memset>
  if(huart->Instance==USART2)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4ab0      	ldr	r2, [pc, #704]	@ (80012b0 <HAL_UART_MspInit+0x2ec>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	f040 8094 	bne.w	800111e <HAL_UART_MspInit+0x15a>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff6:	2380      	movs	r3, #128	@ 0x80
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fe06 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800100e:	f7ff ff4b 	bl	8000ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001012:	4ba8      	ldr	r3, [pc, #672]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4aa7      	ldr	r2, [pc, #668]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4ba5      	ldr	r3, [pc, #660]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
 8001028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4ba2      	ldr	r3, [pc, #648]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4aa1      	ldr	r2, [pc, #644]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b9f      	ldr	r3, [pc, #636]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	4b9c      	ldr	r3, [pc, #624]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a9b      	ldr	r2, [pc, #620]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b99      	ldr	r3, [pc, #612]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800105a:	2308      	movs	r3, #8
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001072:	2307      	movs	r3, #7
 8001074:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800107c:	4619      	mov	r1, r3
 800107e:	488e      	ldr	r0, [pc, #568]	@ (80012b8 <HAL_UART_MspInit+0x2f4>)
 8001080:	f002 fc6e 	bl	8003960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001084:	2320      	movs	r3, #32
 8001086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800109c:	2307      	movs	r3, #7
 800109e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010a6:	4619      	mov	r1, r3
 80010a8:	4884      	ldr	r0, [pc, #528]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 80010aa:	f002 fc59 	bl	8003960 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80010ae:	4b84      	ldr	r3, [pc, #528]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 80010b0:	4a84      	ldr	r2, [pc, #528]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 80010b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80010b4:	4b82      	ldr	r3, [pc, #520]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 80010b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010bc:	4b80      	ldr	r3, [pc, #512]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 80010be:	2240      	movs	r2, #64	@ 0x40
 80010c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c2:	4b7f      	ldr	r3, [pc, #508]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010c8:	4b7d      	ldr	r3, [pc, #500]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 80010ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d0:	4b7b      	ldr	r3, [pc, #492]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d6:	4b7a      	ldr	r3, [pc, #488]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010dc:	4b78      	ldr	r3, [pc, #480]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010e2:	4b77      	ldr	r3, [pc, #476]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 80010e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ea:	4b75      	ldr	r3, [pc, #468]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010f0:	4873      	ldr	r0, [pc, #460]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 80010f2:	f000 fdb5 	bl	8001c60 <HAL_DMA_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80010fc:	f7ff fed4 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a6f      	ldr	r2, [pc, #444]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 8001104:	671a      	str	r2, [r3, #112]	@ 0x70
 8001106:	4a6e      	ldr	r2, [pc, #440]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2105      	movs	r1, #5
 8001110:	2026      	movs	r0, #38	@ 0x26
 8001112:	f000 fd7b 	bl	8001c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001116:	2026      	movs	r0, #38	@ 0x26
 8001118:	f000 fd94 	bl	8001c44 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800111c:	e0c3      	b.n	80012a6 <HAL_UART_MspInit+0x2e2>
  else if(huart->Instance==USART3)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a69      	ldr	r2, [pc, #420]	@ (80012c8 <HAL_UART_MspInit+0x304>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d145      	bne.n	80011b4 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800112e:	2300      	movs	r3, #0
 8001130:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fd6c 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001142:	f7ff feb1 	bl	8000ea8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001146:	4b5b      	ldr	r3, [pc, #364]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	4a5a      	ldr	r2, [pc, #360]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001150:	6413      	str	r3, [r2, #64]	@ 0x40
 8001152:	4b58      	ldr	r3, [pc, #352]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115e:	4b55      	ldr	r3, [pc, #340]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a54      	ldr	r2, [pc, #336]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b52      	ldr	r3, [pc, #328]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001176:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800117a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001190:	2307      	movs	r3, #7
 8001192:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001196:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800119a:	4619      	mov	r1, r3
 800119c:	4847      	ldr	r0, [pc, #284]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 800119e:	f002 fbdf 	bl	8003960 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2105      	movs	r1, #5
 80011a6:	2027      	movs	r0, #39	@ 0x27
 80011a8:	f000 fd30 	bl	8001c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011ac:	2027      	movs	r0, #39	@ 0x27
 80011ae:	f000 fd49 	bl	8001c44 <HAL_NVIC_EnableIRQ>
}
 80011b2:	e078      	b.n	80012a6 <HAL_UART_MspInit+0x2e2>
  else if(huart->Instance==USART6)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a44      	ldr	r2, [pc, #272]	@ (80012cc <HAL_UART_MspInit+0x308>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d173      	bne.n	80012a6 <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80011be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fd20 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_UART_MspInit+0x21a>
      Error_Handler();
 80011da:	f7ff fe65 	bl	8000ea8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80011de:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 80011e4:	f043 0320 	orr.w	r3, r3, #32
 80011e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ea:	4b32      	ldr	r3, [pc, #200]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f003 0320 	and.w	r3, r3, #32
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b2f      	ldr	r3, [pc, #188]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a2e      	ldr	r2, [pc, #184]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b2c      	ldr	r3, [pc, #176]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800120e:	23c0      	movs	r3, #192	@ 0xc0
 8001210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001226:	2308      	movs	r3, #8
 8001228:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001230:	4619      	mov	r1, r3
 8001232:	4827      	ldr	r0, [pc, #156]	@ (80012d0 <HAL_UART_MspInit+0x30c>)
 8001234:	f002 fb94 	bl	8003960 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8001238:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 800123a:	4a27      	ldr	r2, [pc, #156]	@ (80012d8 <HAL_UART_MspInit+0x314>)
 800123c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800123e:	4b25      	ldr	r3, [pc, #148]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001240:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001244:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001246:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124c:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001254:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001258:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001266:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800126c:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 800126e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001272:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800127a:	4816      	ldr	r0, [pc, #88]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 800127c:	f000 fcf0 	bl	8001c60 <HAL_DMA_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 8001286:	f7ff fe0f 	bl	8000ea8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a11      	ldr	r2, [pc, #68]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 800128e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001290:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2105      	movs	r1, #5
 800129a:	2047      	movs	r0, #71	@ 0x47
 800129c:	f000 fcb6 	bl	8001c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80012a0:	2047      	movs	r0, #71	@ 0x47
 80012a2:	f000 fccf 	bl	8001c44 <HAL_NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	37c0      	adds	r7, #192	@ 0xc0
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40004400 	.word	0x40004400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	200003d4 	.word	0x200003d4
 80012c4:	400260a0 	.word	0x400260a0
 80012c8:	40004800 	.word	0x40004800
 80012cc:	40011400 	.word	0x40011400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	20000434 	.word	0x20000434
 80012d8:	40026440 	.word	0x40026440

080012dc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0ac      	sub	sp, #176	@ 0xb0
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 0318 	add.w	r3, r7, #24
 80012f8:	2284      	movs	r2, #132	@ 0x84
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f015 ff25 	bl	801714c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800130a:	d159      	bne.n	80013c0 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800130c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001310:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fc79 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001328:	f7ff fdbe 	bl	8000ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <HAL_PCD_MspInit+0xec>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	4a25      	ldr	r2, [pc, #148]	@ (80013c8 <HAL_PCD_MspInit+0xec>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6313      	str	r3, [r2, #48]	@ 0x30
 8001338:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <HAL_PCD_MspInit+0xec>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001344:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001348:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800135e:	230a      	movs	r3, #10
 8001360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001368:	4619      	mov	r1, r3
 800136a:	4818      	ldr	r0, [pc, #96]	@ (80013cc <HAL_PCD_MspInit+0xf0>)
 800136c:	f002 faf8 	bl	8003960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001374:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001388:	4619      	mov	r1, r3
 800138a:	4810      	ldr	r0, [pc, #64]	@ (80013cc <HAL_PCD_MspInit+0xf0>)
 800138c:	f002 fae8 	bl	8003960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <HAL_PCD_MspInit+0xec>)
 8001392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001394:	4a0c      	ldr	r2, [pc, #48]	@ (80013c8 <HAL_PCD_MspInit+0xec>)
 8001396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800139a:	6353      	str	r3, [r2, #52]	@ 0x34
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <HAL_PCD_MspInit+0xec>)
 800139e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <HAL_PCD_MspInit+0xec>)
 80013aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ac:	4a06      	ldr	r2, [pc, #24]	@ (80013c8 <HAL_PCD_MspInit+0xec>)
 80013ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <HAL_PCD_MspInit+0xec>)
 80013b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80013c0:	bf00      	nop
 80013c2:	37b0      	adds	r7, #176	@ 0xb0
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000

080013d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	@ 0x38
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013e0:	4b33      	ldr	r3, [pc, #204]	@ (80014b0 <HAL_InitTick+0xe0>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	4a32      	ldr	r2, [pc, #200]	@ (80014b0 <HAL_InitTick+0xe0>)
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <HAL_InitTick+0xe0>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013f8:	f107 0210 	add.w	r2, r7, #16
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fbd4 	bl	8004bb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800140c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800140e:	2b00      	cmp	r3, #0
 8001410:	d103      	bne.n	800141a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001412:	f003 fba5 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8001416:	6378      	str	r0, [r7, #52]	@ 0x34
 8001418:	e004      	b.n	8001424 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800141a:	f003 fba1 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 800141e:	4603      	mov	r3, r0
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001426:	4a23      	ldr	r2, [pc, #140]	@ (80014b4 <HAL_InitTick+0xe4>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	0c9b      	lsrs	r3, r3, #18
 800142e:	3b01      	subs	r3, #1
 8001430:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <HAL_InitTick+0xe8>)
 8001434:	4a21      	ldr	r2, [pc, #132]	@ (80014bc <HAL_InitTick+0xec>)
 8001436:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_InitTick+0xe8>)
 800143a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800143e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001440:	4a1d      	ldr	r2, [pc, #116]	@ (80014b8 <HAL_InitTick+0xe8>)
 8001442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001444:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_InitTick+0xe8>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <HAL_InitTick+0xe8>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_InitTick+0xe8>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001458:	4817      	ldr	r0, [pc, #92]	@ (80014b8 <HAL_InitTick+0xe8>)
 800145a:	f003 ffcb 	bl	80053f4 <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001464:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001468:	2b00      	cmp	r3, #0
 800146a:	d11b      	bne.n	80014a4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800146c:	4812      	ldr	r0, [pc, #72]	@ (80014b8 <HAL_InitTick+0xe8>)
 800146e:	f004 f823 	bl	80054b8 <HAL_TIM_Base_Start_IT>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001478:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800147c:	2b00      	cmp	r3, #0
 800147e:	d111      	bne.n	80014a4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001480:	2036      	movs	r0, #54	@ 0x36
 8001482:	f000 fbdf 	bl	8001c44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d808      	bhi.n	800149e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2036      	movs	r0, #54	@ 0x36
 8001492:	f000 fbbb 	bl	8001c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_InitTick+0xf0>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e002      	b.n	80014a4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3738      	adds	r7, #56	@ 0x38
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	431bde83 	.word	0x431bde83
 80014b8:	20000994 	.word	0x20000994
 80014bc:	40001000 	.word	0x40001000
 80014c0:	20000004 	.word	0x20000004

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <NMI_Handler+0x4>

080014cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("!!! HARD FAULT HANDLER !!!\n");
 80014d2:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <HardFault_Handler+0x2c>)
 80014d4:	f015 fd4a 	bl	8016f6c <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    // RED LED toggle for visual indication
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80014d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014dc:	4807      	ldr	r0, [pc, #28]	@ (80014fc <HardFault_Handler+0x30>)
 80014de:	f002 fc04 	bl	8003cea <HAL_GPIO_TogglePin>
  	for(volatile int i=0; i<1000000; i++);
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	e002      	b.n	80014ee <HardFault_Handler+0x22>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3301      	adds	r3, #1
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a03      	ldr	r2, [pc, #12]	@ (8001500 <HardFault_Handler+0x34>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	ddf8      	ble.n	80014e8 <HardFault_Handler+0x1c>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80014f6:	e7ef      	b.n	80014d8 <HardFault_Handler+0xc>
 80014f8:	080180a4 	.word	0x080180a4
 80014fc:	40020400 	.word	0x40020400
 8001500:	000f423f 	.word	0x000f423f

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n");
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <MemManage_Handler+0x10>)
 800150a:	f015 fd2f 	bl	8016f6c <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150e:	bf00      	nop
 8001510:	e7fd      	b.n	800150e <MemManage_Handler+0xa>
 8001512:	bf00      	nop
 8001514:	080180a4 	.word	0x080180a4

08001518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n");
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <BusFault_Handler+0x10>)
 800151e:	f015 fd25 	bl	8016f6c <puts>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	bf00      	nop
 8001524:	e7fd      	b.n	8001522 <BusFault_Handler+0xa>
 8001526:	bf00      	nop
 8001528:	080180a4 	.word	0x080180a4

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <UsageFault_Handler+0x4>

08001534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <DMA1_Stream6_IRQHandler+0x10>)
 800154a:	f000 fd29 	bl	8001fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200003d4 	.word	0x200003d4

08001558 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <USART2_IRQHandler+0x10>)
 800155e:	f004 fbaf 	bl	8005cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000023c 	.word	0x2000023c

0800156c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <USART3_IRQHandler+0x10>)
 8001572:	f004 fba5 	bl	8005cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002c4 	.word	0x200002c4

08001580 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001584:	4802      	ldr	r0, [pc, #8]	@ (8001590 <TIM6_DAC_IRQHandler+0x10>)
 8001586:	f004 f80f 	bl	80055a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000994 	.word	0x20000994

08001594 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001598:	4802      	ldr	r0, [pc, #8]	@ (80015a4 <DMA2_Stream2_IRQHandler+0x10>)
 800159a:	f000 fd01 	bl	8001fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000434 	.word	0x20000434

080015a8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//	printf("ETH_IRQHandler was called\n");
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80015ac:	4802      	ldr	r0, [pc, #8]	@ (80015b8 <ETH_IRQHandler+0x10>)
 80015ae:	f001 faef 	bl	8002b90 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20009d6c 	.word	0x20009d6c

080015bc <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80015c0:	4802      	ldr	r0, [pc, #8]	@ (80015cc <ETH_WKUP_IRQHandler+0x10>)
 80015c2:	f001 fae5 	bl	8002b90 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20009d6c 	.word	0x20009d6c

080015d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <USART6_IRQHandler+0x10>)
 80015d6:	f004 fb73 	bl	8005cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000034c 	.word	0x2000034c

080015e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return 1;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_kill>:

int _kill(int pid, int sig)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <_kill+0x20>)
 8001600:	2216      	movs	r2, #22
 8001602:	601a      	str	r2, [r3, #0]
  return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	20027610 	.word	0x20027610

08001618 <_exit>:

void _exit (int status)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe5 	bl	80015f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800162a:	bf00      	nop
 800162c:	e7fd      	b.n	800162a <_exit+0x12>

0800162e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e00a      	b.n	8001656 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001640:	f3af 8000 	nop.w
 8001644:	4601      	mov	r1, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	60ba      	str	r2, [r7, #8]
 800164c:	b2ca      	uxtb	r2, r1
 800164e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	dbf0      	blt.n	8001640 <_read+0x12>
  }

  return len;
 800165e:	687b      	ldr	r3, [r7, #4]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e009      	b.n	800168e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	60ba      	str	r2, [r7, #8]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fb7e 	bl	8000d84 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	dbf1      	blt.n	800167a <_write+0x12>
  }
  return len;
 8001696:	687b      	ldr	r3, [r7, #4]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_close>:

int _close(int file)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c8:	605a      	str	r2, [r3, #4]
  return 0;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_isatty>:

int _isatty(int file)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	@ (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	@ (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d205      	bcs.n	8001744 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <_sbrk+0x6c>)
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a06      	ldr	r2, [pc, #24]	@ (800176c <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	20050000 	.word	0x20050000
 8001768:	00000400 	.word	0x00000400
 800176c:	200009e0 	.word	0x200009e0
 8001770:	20027620 	.word	0x20027620
 8001774:	20027610 	.word	0x20027610

08001778 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017a0:	f7ff ffea 	bl	8001778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	@ (80017dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	@ (80017e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80017ca:	f015 fd6b 	bl	80172a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7fe ff05 	bl	80005dc <main>
  bx  lr    
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80017e0:	0801b034 	.word	0x0801b034
  ldr r2, =_sbss
 80017e4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80017e8:	20027620 	.word	0x20027620

080017ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC_IRQHandler>

080017ee <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <LAN8742_RegisterBusIO+0x28>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <LAN8742_RegisterBusIO+0x28>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <LAN8742_RegisterBusIO+0x28>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e014      	b.n	8001846 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d139      	bne.n	80018e2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2220      	movs	r2, #32
 8001880:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e01c      	b.n	80018c2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f107 020c 	add.w	r2, r7, #12
 8001890:	2112      	movs	r1, #18
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	4798      	blx	r3
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	da03      	bge.n	80018a4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800189c:	f06f 0304 	mvn.w	r3, #4
 80018a0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80018a2:	e00b      	b.n	80018bc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d105      	bne.n	80018bc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
         break;
 80018ba:	e005      	b.n	80018c8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b1f      	cmp	r3, #31
 80018c6:	d9df      	bls.n	8001888 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b1f      	cmp	r3, #31
 80018ce:	d902      	bls.n	80018d6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80018d0:	f06f 0302 	mvn.w	r3, #2
 80018d4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80018e2:	693b      	ldr	r3, [r7, #16]
 }
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6810      	ldr	r0, [r2, #0]
 8001900:	f107 020c 	add.w	r2, r7, #12
 8001904:	2101      	movs	r1, #1
 8001906:	4798      	blx	r3
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	da02      	bge.n	8001914 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800190e:	f06f 0304 	mvn.w	r3, #4
 8001912:	e06e      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6810      	ldr	r0, [r2, #0]
 800191c:	f107 020c 	add.w	r2, r7, #12
 8001920:	2101      	movs	r1, #1
 8001922:	4798      	blx	r3
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	da02      	bge.n	8001930 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800192a:	f06f 0304 	mvn.w	r3, #4
 800192e:	e060      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800193a:	2301      	movs	r3, #1
 800193c:	e059      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6810      	ldr	r0, [r2, #0]
 8001946:	f107 020c 	add.w	r2, r7, #12
 800194a:	2100      	movs	r1, #0
 800194c:	4798      	blx	r3
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	da02      	bge.n	800195a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001954:	f06f 0304 	mvn.w	r3, #4
 8001958:	e04b      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11b      	bne.n	800199c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <LAN8742_GetLinkState+0x90>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001978:	2302      	movs	r3, #2
 800197a:	e03a      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001986:	2303      	movs	r3, #3
 8001988:	e033      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001994:	2304      	movs	r3, #4
 8001996:	e02c      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001998:	2305      	movs	r3, #5
 800199a:	e02a      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6810      	ldr	r0, [r2, #0]
 80019a4:	f107 020c 	add.w	r2, r7, #12
 80019a8:	211f      	movs	r1, #31
 80019aa:	4798      	blx	r3
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	da02      	bge.n	80019b8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80019b2:	f06f 0304 	mvn.w	r3, #4
 80019b6:	e01c      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80019c2:	2306      	movs	r3, #6
 80019c4:	e015      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 031c 	and.w	r3, r3, #28
 80019cc:	2b18      	cmp	r3, #24
 80019ce:	d101      	bne.n	80019d4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80019d0:	2302      	movs	r3, #2
 80019d2:	e00e      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 031c 	and.w	r3, r3, #28
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d101      	bne.n	80019e2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80019de:	2303      	movs	r3, #3
 80019e0:	e007      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 031c 	and.w	r3, r3, #28
 80019e8:	2b14      	cmp	r3, #20
 80019ea:	d101      	bne.n	80019f0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80019ec:	2304      	movs	r3, #4
 80019ee:	e000      	b.n	80019f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80019f0:	2305      	movs	r3, #5
    }
  }
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fe:	2003      	movs	r0, #3
 8001a00:	f000 f8f9 	bl	8001bf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a04:	200f      	movs	r0, #15
 8001a06:	f7ff fce3 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0a:	f7ff fa53 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_IncTick+0x20>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_IncTick+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <HAL_IncTick+0x24>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	200009e4 	.word	0x200009e4

08001a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	200009e4 	.word	0x200009e4

08001a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff ffee 	bl	8001a3c <HAL_GetTick>
 8001a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d005      	beq.n	8001a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <HAL_Delay+0x44>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a7a:	bf00      	nop
 8001a7c:	f7ff ffde 	bl	8001a3c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d8f7      	bhi.n	8001a7c <HAL_Delay+0x28>
  {
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000008 	.word	0x20000008

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <__NVIC_SetPriorityGrouping+0x40>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <__NVIC_SetPriorityGrouping+0x40>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00
 8001ae0:	05fa0000 	.word	0x05fa0000

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	@ (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4907      	ldr	r1, [pc, #28]	@ (8001b38 <__NVIC_EnableIRQ+0x38>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	@ (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	@ (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	@ 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	@ 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ff4c 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1e:	f7ff ff61 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	6978      	ldr	r0, [r7, #20]
 8001c2a:	f7ff ffb1 	bl	8001b90 <NVIC_EncodePriority>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff80 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c3c:	bf00      	nop
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff54 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff fee6 	bl	8001a3c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e099      	b.n	8001db0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c9c:	e00f      	b.n	8001cbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c9e:	f7ff fecd 	bl	8001a3c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d908      	bls.n	8001cbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e078      	b.n	8001db0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e8      	bne.n	8001c9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	4b38      	ldr	r3, [pc, #224]	@ (8001db8 <HAL_DMA_Init+0x158>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d107      	bne.n	8001d28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d20:	4313      	orrs	r3, r2
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f023 0307 	bic.w	r3, r3, #7
 8001d3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d117      	bne.n	8001d82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00e      	beq.n	8001d82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fb09 	bl	800237c <DMA_CheckFifoParam>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2240      	movs	r2, #64	@ 0x40
 8001d74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e016      	b.n	8001db0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fac0 	bl	8002310 <DMA_CalcBaseAndBitshift>
 8001d90:	4603      	mov	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d98:	223f      	movs	r2, #63	@ 0x3f
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	f010803f 	.word	0xf010803f

08001dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_DMA_Start_IT+0x26>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e048      	b.n	8001e74 <HAL_DMA_Start_IT+0xb8>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d137      	bne.n	8001e66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 fa52 	bl	80022b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e14:	223f      	movs	r2, #63	@ 0x3f
 8001e16:	409a      	lsls	r2, r3
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0216 	orr.w	r2, r2, #22
 8001e2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e3a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0208 	orr.w	r2, r2, #8
 8001e52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e005      	b.n	8001e72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e8a:	f7ff fdd7 	bl	8001a3c <HAL_GetTick>
 8001e8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d008      	beq.n	8001eae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2280      	movs	r2, #128	@ 0x80
 8001ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e052      	b.n	8001f54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0216 	bic.w	r2, r2, #22
 8001ebc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ecc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <HAL_DMA_Abort+0x62>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0208 	bic.w	r2, r2, #8
 8001eec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0201 	bic.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efe:	e013      	b.n	8001f28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f00:	f7ff fd9c 	bl	8001a3c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d90c      	bls.n	8001f28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2220      	movs	r2, #32
 8001f12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e015      	b.n	8001f54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1e4      	bne.n	8001f00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3a:	223f      	movs	r2, #63	@ 0x3f
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d004      	beq.n	8001f7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2280      	movs	r2, #128	@ 0x80
 8001f74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00c      	b.n	8001f94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2205      	movs	r2, #5
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001fac:	4b8e      	ldr	r3, [pc, #568]	@ (80021e8 <HAL_DMA_IRQHandler+0x248>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a8e      	ldr	r2, [pc, #568]	@ (80021ec <HAL_DMA_IRQHandler+0x24c>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	0a9b      	lsrs	r3, r3, #10
 8001fb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fca:	2208      	movs	r2, #8
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01a      	beq.n	800200c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0204 	bic.w	r2, r2, #4
 8001ff2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002010:	2201      	movs	r2, #1
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d012      	beq.n	8002042 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202e:	2201      	movs	r2, #1
 8002030:	409a      	lsls	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	f043 0202 	orr.w	r2, r3, #2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002046:	2204      	movs	r2, #4
 8002048:	409a      	lsls	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d012      	beq.n	8002078 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00b      	beq.n	8002078 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	2204      	movs	r2, #4
 8002066:	409a      	lsls	r2, r3
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f043 0204 	orr.w	r2, r3, #4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207c:	2210      	movs	r2, #16
 800207e:	409a      	lsls	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d043      	beq.n	8002110 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d03c      	beq.n	8002110 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209a:	2210      	movs	r2, #16
 800209c:	409a      	lsls	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d018      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d108      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d024      	beq.n	8002110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	4798      	blx	r3
 80020ce:	e01f      	b.n	8002110 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01b      	beq.n	8002110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
 80020e0:	e016      	b.n	8002110 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0208 	bic.w	r2, r2, #8
 80020fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002114:	2220      	movs	r2, #32
 8002116:	409a      	lsls	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 808f 	beq.w	8002240 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8087 	beq.w	8002240 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002136:	2220      	movs	r2, #32
 8002138:	409a      	lsls	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b05      	cmp	r3, #5
 8002148:	d136      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0216 	bic.w	r2, r2, #22
 8002158:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002168:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d103      	bne.n	800217a <HAL_DMA_IRQHandler+0x1da>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002176:	2b00      	cmp	r3, #0
 8002178:	d007      	beq.n	800218a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0208 	bic.w	r2, r2, #8
 8002188:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218e:	223f      	movs	r2, #63	@ 0x3f
 8002190:	409a      	lsls	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d07e      	beq.n	80022ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
        }
        return;
 80021b6:	e079      	b.n	80022ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01d      	beq.n	8002202 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10d      	bne.n	80021f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d031      	beq.n	8002240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
 80021e4:	e02c      	b.n	8002240 <HAL_DMA_IRQHandler+0x2a0>
 80021e6:	bf00      	nop
 80021e8:	20000000 	.word	0x20000000
 80021ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d023      	beq.n	8002240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
 8002200:	e01e      	b.n	8002240 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10f      	bne.n	8002230 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0210 	bic.w	r2, r2, #16
 800221e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002244:	2b00      	cmp	r3, #0
 8002246:	d032      	beq.n	80022ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d022      	beq.n	800229a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2205      	movs	r2, #5
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	3301      	adds	r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	d307      	bcc.n	8002288 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f2      	bne.n	800226c <HAL_DMA_IRQHandler+0x2cc>
 8002286:	e000      	b.n	800228a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002288:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
 80022aa:	e000      	b.n	80022ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80022ac:	bf00      	nop
    }
  }
}
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b40      	cmp	r3, #64	@ 0x40
 80022e0:	d108      	bne.n	80022f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022f2:	e007      	b.n	8002304 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	60da      	str	r2, [r3, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3b10      	subs	r3, #16
 8002320:	4a13      	ldr	r2, [pc, #76]	@ (8002370 <DMA_CalcBaseAndBitshift+0x60>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800232a:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <DMA_CalcBaseAndBitshift+0x64>)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d908      	bls.n	8002350 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <DMA_CalcBaseAndBitshift+0x68>)
 8002346:	4013      	ands	r3, r2
 8002348:	1d1a      	adds	r2, r3, #4
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	659a      	str	r2, [r3, #88]	@ 0x58
 800234e:	e006      	b.n	800235e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <DMA_CalcBaseAndBitshift+0x68>)
 8002358:	4013      	ands	r3, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	aaaaaaab 	.word	0xaaaaaaab
 8002374:	0801ae10 	.word	0x0801ae10
 8002378:	fffffc00 	.word	0xfffffc00

0800237c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d11f      	bne.n	80023d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d856      	bhi.n	800244a <DMA_CheckFifoParam+0xce>
 800239c:	a201      	add	r2, pc, #4	@ (adr r2, 80023a4 <DMA_CheckFifoParam+0x28>)
 800239e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a2:	bf00      	nop
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023c7 	.word	0x080023c7
 80023ac:	080023b5 	.word	0x080023b5
 80023b0:	0800244b 	.word	0x0800244b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d046      	beq.n	800244e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c4:	e043      	b.n	800244e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023ce:	d140      	bne.n	8002452 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d4:	e03d      	b.n	8002452 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023de:	d121      	bne.n	8002424 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d837      	bhi.n	8002456 <DMA_CheckFifoParam+0xda>
 80023e6:	a201      	add	r2, pc, #4	@ (adr r2, 80023ec <DMA_CheckFifoParam+0x70>)
 80023e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ec:	080023fd 	.word	0x080023fd
 80023f0:	08002403 	.word	0x08002403
 80023f4:	080023fd 	.word	0x080023fd
 80023f8:	08002415 	.word	0x08002415
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002400:	e030      	b.n	8002464 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d025      	beq.n	800245a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002412:	e022      	b.n	800245a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002418:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800241c:	d11f      	bne.n	800245e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002422:	e01c      	b.n	800245e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d903      	bls.n	8002432 <DMA_CheckFifoParam+0xb6>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d003      	beq.n	8002438 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002430:	e018      	b.n	8002464 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
      break;
 8002436:	e015      	b.n	8002464 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00e      	beq.n	8002462 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
      break;
 8002448:	e00b      	b.n	8002462 <DMA_CheckFifoParam+0xe6>
      break;
 800244a:	bf00      	nop
 800244c:	e00a      	b.n	8002464 <DMA_CheckFifoParam+0xe8>
      break;
 800244e:	bf00      	nop
 8002450:	e008      	b.n	8002464 <DMA_CheckFifoParam+0xe8>
      break;
 8002452:	bf00      	nop
 8002454:	e006      	b.n	8002464 <DMA_CheckFifoParam+0xe8>
      break;
 8002456:	bf00      	nop
 8002458:	e004      	b.n	8002464 <DMA_CheckFifoParam+0xe8>
      break;
 800245a:	bf00      	nop
 800245c:	e002      	b.n	8002464 <DMA_CheckFifoParam+0xe8>
      break;   
 800245e:	bf00      	nop
 8002460:	e000      	b.n	8002464 <DMA_CheckFifoParam+0xe8>
      break;
 8002462:	bf00      	nop
    }
  } 
  
  return status; 
 8002464:	7bfb      	ldrb	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop

08002474 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e086      	b.n	8002594 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800248c:	2b00      	cmp	r3, #0
 800248e:	d106      	bne.n	800249e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f005 fd1f 	bl	8007edc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249e:	4b3f      	ldr	r3, [pc, #252]	@ (800259c <HAL_ETH_Init+0x128>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	4a3e      	ldr	r2, [pc, #248]	@ (800259c <HAL_ETH_Init+0x128>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024aa:	4b3c      	ldr	r3, [pc, #240]	@ (800259c <HAL_ETH_Init+0x128>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024b6:	4b3a      	ldr	r3, [pc, #232]	@ (80025a0 <HAL_ETH_Init+0x12c>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a39      	ldr	r2, [pc, #228]	@ (80025a0 <HAL_ETH_Init+0x12c>)
 80024bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024c2:	4b37      	ldr	r3, [pc, #220]	@ (80025a0 <HAL_ETH_Init+0x12c>)
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	4935      	ldr	r1, [pc, #212]	@ (80025a0 <HAL_ETH_Init+0x12c>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024d0:	4b33      	ldr	r3, [pc, #204]	@ (80025a0 <HAL_ETH_Init+0x12c>)
 80024d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ec:	f7ff faa6 	bl	8001a3c <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024f2:	e011      	b.n	8002518 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024f4:	f7ff faa2 	bl	8001a3c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002502:	d909      	bls.n	8002518 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2204      	movs	r2, #4
 8002508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	22e0      	movs	r2, #224	@ 0xe0
 8002510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e03d      	b.n	8002594 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1e4      	bne.n	80024f4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 ff5c 	bl	80033e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f001 f807 	bl	8003544 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f001 f85d 	bl	80035f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	461a      	mov	r2, r3
 8002542:	2100      	movs	r1, #0
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 ffc5 	bl	80034d4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002558:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <HAL_ETH_Init+0x130>)
 8002568:	430b      	orrs	r3, r1
 800256a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800257e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2210      	movs	r2, #16
 800258e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	40013800 	.word	0x40013800
 80025a4:	00020060 	.word	0x00020060

080025a8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d15f      	bne.n	800267a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2220      	movs	r2, #32
 80025be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2204      	movs	r2, #4
 80025cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f9f6 	bl	80029c0 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff fa39 	bl	8001a54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002600:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002618:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fd80 	bl	8003120 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0208 	orr.w	r2, r2, #8
 800262e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002638:	2001      	movs	r0, #1
 800263a:	f7ff fa0b 	bl	8001a54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0204 	orr.w	r2, r2, #4
 8002654:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800265e:	69d9      	ldr	r1, [r3, #28]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <HAL_ETH_Start_IT+0xdc>)
 8002666:	430b      	orrs	r3, r1
 8002668:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800266c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2240      	movs	r2, #64	@ 0x40
 8002672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
  }
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	0001a0c1 	.word	0x0001a0c1

08002688 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002696:	2b40      	cmp	r3, #64	@ 0x40
 8002698:	d16e      	bne.n	8002778 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026aa:	69d9      	ldr	r1, [r3, #28]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b34      	ldr	r3, [pc, #208]	@ (8002784 <HAL_ETH_Stop_IT+0xfc>)
 80026b2:	400b      	ands	r3, r1
 80026b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026b8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026d0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	f023 0302 	bic.w	r3, r3, #2
 80026e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026e8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0204 	bic.w	r2, r2, #4
 80026f8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002702:	2001      	movs	r0, #1
 8002704:	f7ff f9a6 	bl	8001a54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fd05 	bl	8003120 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0208 	bic.w	r2, r2, #8
 8002724:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800272e:	2001      	movs	r0, #1
 8002730:	f7ff f990 	bl	8001a54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	e00e      	b.n	8002760 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	3212      	adds	r2, #18
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d9ed      	bls.n	8002742 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2210      	movs	r2, #16
 8002770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	fffe5f3e 	.word	0xfffe5f3e

08002788 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e045      	b.n	8002838 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027b2:	2b40      	cmp	r3, #64	@ 0x40
 80027b4:	d13f      	bne.n	8002836 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80027be:	2201      	movs	r2, #1
 80027c0:	6839      	ldr	r1, [r7, #0]
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 ff86 	bl	80036d4 <ETH_Prepare_Tx_Descriptors>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d4:	f043 0202 	orr.w	r2, r3, #2
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e02a      	b.n	8002838 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027e2:	f3bf 8f4f 	dsb	sy
}
 80027e6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d904      	bls.n	8002804 <HAL_ETH_Transmit_IT+0x7c>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fe:	1f1a      	subs	r2, r3, #4
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800281e:	461a      	mov	r2, r3
 8002820:	2304      	movs	r3, #4
 8002822:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282c:	461a      	mov	r2, r3
 800282e:	2300      	movs	r3, #0
 8002830:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0a4      	b.n	80029b6 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002872:	2b40      	cmp	r3, #64	@ 0x40
 8002874:	d001      	beq.n	800287a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e09d      	b.n	80029b6 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	3212      	adds	r2, #18
 8002886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002890:	f1c3 0304 	rsb	r3, r3, #4
 8002894:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002896:	e066      	b.n	8002966 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d103      	bne.n	80028c8 <HAL_ETH_ReadData+0x88>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d03c      	beq.n	8002942 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80028ea:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002900:	2301      	movs	r3, #1
 8002902:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	b29b      	uxth	r3, r3
 8002922:	f005 fcaf 	bl	8008284 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	441a      	add	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2200      	movs	r2, #0
 8002940:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3301      	adds	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d902      	bls.n	8002954 <HAL_ETH_ReadData+0x114>
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3b04      	subs	r3, #4
 8002952:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	3212      	adds	r2, #18
 800295a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	3301      	adds	r3, #1
 8002964:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800296a:	2b00      	cmp	r3, #0
 800296c:	db06      	blt.n	800297c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	429a      	cmp	r2, r3
 8002974:	d202      	bcs.n	800297c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002976:	7cfb      	ldrb	r3, [r7, #19]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d08d      	beq.n	8002898 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	441a      	add	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f815 	bl	80029c0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d108      	bne.n	80029b4 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e000      	b.n	80029b6 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80029cc:	2301      	movs	r3, #1
 80029ce:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029d4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	3212      	adds	r2, #18
 80029dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029e6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80029e8:	e042      	b.n	8002a70 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d112      	bne.n	8002a18 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	4618      	mov	r0, r3
 80029f8:	f005 fc14 	bl	8008224 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	74fb      	strb	r3, [r7, #19]
 8002a06:	e007      	b.n	8002a18 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	461a      	mov	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d028      	beq.n	8002a70 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	4b26      	ldr	r3, [pc, #152]	@ (8002ac4 <ETH_UpdateDescriptor+0x104>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	6053      	str	r3, [r2, #4]
 8002a32:	e005      	b.n	8002a40 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d902      	bls.n	8002a5e <ETH_UpdateDescriptor+0x9e>
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	3b04      	subs	r3, #4
 8002a5c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	3212      	adds	r2, #18
 8002a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a68:	617b      	str	r3, [r7, #20]
      desccount--;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <ETH_UpdateDescriptor+0xbc>
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1b6      	bne.n	80029ea <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d01a      	beq.n	8002abc <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3303      	adds	r3, #3
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002a90:	f3bf 8f5f 	dmb	sy
}
 8002a94:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6919      	ldr	r1, [r3, #16]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	18ca      	adds	r2, r1, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aae:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002abc:	bf00      	nop
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	80004000 	.word	0x80004000

08002ac8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3318      	adds	r3, #24
 8002ad4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002ae6:	e047      	b.n	8002b78 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	3304      	adds	r3, #4
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10a      	bne.n	8002b18 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	3301      	adds	r3, #1
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d902      	bls.n	8002b14 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	3b04      	subs	r3, #4
 8002b12:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002b18:	7bbb      	ldrb	r3, [r7, #14]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02c      	beq.n	8002b78 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68d9      	ldr	r1, [r3, #12]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db1f      	blt.n	8002b74 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f005 fbe1 	bl	8008308 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	2200      	movs	r2, #0
 8002b52:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	3301      	adds	r3, #1
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d902      	bls.n	8002b66 <HAL_ETH_ReleaseTxPacket+0x9e>
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	3b04      	subs	r3, #4
 8002b64:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b72:	e001      	b.n	8002b78 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1b1      	bne.n	8002ae8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002bb8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce8 <HAL_ETH_IRQHandler+0x158>)
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00e      	beq.n	8002be6 <HAL_ETH_IRQHandler+0x56>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b43      	ldr	r3, [pc, #268]	@ (8002cec <HAL_ETH_IRQHandler+0x15c>)
 8002bde:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f004 febb 	bl	800795c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00f      	beq.n	8002c10 <HAL_ETH_IRQHandler+0x80>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c02:	461a      	mov	r2, r3
 8002c04:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002c08:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f004 feb6 	bl	800797c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d042      	beq.n	8002ca0 <HAL_ETH_IRQHandler+0x110>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d03d      	beq.n	8002ca0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2a:	f043 0208 	orr.w	r2, r3, #8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d01a      	beq.n	8002c74 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	4b29      	ldr	r3, [pc, #164]	@ (8002cf0 <HAL_ETH_IRQHandler+0x160>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002c64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c68:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	22e0      	movs	r2, #224	@ 0xe0
 8002c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002c72:	e012      	b.n	8002c9a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002c82:	4013      	ands	r3, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c92:	461a      	mov	r2, r3
 8002c94:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002c98:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f004 fe7e 	bl	800799c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f81a 	bl	8002cf4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d006      	beq.n	8002ce0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002cd2:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <HAL_ETH_IRQHandler+0x158>)
 8002cd4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002cd8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f814 	bl	8002d08 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40013c00 	.word	0x40013c00
 8002cec:	00010040 	.word	0x00010040
 8002cf0:	007e2000 	.word	0x007e2000

08002cf4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 031c 	and.w	r3, r3, #28
 8002d38:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	02db      	lsls	r3, r3, #11
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f023 0302 	bic.w	r3, r3, #2
 8002d5a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002d6c:	f7fe fe66 	bl	8001a3c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d72:	e00d      	b.n	8002d90 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002d74:	f7fe fe62 	bl	8001a3c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d82:	d301      	bcc.n	8002d88 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e010      	b.n	8002daa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ec      	bne.n	8002d74 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 031c 	and.w	r3, r3, #28
 8002dce:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	02db      	lsls	r3, r3, #11
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	019b      	lsls	r3, r3, #6
 8002de0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e0c:	f7fe fe16 	bl	8001a3c <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e12:	e00d      	b.n	8002e30 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002e14:	f7fe fe12 	bl	8001a3c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e22:	d301      	bcc.n	8002e28 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e009      	b.n	8002e3c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ec      	bne.n	8002e14 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0e6      	b.n	8003026 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf14      	ite	ne
 8002e66:	2301      	movne	r3, #1
 8002e68:	2300      	moveq	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf14      	ite	ne
 8002ee0:	2301      	movne	r3, #1
 8002ee2:	2300      	moveq	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	0c1b      	lsrs	r3, r3, #16
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf14      	ite	ne
 8003016:	2301      	movne	r3, #1
 8003018:	2300      	moveq	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e00b      	b.n	800305e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800304c:	2b10      	cmp	r3, #16
 800304e:	d105      	bne.n	800305c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f88a 	bl	800316c <ETH_SetMACConfig>

    return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e000      	b.n	800305e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 031c 	bic.w	r3, r3, #28
 800307e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003080:	f001 fd62 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8003084:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4a14      	ldr	r2, [pc, #80]	@ (80030dc <HAL_ETH_SetMDIOClockRange+0x74>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d804      	bhi.n	8003098 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f043 0308 	orr.w	r3, r3, #8
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e019      	b.n	80030cc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4a11      	ldr	r2, [pc, #68]	@ (80030e0 <HAL_ETH_SetMDIOClockRange+0x78>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d204      	bcs.n	80030aa <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f043 030c 	orr.w	r3, r3, #12
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e010      	b.n	80030cc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4a0d      	ldr	r2, [pc, #52]	@ (80030e4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d90c      	bls.n	80030cc <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4a0c      	ldr	r2, [pc, #48]	@ (80030e8 <HAL_ETH_SetMDIOClockRange+0x80>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d804      	bhi.n	80030c4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e003      	b.n	80030cc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f043 0310 	orr.w	r3, r3, #16
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	611a      	str	r2, [r3, #16]
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	02160ebf 	.word	0x02160ebf
 80030e0:	03938700 	.word	0x03938700
 80030e4:	05f5e0ff 	.word	0x05f5e0ff
 80030e8:	08f0d17f 	.word	0x08f0d17f

080030ec <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800313e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003142:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003150:	2001      	movs	r0, #1
 8003152:	f7fe fc7f 	bl	8001a54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003160:	6193      	str	r3, [r2, #24]
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4b53      	ldr	r3, [pc, #332]	@ (80032d0 <ETH_SetMACConfig+0x164>)
 8003182:	4013      	ands	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	7b9b      	ldrb	r3, [r3, #14]
 800318a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	7c12      	ldrb	r2, [r2, #16]
 8003190:	2a00      	cmp	r2, #0
 8003192:	d102      	bne.n	800319a <ETH_SetMACConfig+0x2e>
 8003194:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003198:	e000      	b.n	800319c <ETH_SetMACConfig+0x30>
 800319a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800319c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	7c52      	ldrb	r2, [r2, #17]
 80031a2:	2a00      	cmp	r2, #0
 80031a4:	d102      	bne.n	80031ac <ETH_SetMACConfig+0x40>
 80031a6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80031aa:	e000      	b.n	80031ae <ETH_SetMACConfig+0x42>
 80031ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	7fdb      	ldrb	r3, [r3, #31]
 80031ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80031bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	7f92      	ldrb	r2, [r2, #30]
 80031c8:	2a00      	cmp	r2, #0
 80031ca:	d102      	bne.n	80031d2 <ETH_SetMACConfig+0x66>
 80031cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031d0:	e000      	b.n	80031d4 <ETH_SetMACConfig+0x68>
 80031d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80031d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	7f1b      	ldrb	r3, [r3, #28]
 80031da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	791b      	ldrb	r3, [r3, #4]
 80031e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80031ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80031f2:	2a00      	cmp	r2, #0
 80031f4:	d102      	bne.n	80031fc <ETH_SetMACConfig+0x90>
 80031f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031fa:	e000      	b.n	80031fe <ETH_SetMACConfig+0x92>
 80031fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	7bdb      	ldrb	r3, [r3, #15]
 8003204:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003206:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800320c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003214:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003216:	4313      	orrs	r3, r2
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800322e:	2001      	movs	r0, #1
 8003230:	f7fe fc10 	bl	8001a54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800324a:	4013      	ands	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003252:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800325a:	2a00      	cmp	r2, #0
 800325c:	d101      	bne.n	8003262 <ETH_SetMACConfig+0xf6>
 800325e:	2280      	movs	r2, #128	@ 0x80
 8003260:	e000      	b.n	8003264 <ETH_SetMACConfig+0xf8>
 8003262:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003264:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800326a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003272:	2a01      	cmp	r2, #1
 8003274:	d101      	bne.n	800327a <ETH_SetMACConfig+0x10e>
 8003276:	2208      	movs	r2, #8
 8003278:	e000      	b.n	800327c <ETH_SetMACConfig+0x110>
 800327a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800327c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003284:	2a01      	cmp	r2, #1
 8003286:	d101      	bne.n	800328c <ETH_SetMACConfig+0x120>
 8003288:	2204      	movs	r2, #4
 800328a:	e000      	b.n	800328e <ETH_SetMACConfig+0x122>
 800328c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800328e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003296:	2a01      	cmp	r2, #1
 8003298:	d101      	bne.n	800329e <ETH_SetMACConfig+0x132>
 800329a:	2202      	movs	r2, #2
 800329c:	e000      	b.n	80032a0 <ETH_SetMACConfig+0x134>
 800329e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032a0:	4313      	orrs	r3, r2
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032b8:	2001      	movs	r0, #1
 80032ba:	f7fe fbcb 	bl	8001a54 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	619a      	str	r2, [r3, #24]
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	fd20810f 	.word	0xfd20810f

080032d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4b3d      	ldr	r3, [pc, #244]	@ (80033e4 <ETH_SetDMAConfig+0x110>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	7b1b      	ldrb	r3, [r3, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <ETH_SetDMAConfig+0x2c>
 80032fa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80032fe:	e000      	b.n	8003302 <ETH_SetDMAConfig+0x2e>
 8003300:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	7b5b      	ldrb	r3, [r3, #13]
 8003306:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003308:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	7f52      	ldrb	r2, [r2, #29]
 800330e:	2a00      	cmp	r2, #0
 8003310:	d102      	bne.n	8003318 <ETH_SetDMAConfig+0x44>
 8003312:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003316:	e000      	b.n	800331a <ETH_SetDMAConfig+0x46>
 8003318:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800331a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	7b9b      	ldrb	r3, [r3, #14]
 8003320:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003322:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003328:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	7f1b      	ldrb	r3, [r3, #28]
 800332e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003330:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	7f9b      	ldrb	r3, [r3, #30]
 8003336:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003338:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800333e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003346:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003348:	4313      	orrs	r3, r2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003358:	461a      	mov	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800336a:	2001      	movs	r0, #1
 800336c:	f7fe fb72 	bl	8001a54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003378:	461a      	mov	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	791b      	ldrb	r3, [r3, #4]
 8003382:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003388:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800338e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003394:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800339c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800339e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80033a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80033ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033c8:	2001      	movs	r0, #1
 80033ca:	f7fe fb43 	bl	8001a54 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6013      	str	r3, [r2, #0]
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	f8de3f23 	.word	0xf8de3f23

080033e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b0a6      	sub	sp, #152	@ 0x98
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80033fc:	2300      	movs	r3, #0
 80033fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800340c:	2300      	movs	r3, #0
 800340e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800341e:	2300      	movs	r3, #0
 8003420:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800342a:	2300      	movs	r3, #0
 800342c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003434:	2300      	movs	r3, #0
 8003436:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003438:	2300      	movs	r3, #0
 800343a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800343e:	2300      	movs	r3, #0
 8003440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003444:	2300      	movs	r3, #0
 8003446:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800344a:	2300      	movs	r3, #0
 800344c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003450:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003454:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003456:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800345a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003462:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff fe7f 	bl	800316c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800346e:	2301      	movs	r3, #1
 8003470:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003472:	2301      	movs	r3, #1
 8003474:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003476:	2301      	movs	r3, #1
 8003478:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800347c:	2301      	movs	r3, #1
 800347e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003484:	2300      	movs	r3, #0
 8003486:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003490:	2300      	movs	r3, #0
 8003492:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800349a:	2301      	movs	r3, #1
 800349c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800349e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80034a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80034a8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80034aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034ae:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff05 	bl	80032d4 <ETH_SetDMAConfig>
}
 80034ca:	bf00      	nop
 80034cc:	3798      	adds	r7, #152	@ 0x98
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3305      	adds	r3, #5
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	3204      	adds	r2, #4
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <ETH_MACAddressConfig+0x68>)
 80034f6:	4413      	add	r3, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3303      	adds	r3, #3
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	061a      	lsls	r2, r3, #24
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3302      	adds	r3, #2
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3301      	adds	r3, #1
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	4313      	orrs	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	7812      	ldrb	r2, [r2, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <ETH_MACAddressConfig+0x6c>)
 8003526:	4413      	add	r3, r2
 8003528:	461a      	mov	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	6013      	str	r3, [r2, #0]
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40028040 	.word	0x40028040
 8003540:	40028044 	.word	0x40028044

08003544 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e03e      	b.n	80035d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68d9      	ldr	r1, [r3, #12]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	440b      	add	r3, r1
 8003562:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2200      	movs	r2, #0
 800356e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2200      	movs	r2, #0
 800357a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	3206      	adds	r2, #6
 8003584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d80c      	bhi.n	80035b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68d9      	ldr	r1, [r3, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	440b      	add	r3, r1
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e004      	b.n	80035be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3301      	adds	r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d9bd      	bls.n	8003552 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035e8:	611a      	str	r2, [r3, #16]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	e048      	b.n	8003696 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6919      	ldr	r1, [r3, #16]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	440b      	add	r3, r1
 8003614:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2200      	movs	r2, #0
 8003620:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2200      	movs	r2, #0
 8003626:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2200      	movs	r2, #0
 800362c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2200      	movs	r2, #0
 8003632:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2200      	movs	r2, #0
 8003638:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003640:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	3212      	adds	r2, #18
 8003662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d80c      	bhi.n	8003686 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6919      	ldr	r1, [r3, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	461a      	mov	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	60da      	str	r2, [r3, #12]
 8003684:	e004      	b.n	8003690 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3301      	adds	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d9b3      	bls.n	8003604 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036c6:	60da      	str	r2, [r3, #12]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b091      	sub	sp, #68	@ 0x44
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3318      	adds	r3, #24
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fe:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003712:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003716:	d007      	beq.n	8003728 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800371c:	3304      	adds	r3, #4
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003728:	2302      	movs	r3, #2
 800372a:	e111      	b.n	8003950 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800372c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372e:	3301      	adds	r3, #1
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	4b86      	ldr	r3, [pc, #536]	@ (800395c <ETH_Prepare_Tx_Descriptors+0x288>)
 8003742:	4013      	ands	r3, r2
 8003744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003746:	6852      	ldr	r2, [r2, #4]
 8003748:	431a      	orrs	r2, r3
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800375a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	431a      	orrs	r2, r3
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	431a      	orrs	r2, r3
 8003786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003788:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800379e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80037ae:	e082      	b.n	80038b6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80037b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80037b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ba:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80037c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80037ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e005      	b.n	80037dc <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037da:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80037dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037de:	3301      	adds	r3, #1
 80037e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d902      	bls.n	80037ee <ETH_Prepare_Tx_Descriptors+0x11a>
 80037e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ea:	3b04      	subs	r3, #4
 80037ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80037f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003800:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003804:	d007      	beq.n	8003816 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800380a:	3304      	adds	r3, #4
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d029      	beq.n	800386a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800381e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003822:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003824:	2300      	movs	r3, #0
 8003826:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003828:	e019      	b.n	800385e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800382a:	f3bf 8f5f 	dmb	sy
}
 800382e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800383c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800383e:	3301      	adds	r3, #1
 8003840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003844:	2b03      	cmp	r3, #3
 8003846:	d902      	bls.n	800384e <ETH_Prepare_Tx_Descriptors+0x17a>
 8003848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800384a:	3b04      	subs	r3, #4
 800384c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003856:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385a:	3301      	adds	r3, #1
 800385c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800385e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003862:	429a      	cmp	r2, r3
 8003864:	d3e1      	bcc.n	800382a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003866:	2302      	movs	r3, #2
 8003868:	e072      	b.n	8003950 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800386a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003874:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003878:	3301      	adds	r3, #1
 800387a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800387c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	4b32      	ldr	r3, [pc, #200]	@ (800395c <ETH_Prepare_Tx_Descriptors+0x288>)
 8003892:	4013      	ands	r3, r2
 8003894:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003896:	6852      	ldr	r2, [r2, #4]
 8003898:	431a      	orrs	r2, r3
 800389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	3301      	adds	r3, #1
 80038a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80038a4:	f3bf 8f5f 	dmb	sy
}
 80038a8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80038b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f47f af78 	bne.w	80037b0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d006      	beq.n	80038d4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80038c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e005      	b.n	80038e0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80038d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038de:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80038e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	6a3a      	ldr	r2, [r7, #32]
 80038f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80038f6:	f3bf 8f5f 	dmb	sy
}
 80038fa:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80038fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800390c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800390e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003910:	3304      	adds	r3, #4
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800391c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391e:	f3ef 8310 	mrs	r3, PRIMASK
 8003922:	613b      	str	r3, [r7, #16]
  return(result);
 8003924:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f383 8810 	msr	PRIMASK, r3
}
 8003932:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393a:	4413      	add	r3, r2
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	629a      	str	r2, [r3, #40]	@ 0x28
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f383 8810 	msr	PRIMASK, r3
}
 800394c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3744      	adds	r7, #68	@ 0x44
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	ffffe000 	.word	0xffffe000

08003960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003960:	b480      	push	{r7}
 8003962:	b089      	sub	sp, #36	@ 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
 800397e:	e175      	b.n	8003c6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003980:	2201      	movs	r2, #1
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	429a      	cmp	r2, r3
 800399a:	f040 8164 	bne.w	8003c66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d005      	beq.n	80039b6 <HAL_GPIO_Init+0x56>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d130      	bne.n	8003a18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	2203      	movs	r2, #3
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039ec:	2201      	movs	r2, #1
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 0201 	and.w	r2, r3, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d017      	beq.n	8003a54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	2203      	movs	r2, #3
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d123      	bne.n	8003aa8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	08da      	lsrs	r2, r3, #3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3208      	adds	r2, #8
 8003a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	220f      	movs	r2, #15
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	08da      	lsrs	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3208      	adds	r2, #8
 8003aa2:	69b9      	ldr	r1, [r7, #24]
 8003aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0203 	and.w	r2, r3, #3
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80be 	beq.w	8003c66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	4b66      	ldr	r3, [pc, #408]	@ (8003c84 <HAL_GPIO_Init+0x324>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	4a65      	ldr	r2, [pc, #404]	@ (8003c84 <HAL_GPIO_Init+0x324>)
 8003af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003af6:	4b63      	ldr	r3, [pc, #396]	@ (8003c84 <HAL_GPIO_Init+0x324>)
 8003af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b02:	4a61      	ldr	r2, [pc, #388]	@ (8003c88 <HAL_GPIO_Init+0x328>)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	3302      	adds	r3, #2
 8003b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	220f      	movs	r2, #15
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a58      	ldr	r2, [pc, #352]	@ (8003c8c <HAL_GPIO_Init+0x32c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d037      	beq.n	8003b9e <HAL_GPIO_Init+0x23e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a57      	ldr	r2, [pc, #348]	@ (8003c90 <HAL_GPIO_Init+0x330>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d031      	beq.n	8003b9a <HAL_GPIO_Init+0x23a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a56      	ldr	r2, [pc, #344]	@ (8003c94 <HAL_GPIO_Init+0x334>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02b      	beq.n	8003b96 <HAL_GPIO_Init+0x236>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a55      	ldr	r2, [pc, #340]	@ (8003c98 <HAL_GPIO_Init+0x338>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d025      	beq.n	8003b92 <HAL_GPIO_Init+0x232>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a54      	ldr	r2, [pc, #336]	@ (8003c9c <HAL_GPIO_Init+0x33c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01f      	beq.n	8003b8e <HAL_GPIO_Init+0x22e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a53      	ldr	r2, [pc, #332]	@ (8003ca0 <HAL_GPIO_Init+0x340>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d019      	beq.n	8003b8a <HAL_GPIO_Init+0x22a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a52      	ldr	r2, [pc, #328]	@ (8003ca4 <HAL_GPIO_Init+0x344>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_GPIO_Init+0x226>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a51      	ldr	r2, [pc, #324]	@ (8003ca8 <HAL_GPIO_Init+0x348>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00d      	beq.n	8003b82 <HAL_GPIO_Init+0x222>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a50      	ldr	r2, [pc, #320]	@ (8003cac <HAL_GPIO_Init+0x34c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d007      	beq.n	8003b7e <HAL_GPIO_Init+0x21e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4f      	ldr	r2, [pc, #316]	@ (8003cb0 <HAL_GPIO_Init+0x350>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d101      	bne.n	8003b7a <HAL_GPIO_Init+0x21a>
 8003b76:	2309      	movs	r3, #9
 8003b78:	e012      	b.n	8003ba0 <HAL_GPIO_Init+0x240>
 8003b7a:	230a      	movs	r3, #10
 8003b7c:	e010      	b.n	8003ba0 <HAL_GPIO_Init+0x240>
 8003b7e:	2308      	movs	r3, #8
 8003b80:	e00e      	b.n	8003ba0 <HAL_GPIO_Init+0x240>
 8003b82:	2307      	movs	r3, #7
 8003b84:	e00c      	b.n	8003ba0 <HAL_GPIO_Init+0x240>
 8003b86:	2306      	movs	r3, #6
 8003b88:	e00a      	b.n	8003ba0 <HAL_GPIO_Init+0x240>
 8003b8a:	2305      	movs	r3, #5
 8003b8c:	e008      	b.n	8003ba0 <HAL_GPIO_Init+0x240>
 8003b8e:	2304      	movs	r3, #4
 8003b90:	e006      	b.n	8003ba0 <HAL_GPIO_Init+0x240>
 8003b92:	2303      	movs	r3, #3
 8003b94:	e004      	b.n	8003ba0 <HAL_GPIO_Init+0x240>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e002      	b.n	8003ba0 <HAL_GPIO_Init+0x240>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_GPIO_Init+0x240>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	f002 0203 	and.w	r2, r2, #3
 8003ba6:	0092      	lsls	r2, r2, #2
 8003ba8:	4093      	lsls	r3, r2
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003bb0:	4935      	ldr	r1, [pc, #212]	@ (8003c88 <HAL_GPIO_Init+0x328>)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb4 <HAL_GPIO_Init+0x354>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003be2:	4a34      	ldr	r2, [pc, #208]	@ (8003cb4 <HAL_GPIO_Init+0x354>)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003be8:	4b32      	ldr	r3, [pc, #200]	@ (8003cb4 <HAL_GPIO_Init+0x354>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c0c:	4a29      	ldr	r2, [pc, #164]	@ (8003cb4 <HAL_GPIO_Init+0x354>)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c12:	4b28      	ldr	r3, [pc, #160]	@ (8003cb4 <HAL_GPIO_Init+0x354>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c36:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb4 <HAL_GPIO_Init+0x354>)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb4 <HAL_GPIO_Init+0x354>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c60:	4a14      	ldr	r2, [pc, #80]	@ (8003cb4 <HAL_GPIO_Init+0x354>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	f67f ae86 	bls.w	8003980 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	3724      	adds	r7, #36	@ 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	40020000 	.word	0x40020000
 8003c90:	40020400 	.word	0x40020400
 8003c94:	40020800 	.word	0x40020800
 8003c98:	40020c00 	.word	0x40020c00
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40021400 	.word	0x40021400
 8003ca4:	40021800 	.word	0x40021800
 8003ca8:	40021c00 	.word	0x40021c00
 8003cac:	40022000 	.word	0x40022000
 8003cb0:	40022400 	.word	0x40022400
 8003cb4:	40013c00 	.word	0x40013c00

08003cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	807b      	strh	r3, [r7, #2]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc8:	787b      	ldrb	r3, [r7, #1]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cce:	887a      	ldrh	r2, [r7, #2]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003cd4:	e003      	b.n	8003cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003cd6:	887b      	ldrh	r3, [r7, #2]
 8003cd8:	041a      	lsls	r2, r3, #16
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	619a      	str	r2, [r3, #24]
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cfc:	887a      	ldrh	r2, [r7, #2]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4013      	ands	r3, r2
 8003d02:	041a      	lsls	r2, r3, #16
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	43d9      	mvns	r1, r3
 8003d08:	887b      	ldrh	r3, [r7, #2]
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	619a      	str	r2, [r3, #24]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e08b      	b.n	8003e4a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd f8dc 	bl	8000f04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	@ 0x24
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d107      	bne.n	8003d9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	e006      	b.n	8003da8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003da6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d108      	bne.n	8003dc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	e007      	b.n	8003dd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <HAL_I2C_Init+0x134>)
 8003dde:	430b      	orrs	r3, r1
 8003de0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003df0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69d9      	ldr	r1, [r3, #28]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	02008000 	.word	0x02008000

08003e58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d138      	bne.n	8003ee0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e032      	b.n	8003ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2224      	movs	r2, #36	@ 0x24
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d139      	bne.n	8003f78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e033      	b.n	8003f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2224      	movs	r2, #36	@ 0x24
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e000      	b.n	8003f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
  }
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b086      	sub	sp, #24
 8003f8a:	af02      	add	r7, sp, #8
 8003f8c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e108      	b.n	80041aa <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd f992 	bl	80012dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2203      	movs	r2, #3
 8003fbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fc6:	d102      	bne.n	8003fce <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f003 f8a2 	bl	800711c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	7c1a      	ldrb	r2, [r3, #16]
 8003fe0:	f88d 2000 	strb.w	r2, [sp]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fe8:	f003 f83e 	bl	8007068 <USB_CoreInit>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e0d5      	b.n	80041aa <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f003 f89a 	bl	800713e <USB_SetCurrentMode>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0c6      	b.n	80041aa <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]
 8004020:	e04a      	b.n	80040b8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004022:	7bfa      	ldrb	r2, [r7, #15]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	3315      	adds	r3, #21
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	3314      	adds	r3, #20
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	b298      	uxth	r0, r3
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	332e      	adds	r3, #46	@ 0x2e
 800405e:	4602      	mov	r2, r0
 8004060:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	3318      	adds	r3, #24
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	331c      	adds	r3, #28
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800408a:	7bfa      	ldrb	r2, [r7, #15]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	3320      	adds	r3, #32
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800409e:	7bfa      	ldrb	r2, [r7, #15]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	3324      	adds	r3, #36	@ 0x24
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	3301      	adds	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	791b      	ldrb	r3, [r3, #4]
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d3af      	bcc.n	8004022 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]
 80040c6:	e044      	b.n	8004152 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80040f0:	7bfa      	ldrb	r2, [r7, #15]
 80040f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800410a:	7bfa      	ldrb	r2, [r7, #15]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004136:	7bfa      	ldrb	r2, [r7, #15]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	3301      	adds	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	791b      	ldrb	r3, [r3, #4]
 8004156:	7bfa      	ldrb	r2, [r7, #15]
 8004158:	429a      	cmp	r2, r3
 800415a:	d3b5      	bcc.n	80040c8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7c1a      	ldrb	r2, [r3, #16]
 8004164:	f88d 2000 	strb.w	r2, [sp]
 8004168:	3304      	adds	r3, #4
 800416a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800416c:	f003 f834 	bl	80071d8 <USB_DevInit>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e013      	b.n	80041aa <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7b1b      	ldrb	r3, [r3, #12]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d102      	bne.n	800419e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f80b 	bl	80041b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f003 f9ef 	bl	8007586 <USB_DevDisconnect>

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041e2:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	10000003 	.word	0x10000003

080041fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004200:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a04      	ldr	r2, [pc, #16]	@ (8004218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800420a:	6013      	str	r3, [r2, #0]
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40007000 	.word	0x40007000

0800421c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004224:	2300      	movs	r3, #0
 8004226:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e291      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8087 	beq.w	800434e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004240:	4b96      	ldr	r3, [pc, #600]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b04      	cmp	r3, #4
 800424a:	d00c      	beq.n	8004266 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424c:	4b93      	ldr	r3, [pc, #588]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b08      	cmp	r3, #8
 8004256:	d112      	bne.n	800427e <HAL_RCC_OscConfig+0x62>
 8004258:	4b90      	ldr	r3, [pc, #576]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004264:	d10b      	bne.n	800427e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004266:	4b8d      	ldr	r3, [pc, #564]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d06c      	beq.n	800434c <HAL_RCC_OscConfig+0x130>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d168      	bne.n	800434c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e26b      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x7a>
 8004288:	4b84      	ldr	r3, [pc, #528]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a83      	ldr	r2, [pc, #524]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	e02e      	b.n	80042f4 <HAL_RCC_OscConfig+0xd8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x9c>
 800429e:	4b7f      	ldr	r3, [pc, #508]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7e      	ldr	r2, [pc, #504]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b7c      	ldr	r3, [pc, #496]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7b      	ldr	r2, [pc, #492]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e01d      	b.n	80042f4 <HAL_RCC_OscConfig+0xd8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0xc0>
 80042c2:	4b76      	ldr	r3, [pc, #472]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a75      	ldr	r2, [pc, #468]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b73      	ldr	r3, [pc, #460]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a72      	ldr	r2, [pc, #456]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0xd8>
 80042dc:	4b6f      	ldr	r3, [pc, #444]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a6e      	ldr	r2, [pc, #440]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b6c      	ldr	r3, [pc, #432]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a6b      	ldr	r2, [pc, #428]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80042ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fd fb9e 	bl	8001a3c <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004304:	f7fd fb9a 	bl	8001a3c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	@ 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e21f      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b61      	ldr	r3, [pc, #388]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0xe8>
 8004322:	e014      	b.n	800434e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd fb8a 	bl	8001a3c <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800432c:	f7fd fb86 	bl	8001a3c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	@ 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e20b      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433e:	4b57      	ldr	r3, [pc, #348]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x110>
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d069      	beq.n	800442e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800435a:	4b50      	ldr	r3, [pc, #320]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004366:	4b4d      	ldr	r3, [pc, #308]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b08      	cmp	r3, #8
 8004370:	d11c      	bne.n	80043ac <HAL_RCC_OscConfig+0x190>
 8004372:	4b4a      	ldr	r3, [pc, #296]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d116      	bne.n	80043ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	4b47      	ldr	r3, [pc, #284]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_RCC_OscConfig+0x17a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d001      	beq.n	8004396 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e1df      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004396:	4b41      	ldr	r3, [pc, #260]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	493d      	ldr	r1, [pc, #244]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	e040      	b.n	800442e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d023      	beq.n	80043fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b4:	4b39      	ldr	r3, [pc, #228]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a38      	ldr	r2, [pc, #224]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd fb3c 	bl	8001a3c <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fd fb38 	bl	8001a3c <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e1bd      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043da:	4b30      	ldr	r3, [pc, #192]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e6:	4b2d      	ldr	r3, [pc, #180]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4929      	ldr	r1, [pc, #164]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]
 80043fa:	e018      	b.n	800442e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fc:	4b27      	ldr	r3, [pc, #156]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a26      	ldr	r2, [pc, #152]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fd fb18 	bl	8001a3c <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004410:	f7fd fb14 	bl	8001a3c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e199      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b1e      	ldr	r3, [pc, #120]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d038      	beq.n	80044ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d019      	beq.n	8004476 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b16      	ldr	r3, [pc, #88]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004446:	4a15      	ldr	r2, [pc, #84]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7fd faf5 	bl	8001a3c <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004456:	f7fd faf1 	bl	8001a3c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e176      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004468:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 800446a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x23a>
 8004474:	e01a      	b.n	80044ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004476:	4b09      	ldr	r3, [pc, #36]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 8004478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800447a:	4a08      	ldr	r2, [pc, #32]	@ (800449c <HAL_RCC_OscConfig+0x280>)
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004482:	f7fd fadb 	bl	8001a3c <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004488:	e00a      	b.n	80044a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448a:	f7fd fad7 	bl	8001a3c <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d903      	bls.n	80044a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e15c      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
 800449c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	4b91      	ldr	r3, [pc, #580]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80044a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1ee      	bne.n	800448a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80a4 	beq.w	8004602 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ba:	4b8b      	ldr	r3, [pc, #556]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10d      	bne.n	80044e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	4b88      	ldr	r3, [pc, #544]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	4a87      	ldr	r2, [pc, #540]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044d2:	4b85      	ldr	r3, [pc, #532]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e2:	4b82      	ldr	r3, [pc, #520]	@ (80046ec <HAL_RCC_OscConfig+0x4d0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d118      	bne.n	8004520 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044ee:	4b7f      	ldr	r3, [pc, #508]	@ (80046ec <HAL_RCC_OscConfig+0x4d0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a7e      	ldr	r2, [pc, #504]	@ (80046ec <HAL_RCC_OscConfig+0x4d0>)
 80044f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fa:	f7fd fa9f 	bl	8001a3c <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004502:	f7fd fa9b 	bl	8001a3c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b64      	cmp	r3, #100	@ 0x64
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e120      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004514:	4b75      	ldr	r3, [pc, #468]	@ (80046ec <HAL_RCC_OscConfig+0x4d0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d106      	bne.n	8004536 <HAL_RCC_OscConfig+0x31a>
 8004528:	4b6f      	ldr	r3, [pc, #444]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452c:	4a6e      	ldr	r2, [pc, #440]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6713      	str	r3, [r2, #112]	@ 0x70
 8004534:	e02d      	b.n	8004592 <HAL_RCC_OscConfig+0x376>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0x33c>
 800453e:	4b6a      	ldr	r3, [pc, #424]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004542:	4a69      	ldr	r2, [pc, #420]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	6713      	str	r3, [r2, #112]	@ 0x70
 800454a:	4b67      	ldr	r3, [pc, #412]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454e:	4a66      	ldr	r2, [pc, #408]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004550:	f023 0304 	bic.w	r3, r3, #4
 8004554:	6713      	str	r3, [r2, #112]	@ 0x70
 8004556:	e01c      	b.n	8004592 <HAL_RCC_OscConfig+0x376>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b05      	cmp	r3, #5
 800455e:	d10c      	bne.n	800457a <HAL_RCC_OscConfig+0x35e>
 8004560:	4b61      	ldr	r3, [pc, #388]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004564:	4a60      	ldr	r2, [pc, #384]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004566:	f043 0304 	orr.w	r3, r3, #4
 800456a:	6713      	str	r3, [r2, #112]	@ 0x70
 800456c:	4b5e      	ldr	r3, [pc, #376]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004570:	4a5d      	ldr	r2, [pc, #372]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6713      	str	r3, [r2, #112]	@ 0x70
 8004578:	e00b      	b.n	8004592 <HAL_RCC_OscConfig+0x376>
 800457a:	4b5b      	ldr	r3, [pc, #364]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	4a5a      	ldr	r2, [pc, #360]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	6713      	str	r3, [r2, #112]	@ 0x70
 8004586:	4b58      	ldr	r3, [pc, #352]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	4a57      	ldr	r2, [pc, #348]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 800458c:	f023 0304 	bic.w	r3, r3, #4
 8004590:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d015      	beq.n	80045c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459a:	f7fd fa4f 	bl	8001a3c <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a0:	e00a      	b.n	80045b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a2:	f7fd fa4b 	bl	8001a3c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e0ce      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	4b4b      	ldr	r3, [pc, #300]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ee      	beq.n	80045a2 <HAL_RCC_OscConfig+0x386>
 80045c4:	e014      	b.n	80045f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c6:	f7fd fa39 	bl	8001a3c <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045cc:	e00a      	b.n	80045e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ce:	f7fd fa35 	bl	8001a3c <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045dc:	4293      	cmp	r3, r2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e0b8      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	4b40      	ldr	r3, [pc, #256]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ee      	bne.n	80045ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d105      	bne.n	8004602 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f6:	4b3c      	ldr	r3, [pc, #240]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	4a3b      	ldr	r2, [pc, #236]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80045fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004600:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80a4 	beq.w	8004754 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800460c:	4b36      	ldr	r3, [pc, #216]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 030c 	and.w	r3, r3, #12
 8004614:	2b08      	cmp	r3, #8
 8004616:	d06b      	beq.n	80046f0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d149      	bne.n	80046b4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004620:	4b31      	ldr	r3, [pc, #196]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a30      	ldr	r2, [pc, #192]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800462a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd fa06 	bl	8001a3c <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fd fa02 	bl	8001a3c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e087      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	4b28      	ldr	r3, [pc, #160]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69da      	ldr	r2, [r3, #28]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	019b      	lsls	r3, r3, #6
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	3b01      	subs	r3, #1
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	4313      	orrs	r3, r2
 8004678:	4a1b      	ldr	r2, [pc, #108]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 800467a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800467e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004680:	4b19      	ldr	r3, [pc, #100]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a18      	ldr	r2, [pc, #96]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 8004686:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800468a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fd f9d6 	bl	8001a3c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7fd f9d2 	bl	8001a3c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e057      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a6:	4b10      	ldr	r3, [pc, #64]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x478>
 80046b2:	e04f      	b.n	8004754 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b4:	4b0c      	ldr	r3, [pc, #48]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a0b      	ldr	r2, [pc, #44]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fd f9bc 	bl	8001a3c <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fd f9b8 	bl	8001a3c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e03d      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	4b03      	ldr	r3, [pc, #12]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4ac>
 80046e6:	e035      	b.n	8004754 <HAL_RCC_OscConfig+0x538>
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004760 <HAL_RCC_OscConfig+0x544>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d028      	beq.n	8004750 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004708:	429a      	cmp	r2, r3
 800470a:	d121      	bne.n	8004750 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d11a      	bne.n	8004750 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004720:	4013      	ands	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004726:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004728:	4293      	cmp	r3, r2
 800472a:	d111      	bne.n	8004750 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	3b01      	subs	r3, #1
 800473a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d107      	bne.n	8004750 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800

08004764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0d0      	b.n	800491e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	4b6a      	ldr	r3, [pc, #424]	@ (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d910      	bls.n	80047ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b67      	ldr	r3, [pc, #412]	@ (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 020f 	bic.w	r2, r3, #15
 8004792:	4965      	ldr	r1, [pc, #404]	@ (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b63      	ldr	r3, [pc, #396]	@ (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0b8      	b.n	800491e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c4:	4b59      	ldr	r3, [pc, #356]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a58      	ldr	r2, [pc, #352]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 80047ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047dc:	4b53      	ldr	r3, [pc, #332]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a52      	ldr	r2, [pc, #328]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 80047e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e8:	4b50      	ldr	r3, [pc, #320]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	494d      	ldr	r1, [pc, #308]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d040      	beq.n	8004888 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	4b47      	ldr	r3, [pc, #284]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d115      	bne.n	8004846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e07f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004826:	4b41      	ldr	r3, [pc, #260]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e073      	b.n	800491e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004836:	4b3d      	ldr	r3, [pc, #244]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e06b      	b.n	800491e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004846:	4b39      	ldr	r3, [pc, #228]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f023 0203 	bic.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4936      	ldr	r1, [pc, #216]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	4313      	orrs	r3, r2
 8004856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004858:	f7fd f8f0 	bl	8001a3c <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	e00a      	b.n	8004876 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004860:	f7fd f8ec 	bl	8001a3c <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e053      	b.n	800491e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	4b2d      	ldr	r3, [pc, #180]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 020c 	and.w	r2, r3, #12
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	429a      	cmp	r2, r3
 8004886:	d1eb      	bne.n	8004860 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004888:	4b27      	ldr	r3, [pc, #156]	@ (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d210      	bcs.n	80048b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b24      	ldr	r3, [pc, #144]	@ (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 020f 	bic.w	r2, r3, #15
 800489e:	4922      	ldr	r1, [pc, #136]	@ (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e032      	b.n	800491e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c4:	4b19      	ldr	r3, [pc, #100]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4916      	ldr	r1, [pc, #88]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048e2:	4b12      	ldr	r3, [pc, #72]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	490e      	ldr	r1, [pc, #56]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048f6:	f000 f821 	bl	800493c <HAL_RCC_GetSysClockFreq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	490a      	ldr	r1, [pc, #40]	@ (8004930 <HAL_RCC_ClockConfig+0x1cc>)
 8004908:	5ccb      	ldrb	r3, [r1, r3]
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a09      	ldr	r2, [pc, #36]	@ (8004934 <HAL_RCC_ClockConfig+0x1d0>)
 8004910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004912:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <HAL_RCC_ClockConfig+0x1d4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fc fd5a 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40023c00 	.word	0x40023c00
 800492c:	40023800 	.word	0x40023800
 8004930:	0801adf8 	.word	0x0801adf8
 8004934:	20000000 	.word	0x20000000
 8004938:	20000004 	.word	0x20000004

0800493c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800493c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004940:	b094      	sub	sp, #80	@ 0x50
 8004942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	647b      	str	r3, [r7, #68]	@ 0x44
 8004948:	2300      	movs	r3, #0
 800494a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800494c:	2300      	movs	r3, #0
 800494e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004954:	4b79      	ldr	r3, [pc, #484]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 030c 	and.w	r3, r3, #12
 800495c:	2b08      	cmp	r3, #8
 800495e:	d00d      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x40>
 8004960:	2b08      	cmp	r3, #8
 8004962:	f200 80e1 	bhi.w	8004b28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x34>
 800496a:	2b04      	cmp	r3, #4
 800496c:	d003      	beq.n	8004976 <HAL_RCC_GetSysClockFreq+0x3a>
 800496e:	e0db      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004970:	4b73      	ldr	r3, [pc, #460]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004972:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004974:	e0db      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004976:	4b73      	ldr	r3, [pc, #460]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x208>)
 8004978:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800497a:	e0d8      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800497c:	4b6f      	ldr	r3, [pc, #444]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004984:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004986:	4b6d      	ldr	r3, [pc, #436]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d063      	beq.n	8004a5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004992:	4b6a      	ldr	r3, [pc, #424]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	2200      	movs	r2, #0
 800499a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800499c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800499e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049a6:	2300      	movs	r3, #0
 80049a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049ae:	4622      	mov	r2, r4
 80049b0:	462b      	mov	r3, r5
 80049b2:	f04f 0000 	mov.w	r0, #0
 80049b6:	f04f 0100 	mov.w	r1, #0
 80049ba:	0159      	lsls	r1, r3, #5
 80049bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c0:	0150      	lsls	r0, r2, #5
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4621      	mov	r1, r4
 80049c8:	1a51      	subs	r1, r2, r1
 80049ca:	6139      	str	r1, [r7, #16]
 80049cc:	4629      	mov	r1, r5
 80049ce:	eb63 0301 	sbc.w	r3, r3, r1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049e0:	4659      	mov	r1, fp
 80049e2:	018b      	lsls	r3, r1, #6
 80049e4:	4651      	mov	r1, sl
 80049e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ea:	4651      	mov	r1, sl
 80049ec:	018a      	lsls	r2, r1, #6
 80049ee:	4651      	mov	r1, sl
 80049f0:	ebb2 0801 	subs.w	r8, r2, r1
 80049f4:	4659      	mov	r1, fp
 80049f6:	eb63 0901 	sbc.w	r9, r3, r1
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a0e:	4690      	mov	r8, r2
 8004a10:	4699      	mov	r9, r3
 8004a12:	4623      	mov	r3, r4
 8004a14:	eb18 0303 	adds.w	r3, r8, r3
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	eb49 0303 	adc.w	r3, r9, r3
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a2e:	4629      	mov	r1, r5
 8004a30:	024b      	lsls	r3, r1, #9
 8004a32:	4621      	mov	r1, r4
 8004a34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a38:	4621      	mov	r1, r4
 8004a3a:	024a      	lsls	r2, r1, #9
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a42:	2200      	movs	r2, #0
 8004a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a4c:	f7fb fc30 	bl	80002b0 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4613      	mov	r3, r2
 8004a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a58:	e058      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5a:	4b38      	ldr	r3, [pc, #224]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	099b      	lsrs	r3, r3, #6
 8004a60:	2200      	movs	r2, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	4611      	mov	r1, r2
 8004a66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a6a:	623b      	str	r3, [r7, #32]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	f04f 0000 	mov.w	r0, #0
 8004a7c:	f04f 0100 	mov.w	r1, #0
 8004a80:	0159      	lsls	r1, r3, #5
 8004a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a86:	0150      	lsls	r0, r2, #5
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4641      	mov	r1, r8
 8004a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a92:	4649      	mov	r1, r9
 8004a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aac:	ebb2 040a 	subs.w	r4, r2, sl
 8004ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	00eb      	lsls	r3, r5, #3
 8004abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac2:	00e2      	lsls	r2, r4, #3
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	4643      	mov	r3, r8
 8004aca:	18e3      	adds	r3, r4, r3
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	464b      	mov	r3, r9
 8004ad0:	eb45 0303 	adc.w	r3, r5, r3
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	028b      	lsls	r3, r1, #10
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aec:	4621      	mov	r1, r4
 8004aee:	028a      	lsls	r2, r1, #10
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004af6:	2200      	movs	r2, #0
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	61fa      	str	r2, [r7, #28]
 8004afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b00:	f7fb fbd6 	bl	80002b0 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4613      	mov	r3, r2
 8004b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	0c1b      	lsrs	r3, r3, #16
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	3301      	adds	r3, #1
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b26:	e002      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b28:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3750      	adds	r7, #80	@ 0x50
 8004b34:	46bd      	mov	sp, r7
 8004b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	00f42400 	.word	0x00f42400
 8004b44:	007a1200 	.word	0x007a1200

08004b48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b4c:	4b03      	ldr	r3, [pc, #12]	@ (8004b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000000 	.word	0x20000000

08004b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b64:	f7ff fff0 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0a9b      	lsrs	r3, r3, #10
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4903      	ldr	r1, [pc, #12]	@ (8004b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	0801ae08 	.word	0x0801ae08

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b8c:	f7ff ffdc 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0b5b      	lsrs	r3, r3, #13
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4903      	ldr	r1, [pc, #12]	@ (8004bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	0801ae08 	.word	0x0801ae08

08004bb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	220f      	movs	r2, #15
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bc0:	4b12      	ldr	r3, [pc, #72]	@ (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 0203 	and.w	r2, r3, #3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004be4:	4b09      	ldr	r3, [pc, #36]	@ (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	08db      	lsrs	r3, r3, #3
 8004bea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bf2:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <HAL_RCC_GetClockConfig+0x60>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 020f 	and.w	r2, r3, #15
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	601a      	str	r2, [r3, #0]
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40023c00 	.word	0x40023c00

08004c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d012      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c3c:	4b69      	ldr	r3, [pc, #420]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4a68      	ldr	r2, [pc, #416]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c46:	6093      	str	r3, [r2, #8]
 8004c48:	4b66      	ldr	r3, [pc, #408]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c50:	4964      	ldr	r1, [pc, #400]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d017      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7c:	4959      	ldr	r1, [pc, #356]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d017      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004caa:	4b4e      	ldr	r3, [pc, #312]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cb0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb8:	494a      	ldr	r1, [pc, #296]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cc8:	d101      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 808b 	beq.w	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	4a39      	ldr	r2, [pc, #228]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d04:	4b37      	ldr	r3, [pc, #220]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d10:	4b35      	ldr	r3, [pc, #212]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a34      	ldr	r2, [pc, #208]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1c:	f7fc fe8e 	bl	8001a3c <HAL_GetTick>
 8004d20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d24:	f7fc fe8a 	bl	8001a3c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	@ 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e357      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d36:	4b2c      	ldr	r3, [pc, #176]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d42:	4b28      	ldr	r3, [pc, #160]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d035      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d02e      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d60:	4b20      	ldr	r3, [pc, #128]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d76:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d82:	4a18      	ldr	r2, [pc, #96]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d88:	4b16      	ldr	r3, [pc, #88]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d114      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fc fe52 	bl	8001a3c <HAL_GetTick>
 8004d98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f7fc fe4e 	bl	8001a3c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e319      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db2:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0ee      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dca:	d111      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004dd8:	4b04      	ldr	r3, [pc, #16]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dda:	400b      	ands	r3, r1
 8004ddc:	4901      	ldr	r1, [pc, #4]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	608b      	str	r3, [r1, #8]
 8004de2:	e00b      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40007000 	.word	0x40007000
 8004dec:	0ffffcff 	.word	0x0ffffcff
 8004df0:	4baa      	ldr	r3, [pc, #680]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4aa9      	ldr	r2, [pc, #676]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dfa:	6093      	str	r3, [r2, #8]
 8004dfc:	4ba7      	ldr	r3, [pc, #668]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e08:	49a4      	ldr	r1, [pc, #656]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d010      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e1a:	4ba0      	ldr	r3, [pc, #640]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e20:	4a9e      	ldr	r2, [pc, #632]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e2a:	4b9c      	ldr	r3, [pc, #624]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	4999      	ldr	r1, [pc, #612]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e48:	4b94      	ldr	r3, [pc, #592]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e56:	4991      	ldr	r1, [pc, #580]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e6a:	4b8c      	ldr	r3, [pc, #560]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e78:	4988      	ldr	r1, [pc, #544]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e8c:	4b83      	ldr	r3, [pc, #524]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e9a:	4980      	ldr	r1, [pc, #512]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eae:	4b7b      	ldr	r3, [pc, #492]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebc:	4977      	ldr	r1, [pc, #476]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ed0:	4b72      	ldr	r3, [pc, #456]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed6:	f023 0203 	bic.w	r2, r3, #3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ede:	496f      	ldr	r1, [pc, #444]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ef2:	4b6a      	ldr	r3, [pc, #424]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef8:	f023 020c 	bic.w	r2, r3, #12
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f00:	4966      	ldr	r1, [pc, #408]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f14:	4b61      	ldr	r3, [pc, #388]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f22:	495e      	ldr	r1, [pc, #376]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f36:	4b59      	ldr	r3, [pc, #356]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f44:	4955      	ldr	r1, [pc, #340]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f58:	4b50      	ldr	r3, [pc, #320]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f66:	494d      	ldr	r1, [pc, #308]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f7a:	4b48      	ldr	r3, [pc, #288]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f88:	4944      	ldr	r1, [pc, #272]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004faa:	493c      	ldr	r1, [pc, #240]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004fbe:	4b37      	ldr	r3, [pc, #220]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fcc:	4933      	ldr	r1, [pc, #204]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fee:	492b      	ldr	r1, [pc, #172]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d011      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005002:	4b26      	ldr	r3, [pc, #152]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005008:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005010:	4922      	ldr	r1, [pc, #136]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800501c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005020:	d101      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005022:	2301      	movs	r3, #1
 8005024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005032:	2301      	movs	r3, #1
 8005034:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005042:	4b16      	ldr	r3, [pc, #88]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005048:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005050:	4912      	ldr	r1, [pc, #72]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00b      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005064:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005074:	4909      	ldr	r1, [pc, #36]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d006      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80d9 	beq.w	8005242 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005090:	4b02      	ldr	r3, [pc, #8]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a01      	ldr	r2, [pc, #4]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005096:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800509a:	e001      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800509c:	40023800 	.word	0x40023800
 80050a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a2:	f7fc fccb 	bl	8001a3c <HAL_GetTick>
 80050a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050aa:	f7fc fcc7 	bl	8001a3c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b64      	cmp	r3, #100	@ 0x64
 80050b6:	d901      	bls.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e194      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d021      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d11d      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050dc:	4b64      	ldr	r3, [pc, #400]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050ea:	4b61      	ldr	r3, [pc, #388]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050f0:	0e1b      	lsrs	r3, r3, #24
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	019a      	lsls	r2, r3, #6
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	041b      	lsls	r3, r3, #16
 8005102:	431a      	orrs	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	061b      	lsls	r3, r3, #24
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	071b      	lsls	r3, r3, #28
 8005110:	4957      	ldr	r1, [pc, #348]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005128:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800512c:	d00a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005136:	2b00      	cmp	r3, #0
 8005138:	d02e      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005142:	d129      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005144:	4b4a      	ldr	r3, [pc, #296]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800514a:	0c1b      	lsrs	r3, r3, #16
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005152:	4b47      	ldr	r3, [pc, #284]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005158:	0f1b      	lsrs	r3, r3, #28
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	019a      	lsls	r2, r3, #6
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	061b      	lsls	r3, r3, #24
 8005172:	431a      	orrs	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	071b      	lsls	r3, r3, #28
 8005178:	493d      	ldr	r1, [pc, #244]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005180:	4b3b      	ldr	r3, [pc, #236]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005186:	f023 021f 	bic.w	r2, r3, #31
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	3b01      	subs	r3, #1
 8005190:	4937      	ldr	r1, [pc, #220]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01d      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051a4:	4b32      	ldr	r3, [pc, #200]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051aa:	0e1b      	lsrs	r3, r3, #24
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051b8:	0f1b      	lsrs	r3, r3, #28
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	019a      	lsls	r2, r3, #6
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	431a      	orrs	r2, r3
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	431a      	orrs	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	071b      	lsls	r3, r3, #28
 80051d8:	4925      	ldr	r1, [pc, #148]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d011      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	019a      	lsls	r2, r3, #6
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	061b      	lsls	r3, r3, #24
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	071b      	lsls	r3, r3, #28
 8005208:	4919      	ldr	r1, [pc, #100]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005210:	4b17      	ldr	r3, [pc, #92]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a16      	ldr	r2, [pc, #88]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005216:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800521a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521c:	f7fc fc0e 	bl	8001a3c <HAL_GetTick>
 8005220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005224:	f7fc fc0a 	bl	8001a3c <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	@ 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e0d7      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005236:	4b0e      	ldr	r3, [pc, #56]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b01      	cmp	r3, #1
 8005246:	f040 80cd 	bne.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800524a:	4b09      	ldr	r3, [pc, #36]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a08      	ldr	r2, [pc, #32]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005256:	f7fc fbf1 	bl	8001a3c <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800525c:	e00a      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800525e:	f7fc fbed 	bl	8001a3c <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b64      	cmp	r3, #100	@ 0x64
 800526a:	d903      	bls.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e0ba      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005270:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005274:	4b5e      	ldr	r3, [pc, #376]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800527c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005280:	d0ed      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d02e      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d12a      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052aa:	4b51      	ldr	r3, [pc, #324]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b0:	0c1b      	lsrs	r3, r3, #16
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052b8:	4b4d      	ldr	r3, [pc, #308]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052be:	0f1b      	lsrs	r3, r3, #28
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	019a      	lsls	r2, r3, #6
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	061b      	lsls	r3, r3, #24
 80052d8:	431a      	orrs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	071b      	lsls	r3, r3, #28
 80052de:	4944      	ldr	r1, [pc, #272]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052e6:	4b42      	ldr	r3, [pc, #264]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	3b01      	subs	r3, #1
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	493d      	ldr	r1, [pc, #244]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d022      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005314:	d11d      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005316:	4b36      	ldr	r3, [pc, #216]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531c:	0e1b      	lsrs	r3, r3, #24
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005324:	4b32      	ldr	r3, [pc, #200]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532a:	0f1b      	lsrs	r3, r3, #28
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	019a      	lsls	r2, r3, #6
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	431a      	orrs	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	061b      	lsls	r3, r3, #24
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	071b      	lsls	r3, r3, #28
 800534a:	4929      	ldr	r1, [pc, #164]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d028      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800535e:	4b24      	ldr	r3, [pc, #144]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005364:	0e1b      	lsrs	r3, r3, #24
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800536c:	4b20      	ldr	r3, [pc, #128]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	019a      	lsls	r2, r3, #6
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	041b      	lsls	r3, r3, #16
 8005384:	431a      	orrs	r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	071b      	lsls	r3, r3, #28
 8005392:	4917      	ldr	r1, [pc, #92]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800539a:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800539c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	4911      	ldr	r1, [pc, #68]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053b0:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a0e      	ldr	r2, [pc, #56]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053bc:	f7fc fb3e 	bl	8001a3c <HAL_GetTick>
 80053c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053c4:	f7fc fb3a 	bl	8001a3c <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	@ 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e007      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053d6:	4b06      	ldr	r3, [pc, #24]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053e2:	d1ef      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800

080053f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e049      	b.n	800549a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f841 	bl	80054a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f000 f9e8 	bl	8005808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d001      	beq.n	80054d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e054      	b.n	800557a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a26      	ldr	r2, [pc, #152]	@ (8005588 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d022      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fa:	d01d      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a22      	ldr	r2, [pc, #136]	@ (800558c <HAL_TIM_Base_Start_IT+0xd4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d018      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a21      	ldr	r2, [pc, #132]	@ (8005590 <HAL_TIM_Base_Start_IT+0xd8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d013      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1f      	ldr	r2, [pc, #124]	@ (8005594 <HAL_TIM_Base_Start_IT+0xdc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00e      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1e      	ldr	r2, [pc, #120]	@ (8005598 <HAL_TIM_Base_Start_IT+0xe0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1c      	ldr	r2, [pc, #112]	@ (800559c <HAL_TIM_Base_Start_IT+0xe4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x80>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1b      	ldr	r2, [pc, #108]	@ (80055a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d115      	bne.n	8005564 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	4b19      	ldr	r3, [pc, #100]	@ (80055a4 <HAL_TIM_Base_Start_IT+0xec>)
 8005540:	4013      	ands	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b06      	cmp	r3, #6
 8005548:	d015      	beq.n	8005576 <HAL_TIM_Base_Start_IT+0xbe>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005550:	d011      	beq.n	8005576 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005562:	e008      	b.n	8005576 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e000      	b.n	8005578 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40010000 	.word	0x40010000
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40000c00 	.word	0x40000c00
 8005598:	40010400 	.word	0x40010400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40001800 	.word	0x40001800
 80055a4:	00010007 	.word	0x00010007

080055a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d020      	beq.n	800560c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01b      	beq.n	800560c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0202 	mvn.w	r2, #2
 80055dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f8e9 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 80055f8:	e005      	b.n	8005606 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f8db 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f8ec 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	d020      	beq.n	8005658 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01b      	beq.n	8005658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0204 	mvn.w	r2, #4
 8005628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8c3 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 8005644:	e005      	b.n	8005652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f8b5 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f8c6 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d020      	beq.n	80056a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01b      	beq.n	80056a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0208 	mvn.w	r2, #8
 8005674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2204      	movs	r2, #4
 800567a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f89d 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 8005690:	e005      	b.n	800569e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f88f 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f8a0 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d020      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01b      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0210 	mvn.w	r2, #16
 80056c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2208      	movs	r2, #8
 80056c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f877 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 80056dc:	e005      	b.n	80056ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f869 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f87a 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0201 	mvn.w	r2, #1
 800570c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fb fbb8 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00c      	beq.n	8005742 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800573a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f913 	bl	8005968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00c      	beq.n	8005766 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800575e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f90b 	bl	800597c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00c      	beq.n	800578a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f834 	bl	80057f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00c      	beq.n	80057ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f06f 0220 	mvn.w	r2, #32
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f8d3 	bl	8005954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a43      	ldr	r2, [pc, #268]	@ (8005928 <TIM_Base_SetConfig+0x120>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005826:	d00f      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a40      	ldr	r2, [pc, #256]	@ (800592c <TIM_Base_SetConfig+0x124>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00b      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a3f      	ldr	r2, [pc, #252]	@ (8005930 <TIM_Base_SetConfig+0x128>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d007      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3e      	ldr	r2, [pc, #248]	@ (8005934 <TIM_Base_SetConfig+0x12c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3d      	ldr	r2, [pc, #244]	@ (8005938 <TIM_Base_SetConfig+0x130>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d108      	bne.n	800585a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800584e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a32      	ldr	r2, [pc, #200]	@ (8005928 <TIM_Base_SetConfig+0x120>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d02b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005868:	d027      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2f      	ldr	r2, [pc, #188]	@ (800592c <TIM_Base_SetConfig+0x124>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d023      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2e      	ldr	r2, [pc, #184]	@ (8005930 <TIM_Base_SetConfig+0x128>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01f      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2d      	ldr	r2, [pc, #180]	@ (8005934 <TIM_Base_SetConfig+0x12c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2c      	ldr	r2, [pc, #176]	@ (8005938 <TIM_Base_SetConfig+0x130>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d017      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2b      	ldr	r2, [pc, #172]	@ (800593c <TIM_Base_SetConfig+0x134>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2a      	ldr	r2, [pc, #168]	@ (8005940 <TIM_Base_SetConfig+0x138>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00f      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a29      	ldr	r2, [pc, #164]	@ (8005944 <TIM_Base_SetConfig+0x13c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a28      	ldr	r2, [pc, #160]	@ (8005948 <TIM_Base_SetConfig+0x140>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a27      	ldr	r2, [pc, #156]	@ (800594c <TIM_Base_SetConfig+0x144>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a26      	ldr	r2, [pc, #152]	@ (8005950 <TIM_Base_SetConfig+0x148>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d108      	bne.n	80058cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a0e      	ldr	r2, [pc, #56]	@ (8005928 <TIM_Base_SetConfig+0x120>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_Base_SetConfig+0xf2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a10      	ldr	r2, [pc, #64]	@ (8005938 <TIM_Base_SetConfig+0x130>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d103      	bne.n	8005902 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f043 0204 	orr.w	r2, r3, #4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	601a      	str	r2, [r3, #0]
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800
 8005948:	40001800 	.word	0x40001800
 800594c:	40001c00 	.word	0x40001c00
 8005950:	40002000 	.word	0x40002000

08005954 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e040      	b.n	8005a24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7fb fb06 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2224      	movs	r2, #36	@ 0x24
 80059bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0201 	bic.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fefa 	bl	80067d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fc93 	bl	8006308 <UART_SetConfig>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e01b      	b.n	8005a24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 ff79 	bl	8006914 <UART_CheckIdleState>
 8005a22:	4603      	mov	r3, r0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	@ 0x28
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d177      	bne.n	8005b34 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_UART_Transmit+0x24>
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e070      	b.n	8005b36 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2221      	movs	r2, #33	@ 0x21
 8005a60:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a62:	f7fb ffeb 	bl	8001a3c <HAL_GetTick>
 8005a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	88fa      	ldrh	r2, [r7, #6]
 8005a74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a80:	d108      	bne.n	8005a94 <HAL_UART_Transmit+0x68>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e003      	b.n	8005a9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a9c:	e02f      	b.n	8005afe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2180      	movs	r1, #128	@ 0x80
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 ff8a 	bl	80069c2 <UART_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d004      	beq.n	8005abe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e03b      	b.n	8005b36 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10b      	bne.n	8005adc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	e007      	b.n	8005aec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	781a      	ldrb	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1c9      	bne.n	8005a9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	2140      	movs	r1, #64	@ 0x40
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 ff54 	bl	80069c2 <UART_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e005      	b.n	8005b36 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e000      	b.n	8005b36 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
  }
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3720      	adds	r7, #32
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	@ 0x28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d165      	bne.n	8005c22 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_UART_Transmit_DMA+0x22>
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e05e      	b.n	8005c24 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	88fa      	ldrh	r2, [r7, #6]
 8005b70:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	88fa      	ldrh	r2, [r7, #6]
 8005b78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2221      	movs	r2, #33	@ 0x21
 8005b88:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d027      	beq.n	8005be2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b96:	4a25      	ldr	r2, [pc, #148]	@ (8005c2c <HAL_UART_Transmit_DMA+0xec>)
 8005b98:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9e:	4a24      	ldr	r2, [pc, #144]	@ (8005c30 <HAL_UART_Transmit_DMA+0xf0>)
 8005ba0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba6:	4a23      	ldr	r2, [pc, #140]	@ (8005c34 <HAL_UART_Transmit_DMA+0xf4>)
 8005ba8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bae:	2200      	movs	r2, #0
 8005bb0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bba:	4619      	mov	r1, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3328      	adds	r3, #40	@ 0x28
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	f7fc f8f9 	bl	8001dbc <HAL_DMA_Start_IT>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2210      	movs	r2, #16
 8005bd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e020      	b.n	8005c24 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2240      	movs	r2, #64	@ 0x40
 8005be8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3308      	adds	r3, #8
 8005c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0a:	623a      	str	r2, [r7, #32]
 8005c0c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	69f9      	ldr	r1, [r7, #28]
 8005c10:	6a3a      	ldr	r2, [r7, #32]
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e5      	bne.n	8005bea <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e000      	b.n	8005c24 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005c22:	2302      	movs	r3, #2
  }
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3728      	adds	r7, #40	@ 0x28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	08006cf1 	.word	0x08006cf1
 8005c30:	08006d87 	.word	0x08006d87
 8005c34:	08006f73 	.word	0x08006f73

08005c38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	@ 0x28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c4c:	2b20      	cmp	r3, #32
 8005c4e:	d132      	bne.n	8005cb6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <HAL_UART_Receive_DMA+0x24>
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e02b      	b.n	8005cb8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d018      	beq.n	8005ca6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	613b      	str	r3, [r7, #16]
   return(result);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	623b      	str	r3, [r7, #32]
 8005c94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	69f9      	ldr	r1, [r7, #28]
 8005c98:	6a3a      	ldr	r2, [r7, #32]
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e6      	bne.n	8005c74 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fef5 	bl	8006a9c <UART_Start_Receive_DMA>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	e000      	b.n	8005cb8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005cb6:	2302      	movs	r3, #2
  }
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3728      	adds	r7, #40	@ 0x28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b0ba      	sub	sp, #232	@ 0xe8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ce6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005cea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005cee:	4013      	ands	r3, r2
 8005cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005cf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d115      	bne.n	8005d28 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00f      	beq.n	8005d28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d009      	beq.n	8005d28 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 82b1 	beq.w	8006280 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	4798      	blx	r3
      }
      return;
 8005d26:	e2ab      	b.n	8006280 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8117 	beq.w	8005f60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005d42:	4b85      	ldr	r3, [pc, #532]	@ (8005f58 <HAL_UART_IRQHandler+0x298>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 810a 	beq.w	8005f60 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d011      	beq.n	8005d7c <HAL_UART_IRQHandler+0xbc>
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00b      	beq.n	8005d7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d72:	f043 0201 	orr.w	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d011      	beq.n	8005dac <HAL_UART_IRQHandler+0xec>
 8005d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00b      	beq.n	8005dac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005da2:	f043 0204 	orr.w	r2, r3, #4
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d011      	beq.n	8005ddc <HAL_UART_IRQHandler+0x11c>
 8005db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2204      	movs	r2, #4
 8005dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dd2:	f043 0202 	orr.w	r2, r3, #2
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d017      	beq.n	8005e18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d105      	bne.n	8005e00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005df8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2208      	movs	r2, #8
 8005e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e0e:	f043 0208 	orr.w	r2, r3, #8
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d012      	beq.n	8005e4a <HAL_UART_IRQHandler+0x18a>
 8005e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00c      	beq.n	8005e4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e40:	f043 0220 	orr.w	r2, r3, #32
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 8217 	beq.w	8006284 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00d      	beq.n	8005e7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e92:	2b40      	cmp	r3, #64	@ 0x40
 8005e94:	d005      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d04f      	beq.n	8005f42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fec0 	bl	8006c28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb2:	2b40      	cmp	r3, #64	@ 0x40
 8005eb4:	d141      	bne.n	8005f3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3308      	adds	r3, #8
 8005ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3308      	adds	r3, #8
 8005ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1d9      	bne.n	8005eb6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d013      	beq.n	8005f32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f0e:	4a13      	ldr	r2, [pc, #76]	@ (8005f5c <HAL_UART_IRQHandler+0x29c>)
 8005f10:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fc f820 	bl	8001f5c <HAL_DMA_Abort_IT>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d017      	beq.n	8005f52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	e00f      	b.n	8005f52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9c4 	bl	80062c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f38:	e00b      	b.n	8005f52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9c0 	bl	80062c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f40:	e007      	b.n	8005f52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f9bc 	bl	80062c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005f50:	e198      	b.n	8006284 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f52:	bf00      	nop
    return;
 8005f54:	e196      	b.n	8006284 <HAL_UART_IRQHandler+0x5c4>
 8005f56:	bf00      	nop
 8005f58:	04000120 	.word	0x04000120
 8005f5c:	08006ff1 	.word	0x08006ff1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	f040 8166 	bne.w	8006236 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 815f 	beq.w	8006236 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8158 	beq.w	8006236 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f98:	2b40      	cmp	r3, #64	@ 0x40
 8005f9a:	f040 80d0 	bne.w	800613e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005faa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80ab 	beq.w	800610a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	f080 80a3 	bcs.w	800610a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd8:	f000 8086 	beq.w	80060e8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fe8:	e853 3f00 	ldrex	r3, [r3]
 8005fec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006006:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800600a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006012:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800601e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1da      	bne.n	8005fdc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3308      	adds	r3, #8
 800602c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006036:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3308      	adds	r3, #8
 8006046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800604a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800604e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006052:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800605c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e1      	bne.n	8006026 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3308      	adds	r3, #8
 8006068:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3308      	adds	r3, #8
 8006082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006086:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006088:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800608c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e3      	bne.n	8006062 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060b8:	f023 0310 	bic.w	r3, r3, #16
 80060bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e4      	bne.n	80060a8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fb feca 	bl	8001e7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	b29b      	uxth	r3, r3
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f8e6 	bl	80062d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006108:	e0be      	b.n	8006288 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006110:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006114:	429a      	cmp	r2, r3
 8006116:	f040 80b7 	bne.w	8006288 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006124:	f040 80b0 	bne.w	8006288 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f8cc 	bl	80062d4 <HAL_UARTEx_RxEventCallback>
      return;
 800613c:	e0a4      	b.n	8006288 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800614a:	b29b      	uxth	r3, r3
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8096 	beq.w	800628c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8006160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8091 	beq.w	800628c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800617a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800617e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800618c:	647b      	str	r3, [r7, #68]	@ 0x44
 800618e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800619a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e4      	bne.n	800616a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3308      	adds	r3, #8
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	623b      	str	r3, [r7, #32]
   return(result);
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3308      	adds	r3, #8
 80061c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80061c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e3      	bne.n	80061a0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f023 0310 	bic.w	r3, r3, #16
 8006200:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	461a      	mov	r2, r3
 800620a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	69b9      	ldr	r1, [r7, #24]
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	617b      	str	r3, [r7, #20]
   return(result);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e4      	bne.n	80061ec <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f850 	bl	80062d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006234:	e02a      	b.n	800628c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800623a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00e      	beq.n	8006260 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01c      	beq.n	8006290 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4798      	blx	r3
    }
    return;
 800625e:	e017      	b.n	8006290 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d012      	beq.n	8006292 <HAL_UART_IRQHandler+0x5d2>
 800626c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00c      	beq.n	8006292 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fecb 	bl	8007014 <UART_EndTransmit_IT>
    return;
 800627e:	e008      	b.n	8006292 <HAL_UART_IRQHandler+0x5d2>
      return;
 8006280:	bf00      	nop
 8006282:	e006      	b.n	8006292 <HAL_UART_IRQHandler+0x5d2>
    return;
 8006284:	bf00      	nop
 8006286:	e004      	b.n	8006292 <HAL_UART_IRQHandler+0x5d2>
      return;
 8006288:	bf00      	nop
 800628a:	e002      	b.n	8006292 <HAL_UART_IRQHandler+0x5d2>
      return;
 800628c:	bf00      	nop
 800628e:	e000      	b.n	8006292 <HAL_UART_IRQHandler+0x5d2>
    return;
 8006290:	bf00      	nop
  }

}
 8006292:	37e8      	adds	r7, #232	@ 0xe8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4ba6      	ldr	r3, [pc, #664]	@ (80065cc <UART_SetConfig+0x2c4>)
 8006334:	4013      	ands	r3, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	6979      	ldr	r1, [r7, #20]
 800633c:	430b      	orrs	r3, r1
 800633e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	430a      	orrs	r2, r1
 8006378:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a94      	ldr	r2, [pc, #592]	@ (80065d0 <UART_SetConfig+0x2c8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d120      	bne.n	80063c6 <UART_SetConfig+0xbe>
 8006384:	4b93      	ldr	r3, [pc, #588]	@ (80065d4 <UART_SetConfig+0x2cc>)
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	2b03      	cmp	r3, #3
 8006390:	d816      	bhi.n	80063c0 <UART_SetConfig+0xb8>
 8006392:	a201      	add	r2, pc, #4	@ (adr r2, 8006398 <UART_SetConfig+0x90>)
 8006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080063b5 	.word	0x080063b5
 80063a0:	080063af 	.word	0x080063af
 80063a4:	080063bb 	.word	0x080063bb
 80063a8:	2301      	movs	r3, #1
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e150      	b.n	8006650 <UART_SetConfig+0x348>
 80063ae:	2302      	movs	r3, #2
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e14d      	b.n	8006650 <UART_SetConfig+0x348>
 80063b4:	2304      	movs	r3, #4
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e14a      	b.n	8006650 <UART_SetConfig+0x348>
 80063ba:	2308      	movs	r3, #8
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e147      	b.n	8006650 <UART_SetConfig+0x348>
 80063c0:	2310      	movs	r3, #16
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e144      	b.n	8006650 <UART_SetConfig+0x348>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a83      	ldr	r2, [pc, #524]	@ (80065d8 <UART_SetConfig+0x2d0>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d132      	bne.n	8006436 <UART_SetConfig+0x12e>
 80063d0:	4b80      	ldr	r3, [pc, #512]	@ (80065d4 <UART_SetConfig+0x2cc>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d6:	f003 030c 	and.w	r3, r3, #12
 80063da:	2b0c      	cmp	r3, #12
 80063dc:	d828      	bhi.n	8006430 <UART_SetConfig+0x128>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <UART_SetConfig+0xdc>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	08006419 	.word	0x08006419
 80063e8:	08006431 	.word	0x08006431
 80063ec:	08006431 	.word	0x08006431
 80063f0:	08006431 	.word	0x08006431
 80063f4:	08006425 	.word	0x08006425
 80063f8:	08006431 	.word	0x08006431
 80063fc:	08006431 	.word	0x08006431
 8006400:	08006431 	.word	0x08006431
 8006404:	0800641f 	.word	0x0800641f
 8006408:	08006431 	.word	0x08006431
 800640c:	08006431 	.word	0x08006431
 8006410:	08006431 	.word	0x08006431
 8006414:	0800642b 	.word	0x0800642b
 8006418:	2300      	movs	r3, #0
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e118      	b.n	8006650 <UART_SetConfig+0x348>
 800641e:	2302      	movs	r3, #2
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e115      	b.n	8006650 <UART_SetConfig+0x348>
 8006424:	2304      	movs	r3, #4
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e112      	b.n	8006650 <UART_SetConfig+0x348>
 800642a:	2308      	movs	r3, #8
 800642c:	77fb      	strb	r3, [r7, #31]
 800642e:	e10f      	b.n	8006650 <UART_SetConfig+0x348>
 8006430:	2310      	movs	r3, #16
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e10c      	b.n	8006650 <UART_SetConfig+0x348>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a68      	ldr	r2, [pc, #416]	@ (80065dc <UART_SetConfig+0x2d4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d120      	bne.n	8006482 <UART_SetConfig+0x17a>
 8006440:	4b64      	ldr	r3, [pc, #400]	@ (80065d4 <UART_SetConfig+0x2cc>)
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006446:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800644a:	2b30      	cmp	r3, #48	@ 0x30
 800644c:	d013      	beq.n	8006476 <UART_SetConfig+0x16e>
 800644e:	2b30      	cmp	r3, #48	@ 0x30
 8006450:	d814      	bhi.n	800647c <UART_SetConfig+0x174>
 8006452:	2b20      	cmp	r3, #32
 8006454:	d009      	beq.n	800646a <UART_SetConfig+0x162>
 8006456:	2b20      	cmp	r3, #32
 8006458:	d810      	bhi.n	800647c <UART_SetConfig+0x174>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <UART_SetConfig+0x15c>
 800645e:	2b10      	cmp	r3, #16
 8006460:	d006      	beq.n	8006470 <UART_SetConfig+0x168>
 8006462:	e00b      	b.n	800647c <UART_SetConfig+0x174>
 8006464:	2300      	movs	r3, #0
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e0f2      	b.n	8006650 <UART_SetConfig+0x348>
 800646a:	2302      	movs	r3, #2
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e0ef      	b.n	8006650 <UART_SetConfig+0x348>
 8006470:	2304      	movs	r3, #4
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e0ec      	b.n	8006650 <UART_SetConfig+0x348>
 8006476:	2308      	movs	r3, #8
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e0e9      	b.n	8006650 <UART_SetConfig+0x348>
 800647c:	2310      	movs	r3, #16
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e0e6      	b.n	8006650 <UART_SetConfig+0x348>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a56      	ldr	r2, [pc, #344]	@ (80065e0 <UART_SetConfig+0x2d8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d120      	bne.n	80064ce <UART_SetConfig+0x1c6>
 800648c:	4b51      	ldr	r3, [pc, #324]	@ (80065d4 <UART_SetConfig+0x2cc>)
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006492:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006496:	2bc0      	cmp	r3, #192	@ 0xc0
 8006498:	d013      	beq.n	80064c2 <UART_SetConfig+0x1ba>
 800649a:	2bc0      	cmp	r3, #192	@ 0xc0
 800649c:	d814      	bhi.n	80064c8 <UART_SetConfig+0x1c0>
 800649e:	2b80      	cmp	r3, #128	@ 0x80
 80064a0:	d009      	beq.n	80064b6 <UART_SetConfig+0x1ae>
 80064a2:	2b80      	cmp	r3, #128	@ 0x80
 80064a4:	d810      	bhi.n	80064c8 <UART_SetConfig+0x1c0>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <UART_SetConfig+0x1a8>
 80064aa:	2b40      	cmp	r3, #64	@ 0x40
 80064ac:	d006      	beq.n	80064bc <UART_SetConfig+0x1b4>
 80064ae:	e00b      	b.n	80064c8 <UART_SetConfig+0x1c0>
 80064b0:	2300      	movs	r3, #0
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e0cc      	b.n	8006650 <UART_SetConfig+0x348>
 80064b6:	2302      	movs	r3, #2
 80064b8:	77fb      	strb	r3, [r7, #31]
 80064ba:	e0c9      	b.n	8006650 <UART_SetConfig+0x348>
 80064bc:	2304      	movs	r3, #4
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e0c6      	b.n	8006650 <UART_SetConfig+0x348>
 80064c2:	2308      	movs	r3, #8
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	e0c3      	b.n	8006650 <UART_SetConfig+0x348>
 80064c8:	2310      	movs	r3, #16
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e0c0      	b.n	8006650 <UART_SetConfig+0x348>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a44      	ldr	r2, [pc, #272]	@ (80065e4 <UART_SetConfig+0x2dc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d125      	bne.n	8006524 <UART_SetConfig+0x21c>
 80064d8:	4b3e      	ldr	r3, [pc, #248]	@ (80065d4 <UART_SetConfig+0x2cc>)
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064e6:	d017      	beq.n	8006518 <UART_SetConfig+0x210>
 80064e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ec:	d817      	bhi.n	800651e <UART_SetConfig+0x216>
 80064ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f2:	d00b      	beq.n	800650c <UART_SetConfig+0x204>
 80064f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f8:	d811      	bhi.n	800651e <UART_SetConfig+0x216>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <UART_SetConfig+0x1fe>
 80064fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006502:	d006      	beq.n	8006512 <UART_SetConfig+0x20a>
 8006504:	e00b      	b.n	800651e <UART_SetConfig+0x216>
 8006506:	2300      	movs	r3, #0
 8006508:	77fb      	strb	r3, [r7, #31]
 800650a:	e0a1      	b.n	8006650 <UART_SetConfig+0x348>
 800650c:	2302      	movs	r3, #2
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e09e      	b.n	8006650 <UART_SetConfig+0x348>
 8006512:	2304      	movs	r3, #4
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e09b      	b.n	8006650 <UART_SetConfig+0x348>
 8006518:	2308      	movs	r3, #8
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e098      	b.n	8006650 <UART_SetConfig+0x348>
 800651e:	2310      	movs	r3, #16
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e095      	b.n	8006650 <UART_SetConfig+0x348>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a2f      	ldr	r2, [pc, #188]	@ (80065e8 <UART_SetConfig+0x2e0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d125      	bne.n	800657a <UART_SetConfig+0x272>
 800652e:	4b29      	ldr	r3, [pc, #164]	@ (80065d4 <UART_SetConfig+0x2cc>)
 8006530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006534:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006538:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800653c:	d017      	beq.n	800656e <UART_SetConfig+0x266>
 800653e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006542:	d817      	bhi.n	8006574 <UART_SetConfig+0x26c>
 8006544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006548:	d00b      	beq.n	8006562 <UART_SetConfig+0x25a>
 800654a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800654e:	d811      	bhi.n	8006574 <UART_SetConfig+0x26c>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <UART_SetConfig+0x254>
 8006554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006558:	d006      	beq.n	8006568 <UART_SetConfig+0x260>
 800655a:	e00b      	b.n	8006574 <UART_SetConfig+0x26c>
 800655c:	2301      	movs	r3, #1
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e076      	b.n	8006650 <UART_SetConfig+0x348>
 8006562:	2302      	movs	r3, #2
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e073      	b.n	8006650 <UART_SetConfig+0x348>
 8006568:	2304      	movs	r3, #4
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e070      	b.n	8006650 <UART_SetConfig+0x348>
 800656e:	2308      	movs	r3, #8
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e06d      	b.n	8006650 <UART_SetConfig+0x348>
 8006574:	2310      	movs	r3, #16
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e06a      	b.n	8006650 <UART_SetConfig+0x348>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a1b      	ldr	r2, [pc, #108]	@ (80065ec <UART_SetConfig+0x2e4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d138      	bne.n	80065f6 <UART_SetConfig+0x2ee>
 8006584:	4b13      	ldr	r3, [pc, #76]	@ (80065d4 <UART_SetConfig+0x2cc>)
 8006586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800658a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800658e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006592:	d017      	beq.n	80065c4 <UART_SetConfig+0x2bc>
 8006594:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006598:	d82a      	bhi.n	80065f0 <UART_SetConfig+0x2e8>
 800659a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800659e:	d00b      	beq.n	80065b8 <UART_SetConfig+0x2b0>
 80065a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a4:	d824      	bhi.n	80065f0 <UART_SetConfig+0x2e8>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <UART_SetConfig+0x2aa>
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ae:	d006      	beq.n	80065be <UART_SetConfig+0x2b6>
 80065b0:	e01e      	b.n	80065f0 <UART_SetConfig+0x2e8>
 80065b2:	2300      	movs	r3, #0
 80065b4:	77fb      	strb	r3, [r7, #31]
 80065b6:	e04b      	b.n	8006650 <UART_SetConfig+0x348>
 80065b8:	2302      	movs	r3, #2
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e048      	b.n	8006650 <UART_SetConfig+0x348>
 80065be:	2304      	movs	r3, #4
 80065c0:	77fb      	strb	r3, [r7, #31]
 80065c2:	e045      	b.n	8006650 <UART_SetConfig+0x348>
 80065c4:	2308      	movs	r3, #8
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e042      	b.n	8006650 <UART_SetConfig+0x348>
 80065ca:	bf00      	nop
 80065cc:	efff69f3 	.word	0xefff69f3
 80065d0:	40011000 	.word	0x40011000
 80065d4:	40023800 	.word	0x40023800
 80065d8:	40004400 	.word	0x40004400
 80065dc:	40004800 	.word	0x40004800
 80065e0:	40004c00 	.word	0x40004c00
 80065e4:	40005000 	.word	0x40005000
 80065e8:	40011400 	.word	0x40011400
 80065ec:	40007800 	.word	0x40007800
 80065f0:	2310      	movs	r3, #16
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e02c      	b.n	8006650 <UART_SetConfig+0x348>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a72      	ldr	r2, [pc, #456]	@ (80067c4 <UART_SetConfig+0x4bc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d125      	bne.n	800664c <UART_SetConfig+0x344>
 8006600:	4b71      	ldr	r3, [pc, #452]	@ (80067c8 <UART_SetConfig+0x4c0>)
 8006602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006606:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800660a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800660e:	d017      	beq.n	8006640 <UART_SetConfig+0x338>
 8006610:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006614:	d817      	bhi.n	8006646 <UART_SetConfig+0x33e>
 8006616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800661a:	d00b      	beq.n	8006634 <UART_SetConfig+0x32c>
 800661c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006620:	d811      	bhi.n	8006646 <UART_SetConfig+0x33e>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <UART_SetConfig+0x326>
 8006626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800662a:	d006      	beq.n	800663a <UART_SetConfig+0x332>
 800662c:	e00b      	b.n	8006646 <UART_SetConfig+0x33e>
 800662e:	2300      	movs	r3, #0
 8006630:	77fb      	strb	r3, [r7, #31]
 8006632:	e00d      	b.n	8006650 <UART_SetConfig+0x348>
 8006634:	2302      	movs	r3, #2
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e00a      	b.n	8006650 <UART_SetConfig+0x348>
 800663a:	2304      	movs	r3, #4
 800663c:	77fb      	strb	r3, [r7, #31]
 800663e:	e007      	b.n	8006650 <UART_SetConfig+0x348>
 8006640:	2308      	movs	r3, #8
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	e004      	b.n	8006650 <UART_SetConfig+0x348>
 8006646:	2310      	movs	r3, #16
 8006648:	77fb      	strb	r3, [r7, #31]
 800664a:	e001      	b.n	8006650 <UART_SetConfig+0x348>
 800664c:	2310      	movs	r3, #16
 800664e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006658:	d15b      	bne.n	8006712 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800665a:	7ffb      	ldrb	r3, [r7, #31]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d828      	bhi.n	80066b2 <UART_SetConfig+0x3aa>
 8006660:	a201      	add	r2, pc, #4	@ (adr r2, 8006668 <UART_SetConfig+0x360>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	0800668d 	.word	0x0800668d
 800666c:	08006695 	.word	0x08006695
 8006670:	0800669d 	.word	0x0800669d
 8006674:	080066b3 	.word	0x080066b3
 8006678:	080066a3 	.word	0x080066a3
 800667c:	080066b3 	.word	0x080066b3
 8006680:	080066b3 	.word	0x080066b3
 8006684:	080066b3 	.word	0x080066b3
 8006688:	080066ab 	.word	0x080066ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800668c:	f7fe fa68 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8006690:	61b8      	str	r0, [r7, #24]
        break;
 8006692:	e013      	b.n	80066bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006694:	f7fe fa78 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8006698:	61b8      	str	r0, [r7, #24]
        break;
 800669a:	e00f      	b.n	80066bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800669c:	4b4b      	ldr	r3, [pc, #300]	@ (80067cc <UART_SetConfig+0x4c4>)
 800669e:	61bb      	str	r3, [r7, #24]
        break;
 80066a0:	e00c      	b.n	80066bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a2:	f7fe f94b 	bl	800493c <HAL_RCC_GetSysClockFreq>
 80066a6:	61b8      	str	r0, [r7, #24]
        break;
 80066a8:	e008      	b.n	80066bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ae:	61bb      	str	r3, [r7, #24]
        break;
 80066b0:	e004      	b.n	80066bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	77bb      	strb	r3, [r7, #30]
        break;
 80066ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d074      	beq.n	80067ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	005a      	lsls	r2, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	441a      	add	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	2b0f      	cmp	r3, #15
 80066dc:	d916      	bls.n	800670c <UART_SetConfig+0x404>
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066e4:	d212      	bcs.n	800670c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f023 030f 	bic.w	r3, r3, #15
 80066ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	89fb      	ldrh	r3, [r7, #14]
 80066fe:	4313      	orrs	r3, r2
 8006700:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	89fa      	ldrh	r2, [r7, #14]
 8006708:	60da      	str	r2, [r3, #12]
 800670a:	e04f      	b.n	80067ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	77bb      	strb	r3, [r7, #30]
 8006710:	e04c      	b.n	80067ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006712:	7ffb      	ldrb	r3, [r7, #31]
 8006714:	2b08      	cmp	r3, #8
 8006716:	d828      	bhi.n	800676a <UART_SetConfig+0x462>
 8006718:	a201      	add	r2, pc, #4	@ (adr r2, 8006720 <UART_SetConfig+0x418>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	08006745 	.word	0x08006745
 8006724:	0800674d 	.word	0x0800674d
 8006728:	08006755 	.word	0x08006755
 800672c:	0800676b 	.word	0x0800676b
 8006730:	0800675b 	.word	0x0800675b
 8006734:	0800676b 	.word	0x0800676b
 8006738:	0800676b 	.word	0x0800676b
 800673c:	0800676b 	.word	0x0800676b
 8006740:	08006763 	.word	0x08006763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006744:	f7fe fa0c 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8006748:	61b8      	str	r0, [r7, #24]
        break;
 800674a:	e013      	b.n	8006774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800674c:	f7fe fa1c 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8006750:	61b8      	str	r0, [r7, #24]
        break;
 8006752:	e00f      	b.n	8006774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006754:	4b1d      	ldr	r3, [pc, #116]	@ (80067cc <UART_SetConfig+0x4c4>)
 8006756:	61bb      	str	r3, [r7, #24]
        break;
 8006758:	e00c      	b.n	8006774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675a:	f7fe f8ef 	bl	800493c <HAL_RCC_GetSysClockFreq>
 800675e:	61b8      	str	r0, [r7, #24]
        break;
 8006760:	e008      	b.n	8006774 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006766:	61bb      	str	r3, [r7, #24]
        break;
 8006768:	e004      	b.n	8006774 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	77bb      	strb	r3, [r7, #30]
        break;
 8006772:	bf00      	nop
    }

    if (pclk != 0U)
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d018      	beq.n	80067ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	085a      	lsrs	r2, r3, #1
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	441a      	add	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	fbb2 f3f3 	udiv	r3, r2, r3
 800678c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2b0f      	cmp	r3, #15
 8006792:	d909      	bls.n	80067a8 <UART_SetConfig+0x4a0>
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800679a:	d205      	bcs.n	80067a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	b29a      	uxth	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60da      	str	r2, [r3, #12]
 80067a6:	e001      	b.n	80067ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80067b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40007c00 	.word	0x40007c00
 80067c8:	40023800 	.word	0x40023800
 80067cc:	00f42400 	.word	0x00f42400

080067d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01a      	beq.n	80068e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068ce:	d10a      	bne.n	80068e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	605a      	str	r2, [r3, #4]
  }
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08c      	sub	sp, #48	@ 0x30
 8006918:	af02      	add	r7, sp, #8
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006924:	f7fb f88a 	bl	8001a3c <HAL_GetTick>
 8006928:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b08      	cmp	r3, #8
 8006936:	d12e      	bne.n	8006996 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006938:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	2200      	movs	r2, #0
 8006942:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f83b 	bl	80069c2 <UART_WaitOnFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d021      	beq.n	8006996 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006966:	623b      	str	r3, [r7, #32]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	69b9      	ldr	r1, [r7, #24]
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	e841 2300 	strex	r3, r2, [r1]
 800697c:	617b      	str	r3, [r7, #20]
   return(result);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e6      	bne.n	8006952 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e011      	b.n	80069ba <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2220      	movs	r2, #32
 800699a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3728      	adds	r7, #40	@ 0x28
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	4613      	mov	r3, r2
 80069d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d2:	e04f      	b.n	8006a74 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069da:	d04b      	beq.n	8006a74 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069dc:	f7fb f82e 	bl	8001a3c <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d302      	bcc.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e04e      	b.n	8006a94 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d037      	beq.n	8006a74 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b80      	cmp	r3, #128	@ 0x80
 8006a08:	d034      	beq.n	8006a74 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b40      	cmp	r3, #64	@ 0x40
 8006a0e:	d031      	beq.n	8006a74 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d110      	bne.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2208      	movs	r2, #8
 8006a24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 f8fe 	bl	8006c28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2208      	movs	r2, #8
 8006a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e029      	b.n	8006a94 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a4e:	d111      	bne.n	8006a74 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 f8e4 	bl	8006c28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e00f      	b.n	8006a94 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	69da      	ldr	r2, [r3, #28]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	bf0c      	ite	eq
 8006a84:	2301      	moveq	r3, #1
 8006a86:	2300      	movne	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d0a0      	beq.n	80069d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b096      	sub	sp, #88	@ 0x58
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	88fa      	ldrh	r2, [r7, #6]
 8006ab4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2222      	movs	r2, #34	@ 0x22
 8006ac4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d028      	beq.n	8006b22 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ad4:	4a3e      	ldr	r2, [pc, #248]	@ (8006bd0 <UART_Start_Receive_DMA+0x134>)
 8006ad6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006adc:	4a3d      	ldr	r2, [pc, #244]	@ (8006bd4 <UART_Start_Receive_DMA+0x138>)
 8006ade:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8006bd8 <UART_Start_Receive_DMA+0x13c>)
 8006ae6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aec:	2200      	movs	r2, #0
 8006aee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3324      	adds	r3, #36	@ 0x24
 8006afa:	4619      	mov	r1, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b00:	461a      	mov	r2, r3
 8006b02:	88fb      	ldrh	r3, [r7, #6]
 8006b04:	f7fb f95a 	bl	8001dbc <HAL_DMA_Start_IT>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2210      	movs	r2, #16
 8006b12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e051      	b.n	8006bc6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d018      	beq.n	8006b5c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b4a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e6      	bne.n	8006b2a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6e:	f043 0301 	orr.w	r3, r3, #1
 8006b72:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b7c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b7e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e5      	bne.n	8006b5c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bb0:	623a      	str	r2, [r7, #32]
 8006bb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	69f9      	ldr	r1, [r7, #28]
 8006bb6:	6a3a      	ldr	r2, [r7, #32]
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e5      	bne.n	8006b90 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3758      	adds	r7, #88	@ 0x58
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	08006da3 	.word	0x08006da3
 8006bd4:	08006f01 	.word	0x08006f01
 8006bd8:	08006f73 	.word	0x08006f73

08006bdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b089      	sub	sp, #36	@ 0x24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006bf8:	61fb      	str	r3, [r7, #28]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6979      	ldr	r1, [r7, #20]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e6      	bne.n	8006be4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006c1c:	bf00      	nop
 8006c1e:	3724      	adds	r7, #36	@ 0x24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b095      	sub	sp, #84	@ 0x54
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e6      	bne.n	8006c30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3308      	adds	r3, #8
 8006c68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	f023 0301 	bic.w	r3, r3, #1
 8006c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e5      	bne.n	8006c62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d118      	bne.n	8006cd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f023 0310 	bic.w	r3, r3, #16
 8006cb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6979      	ldr	r1, [r7, #20]
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e6      	bne.n	8006c9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ce4:	bf00      	nop
 8006ce6:	3754      	adds	r7, #84	@ 0x54
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b090      	sub	sp, #64	@ 0x40
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d06:	d037      	beq.n	8006d78 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3308      	adds	r3, #8
 8006d16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d30:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e5      	bne.n	8006d10 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	69b9      	ldr	r1, [r7, #24]
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	617b      	str	r3, [r7, #20]
   return(result);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e6      	bne.n	8006d44 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d76:	e002      	b.n	8006d7e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006d78:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006d7a:	f00f ff33 	bl	8016be4 <HAL_UART_TxCpltCallback>
}
 8006d7e:	bf00      	nop
 8006d80:	3740      	adds	r7, #64	@ 0x40
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff fa7f 	bl	8006298 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b09c      	sub	sp, #112	@ 0x70
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dae:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db8:	d071      	beq.n	8006e9e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006de0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006de2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006de6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e6      	bne.n	8006dc2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e06:	f023 0301 	bic.w	r3, r3, #1
 8006e0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3308      	adds	r3, #8
 8006e12:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e14:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e5      	bne.n	8006df4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3308      	adds	r3, #8
 8006e46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e5      	bne.n	8006e28 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d118      	bne.n	8006e9e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	f023 0310 	bic.w	r3, r3, #16
 8006e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	6979      	ldr	r1, [r7, #20]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	613b      	str	r3, [r7, #16]
   return(result);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1e6      	bne.n	8006e6c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d122      	bne.n	8006ef2 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8006eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8006ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ec0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ec4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d204      	bcs.n	8006ed6 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8006ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ece:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ed8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006eec:	f7ff f9f2 	bl	80062d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ef0:	e002      	b.n	8006ef8 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8006ef2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ef4:	f00f fea4 	bl	8016c40 <HAL_UART_RxCpltCallback>
}
 8006ef8:	bf00      	nop
 8006efa:	3770      	adds	r7, #112	@ 0x70
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d123      	bne.n	8006f64 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f22:	085b      	lsrs	r3, r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f3a:	897a      	ldrh	r2, [r7, #10]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d803      	bhi.n	8006f48 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	897a      	ldrh	r2, [r7, #10]
 8006f44:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f7ff f9b9 	bl	80062d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f62:	e002      	b.n	8006f6a <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff f9a1 	bl	80062ac <HAL_UART_RxHalfCpltCallback>
}
 8006f6a:	bf00      	nop
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b086      	sub	sp, #24
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f84:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f98:	2b80      	cmp	r3, #128	@ 0x80
 8006f9a:	d109      	bne.n	8006fb0 <UART_DMAError+0x3e>
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2b21      	cmp	r3, #33	@ 0x21
 8006fa0:	d106      	bne.n	8006fb0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006faa:	6978      	ldr	r0, [r7, #20]
 8006fac:	f7ff fe16 	bl	8006bdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fba:	2b40      	cmp	r3, #64	@ 0x40
 8006fbc:	d109      	bne.n	8006fd2 <UART_DMAError+0x60>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b22      	cmp	r3, #34	@ 0x22
 8006fc2:	d106      	bne.n	8006fd2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006fcc:	6978      	ldr	r0, [r7, #20]
 8006fce:	f7ff fe2b 	bl	8006c28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fd8:	f043 0210 	orr.w	r2, r3, #16
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fe2:	6978      	ldr	r0, [r7, #20]
 8006fe4:	f7ff f96c 	bl	80062c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fe8:	bf00      	nop
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f7ff f95a 	bl	80062c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800700c:	bf00      	nop
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	60bb      	str	r3, [r7, #8]
   return(result);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007030:	61fb      	str	r3, [r7, #28]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6979      	ldr	r1, [r7, #20]
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	613b      	str	r3, [r7, #16]
   return(result);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e6      	bne.n	800701c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f00f fdc2 	bl	8016be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007060:	bf00      	nop
 8007062:	3720      	adds	r7, #32
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007068:	b084      	sub	sp, #16
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	f107 001c 	add.w	r0, r7, #28
 8007076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800707a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800707e:	2b01      	cmp	r3, #1
 8007080:	d121      	bne.n	80070c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	4b21      	ldr	r3, [pc, #132]	@ (8007118 <USB_CoreInit+0xb0>)
 8007094:	4013      	ands	r3, r2
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d105      	bne.n	80070ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa92 	bl	80075e4 <USB_CoreReset>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]
 80070c4:	e010      	b.n	80070e8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa86 	bl	80075e4 <USB_CoreReset>
 80070d8:	4603      	mov	r3, r0
 80070da:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80070e8:	7fbb      	ldrb	r3, [r7, #30]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d10b      	bne.n	8007106 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f043 0206 	orr.w	r2, r3, #6
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f043 0220 	orr.w	r2, r3, #32
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007106:	7bfb      	ldrb	r3, [r7, #15]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007112:	b004      	add	sp, #16
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	ffbdffbf 	.word	0xffbdffbf

0800711c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f023 0201 	bic.w	r2, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	460b      	mov	r3, r1
 8007148:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d115      	bne.n	800718c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800716c:	200a      	movs	r0, #10
 800716e:	f7fa fc71 	bl	8001a54 <HAL_Delay>
      ms += 10U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	330a      	adds	r3, #10
 8007176:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fa25 	bl	80075c8 <USB_GetMode>
 800717e:	4603      	mov	r3, r0
 8007180:	2b01      	cmp	r3, #1
 8007182:	d01e      	beq.n	80071c2 <USB_SetCurrentMode+0x84>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2bc7      	cmp	r3, #199	@ 0xc7
 8007188:	d9f0      	bls.n	800716c <USB_SetCurrentMode+0x2e>
 800718a:	e01a      	b.n	80071c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d115      	bne.n	80071be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800719e:	200a      	movs	r0, #10
 80071a0:	f7fa fc58 	bl	8001a54 <HAL_Delay>
      ms += 10U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	330a      	adds	r3, #10
 80071a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa0c 	bl	80075c8 <USB_GetMode>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <USB_SetCurrentMode+0x84>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80071ba:	d9f0      	bls.n	800719e <USB_SetCurrentMode+0x60>
 80071bc:	e001      	b.n	80071c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e005      	b.n	80071ce <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2bc8      	cmp	r3, #200	@ 0xc8
 80071c6:	d101      	bne.n	80071cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e000      	b.n	80071ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071d8:	b084      	sub	sp, #16
 80071da:	b580      	push	{r7, lr}
 80071dc:	b086      	sub	sp, #24
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80071e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071f2:	2300      	movs	r3, #0
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	e009      	b.n	800720c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	3340      	adds	r3, #64	@ 0x40
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	2200      	movs	r2, #0
 8007204:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	3301      	adds	r3, #1
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b0e      	cmp	r3, #14
 8007210:	d9f2      	bls.n	80071f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007212:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007216:	2b00      	cmp	r3, #0
 8007218:	d11c      	bne.n	8007254 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007228:	f043 0302 	orr.w	r3, r3, #2
 800722c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007232:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	e005      	b.n	8007260 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007258:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007266:	461a      	mov	r2, r3
 8007268:	2300      	movs	r3, #0
 800726a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800726c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007270:	2b01      	cmp	r3, #1
 8007272:	d10d      	bne.n	8007290 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800727c:	2100      	movs	r1, #0
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f968 	bl	8007554 <USB_SetDevSpeed>
 8007284:	e008      	b.n	8007298 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007286:	2101      	movs	r1, #1
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f963 	bl	8007554 <USB_SetDevSpeed>
 800728e:	e003      	b.n	8007298 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007290:	2103      	movs	r1, #3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f95e 	bl	8007554 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007298:	2110      	movs	r1, #16
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f8fa 	bl	8007494 <USB_FlushTxFifo>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f924 	bl	80074f8 <USB_FlushRxFifo>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072c0:	461a      	mov	r2, r3
 80072c2:	2300      	movs	r3, #0
 80072c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072cc:	461a      	mov	r2, r3
 80072ce:	2300      	movs	r3, #0
 80072d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d8:	461a      	mov	r2, r3
 80072da:	2300      	movs	r3, #0
 80072dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072de:	2300      	movs	r3, #0
 80072e0:	613b      	str	r3, [r7, #16]
 80072e2:	e043      	b.n	800736c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072fa:	d118      	bne.n	800732e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10a      	bne.n	8007318 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800730e:	461a      	mov	r2, r3
 8007310:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	e013      	b.n	8007340 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007324:	461a      	mov	r2, r3
 8007326:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	e008      	b.n	8007340 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800733a:	461a      	mov	r2, r3
 800733c:	2300      	movs	r3, #0
 800733e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800734c:	461a      	mov	r2, r3
 800734e:	2300      	movs	r3, #0
 8007350:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800735e:	461a      	mov	r2, r3
 8007360:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007364:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	3301      	adds	r3, #1
 800736a:	613b      	str	r3, [r7, #16]
 800736c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007370:	461a      	mov	r2, r3
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	4293      	cmp	r3, r2
 8007376:	d3b5      	bcc.n	80072e4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007378:	2300      	movs	r3, #0
 800737a:	613b      	str	r3, [r7, #16]
 800737c:	e043      	b.n	8007406 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007394:	d118      	bne.n	80073c8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a8:	461a      	mov	r2, r3
 80073aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	e013      	b.n	80073da <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073be:	461a      	mov	r2, r3
 80073c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	e008      	b.n	80073da <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d4:	461a      	mov	r2, r3
 80073d6:	2300      	movs	r3, #0
 80073d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e6:	461a      	mov	r2, r3
 80073e8:	2300      	movs	r3, #0
 80073ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f8:	461a      	mov	r2, r3
 80073fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	3301      	adds	r3, #1
 8007404:	613b      	str	r3, [r7, #16]
 8007406:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800740a:	461a      	mov	r2, r3
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	4293      	cmp	r3, r2
 8007410:	d3b5      	bcc.n	800737e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007424:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007432:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007434:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007438:	2b00      	cmp	r3, #0
 800743a:	d105      	bne.n	8007448 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	f043 0210 	orr.w	r2, r3, #16
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	699a      	ldr	r2, [r3, #24]
 800744c:	4b0f      	ldr	r3, [pc, #60]	@ (800748c <USB_DevInit+0x2b4>)
 800744e:	4313      	orrs	r3, r2
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007454:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	f043 0208 	orr.w	r2, r3, #8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007468:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800746c:	2b01      	cmp	r3, #1
 800746e:	d105      	bne.n	800747c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699a      	ldr	r2, [r3, #24]
 8007474:	4b06      	ldr	r3, [pc, #24]	@ (8007490 <USB_DevInit+0x2b8>)
 8007476:	4313      	orrs	r3, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800747c:	7dfb      	ldrb	r3, [r7, #23]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007488:	b004      	add	sp, #16
 800748a:	4770      	bx	lr
 800748c:	803c3800 	.word	0x803c3800
 8007490:	40000004 	.word	0x40000004

08007494 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3301      	adds	r3, #1
 80074a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074ae:	d901      	bls.n	80074b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e01b      	b.n	80074ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	daf2      	bge.n	80074a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	019b      	lsls	r3, r3, #6
 80074c4:	f043 0220 	orr.w	r2, r3, #32
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3301      	adds	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074d8:	d901      	bls.n	80074de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e006      	b.n	80074ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d0f0      	beq.n	80074cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3301      	adds	r3, #1
 8007508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007510:	d901      	bls.n	8007516 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e018      	b.n	8007548 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	daf2      	bge.n	8007504 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2210      	movs	r2, #16
 8007526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3301      	adds	r3, #1
 800752c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007534:	d901      	bls.n	800753a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e006      	b.n	8007548 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b10      	cmp	r3, #16
 8007544:	d0f0      	beq.n	8007528 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	68f9      	ldr	r1, [r7, #12]
 8007570:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007574:	4313      	orrs	r3, r2
 8007576:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075a0:	f023 0303 	bic.w	r3, r3, #3
 80075a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075b4:	f043 0302 	orr.w	r3, r3, #2
 80075b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	f003 0301 	and.w	r3, r3, #1
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075fc:	d901      	bls.n	8007602 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e022      	b.n	8007648 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	daf2      	bge.n	80075f0 <USB_CoreReset+0xc>

  count = 10U;
 800760a:	230a      	movs	r3, #10
 800760c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800760e:	e002      	b.n	8007616 <USB_CoreReset+0x32>
  {
    count--;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3b01      	subs	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f9      	bne.n	8007610 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	f043 0201 	orr.w	r2, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3301      	adds	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007634:	d901      	bls.n	800763a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e006      	b.n	8007648 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b01      	cmp	r3, #1
 8007644:	d0f0      	beq.n	8007628 <USB_CoreReset+0x44>

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800765a:	4b96      	ldr	r3, [pc, #600]	@ (80078b4 <MX_LWIP_Init+0x260>)
 800765c:	22c0      	movs	r2, #192	@ 0xc0
 800765e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007660:	4b94      	ldr	r3, [pc, #592]	@ (80078b4 <MX_LWIP_Init+0x260>)
 8007662:	22a8      	movs	r2, #168	@ 0xa8
 8007664:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8007666:	4b93      	ldr	r3, [pc, #588]	@ (80078b4 <MX_LWIP_Init+0x260>)
 8007668:	2201      	movs	r2, #1
 800766a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 168;
 800766c:	4b91      	ldr	r3, [pc, #580]	@ (80078b4 <MX_LWIP_Init+0x260>)
 800766e:	22a8      	movs	r2, #168	@ 0xa8
 8007670:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007672:	4b91      	ldr	r3, [pc, #580]	@ (80078b8 <MX_LWIP_Init+0x264>)
 8007674:	22ff      	movs	r2, #255	@ 0xff
 8007676:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007678:	4b8f      	ldr	r3, [pc, #572]	@ (80078b8 <MX_LWIP_Init+0x264>)
 800767a:	22ff      	movs	r2, #255	@ 0xff
 800767c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800767e:	4b8e      	ldr	r3, [pc, #568]	@ (80078b8 <MX_LWIP_Init+0x264>)
 8007680:	22ff      	movs	r2, #255	@ 0xff
 8007682:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007684:	4b8c      	ldr	r3, [pc, #560]	@ (80078b8 <MX_LWIP_Init+0x264>)
 8007686:	2200      	movs	r2, #0
 8007688:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800768a:	4b8c      	ldr	r3, [pc, #560]	@ (80078bc <MX_LWIP_Init+0x268>)
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8007690:	4b8a      	ldr	r3, [pc, #552]	@ (80078bc <MX_LWIP_Init+0x268>)
 8007692:	2200      	movs	r2, #0
 8007694:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007696:	4b89      	ldr	r3, [pc, #548]	@ (80078bc <MX_LWIP_Init+0x268>)
 8007698:	2200      	movs	r2, #0
 800769a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800769c:	4b87      	ldr	r3, [pc, #540]	@ (80078bc <MX_LWIP_Init+0x268>)
 800769e:	2200      	movs	r2, #0
 80076a0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80076a2:	2100      	movs	r1, #0
 80076a4:	2000      	movs	r0, #0
 80076a6:	f005 f871 	bl	800c78c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80076aa:	4b82      	ldr	r3, [pc, #520]	@ (80078b4 <MX_LWIP_Init+0x260>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	061a      	lsls	r2, r3, #24
 80076b0:	4b80      	ldr	r3, [pc, #512]	@ (80078b4 <MX_LWIP_Init+0x260>)
 80076b2:	785b      	ldrb	r3, [r3, #1]
 80076b4:	041b      	lsls	r3, r3, #16
 80076b6:	431a      	orrs	r2, r3
 80076b8:	4b7e      	ldr	r3, [pc, #504]	@ (80078b4 <MX_LWIP_Init+0x260>)
 80076ba:	789b      	ldrb	r3, [r3, #2]
 80076bc:	021b      	lsls	r3, r3, #8
 80076be:	4313      	orrs	r3, r2
 80076c0:	4a7c      	ldr	r2, [pc, #496]	@ (80078b4 <MX_LWIP_Init+0x260>)
 80076c2:	78d2      	ldrb	r2, [r2, #3]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	061a      	lsls	r2, r3, #24
 80076c8:	4b7a      	ldr	r3, [pc, #488]	@ (80078b4 <MX_LWIP_Init+0x260>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	0619      	lsls	r1, r3, #24
 80076ce:	4b79      	ldr	r3, [pc, #484]	@ (80078b4 <MX_LWIP_Init+0x260>)
 80076d0:	785b      	ldrb	r3, [r3, #1]
 80076d2:	041b      	lsls	r3, r3, #16
 80076d4:	4319      	orrs	r1, r3
 80076d6:	4b77      	ldr	r3, [pc, #476]	@ (80078b4 <MX_LWIP_Init+0x260>)
 80076d8:	789b      	ldrb	r3, [r3, #2]
 80076da:	021b      	lsls	r3, r3, #8
 80076dc:	430b      	orrs	r3, r1
 80076de:	4975      	ldr	r1, [pc, #468]	@ (80078b4 <MX_LWIP_Init+0x260>)
 80076e0:	78c9      	ldrb	r1, [r1, #3]
 80076e2:	430b      	orrs	r3, r1
 80076e4:	021b      	lsls	r3, r3, #8
 80076e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80076ea:	431a      	orrs	r2, r3
 80076ec:	4b71      	ldr	r3, [pc, #452]	@ (80078b4 <MX_LWIP_Init+0x260>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	0619      	lsls	r1, r3, #24
 80076f2:	4b70      	ldr	r3, [pc, #448]	@ (80078b4 <MX_LWIP_Init+0x260>)
 80076f4:	785b      	ldrb	r3, [r3, #1]
 80076f6:	041b      	lsls	r3, r3, #16
 80076f8:	4319      	orrs	r1, r3
 80076fa:	4b6e      	ldr	r3, [pc, #440]	@ (80078b4 <MX_LWIP_Init+0x260>)
 80076fc:	789b      	ldrb	r3, [r3, #2]
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	430b      	orrs	r3, r1
 8007702:	496c      	ldr	r1, [pc, #432]	@ (80078b4 <MX_LWIP_Init+0x260>)
 8007704:	78c9      	ldrb	r1, [r1, #3]
 8007706:	430b      	orrs	r3, r1
 8007708:	0a1b      	lsrs	r3, r3, #8
 800770a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800770e:	431a      	orrs	r2, r3
 8007710:	4b68      	ldr	r3, [pc, #416]	@ (80078b4 <MX_LWIP_Init+0x260>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	0619      	lsls	r1, r3, #24
 8007716:	4b67      	ldr	r3, [pc, #412]	@ (80078b4 <MX_LWIP_Init+0x260>)
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	041b      	lsls	r3, r3, #16
 800771c:	4319      	orrs	r1, r3
 800771e:	4b65      	ldr	r3, [pc, #404]	@ (80078b4 <MX_LWIP_Init+0x260>)
 8007720:	789b      	ldrb	r3, [r3, #2]
 8007722:	021b      	lsls	r3, r3, #8
 8007724:	430b      	orrs	r3, r1
 8007726:	4963      	ldr	r1, [pc, #396]	@ (80078b4 <MX_LWIP_Init+0x260>)
 8007728:	78c9      	ldrb	r1, [r1, #3]
 800772a:	430b      	orrs	r3, r1
 800772c:	0e1b      	lsrs	r3, r3, #24
 800772e:	4313      	orrs	r3, r2
 8007730:	4a63      	ldr	r2, [pc, #396]	@ (80078c0 <MX_LWIP_Init+0x26c>)
 8007732:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007734:	4b60      	ldr	r3, [pc, #384]	@ (80078b8 <MX_LWIP_Init+0x264>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	061a      	lsls	r2, r3, #24
 800773a:	4b5f      	ldr	r3, [pc, #380]	@ (80078b8 <MX_LWIP_Init+0x264>)
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	041b      	lsls	r3, r3, #16
 8007740:	431a      	orrs	r2, r3
 8007742:	4b5d      	ldr	r3, [pc, #372]	@ (80078b8 <MX_LWIP_Init+0x264>)
 8007744:	789b      	ldrb	r3, [r3, #2]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	4313      	orrs	r3, r2
 800774a:	4a5b      	ldr	r2, [pc, #364]	@ (80078b8 <MX_LWIP_Init+0x264>)
 800774c:	78d2      	ldrb	r2, [r2, #3]
 800774e:	4313      	orrs	r3, r2
 8007750:	061a      	lsls	r2, r3, #24
 8007752:	4b59      	ldr	r3, [pc, #356]	@ (80078b8 <MX_LWIP_Init+0x264>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	0619      	lsls	r1, r3, #24
 8007758:	4b57      	ldr	r3, [pc, #348]	@ (80078b8 <MX_LWIP_Init+0x264>)
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	041b      	lsls	r3, r3, #16
 800775e:	4319      	orrs	r1, r3
 8007760:	4b55      	ldr	r3, [pc, #340]	@ (80078b8 <MX_LWIP_Init+0x264>)
 8007762:	789b      	ldrb	r3, [r3, #2]
 8007764:	021b      	lsls	r3, r3, #8
 8007766:	430b      	orrs	r3, r1
 8007768:	4953      	ldr	r1, [pc, #332]	@ (80078b8 <MX_LWIP_Init+0x264>)
 800776a:	78c9      	ldrb	r1, [r1, #3]
 800776c:	430b      	orrs	r3, r1
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007774:	431a      	orrs	r2, r3
 8007776:	4b50      	ldr	r3, [pc, #320]	@ (80078b8 <MX_LWIP_Init+0x264>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	0619      	lsls	r1, r3, #24
 800777c:	4b4e      	ldr	r3, [pc, #312]	@ (80078b8 <MX_LWIP_Init+0x264>)
 800777e:	785b      	ldrb	r3, [r3, #1]
 8007780:	041b      	lsls	r3, r3, #16
 8007782:	4319      	orrs	r1, r3
 8007784:	4b4c      	ldr	r3, [pc, #304]	@ (80078b8 <MX_LWIP_Init+0x264>)
 8007786:	789b      	ldrb	r3, [r3, #2]
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	430b      	orrs	r3, r1
 800778c:	494a      	ldr	r1, [pc, #296]	@ (80078b8 <MX_LWIP_Init+0x264>)
 800778e:	78c9      	ldrb	r1, [r1, #3]
 8007790:	430b      	orrs	r3, r1
 8007792:	0a1b      	lsrs	r3, r3, #8
 8007794:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007798:	431a      	orrs	r2, r3
 800779a:	4b47      	ldr	r3, [pc, #284]	@ (80078b8 <MX_LWIP_Init+0x264>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	0619      	lsls	r1, r3, #24
 80077a0:	4b45      	ldr	r3, [pc, #276]	@ (80078b8 <MX_LWIP_Init+0x264>)
 80077a2:	785b      	ldrb	r3, [r3, #1]
 80077a4:	041b      	lsls	r3, r3, #16
 80077a6:	4319      	orrs	r1, r3
 80077a8:	4b43      	ldr	r3, [pc, #268]	@ (80078b8 <MX_LWIP_Init+0x264>)
 80077aa:	789b      	ldrb	r3, [r3, #2]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	430b      	orrs	r3, r1
 80077b0:	4941      	ldr	r1, [pc, #260]	@ (80078b8 <MX_LWIP_Init+0x264>)
 80077b2:	78c9      	ldrb	r1, [r1, #3]
 80077b4:	430b      	orrs	r3, r1
 80077b6:	0e1b      	lsrs	r3, r3, #24
 80077b8:	4313      	orrs	r3, r2
 80077ba:	4a42      	ldr	r2, [pc, #264]	@ (80078c4 <MX_LWIP_Init+0x270>)
 80077bc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80077be:	4b3f      	ldr	r3, [pc, #252]	@ (80078bc <MX_LWIP_Init+0x268>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	061a      	lsls	r2, r3, #24
 80077c4:	4b3d      	ldr	r3, [pc, #244]	@ (80078bc <MX_LWIP_Init+0x268>)
 80077c6:	785b      	ldrb	r3, [r3, #1]
 80077c8:	041b      	lsls	r3, r3, #16
 80077ca:	431a      	orrs	r2, r3
 80077cc:	4b3b      	ldr	r3, [pc, #236]	@ (80078bc <MX_LWIP_Init+0x268>)
 80077ce:	789b      	ldrb	r3, [r3, #2]
 80077d0:	021b      	lsls	r3, r3, #8
 80077d2:	4313      	orrs	r3, r2
 80077d4:	4a39      	ldr	r2, [pc, #228]	@ (80078bc <MX_LWIP_Init+0x268>)
 80077d6:	78d2      	ldrb	r2, [r2, #3]
 80077d8:	4313      	orrs	r3, r2
 80077da:	061a      	lsls	r2, r3, #24
 80077dc:	4b37      	ldr	r3, [pc, #220]	@ (80078bc <MX_LWIP_Init+0x268>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	0619      	lsls	r1, r3, #24
 80077e2:	4b36      	ldr	r3, [pc, #216]	@ (80078bc <MX_LWIP_Init+0x268>)
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	041b      	lsls	r3, r3, #16
 80077e8:	4319      	orrs	r1, r3
 80077ea:	4b34      	ldr	r3, [pc, #208]	@ (80078bc <MX_LWIP_Init+0x268>)
 80077ec:	789b      	ldrb	r3, [r3, #2]
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	430b      	orrs	r3, r1
 80077f2:	4932      	ldr	r1, [pc, #200]	@ (80078bc <MX_LWIP_Init+0x268>)
 80077f4:	78c9      	ldrb	r1, [r1, #3]
 80077f6:	430b      	orrs	r3, r1
 80077f8:	021b      	lsls	r3, r3, #8
 80077fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80077fe:	431a      	orrs	r2, r3
 8007800:	4b2e      	ldr	r3, [pc, #184]	@ (80078bc <MX_LWIP_Init+0x268>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	0619      	lsls	r1, r3, #24
 8007806:	4b2d      	ldr	r3, [pc, #180]	@ (80078bc <MX_LWIP_Init+0x268>)
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	041b      	lsls	r3, r3, #16
 800780c:	4319      	orrs	r1, r3
 800780e:	4b2b      	ldr	r3, [pc, #172]	@ (80078bc <MX_LWIP_Init+0x268>)
 8007810:	789b      	ldrb	r3, [r3, #2]
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	430b      	orrs	r3, r1
 8007816:	4929      	ldr	r1, [pc, #164]	@ (80078bc <MX_LWIP_Init+0x268>)
 8007818:	78c9      	ldrb	r1, [r1, #3]
 800781a:	430b      	orrs	r3, r1
 800781c:	0a1b      	lsrs	r3, r3, #8
 800781e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007822:	431a      	orrs	r2, r3
 8007824:	4b25      	ldr	r3, [pc, #148]	@ (80078bc <MX_LWIP_Init+0x268>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	0619      	lsls	r1, r3, #24
 800782a:	4b24      	ldr	r3, [pc, #144]	@ (80078bc <MX_LWIP_Init+0x268>)
 800782c:	785b      	ldrb	r3, [r3, #1]
 800782e:	041b      	lsls	r3, r3, #16
 8007830:	4319      	orrs	r1, r3
 8007832:	4b22      	ldr	r3, [pc, #136]	@ (80078bc <MX_LWIP_Init+0x268>)
 8007834:	789b      	ldrb	r3, [r3, #2]
 8007836:	021b      	lsls	r3, r3, #8
 8007838:	430b      	orrs	r3, r1
 800783a:	4920      	ldr	r1, [pc, #128]	@ (80078bc <MX_LWIP_Init+0x268>)
 800783c:	78c9      	ldrb	r1, [r1, #3]
 800783e:	430b      	orrs	r3, r1
 8007840:	0e1b      	lsrs	r3, r3, #24
 8007842:	4313      	orrs	r3, r2
 8007844:	4a20      	ldr	r2, [pc, #128]	@ (80078c8 <MX_LWIP_Init+0x274>)
 8007846:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007848:	4b20      	ldr	r3, [pc, #128]	@ (80078cc <MX_LWIP_Init+0x278>)
 800784a:	9302      	str	r3, [sp, #8]
 800784c:	4b20      	ldr	r3, [pc, #128]	@ (80078d0 <MX_LWIP_Init+0x27c>)
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	2300      	movs	r3, #0
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	4b1c      	ldr	r3, [pc, #112]	@ (80078c8 <MX_LWIP_Init+0x274>)
 8007856:	4a1b      	ldr	r2, [pc, #108]	@ (80078c4 <MX_LWIP_Init+0x270>)
 8007858:	4919      	ldr	r1, [pc, #100]	@ (80078c0 <MX_LWIP_Init+0x26c>)
 800785a:	481e      	ldr	r0, [pc, #120]	@ (80078d4 <MX_LWIP_Init+0x280>)
 800785c:	f005 fd5c 	bl	800d318 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007860:	481c      	ldr	r0, [pc, #112]	@ (80078d4 <MX_LWIP_Init+0x280>)
 8007862:	f005 ff0b 	bl	800d67c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007866:	481b      	ldr	r0, [pc, #108]	@ (80078d4 <MX_LWIP_Init+0x280>)
 8007868:	f005 ff18 	bl	800d69c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800786c:	491a      	ldr	r1, [pc, #104]	@ (80078d8 <MX_LWIP_Init+0x284>)
 800786e:	4819      	ldr	r0, [pc, #100]	@ (80078d4 <MX_LWIP_Init+0x280>)
 8007870:	f006 f816 	bl	800d8a0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007874:	2224      	movs	r2, #36	@ 0x24
 8007876:	2100      	movs	r1, #0
 8007878:	4818      	ldr	r0, [pc, #96]	@ (80078dc <MX_LWIP_Init+0x288>)
 800787a:	f00f fc67 	bl	801714c <memset>
  attributes.name = "EthLink";
 800787e:	4b17      	ldr	r3, [pc, #92]	@ (80078dc <MX_LWIP_Init+0x288>)
 8007880:	4a17      	ldr	r2, [pc, #92]	@ (80078e0 <MX_LWIP_Init+0x28c>)
 8007882:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007884:	4b15      	ldr	r3, [pc, #84]	@ (80078dc <MX_LWIP_Init+0x288>)
 8007886:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800788a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800788c:	4b13      	ldr	r3, [pc, #76]	@ (80078dc <MX_LWIP_Init+0x288>)
 800788e:	2210      	movs	r2, #16
 8007890:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007892:	4a12      	ldr	r2, [pc, #72]	@ (80078dc <MX_LWIP_Init+0x288>)
 8007894:	490f      	ldr	r1, [pc, #60]	@ (80078d4 <MX_LWIP_Init+0x280>)
 8007896:	4813      	ldr	r0, [pc, #76]	@ (80078e4 <MX_LWIP_Init+0x290>)
 8007898:	f000 fdda 	bl	8008450 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  printf("IP: %s\n", ipaddr_ntoa(&gnetif.ip_addr));
 800789c:	4812      	ldr	r0, [pc, #72]	@ (80078e8 <MX_LWIP_Init+0x294>)
 800789e:	f00d ff7d 	bl	801579c <ip4addr_ntoa>
 80078a2:	4603      	mov	r3, r0
 80078a4:	4619      	mov	r1, r3
 80078a6:	4811      	ldr	r0, [pc, #68]	@ (80078ec <MX_LWIP_Init+0x298>)
 80078a8:	f00f faf8 	bl	8016e9c <iprintf>
/* USER CODE END 3 */
}
 80078ac:	bf00      	nop
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000a28 	.word	0x20000a28
 80078b8:	20000a2c 	.word	0x20000a2c
 80078bc:	20000a30 	.word	0x20000a30
 80078c0:	20000a1c 	.word	0x20000a1c
 80078c4:	20000a20 	.word	0x20000a20
 80078c8:	20000a24 	.word	0x20000a24
 80078cc:	0800c6c9 	.word	0x0800c6c9
 80078d0:	08007e31 	.word	0x08007e31
 80078d4:	200009e8 	.word	0x200009e8
 80078d8:	080078f1 	.word	0x080078f1
 80078dc:	20000a34 	.word	0x20000a34
 80078e0:	080180c0 	.word	0x080180c0
 80078e4:	08008109 	.word	0x08008109
 80078e8:	200009ec 	.word	0x200009ec
 80078ec:	080180c8 	.word	0x080180c8

080078f0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007916:	2320      	movs	r3, #32
 8007918:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800791a:	f3bf 8f4f 	dsb	sy
}
 800791e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007920:	e00b      	b.n	800793a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007922:	4a0d      	ldr	r2, [pc, #52]	@ (8007958 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4413      	add	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	dcf0      	bgt.n	8007922 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007940:	f3bf 8f4f 	dsb	sy
}
 8007944:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007946:	f3bf 8f6f 	isb	sy
}
 800794a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800794c:	bf00      	nop
 800794e:	371c      	adds	r7, #28
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	e000ed00 	.word	0xe000ed00

0800795c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007964:	4b04      	ldr	r3, [pc, #16]	@ (8007978 <HAL_ETH_RxCpltCallback+0x1c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4618      	mov	r0, r3
 800796a:	f001 f88f 	bl	8008a8c <osSemaphoreRelease>
}
 800796e:	bf00      	nop
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20009d64 	.word	0x20009d64

0800797c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007984:	4b04      	ldr	r3, [pc, #16]	@ (8007998 <HAL_ETH_TxCpltCallback+0x1c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4618      	mov	r0, r3
 800798a:	f001 f87f 	bl	8008a8c <osSemaphoreRelease>
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	20009d68 	.word	0x20009d68

0800799c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7fb fbae 	bl	8003106 <HAL_ETH_GetDMAError>
 80079aa:	4603      	mov	r3, r0
 80079ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079b0:	2b80      	cmp	r3, #128	@ 0x80
 80079b2:	d104      	bne.n	80079be <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80079b4:	4b04      	ldr	r3, [pc, #16]	@ (80079c8 <HAL_ETH_ErrorCallback+0x2c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f001 f867 	bl	8008a8c <osSemaphoreRelease>
  }
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20009d64 	.word	0x20009d64

080079cc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b0aa      	sub	sp, #168	@ 0xa8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80079e6:	f107 0310 	add.w	r3, r7, #16
 80079ea:	2264      	movs	r2, #100	@ 0x64
 80079ec:	2100      	movs	r1, #0
 80079ee:	4618      	mov	r0, r3
 80079f0:	f00f fbac 	bl	801714c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80079f4:	4b89      	ldr	r3, [pc, #548]	@ (8007c1c <low_level_init+0x250>)
 80079f6:	4a8a      	ldr	r2, [pc, #552]	@ (8007c20 <low_level_init+0x254>)
 80079f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80079fa:	2300      	movs	r3, #0
 80079fc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80079fe:	2380      	movs	r3, #128	@ 0x80
 8007a00:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007a02:	23e1      	movs	r3, #225	@ 0xe1
 8007a04:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007a06:	2300      	movs	r3, #0
 8007a08:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007a12:	4a82      	ldr	r2, [pc, #520]	@ (8007c1c <low_level_init+0x250>)
 8007a14:	f107 0308 	add.w	r3, r7, #8
 8007a18:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007a1a:	4b80      	ldr	r3, [pc, #512]	@ (8007c1c <low_level_init+0x250>)
 8007a1c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007a20:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007a22:	4b7e      	ldr	r3, [pc, #504]	@ (8007c1c <low_level_init+0x250>)
 8007a24:	4a7f      	ldr	r2, [pc, #508]	@ (8007c24 <low_level_init+0x258>)
 8007a26:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007a28:	4b7c      	ldr	r3, [pc, #496]	@ (8007c1c <low_level_init+0x250>)
 8007a2a:	4a7f      	ldr	r2, [pc, #508]	@ (8007c28 <low_level_init+0x25c>)
 8007a2c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007a2e:	4b7b      	ldr	r3, [pc, #492]	@ (8007c1c <low_level_init+0x250>)
 8007a30:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007a34:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007a36:	4879      	ldr	r0, [pc, #484]	@ (8007c1c <low_level_init+0x250>)
 8007a38:	f7fa fd1c 	bl	8002474 <HAL_ETH_Init>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007a42:	2238      	movs	r2, #56	@ 0x38
 8007a44:	2100      	movs	r1, #0
 8007a46:	4879      	ldr	r0, [pc, #484]	@ (8007c2c <low_level_init+0x260>)
 8007a48:	f00f fb80 	bl	801714c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007a4c:	4b77      	ldr	r3, [pc, #476]	@ (8007c2c <low_level_init+0x260>)
 8007a4e:	2221      	movs	r2, #33	@ 0x21
 8007a50:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007a52:	4b76      	ldr	r3, [pc, #472]	@ (8007c2c <low_level_init+0x260>)
 8007a54:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007a58:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007a5a:	4b74      	ldr	r3, [pc, #464]	@ (8007c2c <low_level_init+0x260>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007a60:	4873      	ldr	r0, [pc, #460]	@ (8007c30 <low_level_init+0x264>)
 8007a62:	f005 fb13 	bl	800d08c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2206      	movs	r2, #6
 8007a6a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007a6e:	4b6b      	ldr	r3, [pc, #428]	@ (8007c1c <low_level_init+0x250>)
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	781a      	ldrb	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007a7a:	4b68      	ldr	r3, [pc, #416]	@ (8007c1c <low_level_init+0x250>)
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	785a      	ldrb	r2, [r3, #1]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007a86:	4b65      	ldr	r3, [pc, #404]	@ (8007c1c <low_level_init+0x250>)
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	789a      	ldrb	r2, [r3, #2]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007a92:	4b62      	ldr	r3, [pc, #392]	@ (8007c1c <low_level_init+0x250>)
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	78da      	ldrb	r2, [r3, #3]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8007c1c <low_level_init+0x250>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	791a      	ldrb	r2, [r3, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8007c1c <low_level_init+0x250>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	795a      	ldrb	r2, [r3, #5]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007abc:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007ac4:	f043 030a 	orr.w	r3, r3, #10
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	f000 fed7 	bl	8008888 <osSemaphoreNew>
 8007ada:	4603      	mov	r3, r0
 8007adc:	4a55      	ldr	r2, [pc, #340]	@ (8007c34 <low_level_init+0x268>)
 8007ade:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	f000 fecf 	bl	8008888 <osSemaphoreNew>
 8007aea:	4603      	mov	r3, r0
 8007aec:	4a52      	ldr	r2, [pc, #328]	@ (8007c38 <low_level_init+0x26c>)
 8007aee:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007af0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007af4:	2224      	movs	r2, #36	@ 0x24
 8007af6:	2100      	movs	r1, #0
 8007af8:	4618      	mov	r0, r3
 8007afa:	f00f fb27 	bl	801714c <memset>
  attributes.name = "EthIf";
 8007afe:	4b4f      	ldr	r3, [pc, #316]	@ (8007c3c <low_level_init+0x270>)
 8007b00:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007b02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8007b0a:	2330      	movs	r3, #48	@ 0x30
 8007b0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8007b10:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007b14:	461a      	mov	r2, r3
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	4849      	ldr	r0, [pc, #292]	@ (8007c40 <low_level_init+0x274>)
 8007b1a:	f000 fc99 	bl	8008450 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007b1e:	4949      	ldr	r1, [pc, #292]	@ (8007c44 <low_level_init+0x278>)
 8007b20:	4849      	ldr	r0, [pc, #292]	@ (8007c48 <low_level_init+0x27c>)
 8007b22:	f7f9 fe64 	bl	80017ee <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8007b26:	4848      	ldr	r0, [pc, #288]	@ (8007c48 <low_level_init+0x27c>)
 8007b28:	f7f9 fe93 	bl	8001852 <LAN8742_Init>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d006      	beq.n	8007b40 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f005 fe84 	bl	800d840 <netif_set_link_down>
    netif_set_down(netif);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f005 fe1b 	bl	800d774 <netif_set_down>
 8007b3e:	e06a      	b.n	8007c16 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8007b40:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d164      	bne.n	8007c12 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007b48:	483f      	ldr	r0, [pc, #252]	@ (8007c48 <low_level_init+0x27c>)
 8007b4a:	f7f9 fecf 	bl	80018ec <LAN8742_GetLinkState>
 8007b4e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	dc06      	bgt.n	8007b68 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f005 fe70 	bl	800d840 <netif_set_link_down>
      netif_set_down(netif);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f005 fe07 	bl	800d774 <netif_set_down>
 8007b66:	e056      	b.n	8007c16 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8007b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b6c:	3b02      	subs	r3, #2
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d82a      	bhi.n	8007bc8 <low_level_init+0x1fc>
 8007b72:	a201      	add	r2, pc, #4	@ (adr r2, 8007b78 <low_level_init+0x1ac>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007b89 	.word	0x08007b89
 8007b7c:	08007b9b 	.word	0x08007b9b
 8007b80:	08007bab 	.word	0x08007bab
 8007b84:	08007bbb 	.word	0x08007bbb
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007b88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007b90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007b94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007b98:	e01f      	b.n	8007bda <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007ba0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007ba8:	e017      	b.n	8007bda <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007baa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007bb8:	e00f      	b.n	8007bda <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007bc6:	e008      	b.n	8007bda <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8007bc8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007bd0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007bd8:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007bda:	f107 0310 	add.w	r3, r7, #16
 8007bde:	4619      	mov	r1, r3
 8007be0:	480e      	ldr	r0, [pc, #56]	@ (8007c1c <low_level_init+0x250>)
 8007be2:	f7fb f92f 	bl	8002e44 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8007be6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007bea:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8007bec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007bf2:	f107 0310 	add.w	r3, r7, #16
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4808      	ldr	r0, [pc, #32]	@ (8007c1c <low_level_init+0x250>)
 8007bfa:	f7fb fa1a 	bl	8003032 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8007bfe:	4807      	ldr	r0, [pc, #28]	@ (8007c1c <low_level_init+0x250>)
 8007c00:	f7fa fcd2 	bl	80025a8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f005 fd49 	bl	800d69c <netif_set_up>
    netif_set_link_up(netif);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f005 fde4 	bl	800d7d8 <netif_set_link_up>
 8007c10:	e001      	b.n	8007c16 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8007c12:	f7f9 f949 	bl	8000ea8 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8007c16:	37a8      	adds	r7, #168	@ 0xa8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20009d6c 	.word	0x20009d6c
 8007c20:	40028000 	.word	0x40028000
 8007c24:	2000012c 	.word	0x2000012c
 8007c28:	2000008c 	.word	0x2000008c
 8007c2c:	20009e1c 	.word	0x20009e1c
 8007c30:	0801ae18 	.word	0x0801ae18
 8007c34:	20009d64 	.word	0x20009d64
 8007c38:	20009d68 	.word	0x20009d68
 8007c3c:	080180d0 	.word	0x080180d0
 8007c40:	08007ddd 	.word	0x08007ddd
 8007c44:	2000000c 	.word	0x2000000c
 8007c48:	20009e54 	.word	0x20009e54

08007c4c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b092      	sub	sp, #72	@ 0x48
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007c64:	f107 030c 	add.w	r3, r7, #12
 8007c68:	2230      	movs	r2, #48	@ 0x30
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f00f fa6d 	bl	801714c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007c72:	f107 030c 	add.w	r3, r7, #12
 8007c76:	2230      	movs	r2, #48	@ 0x30
 8007c78:	2100      	movs	r1, #0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f00f fa66 	bl	801714c <memset>

  for(q = p; q != NULL; q = q->next)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c84:	e045      	b.n	8007d12 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d902      	bls.n	8007c92 <low_level_output+0x46>
      return ERR_IF;
 8007c8c:	f06f 030b 	mvn.w	r3, #11
 8007c90:	e07f      	b.n	8007d92 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8007c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c94:	6859      	ldr	r1, [r3, #4]
 8007c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c98:	4613      	mov	r3, r2
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	3348      	adds	r3, #72	@ 0x48
 8007ca2:	443b      	add	r3, r7
 8007ca4:	3b3c      	subs	r3, #60	@ 0x3c
 8007ca6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007caa:	895b      	ldrh	r3, [r3, #10]
 8007cac:	4619      	mov	r1, r3
 8007cae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	3348      	adds	r3, #72	@ 0x48
 8007cba:	443b      	add	r3, r7
 8007cbc:	3b38      	subs	r3, #56	@ 0x38
 8007cbe:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d011      	beq.n	8007cea <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cc8:	1e5a      	subs	r2, r3, #1
 8007cca:	f107 000c 	add.w	r0, r7, #12
 8007cce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	440b      	add	r3, r1
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	18c1      	adds	r1, r0, r3
 8007cda:	4613      	mov	r3, r2
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	3348      	adds	r3, #72	@ 0x48
 8007ce4:	443b      	add	r3, r7
 8007ce6:	3b34      	subs	r3, #52	@ 0x34
 8007ce8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d109      	bne.n	8007d06 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	005b      	lsls	r3, r3, #1
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	3348      	adds	r3, #72	@ 0x48
 8007cfe:	443b      	add	r3, r7
 8007d00:	3b34      	subs	r3, #52	@ 0x34
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d08:	3301      	adds	r3, #1
 8007d0a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8007d0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1b6      	bne.n	8007c86 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	891b      	ldrh	r3, [r3, #8]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8007d9c <low_level_output+0x150>)
 8007d20:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007d22:	4a1e      	ldr	r2, [pc, #120]	@ (8007d9c <low_level_output+0x150>)
 8007d24:	f107 030c 	add.w	r3, r7, #12
 8007d28:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8007d9c <low_level_output+0x150>)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8007d30:	6838      	ldr	r0, [r7, #0]
 8007d32:	f006 fa09 	bl	800e148 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8007d36:	4919      	ldr	r1, [pc, #100]	@ (8007d9c <low_level_output+0x150>)
 8007d38:	4819      	ldr	r0, [pc, #100]	@ (8007da0 <low_level_output+0x154>)
 8007d3a:	f7fa fd25 	bl	8002788 <HAL_ETH_Transmit_IT>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d103      	bne.n	8007d4c <low_level_output+0x100>
    {
      errval = ERR_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007d4a:	e01b      	b.n	8007d84 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8007d4c:	4814      	ldr	r0, [pc, #80]	@ (8007da0 <low_level_output+0x154>)
 8007d4e:	f7fb f9cd 	bl	80030ec <HAL_ETH_GetError>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00d      	beq.n	8007d78 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8007d5c:	4b11      	ldr	r3, [pc, #68]	@ (8007da4 <low_level_output+0x158>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fe2b 	bl	80089c0 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8007d6a:	480d      	ldr	r0, [pc, #52]	@ (8007da0 <low_level_output+0x154>)
 8007d6c:	f7fa feac 	bl	8002ac8 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8007d70:	23fe      	movs	r3, #254	@ 0xfe
 8007d72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007d76:	e005      	b.n	8007d84 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8007d78:	6838      	ldr	r0, [r7, #0]
 8007d7a:	f006 f93f 	bl	800dffc <pbuf_free>
        errval =  ERR_IF;
 8007d7e:	23f4      	movs	r3, #244	@ 0xf4
 8007d80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8007d84:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007d88:	f113 0f02 	cmn.w	r3, #2
 8007d8c:	d0d3      	beq.n	8007d36 <low_level_output+0xea>

  return errval;
 8007d8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3748      	adds	r7, #72	@ 0x48
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20009e1c 	.word	0x20009e1c
 8007da0:	20009d6c 	.word	0x20009d6c
 8007da4:	20009d68 	.word	0x20009d68

08007da8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007db4:	4b07      	ldr	r3, [pc, #28]	@ (8007dd4 <low_level_input+0x2c>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d105      	bne.n	8007dc8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007dbc:	f107 030c 	add.w	r3, r7, #12
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4805      	ldr	r0, [pc, #20]	@ (8007dd8 <low_level_input+0x30>)
 8007dc4:	f7fa fd3c 	bl	8002840 <HAL_ETH_ReadData>
  }

  return p;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20009d60 	.word	0x20009d60
 8007dd8:	20009d6c 	.word	0x20009d6c

08007ddc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007dec:	4b0f      	ldr	r3, [pc, #60]	@ (8007e2c <ethernetif_input+0x50>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f04f 31ff 	mov.w	r1, #4294967295
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fde3 	bl	80089c0 <osSemaphoreAcquire>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1f5      	bne.n	8007dec <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007e00:	68b8      	ldr	r0, [r7, #8]
 8007e02:	f7ff ffd1 	bl	8007da8 <low_level_input>
 8007e06:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	4798      	blx	r3
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f006 f8ec 	bl	800dffc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1ea      	bne.n	8007e00 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007e2a:	e7df      	b.n	8007dec <ethernetif_input+0x10>
 8007e2c:	20009d64 	.word	0x20009d64

08007e30 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <ethernetif_init+0x1c>
 8007e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e78 <ethernetif_init+0x48>)
 8007e40:	f240 220d 	movw	r2, #525	@ 0x20d
 8007e44:	490d      	ldr	r1, [pc, #52]	@ (8007e7c <ethernetif_init+0x4c>)
 8007e46:	480e      	ldr	r0, [pc, #56]	@ (8007e80 <ethernetif_init+0x50>)
 8007e48:	f00f f828 	bl	8016e9c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2273      	movs	r2, #115	@ 0x73
 8007e50:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2274      	movs	r2, #116	@ 0x74
 8007e58:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a09      	ldr	r2, [pc, #36]	@ (8007e84 <ethernetif_init+0x54>)
 8007e60:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a08      	ldr	r2, [pc, #32]	@ (8007e88 <ethernetif_init+0x58>)
 8007e66:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff fdaf 	bl	80079cc <low_level_init>

  return ERR_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	080180d8 	.word	0x080180d8
 8007e7c:	080180f4 	.word	0x080180f4
 8007e80:	08018104 	.word	0x08018104
 8007e84:	080148d1 	.word	0x080148d1
 8007e88:	08007c4d 	.word	0x08007c4d

08007e8c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007e98:	68f9      	ldr	r1, [r7, #12]
 8007e9a:	4809      	ldr	r0, [pc, #36]	@ (8007ec0 <pbuf_free_custom+0x34>)
 8007e9c:	f005 f9e6 	bl	800d26c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007ea0:	4b08      	ldr	r3, [pc, #32]	@ (8007ec4 <pbuf_free_custom+0x38>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d107      	bne.n	8007eb8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007ea8:	4b06      	ldr	r3, [pc, #24]	@ (8007ec4 <pbuf_free_custom+0x38>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8007eae:	4b06      	ldr	r3, [pc, #24]	@ (8007ec8 <pbuf_free_custom+0x3c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fdea 	bl	8008a8c <osSemaphoreRelease>
  }
}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	0801ae18 	.word	0x0801ae18
 8007ec4:	20009d60 	.word	0x20009d60
 8007ec8:	20009d64 	.word	0x20009d64

08007ecc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007ed0:	f7f9 fdb4 	bl	8001a3c <HAL_GetTick>
 8007ed4:	4603      	mov	r3, r0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08e      	sub	sp, #56	@ 0x38
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	605a      	str	r2, [r3, #4]
 8007eee:	609a      	str	r2, [r3, #8]
 8007ef0:	60da      	str	r2, [r3, #12]
 8007ef2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a56      	ldr	r2, [pc, #344]	@ (8008054 <HAL_ETH_MspInit+0x178>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	f040 80a6 	bne.w	800804c <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007f00:	4b55      	ldr	r3, [pc, #340]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f04:	4a54      	ldr	r2, [pc, #336]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f0c:	4b52      	ldr	r3, [pc, #328]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f14:	623b      	str	r3, [r7, #32]
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	4b4f      	ldr	r3, [pc, #316]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f1c:	4a4e      	ldr	r2, [pc, #312]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f22:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f24:	4b4c      	ldr	r3, [pc, #304]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4b49      	ldr	r3, [pc, #292]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f34:	4a48      	ldr	r2, [pc, #288]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f3c:	4b46      	ldr	r3, [pc, #280]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f44:	61bb      	str	r3, [r7, #24]
 8007f46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f48:	4b43      	ldr	r3, [pc, #268]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4c:	4a42      	ldr	r2, [pc, #264]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f4e:	f043 0304 	orr.w	r3, r3, #4
 8007f52:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f54:	4b40      	ldr	r3, [pc, #256]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	617b      	str	r3, [r7, #20]
 8007f5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f60:	4b3d      	ldr	r3, [pc, #244]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f64:	4a3c      	ldr	r2, [pc, #240]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f66:	f043 0301 	orr.w	r3, r3, #1
 8007f6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	613b      	str	r3, [r7, #16]
 8007f76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f78:	4b37      	ldr	r3, [pc, #220]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f7c:	4a36      	ldr	r2, [pc, #216]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f7e:	f043 0302 	orr.w	r3, r3, #2
 8007f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f84:	4b34      	ldr	r3, [pc, #208]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007f90:	4b31      	ldr	r3, [pc, #196]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f94:	4a30      	ldr	r2, [pc, #192]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8008058 <HAL_ETH_MspInit+0x17c>)
 8007f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa4:	60bb      	str	r3, [r7, #8]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007fa8:	2332      	movs	r3, #50	@ 0x32
 8007faa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fac:	2302      	movs	r3, #2
 8007fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007fb8:	230b      	movs	r3, #11
 8007fba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4826      	ldr	r0, [pc, #152]	@ (800805c <HAL_ETH_MspInit+0x180>)
 8007fc4:	f7fb fccc 	bl	8003960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007fc8:	2386      	movs	r3, #134	@ 0x86
 8007fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fcc:	2302      	movs	r3, #2
 8007fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007fd8:	230b      	movs	r3, #11
 8007fda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	481f      	ldr	r0, [pc, #124]	@ (8008060 <HAL_ETH_MspInit+0x184>)
 8007fe4:	f7fb fcbc 	bl	8003960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007fe8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007fec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fee:	2302      	movs	r3, #2
 8007ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ffa:	230b      	movs	r3, #11
 8007ffc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008002:	4619      	mov	r1, r3
 8008004:	4817      	ldr	r0, [pc, #92]	@ (8008064 <HAL_ETH_MspInit+0x188>)
 8008006:	f7fb fcab 	bl	8003960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800800a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800800e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008010:	2302      	movs	r3, #2
 8008012:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008014:	2300      	movs	r3, #0
 8008016:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008018:	2303      	movs	r3, #3
 800801a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800801c:	230b      	movs	r3, #11
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008024:	4619      	mov	r1, r3
 8008026:	4810      	ldr	r0, [pc, #64]	@ (8008068 <HAL_ETH_MspInit+0x18c>)
 8008028:	f7fb fc9a 	bl	8003960 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800802c:	2200      	movs	r2, #0
 800802e:	2105      	movs	r1, #5
 8008030:	203d      	movs	r0, #61	@ 0x3d
 8008032:	f7f9 fdeb 	bl	8001c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008036:	203d      	movs	r0, #61	@ 0x3d
 8008038:	f7f9 fe04 	bl	8001c44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800803c:	2200      	movs	r2, #0
 800803e:	2105      	movs	r1, #5
 8008040:	203e      	movs	r0, #62	@ 0x3e
 8008042:	f7f9 fde3 	bl	8001c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8008046:	203e      	movs	r0, #62	@ 0x3e
 8008048:	f7f9 fdfc 	bl	8001c44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800804c:	bf00      	nop
 800804e:	3738      	adds	r7, #56	@ 0x38
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40028000 	.word	0x40028000
 8008058:	40023800 	.word	0x40023800
 800805c:	40020800 	.word	0x40020800
 8008060:	40020000 	.word	0x40020000
 8008064:	40020400 	.word	0x40020400
 8008068:	40021800 	.word	0x40021800

0800806c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008070:	4802      	ldr	r0, [pc, #8]	@ (800807c <ETH_PHY_IO_Init+0x10>)
 8008072:	f7fa fff9 	bl	8003068 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20009d6c 	.word	0x20009d6c

08008080 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
  return 0;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	68f9      	ldr	r1, [r7, #12]
 80080a2:	4807      	ldr	r0, [pc, #28]	@ (80080c0 <ETH_PHY_IO_ReadReg+0x30>)
 80080a4:	f7fa fe3a 	bl	8002d1c <HAL_ETH_ReadPHYRegister>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80080ae:	f04f 33ff 	mov.w	r3, #4294967295
 80080b2:	e000      	b.n	80080b6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20009d6c 	.word	0x20009d6c

080080c4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	68f9      	ldr	r1, [r7, #12]
 80080d6:	4807      	ldr	r0, [pc, #28]	@ (80080f4 <ETH_PHY_IO_WriteReg+0x30>)
 80080d8:	f7fa fe6b 	bl	8002db2 <HAL_ETH_WritePHYRegister>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80080e2:	f04f 33ff 	mov.w	r3, #4294967295
 80080e6:	e000      	b.n	80080ea <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20009d6c 	.word	0x20009d6c

080080f8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80080fc:	f7f9 fc9e 	bl	8001a3c <HAL_GetTick>
 8008100:	4603      	mov	r3, r0
}
 8008102:	4618      	mov	r0, r3
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b0a0      	sub	sp, #128	@ 0x80
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008110:	f107 0308 	add.w	r3, r7, #8
 8008114:	2264      	movs	r2, #100	@ 0x64
 8008116:	2100      	movs	r1, #0
 8008118:	4618      	mov	r0, r3
 800811a:	f00f f817 	bl	801714c <memset>
  int32_t PHYLinkState = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008126:	2300      	movs	r3, #0
 8008128:	67bb      	str	r3, [r7, #120]	@ 0x78
 800812a:	2300      	movs	r3, #0
 800812c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008132:	483a      	ldr	r0, [pc, #232]	@ (800821c <ethernet_link_thread+0x114>)
 8008134:	f7f9 fbda 	bl	80018ec <LAN8742_GetLinkState>
 8008138:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800813a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800813c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008140:	089b      	lsrs	r3, r3, #2
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00c      	beq.n	8008166 <ethernet_link_thread+0x5e>
 800814c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800814e:	2b01      	cmp	r3, #1
 8008150:	dc09      	bgt.n	8008166 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8008152:	4833      	ldr	r0, [pc, #204]	@ (8008220 <ethernet_link_thread+0x118>)
 8008154:	f7fa fa98 	bl	8002688 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008158:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800815a:	f005 fb0b 	bl	800d774 <netif_set_down>
    netif_set_link_down(netif);
 800815e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008160:	f005 fb6e 	bl	800d840 <netif_set_link_down>
 8008164:	e055      	b.n	8008212 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008168:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	d14e      	bne.n	8008212 <ethernet_link_thread+0x10a>
 8008174:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008176:	2b01      	cmp	r3, #1
 8008178:	dd4b      	ble.n	8008212 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800817a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800817c:	3b02      	subs	r3, #2
 800817e:	2b03      	cmp	r3, #3
 8008180:	d82a      	bhi.n	80081d8 <ethernet_link_thread+0xd0>
 8008182:	a201      	add	r2, pc, #4	@ (adr r2, 8008188 <ethernet_link_thread+0x80>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	08008199 	.word	0x08008199
 800818c:	080081ab 	.word	0x080081ab
 8008190:	080081bb 	.word	0x080081bb
 8008194:	080081cb 	.word	0x080081cb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008198:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800819c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800819e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80081a2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80081a4:	2301      	movs	r3, #1
 80081a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80081a8:	e017      	b.n	80081da <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80081ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80081b2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80081b4:	2301      	movs	r3, #1
 80081b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80081b8:	e00f      	b.n	80081da <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80081ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80081be:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80081c0:	2300      	movs	r3, #0
 80081c2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80081c4:	2301      	movs	r3, #1
 80081c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80081c8:	e007      	b.n	80081da <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80081ce:	2300      	movs	r3, #0
 80081d0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80081d2:	2301      	movs	r3, #1
 80081d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80081d6:	e000      	b.n	80081da <ethernet_link_thread+0xd2>
    default:
      break;
 80081d8:	bf00      	nop
    }

    if(linkchanged)
 80081da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d018      	beq.n	8008212 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80081e0:	f107 0308 	add.w	r3, r7, #8
 80081e4:	4619      	mov	r1, r3
 80081e6:	480e      	ldr	r0, [pc, #56]	@ (8008220 <ethernet_link_thread+0x118>)
 80081e8:	f7fa fe2c 	bl	8002e44 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80081ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081ee:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80081f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081f2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80081f4:	f107 0308 	add.w	r3, r7, #8
 80081f8:	4619      	mov	r1, r3
 80081fa:	4809      	ldr	r0, [pc, #36]	@ (8008220 <ethernet_link_thread+0x118>)
 80081fc:	f7fa ff19 	bl	8003032 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8008200:	4807      	ldr	r0, [pc, #28]	@ (8008220 <ethernet_link_thread+0x118>)
 8008202:	f7fa f9d1 	bl	80025a8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008206:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008208:	f005 fa48 	bl	800d69c <netif_set_up>
      netif_set_link_up(netif);
 800820c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800820e:	f005 fae3 	bl	800d7d8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008212:	2064      	movs	r0, #100	@ 0x64
 8008214:	f000 f9c2 	bl	800859c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008218:	e78b      	b.n	8008132 <ethernet_link_thread+0x2a>
 800821a:	bf00      	nop
 800821c:	20009e54 	.word	0x20009e54
 8008220:	20009d6c 	.word	0x20009d6c

08008224 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af02      	add	r7, sp, #8
 800822a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800822c:	4812      	ldr	r0, [pc, #72]	@ (8008278 <HAL_ETH_RxAllocateCallback+0x54>)
 800822e:	f004 ffa9 	bl	800d184 <memp_malloc_pool>
 8008232:	60f8      	str	r0, [r7, #12]
  if (p)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d014      	beq.n	8008264 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f103 0220 	add.w	r2, r3, #32
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4a0d      	ldr	r2, [pc, #52]	@ (800827c <HAL_ETH_RxAllocateCallback+0x58>)
 8008248:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008252:	9201      	str	r2, [sp, #4]
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2241      	movs	r2, #65	@ 0x41
 800825a:	2100      	movs	r1, #0
 800825c:	2000      	movs	r0, #0
 800825e:	f005 fd13 	bl	800dc88 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008262:	e005      	b.n	8008270 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008264:	4b06      	ldr	r3, [pc, #24]	@ (8008280 <HAL_ETH_RxAllocateCallback+0x5c>)
 8008266:	2201      	movs	r2, #1
 8008268:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	0801ae18 	.word	0x0801ae18
 800827c:	08007e8d 	.word	0x08007e8d
 8008280:	20009d60 	.word	0x20009d60

08008284 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3b20      	subs	r3, #32
 80082a2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	2200      	movs	r2, #0
 80082ae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	887a      	ldrh	r2, [r7, #2]
 80082b4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d103      	bne.n	80082c6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	e003      	b.n	80082ce <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	61fb      	str	r3, [r7, #28]
 80082da:	e009      	b.n	80082f0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	891a      	ldrh	r2, [r3, #8]
 80082e0:	887b      	ldrh	r3, [r7, #2]
 80082e2:	4413      	add	r3, r2
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	61fb      	str	r3, [r7, #28]
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f2      	bne.n	80082dc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80082f6:	887b      	ldrh	r3, [r7, #2]
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff fb02 	bl	8007904 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008300:	bf00      	nop
 8008302:	3720      	adds	r7, #32
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f005 fe73 	bl	800dffc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8008316:	bf00      	nop
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800831e:	b480      	push	{r7}
 8008320:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008322:	bf00      	nop
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008332:	f3ef 8305 	mrs	r3, IPSR
 8008336:	60bb      	str	r3, [r7, #8]
  return(result);
 8008338:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10f      	bne.n	800835e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800833e:	f3ef 8310 	mrs	r3, PRIMASK
 8008342:	607b      	str	r3, [r7, #4]
  return(result);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d105      	bne.n	8008356 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800834a:	f3ef 8311 	mrs	r3, BASEPRI
 800834e:	603b      	str	r3, [r7, #0]
  return(result);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <osKernelInitialize+0x3a>
 8008356:	4b0e      	ldr	r3, [pc, #56]	@ (8008390 <osKernelInitialize+0x64>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d103      	bne.n	8008366 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800835e:	f06f 0305 	mvn.w	r3, #5
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e00c      	b.n	8008380 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008366:	4b0a      	ldr	r3, [pc, #40]	@ (8008390 <osKernelInitialize+0x64>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d105      	bne.n	800837a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800836e:	4b08      	ldr	r3, [pc, #32]	@ (8008390 <osKernelInitialize+0x64>)
 8008370:	2201      	movs	r2, #1
 8008372:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	e002      	b.n	8008380 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800837a:	f04f 33ff 	mov.w	r3, #4294967295
 800837e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008380:	68fb      	ldr	r3, [r7, #12]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	20009e74 	.word	0x20009e74

08008394 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800839a:	f3ef 8305 	mrs	r3, IPSR
 800839e:	60bb      	str	r3, [r7, #8]
  return(result);
 80083a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10f      	bne.n	80083c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a6:	f3ef 8310 	mrs	r3, PRIMASK
 80083aa:	607b      	str	r3, [r7, #4]
  return(result);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d105      	bne.n	80083be <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083b2:	f3ef 8311 	mrs	r3, BASEPRI
 80083b6:	603b      	str	r3, [r7, #0]
  return(result);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d007      	beq.n	80083ce <osKernelStart+0x3a>
 80083be:	4b0f      	ldr	r3, [pc, #60]	@ (80083fc <osKernelStart+0x68>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d103      	bne.n	80083ce <osKernelStart+0x3a>
    stat = osErrorISR;
 80083c6:	f06f 0305 	mvn.w	r3, #5
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	e010      	b.n	80083f0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083ce:	4b0b      	ldr	r3, [pc, #44]	@ (80083fc <osKernelStart+0x68>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d109      	bne.n	80083ea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083d6:	f7ff ffa2 	bl	800831e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083da:	4b08      	ldr	r3, [pc, #32]	@ (80083fc <osKernelStart+0x68>)
 80083dc:	2202      	movs	r2, #2
 80083de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083e0:	f002 f92e 	bl	800a640 <vTaskStartScheduler>
      stat = osOK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	e002      	b.n	80083f0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80083ea:	f04f 33ff 	mov.w	r3, #4294967295
 80083ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80083f0:	68fb      	ldr	r3, [r7, #12]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20009e74 	.word	0x20009e74

08008400 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008406:	f3ef 8305 	mrs	r3, IPSR
 800840a:	60bb      	str	r3, [r7, #8]
  return(result);
 800840c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10f      	bne.n	8008432 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008412:	f3ef 8310 	mrs	r3, PRIMASK
 8008416:	607b      	str	r3, [r7, #4]
  return(result);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d105      	bne.n	800842a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800841e:	f3ef 8311 	mrs	r3, BASEPRI
 8008422:	603b      	str	r3, [r7, #0]
  return(result);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d007      	beq.n	800843a <osKernelGetTickCount+0x3a>
 800842a:	4b08      	ldr	r3, [pc, #32]	@ (800844c <osKernelGetTickCount+0x4c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b02      	cmp	r3, #2
 8008430:	d103      	bne.n	800843a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8008432:	f002 fa37 	bl	800a8a4 <xTaskGetTickCountFromISR>
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	e002      	b.n	8008440 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800843a:	f002 fa23 	bl	800a884 <xTaskGetTickCount>
 800843e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8008440:	68fb      	ldr	r3, [r7, #12]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20009e74 	.word	0x20009e74

08008450 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008450:	b580      	push	{r7, lr}
 8008452:	b090      	sub	sp, #64	@ 0x40
 8008454:	af04      	add	r7, sp, #16
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800845c:	2300      	movs	r3, #0
 800845e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008460:	f3ef 8305 	mrs	r3, IPSR
 8008464:	61fb      	str	r3, [r7, #28]
  return(result);
 8008466:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008468:	2b00      	cmp	r3, #0
 800846a:	f040 8090 	bne.w	800858e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800846e:	f3ef 8310 	mrs	r3, PRIMASK
 8008472:	61bb      	str	r3, [r7, #24]
  return(result);
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800847a:	f3ef 8311 	mrs	r3, BASEPRI
 800847e:	617b      	str	r3, [r7, #20]
  return(result);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <osThreadNew+0x3e>
 8008486:	4b44      	ldr	r3, [pc, #272]	@ (8008598 <osThreadNew+0x148>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b02      	cmp	r3, #2
 800848c:	d07f      	beq.n	800858e <osThreadNew+0x13e>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d07c      	beq.n	800858e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8008494:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008498:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800849a:	2318      	movs	r3, #24
 800849c:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80084a2:	f04f 33ff 	mov.w	r3, #4294967295
 80084a6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d045      	beq.n	800853a <osThreadNew+0xea>
      if (attr->name != NULL) {
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <osThreadNew+0x6c>
        name = attr->name;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d008      	beq.n	80084e2 <osThreadNew+0x92>
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	2b38      	cmp	r3, #56	@ 0x38
 80084d4:	d805      	bhi.n	80084e2 <osThreadNew+0x92>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <osThreadNew+0x96>
        return (NULL);
 80084e2:	2300      	movs	r3, #0
 80084e4:	e054      	b.n	8008590 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	089b      	lsrs	r3, r3, #2
 80084f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00e      	beq.n	800851c <osThreadNew+0xcc>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	2ba7      	cmp	r3, #167	@ 0xa7
 8008504:	d90a      	bls.n	800851c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800850a:	2b00      	cmp	r3, #0
 800850c:	d006      	beq.n	800851c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <osThreadNew+0xcc>
        mem = 1;
 8008516:	2301      	movs	r3, #1
 8008518:	623b      	str	r3, [r7, #32]
 800851a:	e010      	b.n	800853e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10c      	bne.n	800853e <osThreadNew+0xee>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d108      	bne.n	800853e <osThreadNew+0xee>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d104      	bne.n	800853e <osThreadNew+0xee>
          mem = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	623b      	str	r3, [r7, #32]
 8008538:	e001      	b.n	800853e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d110      	bne.n	8008566 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800854c:	9202      	str	r2, [sp, #8]
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f001 fe72 	bl	800a244 <xTaskCreateStatic>
 8008560:	4603      	mov	r3, r0
 8008562:	613b      	str	r3, [r7, #16]
 8008564:	e013      	b.n	800858e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d110      	bne.n	800858e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800856c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856e:	b29a      	uxth	r2, r3
 8008570:	f107 0310 	add.w	r3, r7, #16
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f001 fec6 	bl	800a310 <xTaskCreate>
 8008584:	4603      	mov	r3, r0
 8008586:	2b01      	cmp	r3, #1
 8008588:	d001      	beq.n	800858e <osThreadNew+0x13e>
          hTask = NULL;
 800858a:	2300      	movs	r3, #0
 800858c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800858e:	693b      	ldr	r3, [r7, #16]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3730      	adds	r7, #48	@ 0x30
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	20009e74 	.word	0x20009e74

0800859c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085a4:	f3ef 8305 	mrs	r3, IPSR
 80085a8:	613b      	str	r3, [r7, #16]
  return(result);
 80085aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10f      	bne.n	80085d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b0:	f3ef 8310 	mrs	r3, PRIMASK
 80085b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d105      	bne.n	80085c8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085bc:	f3ef 8311 	mrs	r3, BASEPRI
 80085c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <osDelay+0x3c>
 80085c8:	4b0a      	ldr	r3, [pc, #40]	@ (80085f4 <osDelay+0x58>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d103      	bne.n	80085d8 <osDelay+0x3c>
    stat = osErrorISR;
 80085d0:	f06f 0305 	mvn.w	r3, #5
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	e007      	b.n	80085e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d002      	beq.n	80085e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 fff4 	bl	800a5d0 <vTaskDelay>
    }
  }

  return (stat);
 80085e8:	697b      	ldr	r3, [r7, #20]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20009e74 	.word	0x20009e74

080085f8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08a      	sub	sp, #40	@ 0x28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008600:	2300      	movs	r3, #0
 8008602:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008604:	f3ef 8305 	mrs	r3, IPSR
 8008608:	613b      	str	r3, [r7, #16]
  return(result);
 800860a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800860c:	2b00      	cmp	r3, #0
 800860e:	f040 8085 	bne.w	800871c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008612:	f3ef 8310 	mrs	r3, PRIMASK
 8008616:	60fb      	str	r3, [r7, #12]
  return(result);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d105      	bne.n	800862a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800861e:	f3ef 8311 	mrs	r3, BASEPRI
 8008622:	60bb      	str	r3, [r7, #8]
  return(result);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <osMutexNew+0x3a>
 800862a:	4b3f      	ldr	r3, [pc, #252]	@ (8008728 <osMutexNew+0x130>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d074      	beq.n	800871c <osMutexNew+0x124>
    if (attr != NULL) {
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	623b      	str	r3, [r7, #32]
 800863e:	e001      	b.n	8008644 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <osMutexNew+0x5c>
      rmtx = 1U;
 800864e:	2301      	movs	r3, #1
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	e001      	b.n	8008658 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d15c      	bne.n	800871c <osMutexNew+0x124>
      mem = -1;
 8008662:	f04f 33ff 	mov.w	r3, #4294967295
 8008666:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d015      	beq.n	800869a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d006      	beq.n	8008684 <osMutexNew+0x8c>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	2b4f      	cmp	r3, #79	@ 0x4f
 800867c:	d902      	bls.n	8008684 <osMutexNew+0x8c>
          mem = 1;
 800867e:	2301      	movs	r3, #1
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	e00c      	b.n	800869e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d108      	bne.n	800869e <osMutexNew+0xa6>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d104      	bne.n	800869e <osMutexNew+0xa6>
            mem = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	61bb      	str	r3, [r7, #24]
 8008698:	e001      	b.n	800869e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d112      	bne.n	80086ca <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	4619      	mov	r1, r3
 80086b0:	2004      	movs	r0, #4
 80086b2:	f000 fe22 	bl	80092fa <xQueueCreateMutexStatic>
 80086b6:	6278      	str	r0, [r7, #36]	@ 0x24
 80086b8:	e016      	b.n	80086e8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	4619      	mov	r1, r3
 80086c0:	2001      	movs	r0, #1
 80086c2:	f000 fe1a 	bl	80092fa <xQueueCreateMutexStatic>
 80086c6:	6278      	str	r0, [r7, #36]	@ 0x24
 80086c8:	e00e      	b.n	80086e8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10b      	bne.n	80086e8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d004      	beq.n	80086e0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80086d6:	2004      	movs	r0, #4
 80086d8:	f000 fdf7 	bl	80092ca <xQueueCreateMutex>
 80086dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80086de:	e003      	b.n	80086e8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80086e0:	2001      	movs	r0, #1
 80086e2:	f000 fdf2 	bl	80092ca <xQueueCreateMutex>
 80086e6:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80086e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00c      	beq.n	8008708 <osMutexNew+0x110>
        if (attr != NULL) {
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <osMutexNew+0x104>
          name = attr->name;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	617b      	str	r3, [r7, #20]
 80086fa:	e001      	b.n	8008700 <osMutexNew+0x108>
        } else {
          name = NULL;
 80086fc:	2300      	movs	r3, #0
 80086fe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008700:	6979      	ldr	r1, [r7, #20]
 8008702:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008704:	f001 fd16 	bl	800a134 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870a:	2b00      	cmp	r3, #0
 800870c:	d006      	beq.n	800871c <osMutexNew+0x124>
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d003      	beq.n	800871c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008716:	f043 0301 	orr.w	r3, r3, #1
 800871a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800871c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800871e:	4618      	mov	r0, r3
 8008720:	3728      	adds	r7, #40	@ 0x28
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20009e74 	.word	0x20009e74

0800872c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f023 0301 	bic.w	r3, r3, #1
 800873c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800874a:	f3ef 8305 	mrs	r3, IPSR
 800874e:	613b      	str	r3, [r7, #16]
  return(result);
 8008750:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10f      	bne.n	8008776 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008756:	f3ef 8310 	mrs	r3, PRIMASK
 800875a:	60fb      	str	r3, [r7, #12]
  return(result);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d105      	bne.n	800876e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008762:	f3ef 8311 	mrs	r3, BASEPRI
 8008766:	60bb      	str	r3, [r7, #8]
  return(result);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d007      	beq.n	800877e <osMutexAcquire+0x52>
 800876e:	4b1d      	ldr	r3, [pc, #116]	@ (80087e4 <osMutexAcquire+0xb8>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b02      	cmp	r3, #2
 8008774:	d103      	bne.n	800877e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008776:	f06f 0305 	mvn.w	r3, #5
 800877a:	61fb      	str	r3, [r7, #28]
 800877c:	e02c      	b.n	80087d8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d103      	bne.n	800878c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008784:	f06f 0303 	mvn.w	r3, #3
 8008788:	61fb      	str	r3, [r7, #28]
 800878a:	e025      	b.n	80087d8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d011      	beq.n	80087b6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	69b8      	ldr	r0, [r7, #24]
 8008796:	f000 fe02 	bl	800939e <xQueueTakeMutexRecursive>
 800879a:	4603      	mov	r3, r0
 800879c:	2b01      	cmp	r3, #1
 800879e:	d01b      	beq.n	80087d8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80087a6:	f06f 0301 	mvn.w	r3, #1
 80087aa:	61fb      	str	r3, [r7, #28]
 80087ac:	e014      	b.n	80087d8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80087ae:	f06f 0302 	mvn.w	r3, #2
 80087b2:	61fb      	str	r3, [r7, #28]
 80087b4:	e010      	b.n	80087d8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	69b8      	ldr	r0, [r7, #24]
 80087ba:	f001 f9cd 	bl	8009b58 <xQueueSemaphoreTake>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d009      	beq.n	80087d8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80087ca:	f06f 0301 	mvn.w	r3, #1
 80087ce:	61fb      	str	r3, [r7, #28]
 80087d0:	e002      	b.n	80087d8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80087d2:	f06f 0302 	mvn.w	r3, #2
 80087d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80087d8:	69fb      	ldr	r3, [r7, #28]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20009e74 	.word	0x20009e74

080087e8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f023 0301 	bic.w	r3, r3, #1
 80087f6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008800:	2300      	movs	r3, #0
 8008802:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008804:	f3ef 8305 	mrs	r3, IPSR
 8008808:	613b      	str	r3, [r7, #16]
  return(result);
 800880a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10f      	bne.n	8008830 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008810:	f3ef 8310 	mrs	r3, PRIMASK
 8008814:	60fb      	str	r3, [r7, #12]
  return(result);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d105      	bne.n	8008828 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800881c:	f3ef 8311 	mrs	r3, BASEPRI
 8008820:	60bb      	str	r3, [r7, #8]
  return(result);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d007      	beq.n	8008838 <osMutexRelease+0x50>
 8008828:	4b16      	ldr	r3, [pc, #88]	@ (8008884 <osMutexRelease+0x9c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d103      	bne.n	8008838 <osMutexRelease+0x50>
    stat = osErrorISR;
 8008830:	f06f 0305 	mvn.w	r3, #5
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	e01f      	b.n	8008878 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800883e:	f06f 0303 	mvn.w	r3, #3
 8008842:	61fb      	str	r3, [r7, #28]
 8008844:	e018      	b.n	8008878 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d009      	beq.n	8008860 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800884c:	69b8      	ldr	r0, [r7, #24]
 800884e:	f000 fd6f 	bl	8009330 <xQueueGiveMutexRecursive>
 8008852:	4603      	mov	r3, r0
 8008854:	2b01      	cmp	r3, #1
 8008856:	d00f      	beq.n	8008878 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008858:	f06f 0302 	mvn.w	r3, #2
 800885c:	61fb      	str	r3, [r7, #28]
 800885e:	e00b      	b.n	8008878 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008860:	2300      	movs	r3, #0
 8008862:	2200      	movs	r2, #0
 8008864:	2100      	movs	r1, #0
 8008866:	69b8      	ldr	r0, [r7, #24]
 8008868:	f000 fe48 	bl	80094fc <xQueueGenericSend>
 800886c:	4603      	mov	r3, r0
 800886e:	2b01      	cmp	r3, #1
 8008870:	d002      	beq.n	8008878 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008872:	f06f 0302 	mvn.w	r3, #2
 8008876:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008878:	69fb      	ldr	r3, [r7, #28]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3720      	adds	r7, #32
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20009e74 	.word	0x20009e74

08008888 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008888:	b580      	push	{r7, lr}
 800888a:	b08c      	sub	sp, #48	@ 0x30
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008894:	2300      	movs	r3, #0
 8008896:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008898:	f3ef 8305 	mrs	r3, IPSR
 800889c:	61bb      	str	r3, [r7, #24]
  return(result);
 800889e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f040 8086 	bne.w	80089b2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a6:	f3ef 8310 	mrs	r3, PRIMASK
 80088aa:	617b      	str	r3, [r7, #20]
  return(result);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d105      	bne.n	80088be <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088b2:	f3ef 8311 	mrs	r3, BASEPRI
 80088b6:	613b      	str	r3, [r7, #16]
  return(result);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <osSemaphoreNew+0x3e>
 80088be:	4b3f      	ldr	r3, [pc, #252]	@ (80089bc <osSemaphoreNew+0x134>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d075      	beq.n	80089b2 <osSemaphoreNew+0x12a>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d072      	beq.n	80089b2 <osSemaphoreNew+0x12a>
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d86e      	bhi.n	80089b2 <osSemaphoreNew+0x12a>
    mem = -1;
 80088d4:	f04f 33ff 	mov.w	r3, #4294967295
 80088d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d015      	beq.n	800890c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d006      	beq.n	80088f6 <osSemaphoreNew+0x6e>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	2b4f      	cmp	r3, #79	@ 0x4f
 80088ee:	d902      	bls.n	80088f6 <osSemaphoreNew+0x6e>
        mem = 1;
 80088f0:	2301      	movs	r3, #1
 80088f2:	623b      	str	r3, [r7, #32]
 80088f4:	e00c      	b.n	8008910 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d108      	bne.n	8008910 <osSemaphoreNew+0x88>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d104      	bne.n	8008910 <osSemaphoreNew+0x88>
          mem = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	623b      	str	r3, [r7, #32]
 800890a:	e001      	b.n	8008910 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008910:	6a3b      	ldr	r3, [r7, #32]
 8008912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008916:	d04c      	beq.n	80089b2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d128      	bne.n	8008970 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d10a      	bne.n	800893a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2203      	movs	r2, #3
 800892a:	9200      	str	r2, [sp, #0]
 800892c:	2200      	movs	r2, #0
 800892e:	2100      	movs	r1, #0
 8008930:	2001      	movs	r0, #1
 8008932:	f000 fbc3 	bl	80090bc <xQueueGenericCreateStatic>
 8008936:	6278      	str	r0, [r7, #36]	@ 0x24
 8008938:	e005      	b.n	8008946 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800893a:	2203      	movs	r2, #3
 800893c:	2100      	movs	r1, #0
 800893e:	2001      	movs	r0, #1
 8008940:	f000 fc43 	bl	80091ca <xQueueGenericCreate>
 8008944:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008948:	2b00      	cmp	r3, #0
 800894a:	d022      	beq.n	8008992 <osSemaphoreNew+0x10a>
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d01f      	beq.n	8008992 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008952:	2300      	movs	r3, #0
 8008954:	2200      	movs	r2, #0
 8008956:	2100      	movs	r1, #0
 8008958:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800895a:	f000 fdcf 	bl	80094fc <xQueueGenericSend>
 800895e:	4603      	mov	r3, r0
 8008960:	2b01      	cmp	r3, #1
 8008962:	d016      	beq.n	8008992 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008964:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008966:	f001 fa97 	bl	8009e98 <vQueueDelete>
            hSemaphore = NULL;
 800896a:	2300      	movs	r3, #0
 800896c:	627b      	str	r3, [r7, #36]	@ 0x24
 800896e:	e010      	b.n	8008992 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d108      	bne.n	8008988 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	461a      	mov	r2, r3
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 fd46 	bl	8009410 <xQueueCreateCountingSemaphoreStatic>
 8008984:	6278      	str	r0, [r7, #36]	@ 0x24
 8008986:	e004      	b.n	8008992 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008988:	68b9      	ldr	r1, [r7, #8]
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 fd7d 	bl	800948a <xQueueCreateCountingSemaphore>
 8008990:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00c      	beq.n	80089b2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <osSemaphoreNew+0x11e>
          name = attr->name;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	e001      	b.n	80089aa <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80089aa:	69f9      	ldr	r1, [r7, #28]
 80089ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089ae:	f001 fbc1 	bl	800a134 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80089b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3728      	adds	r7, #40	@ 0x28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20009e74 	.word	0x20009e74

080089c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d103      	bne.n	80089e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80089d8:	f06f 0303 	mvn.w	r3, #3
 80089dc:	61fb      	str	r3, [r7, #28]
 80089de:	e04b      	b.n	8008a78 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089e0:	f3ef 8305 	mrs	r3, IPSR
 80089e4:	617b      	str	r3, [r7, #20]
  return(result);
 80089e6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10f      	bne.n	8008a0c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ec:	f3ef 8310 	mrs	r3, PRIMASK
 80089f0:	613b      	str	r3, [r7, #16]
  return(result);
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d105      	bne.n	8008a04 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089f8:	f3ef 8311 	mrs	r3, BASEPRI
 80089fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d026      	beq.n	8008a52 <osSemaphoreAcquire+0x92>
 8008a04:	4b1f      	ldr	r3, [pc, #124]	@ (8008a84 <osSemaphoreAcquire+0xc4>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d122      	bne.n	8008a52 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008a12:	f06f 0303 	mvn.w	r3, #3
 8008a16:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008a18:	e02d      	b.n	8008a76 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008a1e:	f107 0308 	add.w	r3, r7, #8
 8008a22:	461a      	mov	r2, r3
 8008a24:	2100      	movs	r1, #0
 8008a26:	69b8      	ldr	r0, [r7, #24]
 8008a28:	f001 f9ae 	bl	8009d88 <xQueueReceiveFromISR>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d003      	beq.n	8008a3a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008a32:	f06f 0302 	mvn.w	r3, #2
 8008a36:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008a38:	e01d      	b.n	8008a76 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d01a      	beq.n	8008a76 <osSemaphoreAcquire+0xb6>
 8008a40:	4b11      	ldr	r3, [pc, #68]	@ (8008a88 <osSemaphoreAcquire+0xc8>)
 8008a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008a50:	e011      	b.n	8008a76 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	69b8      	ldr	r0, [r7, #24]
 8008a56:	f001 f87f 	bl	8009b58 <xQueueSemaphoreTake>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d00b      	beq.n	8008a78 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008a66:	f06f 0301 	mvn.w	r3, #1
 8008a6a:	61fb      	str	r3, [r7, #28]
 8008a6c:	e004      	b.n	8008a78 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008a6e:	f06f 0302 	mvn.w	r3, #2
 8008a72:	61fb      	str	r3, [r7, #28]
 8008a74:	e000      	b.n	8008a78 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008a76:	bf00      	nop
      }
    }
  }

  return (stat);
 8008a78:	69fb      	ldr	r3, [r7, #28]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3720      	adds	r7, #32
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20009e74 	.word	0x20009e74
 8008a88:	e000ed04 	.word	0xe000ed04

08008a8c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d103      	bne.n	8008aaa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008aa2:	f06f 0303 	mvn.w	r3, #3
 8008aa6:	61fb      	str	r3, [r7, #28]
 8008aa8:	e03e      	b.n	8008b28 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aaa:	f3ef 8305 	mrs	r3, IPSR
 8008aae:	617b      	str	r3, [r7, #20]
  return(result);
 8008ab0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10f      	bne.n	8008ad6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aba:	613b      	str	r3, [r7, #16]
  return(result);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d105      	bne.n	8008ace <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ac6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d01e      	beq.n	8008b0c <osSemaphoreRelease+0x80>
 8008ace:	4b19      	ldr	r3, [pc, #100]	@ (8008b34 <osSemaphoreRelease+0xa8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d11a      	bne.n	8008b0c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ada:	f107 0308 	add.w	r3, r7, #8
 8008ade:	4619      	mov	r1, r3
 8008ae0:	69b8      	ldr	r0, [r7, #24]
 8008ae2:	f000 feb8 	bl	8009856 <xQueueGiveFromISR>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d003      	beq.n	8008af4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008aec:	f06f 0302 	mvn.w	r3, #2
 8008af0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008af2:	e018      	b.n	8008b26 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d015      	beq.n	8008b26 <osSemaphoreRelease+0x9a>
 8008afa:	4b0f      	ldr	r3, [pc, #60]	@ (8008b38 <osSemaphoreRelease+0xac>)
 8008afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008b0a:	e00c      	b.n	8008b26 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2100      	movs	r1, #0
 8008b12:	69b8      	ldr	r0, [r7, #24]
 8008b14:	f000 fcf2 	bl	80094fc <xQueueGenericSend>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d004      	beq.n	8008b28 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008b1e:	f06f 0302 	mvn.w	r3, #2
 8008b22:	61fb      	str	r3, [r7, #28]
 8008b24:	e000      	b.n	8008b28 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008b26:	bf00      	nop
    }
  }

  return (stat);
 8008b28:	69fb      	ldr	r3, [r7, #28]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3720      	adds	r7, #32
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20009e74 	.word	0x20009e74
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08c      	sub	sp, #48	@ 0x30
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b4c:	f3ef 8305 	mrs	r3, IPSR
 8008b50:	61bb      	str	r3, [r7, #24]
  return(result);
 8008b52:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d16f      	bne.n	8008c38 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b58:	f3ef 8310 	mrs	r3, PRIMASK
 8008b5c:	617b      	str	r3, [r7, #20]
  return(result);
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d105      	bne.n	8008b70 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b64:	f3ef 8311 	mrs	r3, BASEPRI
 8008b68:	613b      	str	r3, [r7, #16]
  return(result);
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d003      	beq.n	8008b78 <osMessageQueueNew+0x3c>
 8008b70:	4b34      	ldr	r3, [pc, #208]	@ (8008c44 <osMessageQueueNew+0x108>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d05f      	beq.n	8008c38 <osMessageQueueNew+0xfc>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d05c      	beq.n	8008c38 <osMessageQueueNew+0xfc>
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d059      	beq.n	8008c38 <osMessageQueueNew+0xfc>
    mem = -1;
 8008b84:	f04f 33ff 	mov.w	r3, #4294967295
 8008b88:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d029      	beq.n	8008be4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d012      	beq.n	8008bbe <osMessageQueueNew+0x82>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	2b4f      	cmp	r3, #79	@ 0x4f
 8008b9e:	d90e      	bls.n	8008bbe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00a      	beq.n	8008bbe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695a      	ldr	r2, [r3, #20]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	fb01 f303 	mul.w	r3, r1, r3
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d302      	bcc.n	8008bbe <osMessageQueueNew+0x82>
        mem = 1;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	623b      	str	r3, [r7, #32]
 8008bbc:	e014      	b.n	8008be8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d110      	bne.n	8008be8 <osMessageQueueNew+0xac>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10c      	bne.n	8008be8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d108      	bne.n	8008be8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d104      	bne.n	8008be8 <osMessageQueueNew+0xac>
          mem = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	623b      	str	r3, [r7, #32]
 8008be2:	e001      	b.n	8008be8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d10b      	bne.n	8008c06 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691a      	ldr	r2, [r3, #16]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	9100      	str	r1, [sp, #0]
 8008bfa:	68b9      	ldr	r1, [r7, #8]
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fa5d 	bl	80090bc <xQueueGenericCreateStatic>
 8008c02:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c04:	e008      	b.n	8008c18 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d105      	bne.n	8008c18 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 fada 	bl	80091ca <xQueueGenericCreate>
 8008c16:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00c      	beq.n	8008c38 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <osMessageQueueNew+0xf0>
        name = attr->name;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	61fb      	str	r3, [r7, #28]
 8008c2a:	e001      	b.n	8008c30 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008c30:	69f9      	ldr	r1, [r7, #28]
 8008c32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c34:	f001 fa7e 	bl	800a134 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3728      	adds	r7, #40	@ 0x28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20009e74 	.word	0x20009e74

08008c48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08a      	sub	sp, #40	@ 0x28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	603b      	str	r3, [r7, #0]
 8008c54:	4613      	mov	r3, r2
 8008c56:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c60:	f3ef 8305 	mrs	r3, IPSR
 8008c64:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c66:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10f      	bne.n	8008c8c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c70:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d105      	bne.n	8008c84 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c78:	f3ef 8311 	mrs	r3, BASEPRI
 8008c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d02c      	beq.n	8008cde <osMessageQueuePut+0x96>
 8008c84:	4b28      	ldr	r3, [pc, #160]	@ (8008d28 <osMessageQueuePut+0xe0>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d128      	bne.n	8008cde <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d005      	beq.n	8008c9e <osMessageQueuePut+0x56>
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <osMessageQueuePut+0x56>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008c9e:	f06f 0303 	mvn.w	r3, #3
 8008ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ca4:	e039      	b.n	8008d1a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008caa:	f107 0210 	add.w	r2, r7, #16
 8008cae:	2300      	movs	r3, #0
 8008cb0:	68b9      	ldr	r1, [r7, #8]
 8008cb2:	6a38      	ldr	r0, [r7, #32]
 8008cb4:	f000 fd2c 	bl	8009710 <xQueueGenericSendFromISR>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d003      	beq.n	8008cc6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008cbe:	f06f 0302 	mvn.w	r3, #2
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cc4:	e029      	b.n	8008d1a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d026      	beq.n	8008d1a <osMessageQueuePut+0xd2>
 8008ccc:	4b17      	ldr	r3, [pc, #92]	@ (8008d2c <osMessageQueuePut+0xe4>)
 8008cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cdc:	e01d      	b.n	8008d1a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008cde:	6a3b      	ldr	r3, [r7, #32]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d002      	beq.n	8008cea <osMessageQueuePut+0xa2>
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008cea:	f06f 0303 	mvn.w	r3, #3
 8008cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cf0:	e014      	b.n	8008d1c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	68b9      	ldr	r1, [r7, #8]
 8008cf8:	6a38      	ldr	r0, [r7, #32]
 8008cfa:	f000 fbff 	bl	80094fc <xQueueGenericSend>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d00b      	beq.n	8008d1c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008d0a:	f06f 0301 	mvn.w	r3, #1
 8008d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d10:	e004      	b.n	8008d1c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008d12:	f06f 0302 	mvn.w	r3, #2
 8008d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d18:	e000      	b.n	8008d1c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d1a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3728      	adds	r7, #40	@ 0x28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20009e74 	.word	0x20009e74
 8008d2c:	e000ed04 	.word	0xe000ed04

08008d30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	@ 0x28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d46:	f3ef 8305 	mrs	r3, IPSR
 8008d4a:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d4c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10f      	bne.n	8008d72 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d52:	f3ef 8310 	mrs	r3, PRIMASK
 8008d56:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d105      	bne.n	8008d6a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8008d62:	617b      	str	r3, [r7, #20]
  return(result);
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d02c      	beq.n	8008dc4 <osMessageQueueGet+0x94>
 8008d6a:	4b28      	ldr	r3, [pc, #160]	@ (8008e0c <osMessageQueueGet+0xdc>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d128      	bne.n	8008dc4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <osMessageQueueGet+0x54>
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <osMessageQueueGet+0x54>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008d84:	f06f 0303 	mvn.w	r3, #3
 8008d88:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d8a:	e038      	b.n	8008dfe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d90:	f107 0310 	add.w	r3, r7, #16
 8008d94:	461a      	mov	r2, r3
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	6a38      	ldr	r0, [r7, #32]
 8008d9a:	f000 fff5 	bl	8009d88 <xQueueReceiveFromISR>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d003      	beq.n	8008dac <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008da4:	f06f 0302 	mvn.w	r3, #2
 8008da8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008daa:	e028      	b.n	8008dfe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d025      	beq.n	8008dfe <osMessageQueueGet+0xce>
 8008db2:	4b17      	ldr	r3, [pc, #92]	@ (8008e10 <osMessageQueueGet+0xe0>)
 8008db4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dc2:	e01c      	b.n	8008dfe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <osMessageQueueGet+0xa0>
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d103      	bne.n	8008dd8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008dd0:	f06f 0303 	mvn.w	r3, #3
 8008dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dd6:	e013      	b.n	8008e00 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	68b9      	ldr	r1, [r7, #8]
 8008ddc:	6a38      	ldr	r0, [r7, #32]
 8008dde:	f000 fdd3 	bl	8009988 <xQueueReceive>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d00b      	beq.n	8008e00 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008dee:	f06f 0301 	mvn.w	r3, #1
 8008df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008df4:	e004      	b.n	8008e00 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008df6:	f06f 0302 	mvn.w	r3, #2
 8008dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dfc:	e000      	b.n	8008e00 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dfe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3728      	adds	r7, #40	@ 0x28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20009e74 	.word	0x20009e74
 8008e10:	e000ed04 	.word	0xe000ed04

08008e14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4a07      	ldr	r2, [pc, #28]	@ (8008e40 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	4a06      	ldr	r2, [pc, #24]	@ (8008e44 <vApplicationGetIdleTaskMemory+0x30>)
 8008e2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e32:	601a      	str	r2, [r3, #0]
}
 8008e34:	bf00      	nop
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr
 8008e40:	20009e78 	.word	0x20009e78
 8008e44:	20009f20 	.word	0x20009f20

08008e48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4a07      	ldr	r2, [pc, #28]	@ (8008e74 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	4a06      	ldr	r2, [pc, #24]	@ (8008e78 <vApplicationGetTimerTaskMemory+0x30>)
 8008e5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e66:	601a      	str	r2, [r3, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	2000a320 	.word	0x2000a320
 8008e78:	2000a3c8 	.word	0x2000a3c8

08008e7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f103 0208 	add.w	r2, r3, #8
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f04f 32ff 	mov.w	r2, #4294967295
 8008e94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f103 0208 	add.w	r2, r3, #8
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f103 0208 	add.w	r2, r3, #8
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b085      	sub	sp, #20
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	601a      	str	r2, [r3, #0]
}
 8008f12:	bf00      	nop
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b085      	sub	sp, #20
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f34:	d103      	bne.n	8008f3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	e00c      	b.n	8008f58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	3308      	adds	r3, #8
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	e002      	b.n	8008f4c <vListInsert+0x2e>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d2f6      	bcs.n	8008f46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]
}
 8008f84:	bf00      	nop
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	6892      	ldr	r2, [r2, #8]
 8008fa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6852      	ldr	r2, [r2, #4]
 8008fb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d103      	bne.n	8008fc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689a      	ldr	r2, [r3, #8]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	1e5a      	subs	r2, r3, #1
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10d      	bne.n	8009014 <xQueueGenericReset+0x30>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffc:	b672      	cpsid	i
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	b662      	cpsie	i
 800900c:	60bb      	str	r3, [r7, #8]
}
 800900e:	bf00      	nop
 8009010:	bf00      	nop
 8009012:	e7fd      	b.n	8009010 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009014:	f002 ff4a 	bl	800beac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009020:	68f9      	ldr	r1, [r7, #12]
 8009022:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009024:	fb01 f303 	mul.w	r3, r1, r3
 8009028:	441a      	add	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009044:	3b01      	subs	r3, #1
 8009046:	68f9      	ldr	r1, [r7, #12]
 8009048:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800904a:	fb01 f303 	mul.w	r3, r1, r3
 800904e:	441a      	add	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	22ff      	movs	r2, #255	@ 0xff
 8009058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	22ff      	movs	r2, #255	@ 0xff
 8009060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d114      	bne.n	8009094 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d01a      	beq.n	80090a8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3310      	adds	r3, #16
 8009076:	4618      	mov	r0, r3
 8009078:	f001 fdc4 	bl	800ac04 <xTaskRemoveFromEventList>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d012      	beq.n	80090a8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009082:	4b0d      	ldr	r3, [pc, #52]	@ (80090b8 <xQueueGenericReset+0xd4>)
 8009084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	e009      	b.n	80090a8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	3310      	adds	r3, #16
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff feef 	bl	8008e7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3324      	adds	r3, #36	@ 0x24
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7ff feea 	bl	8008e7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090a8:	f002 ff36 	bl	800bf18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090ac:	2301      	movs	r3, #1
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	e000ed04 	.word	0xe000ed04

080090bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08e      	sub	sp, #56	@ 0x38
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10d      	bne.n	80090ec <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d4:	b672      	cpsid	i
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	b662      	cpsie	i
 80090e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80090e6:	bf00      	nop
 80090e8:	bf00      	nop
 80090ea:	e7fd      	b.n	80090e8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10d      	bne.n	800910e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f6:	b672      	cpsid	i
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	b662      	cpsie	i
 8009106:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009108:	bf00      	nop
 800910a:	bf00      	nop
 800910c:	e7fd      	b.n	800910a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <xQueueGenericCreateStatic+0x5e>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <xQueueGenericCreateStatic+0x62>
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <xQueueGenericCreateStatic+0x64>
 800911e:	2300      	movs	r3, #0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10d      	bne.n	8009140 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009128:	b672      	cpsid	i
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	b662      	cpsie	i
 8009138:	623b      	str	r3, [r7, #32]
}
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	e7fd      	b.n	800913c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d102      	bne.n	800914c <xQueueGenericCreateStatic+0x90>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <xQueueGenericCreateStatic+0x94>
 800914c:	2301      	movs	r3, #1
 800914e:	e000      	b.n	8009152 <xQueueGenericCreateStatic+0x96>
 8009150:	2300      	movs	r3, #0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10d      	bne.n	8009172 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915a:	b672      	cpsid	i
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	b662      	cpsie	i
 800916a:	61fb      	str	r3, [r7, #28]
}
 800916c:	bf00      	nop
 800916e:	bf00      	nop
 8009170:	e7fd      	b.n	800916e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009172:	2350      	movs	r3, #80	@ 0x50
 8009174:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b50      	cmp	r3, #80	@ 0x50
 800917a:	d00d      	beq.n	8009198 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009180:	b672      	cpsid	i
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	b662      	cpsie	i
 8009190:	61bb      	str	r3, [r7, #24]
}
 8009192:	bf00      	nop
 8009194:	bf00      	nop
 8009196:	e7fd      	b.n	8009194 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009198:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800919e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00d      	beq.n	80091c0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80091b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	4613      	mov	r3, r2
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 f848 	bl	8009250 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3730      	adds	r7, #48	@ 0x30
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b08a      	sub	sp, #40	@ 0x28
 80091ce:	af02      	add	r7, sp, #8
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	60b9      	str	r1, [r7, #8]
 80091d4:	4613      	mov	r3, r2
 80091d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10d      	bne.n	80091fa <xQueueGenericCreate+0x30>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e2:	b672      	cpsid	i
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	b662      	cpsie	i
 80091f2:	613b      	str	r3, [r7, #16]
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop
 80091f8:	e7fd      	b.n	80091f6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d102      	bne.n	8009206 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009200:	2300      	movs	r3, #0
 8009202:	61fb      	str	r3, [r7, #28]
 8009204:	e004      	b.n	8009210 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	fb02 f303 	mul.w	r3, r2, r3
 800920e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	3350      	adds	r3, #80	@ 0x50
 8009214:	4618      	mov	r0, r3
 8009216:	f002 ff77 	bl	800c108 <pvPortMalloc>
 800921a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d011      	beq.n	8009246 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	3350      	adds	r3, #80	@ 0x50
 800922a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009234:	79fa      	ldrb	r2, [r7, #7]
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	4613      	mov	r3, r2
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	68b9      	ldr	r1, [r7, #8]
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 f805 	bl	8009250 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009246:	69bb      	ldr	r3, [r7, #24]
	}
 8009248:	4618      	mov	r0, r3
 800924a:	3720      	adds	r7, #32
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d103      	bne.n	800926c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	e002      	b.n	8009272 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800927e:	2101      	movs	r1, #1
 8009280:	69b8      	ldr	r0, [r7, #24]
 8009282:	f7ff feaf 	bl	8008fe4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	78fa      	ldrb	r2, [r7, #3]
 800928a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800928e:	bf00      	nop
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009296:	b580      	push	{r7, lr}
 8009298:	b082      	sub	sp, #8
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00e      	beq.n	80092c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80092b6:	2300      	movs	r3, #0
 80092b8:	2200      	movs	r2, #0
 80092ba:	2100      	movs	r1, #0
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f91d 	bl	80094fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b086      	sub	sp, #24
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	4603      	mov	r3, r0
 80092d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80092d4:	2301      	movs	r3, #1
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	2300      	movs	r3, #0
 80092da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	461a      	mov	r2, r3
 80092e0:	6939      	ldr	r1, [r7, #16]
 80092e2:	6978      	ldr	r0, [r7, #20]
 80092e4:	f7ff ff71 	bl	80091ca <xQueueGenericCreate>
 80092e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f7ff ffd3 	bl	8009296 <prvInitialiseMutex>

		return xNewQueue;
 80092f0:	68fb      	ldr	r3, [r7, #12]
	}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b088      	sub	sp, #32
 80092fe:	af02      	add	r7, sp, #8
 8009300:	4603      	mov	r3, r0
 8009302:	6039      	str	r1, [r7, #0]
 8009304:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009306:	2301      	movs	r3, #1
 8009308:	617b      	str	r3, [r7, #20]
 800930a:	2300      	movs	r3, #0
 800930c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800930e:	79fb      	ldrb	r3, [r7, #7]
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2200      	movs	r2, #0
 8009316:	6939      	ldr	r1, [r7, #16]
 8009318:	6978      	ldr	r0, [r7, #20]
 800931a:	f7ff fecf 	bl	80090bc <xQueueGenericCreateStatic>
 800931e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f7ff ffb8 	bl	8009296 <prvInitialiseMutex>

		return xNewQueue;
 8009326:	68fb      	ldr	r3, [r7, #12]
	}
 8009328:	4618      	mov	r0, r3
 800932a:	3718      	adds	r7, #24
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009330:	b590      	push	{r4, r7, lr}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10d      	bne.n	800935e <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009346:	b672      	cpsid	i
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	b662      	cpsie	i
 8009356:	60fb      	str	r3, [r7, #12]
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	e7fd      	b.n	800935a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	689c      	ldr	r4, [r3, #8]
 8009362:	f001 fe1d 	bl	800afa0 <xTaskGetCurrentTaskHandle>
 8009366:	4603      	mov	r3, r0
 8009368:	429c      	cmp	r4, r3
 800936a:	d111      	bne.n	8009390 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	1e5a      	subs	r2, r3, #1
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d105      	bne.n	800938a <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800937e:	2300      	movs	r3, #0
 8009380:	2200      	movs	r2, #0
 8009382:	2100      	movs	r1, #0
 8009384:	6938      	ldr	r0, [r7, #16]
 8009386:	f000 f8b9 	bl	80094fc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800938a:	2301      	movs	r3, #1
 800938c:	617b      	str	r3, [r7, #20]
 800938e:	e001      	b.n	8009394 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009390:	2300      	movs	r3, #0
 8009392:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009394:	697b      	ldr	r3, [r7, #20]
	}
 8009396:	4618      	mov	r0, r3
 8009398:	371c      	adds	r7, #28
 800939a:	46bd      	mov	sp, r7
 800939c:	bd90      	pop	{r4, r7, pc}

0800939e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800939e:	b590      	push	{r4, r7, lr}
 80093a0:	b087      	sub	sp, #28
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10d      	bne.n	80093ce <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b6:	b672      	cpsid	i
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	b662      	cpsie	i
 80093c6:	60fb      	str	r3, [r7, #12]
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	e7fd      	b.n	80093ca <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	689c      	ldr	r4, [r3, #8]
 80093d2:	f001 fde5 	bl	800afa0 <xTaskGetCurrentTaskHandle>
 80093d6:	4603      	mov	r3, r0
 80093d8:	429c      	cmp	r4, r3
 80093da:	d107      	bne.n	80093ec <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	1c5a      	adds	r2, r3, #1
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80093e6:	2301      	movs	r3, #1
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	e00c      	b.n	8009406 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6938      	ldr	r0, [r7, #16]
 80093f0:	f000 fbb2 	bl	8009b58 <xQueueSemaphoreTake>
 80093f4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d004      	beq.n	8009406 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009406:	697b      	ldr	r3, [r7, #20]
	}
 8009408:	4618      	mov	r0, r3
 800940a:	371c      	adds	r7, #28
 800940c:	46bd      	mov	sp, r7
 800940e:	bd90      	pop	{r4, r7, pc}

08009410 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009410:	b580      	push	{r7, lr}
 8009412:	b08a      	sub	sp, #40	@ 0x28
 8009414:	af02      	add	r7, sp, #8
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10d      	bne.n	800943e <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009426:	b672      	cpsid	i
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	b662      	cpsie	i
 8009436:	61bb      	str	r3, [r7, #24]
}
 8009438:	bf00      	nop
 800943a:	bf00      	nop
 800943c:	e7fd      	b.n	800943a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	429a      	cmp	r2, r3
 8009444:	d90d      	bls.n	8009462 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944a:	b672      	cpsid	i
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	b662      	cpsie	i
 800945a:	617b      	str	r3, [r7, #20]
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	e7fd      	b.n	800945e <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009462:	2302      	movs	r3, #2
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	2100      	movs	r1, #0
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f7ff fe25 	bl	80090bc <xQueueGenericCreateStatic>
 8009472:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d002      	beq.n	8009480 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009480:	69fb      	ldr	r3, [r7, #28]
	}
 8009482:	4618      	mov	r0, r3
 8009484:	3720      	adds	r7, #32
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800948a:	b580      	push	{r7, lr}
 800948c:	b086      	sub	sp, #24
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10d      	bne.n	80094b6 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	b672      	cpsid	i
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	b662      	cpsie	i
 80094ae:	613b      	str	r3, [r7, #16]
}
 80094b0:	bf00      	nop
 80094b2:	bf00      	nop
 80094b4:	e7fd      	b.n	80094b2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d90d      	bls.n	80094da <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c2:	b672      	cpsid	i
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	b662      	cpsie	i
 80094d2:	60fb      	str	r3, [r7, #12]
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	e7fd      	b.n	80094d6 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80094da:	2202      	movs	r2, #2
 80094dc:	2100      	movs	r1, #0
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7ff fe73 	bl	80091ca <xQueueGenericCreate>
 80094e4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d002      	beq.n	80094f2 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80094f2:	697b      	ldr	r3, [r7, #20]
	}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08e      	sub	sp, #56	@ 0x38
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800950a:	2300      	movs	r3, #0
 800950c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10d      	bne.n	8009534 <xQueueGenericSend+0x38>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951c:	b672      	cpsid	i
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	b662      	cpsie	i
 800952c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800952e:	bf00      	nop
 8009530:	bf00      	nop
 8009532:	e7fd      	b.n	8009530 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d103      	bne.n	8009542 <xQueueGenericSend+0x46>
 800953a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <xQueueGenericSend+0x4a>
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <xQueueGenericSend+0x4c>
 8009546:	2300      	movs	r3, #0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10d      	bne.n	8009568 <xQueueGenericSend+0x6c>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009550:	b672      	cpsid	i
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	b662      	cpsie	i
 8009560:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	2b02      	cmp	r3, #2
 800956c:	d103      	bne.n	8009576 <xQueueGenericSend+0x7a>
 800956e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009572:	2b01      	cmp	r3, #1
 8009574:	d101      	bne.n	800957a <xQueueGenericSend+0x7e>
 8009576:	2301      	movs	r3, #1
 8009578:	e000      	b.n	800957c <xQueueGenericSend+0x80>
 800957a:	2300      	movs	r3, #0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10d      	bne.n	800959c <xQueueGenericSend+0xa0>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009584:	b672      	cpsid	i
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	b662      	cpsie	i
 8009594:	623b      	str	r3, [r7, #32]
}
 8009596:	bf00      	nop
 8009598:	bf00      	nop
 800959a:	e7fd      	b.n	8009598 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800959c:	f001 fd10 	bl	800afc0 <xTaskGetSchedulerState>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d102      	bne.n	80095ac <xQueueGenericSend+0xb0>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <xQueueGenericSend+0xb4>
 80095ac:	2301      	movs	r3, #1
 80095ae:	e000      	b.n	80095b2 <xQueueGenericSend+0xb6>
 80095b0:	2300      	movs	r3, #0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10d      	bne.n	80095d2 <xQueueGenericSend+0xd6>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ba:	b672      	cpsid	i
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	b662      	cpsie	i
 80095ca:	61fb      	str	r3, [r7, #28]
}
 80095cc:	bf00      	nop
 80095ce:	bf00      	nop
 80095d0:	e7fd      	b.n	80095ce <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095d2:	f002 fc6b 	bl	800beac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095de:	429a      	cmp	r2, r3
 80095e0:	d302      	bcc.n	80095e8 <xQueueGenericSend+0xec>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d129      	bne.n	800963c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095ee:	f000 fc91 	bl	8009f14 <prvCopyDataToQueue>
 80095f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d010      	beq.n	800961e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	3324      	adds	r3, #36	@ 0x24
 8009600:	4618      	mov	r0, r3
 8009602:	f001 faff 	bl	800ac04 <xTaskRemoveFromEventList>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d013      	beq.n	8009634 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800960c:	4b3f      	ldr	r3, [pc, #252]	@ (800970c <xQueueGenericSend+0x210>)
 800960e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	e00a      	b.n	8009634 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800961e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d007      	beq.n	8009634 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009624:	4b39      	ldr	r3, [pc, #228]	@ (800970c <xQueueGenericSend+0x210>)
 8009626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009634:	f002 fc70 	bl	800bf18 <vPortExitCritical>
				return pdPASS;
 8009638:	2301      	movs	r3, #1
 800963a:	e063      	b.n	8009704 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d103      	bne.n	800964a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009642:	f002 fc69 	bl	800bf18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009646:	2300      	movs	r3, #0
 8009648:	e05c      	b.n	8009704 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800964a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800964c:	2b00      	cmp	r3, #0
 800964e:	d106      	bne.n	800965e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009650:	f107 0314 	add.w	r3, r7, #20
 8009654:	4618      	mov	r0, r3
 8009656:	f001 fb3b 	bl	800acd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800965a:	2301      	movs	r3, #1
 800965c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800965e:	f002 fc5b 	bl	800bf18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009662:	f001 f861 	bl	800a728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009666:	f002 fc21 	bl	800beac <vPortEnterCritical>
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009670:	b25b      	sxtb	r3, r3
 8009672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009676:	d103      	bne.n	8009680 <xQueueGenericSend+0x184>
 8009678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009686:	b25b      	sxtb	r3, r3
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968c:	d103      	bne.n	8009696 <xQueueGenericSend+0x19a>
 800968e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009696:	f002 fc3f 	bl	800bf18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800969a:	1d3a      	adds	r2, r7, #4
 800969c:	f107 0314 	add.w	r3, r7, #20
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 fb2a 	bl	800acfc <xTaskCheckForTimeOut>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d124      	bne.n	80096f8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80096ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096b0:	f000 fd28 	bl	800a104 <prvIsQueueFull>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d018      	beq.n	80096ec <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096bc:	3310      	adds	r3, #16
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f001 fa48 	bl	800ab58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096ca:	f000 fcb3 	bl	800a034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096ce:	f001 f839 	bl	800a744 <xTaskResumeAll>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f47f af7c 	bne.w	80095d2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80096da:	4b0c      	ldr	r3, [pc, #48]	@ (800970c <xQueueGenericSend+0x210>)
 80096dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	e772      	b.n	80095d2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096ee:	f000 fca1 	bl	800a034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096f2:	f001 f827 	bl	800a744 <xTaskResumeAll>
 80096f6:	e76c      	b.n	80095d2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096fa:	f000 fc9b 	bl	800a034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096fe:	f001 f821 	bl	800a744 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009702:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009704:	4618      	mov	r0, r3
 8009706:	3738      	adds	r7, #56	@ 0x38
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	e000ed04 	.word	0xe000ed04

08009710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b08e      	sub	sp, #56	@ 0x38
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10d      	bne.n	8009744 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972c:	b672      	cpsid	i
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	b662      	cpsie	i
 800973c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800973e:	bf00      	nop
 8009740:	bf00      	nop
 8009742:	e7fd      	b.n	8009740 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d103      	bne.n	8009752 <xQueueGenericSendFromISR+0x42>
 800974a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <xQueueGenericSendFromISR+0x46>
 8009752:	2301      	movs	r3, #1
 8009754:	e000      	b.n	8009758 <xQueueGenericSendFromISR+0x48>
 8009756:	2300      	movs	r3, #0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10d      	bne.n	8009778 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009760:	b672      	cpsid	i
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	b662      	cpsie	i
 8009770:	623b      	str	r3, [r7, #32]
}
 8009772:	bf00      	nop
 8009774:	bf00      	nop
 8009776:	e7fd      	b.n	8009774 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2b02      	cmp	r3, #2
 800977c:	d103      	bne.n	8009786 <xQueueGenericSendFromISR+0x76>
 800977e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009782:	2b01      	cmp	r3, #1
 8009784:	d101      	bne.n	800978a <xQueueGenericSendFromISR+0x7a>
 8009786:	2301      	movs	r3, #1
 8009788:	e000      	b.n	800978c <xQueueGenericSendFromISR+0x7c>
 800978a:	2300      	movs	r3, #0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10d      	bne.n	80097ac <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009794:	b672      	cpsid	i
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	b662      	cpsie	i
 80097a4:	61fb      	str	r3, [r7, #28]
}
 80097a6:	bf00      	nop
 80097a8:	bf00      	nop
 80097aa:	e7fd      	b.n	80097a8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097ac:	f002 fc66 	bl	800c07c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80097b0:	f3ef 8211 	mrs	r2, BASEPRI
 80097b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b8:	b672      	cpsid	i
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	b662      	cpsie	i
 80097c8:	61ba      	str	r2, [r7, #24]
 80097ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80097cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097d8:	429a      	cmp	r2, r3
 80097da:	d302      	bcc.n	80097e2 <xQueueGenericSendFromISR+0xd2>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d12c      	bne.n	800983c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	68b9      	ldr	r1, [r7, #8]
 80097f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097f2:	f000 fb8f 	bl	8009f14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80097fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fe:	d112      	bne.n	8009826 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009804:	2b00      	cmp	r3, #0
 8009806:	d016      	beq.n	8009836 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980a:	3324      	adds	r3, #36	@ 0x24
 800980c:	4618      	mov	r0, r3
 800980e:	f001 f9f9 	bl	800ac04 <xTaskRemoveFromEventList>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00e      	beq.n	8009836 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00b      	beq.n	8009836 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	e007      	b.n	8009836 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009826:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800982a:	3301      	adds	r3, #1
 800982c:	b2db      	uxtb	r3, r3
 800982e:	b25a      	sxtb	r2, r3
 8009830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009836:	2301      	movs	r3, #1
 8009838:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800983a:	e001      	b.n	8009840 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800983c:	2300      	movs	r3, #0
 800983e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009842:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800984a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800984c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800984e:	4618      	mov	r0, r3
 8009850:	3738      	adds	r7, #56	@ 0x38
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b08e      	sub	sp, #56	@ 0x38
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10d      	bne.n	8009886 <xQueueGiveFromISR+0x30>
	__asm volatile
 800986a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986e:	b672      	cpsid	i
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	b662      	cpsie	i
 800987e:	623b      	str	r3, [r7, #32]
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	e7fd      	b.n	8009882 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00d      	beq.n	80098aa <xQueueGiveFromISR+0x54>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	b672      	cpsid	i
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	b662      	cpsie	i
 80098a2:	61fb      	str	r3, [r7, #28]
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop
 80098a8:	e7fd      	b.n	80098a6 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d103      	bne.n	80098ba <xQueueGiveFromISR+0x64>
 80098b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <xQueueGiveFromISR+0x68>
 80098ba:	2301      	movs	r3, #1
 80098bc:	e000      	b.n	80098c0 <xQueueGiveFromISR+0x6a>
 80098be:	2300      	movs	r3, #0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10d      	bne.n	80098e0 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c8:	b672      	cpsid	i
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	b662      	cpsie	i
 80098d8:	61bb      	str	r3, [r7, #24]
}
 80098da:	bf00      	nop
 80098dc:	bf00      	nop
 80098de:	e7fd      	b.n	80098dc <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098e0:	f002 fbcc 	bl	800c07c <vPortValidateInterruptPriority>
	__asm volatile
 80098e4:	f3ef 8211 	mrs	r2, BASEPRI
 80098e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ec:	b672      	cpsid	i
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	b662      	cpsie	i
 80098fc:	617a      	str	r2, [r7, #20]
 80098fe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009900:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009902:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009908:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800990a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800990e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009910:	429a      	cmp	r2, r3
 8009912:	d22b      	bcs.n	800996c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800991a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800991e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009920:	1c5a      	adds	r2, r3, #1
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009926:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992e:	d112      	bne.n	8009956 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009934:	2b00      	cmp	r3, #0
 8009936:	d016      	beq.n	8009966 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	3324      	adds	r3, #36	@ 0x24
 800993c:	4618      	mov	r0, r3
 800993e:	f001 f961 	bl	800ac04 <xTaskRemoveFromEventList>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00e      	beq.n	8009966 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00b      	beq.n	8009966 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2201      	movs	r2, #1
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	e007      	b.n	8009966 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800995a:	3301      	adds	r3, #1
 800995c:	b2db      	uxtb	r3, r3
 800995e:	b25a      	sxtb	r2, r3
 8009960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009966:	2301      	movs	r3, #1
 8009968:	637b      	str	r3, [r7, #52]	@ 0x34
 800996a:	e001      	b.n	8009970 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800996c:	2300      	movs	r3, #0
 800996e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009972:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f383 8811 	msr	BASEPRI, r3
}
 800997a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800997c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800997e:	4618      	mov	r0, r3
 8009980:	3738      	adds	r7, #56	@ 0x38
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08c      	sub	sp, #48	@ 0x30
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009994:	2300      	movs	r3, #0
 8009996:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800999c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10d      	bne.n	80099be <xQueueReceive+0x36>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a6:	b672      	cpsid	i
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	b662      	cpsie	i
 80099b6:	623b      	str	r3, [r7, #32]
}
 80099b8:	bf00      	nop
 80099ba:	bf00      	nop
 80099bc:	e7fd      	b.n	80099ba <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d103      	bne.n	80099cc <xQueueReceive+0x44>
 80099c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <xQueueReceive+0x48>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e000      	b.n	80099d2 <xQueueReceive+0x4a>
 80099d0:	2300      	movs	r3, #0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10d      	bne.n	80099f2 <xQueueReceive+0x6a>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	b672      	cpsid	i
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	b662      	cpsie	i
 80099ea:	61fb      	str	r3, [r7, #28]
}
 80099ec:	bf00      	nop
 80099ee:	bf00      	nop
 80099f0:	e7fd      	b.n	80099ee <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099f2:	f001 fae5 	bl	800afc0 <xTaskGetSchedulerState>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d102      	bne.n	8009a02 <xQueueReceive+0x7a>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d101      	bne.n	8009a06 <xQueueReceive+0x7e>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e000      	b.n	8009a08 <xQueueReceive+0x80>
 8009a06:	2300      	movs	r3, #0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10d      	bne.n	8009a28 <xQueueReceive+0xa0>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a10:	b672      	cpsid	i
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	b662      	cpsie	i
 8009a20:	61bb      	str	r3, [r7, #24]
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	e7fd      	b.n	8009a24 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a28:	f002 fa40 	bl	800beac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d01f      	beq.n	8009a78 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a3c:	f000 fad4 	bl	8009fe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a42:	1e5a      	subs	r2, r3, #1
 8009a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00f      	beq.n	8009a70 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a52:	3310      	adds	r3, #16
 8009a54:	4618      	mov	r0, r3
 8009a56:	f001 f8d5 	bl	800ac04 <xTaskRemoveFromEventList>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d007      	beq.n	8009a70 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a60:	4b3c      	ldr	r3, [pc, #240]	@ (8009b54 <xQueueReceive+0x1cc>)
 8009a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a70:	f002 fa52 	bl	800bf18 <vPortExitCritical>
				return pdPASS;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e069      	b.n	8009b4c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d103      	bne.n	8009a86 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a7e:	f002 fa4b 	bl	800bf18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a82:	2300      	movs	r3, #0
 8009a84:	e062      	b.n	8009b4c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d106      	bne.n	8009a9a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a8c:	f107 0310 	add.w	r3, r7, #16
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 f91d 	bl	800acd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a96:	2301      	movs	r3, #1
 8009a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a9a:	f002 fa3d 	bl	800bf18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a9e:	f000 fe43 	bl	800a728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aa2:	f002 fa03 	bl	800beac <vPortEnterCritical>
 8009aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009aac:	b25b      	sxtb	r3, r3
 8009aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab2:	d103      	bne.n	8009abc <xQueueReceive+0x134>
 8009ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ac2:	b25b      	sxtb	r3, r3
 8009ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac8:	d103      	bne.n	8009ad2 <xQueueReceive+0x14a>
 8009aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ad2:	f002 fa21 	bl	800bf18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ad6:	1d3a      	adds	r2, r7, #4
 8009ad8:	f107 0310 	add.w	r3, r7, #16
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f001 f90c 	bl	800acfc <xTaskCheckForTimeOut>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d123      	bne.n	8009b32 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009aec:	f000 faf4 	bl	800a0d8 <prvIsQueueEmpty>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d017      	beq.n	8009b26 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af8:	3324      	adds	r3, #36	@ 0x24
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	4611      	mov	r1, r2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f001 f82a 	bl	800ab58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b06:	f000 fa95 	bl	800a034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b0a:	f000 fe1b 	bl	800a744 <xTaskResumeAll>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d189      	bne.n	8009a28 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8009b14:	4b0f      	ldr	r3, [pc, #60]	@ (8009b54 <xQueueReceive+0x1cc>)
 8009b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	e780      	b.n	8009a28 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b28:	f000 fa84 	bl	800a034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b2c:	f000 fe0a 	bl	800a744 <xTaskResumeAll>
 8009b30:	e77a      	b.n	8009a28 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b34:	f000 fa7e 	bl	800a034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b38:	f000 fe04 	bl	800a744 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b3e:	f000 facb 	bl	800a0d8 <prvIsQueueEmpty>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f43f af6f 	beq.w	8009a28 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3730      	adds	r7, #48	@ 0x30
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	e000ed04 	.word	0xe000ed04

08009b58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08e      	sub	sp, #56	@ 0x38
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b62:	2300      	movs	r3, #0
 8009b64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10d      	bne.n	8009b90 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b78:	b672      	cpsid	i
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	b662      	cpsie	i
 8009b88:	623b      	str	r3, [r7, #32]
}
 8009b8a:	bf00      	nop
 8009b8c:	bf00      	nop
 8009b8e:	e7fd      	b.n	8009b8c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00d      	beq.n	8009bb4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9c:	b672      	cpsid	i
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	b662      	cpsie	i
 8009bac:	61fb      	str	r3, [r7, #28]
}
 8009bae:	bf00      	nop
 8009bb0:	bf00      	nop
 8009bb2:	e7fd      	b.n	8009bb0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bb4:	f001 fa04 	bl	800afc0 <xTaskGetSchedulerState>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d102      	bne.n	8009bc4 <xQueueSemaphoreTake+0x6c>
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <xQueueSemaphoreTake+0x70>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e000      	b.n	8009bca <xQueueSemaphoreTake+0x72>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10d      	bne.n	8009bea <xQueueSemaphoreTake+0x92>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	b672      	cpsid	i
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	b662      	cpsie	i
 8009be2:	61bb      	str	r3, [r7, #24]
}
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	e7fd      	b.n	8009be6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bea:	f002 f95f 	bl	800beac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d024      	beq.n	8009c44 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfc:	1e5a      	subs	r2, r3, #1
 8009bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c00:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d104      	bne.n	8009c14 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c0a:	f001 fb5b 	bl	800b2c4 <pvTaskIncrementMutexHeldCount>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c12:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00f      	beq.n	8009c3c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1e:	3310      	adds	r3, #16
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 ffef 	bl	800ac04 <xTaskRemoveFromEventList>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d007      	beq.n	8009c3c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c2c:	4b55      	ldr	r3, [pc, #340]	@ (8009d84 <xQueueSemaphoreTake+0x22c>)
 8009c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c3c:	f002 f96c 	bl	800bf18 <vPortExitCritical>
				return pdPASS;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e09a      	b.n	8009d7a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d114      	bne.n	8009c74 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00d      	beq.n	8009c6c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c54:	b672      	cpsid	i
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	b662      	cpsie	i
 8009c64:	617b      	str	r3, [r7, #20]
}
 8009c66:	bf00      	nop
 8009c68:	bf00      	nop
 8009c6a:	e7fd      	b.n	8009c68 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009c6c:	f002 f954 	bl	800bf18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c70:	2300      	movs	r3, #0
 8009c72:	e082      	b.n	8009d7a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d106      	bne.n	8009c88 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c7a:	f107 030c 	add.w	r3, r7, #12
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f001 f826 	bl	800acd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c84:	2301      	movs	r3, #1
 8009c86:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c88:	f002 f946 	bl	800bf18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c8c:	f000 fd4c 	bl	800a728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c90:	f002 f90c 	bl	800beac <vPortEnterCritical>
 8009c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c9a:	b25b      	sxtb	r3, r3
 8009c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca0:	d103      	bne.n	8009caa <xQueueSemaphoreTake+0x152>
 8009ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cb0:	b25b      	sxtb	r3, r3
 8009cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb6:	d103      	bne.n	8009cc0 <xQueueSemaphoreTake+0x168>
 8009cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cc0:	f002 f92a 	bl	800bf18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cc4:	463a      	mov	r2, r7
 8009cc6:	f107 030c 	add.w	r3, r7, #12
 8009cca:	4611      	mov	r1, r2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f001 f815 	bl	800acfc <xTaskCheckForTimeOut>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d132      	bne.n	8009d3e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009cda:	f000 f9fd 	bl	800a0d8 <prvIsQueueEmpty>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d026      	beq.n	8009d32 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d109      	bne.n	8009d00 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8009cec:	f002 f8de 	bl	800beac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f001 f981 	bl	800affc <xTaskPriorityInherit>
 8009cfa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009cfc:	f002 f90c 	bl	800bf18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d02:	3324      	adds	r3, #36	@ 0x24
 8009d04:	683a      	ldr	r2, [r7, #0]
 8009d06:	4611      	mov	r1, r2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 ff25 	bl	800ab58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d10:	f000 f990 	bl	800a034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d14:	f000 fd16 	bl	800a744 <xTaskResumeAll>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f47f af65 	bne.w	8009bea <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8009d20:	4b18      	ldr	r3, [pc, #96]	@ (8009d84 <xQueueSemaphoreTake+0x22c>)
 8009d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	e75b      	b.n	8009bea <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d34:	f000 f97e 	bl	800a034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d38:	f000 fd04 	bl	800a744 <xTaskResumeAll>
 8009d3c:	e755      	b.n	8009bea <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009d3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d40:	f000 f978 	bl	800a034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d44:	f000 fcfe 	bl	800a744 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d4a:	f000 f9c5 	bl	800a0d8 <prvIsQueueEmpty>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f43f af4a 	beq.w	8009bea <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00d      	beq.n	8009d78 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8009d5c:	f002 f8a6 	bl	800beac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d62:	f000 f8bf 	bl	8009ee4 <prvGetDisinheritPriorityAfterTimeout>
 8009d66:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f001 fa20 	bl	800b1b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009d74:	f002 f8d0 	bl	800bf18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3738      	adds	r7, #56	@ 0x38
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	e000ed04 	.word	0xe000ed04

08009d88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08e      	sub	sp, #56	@ 0x38
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10d      	bne.n	8009dba <xQueueReceiveFromISR+0x32>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da2:	b672      	cpsid	i
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	b662      	cpsie	i
 8009db2:	623b      	str	r3, [r7, #32]
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop
 8009db8:	e7fd      	b.n	8009db6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d103      	bne.n	8009dc8 <xQueueReceiveFromISR+0x40>
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <xQueueReceiveFromISR+0x44>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e000      	b.n	8009dce <xQueueReceiveFromISR+0x46>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10d      	bne.n	8009dee <xQueueReceiveFromISR+0x66>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd6:	b672      	cpsid	i
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	b662      	cpsie	i
 8009de6:	61fb      	str	r3, [r7, #28]
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	e7fd      	b.n	8009dea <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dee:	f002 f945 	bl	800c07c <vPortValidateInterruptPriority>
	__asm volatile
 8009df2:	f3ef 8211 	mrs	r2, BASEPRI
 8009df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfa:	b672      	cpsid	i
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	b662      	cpsie	i
 8009e0a:	61ba      	str	r2, [r7, #24]
 8009e0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009e0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d02f      	beq.n	8009e7e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e28:	68b9      	ldr	r1, [r7, #8]
 8009e2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e2c:	f000 f8dc 	bl	8009fe8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e32:	1e5a      	subs	r2, r3, #1
 8009e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e36:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e40:	d112      	bne.n	8009e68 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d016      	beq.n	8009e78 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4c:	3310      	adds	r3, #16
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 fed8 	bl	800ac04 <xTaskRemoveFromEventList>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00e      	beq.n	8009e78 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	e007      	b.n	8009e78 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	b25a      	sxtb	r2, r3
 8009e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e7c:	e001      	b.n	8009e82 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f383 8811 	msr	BASEPRI, r3
}
 8009e8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3738      	adds	r7, #56	@ 0x38
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10d      	bne.n	8009ec6 <vQueueDelete+0x2e>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eae:	b672      	cpsid	i
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	b662      	cpsie	i
 8009ebe:	60bb      	str	r3, [r7, #8]
}
 8009ec0:	bf00      	nop
 8009ec2:	bf00      	nop
 8009ec4:	e7fd      	b.n	8009ec2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 f95e 	bl	800a188 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d102      	bne.n	8009edc <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f002 f9e4 	bl	800c2a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009edc:	bf00      	nop
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d006      	beq.n	8009f02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e001      	b.n	8009f06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009f06:	68fb      	ldr	r3, [r7, #12]
	}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f20:	2300      	movs	r3, #0
 8009f22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10d      	bne.n	8009f4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d14d      	bne.n	8009fd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 f8c4 	bl	800b0cc <xTaskPriorityDisinherit>
 8009f44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	609a      	str	r2, [r3, #8]
 8009f4c:	e043      	b.n	8009fd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d119      	bne.n	8009f88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6858      	ldr	r0, [r3, #4]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	68b9      	ldr	r1, [r7, #8]
 8009f60:	f00d f9c7 	bl	80172f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f6c:	441a      	add	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d32b      	bcc.n	8009fd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	605a      	str	r2, [r3, #4]
 8009f86:	e026      	b.n	8009fd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	68d8      	ldr	r0, [r3, #12]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f90:	461a      	mov	r2, r3
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	f00d f9ad 	bl	80172f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	68da      	ldr	r2, [r3, #12]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa0:	425b      	negs	r3, r3
 8009fa2:	441a      	add	r2, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	68da      	ldr	r2, [r3, #12]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d207      	bcs.n	8009fc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	689a      	ldr	r2, [r3, #8]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fbc:	425b      	negs	r3, r3
 8009fbe:	441a      	add	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d105      	bne.n	8009fd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	1c5a      	adds	r2, r3, #1
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009fde:	697b      	ldr	r3, [r7, #20]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3718      	adds	r7, #24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d018      	beq.n	800a02c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a002:	441a      	add	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68da      	ldr	r2, [r3, #12]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	429a      	cmp	r2, r3
 800a012:	d303      	bcc.n	800a01c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68d9      	ldr	r1, [r3, #12]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a024:	461a      	mov	r2, r3
 800a026:	6838      	ldr	r0, [r7, #0]
 800a028:	f00d f963 	bl	80172f2 <memcpy>
	}
}
 800a02c:	bf00      	nop
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a03c:	f001 ff36 	bl	800beac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a046:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a048:	e011      	b.n	800a06e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d012      	beq.n	800a078 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	3324      	adds	r3, #36	@ 0x24
 800a056:	4618      	mov	r0, r3
 800a058:	f000 fdd4 	bl	800ac04 <xTaskRemoveFromEventList>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a062:	f000 feb3 	bl	800adcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	3b01      	subs	r3, #1
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a06e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a072:	2b00      	cmp	r3, #0
 800a074:	dce9      	bgt.n	800a04a <prvUnlockQueue+0x16>
 800a076:	e000      	b.n	800a07a <prvUnlockQueue+0x46>
					break;
 800a078:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	22ff      	movs	r2, #255	@ 0xff
 800a07e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a082:	f001 ff49 	bl	800bf18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a086:	f001 ff11 	bl	800beac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a090:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a092:	e011      	b.n	800a0b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d012      	beq.n	800a0c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3310      	adds	r3, #16
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 fdaf 	bl	800ac04 <xTaskRemoveFromEventList>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0ac:	f000 fe8e 	bl	800adcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0b0:	7bbb      	ldrb	r3, [r7, #14]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	dce9      	bgt.n	800a094 <prvUnlockQueue+0x60>
 800a0c0:	e000      	b.n	800a0c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a0c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	22ff      	movs	r2, #255	@ 0xff
 800a0c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a0cc:	f001 ff24 	bl	800bf18 <vPortExitCritical>
}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0e0:	f001 fee4 	bl	800beac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d102      	bne.n	800a0f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	e001      	b.n	800a0f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0f6:	f001 ff0f 	bl	800bf18 <vPortExitCritical>

	return xReturn;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a10c:	f001 fece 	bl	800beac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a118:	429a      	cmp	r2, r3
 800a11a:	d102      	bne.n	800a122 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	e001      	b.n	800a126 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a126:	f001 fef7 	bl	800bf18 <vPortExitCritical>

	return xReturn;
 800a12a:	68fb      	ldr	r3, [r7, #12]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a13e:	2300      	movs	r3, #0
 800a140:	60fb      	str	r3, [r7, #12]
 800a142:	e014      	b.n	800a16e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a144:	4a0f      	ldr	r2, [pc, #60]	@ (800a184 <vQueueAddToRegistry+0x50>)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10b      	bne.n	800a168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a150:	490c      	ldr	r1, [pc, #48]	@ (800a184 <vQueueAddToRegistry+0x50>)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a15a:	4a0a      	ldr	r2, [pc, #40]	@ (800a184 <vQueueAddToRegistry+0x50>)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	4413      	add	r3, r2
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a166:	e006      	b.n	800a176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	3301      	adds	r3, #1
 800a16c:	60fb      	str	r3, [r7, #12]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b07      	cmp	r3, #7
 800a172:	d9e7      	bls.n	800a144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a174:	bf00      	nop
 800a176:	bf00      	nop
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	2000abc8 	.word	0x2000abc8

0800a188 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a190:	2300      	movs	r3, #0
 800a192:	60fb      	str	r3, [r7, #12]
 800a194:	e016      	b.n	800a1c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a196:	4a10      	ldr	r2, [pc, #64]	@ (800a1d8 <vQueueUnregisterQueue+0x50>)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	4413      	add	r3, r2
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d10b      	bne.n	800a1be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a1a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a1d8 <vQueueUnregisterQueue+0x50>)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a1b0:	4a09      	ldr	r2, [pc, #36]	@ (800a1d8 <vQueueUnregisterQueue+0x50>)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	00db      	lsls	r3, r3, #3
 800a1b6:	4413      	add	r3, r2
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	605a      	str	r2, [r3, #4]
				break;
 800a1bc:	e006      	b.n	800a1cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2b07      	cmp	r3, #7
 800a1c8:	d9e5      	bls.n	800a196 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a1ca:	bf00      	nop
 800a1cc:	bf00      	nop
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	2000abc8 	.word	0x2000abc8

0800a1dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a1ec:	f001 fe5e 	bl	800beac <vPortEnterCritical>
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1f6:	b25b      	sxtb	r3, r3
 800a1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fc:	d103      	bne.n	800a206 <vQueueWaitForMessageRestricted+0x2a>
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a20c:	b25b      	sxtb	r3, r3
 800a20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a212:	d103      	bne.n	800a21c <vQueueWaitForMessageRestricted+0x40>
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a21c:	f001 fe7c 	bl	800bf18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a224:	2b00      	cmp	r3, #0
 800a226:	d106      	bne.n	800a236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	3324      	adds	r3, #36	@ 0x24
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	68b9      	ldr	r1, [r7, #8]
 800a230:	4618      	mov	r0, r3
 800a232:	f000 fcb9 	bl	800aba8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a236:	6978      	ldr	r0, [r7, #20]
 800a238:	f7ff fefc 	bl	800a034 <prvUnlockQueue>
	}
 800a23c:	bf00      	nop
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08e      	sub	sp, #56	@ 0x38
 800a248:	af04      	add	r7, sp, #16
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10d      	bne.n	800a274 <xTaskCreateStatic+0x30>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25c:	b672      	cpsid	i
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	b662      	cpsie	i
 800a26c:	623b      	str	r3, [r7, #32]
}
 800a26e:	bf00      	nop
 800a270:	bf00      	nop
 800a272:	e7fd      	b.n	800a270 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10d      	bne.n	800a296 <xTaskCreateStatic+0x52>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27e:	b672      	cpsid	i
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	b662      	cpsie	i
 800a28e:	61fb      	str	r3, [r7, #28]
}
 800a290:	bf00      	nop
 800a292:	bf00      	nop
 800a294:	e7fd      	b.n	800a292 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a296:	23a8      	movs	r3, #168	@ 0xa8
 800a298:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2ba8      	cmp	r3, #168	@ 0xa8
 800a29e:	d00d      	beq.n	800a2bc <xTaskCreateStatic+0x78>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a4:	b672      	cpsid	i
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	b662      	cpsie	i
 800a2b4:	61bb      	str	r3, [r7, #24]
}
 800a2b6:	bf00      	nop
 800a2b8:	bf00      	nop
 800a2ba:	e7fd      	b.n	800a2b8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d01e      	beq.n	800a302 <xTaskCreateStatic+0xbe>
 800a2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d01b      	beq.n	800a302 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9303      	str	r3, [sp, #12]
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e2:	9302      	str	r3, [sp, #8]
 800a2e4:	f107 0314 	add.w	r3, r7, #20
 800a2e8:	9301      	str	r3, [sp, #4]
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	68b9      	ldr	r1, [r7, #8]
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f851 	bl	800a39c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a2fc:	f000 f8f8 	bl	800a4f0 <prvAddNewTaskToReadyList>
 800a300:	e001      	b.n	800a306 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800a302:	2300      	movs	r3, #0
 800a304:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a306:	697b      	ldr	r3, [r7, #20]
	}
 800a308:	4618      	mov	r0, r3
 800a30a:	3728      	adds	r7, #40	@ 0x28
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08c      	sub	sp, #48	@ 0x30
 800a314:	af04      	add	r7, sp, #16
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	603b      	str	r3, [r7, #0]
 800a31c:	4613      	mov	r3, r2
 800a31e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a320:	88fb      	ldrh	r3, [r7, #6]
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4618      	mov	r0, r3
 800a326:	f001 feef 	bl	800c108 <pvPortMalloc>
 800a32a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00e      	beq.n	800a350 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a332:	20a8      	movs	r0, #168	@ 0xa8
 800a334:	f001 fee8 	bl	800c108 <pvPortMalloc>
 800a338:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d003      	beq.n	800a348 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	631a      	str	r2, [r3, #48]	@ 0x30
 800a346:	e005      	b.n	800a354 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a348:	6978      	ldr	r0, [r7, #20]
 800a34a:	f001 ffab 	bl	800c2a4 <vPortFree>
 800a34e:	e001      	b.n	800a354 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a350:	2300      	movs	r3, #0
 800a352:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d017      	beq.n	800a38a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a362:	88fa      	ldrh	r2, [r7, #6]
 800a364:	2300      	movs	r3, #0
 800a366:	9303      	str	r3, [sp, #12]
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	9302      	str	r3, [sp, #8]
 800a36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a36e:	9301      	str	r3, [sp, #4]
 800a370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	68b9      	ldr	r1, [r7, #8]
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 f80f 	bl	800a39c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a37e:	69f8      	ldr	r0, [r7, #28]
 800a380:	f000 f8b6 	bl	800a4f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a384:	2301      	movs	r3, #1
 800a386:	61bb      	str	r3, [r7, #24]
 800a388:	e002      	b.n	800a390 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a38a:	f04f 33ff 	mov.w	r3, #4294967295
 800a38e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a390:	69bb      	ldr	r3, [r7, #24]
	}
 800a392:	4618      	mov	r0, r3
 800a394:	3720      	adds	r7, #32
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
	...

0800a39c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	21a5      	movs	r1, #165	@ 0xa5
 800a3b6:	f00c fec9 	bl	801714c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3be:	6879      	ldr	r1, [r7, #4]
 800a3c0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a3c4:	440b      	add	r3, r1
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	f023 0307 	bic.w	r3, r3, #7
 800a3d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00d      	beq.n	800a3fa <prvInitialiseNewTask+0x5e>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e2:	b672      	cpsid	i
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	b662      	cpsie	i
 800a3f2:	617b      	str	r3, [r7, #20]
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop
 800a3f8:	e7fd      	b.n	800a3f6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d01f      	beq.n	800a440 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a400:	2300      	movs	r3, #0
 800a402:	61fb      	str	r3, [r7, #28]
 800a404:	e012      	b.n	800a42c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	4413      	add	r3, r2
 800a40c:	7819      	ldrb	r1, [r3, #0]
 800a40e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	4413      	add	r3, r2
 800a414:	3334      	adds	r3, #52	@ 0x34
 800a416:	460a      	mov	r2, r1
 800a418:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	4413      	add	r3, r2
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d006      	beq.n	800a434 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	3301      	adds	r3, #1
 800a42a:	61fb      	str	r3, [r7, #28]
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	2b0f      	cmp	r3, #15
 800a430:	d9e9      	bls.n	800a406 <prvInitialiseNewTask+0x6a>
 800a432:	e000      	b.n	800a436 <prvInitialiseNewTask+0x9a>
			{
				break;
 800a434:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a43e:	e003      	b.n	800a448 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44a:	2b37      	cmp	r3, #55	@ 0x37
 800a44c:	d901      	bls.n	800a452 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a44e:	2337      	movs	r3, #55	@ 0x37
 800a450:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a456:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a45c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a460:	2200      	movs	r2, #0
 800a462:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a466:	3304      	adds	r3, #4
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fe fd27 	bl	8008ebc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a470:	3318      	adds	r3, #24
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fd22 	bl	8008ebc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a47c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a480:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a486:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a48c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a490:	2200      	movs	r2, #0
 800a492:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a0:	3354      	adds	r3, #84	@ 0x54
 800a4a2:	224c      	movs	r2, #76	@ 0x4c
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f00c fe50 	bl	801714c <memset>
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ae:	4a0d      	ldr	r2, [pc, #52]	@ (800a4e4 <prvInitialiseNewTask+0x148>)
 800a4b0:	659a      	str	r2, [r3, #88]	@ 0x58
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b4:	4a0c      	ldr	r2, [pc, #48]	@ (800a4e8 <prvInitialiseNewTask+0x14c>)
 800a4b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a4ec <prvInitialiseNewTask+0x150>)
 800a4bc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	68f9      	ldr	r1, [r7, #12]
 800a4c2:	69b8      	ldr	r0, [r7, #24]
 800a4c4:	f001 fbe2 	bl	800bc8c <pxPortInitialiseStack>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4da:	bf00      	nop
 800a4dc:	3720      	adds	r7, #32
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	200274d4 	.word	0x200274d4
 800a4e8:	2002753c 	.word	0x2002753c
 800a4ec:	200275a4 	.word	0x200275a4

0800a4f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4f8:	f001 fcd8 	bl	800beac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4fc:	4b2d      	ldr	r3, [pc, #180]	@ (800a5b4 <prvAddNewTaskToReadyList+0xc4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3301      	adds	r3, #1
 800a502:	4a2c      	ldr	r2, [pc, #176]	@ (800a5b4 <prvAddNewTaskToReadyList+0xc4>)
 800a504:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a506:	4b2c      	ldr	r3, [pc, #176]	@ (800a5b8 <prvAddNewTaskToReadyList+0xc8>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d109      	bne.n	800a522 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a50e:	4a2a      	ldr	r2, [pc, #168]	@ (800a5b8 <prvAddNewTaskToReadyList+0xc8>)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a514:	4b27      	ldr	r3, [pc, #156]	@ (800a5b4 <prvAddNewTaskToReadyList+0xc4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d110      	bne.n	800a53e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a51c:	f000 fc7a 	bl	800ae14 <prvInitialiseTaskLists>
 800a520:	e00d      	b.n	800a53e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a522:	4b26      	ldr	r3, [pc, #152]	@ (800a5bc <prvAddNewTaskToReadyList+0xcc>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d109      	bne.n	800a53e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a52a:	4b23      	ldr	r3, [pc, #140]	@ (800a5b8 <prvAddNewTaskToReadyList+0xc8>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a534:	429a      	cmp	r2, r3
 800a536:	d802      	bhi.n	800a53e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a538:	4a1f      	ldr	r2, [pc, #124]	@ (800a5b8 <prvAddNewTaskToReadyList+0xc8>)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a53e:	4b20      	ldr	r3, [pc, #128]	@ (800a5c0 <prvAddNewTaskToReadyList+0xd0>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3301      	adds	r3, #1
 800a544:	4a1e      	ldr	r2, [pc, #120]	@ (800a5c0 <prvAddNewTaskToReadyList+0xd0>)
 800a546:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a548:	4b1d      	ldr	r3, [pc, #116]	@ (800a5c0 <prvAddNewTaskToReadyList+0xd0>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a554:	4b1b      	ldr	r3, [pc, #108]	@ (800a5c4 <prvAddNewTaskToReadyList+0xd4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d903      	bls.n	800a564 <prvAddNewTaskToReadyList+0x74>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a560:	4a18      	ldr	r2, [pc, #96]	@ (800a5c4 <prvAddNewTaskToReadyList+0xd4>)
 800a562:	6013      	str	r3, [r2, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a568:	4613      	mov	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4a15      	ldr	r2, [pc, #84]	@ (800a5c8 <prvAddNewTaskToReadyList+0xd8>)
 800a572:	441a      	add	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	3304      	adds	r3, #4
 800a578:	4619      	mov	r1, r3
 800a57a:	4610      	mov	r0, r2
 800a57c:	f7fe fcab 	bl	8008ed6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a580:	f001 fcca 	bl	800bf18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a584:	4b0d      	ldr	r3, [pc, #52]	@ (800a5bc <prvAddNewTaskToReadyList+0xcc>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00e      	beq.n	800a5aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a58c:	4b0a      	ldr	r3, [pc, #40]	@ (800a5b8 <prvAddNewTaskToReadyList+0xc8>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a596:	429a      	cmp	r2, r3
 800a598:	d207      	bcs.n	800a5aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a59a:	4b0c      	ldr	r3, [pc, #48]	@ (800a5cc <prvAddNewTaskToReadyList+0xdc>)
 800a59c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5a0:	601a      	str	r2, [r3, #0]
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5aa:	bf00      	nop
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	2000b0dc 	.word	0x2000b0dc
 800a5b8:	2000ac08 	.word	0x2000ac08
 800a5bc:	2000b0e8 	.word	0x2000b0e8
 800a5c0:	2000b0f8 	.word	0x2000b0f8
 800a5c4:	2000b0e4 	.word	0x2000b0e4
 800a5c8:	2000ac0c 	.word	0x2000ac0c
 800a5cc:	e000ed04 	.word	0xe000ed04

0800a5d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d01a      	beq.n	800a618 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a5e2:	4b15      	ldr	r3, [pc, #84]	@ (800a638 <vTaskDelay+0x68>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00d      	beq.n	800a606 <vTaskDelay+0x36>
	__asm volatile
 800a5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ee:	b672      	cpsid	i
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	b662      	cpsie	i
 800a5fe:	60bb      	str	r3, [r7, #8]
}
 800a600:	bf00      	nop
 800a602:	bf00      	nop
 800a604:	e7fd      	b.n	800a602 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a606:	f000 f88f 	bl	800a728 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a60a:	2100      	movs	r1, #0
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 ff81 	bl	800b514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a612:	f000 f897 	bl	800a744 <xTaskResumeAll>
 800a616:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d107      	bne.n	800a62e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800a61e:	4b07      	ldr	r3, [pc, #28]	@ (800a63c <vTaskDelay+0x6c>)
 800a620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a62e:	bf00      	nop
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	2000b104 	.word	0x2000b104
 800a63c:	e000ed04 	.word	0xe000ed04

0800a640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b08a      	sub	sp, #40	@ 0x28
 800a644:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a64e:	463a      	mov	r2, r7
 800a650:	1d39      	adds	r1, r7, #4
 800a652:	f107 0308 	add.w	r3, r7, #8
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe fbdc 	bl	8008e14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	9202      	str	r2, [sp, #8]
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	2300      	movs	r3, #0
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	2300      	movs	r3, #0
 800a66c:	460a      	mov	r2, r1
 800a66e:	4926      	ldr	r1, [pc, #152]	@ (800a708 <vTaskStartScheduler+0xc8>)
 800a670:	4826      	ldr	r0, [pc, #152]	@ (800a70c <vTaskStartScheduler+0xcc>)
 800a672:	f7ff fde7 	bl	800a244 <xTaskCreateStatic>
 800a676:	4603      	mov	r3, r0
 800a678:	4a25      	ldr	r2, [pc, #148]	@ (800a710 <vTaskStartScheduler+0xd0>)
 800a67a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a67c:	4b24      	ldr	r3, [pc, #144]	@ (800a710 <vTaskStartScheduler+0xd0>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a684:	2301      	movs	r3, #1
 800a686:	617b      	str	r3, [r7, #20]
 800a688:	e001      	b.n	800a68e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d102      	bne.n	800a69a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a694:	f000 ff92 	bl	800b5bc <xTimerCreateTimerTask>
 800a698:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d11d      	bne.n	800a6dc <vTaskStartScheduler+0x9c>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a4:	b672      	cpsid	i
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	b662      	cpsie	i
 800a6b4:	613b      	str	r3, [r7, #16]
}
 800a6b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6b8:	4b16      	ldr	r3, [pc, #88]	@ (800a714 <vTaskStartScheduler+0xd4>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3354      	adds	r3, #84	@ 0x54
 800a6be:	4a16      	ldr	r2, [pc, #88]	@ (800a718 <vTaskStartScheduler+0xd8>)
 800a6c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6c2:	4b16      	ldr	r3, [pc, #88]	@ (800a71c <vTaskStartScheduler+0xdc>)
 800a6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6ca:	4b15      	ldr	r3, [pc, #84]	@ (800a720 <vTaskStartScheduler+0xe0>)
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6d0:	4b14      	ldr	r3, [pc, #80]	@ (800a724 <vTaskStartScheduler+0xe4>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a6d6:	f001 fb6b 	bl	800bdb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a6da:	e011      	b.n	800a700 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e2:	d10d      	bne.n	800a700 <vTaskStartScheduler+0xc0>
	__asm volatile
 800a6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e8:	b672      	cpsid	i
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	b662      	cpsie	i
 800a6f8:	60fb      	str	r3, [r7, #12]
}
 800a6fa:	bf00      	nop
 800a6fc:	bf00      	nop
 800a6fe:	e7fd      	b.n	800a6fc <vTaskStartScheduler+0xbc>
}
 800a700:	bf00      	nop
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	0801812c 	.word	0x0801812c
 800a70c:	0800ade5 	.word	0x0800ade5
 800a710:	2000b100 	.word	0x2000b100
 800a714:	2000ac08 	.word	0x2000ac08
 800a718:	2000003c 	.word	0x2000003c
 800a71c:	2000b0fc 	.word	0x2000b0fc
 800a720:	2000b0e8 	.word	0x2000b0e8
 800a724:	2000b0e0 	.word	0x2000b0e0

0800a728 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a728:	b480      	push	{r7}
 800a72a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a72c:	4b04      	ldr	r3, [pc, #16]	@ (800a740 <vTaskSuspendAll+0x18>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3301      	adds	r3, #1
 800a732:	4a03      	ldr	r2, [pc, #12]	@ (800a740 <vTaskSuspendAll+0x18>)
 800a734:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a736:	bf00      	nop
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	2000b104 	.word	0x2000b104

0800a744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a74a:	2300      	movs	r3, #0
 800a74c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a74e:	2300      	movs	r3, #0
 800a750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a752:	4b43      	ldr	r3, [pc, #268]	@ (800a860 <xTaskResumeAll+0x11c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10d      	bne.n	800a776 <xTaskResumeAll+0x32>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75e:	b672      	cpsid	i
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	b662      	cpsie	i
 800a76e:	603b      	str	r3, [r7, #0]
}
 800a770:	bf00      	nop
 800a772:	bf00      	nop
 800a774:	e7fd      	b.n	800a772 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a776:	f001 fb99 	bl	800beac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a77a:	4b39      	ldr	r3, [pc, #228]	@ (800a860 <xTaskResumeAll+0x11c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3b01      	subs	r3, #1
 800a780:	4a37      	ldr	r2, [pc, #220]	@ (800a860 <xTaskResumeAll+0x11c>)
 800a782:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a784:	4b36      	ldr	r3, [pc, #216]	@ (800a860 <xTaskResumeAll+0x11c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d162      	bne.n	800a852 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a78c:	4b35      	ldr	r3, [pc, #212]	@ (800a864 <xTaskResumeAll+0x120>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d05e      	beq.n	800a852 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a794:	e02f      	b.n	800a7f6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a796:	4b34      	ldr	r3, [pc, #208]	@ (800a868 <xTaskResumeAll+0x124>)
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3318      	adds	r3, #24
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe fbf4 	bl	8008f90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fe fbef 	bl	8008f90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7b6:	4b2d      	ldr	r3, [pc, #180]	@ (800a86c <xTaskResumeAll+0x128>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d903      	bls.n	800a7c6 <xTaskResumeAll+0x82>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c2:	4a2a      	ldr	r2, [pc, #168]	@ (800a86c <xTaskResumeAll+0x128>)
 800a7c4:	6013      	str	r3, [r2, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4a27      	ldr	r2, [pc, #156]	@ (800a870 <xTaskResumeAll+0x12c>)
 800a7d4:	441a      	add	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4610      	mov	r0, r2
 800a7de:	f7fe fb7a 	bl	8008ed6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e6:	4b23      	ldr	r3, [pc, #140]	@ (800a874 <xTaskResumeAll+0x130>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d302      	bcc.n	800a7f6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800a7f0:	4b21      	ldr	r3, [pc, #132]	@ (800a878 <xTaskResumeAll+0x134>)
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7f6:	4b1c      	ldr	r3, [pc, #112]	@ (800a868 <xTaskResumeAll+0x124>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1cb      	bne.n	800a796 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a804:	f000 fbac 	bl	800af60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a808:	4b1c      	ldr	r3, [pc, #112]	@ (800a87c <xTaskResumeAll+0x138>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d010      	beq.n	800a836 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a814:	f000 f858 	bl	800a8c8 <xTaskIncrementTick>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d002      	beq.n	800a824 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800a81e:	4b16      	ldr	r3, [pc, #88]	@ (800a878 <xTaskResumeAll+0x134>)
 800a820:	2201      	movs	r2, #1
 800a822:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3b01      	subs	r3, #1
 800a828:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1f1      	bne.n	800a814 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800a830:	4b12      	ldr	r3, [pc, #72]	@ (800a87c <xTaskResumeAll+0x138>)
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a836:	4b10      	ldr	r3, [pc, #64]	@ (800a878 <xTaskResumeAll+0x134>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d009      	beq.n	800a852 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a83e:	2301      	movs	r3, #1
 800a840:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a842:	4b0f      	ldr	r3, [pc, #60]	@ (800a880 <xTaskResumeAll+0x13c>)
 800a844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a848:	601a      	str	r2, [r3, #0]
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a852:	f001 fb61 	bl	800bf18 <vPortExitCritical>

	return xAlreadyYielded;
 800a856:	68bb      	ldr	r3, [r7, #8]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	2000b104 	.word	0x2000b104
 800a864:	2000b0dc 	.word	0x2000b0dc
 800a868:	2000b09c 	.word	0x2000b09c
 800a86c:	2000b0e4 	.word	0x2000b0e4
 800a870:	2000ac0c 	.word	0x2000ac0c
 800a874:	2000ac08 	.word	0x2000ac08
 800a878:	2000b0f0 	.word	0x2000b0f0
 800a87c:	2000b0ec 	.word	0x2000b0ec
 800a880:	e000ed04 	.word	0xe000ed04

0800a884 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a88a:	4b05      	ldr	r3, [pc, #20]	@ (800a8a0 <xTaskGetTickCount+0x1c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a890:	687b      	ldr	r3, [r7, #4]
}
 800a892:	4618      	mov	r0, r3
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	2000b0e0 	.word	0x2000b0e0

0800a8a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8aa:	f001 fbe7 	bl	800c07c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a8b2:	4b04      	ldr	r3, [pc, #16]	@ (800a8c4 <xTaskGetTickCountFromISR+0x20>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8b8:	683b      	ldr	r3, [r7, #0]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	2000b0e0 	.word	0x2000b0e0

0800a8c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8d2:	4b50      	ldr	r3, [pc, #320]	@ (800aa14 <xTaskIncrementTick+0x14c>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f040 808c 	bne.w	800a9f4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8dc:	4b4e      	ldr	r3, [pc, #312]	@ (800aa18 <xTaskIncrementTick+0x150>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a8e4:	4a4c      	ldr	r2, [pc, #304]	@ (800aa18 <xTaskIncrementTick+0x150>)
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d123      	bne.n	800a938 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8f0:	4b4a      	ldr	r3, [pc, #296]	@ (800aa1c <xTaskIncrementTick+0x154>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00d      	beq.n	800a916 <xTaskIncrementTick+0x4e>
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fe:	b672      	cpsid	i
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	b662      	cpsie	i
 800a90e:	603b      	str	r3, [r7, #0]
}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	e7fd      	b.n	800a912 <xTaskIncrementTick+0x4a>
 800a916:	4b41      	ldr	r3, [pc, #260]	@ (800aa1c <xTaskIncrementTick+0x154>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	4b40      	ldr	r3, [pc, #256]	@ (800aa20 <xTaskIncrementTick+0x158>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a3e      	ldr	r2, [pc, #248]	@ (800aa1c <xTaskIncrementTick+0x154>)
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	4a3e      	ldr	r2, [pc, #248]	@ (800aa20 <xTaskIncrementTick+0x158>)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	4b3e      	ldr	r3, [pc, #248]	@ (800aa24 <xTaskIncrementTick+0x15c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3301      	adds	r3, #1
 800a930:	4a3c      	ldr	r2, [pc, #240]	@ (800aa24 <xTaskIncrementTick+0x15c>)
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	f000 fb14 	bl	800af60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a938:	4b3b      	ldr	r3, [pc, #236]	@ (800aa28 <xTaskIncrementTick+0x160>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d349      	bcc.n	800a9d6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a942:	4b36      	ldr	r3, [pc, #216]	@ (800aa1c <xTaskIncrementTick+0x154>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d104      	bne.n	800a956 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a94c:	4b36      	ldr	r3, [pc, #216]	@ (800aa28 <xTaskIncrementTick+0x160>)
 800a94e:	f04f 32ff 	mov.w	r2, #4294967295
 800a952:	601a      	str	r2, [r3, #0]
					break;
 800a954:	e03f      	b.n	800a9d6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a956:	4b31      	ldr	r3, [pc, #196]	@ (800aa1c <xTaskIncrementTick+0x154>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d203      	bcs.n	800a976 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a96e:	4a2e      	ldr	r2, [pc, #184]	@ (800aa28 <xTaskIncrementTick+0x160>)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a974:	e02f      	b.n	800a9d6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	3304      	adds	r3, #4
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fe fb08 	bl	8008f90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a984:	2b00      	cmp	r3, #0
 800a986:	d004      	beq.n	800a992 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	3318      	adds	r3, #24
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fe faff 	bl	8008f90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a996:	4b25      	ldr	r3, [pc, #148]	@ (800aa2c <xTaskIncrementTick+0x164>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d903      	bls.n	800a9a6 <xTaskIncrementTick+0xde>
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a2:	4a22      	ldr	r2, [pc, #136]	@ (800aa2c <xTaskIncrementTick+0x164>)
 800a9a4:	6013      	str	r3, [r2, #0]
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4a1f      	ldr	r2, [pc, #124]	@ (800aa30 <xTaskIncrementTick+0x168>)
 800a9b4:	441a      	add	r2, r3
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4610      	mov	r0, r2
 800a9be:	f7fe fa8a 	bl	8008ed6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9c6:	4b1b      	ldr	r3, [pc, #108]	@ (800aa34 <xTaskIncrementTick+0x16c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d3b8      	bcc.n	800a942 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9d4:	e7b5      	b.n	800a942 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9d6:	4b17      	ldr	r3, [pc, #92]	@ (800aa34 <xTaskIncrementTick+0x16c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9dc:	4914      	ldr	r1, [pc, #80]	@ (800aa30 <xTaskIncrementTick+0x168>)
 800a9de:	4613      	mov	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	440b      	add	r3, r1
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d907      	bls.n	800a9fe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	617b      	str	r3, [r7, #20]
 800a9f2:	e004      	b.n	800a9fe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a9f4:	4b10      	ldr	r3, [pc, #64]	@ (800aa38 <xTaskIncrementTick+0x170>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	4a0f      	ldr	r2, [pc, #60]	@ (800aa38 <xTaskIncrementTick+0x170>)
 800a9fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a9fe:	4b0f      	ldr	r3, [pc, #60]	@ (800aa3c <xTaskIncrementTick+0x174>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800aa06:	2301      	movs	r3, #1
 800aa08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aa0a:	697b      	ldr	r3, [r7, #20]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	2000b104 	.word	0x2000b104
 800aa18:	2000b0e0 	.word	0x2000b0e0
 800aa1c:	2000b094 	.word	0x2000b094
 800aa20:	2000b098 	.word	0x2000b098
 800aa24:	2000b0f4 	.word	0x2000b0f4
 800aa28:	2000b0fc 	.word	0x2000b0fc
 800aa2c:	2000b0e4 	.word	0x2000b0e4
 800aa30:	2000ac0c 	.word	0x2000ac0c
 800aa34:	2000ac08 	.word	0x2000ac08
 800aa38:	2000b0ec 	.word	0x2000b0ec
 800aa3c:	2000b0f0 	.word	0x2000b0f0

0800aa40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa46:	4b3e      	ldr	r3, [pc, #248]	@ (800ab40 <vTaskSwitchContext+0x100>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa4e:	4b3d      	ldr	r3, [pc, #244]	@ (800ab44 <vTaskSwitchContext+0x104>)
 800aa50:	2201      	movs	r2, #1
 800aa52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa54:	e070      	b.n	800ab38 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800aa56:	4b3b      	ldr	r3, [pc, #236]	@ (800ab44 <vTaskSwitchContext+0x104>)
 800aa58:	2200      	movs	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800aa5c:	4b3a      	ldr	r3, [pc, #232]	@ (800ab48 <vTaskSwitchContext+0x108>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa62:	613b      	str	r3, [r7, #16]
 800aa64:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800aa68:	60fb      	str	r3, [r7, #12]
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d111      	bne.n	800aa98 <vTaskSwitchContext+0x58>
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	3304      	adds	r3, #4
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d10b      	bne.n	800aa98 <vTaskSwitchContext+0x58>
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	3308      	adds	r3, #8
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d105      	bne.n	800aa98 <vTaskSwitchContext+0x58>
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	330c      	adds	r3, #12
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d008      	beq.n	800aaaa <vTaskSwitchContext+0x6a>
 800aa98:	4b2b      	ldr	r3, [pc, #172]	@ (800ab48 <vTaskSwitchContext+0x108>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	4b2a      	ldr	r3, [pc, #168]	@ (800ab48 <vTaskSwitchContext+0x108>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3334      	adds	r3, #52	@ 0x34
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	f7f6 f857 	bl	8000b58 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaaa:	4b28      	ldr	r3, [pc, #160]	@ (800ab4c <vTaskSwitchContext+0x10c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	617b      	str	r3, [r7, #20]
 800aab0:	e013      	b.n	800aada <vTaskSwitchContext+0x9a>
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10d      	bne.n	800aad4 <vTaskSwitchContext+0x94>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aabc:	b672      	cpsid	i
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	b662      	cpsie	i
 800aacc:	607b      	str	r3, [r7, #4]
}
 800aace:	bf00      	nop
 800aad0:	bf00      	nop
 800aad2:	e7fd      	b.n	800aad0 <vTaskSwitchContext+0x90>
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	3b01      	subs	r3, #1
 800aad8:	617b      	str	r3, [r7, #20]
 800aada:	491d      	ldr	r1, [pc, #116]	@ (800ab50 <vTaskSwitchContext+0x110>)
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	440b      	add	r3, r1
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d0e1      	beq.n	800aab2 <vTaskSwitchContext+0x72>
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4a15      	ldr	r2, [pc, #84]	@ (800ab50 <vTaskSwitchContext+0x110>)
 800aafa:	4413      	add	r3, r2
 800aafc:	60bb      	str	r3, [r7, #8]
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	685a      	ldr	r2, [r3, #4]
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	605a      	str	r2, [r3, #4]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	3308      	adds	r3, #8
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d104      	bne.n	800ab1e <vTaskSwitchContext+0xde>
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	605a      	str	r2, [r3, #4]
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	4a08      	ldr	r2, [pc, #32]	@ (800ab48 <vTaskSwitchContext+0x108>)
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	4a08      	ldr	r2, [pc, #32]	@ (800ab4c <vTaskSwitchContext+0x10c>)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab2e:	4b06      	ldr	r3, [pc, #24]	@ (800ab48 <vTaskSwitchContext+0x108>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3354      	adds	r3, #84	@ 0x54
 800ab34:	4a07      	ldr	r2, [pc, #28]	@ (800ab54 <vTaskSwitchContext+0x114>)
 800ab36:	6013      	str	r3, [r2, #0]
}
 800ab38:	bf00      	nop
 800ab3a:	3718      	adds	r7, #24
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	2000b104 	.word	0x2000b104
 800ab44:	2000b0f0 	.word	0x2000b0f0
 800ab48:	2000ac08 	.word	0x2000ac08
 800ab4c:	2000b0e4 	.word	0x2000b0e4
 800ab50:	2000ac0c 	.word	0x2000ac0c
 800ab54:	2000003c 	.word	0x2000003c

0800ab58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10d      	bne.n	800ab84 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800ab68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6c:	b672      	cpsid	i
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	b662      	cpsie	i
 800ab7c:	60fb      	str	r3, [r7, #12]
}
 800ab7e:	bf00      	nop
 800ab80:	bf00      	nop
 800ab82:	e7fd      	b.n	800ab80 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab84:	4b07      	ldr	r3, [pc, #28]	@ (800aba4 <vTaskPlaceOnEventList+0x4c>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	3318      	adds	r3, #24
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7fe f9c6 	bl	8008f1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab92:	2101      	movs	r1, #1
 800ab94:	6838      	ldr	r0, [r7, #0]
 800ab96:	f000 fcbd 	bl	800b514 <prvAddCurrentTaskToDelayedList>
}
 800ab9a:	bf00      	nop
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	2000ac08 	.word	0x2000ac08

0800aba8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10d      	bne.n	800abd6 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800abba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abbe:	b672      	cpsid	i
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	b662      	cpsie	i
 800abce:	617b      	str	r3, [r7, #20]
}
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	e7fd      	b.n	800abd2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ac00 <vTaskPlaceOnEventListRestricted+0x58>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3318      	adds	r3, #24
 800abdc:	4619      	mov	r1, r3
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f7fe f979 	bl	8008ed6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800abea:	f04f 33ff 	mov.w	r3, #4294967295
 800abee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800abf0:	6879      	ldr	r1, [r7, #4]
 800abf2:	68b8      	ldr	r0, [r7, #8]
 800abf4:	f000 fc8e 	bl	800b514 <prvAddCurrentTaskToDelayedList>
	}
 800abf8:	bf00      	nop
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	2000ac08 	.word	0x2000ac08

0800ac04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10d      	bne.n	800ac36 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac1e:	b672      	cpsid	i
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	b662      	cpsie	i
 800ac2e:	60fb      	str	r3, [r7, #12]
}
 800ac30:	bf00      	nop
 800ac32:	bf00      	nop
 800ac34:	e7fd      	b.n	800ac32 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	3318      	adds	r3, #24
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe f9a8 	bl	8008f90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac40:	4b1d      	ldr	r3, [pc, #116]	@ (800acb8 <xTaskRemoveFromEventList+0xb4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d11d      	bne.n	800ac84 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fe f99f 	bl	8008f90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac56:	4b19      	ldr	r3, [pc, #100]	@ (800acbc <xTaskRemoveFromEventList+0xb8>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d903      	bls.n	800ac66 <xTaskRemoveFromEventList+0x62>
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac62:	4a16      	ldr	r2, [pc, #88]	@ (800acbc <xTaskRemoveFromEventList+0xb8>)
 800ac64:	6013      	str	r3, [r2, #0]
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4a13      	ldr	r2, [pc, #76]	@ (800acc0 <xTaskRemoveFromEventList+0xbc>)
 800ac74:	441a      	add	r2, r3
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	3304      	adds	r3, #4
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	f7fe f92a 	bl	8008ed6 <vListInsertEnd>
 800ac82:	e005      	b.n	800ac90 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	3318      	adds	r3, #24
 800ac88:	4619      	mov	r1, r3
 800ac8a:	480e      	ldr	r0, [pc, #56]	@ (800acc4 <xTaskRemoveFromEventList+0xc0>)
 800ac8c:	f7fe f923 	bl	8008ed6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac94:	4b0c      	ldr	r3, [pc, #48]	@ (800acc8 <xTaskRemoveFromEventList+0xc4>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d905      	bls.n	800acaa <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aca2:	4b0a      	ldr	r3, [pc, #40]	@ (800accc <xTaskRemoveFromEventList+0xc8>)
 800aca4:	2201      	movs	r2, #1
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	e001      	b.n	800acae <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800acaa:	2300      	movs	r3, #0
 800acac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800acae:	697b      	ldr	r3, [r7, #20]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	2000b104 	.word	0x2000b104
 800acbc:	2000b0e4 	.word	0x2000b0e4
 800acc0:	2000ac0c 	.word	0x2000ac0c
 800acc4:	2000b09c 	.word	0x2000b09c
 800acc8:	2000ac08 	.word	0x2000ac08
 800accc:	2000b0f0 	.word	0x2000b0f0

0800acd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acd8:	4b06      	ldr	r3, [pc, #24]	@ (800acf4 <vTaskInternalSetTimeOutState+0x24>)
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ace0:	4b05      	ldr	r3, [pc, #20]	@ (800acf8 <vTaskInternalSetTimeOutState+0x28>)
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	605a      	str	r2, [r3, #4]
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	2000b0f4 	.word	0x2000b0f4
 800acf8:	2000b0e0 	.word	0x2000b0e0

0800acfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10d      	bne.n	800ad28 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad10:	b672      	cpsid	i
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	b662      	cpsie	i
 800ad20:	613b      	str	r3, [r7, #16]
}
 800ad22:	bf00      	nop
 800ad24:	bf00      	nop
 800ad26:	e7fd      	b.n	800ad24 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10d      	bne.n	800ad4a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad32:	b672      	cpsid	i
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	b662      	cpsie	i
 800ad42:	60fb      	str	r3, [r7, #12]
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	e7fd      	b.n	800ad46 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800ad4a:	f001 f8af 	bl	800beac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad4e:	4b1d      	ldr	r3, [pc, #116]	@ (800adc4 <xTaskCheckForTimeOut+0xc8>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	1ad3      	subs	r3, r2, r3
 800ad5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad66:	d102      	bne.n	800ad6e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	61fb      	str	r3, [r7, #28]
 800ad6c:	e023      	b.n	800adb6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	4b15      	ldr	r3, [pc, #84]	@ (800adc8 <xTaskCheckForTimeOut+0xcc>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d007      	beq.n	800ad8a <xTaskCheckForTimeOut+0x8e>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d302      	bcc.n	800ad8a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad84:	2301      	movs	r3, #1
 800ad86:	61fb      	str	r3, [r7, #28]
 800ad88:	e015      	b.n	800adb6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d20b      	bcs.n	800adac <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	1ad2      	subs	r2, r2, r3
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7ff ff95 	bl	800acd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ada6:	2300      	movs	r3, #0
 800ada8:	61fb      	str	r3, [r7, #28]
 800adaa:	e004      	b.n	800adb6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2200      	movs	r2, #0
 800adb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800adb2:	2301      	movs	r3, #1
 800adb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800adb6:	f001 f8af 	bl	800bf18 <vPortExitCritical>

	return xReturn;
 800adba:	69fb      	ldr	r3, [r7, #28]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3720      	adds	r7, #32
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	2000b0e0 	.word	0x2000b0e0
 800adc8:	2000b0f4 	.word	0x2000b0f4

0800adcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800adcc:	b480      	push	{r7}
 800adce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800add0:	4b03      	ldr	r3, [pc, #12]	@ (800ade0 <vTaskMissedYield+0x14>)
 800add2:	2201      	movs	r2, #1
 800add4:	601a      	str	r2, [r3, #0]
}
 800add6:	bf00      	nop
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	2000b0f0 	.word	0x2000b0f0

0800ade4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800adec:	f000 f852 	bl	800ae94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800adf0:	4b06      	ldr	r3, [pc, #24]	@ (800ae0c <prvIdleTask+0x28>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d9f9      	bls.n	800adec <prvIdleTask+0x8>
			{
				taskYIELD();
 800adf8:	4b05      	ldr	r3, [pc, #20]	@ (800ae10 <prvIdleTask+0x2c>)
 800adfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae08:	e7f0      	b.n	800adec <prvIdleTask+0x8>
 800ae0a:	bf00      	nop
 800ae0c:	2000ac0c 	.word	0x2000ac0c
 800ae10:	e000ed04 	.word	0xe000ed04

0800ae14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	607b      	str	r3, [r7, #4]
 800ae1e:	e00c      	b.n	800ae3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	4613      	mov	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4a12      	ldr	r2, [pc, #72]	@ (800ae74 <prvInitialiseTaskLists+0x60>)
 800ae2c:	4413      	add	r3, r2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fe f824 	bl	8008e7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3301      	adds	r3, #1
 800ae38:	607b      	str	r3, [r7, #4]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b37      	cmp	r3, #55	@ 0x37
 800ae3e:	d9ef      	bls.n	800ae20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae40:	480d      	ldr	r0, [pc, #52]	@ (800ae78 <prvInitialiseTaskLists+0x64>)
 800ae42:	f7fe f81b 	bl	8008e7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae46:	480d      	ldr	r0, [pc, #52]	@ (800ae7c <prvInitialiseTaskLists+0x68>)
 800ae48:	f7fe f818 	bl	8008e7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae4c:	480c      	ldr	r0, [pc, #48]	@ (800ae80 <prvInitialiseTaskLists+0x6c>)
 800ae4e:	f7fe f815 	bl	8008e7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae52:	480c      	ldr	r0, [pc, #48]	@ (800ae84 <prvInitialiseTaskLists+0x70>)
 800ae54:	f7fe f812 	bl	8008e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae58:	480b      	ldr	r0, [pc, #44]	@ (800ae88 <prvInitialiseTaskLists+0x74>)
 800ae5a:	f7fe f80f 	bl	8008e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae8c <prvInitialiseTaskLists+0x78>)
 800ae60:	4a05      	ldr	r2, [pc, #20]	@ (800ae78 <prvInitialiseTaskLists+0x64>)
 800ae62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae64:	4b0a      	ldr	r3, [pc, #40]	@ (800ae90 <prvInitialiseTaskLists+0x7c>)
 800ae66:	4a05      	ldr	r2, [pc, #20]	@ (800ae7c <prvInitialiseTaskLists+0x68>)
 800ae68:	601a      	str	r2, [r3, #0]
}
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	2000ac0c 	.word	0x2000ac0c
 800ae78:	2000b06c 	.word	0x2000b06c
 800ae7c:	2000b080 	.word	0x2000b080
 800ae80:	2000b09c 	.word	0x2000b09c
 800ae84:	2000b0b0 	.word	0x2000b0b0
 800ae88:	2000b0c8 	.word	0x2000b0c8
 800ae8c:	2000b094 	.word	0x2000b094
 800ae90:	2000b098 	.word	0x2000b098

0800ae94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae9a:	e019      	b.n	800aed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae9c:	f001 f806 	bl	800beac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aea0:	4b10      	ldr	r3, [pc, #64]	@ (800aee4 <prvCheckTasksWaitingTermination+0x50>)
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fe f86f 	bl	8008f90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aeb2:	4b0d      	ldr	r3, [pc, #52]	@ (800aee8 <prvCheckTasksWaitingTermination+0x54>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	4a0b      	ldr	r2, [pc, #44]	@ (800aee8 <prvCheckTasksWaitingTermination+0x54>)
 800aeba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aebc:	4b0b      	ldr	r3, [pc, #44]	@ (800aeec <prvCheckTasksWaitingTermination+0x58>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	4a0a      	ldr	r2, [pc, #40]	@ (800aeec <prvCheckTasksWaitingTermination+0x58>)
 800aec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aec6:	f001 f827 	bl	800bf18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f810 	bl	800aef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aed0:	4b06      	ldr	r3, [pc, #24]	@ (800aeec <prvCheckTasksWaitingTermination+0x58>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1e1      	bne.n	800ae9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aed8:	bf00      	nop
 800aeda:	bf00      	nop
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	2000b0b0 	.word	0x2000b0b0
 800aee8:	2000b0dc 	.word	0x2000b0dc
 800aeec:	2000b0c4 	.word	0x2000b0c4

0800aef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	3354      	adds	r3, #84	@ 0x54
 800aefc:	4618      	mov	r0, r3
 800aefe:	f00c f93d 	bl	801717c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d108      	bne.n	800af1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af10:	4618      	mov	r0, r3
 800af12:	f001 f9c7 	bl	800c2a4 <vPortFree>
				vPortFree( pxTCB );
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f001 f9c4 	bl	800c2a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af1c:	e01b      	b.n	800af56 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800af24:	2b01      	cmp	r3, #1
 800af26:	d103      	bne.n	800af30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f001 f9bb 	bl	800c2a4 <vPortFree>
	}
 800af2e:	e012      	b.n	800af56 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800af36:	2b02      	cmp	r3, #2
 800af38:	d00d      	beq.n	800af56 <prvDeleteTCB+0x66>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3e:	b672      	cpsid	i
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	b662      	cpsie	i
 800af4e:	60fb      	str	r3, [r7, #12]
}
 800af50:	bf00      	nop
 800af52:	bf00      	nop
 800af54:	e7fd      	b.n	800af52 <prvDeleteTCB+0x62>
	}
 800af56:	bf00      	nop
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
	...

0800af60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af66:	4b0c      	ldr	r3, [pc, #48]	@ (800af98 <prvResetNextTaskUnblockTime+0x38>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d104      	bne.n	800af7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af70:	4b0a      	ldr	r3, [pc, #40]	@ (800af9c <prvResetNextTaskUnblockTime+0x3c>)
 800af72:	f04f 32ff 	mov.w	r2, #4294967295
 800af76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af78:	e008      	b.n	800af8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af7a:	4b07      	ldr	r3, [pc, #28]	@ (800af98 <prvResetNextTaskUnblockTime+0x38>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	4a04      	ldr	r2, [pc, #16]	@ (800af9c <prvResetNextTaskUnblockTime+0x3c>)
 800af8a:	6013      	str	r3, [r2, #0]
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	2000b094 	.word	0x2000b094
 800af9c:	2000b0fc 	.word	0x2000b0fc

0800afa0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800afa6:	4b05      	ldr	r3, [pc, #20]	@ (800afbc <xTaskGetCurrentTaskHandle+0x1c>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	607b      	str	r3, [r7, #4]

		return xReturn;
 800afac:	687b      	ldr	r3, [r7, #4]
	}
 800afae:	4618      	mov	r0, r3
 800afb0:	370c      	adds	r7, #12
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	2000ac08 	.word	0x2000ac08

0800afc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800afc6:	4b0b      	ldr	r3, [pc, #44]	@ (800aff4 <xTaskGetSchedulerState+0x34>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d102      	bne.n	800afd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800afce:	2301      	movs	r3, #1
 800afd0:	607b      	str	r3, [r7, #4]
 800afd2:	e008      	b.n	800afe6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afd4:	4b08      	ldr	r3, [pc, #32]	@ (800aff8 <xTaskGetSchedulerState+0x38>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d102      	bne.n	800afe2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800afdc:	2302      	movs	r3, #2
 800afde:	607b      	str	r3, [r7, #4]
 800afe0:	e001      	b.n	800afe6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800afe2:	2300      	movs	r3, #0
 800afe4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800afe6:	687b      	ldr	r3, [r7, #4]
	}
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr
 800aff4:	2000b0e8 	.word	0x2000b0e8
 800aff8:	2000b104 	.word	0x2000b104

0800affc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b008:	2300      	movs	r3, #0
 800b00a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d051      	beq.n	800b0b6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b016:	4b2a      	ldr	r3, [pc, #168]	@ (800b0c0 <xTaskPriorityInherit+0xc4>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d241      	bcs.n	800b0a4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	2b00      	cmp	r3, #0
 800b026:	db06      	blt.n	800b036 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b028:	4b25      	ldr	r3, [pc, #148]	@ (800b0c0 <xTaskPriorityInherit+0xc4>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b02e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	6959      	ldr	r1, [r3, #20]
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b03e:	4613      	mov	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4a1f      	ldr	r2, [pc, #124]	@ (800b0c4 <xTaskPriorityInherit+0xc8>)
 800b048:	4413      	add	r3, r2
 800b04a:	4299      	cmp	r1, r3
 800b04c:	d122      	bne.n	800b094 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	3304      	adds	r3, #4
 800b052:	4618      	mov	r0, r3
 800b054:	f7fd ff9c 	bl	8008f90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b058:	4b19      	ldr	r3, [pc, #100]	@ (800b0c0 <xTaskPriorityInherit+0xc4>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b066:	4b18      	ldr	r3, [pc, #96]	@ (800b0c8 <xTaskPriorityInherit+0xcc>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d903      	bls.n	800b076 <xTaskPriorityInherit+0x7a>
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b072:	4a15      	ldr	r2, [pc, #84]	@ (800b0c8 <xTaskPriorityInherit+0xcc>)
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b07a:	4613      	mov	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4a10      	ldr	r2, [pc, #64]	@ (800b0c4 <xTaskPriorityInherit+0xc8>)
 800b084:	441a      	add	r2, r3
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	3304      	adds	r3, #4
 800b08a:	4619      	mov	r1, r3
 800b08c:	4610      	mov	r0, r2
 800b08e:	f7fd ff22 	bl	8008ed6 <vListInsertEnd>
 800b092:	e004      	b.n	800b09e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b094:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c0 <xTaskPriorityInherit+0xc4>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	60fb      	str	r3, [r7, #12]
 800b0a2:	e008      	b.n	800b0b6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0a8:	4b05      	ldr	r3, [pc, #20]	@ (800b0c0 <xTaskPriorityInherit+0xc4>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d201      	bcs.n	800b0b6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
	}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	2000ac08 	.word	0x2000ac08
 800b0c4:	2000ac0c 	.word	0x2000ac0c
 800b0c8:	2000b0e4 	.word	0x2000b0e4

0800b0cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d05c      	beq.n	800b19c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0e2:	4b31      	ldr	r3, [pc, #196]	@ (800b1a8 <xTaskPriorityDisinherit+0xdc>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d00d      	beq.n	800b108 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800b0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f0:	b672      	cpsid	i
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	b662      	cpsie	i
 800b100:	60fb      	str	r3, [r7, #12]
}
 800b102:	bf00      	nop
 800b104:	bf00      	nop
 800b106:	e7fd      	b.n	800b104 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10d      	bne.n	800b12c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800b110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b114:	b672      	cpsid	i
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	b662      	cpsie	i
 800b124:	60bb      	str	r3, [r7, #8]
}
 800b126:	bf00      	nop
 800b128:	bf00      	nop
 800b12a:	e7fd      	b.n	800b128 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b130:	1e5a      	subs	r2, r3, #1
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b13e:	429a      	cmp	r2, r3
 800b140:	d02c      	beq.n	800b19c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b146:	2b00      	cmp	r3, #0
 800b148:	d128      	bne.n	800b19c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	3304      	adds	r3, #4
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fd ff1e 	bl	8008f90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b160:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b16c:	4b0f      	ldr	r3, [pc, #60]	@ (800b1ac <xTaskPriorityDisinherit+0xe0>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	429a      	cmp	r2, r3
 800b172:	d903      	bls.n	800b17c <xTaskPriorityDisinherit+0xb0>
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b178:	4a0c      	ldr	r2, [pc, #48]	@ (800b1ac <xTaskPriorityDisinherit+0xe0>)
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b180:	4613      	mov	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4a09      	ldr	r2, [pc, #36]	@ (800b1b0 <xTaskPriorityDisinherit+0xe4>)
 800b18a:	441a      	add	r2, r3
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	3304      	adds	r3, #4
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f7fd fe9f 	bl	8008ed6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b198:	2301      	movs	r3, #1
 800b19a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b19c:	697b      	ldr	r3, [r7, #20]
	}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	2000ac08 	.word	0x2000ac08
 800b1ac:	2000b0e4 	.word	0x2000b0e4
 800b1b0:	2000ac0c 	.word	0x2000ac0c

0800b1b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b088      	sub	sp, #32
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d070      	beq.n	800b2ae <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10d      	bne.n	800b1f0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d8:	b672      	cpsid	i
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	b662      	cpsie	i
 800b1e8:	60fb      	str	r3, [r7, #12]
}
 800b1ea:	bf00      	nop
 800b1ec:	bf00      	nop
 800b1ee:	e7fd      	b.n	800b1ec <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d902      	bls.n	800b200 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	61fb      	str	r3, [r7, #28]
 800b1fe:	e002      	b.n	800b206 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b204:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d04e      	beq.n	800b2ae <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b214:	697a      	ldr	r2, [r7, #20]
 800b216:	429a      	cmp	r2, r3
 800b218:	d149      	bne.n	800b2ae <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b21a:	4b27      	ldr	r3, [pc, #156]	@ (800b2b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	69ba      	ldr	r2, [r7, #24]
 800b220:	429a      	cmp	r2, r3
 800b222:	d10d      	bne.n	800b240 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800b224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b228:	b672      	cpsid	i
 800b22a:	f383 8811 	msr	BASEPRI, r3
 800b22e:	f3bf 8f6f 	isb	sy
 800b232:	f3bf 8f4f 	dsb	sy
 800b236:	b662      	cpsie	i
 800b238:	60bb      	str	r3, [r7, #8]
}
 800b23a:	bf00      	nop
 800b23c:	bf00      	nop
 800b23e:	e7fd      	b.n	800b23c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b244:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	69fa      	ldr	r2, [r7, #28]
 800b24a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	2b00      	cmp	r3, #0
 800b252:	db04      	blt.n	800b25e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	6959      	ldr	r1, [r3, #20]
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	4613      	mov	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4413      	add	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4a13      	ldr	r2, [pc, #76]	@ (800b2bc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b26e:	4413      	add	r3, r2
 800b270:	4299      	cmp	r1, r3
 800b272:	d11c      	bne.n	800b2ae <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	3304      	adds	r3, #4
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fd fe89 	bl	8008f90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b282:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	429a      	cmp	r2, r3
 800b288:	d903      	bls.n	800b292 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b28e:	4a0c      	ldr	r2, [pc, #48]	@ (800b2c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b290:	6013      	str	r3, [r2, #0]
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b296:	4613      	mov	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4413      	add	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4a07      	ldr	r2, [pc, #28]	@ (800b2bc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b2a0:	441a      	add	r2, r3
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	f7fd fe14 	bl	8008ed6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2ae:	bf00      	nop
 800b2b0:	3720      	adds	r7, #32
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	2000ac08 	.word	0x2000ac08
 800b2bc:	2000ac0c 	.word	0x2000ac0c
 800b2c0:	2000b0e4 	.word	0x2000b0e4

0800b2c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b2c8:	4b07      	ldr	r3, [pc, #28]	@ (800b2e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d004      	beq.n	800b2da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b2d0:	4b05      	ldr	r3, [pc, #20]	@ (800b2e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2d6:	3201      	adds	r2, #1
 800b2d8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b2da:	4b03      	ldr	r3, [pc, #12]	@ (800b2e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
	}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	2000ac08 	.word	0x2000ac08

0800b2ec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b2f6:	f000 fdd9 	bl	800beac <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b2fa:	4b20      	ldr	r3, [pc, #128]	@ (800b37c <ulTaskNotifyTake+0x90>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d113      	bne.n	800b32e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b306:	4b1d      	ldr	r3, [pc, #116]	@ (800b37c <ulTaskNotifyTake+0x90>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00b      	beq.n	800b32e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b316:	2101      	movs	r1, #1
 800b318:	6838      	ldr	r0, [r7, #0]
 800b31a:	f000 f8fb 	bl	800b514 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b31e:	4b18      	ldr	r3, [pc, #96]	@ (800b380 <ulTaskNotifyTake+0x94>)
 800b320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b32e:	f000 fdf3 	bl	800bf18 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b332:	f000 fdbb 	bl	800beac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b336:	4b11      	ldr	r3, [pc, #68]	@ (800b37c <ulTaskNotifyTake+0x90>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b33e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00e      	beq.n	800b364 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d005      	beq.n	800b358 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b34c:	4b0b      	ldr	r3, [pc, #44]	@ (800b37c <ulTaskNotifyTake+0x90>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2200      	movs	r2, #0
 800b352:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800b356:	e005      	b.n	800b364 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b358:	4b08      	ldr	r3, [pc, #32]	@ (800b37c <ulTaskNotifyTake+0x90>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	3a01      	subs	r2, #1
 800b360:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b364:	4b05      	ldr	r3, [pc, #20]	@ (800b37c <ulTaskNotifyTake+0x90>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800b36e:	f000 fdd3 	bl	800bf18 <vPortExitCritical>

		return ulReturn;
 800b372:	68fb      	ldr	r3, [r7, #12]
	}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	2000ac08 	.word	0x2000ac08
 800b380:	e000ed04 	.word	0xe000ed04

0800b384 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b384:	b580      	push	{r7, lr}
 800b386:	b08a      	sub	sp, #40	@ 0x28
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	603b      	str	r3, [r7, #0]
 800b390:	4613      	mov	r3, r2
 800b392:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b394:	2301      	movs	r3, #1
 800b396:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10d      	bne.n	800b3ba <xTaskGenericNotify+0x36>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a2:	b672      	cpsid	i
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	b662      	cpsie	i
 800b3b2:	61bb      	str	r3, [r7, #24]
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop
 800b3b8:	e7fd      	b.n	800b3b6 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b3be:	f000 fd75 	bl	800beac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d004      	beq.n	800b3d2 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b3d2:	6a3b      	ldr	r3, [r7, #32]
 800b3d4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b3d8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	2202      	movs	r2, #2
 800b3de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b3e2:	79fb      	ldrb	r3, [r7, #7]
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d82e      	bhi.n	800b446 <xTaskGenericNotify+0xc2>
 800b3e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f0 <xTaskGenericNotify+0x6c>)
 800b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ee:	bf00      	nop
 800b3f0:	0800b46f 	.word	0x0800b46f
 800b3f4:	0800b405 	.word	0x0800b405
 800b3f8:	0800b417 	.word	0x0800b417
 800b3fc:	0800b427 	.word	0x0800b427
 800b400:	0800b431 	.word	0x0800b431
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	431a      	orrs	r2, r3
 800b40e:	6a3b      	ldr	r3, [r7, #32]
 800b410:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b414:	e02e      	b.n	800b474 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b416:	6a3b      	ldr	r3, [r7, #32]
 800b418:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b41c:	1c5a      	adds	r2, r3, #1
 800b41e:	6a3b      	ldr	r3, [r7, #32]
 800b420:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b424:	e026      	b.n	800b474 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b426:	6a3b      	ldr	r3, [r7, #32]
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b42e:	e021      	b.n	800b474 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b430:	7ffb      	ldrb	r3, [r7, #31]
 800b432:	2b02      	cmp	r3, #2
 800b434:	d004      	beq.n	800b440 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b436:	6a3b      	ldr	r3, [r7, #32]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b43e:	e019      	b.n	800b474 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 800b440:	2300      	movs	r3, #0
 800b442:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b444:	e016      	b.n	800b474 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b450:	d00f      	beq.n	800b472 <xTaskGenericNotify+0xee>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b456:	b672      	cpsid	i
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	b662      	cpsie	i
 800b466:	617b      	str	r3, [r7, #20]
}
 800b468:	bf00      	nop
 800b46a:	bf00      	nop
 800b46c:	e7fd      	b.n	800b46a <xTaskGenericNotify+0xe6>
					break;
 800b46e:	bf00      	nop
 800b470:	e000      	b.n	800b474 <xTaskGenericNotify+0xf0>

					break;
 800b472:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b474:	7ffb      	ldrb	r3, [r7, #31]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d13d      	bne.n	800b4f6 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	3304      	adds	r3, #4
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fd fd86 	bl	8008f90 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b488:	4b1e      	ldr	r3, [pc, #120]	@ (800b504 <xTaskGenericNotify+0x180>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d903      	bls.n	800b498 <xTaskGenericNotify+0x114>
 800b490:	6a3b      	ldr	r3, [r7, #32]
 800b492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b494:	4a1b      	ldr	r2, [pc, #108]	@ (800b504 <xTaskGenericNotify+0x180>)
 800b496:	6013      	str	r3, [r2, #0]
 800b498:	6a3b      	ldr	r3, [r7, #32]
 800b49a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b49c:	4613      	mov	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4a18      	ldr	r2, [pc, #96]	@ (800b508 <xTaskGenericNotify+0x184>)
 800b4a6:	441a      	add	r2, r3
 800b4a8:	6a3b      	ldr	r3, [r7, #32]
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	f7fd fd11 	bl	8008ed6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00d      	beq.n	800b4d8 <xTaskGenericNotify+0x154>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c0:	b672      	cpsid	i
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	b662      	cpsie	i
 800b4d0:	613b      	str	r3, [r7, #16]
}
 800b4d2:	bf00      	nop
 800b4d4:	bf00      	nop
 800b4d6:	e7fd      	b.n	800b4d4 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
 800b4da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b50c <xTaskGenericNotify+0x188>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d907      	bls.n	800b4f6 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b4e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b510 <xTaskGenericNotify+0x18c>)
 800b4e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b4f6:	f000 fd0f 	bl	800bf18 <vPortExitCritical>

		return xReturn;
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3728      	adds	r7, #40	@ 0x28
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	2000b0e4 	.word	0x2000b0e4
 800b508:	2000ac0c 	.word	0x2000ac0c
 800b50c:	2000ac08 	.word	0x2000ac08
 800b510:	e000ed04 	.word	0xe000ed04

0800b514 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b51e:	4b21      	ldr	r3, [pc, #132]	@ (800b5a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b524:	4b20      	ldr	r3, [pc, #128]	@ (800b5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3304      	adds	r3, #4
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fd fd30 	bl	8008f90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b536:	d10a      	bne.n	800b54e <prvAddCurrentTaskToDelayedList+0x3a>
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d007      	beq.n	800b54e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b53e:	4b1a      	ldr	r3, [pc, #104]	@ (800b5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3304      	adds	r3, #4
 800b544:	4619      	mov	r1, r3
 800b546:	4819      	ldr	r0, [pc, #100]	@ (800b5ac <prvAddCurrentTaskToDelayedList+0x98>)
 800b548:	f7fd fcc5 	bl	8008ed6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b54c:	e026      	b.n	800b59c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4413      	add	r3, r2
 800b554:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b556:	4b14      	ldr	r3, [pc, #80]	@ (800b5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	429a      	cmp	r2, r3
 800b564:	d209      	bcs.n	800b57a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b566:	4b12      	ldr	r3, [pc, #72]	@ (800b5b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	4b0f      	ldr	r3, [pc, #60]	@ (800b5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	3304      	adds	r3, #4
 800b570:	4619      	mov	r1, r3
 800b572:	4610      	mov	r0, r2
 800b574:	f7fd fcd3 	bl	8008f1e <vListInsert>
}
 800b578:	e010      	b.n	800b59c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b57a:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3304      	adds	r3, #4
 800b584:	4619      	mov	r1, r3
 800b586:	4610      	mov	r0, r2
 800b588:	f7fd fcc9 	bl	8008f1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b58c:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	429a      	cmp	r2, r3
 800b594:	d202      	bcs.n	800b59c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b596:	4a08      	ldr	r2, [pc, #32]	@ (800b5b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	6013      	str	r3, [r2, #0]
}
 800b59c:	bf00      	nop
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	2000b0e0 	.word	0x2000b0e0
 800b5a8:	2000ac08 	.word	0x2000ac08
 800b5ac:	2000b0c8 	.word	0x2000b0c8
 800b5b0:	2000b098 	.word	0x2000b098
 800b5b4:	2000b094 	.word	0x2000b094
 800b5b8:	2000b0fc 	.word	0x2000b0fc

0800b5bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08a      	sub	sp, #40	@ 0x28
 800b5c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b5c6:	f000 fb21 	bl	800bc0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b5ca:	4b1e      	ldr	r3, [pc, #120]	@ (800b644 <xTimerCreateTimerTask+0x88>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d021      	beq.n	800b616 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5da:	1d3a      	adds	r2, r7, #4
 800b5dc:	f107 0108 	add.w	r1, r7, #8
 800b5e0:	f107 030c 	add.w	r3, r7, #12
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fd fc2f 	bl	8008e48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b5ea:	6879      	ldr	r1, [r7, #4]
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	9202      	str	r2, [sp, #8]
 800b5f2:	9301      	str	r3, [sp, #4]
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	460a      	mov	r2, r1
 800b5fc:	4912      	ldr	r1, [pc, #72]	@ (800b648 <xTimerCreateTimerTask+0x8c>)
 800b5fe:	4813      	ldr	r0, [pc, #76]	@ (800b64c <xTimerCreateTimerTask+0x90>)
 800b600:	f7fe fe20 	bl	800a244 <xTaskCreateStatic>
 800b604:	4603      	mov	r3, r0
 800b606:	4a12      	ldr	r2, [pc, #72]	@ (800b650 <xTimerCreateTimerTask+0x94>)
 800b608:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b60a:	4b11      	ldr	r3, [pc, #68]	@ (800b650 <xTimerCreateTimerTask+0x94>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b612:	2301      	movs	r3, #1
 800b614:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10d      	bne.n	800b638 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b620:	b672      	cpsid	i
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	b662      	cpsie	i
 800b630:	613b      	str	r3, [r7, #16]
}
 800b632:	bf00      	nop
 800b634:	bf00      	nop
 800b636:	e7fd      	b.n	800b634 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b638:	697b      	ldr	r3, [r7, #20]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3718      	adds	r7, #24
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	2000b138 	.word	0x2000b138
 800b648:	08018134 	.word	0x08018134
 800b64c:	0800b795 	.word	0x0800b795
 800b650:	2000b13c 	.word	0x2000b13c

0800b654 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b08a      	sub	sp, #40	@ 0x28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
 800b660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b662:	2300      	movs	r3, #0
 800b664:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10d      	bne.n	800b688 <xTimerGenericCommand+0x34>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b670:	b672      	cpsid	i
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	b662      	cpsie	i
 800b680:	623b      	str	r3, [r7, #32]
}
 800b682:	bf00      	nop
 800b684:	bf00      	nop
 800b686:	e7fd      	b.n	800b684 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b688:	4b19      	ldr	r3, [pc, #100]	@ (800b6f0 <xTimerGenericCommand+0x9c>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d02a      	beq.n	800b6e6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2b05      	cmp	r3, #5
 800b6a0:	dc18      	bgt.n	800b6d4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b6a2:	f7ff fc8d 	bl	800afc0 <xTaskGetSchedulerState>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d109      	bne.n	800b6c0 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6ac:	4b10      	ldr	r3, [pc, #64]	@ (800b6f0 <xTimerGenericCommand+0x9c>)
 800b6ae:	6818      	ldr	r0, [r3, #0]
 800b6b0:	f107 0110 	add.w	r1, r7, #16
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6b8:	f7fd ff20 	bl	80094fc <xQueueGenericSend>
 800b6bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6be:	e012      	b.n	800b6e6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b6f0 <xTimerGenericCommand+0x9c>)
 800b6c2:	6818      	ldr	r0, [r3, #0]
 800b6c4:	f107 0110 	add.w	r1, r7, #16
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f7fd ff16 	bl	80094fc <xQueueGenericSend>
 800b6d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6d2:	e008      	b.n	800b6e6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b6d4:	4b06      	ldr	r3, [pc, #24]	@ (800b6f0 <xTimerGenericCommand+0x9c>)
 800b6d6:	6818      	ldr	r0, [r3, #0]
 800b6d8:	f107 0110 	add.w	r1, r7, #16
 800b6dc:	2300      	movs	r3, #0
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	f7fe f816 	bl	8009710 <xQueueGenericSendFromISR>
 800b6e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3728      	adds	r7, #40	@ 0x28
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	2000b138 	.word	0x2000b138

0800b6f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6fe:	4b24      	ldr	r3, [pc, #144]	@ (800b790 <prvProcessExpiredTimer+0x9c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	3304      	adds	r3, #4
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7fd fc3f 	bl	8008f90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b718:	f003 0304 	and.w	r3, r3, #4
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d025      	beq.n	800b76c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	699a      	ldr	r2, [r3, #24]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	18d1      	adds	r1, r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	6978      	ldr	r0, [r7, #20]
 800b72e:	f000 f8d7 	bl	800b8e0 <prvInsertTimerInActiveList>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d022      	beq.n	800b77e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b738:	2300      	movs	r3, #0
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	2300      	movs	r3, #0
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	2100      	movs	r1, #0
 800b742:	6978      	ldr	r0, [r7, #20]
 800b744:	f7ff ff86 	bl	800b654 <xTimerGenericCommand>
 800b748:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d116      	bne.n	800b77e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b754:	b672      	cpsid	i
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	b662      	cpsie	i
 800b764:	60fb      	str	r3, [r7, #12]
}
 800b766:	bf00      	nop
 800b768:	bf00      	nop
 800b76a:	e7fd      	b.n	800b768 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b772:	f023 0301 	bic.w	r3, r3, #1
 800b776:	b2da      	uxtb	r2, r3
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	6978      	ldr	r0, [r7, #20]
 800b784:	4798      	blx	r3
}
 800b786:	bf00      	nop
 800b788:	3718      	adds	r7, #24
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	2000b130 	.word	0x2000b130

0800b794 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b79c:	f107 0308 	add.w	r3, r7, #8
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f000 f859 	bl	800b858 <prvGetNextExpireTime>
 800b7a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 f805 	bl	800b7bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b7b2:	f000 f8d7 	bl	800b964 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7b6:	bf00      	nop
 800b7b8:	e7f0      	b.n	800b79c <prvTimerTask+0x8>
	...

0800b7bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7c6:	f7fe ffaf 	bl	800a728 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7ca:	f107 0308 	add.w	r3, r7, #8
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 f866 	bl	800b8a0 <prvSampleTimeNow>
 800b7d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d130      	bne.n	800b83e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10a      	bne.n	800b7f8 <prvProcessTimerOrBlockTask+0x3c>
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d806      	bhi.n	800b7f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b7ea:	f7fe ffab 	bl	800a744 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b7ee:	68f9      	ldr	r1, [r7, #12]
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7ff ff7f 	bl	800b6f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b7f6:	e024      	b.n	800b842 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d008      	beq.n	800b810 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b7fe:	4b13      	ldr	r3, [pc, #76]	@ (800b84c <prvProcessTimerOrBlockTask+0x90>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d101      	bne.n	800b80c <prvProcessTimerOrBlockTask+0x50>
 800b808:	2301      	movs	r3, #1
 800b80a:	e000      	b.n	800b80e <prvProcessTimerOrBlockTask+0x52>
 800b80c:	2300      	movs	r3, #0
 800b80e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b810:	4b0f      	ldr	r3, [pc, #60]	@ (800b850 <prvProcessTimerOrBlockTask+0x94>)
 800b812:	6818      	ldr	r0, [r3, #0]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	4619      	mov	r1, r3
 800b81e:	f7fe fcdd 	bl	800a1dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b822:	f7fe ff8f 	bl	800a744 <xTaskResumeAll>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10a      	bne.n	800b842 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b82c:	4b09      	ldr	r3, [pc, #36]	@ (800b854 <prvProcessTimerOrBlockTask+0x98>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	f3bf 8f6f 	isb	sy
}
 800b83c:	e001      	b.n	800b842 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b83e:	f7fe ff81 	bl	800a744 <xTaskResumeAll>
}
 800b842:	bf00      	nop
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	2000b134 	.word	0x2000b134
 800b850:	2000b138 	.word	0x2000b138
 800b854:	e000ed04 	.word	0xe000ed04

0800b858 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b860:	4b0e      	ldr	r3, [pc, #56]	@ (800b89c <prvGetNextExpireTime+0x44>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d101      	bne.n	800b86e <prvGetNextExpireTime+0x16>
 800b86a:	2201      	movs	r2, #1
 800b86c:	e000      	b.n	800b870 <prvGetNextExpireTime+0x18>
 800b86e:	2200      	movs	r2, #0
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d105      	bne.n	800b888 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b87c:	4b07      	ldr	r3, [pc, #28]	@ (800b89c <prvGetNextExpireTime+0x44>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	60fb      	str	r3, [r7, #12]
 800b886:	e001      	b.n	800b88c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b88c:	68fb      	ldr	r3, [r7, #12]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	2000b130 	.word	0x2000b130

0800b8a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b8a8:	f7fe ffec 	bl	800a884 <xTaskGetTickCount>
 800b8ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b8ae:	4b0b      	ldr	r3, [pc, #44]	@ (800b8dc <prvSampleTimeNow+0x3c>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d205      	bcs.n	800b8c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b8b8:	f000 f940 	bl	800bb3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	601a      	str	r2, [r3, #0]
 800b8c2:	e002      	b.n	800b8ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8ca:	4a04      	ldr	r2, [pc, #16]	@ (800b8dc <prvSampleTimeNow+0x3c>)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	2000b140 	.word	0x2000b140

0800b8e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	429a      	cmp	r2, r3
 800b904:	d812      	bhi.n	800b92c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	1ad2      	subs	r2, r2, r3
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	429a      	cmp	r2, r3
 800b912:	d302      	bcc.n	800b91a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b914:	2301      	movs	r3, #1
 800b916:	617b      	str	r3, [r7, #20]
 800b918:	e01b      	b.n	800b952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b91a:	4b10      	ldr	r3, [pc, #64]	@ (800b95c <prvInsertTimerInActiveList+0x7c>)
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3304      	adds	r3, #4
 800b922:	4619      	mov	r1, r3
 800b924:	4610      	mov	r0, r2
 800b926:	f7fd fafa 	bl	8008f1e <vListInsert>
 800b92a:	e012      	b.n	800b952 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	429a      	cmp	r2, r3
 800b932:	d206      	bcs.n	800b942 <prvInsertTimerInActiveList+0x62>
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d302      	bcc.n	800b942 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b93c:	2301      	movs	r3, #1
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	e007      	b.n	800b952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b942:	4b07      	ldr	r3, [pc, #28]	@ (800b960 <prvInsertTimerInActiveList+0x80>)
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3304      	adds	r3, #4
 800b94a:	4619      	mov	r1, r3
 800b94c:	4610      	mov	r0, r2
 800b94e:	f7fd fae6 	bl	8008f1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b952:	697b      	ldr	r3, [r7, #20]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3718      	adds	r7, #24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	2000b134 	.word	0x2000b134
 800b960:	2000b130 	.word	0x2000b130

0800b964 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b08e      	sub	sp, #56	@ 0x38
 800b968:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b96a:	e0d4      	b.n	800bb16 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	da1b      	bge.n	800b9aa <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b972:	1d3b      	adds	r3, r7, #4
 800b974:	3304      	adds	r3, #4
 800b976:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10d      	bne.n	800b99a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b982:	b672      	cpsid	i
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	b662      	cpsie	i
 800b992:	61fb      	str	r3, [r7, #28]
}
 800b994:	bf00      	nop
 800b996:	bf00      	nop
 800b998:	e7fd      	b.n	800b996 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9a0:	6850      	ldr	r0, [r2, #4]
 800b9a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9a4:	6892      	ldr	r2, [r2, #8]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f2c0 80b2 	blt.w	800bb16 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d004      	beq.n	800b9c8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fd fae4 	bl	8008f90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9c8:	463b      	mov	r3, r7
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7ff ff68 	bl	800b8a0 <prvSampleTimeNow>
 800b9d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b09      	cmp	r3, #9
 800b9d6:	f200 809b 	bhi.w	800bb10 <prvProcessReceivedCommands+0x1ac>
 800b9da:	a201      	add	r2, pc, #4	@ (adr r2, 800b9e0 <prvProcessReceivedCommands+0x7c>)
 800b9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e0:	0800ba09 	.word	0x0800ba09
 800b9e4:	0800ba09 	.word	0x0800ba09
 800b9e8:	0800ba09 	.word	0x0800ba09
 800b9ec:	0800ba83 	.word	0x0800ba83
 800b9f0:	0800ba97 	.word	0x0800ba97
 800b9f4:	0800bae7 	.word	0x0800bae7
 800b9f8:	0800ba09 	.word	0x0800ba09
 800b9fc:	0800ba09 	.word	0x0800ba09
 800ba00:	0800ba83 	.word	0x0800ba83
 800ba04:	0800ba97 	.word	0x0800ba97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba0e:	f043 0301 	orr.w	r3, r3, #1
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	18d1      	adds	r1, r2, r3
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba28:	f7ff ff5a 	bl	800b8e0 <prvInsertTimerInActiveList>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d070      	beq.n	800bb14 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba34:	6a1b      	ldr	r3, [r3, #32]
 800ba36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba40:	f003 0304 	and.w	r3, r3, #4
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d065      	beq.n	800bb14 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	441a      	add	r2, r3
 800ba50:	2300      	movs	r3, #0
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	2300      	movs	r3, #0
 800ba56:	2100      	movs	r1, #0
 800ba58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba5a:	f7ff fdfb 	bl	800b654 <xTimerGenericCommand>
 800ba5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ba60:	6a3b      	ldr	r3, [r7, #32]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d156      	bne.n	800bb14 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6a:	b672      	cpsid	i
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	b662      	cpsie	i
 800ba7a:	61bb      	str	r3, [r7, #24]
}
 800ba7c:	bf00      	nop
 800ba7e:	bf00      	nop
 800ba80:	e7fd      	b.n	800ba7e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba88:	f023 0301 	bic.w	r3, r3, #1
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba94:	e03f      	b.n	800bb16 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba9c:	f043 0301 	orr.w	r3, r3, #1
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800baae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10d      	bne.n	800bad2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800bab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baba:	b672      	cpsid	i
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	b662      	cpsie	i
 800baca:	617b      	str	r3, [r7, #20]
}
 800bacc:	bf00      	nop
 800bace:	bf00      	nop
 800bad0:	e7fd      	b.n	800bace <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad4:	699a      	ldr	r2, [r3, #24]
 800bad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad8:	18d1      	adds	r1, r2, r3
 800bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800badc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bae0:	f7ff fefe 	bl	800b8e0 <prvInsertTimerInActiveList>
					break;
 800bae4:	e017      	b.n	800bb16 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800baec:	f003 0302 	and.w	r3, r3, #2
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d103      	bne.n	800bafc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800baf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800baf6:	f000 fbd5 	bl	800c2a4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bafa:	e00c      	b.n	800bb16 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb02:	f023 0301 	bic.w	r3, r3, #1
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bb0e:	e002      	b.n	800bb16 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800bb10:	bf00      	nop
 800bb12:	e000      	b.n	800bb16 <prvProcessReceivedCommands+0x1b2>
					break;
 800bb14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb16:	4b08      	ldr	r3, [pc, #32]	@ (800bb38 <prvProcessReceivedCommands+0x1d4>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	1d39      	adds	r1, r7, #4
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fd ff32 	bl	8009988 <xQueueReceive>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f47f af20 	bne.w	800b96c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bb2c:	bf00      	nop
 800bb2e:	bf00      	nop
 800bb30:	3730      	adds	r7, #48	@ 0x30
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	2000b138 	.word	0x2000b138

0800bb3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b088      	sub	sp, #32
 800bb40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb42:	e04b      	b.n	800bbdc <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb44:	4b2f      	ldr	r3, [pc, #188]	@ (800bc04 <prvSwitchTimerLists+0xc8>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb4e:	4b2d      	ldr	r3, [pc, #180]	@ (800bc04 <prvSwitchTimerLists+0xc8>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fd fa17 	bl	8008f90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb70:	f003 0304 	and.w	r3, r3, #4
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d031      	beq.n	800bbdc <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	699b      	ldr	r3, [r3, #24]
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	4413      	add	r3, r2
 800bb80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d90e      	bls.n	800bba8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb96:	4b1b      	ldr	r3, [pc, #108]	@ (800bc04 <prvSwitchTimerLists+0xc8>)
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	4619      	mov	r1, r3
 800bba0:	4610      	mov	r0, r2
 800bba2:	f7fd f9bc 	bl	8008f1e <vListInsert>
 800bba6:	e019      	b.n	800bbdc <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bba8:	2300      	movs	r3, #0
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	2300      	movs	r3, #0
 800bbae:	693a      	ldr	r2, [r7, #16]
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f7ff fd4e 	bl	800b654 <xTimerGenericCommand>
 800bbb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10d      	bne.n	800bbdc <prvSwitchTimerLists+0xa0>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc4:	b672      	cpsid	i
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	b662      	cpsie	i
 800bbd4:	603b      	str	r3, [r7, #0]
}
 800bbd6:	bf00      	nop
 800bbd8:	bf00      	nop
 800bbda:	e7fd      	b.n	800bbd8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbdc:	4b09      	ldr	r3, [pc, #36]	@ (800bc04 <prvSwitchTimerLists+0xc8>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1ae      	bne.n	800bb44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbe6:	4b07      	ldr	r3, [pc, #28]	@ (800bc04 <prvSwitchTimerLists+0xc8>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbec:	4b06      	ldr	r3, [pc, #24]	@ (800bc08 <prvSwitchTimerLists+0xcc>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a04      	ldr	r2, [pc, #16]	@ (800bc04 <prvSwitchTimerLists+0xc8>)
 800bbf2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbf4:	4a04      	ldr	r2, [pc, #16]	@ (800bc08 <prvSwitchTimerLists+0xcc>)
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	6013      	str	r3, [r2, #0]
}
 800bbfa:	bf00      	nop
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	2000b130 	.word	0x2000b130
 800bc08:	2000b134 	.word	0x2000b134

0800bc0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc12:	f000 f94b 	bl	800beac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc16:	4b15      	ldr	r3, [pc, #84]	@ (800bc6c <prvCheckForValidListAndQueue+0x60>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d120      	bne.n	800bc60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc1e:	4814      	ldr	r0, [pc, #80]	@ (800bc70 <prvCheckForValidListAndQueue+0x64>)
 800bc20:	f7fd f92c 	bl	8008e7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc24:	4813      	ldr	r0, [pc, #76]	@ (800bc74 <prvCheckForValidListAndQueue+0x68>)
 800bc26:	f7fd f929 	bl	8008e7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc2a:	4b13      	ldr	r3, [pc, #76]	@ (800bc78 <prvCheckForValidListAndQueue+0x6c>)
 800bc2c:	4a10      	ldr	r2, [pc, #64]	@ (800bc70 <prvCheckForValidListAndQueue+0x64>)
 800bc2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc30:	4b12      	ldr	r3, [pc, #72]	@ (800bc7c <prvCheckForValidListAndQueue+0x70>)
 800bc32:	4a10      	ldr	r2, [pc, #64]	@ (800bc74 <prvCheckForValidListAndQueue+0x68>)
 800bc34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc36:	2300      	movs	r3, #0
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	4b11      	ldr	r3, [pc, #68]	@ (800bc80 <prvCheckForValidListAndQueue+0x74>)
 800bc3c:	4a11      	ldr	r2, [pc, #68]	@ (800bc84 <prvCheckForValidListAndQueue+0x78>)
 800bc3e:	2110      	movs	r1, #16
 800bc40:	200a      	movs	r0, #10
 800bc42:	f7fd fa3b 	bl	80090bc <xQueueGenericCreateStatic>
 800bc46:	4603      	mov	r3, r0
 800bc48:	4a08      	ldr	r2, [pc, #32]	@ (800bc6c <prvCheckForValidListAndQueue+0x60>)
 800bc4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc4c:	4b07      	ldr	r3, [pc, #28]	@ (800bc6c <prvCheckForValidListAndQueue+0x60>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d005      	beq.n	800bc60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc54:	4b05      	ldr	r3, [pc, #20]	@ (800bc6c <prvCheckForValidListAndQueue+0x60>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	490b      	ldr	r1, [pc, #44]	@ (800bc88 <prvCheckForValidListAndQueue+0x7c>)
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fa6a 	bl	800a134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc60:	f000 f95a 	bl	800bf18 <vPortExitCritical>
}
 800bc64:	bf00      	nop
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	2000b138 	.word	0x2000b138
 800bc70:	2000b108 	.word	0x2000b108
 800bc74:	2000b11c 	.word	0x2000b11c
 800bc78:	2000b130 	.word	0x2000b130
 800bc7c:	2000b134 	.word	0x2000b134
 800bc80:	2000b1e4 	.word	0x2000b1e4
 800bc84:	2000b144 	.word	0x2000b144
 800bc88:	0801813c 	.word	0x0801813c

0800bc8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	3b04      	subs	r3, #4
 800bc9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	3b04      	subs	r3, #4
 800bcaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	f023 0201 	bic.w	r2, r3, #1
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	3b04      	subs	r3, #4
 800bcba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bcbc:	4a0c      	ldr	r2, [pc, #48]	@ (800bcf0 <pxPortInitialiseStack+0x64>)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	3b14      	subs	r3, #20
 800bcc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3b04      	subs	r3, #4
 800bcd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f06f 0202 	mvn.w	r2, #2
 800bcda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	3b20      	subs	r3, #32
 800bce0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bce2:	68fb      	ldr	r3, [r7, #12]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	0800bcf5 	.word	0x0800bcf5

0800bcf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bcfe:	4b15      	ldr	r3, [pc, #84]	@ (800bd54 <prvTaskExitError+0x60>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd06:	d00d      	beq.n	800bd24 <prvTaskExitError+0x30>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0c:	b672      	cpsid	i
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	b662      	cpsie	i
 800bd1c:	60fb      	str	r3, [r7, #12]
}
 800bd1e:	bf00      	nop
 800bd20:	bf00      	nop
 800bd22:	e7fd      	b.n	800bd20 <prvTaskExitError+0x2c>
	__asm volatile
 800bd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd28:	b672      	cpsid	i
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	b662      	cpsie	i
 800bd38:	60bb      	str	r3, [r7, #8]
}
 800bd3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd3c:	bf00      	nop
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d0fc      	beq.n	800bd3e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	20000020 	.word	0x20000020
	...

0800bd60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd60:	4b07      	ldr	r3, [pc, #28]	@ (800bd80 <pxCurrentTCBConst2>)
 800bd62:	6819      	ldr	r1, [r3, #0]
 800bd64:	6808      	ldr	r0, [r1, #0]
 800bd66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6a:	f380 8809 	msr	PSP, r0
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f04f 0000 	mov.w	r0, #0
 800bd76:	f380 8811 	msr	BASEPRI, r0
 800bd7a:	4770      	bx	lr
 800bd7c:	f3af 8000 	nop.w

0800bd80 <pxCurrentTCBConst2>:
 800bd80:	2000ac08 	.word	0x2000ac08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop

0800bd88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd88:	4808      	ldr	r0, [pc, #32]	@ (800bdac <prvPortStartFirstTask+0x24>)
 800bd8a:	6800      	ldr	r0, [r0, #0]
 800bd8c:	6800      	ldr	r0, [r0, #0]
 800bd8e:	f380 8808 	msr	MSP, r0
 800bd92:	f04f 0000 	mov.w	r0, #0
 800bd96:	f380 8814 	msr	CONTROL, r0
 800bd9a:	b662      	cpsie	i
 800bd9c:	b661      	cpsie	f
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	df00      	svc	0
 800bda8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bdaa:	bf00      	nop
 800bdac:	e000ed08 	.word	0xe000ed08

0800bdb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bdb6:	4b37      	ldr	r3, [pc, #220]	@ (800be94 <xPortStartScheduler+0xe4>)
 800bdb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	22ff      	movs	r2, #255	@ 0xff
 800bdc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bdd0:	78fb      	ldrb	r3, [r7, #3]
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	4b2f      	ldr	r3, [pc, #188]	@ (800be98 <xPortStartScheduler+0xe8>)
 800bddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bdde:	4b2f      	ldr	r3, [pc, #188]	@ (800be9c <xPortStartScheduler+0xec>)
 800bde0:	2207      	movs	r2, #7
 800bde2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bde4:	e009      	b.n	800bdfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bde6:	4b2d      	ldr	r3, [pc, #180]	@ (800be9c <xPortStartScheduler+0xec>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	4a2b      	ldr	r2, [pc, #172]	@ (800be9c <xPortStartScheduler+0xec>)
 800bdee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bdf0:	78fb      	ldrb	r3, [r7, #3]
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	005b      	lsls	r3, r3, #1
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdfa:	78fb      	ldrb	r3, [r7, #3]
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be02:	2b80      	cmp	r3, #128	@ 0x80
 800be04:	d0ef      	beq.n	800bde6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be06:	4b25      	ldr	r3, [pc, #148]	@ (800be9c <xPortStartScheduler+0xec>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f1c3 0307 	rsb	r3, r3, #7
 800be0e:	2b04      	cmp	r3, #4
 800be10:	d00d      	beq.n	800be2e <xPortStartScheduler+0x7e>
	__asm volatile
 800be12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be16:	b672      	cpsid	i
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	b662      	cpsie	i
 800be26:	60bb      	str	r3, [r7, #8]
}
 800be28:	bf00      	nop
 800be2a:	bf00      	nop
 800be2c:	e7fd      	b.n	800be2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be2e:	4b1b      	ldr	r3, [pc, #108]	@ (800be9c <xPortStartScheduler+0xec>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	021b      	lsls	r3, r3, #8
 800be34:	4a19      	ldr	r2, [pc, #100]	@ (800be9c <xPortStartScheduler+0xec>)
 800be36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be38:	4b18      	ldr	r3, [pc, #96]	@ (800be9c <xPortStartScheduler+0xec>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800be40:	4a16      	ldr	r2, [pc, #88]	@ (800be9c <xPortStartScheduler+0xec>)
 800be42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	b2da      	uxtb	r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be4c:	4b14      	ldr	r3, [pc, #80]	@ (800bea0 <xPortStartScheduler+0xf0>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a13      	ldr	r2, [pc, #76]	@ (800bea0 <xPortStartScheduler+0xf0>)
 800be52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800be56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be58:	4b11      	ldr	r3, [pc, #68]	@ (800bea0 <xPortStartScheduler+0xf0>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a10      	ldr	r2, [pc, #64]	@ (800bea0 <xPortStartScheduler+0xf0>)
 800be5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800be62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be64:	f000 f8dc 	bl	800c020 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be68:	4b0e      	ldr	r3, [pc, #56]	@ (800bea4 <xPortStartScheduler+0xf4>)
 800be6a:	2200      	movs	r2, #0
 800be6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be6e:	f000 f8fb 	bl	800c068 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be72:	4b0d      	ldr	r3, [pc, #52]	@ (800bea8 <xPortStartScheduler+0xf8>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a0c      	ldr	r2, [pc, #48]	@ (800bea8 <xPortStartScheduler+0xf8>)
 800be78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800be7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be7e:	f7ff ff83 	bl	800bd88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be82:	f7fe fddd 	bl	800aa40 <vTaskSwitchContext>
	prvTaskExitError();
 800be86:	f7ff ff35 	bl	800bcf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	e000e400 	.word	0xe000e400
 800be98:	2000b234 	.word	0x2000b234
 800be9c:	2000b238 	.word	0x2000b238
 800bea0:	e000ed20 	.word	0xe000ed20
 800bea4:	20000020 	.word	0x20000020
 800bea8:	e000ef34 	.word	0xe000ef34

0800beac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb6:	b672      	cpsid	i
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	b662      	cpsie	i
 800bec6:	607b      	str	r3, [r7, #4]
}
 800bec8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800beca:	4b11      	ldr	r3, [pc, #68]	@ (800bf10 <vPortEnterCritical+0x64>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	3301      	adds	r3, #1
 800bed0:	4a0f      	ldr	r2, [pc, #60]	@ (800bf10 <vPortEnterCritical+0x64>)
 800bed2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bed4:	4b0e      	ldr	r3, [pc, #56]	@ (800bf10 <vPortEnterCritical+0x64>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d112      	bne.n	800bf02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bedc:	4b0d      	ldr	r3, [pc, #52]	@ (800bf14 <vPortEnterCritical+0x68>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00d      	beq.n	800bf02 <vPortEnterCritical+0x56>
	__asm volatile
 800bee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beea:	b672      	cpsid	i
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	b662      	cpsie	i
 800befa:	603b      	str	r3, [r7, #0]
}
 800befc:	bf00      	nop
 800befe:	bf00      	nop
 800bf00:	e7fd      	b.n	800befe <vPortEnterCritical+0x52>
	}
}
 800bf02:	bf00      	nop
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	20000020 	.word	0x20000020
 800bf14:	e000ed04 	.word	0xe000ed04

0800bf18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf1e:	4b13      	ldr	r3, [pc, #76]	@ (800bf6c <vPortExitCritical+0x54>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10d      	bne.n	800bf42 <vPortExitCritical+0x2a>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf2a:	b672      	cpsid	i
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	b662      	cpsie	i
 800bf3a:	607b      	str	r3, [r7, #4]
}
 800bf3c:	bf00      	nop
 800bf3e:	bf00      	nop
 800bf40:	e7fd      	b.n	800bf3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800bf42:	4b0a      	ldr	r3, [pc, #40]	@ (800bf6c <vPortExitCritical+0x54>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	3b01      	subs	r3, #1
 800bf48:	4a08      	ldr	r2, [pc, #32]	@ (800bf6c <vPortExitCritical+0x54>)
 800bf4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf4c:	4b07      	ldr	r3, [pc, #28]	@ (800bf6c <vPortExitCritical+0x54>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d105      	bne.n	800bf60 <vPortExitCritical+0x48>
 800bf54:	2300      	movs	r3, #0
 800bf56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	f383 8811 	msr	BASEPRI, r3
}
 800bf5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	20000020 	.word	0x20000020

0800bf70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf70:	f3ef 8009 	mrs	r0, PSP
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	4b15      	ldr	r3, [pc, #84]	@ (800bfd0 <pxCurrentTCBConst>)
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	f01e 0f10 	tst.w	lr, #16
 800bf80:	bf08      	it	eq
 800bf82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8a:	6010      	str	r0, [r2, #0]
 800bf8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bf94:	b672      	cpsid	i
 800bf96:	f380 8811 	msr	BASEPRI, r0
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	b662      	cpsie	i
 800bfa4:	f7fe fd4c 	bl	800aa40 <vTaskSwitchContext>
 800bfa8:	f04f 0000 	mov.w	r0, #0
 800bfac:	f380 8811 	msr	BASEPRI, r0
 800bfb0:	bc09      	pop	{r0, r3}
 800bfb2:	6819      	ldr	r1, [r3, #0]
 800bfb4:	6808      	ldr	r0, [r1, #0]
 800bfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfba:	f01e 0f10 	tst.w	lr, #16
 800bfbe:	bf08      	it	eq
 800bfc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bfc4:	f380 8809 	msr	PSP, r0
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop

0800bfd0 <pxCurrentTCBConst>:
 800bfd0:	2000ac08 	.word	0x2000ac08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bfd4:	bf00      	nop
 800bfd6:	bf00      	nop

0800bfd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
	__asm volatile
 800bfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe2:	b672      	cpsid	i
 800bfe4:	f383 8811 	msr	BASEPRI, r3
 800bfe8:	f3bf 8f6f 	isb	sy
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	b662      	cpsie	i
 800bff2:	607b      	str	r3, [r7, #4]
}
 800bff4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bff6:	f7fe fc67 	bl	800a8c8 <xTaskIncrementTick>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d003      	beq.n	800c008 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c000:	4b06      	ldr	r3, [pc, #24]	@ (800c01c <SysTick_Handler+0x44>)
 800c002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	2300      	movs	r3, #0
 800c00a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	f383 8811 	msr	BASEPRI, r3
}
 800c012:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c014:	bf00      	nop
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	e000ed04 	.word	0xe000ed04

0800c020 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c020:	b480      	push	{r7}
 800c022:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c024:	4b0b      	ldr	r3, [pc, #44]	@ (800c054 <vPortSetupTimerInterrupt+0x34>)
 800c026:	2200      	movs	r2, #0
 800c028:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c02a:	4b0b      	ldr	r3, [pc, #44]	@ (800c058 <vPortSetupTimerInterrupt+0x38>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c030:	4b0a      	ldr	r3, [pc, #40]	@ (800c05c <vPortSetupTimerInterrupt+0x3c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a0a      	ldr	r2, [pc, #40]	@ (800c060 <vPortSetupTimerInterrupt+0x40>)
 800c036:	fba2 2303 	umull	r2, r3, r2, r3
 800c03a:	099b      	lsrs	r3, r3, #6
 800c03c:	4a09      	ldr	r2, [pc, #36]	@ (800c064 <vPortSetupTimerInterrupt+0x44>)
 800c03e:	3b01      	subs	r3, #1
 800c040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c042:	4b04      	ldr	r3, [pc, #16]	@ (800c054 <vPortSetupTimerInterrupt+0x34>)
 800c044:	2207      	movs	r2, #7
 800c046:	601a      	str	r2, [r3, #0]
}
 800c048:	bf00      	nop
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	e000e010 	.word	0xe000e010
 800c058:	e000e018 	.word	0xe000e018
 800c05c:	20000000 	.word	0x20000000
 800c060:	10624dd3 	.word	0x10624dd3
 800c064:	e000e014 	.word	0xe000e014

0800c068 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c068:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c078 <vPortEnableVFP+0x10>
 800c06c:	6801      	ldr	r1, [r0, #0]
 800c06e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c072:	6001      	str	r1, [r0, #0]
 800c074:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c076:	bf00      	nop
 800c078:	e000ed88 	.word	0xe000ed88

0800c07c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c082:	f3ef 8305 	mrs	r3, IPSR
 800c086:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2b0f      	cmp	r3, #15
 800c08c:	d917      	bls.n	800c0be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c08e:	4a1a      	ldr	r2, [pc, #104]	@ (800c0f8 <vPortValidateInterruptPriority+0x7c>)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	4413      	add	r3, r2
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c098:	4b18      	ldr	r3, [pc, #96]	@ (800c0fc <vPortValidateInterruptPriority+0x80>)
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	7afa      	ldrb	r2, [r7, #11]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d20d      	bcs.n	800c0be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a6:	b672      	cpsid	i
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	b662      	cpsie	i
 800c0b6:	607b      	str	r3, [r7, #4]
}
 800c0b8:	bf00      	nop
 800c0ba:	bf00      	nop
 800c0bc:	e7fd      	b.n	800c0ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c0be:	4b10      	ldr	r3, [pc, #64]	@ (800c100 <vPortValidateInterruptPriority+0x84>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c0c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c104 <vPortValidateInterruptPriority+0x88>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d90d      	bls.n	800c0ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d2:	b672      	cpsid	i
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	b662      	cpsie	i
 800c0e2:	603b      	str	r3, [r7, #0]
}
 800c0e4:	bf00      	nop
 800c0e6:	bf00      	nop
 800c0e8:	e7fd      	b.n	800c0e6 <vPortValidateInterruptPriority+0x6a>
	}
 800c0ea:	bf00      	nop
 800c0ec:	3714      	adds	r7, #20
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop
 800c0f8:	e000e3f0 	.word	0xe000e3f0
 800c0fc:	2000b234 	.word	0x2000b234
 800c100:	e000ed0c 	.word	0xe000ed0c
 800c104:	2000b238 	.word	0x2000b238

0800c108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08a      	sub	sp, #40	@ 0x28
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c110:	2300      	movs	r3, #0
 800c112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c114:	f7fe fb08 	bl	800a728 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c118:	4b5d      	ldr	r3, [pc, #372]	@ (800c290 <pvPortMalloc+0x188>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c120:	f000 f920 	bl	800c364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c124:	4b5b      	ldr	r3, [pc, #364]	@ (800c294 <pvPortMalloc+0x18c>)
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4013      	ands	r3, r2
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f040 8094 	bne.w	800c25a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d020      	beq.n	800c17a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800c138:	2208      	movs	r2, #8
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4413      	add	r3, r2
 800c13e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	2b00      	cmp	r3, #0
 800c148:	d017      	beq.n	800c17a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f023 0307 	bic.w	r3, r3, #7
 800c150:	3308      	adds	r3, #8
 800c152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f003 0307 	and.w	r3, r3, #7
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00d      	beq.n	800c17a <pvPortMalloc+0x72>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c162:	b672      	cpsid	i
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	b662      	cpsie	i
 800c172:	617b      	str	r3, [r7, #20]
}
 800c174:	bf00      	nop
 800c176:	bf00      	nop
 800c178:	e7fd      	b.n	800c176 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d06c      	beq.n	800c25a <pvPortMalloc+0x152>
 800c180:	4b45      	ldr	r3, [pc, #276]	@ (800c298 <pvPortMalloc+0x190>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	429a      	cmp	r2, r3
 800c188:	d867      	bhi.n	800c25a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c18a:	4b44      	ldr	r3, [pc, #272]	@ (800c29c <pvPortMalloc+0x194>)
 800c18c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c18e:	4b43      	ldr	r3, [pc, #268]	@ (800c29c <pvPortMalloc+0x194>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c194:	e004      	b.n	800c1a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800c196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d903      	bls.n	800c1b2 <pvPortMalloc+0xaa>
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1f1      	bne.n	800c196 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c1b2:	4b37      	ldr	r3, [pc, #220]	@ (800c290 <pvPortMalloc+0x188>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d04e      	beq.n	800c25a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c1bc:	6a3b      	ldr	r3, [r7, #32]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2208      	movs	r2, #8
 800c1c2:	4413      	add	r3, r2
 800c1c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	1ad2      	subs	r2, r2, r3
 800c1d6:	2308      	movs	r3, #8
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d922      	bls.n	800c224 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	f003 0307 	and.w	r3, r3, #7
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00d      	beq.n	800c20c <pvPortMalloc+0x104>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f4:	b672      	cpsid	i
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	b662      	cpsie	i
 800c204:	613b      	str	r3, [r7, #16]
}
 800c206:	bf00      	nop
 800c208:	bf00      	nop
 800c20a:	e7fd      	b.n	800c208 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	685a      	ldr	r2, [r3, #4]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	1ad2      	subs	r2, r2, r3
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c21e:	69b8      	ldr	r0, [r7, #24]
 800c220:	f000 f902 	bl	800c428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c224:	4b1c      	ldr	r3, [pc, #112]	@ (800c298 <pvPortMalloc+0x190>)
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	4a1a      	ldr	r2, [pc, #104]	@ (800c298 <pvPortMalloc+0x190>)
 800c230:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c232:	4b19      	ldr	r3, [pc, #100]	@ (800c298 <pvPortMalloc+0x190>)
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	4b1a      	ldr	r3, [pc, #104]	@ (800c2a0 <pvPortMalloc+0x198>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d203      	bcs.n	800c246 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c23e:	4b16      	ldr	r3, [pc, #88]	@ (800c298 <pvPortMalloc+0x190>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a17      	ldr	r2, [pc, #92]	@ (800c2a0 <pvPortMalloc+0x198>)
 800c244:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c248:	685a      	ldr	r2, [r3, #4]
 800c24a:	4b12      	ldr	r3, [pc, #72]	@ (800c294 <pvPortMalloc+0x18c>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	431a      	orrs	r2, r3
 800c250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c252:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c256:	2200      	movs	r2, #0
 800c258:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c25a:	f7fe fa73 	bl	800a744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	f003 0307 	and.w	r3, r3, #7
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00d      	beq.n	800c284 <pvPortMalloc+0x17c>
	__asm volatile
 800c268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26c:	b672      	cpsid	i
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	b662      	cpsie	i
 800c27c:	60fb      	str	r3, [r7, #12]
}
 800c27e:	bf00      	nop
 800c280:	bf00      	nop
 800c282:	e7fd      	b.n	800c280 <pvPortMalloc+0x178>
	return pvReturn;
 800c284:	69fb      	ldr	r3, [r7, #28]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3728      	adds	r7, #40	@ 0x28
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	20024244 	.word	0x20024244
 800c294:	20024250 	.word	0x20024250
 800c298:	20024248 	.word	0x20024248
 800c29c:	2002423c 	.word	0x2002423c
 800c2a0:	2002424c 	.word	0x2002424c

0800c2a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b086      	sub	sp, #24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d04e      	beq.n	800c354 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c2b6:	2308      	movs	r3, #8
 800c2b8:	425b      	negs	r3, r3
 800c2ba:	697a      	ldr	r2, [r7, #20]
 800c2bc:	4413      	add	r3, r2
 800c2be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	4b24      	ldr	r3, [pc, #144]	@ (800c35c <vPortFree+0xb8>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10d      	bne.n	800c2ee <vPortFree+0x4a>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d6:	b672      	cpsid	i
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	b662      	cpsie	i
 800c2e6:	60fb      	str	r3, [r7, #12]
}
 800c2e8:	bf00      	nop
 800c2ea:	bf00      	nop
 800c2ec:	e7fd      	b.n	800c2ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00d      	beq.n	800c312 <vPortFree+0x6e>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2fa:	b672      	cpsid	i
 800c2fc:	f383 8811 	msr	BASEPRI, r3
 800c300:	f3bf 8f6f 	isb	sy
 800c304:	f3bf 8f4f 	dsb	sy
 800c308:	b662      	cpsie	i
 800c30a:	60bb      	str	r3, [r7, #8]
}
 800c30c:	bf00      	nop
 800c30e:	bf00      	nop
 800c310:	e7fd      	b.n	800c30e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	685a      	ldr	r2, [r3, #4]
 800c316:	4b11      	ldr	r3, [pc, #68]	@ (800c35c <vPortFree+0xb8>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4013      	ands	r3, r2
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d019      	beq.n	800c354 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d115      	bne.n	800c354 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	4b0b      	ldr	r3, [pc, #44]	@ (800c35c <vPortFree+0xb8>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	43db      	mvns	r3, r3
 800c332:	401a      	ands	r2, r3
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c338:	f7fe f9f6 	bl	800a728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	4b07      	ldr	r3, [pc, #28]	@ (800c360 <vPortFree+0xbc>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4413      	add	r3, r2
 800c346:	4a06      	ldr	r2, [pc, #24]	@ (800c360 <vPortFree+0xbc>)
 800c348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c34a:	6938      	ldr	r0, [r7, #16]
 800c34c:	f000 f86c 	bl	800c428 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c350:	f7fe f9f8 	bl	800a744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c354:	bf00      	nop
 800c356:	3718      	adds	r7, #24
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	20024250 	.word	0x20024250
 800c360:	20024248 	.word	0x20024248

0800c364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c36a:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800c36e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c370:	4b27      	ldr	r3, [pc, #156]	@ (800c410 <prvHeapInit+0xac>)
 800c372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f003 0307 	and.w	r3, r3, #7
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00c      	beq.n	800c398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3307      	adds	r3, #7
 800c382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f023 0307 	bic.w	r3, r3, #7
 800c38a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	4a1f      	ldr	r2, [pc, #124]	@ (800c410 <prvHeapInit+0xac>)
 800c394:	4413      	add	r3, r2
 800c396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c39c:	4a1d      	ldr	r2, [pc, #116]	@ (800c414 <prvHeapInit+0xb0>)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c3a2:	4b1c      	ldr	r3, [pc, #112]	@ (800c414 <prvHeapInit+0xb0>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c3b0:	2208      	movs	r2, #8
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	1a9b      	subs	r3, r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f023 0307 	bic.w	r3, r3, #7
 800c3be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	4a15      	ldr	r2, [pc, #84]	@ (800c418 <prvHeapInit+0xb4>)
 800c3c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c3c6:	4b14      	ldr	r3, [pc, #80]	@ (800c418 <prvHeapInit+0xb4>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c3ce:	4b12      	ldr	r3, [pc, #72]	@ (800c418 <prvHeapInit+0xb4>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	1ad2      	subs	r2, r2, r3
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c418 <prvHeapInit+0xb4>)
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c41c <prvHeapInit+0xb8>)
 800c3f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	4a09      	ldr	r2, [pc, #36]	@ (800c420 <prvHeapInit+0xbc>)
 800c3fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3fc:	4b09      	ldr	r3, [pc, #36]	@ (800c424 <prvHeapInit+0xc0>)
 800c3fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c402:	601a      	str	r2, [r3, #0]
}
 800c404:	bf00      	nop
 800c406:	3714      	adds	r7, #20
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	2000b23c 	.word	0x2000b23c
 800c414:	2002423c 	.word	0x2002423c
 800c418:	20024244 	.word	0x20024244
 800c41c:	2002424c 	.word	0x2002424c
 800c420:	20024248 	.word	0x20024248
 800c424:	20024250 	.word	0x20024250

0800c428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c430:	4b28      	ldr	r3, [pc, #160]	@ (800c4d4 <prvInsertBlockIntoFreeList+0xac>)
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	e002      	b.n	800c43c <prvInsertBlockIntoFreeList+0x14>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	60fb      	str	r3, [r7, #12]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	429a      	cmp	r2, r3
 800c444:	d8f7      	bhi.n	800c436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	4413      	add	r3, r2
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	429a      	cmp	r2, r3
 800c456:	d108      	bne.n	800c46a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	441a      	add	r2, r3
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	441a      	add	r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d118      	bne.n	800c4b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	4b15      	ldr	r3, [pc, #84]	@ (800c4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	429a      	cmp	r2, r3
 800c488:	d00d      	beq.n	800c4a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	685a      	ldr	r2, [r3, #4]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	441a      	add	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	601a      	str	r2, [r3, #0]
 800c4a4:	e008      	b.n	800c4b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c4d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	e003      	b.n	800c4b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d002      	beq.n	800c4c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4c6:	bf00      	nop
 800c4c8:	3714      	adds	r7, #20
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	2002423c 	.word	0x2002423c
 800c4d8:	20024244 	.word	0x20024244

0800c4dc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c4e6:	f007 fabd 	bl	8013a64 <sys_timeouts_sleeptime>
 800c4ea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f2:	d10b      	bne.n	800c50c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c4f4:	4813      	ldr	r0, [pc, #76]	@ (800c544 <tcpip_timeouts_mbox_fetch+0x68>)
 800c4f6:	f00a f99c 	bl	8016832 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f00a f924 	bl	801674c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c504:	480f      	ldr	r0, [pc, #60]	@ (800c544 <tcpip_timeouts_mbox_fetch+0x68>)
 800c506:	f00a f985 	bl	8016814 <sys_mutex_lock>
    return;
 800c50a:	e018      	b.n	800c53e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d102      	bne.n	800c518 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c512:	f007 fa6d 	bl	80139f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c516:	e7e6      	b.n	800c4e6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c518:	480a      	ldr	r0, [pc, #40]	@ (800c544 <tcpip_timeouts_mbox_fetch+0x68>)
 800c51a:	f00a f98a 	bl	8016832 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	6839      	ldr	r1, [r7, #0]
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f00a f912 	bl	801674c <sys_arch_mbox_fetch>
 800c528:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c52a:	4806      	ldr	r0, [pc, #24]	@ (800c544 <tcpip_timeouts_mbox_fetch+0x68>)
 800c52c:	f00a f972 	bl	8016814 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c536:	d102      	bne.n	800c53e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c538:	f007 fa5a 	bl	80139f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c53c:	e7d3      	b.n	800c4e6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	20024260 	.word	0x20024260

0800c548 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c550:	4810      	ldr	r0, [pc, #64]	@ (800c594 <tcpip_thread+0x4c>)
 800c552:	f00a f95f 	bl	8016814 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c556:	4b10      	ldr	r3, [pc, #64]	@ (800c598 <tcpip_thread+0x50>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d005      	beq.n	800c56a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c55e:	4b0e      	ldr	r3, [pc, #56]	@ (800c598 <tcpip_thread+0x50>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a0e      	ldr	r2, [pc, #56]	@ (800c59c <tcpip_thread+0x54>)
 800c564:	6812      	ldr	r2, [r2, #0]
 800c566:	4610      	mov	r0, r2
 800c568:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c56a:	f107 030c 	add.w	r3, r7, #12
 800c56e:	4619      	mov	r1, r3
 800c570:	480b      	ldr	r0, [pc, #44]	@ (800c5a0 <tcpip_thread+0x58>)
 800c572:	f7ff ffb3 	bl	800c4dc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d106      	bne.n	800c58a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c57c:	4b09      	ldr	r3, [pc, #36]	@ (800c5a4 <tcpip_thread+0x5c>)
 800c57e:	2291      	movs	r2, #145	@ 0x91
 800c580:	4909      	ldr	r1, [pc, #36]	@ (800c5a8 <tcpip_thread+0x60>)
 800c582:	480a      	ldr	r0, [pc, #40]	@ (800c5ac <tcpip_thread+0x64>)
 800c584:	f00a fc8a 	bl	8016e9c <iprintf>
      continue;
 800c588:	e003      	b.n	800c592 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 f80f 	bl	800c5b0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c592:	e7ea      	b.n	800c56a <tcpip_thread+0x22>
 800c594:	20024260 	.word	0x20024260
 800c598:	20024254 	.word	0x20024254
 800c59c:	20024258 	.word	0x20024258
 800c5a0:	2002425c 	.word	0x2002425c
 800c5a4:	08018144 	.word	0x08018144
 800c5a8:	08018174 	.word	0x08018174
 800c5ac:	08018194 	.word	0x08018194

0800c5b0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	d026      	beq.n	800c60e <tcpip_thread_handle_msg+0x5e>
 800c5c0:	2b02      	cmp	r3, #2
 800c5c2:	dc2b      	bgt.n	800c61c <tcpip_thread_handle_msg+0x6c>
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <tcpip_thread_handle_msg+0x1e>
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d015      	beq.n	800c5f8 <tcpip_thread_handle_msg+0x48>
 800c5cc:	e026      	b.n	800c61c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	6850      	ldr	r0, [r2, #4]
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	6892      	ldr	r2, [r2, #8]
 800c5da:	4611      	mov	r1, r2
 800c5dc:	4798      	blx	r3
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d004      	beq.n	800c5ee <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f001 fd07 	bl	800dffc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c5ee:	6879      	ldr	r1, [r7, #4]
 800c5f0:	2009      	movs	r0, #9
 800c5f2:	f000 fe5f 	bl	800d2b4 <memp_free>
      break;
 800c5f6:	e018      	b.n	800c62a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	6892      	ldr	r2, [r2, #8]
 800c600:	4610      	mov	r0, r2
 800c602:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c604:	6879      	ldr	r1, [r7, #4]
 800c606:	2008      	movs	r0, #8
 800c608:	f000 fe54 	bl	800d2b4 <memp_free>
      break;
 800c60c:	e00d      	b.n	800c62a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	6892      	ldr	r2, [r2, #8]
 800c616:	4610      	mov	r0, r2
 800c618:	4798      	blx	r3
      break;
 800c61a:	e006      	b.n	800c62a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c61c:	4b05      	ldr	r3, [pc, #20]	@ (800c634 <tcpip_thread_handle_msg+0x84>)
 800c61e:	22cf      	movs	r2, #207	@ 0xcf
 800c620:	4905      	ldr	r1, [pc, #20]	@ (800c638 <tcpip_thread_handle_msg+0x88>)
 800c622:	4806      	ldr	r0, [pc, #24]	@ (800c63c <tcpip_thread_handle_msg+0x8c>)
 800c624:	f00a fc3a 	bl	8016e9c <iprintf>
      break;
 800c628:	bf00      	nop
  }
}
 800c62a:	bf00      	nop
 800c62c:	3708      	adds	r7, #8
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	08018144 	.word	0x08018144
 800c638:	08018174 	.word	0x08018174
 800c63c:	08018194 	.word	0x08018194

0800c640 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c64c:	481a      	ldr	r0, [pc, #104]	@ (800c6b8 <tcpip_inpkt+0x78>)
 800c64e:	f00a f8ae 	bl	80167ae <sys_mbox_valid>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d105      	bne.n	800c664 <tcpip_inpkt+0x24>
 800c658:	4b18      	ldr	r3, [pc, #96]	@ (800c6bc <tcpip_inpkt+0x7c>)
 800c65a:	22fc      	movs	r2, #252	@ 0xfc
 800c65c:	4918      	ldr	r1, [pc, #96]	@ (800c6c0 <tcpip_inpkt+0x80>)
 800c65e:	4819      	ldr	r0, [pc, #100]	@ (800c6c4 <tcpip_inpkt+0x84>)
 800c660:	f00a fc1c 	bl	8016e9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c664:	2009      	movs	r0, #9
 800c666:	f000 fdaf 	bl	800d1c8 <memp_malloc>
 800c66a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d102      	bne.n	800c678 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c672:	f04f 33ff 	mov.w	r3, #4294967295
 800c676:	e01a      	b.n	800c6ae <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	2200      	movs	r2, #0
 800c67c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c690:	6979      	ldr	r1, [r7, #20]
 800c692:	4809      	ldr	r0, [pc, #36]	@ (800c6b8 <tcpip_inpkt+0x78>)
 800c694:	f00a f840 	bl	8016718 <sys_mbox_trypost>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d006      	beq.n	800c6ac <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c69e:	6979      	ldr	r1, [r7, #20]
 800c6a0:	2009      	movs	r0, #9
 800c6a2:	f000 fe07 	bl	800d2b4 <memp_free>
    return ERR_MEM;
 800c6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6aa:	e000      	b.n	800c6ae <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c6ac:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3718      	adds	r7, #24
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	2002425c 	.word	0x2002425c
 800c6bc:	08018144 	.word	0x08018144
 800c6c0:	080181bc 	.word	0x080181bc
 800c6c4:	08018194 	.word	0x08018194

0800c6c8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6d8:	f003 0318 	and.w	r3, r3, #24
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d006      	beq.n	800c6ee <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c6e0:	4a08      	ldr	r2, [pc, #32]	@ (800c704 <tcpip_input+0x3c>)
 800c6e2:	6839      	ldr	r1, [r7, #0]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff ffab 	bl	800c640 <tcpip_inpkt>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	e005      	b.n	800c6fa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c6ee:	4a06      	ldr	r2, [pc, #24]	@ (800c708 <tcpip_input+0x40>)
 800c6f0:	6839      	ldr	r1, [r7, #0]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7ff ffa4 	bl	800c640 <tcpip_inpkt>
 800c6f8:	4603      	mov	r3, r0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	08016539 	.word	0x08016539
 800c708:	08015321 	.word	0x08015321

0800c70c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c716:	4819      	ldr	r0, [pc, #100]	@ (800c77c <tcpip_try_callback+0x70>)
 800c718:	f00a f849 	bl	80167ae <sys_mbox_valid>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d106      	bne.n	800c730 <tcpip_try_callback+0x24>
 800c722:	4b17      	ldr	r3, [pc, #92]	@ (800c780 <tcpip_try_callback+0x74>)
 800c724:	f240 125d 	movw	r2, #349	@ 0x15d
 800c728:	4916      	ldr	r1, [pc, #88]	@ (800c784 <tcpip_try_callback+0x78>)
 800c72a:	4817      	ldr	r0, [pc, #92]	@ (800c788 <tcpip_try_callback+0x7c>)
 800c72c:	f00a fbb6 	bl	8016e9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c730:	2008      	movs	r0, #8
 800c732:	f000 fd49 	bl	800d1c8 <memp_malloc>
 800c736:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d102      	bne.n	800c744 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c73e:	f04f 33ff 	mov.w	r3, #4294967295
 800c742:	e017      	b.n	800c774 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2201      	movs	r2, #1
 800c748:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c756:	68f9      	ldr	r1, [r7, #12]
 800c758:	4808      	ldr	r0, [pc, #32]	@ (800c77c <tcpip_try_callback+0x70>)
 800c75a:	f009 ffdd 	bl	8016718 <sys_mbox_trypost>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d006      	beq.n	800c772 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c764:	68f9      	ldr	r1, [r7, #12]
 800c766:	2008      	movs	r0, #8
 800c768:	f000 fda4 	bl	800d2b4 <memp_free>
    return ERR_MEM;
 800c76c:	f04f 33ff 	mov.w	r3, #4294967295
 800c770:	e000      	b.n	800c774 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	2002425c 	.word	0x2002425c
 800c780:	08018144 	.word	0x08018144
 800c784:	080181bc 	.word	0x080181bc
 800c788:	08018194 	.word	0x08018194

0800c78c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af02      	add	r7, sp, #8
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c796:	f000 f872 	bl	800c87e <lwip_init>

  tcpip_init_done = initfunc;
 800c79a:	4a17      	ldr	r2, [pc, #92]	@ (800c7f8 <tcpip_init+0x6c>)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c7a0:	4a16      	ldr	r2, [pc, #88]	@ (800c7fc <tcpip_init+0x70>)
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c7a6:	2106      	movs	r1, #6
 800c7a8:	4815      	ldr	r0, [pc, #84]	@ (800c800 <tcpip_init+0x74>)
 800c7aa:	f009 ff9b 	bl	80166e4 <sys_mbox_new>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d006      	beq.n	800c7c2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c7b4:	4b13      	ldr	r3, [pc, #76]	@ (800c804 <tcpip_init+0x78>)
 800c7b6:	f240 2261 	movw	r2, #609	@ 0x261
 800c7ba:	4913      	ldr	r1, [pc, #76]	@ (800c808 <tcpip_init+0x7c>)
 800c7bc:	4813      	ldr	r0, [pc, #76]	@ (800c80c <tcpip_init+0x80>)
 800c7be:	f00a fb6d 	bl	8016e9c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c7c2:	4813      	ldr	r0, [pc, #76]	@ (800c810 <tcpip_init+0x84>)
 800c7c4:	f00a f810 	bl	80167e8 <sys_mutex_new>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d006      	beq.n	800c7dc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c804 <tcpip_init+0x78>)
 800c7d0:	f240 2265 	movw	r2, #613	@ 0x265
 800c7d4:	490f      	ldr	r1, [pc, #60]	@ (800c814 <tcpip_init+0x88>)
 800c7d6:	480d      	ldr	r0, [pc, #52]	@ (800c80c <tcpip_init+0x80>)
 800c7d8:	f00a fb60 	bl	8016e9c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c7dc:	2318      	movs	r3, #24
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	490c      	ldr	r1, [pc, #48]	@ (800c818 <tcpip_init+0x8c>)
 800c7e8:	480c      	ldr	r0, [pc, #48]	@ (800c81c <tcpip_init+0x90>)
 800c7ea:	f00a f82f 	bl	801684c <sys_thread_new>
}
 800c7ee:	bf00      	nop
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20024254 	.word	0x20024254
 800c7fc:	20024258 	.word	0x20024258
 800c800:	2002425c 	.word	0x2002425c
 800c804:	08018144 	.word	0x08018144
 800c808:	080181cc 	.word	0x080181cc
 800c80c:	08018194 	.word	0x08018194
 800c810:	20024260 	.word	0x20024260
 800c814:	080181f0 	.word	0x080181f0
 800c818:	0800c549 	.word	0x0800c549
 800c81c:	08018214 	.word	0x08018214

0800c820 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	4603      	mov	r3, r0
 800c828:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c82a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c82e:	021b      	lsls	r3, r3, #8
 800c830:	b21a      	sxth	r2, r3
 800c832:	88fb      	ldrh	r3, [r7, #6]
 800c834:	0a1b      	lsrs	r3, r3, #8
 800c836:	b29b      	uxth	r3, r3
 800c838:	b21b      	sxth	r3, r3
 800c83a:	4313      	orrs	r3, r2
 800c83c:	b21b      	sxth	r3, r3
 800c83e:	b29b      	uxth	r3, r3
}
 800c840:	4618      	mov	r0, r3
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	061a      	lsls	r2, r3, #24
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	021b      	lsls	r3, r3, #8
 800c85c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	0a1b      	lsrs	r3, r3, #8
 800c866:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c86a:	431a      	orrs	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	0e1b      	lsrs	r3, r3, #24
 800c870:	4313      	orrs	r3, r2
}
 800c872:	4618      	mov	r0, r3
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr

0800c87e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b082      	sub	sp, #8
 800c882:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c888:	f009 ffa2 	bl	80167d0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c88c:	f000 f8d4 	bl	800ca38 <mem_init>
  memp_init();
 800c890:	f000 fc2c 	bl	800d0ec <memp_init>
  pbuf_init();
  netif_init();
 800c894:	f000 fd38 	bl	800d308 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c898:	f007 f91c 	bl	8013ad4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c89c:	f001 fe48 	bl	800e530 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c8a0:	f007 f85e 	bl	8013960 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c8b6:	4b05      	ldr	r3, [pc, #20]	@ (800c8cc <ptr_to_mem+0x20>)
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	88fb      	ldrh	r3, [r7, #6]
 800c8bc:	4413      	add	r3, r2
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop
 800c8cc:	2002427c 	.word	0x2002427c

0800c8d0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c8d8:	4b05      	ldr	r3, [pc, #20]	@ (800c8f0 <mem_to_ptr+0x20>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	b29b      	uxth	r3, r3
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	370c      	adds	r7, #12
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	2002427c 	.word	0x2002427c

0800c8f4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c8f4:	b590      	push	{r4, r7, lr}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c8fc:	4b45      	ldr	r3, [pc, #276]	@ (800ca14 <plug_holes+0x120>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	429a      	cmp	r2, r3
 800c904:	d206      	bcs.n	800c914 <plug_holes+0x20>
 800c906:	4b44      	ldr	r3, [pc, #272]	@ (800ca18 <plug_holes+0x124>)
 800c908:	f240 12df 	movw	r2, #479	@ 0x1df
 800c90c:	4943      	ldr	r1, [pc, #268]	@ (800ca1c <plug_holes+0x128>)
 800c90e:	4844      	ldr	r0, [pc, #272]	@ (800ca20 <plug_holes+0x12c>)
 800c910:	f00a fac4 	bl	8016e9c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c914:	4b43      	ldr	r3, [pc, #268]	@ (800ca24 <plug_holes+0x130>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d306      	bcc.n	800c92c <plug_holes+0x38>
 800c91e:	4b3e      	ldr	r3, [pc, #248]	@ (800ca18 <plug_holes+0x124>)
 800c920:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c924:	4940      	ldr	r1, [pc, #256]	@ (800ca28 <plug_holes+0x134>)
 800c926:	483e      	ldr	r0, [pc, #248]	@ (800ca20 <plug_holes+0x12c>)
 800c928:	f00a fab8 	bl	8016e9c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	791b      	ldrb	r3, [r3, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d006      	beq.n	800c942 <plug_holes+0x4e>
 800c934:	4b38      	ldr	r3, [pc, #224]	@ (800ca18 <plug_holes+0x124>)
 800c936:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c93a:	493c      	ldr	r1, [pc, #240]	@ (800ca2c <plug_holes+0x138>)
 800c93c:	4838      	ldr	r0, [pc, #224]	@ (800ca20 <plug_holes+0x12c>)
 800c93e:	f00a faad 	bl	8016e9c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	881b      	ldrh	r3, [r3, #0]
 800c946:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c94a:	d906      	bls.n	800c95a <plug_holes+0x66>
 800c94c:	4b32      	ldr	r3, [pc, #200]	@ (800ca18 <plug_holes+0x124>)
 800c94e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c952:	4937      	ldr	r1, [pc, #220]	@ (800ca30 <plug_holes+0x13c>)
 800c954:	4832      	ldr	r0, [pc, #200]	@ (800ca20 <plug_holes+0x12c>)
 800c956:	f00a faa1 	bl	8016e9c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	4618      	mov	r0, r3
 800c960:	f7ff ffa4 	bl	800c8ac <ptr_to_mem>
 800c964:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d024      	beq.n	800c9b8 <plug_holes+0xc4>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	791b      	ldrb	r3, [r3, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d120      	bne.n	800c9b8 <plug_holes+0xc4>
 800c976:	4b2b      	ldr	r3, [pc, #172]	@ (800ca24 <plug_holes+0x130>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	68fa      	ldr	r2, [r7, #12]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d01b      	beq.n	800c9b8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c980:	4b2c      	ldr	r3, [pc, #176]	@ (800ca34 <plug_holes+0x140>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	429a      	cmp	r2, r3
 800c988:	d102      	bne.n	800c990 <plug_holes+0x9c>
      lfree = mem;
 800c98a:	4a2a      	ldr	r2, [pc, #168]	@ (800ca34 <plug_holes+0x140>)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	881a      	ldrh	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	881b      	ldrh	r3, [r3, #0]
 800c99c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c9a0:	d00a      	beq.n	800c9b8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7ff ff80 	bl	800c8ac <ptr_to_mem>
 800c9ac:	4604      	mov	r4, r0
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7ff ff8e 	bl	800c8d0 <mem_to_ptr>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	885b      	ldrh	r3, [r3, #2]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7ff ff75 	bl	800c8ac <ptr_to_mem>
 800c9c2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d01f      	beq.n	800ca0c <plug_holes+0x118>
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	791b      	ldrb	r3, [r3, #4]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d11b      	bne.n	800ca0c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c9d4:	4b17      	ldr	r3, [pc, #92]	@ (800ca34 <plug_holes+0x140>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d102      	bne.n	800c9e4 <plug_holes+0xf0>
      lfree = pmem;
 800c9de:	4a15      	ldr	r2, [pc, #84]	@ (800ca34 <plug_holes+0x140>)
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	881a      	ldrh	r2, [r3, #0]
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c9f4:	d00a      	beq.n	800ca0c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	881b      	ldrh	r3, [r3, #0]
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7ff ff56 	bl	800c8ac <ptr_to_mem>
 800ca00:	4604      	mov	r4, r0
 800ca02:	68b8      	ldr	r0, [r7, #8]
 800ca04:	f7ff ff64 	bl	800c8d0 <mem_to_ptr>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ca0c:	bf00      	nop
 800ca0e:	3714      	adds	r7, #20
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd90      	pop	{r4, r7, pc}
 800ca14:	2002427c 	.word	0x2002427c
 800ca18:	08018224 	.word	0x08018224
 800ca1c:	08018254 	.word	0x08018254
 800ca20:	0801826c 	.word	0x0801826c
 800ca24:	20024280 	.word	0x20024280
 800ca28:	08018294 	.word	0x08018294
 800ca2c:	080182b0 	.word	0x080182b0
 800ca30:	080182cc 	.word	0x080182cc
 800ca34:	20024288 	.word	0x20024288

0800ca38 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ca3e:	4b1d      	ldr	r3, [pc, #116]	@ (800cab4 <mem_init+0x7c>)
 800ca40:	4a1d      	ldr	r2, [pc, #116]	@ (800cab8 <mem_init+0x80>)
 800ca42:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ca44:	4b1b      	ldr	r3, [pc, #108]	@ (800cab4 <mem_init+0x7c>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800ca50:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ca5e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800ca62:	f7ff ff23 	bl	800c8ac <ptr_to_mem>
 800ca66:	4603      	mov	r3, r0
 800ca68:	4a14      	ldr	r2, [pc, #80]	@ (800cabc <mem_init+0x84>)
 800ca6a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ca6c:	4b13      	ldr	r3, [pc, #76]	@ (800cabc <mem_init+0x84>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2201      	movs	r2, #1
 800ca72:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ca74:	4b11      	ldr	r3, [pc, #68]	@ (800cabc <mem_init+0x84>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800ca7c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ca7e:	4b0f      	ldr	r3, [pc, #60]	@ (800cabc <mem_init+0x84>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800ca86:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ca88:	4b0a      	ldr	r3, [pc, #40]	@ (800cab4 <mem_init+0x7c>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a0c      	ldr	r2, [pc, #48]	@ (800cac0 <mem_init+0x88>)
 800ca8e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ca90:	480c      	ldr	r0, [pc, #48]	@ (800cac4 <mem_init+0x8c>)
 800ca92:	f009 fea9 	bl	80167e8 <sys_mutex_new>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d006      	beq.n	800caaa <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ca9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cac8 <mem_init+0x90>)
 800ca9e:	f240 221f 	movw	r2, #543	@ 0x21f
 800caa2:	490a      	ldr	r1, [pc, #40]	@ (800cacc <mem_init+0x94>)
 800caa4:	480a      	ldr	r0, [pc, #40]	@ (800cad0 <mem_init+0x98>)
 800caa6:	f00a f9f9 	bl	8016e9c <iprintf>
  }
}
 800caaa:	bf00      	nop
 800caac:	3708      	adds	r7, #8
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	2002427c 	.word	0x2002427c
 800cab8:	20048000 	.word	0x20048000
 800cabc:	20024280 	.word	0x20024280
 800cac0:	20024288 	.word	0x20024288
 800cac4:	20024284 	.word	0x20024284
 800cac8:	08018224 	.word	0x08018224
 800cacc:	080182f8 	.word	0x080182f8
 800cad0:	0801826c 	.word	0x0801826c

0800cad4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b086      	sub	sp, #24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7ff fef7 	bl	800c8d0 <mem_to_ptr>
 800cae2:	4603      	mov	r3, r0
 800cae4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	4618      	mov	r0, r3
 800caec:	f7ff fede 	bl	800c8ac <ptr_to_mem>
 800caf0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	885b      	ldrh	r3, [r3, #2]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff fed8 	bl	800c8ac <ptr_to_mem>
 800cafc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	881b      	ldrh	r3, [r3, #0]
 800cb02:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cb06:	d818      	bhi.n	800cb3a <mem_link_valid+0x66>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	885b      	ldrh	r3, [r3, #2]
 800cb0c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cb10:	d813      	bhi.n	800cb3a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cb16:	8afa      	ldrh	r2, [r7, #22]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d004      	beq.n	800cb26 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	881b      	ldrh	r3, [r3, #0]
 800cb20:	8afa      	ldrh	r2, [r7, #22]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d109      	bne.n	800cb3a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cb26:	4b08      	ldr	r3, [pc, #32]	@ (800cb48 <mem_link_valid+0x74>)
 800cb28:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb2a:	693a      	ldr	r2, [r7, #16]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d006      	beq.n	800cb3e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	885b      	ldrh	r3, [r3, #2]
 800cb34:	8afa      	ldrh	r2, [r7, #22]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d001      	beq.n	800cb3e <mem_link_valid+0x6a>
    return 0;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	e000      	b.n	800cb40 <mem_link_valid+0x6c>
  }
  return 1;
 800cb3e:	2301      	movs	r3, #1
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3718      	adds	r7, #24
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	20024280 	.word	0x20024280

0800cb4c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b088      	sub	sp, #32
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d070      	beq.n	800cc3c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f003 0303 	and.w	r3, r3, #3
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00d      	beq.n	800cb80 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cb64:	4b37      	ldr	r3, [pc, #220]	@ (800cc44 <mem_free+0xf8>)
 800cb66:	f240 2273 	movw	r2, #627	@ 0x273
 800cb6a:	4937      	ldr	r1, [pc, #220]	@ (800cc48 <mem_free+0xfc>)
 800cb6c:	4837      	ldr	r0, [pc, #220]	@ (800cc4c <mem_free+0x100>)
 800cb6e:	f00a f995 	bl	8016e9c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb72:	f009 fe8b 	bl	801688c <sys_arch_protect>
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f009 fe95 	bl	80168a8 <sys_arch_unprotect>
    return;
 800cb7e:	e05e      	b.n	800cc3e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3b08      	subs	r3, #8
 800cb84:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cb86:	4b32      	ldr	r3, [pc, #200]	@ (800cc50 <mem_free+0x104>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	69fa      	ldr	r2, [r7, #28]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d306      	bcc.n	800cb9e <mem_free+0x52>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f103 020c 	add.w	r2, r3, #12
 800cb96:	4b2f      	ldr	r3, [pc, #188]	@ (800cc54 <mem_free+0x108>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d90d      	bls.n	800cbba <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cb9e:	4b29      	ldr	r3, [pc, #164]	@ (800cc44 <mem_free+0xf8>)
 800cba0:	f240 227f 	movw	r2, #639	@ 0x27f
 800cba4:	492c      	ldr	r1, [pc, #176]	@ (800cc58 <mem_free+0x10c>)
 800cba6:	4829      	ldr	r0, [pc, #164]	@ (800cc4c <mem_free+0x100>)
 800cba8:	f00a f978 	bl	8016e9c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cbac:	f009 fe6e 	bl	801688c <sys_arch_protect>
 800cbb0:	6138      	str	r0, [r7, #16]
 800cbb2:	6938      	ldr	r0, [r7, #16]
 800cbb4:	f009 fe78 	bl	80168a8 <sys_arch_unprotect>
    return;
 800cbb8:	e041      	b.n	800cc3e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cbba:	4828      	ldr	r0, [pc, #160]	@ (800cc5c <mem_free+0x110>)
 800cbbc:	f009 fe2a 	bl	8016814 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	791b      	ldrb	r3, [r3, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d110      	bne.n	800cbea <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cbc8:	4b1e      	ldr	r3, [pc, #120]	@ (800cc44 <mem_free+0xf8>)
 800cbca:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800cbce:	4924      	ldr	r1, [pc, #144]	@ (800cc60 <mem_free+0x114>)
 800cbd0:	481e      	ldr	r0, [pc, #120]	@ (800cc4c <mem_free+0x100>)
 800cbd2:	f00a f963 	bl	8016e9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cbd6:	4821      	ldr	r0, [pc, #132]	@ (800cc5c <mem_free+0x110>)
 800cbd8:	f009 fe2b 	bl	8016832 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cbdc:	f009 fe56 	bl	801688c <sys_arch_protect>
 800cbe0:	6178      	str	r0, [r7, #20]
 800cbe2:	6978      	ldr	r0, [r7, #20]
 800cbe4:	f009 fe60 	bl	80168a8 <sys_arch_unprotect>
    return;
 800cbe8:	e029      	b.n	800cc3e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cbea:	69f8      	ldr	r0, [r7, #28]
 800cbec:	f7ff ff72 	bl	800cad4 <mem_link_valid>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d110      	bne.n	800cc18 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cbf6:	4b13      	ldr	r3, [pc, #76]	@ (800cc44 <mem_free+0xf8>)
 800cbf8:	f240 2295 	movw	r2, #661	@ 0x295
 800cbfc:	4919      	ldr	r1, [pc, #100]	@ (800cc64 <mem_free+0x118>)
 800cbfe:	4813      	ldr	r0, [pc, #76]	@ (800cc4c <mem_free+0x100>)
 800cc00:	f00a f94c 	bl	8016e9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cc04:	4815      	ldr	r0, [pc, #84]	@ (800cc5c <mem_free+0x110>)
 800cc06:	f009 fe14 	bl	8016832 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cc0a:	f009 fe3f 	bl	801688c <sys_arch_protect>
 800cc0e:	61b8      	str	r0, [r7, #24]
 800cc10:	69b8      	ldr	r0, [r7, #24]
 800cc12:	f009 fe49 	bl	80168a8 <sys_arch_unprotect>
    return;
 800cc16:	e012      	b.n	800cc3e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cc1e:	4b12      	ldr	r3, [pc, #72]	@ (800cc68 <mem_free+0x11c>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	69fa      	ldr	r2, [r7, #28]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d202      	bcs.n	800cc2e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cc28:	4a0f      	ldr	r2, [pc, #60]	@ (800cc68 <mem_free+0x11c>)
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cc2e:	69f8      	ldr	r0, [r7, #28]
 800cc30:	f7ff fe60 	bl	800c8f4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cc34:	4809      	ldr	r0, [pc, #36]	@ (800cc5c <mem_free+0x110>)
 800cc36:	f009 fdfc 	bl	8016832 <sys_mutex_unlock>
 800cc3a:	e000      	b.n	800cc3e <mem_free+0xf2>
    return;
 800cc3c:	bf00      	nop
}
 800cc3e:	3720      	adds	r7, #32
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	08018224 	.word	0x08018224
 800cc48:	08018314 	.word	0x08018314
 800cc4c:	0801826c 	.word	0x0801826c
 800cc50:	2002427c 	.word	0x2002427c
 800cc54:	20024280 	.word	0x20024280
 800cc58:	08018338 	.word	0x08018338
 800cc5c:	20024284 	.word	0x20024284
 800cc60:	08018354 	.word	0x08018354
 800cc64:	0801837c 	.word	0x0801837c
 800cc68:	20024288 	.word	0x20024288

0800cc6c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b088      	sub	sp, #32
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	460b      	mov	r3, r1
 800cc76:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cc78:	887b      	ldrh	r3, [r7, #2]
 800cc7a:	3303      	adds	r3, #3
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	f023 0303 	bic.w	r3, r3, #3
 800cc82:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cc84:	8bfb      	ldrh	r3, [r7, #30]
 800cc86:	2b0b      	cmp	r3, #11
 800cc88:	d801      	bhi.n	800cc8e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cc8a:	230c      	movs	r3, #12
 800cc8c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cc8e:	8bfb      	ldrh	r3, [r7, #30]
 800cc90:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cc94:	d803      	bhi.n	800cc9e <mem_trim+0x32>
 800cc96:	8bfa      	ldrh	r2, [r7, #30]
 800cc98:	887b      	ldrh	r3, [r7, #2]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d201      	bcs.n	800cca2 <mem_trim+0x36>
    return NULL;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e0d8      	b.n	800ce54 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cca2:	4b6e      	ldr	r3, [pc, #440]	@ (800ce5c <mem_trim+0x1f0>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d304      	bcc.n	800ccb6 <mem_trim+0x4a>
 800ccac:	4b6c      	ldr	r3, [pc, #432]	@ (800ce60 <mem_trim+0x1f4>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d306      	bcc.n	800ccc4 <mem_trim+0x58>
 800ccb6:	4b6b      	ldr	r3, [pc, #428]	@ (800ce64 <mem_trim+0x1f8>)
 800ccb8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800ccbc:	496a      	ldr	r1, [pc, #424]	@ (800ce68 <mem_trim+0x1fc>)
 800ccbe:	486b      	ldr	r0, [pc, #428]	@ (800ce6c <mem_trim+0x200>)
 800ccc0:	f00a f8ec 	bl	8016e9c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ccc4:	4b65      	ldr	r3, [pc, #404]	@ (800ce5c <mem_trim+0x1f0>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d304      	bcc.n	800ccd8 <mem_trim+0x6c>
 800ccce:	4b64      	ldr	r3, [pc, #400]	@ (800ce60 <mem_trim+0x1f4>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d307      	bcc.n	800cce8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ccd8:	f009 fdd8 	bl	801688c <sys_arch_protect>
 800ccdc:	60b8      	str	r0, [r7, #8]
 800ccde:	68b8      	ldr	r0, [r7, #8]
 800cce0:	f009 fde2 	bl	80168a8 <sys_arch_unprotect>
    return rmem;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	e0b5      	b.n	800ce54 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	3b08      	subs	r3, #8
 800ccec:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ccee:	69b8      	ldr	r0, [r7, #24]
 800ccf0:	f7ff fdee 	bl	800c8d0 <mem_to_ptr>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	881a      	ldrh	r2, [r3, #0]
 800ccfc:	8afb      	ldrh	r3, [r7, #22]
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	3b08      	subs	r3, #8
 800cd04:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cd06:	8bfa      	ldrh	r2, [r7, #30]
 800cd08:	8abb      	ldrh	r3, [r7, #20]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d906      	bls.n	800cd1c <mem_trim+0xb0>
 800cd0e:	4b55      	ldr	r3, [pc, #340]	@ (800ce64 <mem_trim+0x1f8>)
 800cd10:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800cd14:	4956      	ldr	r1, [pc, #344]	@ (800ce70 <mem_trim+0x204>)
 800cd16:	4855      	ldr	r0, [pc, #340]	@ (800ce6c <mem_trim+0x200>)
 800cd18:	f00a f8c0 	bl	8016e9c <iprintf>
  if (newsize > size) {
 800cd1c:	8bfa      	ldrh	r2, [r7, #30]
 800cd1e:	8abb      	ldrh	r3, [r7, #20]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d901      	bls.n	800cd28 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cd24:	2300      	movs	r3, #0
 800cd26:	e095      	b.n	800ce54 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cd28:	8bfa      	ldrh	r2, [r7, #30]
 800cd2a:	8abb      	ldrh	r3, [r7, #20]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d101      	bne.n	800cd34 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	e08f      	b.n	800ce54 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cd34:	484f      	ldr	r0, [pc, #316]	@ (800ce74 <mem_trim+0x208>)
 800cd36:	f009 fd6d 	bl	8016814 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	881b      	ldrh	r3, [r3, #0]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7ff fdb4 	bl	800c8ac <ptr_to_mem>
 800cd44:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	791b      	ldrb	r3, [r3, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d13f      	bne.n	800cdce <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	881b      	ldrh	r3, [r3, #0]
 800cd52:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cd56:	d106      	bne.n	800cd66 <mem_trim+0xfa>
 800cd58:	4b42      	ldr	r3, [pc, #264]	@ (800ce64 <mem_trim+0x1f8>)
 800cd5a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800cd5e:	4946      	ldr	r1, [pc, #280]	@ (800ce78 <mem_trim+0x20c>)
 800cd60:	4842      	ldr	r0, [pc, #264]	@ (800ce6c <mem_trim+0x200>)
 800cd62:	f00a f89b 	bl	8016e9c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	881b      	ldrh	r3, [r3, #0]
 800cd6a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cd6c:	8afa      	ldrh	r2, [r7, #22]
 800cd6e:	8bfb      	ldrh	r3, [r7, #30]
 800cd70:	4413      	add	r3, r2
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	3308      	adds	r3, #8
 800cd76:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cd78:	4b40      	ldr	r3, [pc, #256]	@ (800ce7c <mem_trim+0x210>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d106      	bne.n	800cd90 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cd82:	89fb      	ldrh	r3, [r7, #14]
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7ff fd91 	bl	800c8ac <ptr_to_mem>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	4a3b      	ldr	r2, [pc, #236]	@ (800ce7c <mem_trim+0x210>)
 800cd8e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cd90:	89fb      	ldrh	r3, [r7, #14]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff fd8a 	bl	800c8ac <ptr_to_mem>
 800cd98:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	89ba      	ldrh	r2, [r7, #12]
 800cda4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	8afa      	ldrh	r2, [r7, #22]
 800cdaa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	89fa      	ldrh	r2, [r7, #14]
 800cdb0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	881b      	ldrh	r3, [r3, #0]
 800cdb6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cdba:	d047      	beq.n	800ce4c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	881b      	ldrh	r3, [r3, #0]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff fd73 	bl	800c8ac <ptr_to_mem>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	89fb      	ldrh	r3, [r7, #14]
 800cdca:	8053      	strh	r3, [r2, #2]
 800cdcc:	e03e      	b.n	800ce4c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cdce:	8bfb      	ldrh	r3, [r7, #30]
 800cdd0:	f103 0214 	add.w	r2, r3, #20
 800cdd4:	8abb      	ldrh	r3, [r7, #20]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d838      	bhi.n	800ce4c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cdda:	8afa      	ldrh	r2, [r7, #22]
 800cddc:	8bfb      	ldrh	r3, [r7, #30]
 800cdde:	4413      	add	r3, r2
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	3308      	adds	r3, #8
 800cde4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cdee:	d106      	bne.n	800cdfe <mem_trim+0x192>
 800cdf0:	4b1c      	ldr	r3, [pc, #112]	@ (800ce64 <mem_trim+0x1f8>)
 800cdf2:	f240 3216 	movw	r2, #790	@ 0x316
 800cdf6:	4920      	ldr	r1, [pc, #128]	@ (800ce78 <mem_trim+0x20c>)
 800cdf8:	481c      	ldr	r0, [pc, #112]	@ (800ce6c <mem_trim+0x200>)
 800cdfa:	f00a f84f 	bl	8016e9c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cdfe:	89fb      	ldrh	r3, [r7, #14]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7ff fd53 	bl	800c8ac <ptr_to_mem>
 800ce06:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ce08:	4b1c      	ldr	r3, [pc, #112]	@ (800ce7c <mem_trim+0x210>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	693a      	ldr	r2, [r7, #16]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d202      	bcs.n	800ce18 <mem_trim+0x1ac>
      lfree = mem2;
 800ce12:	4a1a      	ldr	r2, [pc, #104]	@ (800ce7c <mem_trim+0x210>)
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	881a      	ldrh	r2, [r3, #0]
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	8afa      	ldrh	r2, [r7, #22]
 800ce2a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	89fa      	ldrh	r2, [r7, #14]
 800ce30:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	881b      	ldrh	r3, [r3, #0]
 800ce36:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ce3a:	d007      	beq.n	800ce4c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	881b      	ldrh	r3, [r3, #0]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7ff fd33 	bl	800c8ac <ptr_to_mem>
 800ce46:	4602      	mov	r2, r0
 800ce48:	89fb      	ldrh	r3, [r7, #14]
 800ce4a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ce4c:	4809      	ldr	r0, [pc, #36]	@ (800ce74 <mem_trim+0x208>)
 800ce4e:	f009 fcf0 	bl	8016832 <sys_mutex_unlock>
  return rmem;
 800ce52:	687b      	ldr	r3, [r7, #4]
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3720      	adds	r7, #32
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	2002427c 	.word	0x2002427c
 800ce60:	20024280 	.word	0x20024280
 800ce64:	08018224 	.word	0x08018224
 800ce68:	080183b0 	.word	0x080183b0
 800ce6c:	0801826c 	.word	0x0801826c
 800ce70:	080183c8 	.word	0x080183c8
 800ce74:	20024284 	.word	0x20024284
 800ce78:	080183e8 	.word	0x080183e8
 800ce7c:	20024288 	.word	0x20024288

0800ce80 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b088      	sub	sp, #32
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ce8a:	88fb      	ldrh	r3, [r7, #6]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <mem_malloc+0x14>
    return NULL;
 800ce90:	2300      	movs	r3, #0
 800ce92:	e0e2      	b.n	800d05a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ce94:	88fb      	ldrh	r3, [r7, #6]
 800ce96:	3303      	adds	r3, #3
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	f023 0303 	bic.w	r3, r3, #3
 800ce9e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cea0:	8bbb      	ldrh	r3, [r7, #28]
 800cea2:	2b0b      	cmp	r3, #11
 800cea4:	d801      	bhi.n	800ceaa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cea6:	230c      	movs	r3, #12
 800cea8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ceaa:	8bbb      	ldrh	r3, [r7, #28]
 800ceac:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ceb0:	d803      	bhi.n	800ceba <mem_malloc+0x3a>
 800ceb2:	8bba      	ldrh	r2, [r7, #28]
 800ceb4:	88fb      	ldrh	r3, [r7, #6]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d201      	bcs.n	800cebe <mem_malloc+0x3e>
    return NULL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	e0cd      	b.n	800d05a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cebe:	4869      	ldr	r0, [pc, #420]	@ (800d064 <mem_malloc+0x1e4>)
 800cec0:	f009 fca8 	bl	8016814 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cec4:	4b68      	ldr	r3, [pc, #416]	@ (800d068 <mem_malloc+0x1e8>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7ff fd01 	bl	800c8d0 <mem_to_ptr>
 800cece:	4603      	mov	r3, r0
 800ced0:	83fb      	strh	r3, [r7, #30]
 800ced2:	e0b7      	b.n	800d044 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ced4:	8bfb      	ldrh	r3, [r7, #30]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7ff fce8 	bl	800c8ac <ptr_to_mem>
 800cedc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	791b      	ldrb	r3, [r3, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f040 80a7 	bne.w	800d036 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	881b      	ldrh	r3, [r3, #0]
 800ceec:	461a      	mov	r2, r3
 800ceee:	8bfb      	ldrh	r3, [r7, #30]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	f1a3 0208 	sub.w	r2, r3, #8
 800cef6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cef8:	429a      	cmp	r2, r3
 800cefa:	f0c0 809c 	bcc.w	800d036 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	881b      	ldrh	r3, [r3, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	8bfb      	ldrh	r3, [r7, #30]
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	f1a3 0208 	sub.w	r2, r3, #8
 800cf0c:	8bbb      	ldrh	r3, [r7, #28]
 800cf0e:	3314      	adds	r3, #20
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d333      	bcc.n	800cf7c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cf14:	8bfa      	ldrh	r2, [r7, #30]
 800cf16:	8bbb      	ldrh	r3, [r7, #28]
 800cf18:	4413      	add	r3, r2
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	3308      	adds	r3, #8
 800cf1e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cf20:	8a7b      	ldrh	r3, [r7, #18]
 800cf22:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cf26:	d106      	bne.n	800cf36 <mem_malloc+0xb6>
 800cf28:	4b50      	ldr	r3, [pc, #320]	@ (800d06c <mem_malloc+0x1ec>)
 800cf2a:	f240 3287 	movw	r2, #903	@ 0x387
 800cf2e:	4950      	ldr	r1, [pc, #320]	@ (800d070 <mem_malloc+0x1f0>)
 800cf30:	4850      	ldr	r0, [pc, #320]	@ (800d074 <mem_malloc+0x1f4>)
 800cf32:	f009 ffb3 	bl	8016e9c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cf36:	8a7b      	ldrh	r3, [r7, #18]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7ff fcb7 	bl	800c8ac <ptr_to_mem>
 800cf3e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2200      	movs	r2, #0
 800cf44:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	881a      	ldrh	r2, [r3, #0]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	8bfa      	ldrh	r2, [r7, #30]
 800cf52:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	8a7a      	ldrh	r2, [r7, #18]
 800cf58:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	881b      	ldrh	r3, [r3, #0]
 800cf64:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cf68:	d00b      	beq.n	800cf82 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff fc9c 	bl	800c8ac <ptr_to_mem>
 800cf74:	4602      	mov	r2, r0
 800cf76:	8a7b      	ldrh	r3, [r7, #18]
 800cf78:	8053      	strh	r3, [r2, #2]
 800cf7a:	e002      	b.n	800cf82 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cf82:	4b39      	ldr	r3, [pc, #228]	@ (800d068 <mem_malloc+0x1e8>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d127      	bne.n	800cfdc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cf8c:	4b36      	ldr	r3, [pc, #216]	@ (800d068 <mem_malloc+0x1e8>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cf92:	e005      	b.n	800cfa0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	881b      	ldrh	r3, [r3, #0]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7ff fc87 	bl	800c8ac <ptr_to_mem>
 800cf9e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	791b      	ldrb	r3, [r3, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d004      	beq.n	800cfb2 <mem_malloc+0x132>
 800cfa8:	4b33      	ldr	r3, [pc, #204]	@ (800d078 <mem_malloc+0x1f8>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	69ba      	ldr	r2, [r7, #24]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d1f0      	bne.n	800cf94 <mem_malloc+0x114>
          }
          lfree = cur;
 800cfb2:	4a2d      	ldr	r2, [pc, #180]	@ (800d068 <mem_malloc+0x1e8>)
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cfb8:	4b2b      	ldr	r3, [pc, #172]	@ (800d068 <mem_malloc+0x1e8>)
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	4b2e      	ldr	r3, [pc, #184]	@ (800d078 <mem_malloc+0x1f8>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d00b      	beq.n	800cfdc <mem_malloc+0x15c>
 800cfc4:	4b28      	ldr	r3, [pc, #160]	@ (800d068 <mem_malloc+0x1e8>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	791b      	ldrb	r3, [r3, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d006      	beq.n	800cfdc <mem_malloc+0x15c>
 800cfce:	4b27      	ldr	r3, [pc, #156]	@ (800d06c <mem_malloc+0x1ec>)
 800cfd0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800cfd4:	4929      	ldr	r1, [pc, #164]	@ (800d07c <mem_malloc+0x1fc>)
 800cfd6:	4827      	ldr	r0, [pc, #156]	@ (800d074 <mem_malloc+0x1f4>)
 800cfd8:	f009 ff60 	bl	8016e9c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cfdc:	4821      	ldr	r0, [pc, #132]	@ (800d064 <mem_malloc+0x1e4>)
 800cfde:	f009 fc28 	bl	8016832 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cfe2:	8bba      	ldrh	r2, [r7, #28]
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	3308      	adds	r3, #8
 800cfea:	4a23      	ldr	r2, [pc, #140]	@ (800d078 <mem_malloc+0x1f8>)
 800cfec:	6812      	ldr	r2, [r2, #0]
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d906      	bls.n	800d000 <mem_malloc+0x180>
 800cff2:	4b1e      	ldr	r3, [pc, #120]	@ (800d06c <mem_malloc+0x1ec>)
 800cff4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800cff8:	4921      	ldr	r1, [pc, #132]	@ (800d080 <mem_malloc+0x200>)
 800cffa:	481e      	ldr	r0, [pc, #120]	@ (800d074 <mem_malloc+0x1f4>)
 800cffc:	f009 ff4e 	bl	8016e9c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	f003 0303 	and.w	r3, r3, #3
 800d006:	2b00      	cmp	r3, #0
 800d008:	d006      	beq.n	800d018 <mem_malloc+0x198>
 800d00a:	4b18      	ldr	r3, [pc, #96]	@ (800d06c <mem_malloc+0x1ec>)
 800d00c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d010:	491c      	ldr	r1, [pc, #112]	@ (800d084 <mem_malloc+0x204>)
 800d012:	4818      	ldr	r0, [pc, #96]	@ (800d074 <mem_malloc+0x1f4>)
 800d014:	f009 ff42 	bl	8016e9c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	f003 0303 	and.w	r3, r3, #3
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d006      	beq.n	800d030 <mem_malloc+0x1b0>
 800d022:	4b12      	ldr	r3, [pc, #72]	@ (800d06c <mem_malloc+0x1ec>)
 800d024:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d028:	4917      	ldr	r1, [pc, #92]	@ (800d088 <mem_malloc+0x208>)
 800d02a:	4812      	ldr	r0, [pc, #72]	@ (800d074 <mem_malloc+0x1f4>)
 800d02c:	f009 ff36 	bl	8016e9c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	3308      	adds	r3, #8
 800d034:	e011      	b.n	800d05a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d036:	8bfb      	ldrh	r3, [r7, #30]
 800d038:	4618      	mov	r0, r3
 800d03a:	f7ff fc37 	bl	800c8ac <ptr_to_mem>
 800d03e:	4603      	mov	r3, r0
 800d040:	881b      	ldrh	r3, [r3, #0]
 800d042:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d044:	8bfa      	ldrh	r2, [r7, #30]
 800d046:	8bbb      	ldrh	r3, [r7, #28]
 800d048:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800d04c:	429a      	cmp	r2, r3
 800d04e:	f4ff af41 	bcc.w	800ced4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d052:	4804      	ldr	r0, [pc, #16]	@ (800d064 <mem_malloc+0x1e4>)
 800d054:	f009 fbed 	bl	8016832 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3720      	adds	r7, #32
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	20024284 	.word	0x20024284
 800d068:	20024288 	.word	0x20024288
 800d06c:	08018224 	.word	0x08018224
 800d070:	080183e8 	.word	0x080183e8
 800d074:	0801826c 	.word	0x0801826c
 800d078:	20024280 	.word	0x20024280
 800d07c:	080183fc 	.word	0x080183fc
 800d080:	08018418 	.word	0x08018418
 800d084:	08018448 	.word	0x08018448
 800d088:	08018478 	.word	0x08018478

0800d08c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b085      	sub	sp, #20
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	689b      	ldr	r3, [r3, #8]
 800d098:	2200      	movs	r2, #0
 800d09a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	3303      	adds	r3, #3
 800d0a2:	f023 0303 	bic.w	r3, r3, #3
 800d0a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60fb      	str	r3, [r7, #12]
 800d0ac:	e011      	b.n	800d0d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	881b      	ldrh	r3, [r3, #0]
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	60fb      	str	r3, [r7, #12]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	885b      	ldrh	r3, [r3, #2]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	dbe7      	blt.n	800d0ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d0de:	bf00      	nop
 800d0e0:	bf00      	nop
 800d0e2:	3714      	adds	r7, #20
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	80fb      	strh	r3, [r7, #6]
 800d0f6:	e009      	b.n	800d10c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d0f8:	88fb      	ldrh	r3, [r7, #6]
 800d0fa:	4a08      	ldr	r2, [pc, #32]	@ (800d11c <memp_init+0x30>)
 800d0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d100:	4618      	mov	r0, r3
 800d102:	f7ff ffc3 	bl	800d08c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d106:	88fb      	ldrh	r3, [r7, #6]
 800d108:	3301      	adds	r3, #1
 800d10a:	80fb      	strh	r3, [r7, #6]
 800d10c:	88fb      	ldrh	r3, [r7, #6]
 800d10e:	2b0c      	cmp	r3, #12
 800d110:	d9f2      	bls.n	800d0f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d112:	bf00      	nop
 800d114:	bf00      	nop
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	0801aec0 	.word	0x0801aec0

0800d120 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d128:	f009 fbb0 	bl	801688c <sys_arch_protect>
 800d12c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d015      	beq.n	800d168 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	68ba      	ldr	r2, [r7, #8]
 800d142:	6812      	ldr	r2, [r2, #0]
 800d144:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	f003 0303 	and.w	r3, r3, #3
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d006      	beq.n	800d15e <do_memp_malloc_pool+0x3e>
 800d150:	4b09      	ldr	r3, [pc, #36]	@ (800d178 <do_memp_malloc_pool+0x58>)
 800d152:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d156:	4909      	ldr	r1, [pc, #36]	@ (800d17c <do_memp_malloc_pool+0x5c>)
 800d158:	4809      	ldr	r0, [pc, #36]	@ (800d180 <do_memp_malloc_pool+0x60>)
 800d15a:	f009 fe9f 	bl	8016e9c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f009 fba2 	bl	80168a8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	e003      	b.n	800d170 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f009 fb9d 	bl	80168a8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3710      	adds	r7, #16
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	0801849c 	.word	0x0801849c
 800d17c:	080184cc 	.word	0x080184cc
 800d180:	080184f0 	.word	0x080184f0

0800d184 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d106      	bne.n	800d1a0 <memp_malloc_pool+0x1c>
 800d192:	4b0a      	ldr	r3, [pc, #40]	@ (800d1bc <memp_malloc_pool+0x38>)
 800d194:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d198:	4909      	ldr	r1, [pc, #36]	@ (800d1c0 <memp_malloc_pool+0x3c>)
 800d19a:	480a      	ldr	r0, [pc, #40]	@ (800d1c4 <memp_malloc_pool+0x40>)
 800d19c:	f009 fe7e 	bl	8016e9c <iprintf>
  if (desc == NULL) {
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <memp_malloc_pool+0x26>
    return NULL;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	e003      	b.n	800d1b2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff ffb8 	bl	800d120 <do_memp_malloc_pool>
 800d1b0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	0801849c 	.word	0x0801849c
 800d1c0:	08018518 	.word	0x08018518
 800d1c4:	080184f0 	.word	0x080184f0

0800d1c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d1d2:	79fb      	ldrb	r3, [r7, #7]
 800d1d4:	2b0c      	cmp	r3, #12
 800d1d6:	d908      	bls.n	800d1ea <memp_malloc+0x22>
 800d1d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d204 <memp_malloc+0x3c>)
 800d1da:	f240 1257 	movw	r2, #343	@ 0x157
 800d1de:	490a      	ldr	r1, [pc, #40]	@ (800d208 <memp_malloc+0x40>)
 800d1e0:	480a      	ldr	r0, [pc, #40]	@ (800d20c <memp_malloc+0x44>)
 800d1e2:	f009 fe5b 	bl	8016e9c <iprintf>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e008      	b.n	800d1fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
 800d1ec:	4a08      	ldr	r2, [pc, #32]	@ (800d210 <memp_malloc+0x48>)
 800d1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7ff ff94 	bl	800d120 <do_memp_malloc_pool>
 800d1f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	0801849c 	.word	0x0801849c
 800d208:	0801852c 	.word	0x0801852c
 800d20c:	080184f0 	.word	0x080184f0
 800d210:	0801aec0 	.word	0x0801aec0

0800d214 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	f003 0303 	and.w	r3, r3, #3
 800d224:	2b00      	cmp	r3, #0
 800d226:	d006      	beq.n	800d236 <do_memp_free_pool+0x22>
 800d228:	4b0d      	ldr	r3, [pc, #52]	@ (800d260 <do_memp_free_pool+0x4c>)
 800d22a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d22e:	490d      	ldr	r1, [pc, #52]	@ (800d264 <do_memp_free_pool+0x50>)
 800d230:	480d      	ldr	r0, [pc, #52]	@ (800d268 <do_memp_free_pool+0x54>)
 800d232:	f009 fe33 	bl	8016e9c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d23a:	f009 fb27 	bl	801688c <sys_arch_protect>
 800d23e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d252:	68b8      	ldr	r0, [r7, #8]
 800d254:	f009 fb28 	bl	80168a8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d258:	bf00      	nop
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	0801849c 	.word	0x0801849c
 800d264:	0801854c 	.word	0x0801854c
 800d268:	080184f0 	.word	0x080184f0

0800d26c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d106      	bne.n	800d28a <memp_free_pool+0x1e>
 800d27c:	4b0a      	ldr	r3, [pc, #40]	@ (800d2a8 <memp_free_pool+0x3c>)
 800d27e:	f240 1295 	movw	r2, #405	@ 0x195
 800d282:	490a      	ldr	r1, [pc, #40]	@ (800d2ac <memp_free_pool+0x40>)
 800d284:	480a      	ldr	r0, [pc, #40]	@ (800d2b0 <memp_free_pool+0x44>)
 800d286:	f009 fe09 	bl	8016e9c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d007      	beq.n	800d2a0 <memp_free_pool+0x34>
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d004      	beq.n	800d2a0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d296:	6839      	ldr	r1, [r7, #0]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff ffbb 	bl	800d214 <do_memp_free_pool>
 800d29e:	e000      	b.n	800d2a2 <memp_free_pool+0x36>
    return;
 800d2a0:	bf00      	nop
}
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	0801849c 	.word	0x0801849c
 800d2ac:	08018518 	.word	0x08018518
 800d2b0:	080184f0 	.word	0x080184f0

0800d2b4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	6039      	str	r1, [r7, #0]
 800d2be:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d2c0:	79fb      	ldrb	r3, [r7, #7]
 800d2c2:	2b0c      	cmp	r3, #12
 800d2c4:	d907      	bls.n	800d2d6 <memp_free+0x22>
 800d2c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d2f8 <memp_free+0x44>)
 800d2c8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d2cc:	490b      	ldr	r1, [pc, #44]	@ (800d2fc <memp_free+0x48>)
 800d2ce:	480c      	ldr	r0, [pc, #48]	@ (800d300 <memp_free+0x4c>)
 800d2d0:	f009 fde4 	bl	8016e9c <iprintf>
 800d2d4:	e00c      	b.n	800d2f0 <memp_free+0x3c>

  if (mem == NULL) {
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d008      	beq.n	800d2ee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d2dc:	79fb      	ldrb	r3, [r7, #7]
 800d2de:	4a09      	ldr	r2, [pc, #36]	@ (800d304 <memp_free+0x50>)
 800d2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2e4:	6839      	ldr	r1, [r7, #0]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7ff ff94 	bl	800d214 <do_memp_free_pool>
 800d2ec:	e000      	b.n	800d2f0 <memp_free+0x3c>
    return;
 800d2ee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d2f0:	3708      	adds	r7, #8
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	0801849c 	.word	0x0801849c
 800d2fc:	0801856c 	.word	0x0801856c
 800d300:	080184f0 	.word	0x080184f0
 800d304:	0801aec0 	.word	0x0801aec0

0800d308 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d308:	b480      	push	{r7}
 800d30a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d30c:	bf00      	nop
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr
	...

0800d318 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b086      	sub	sp, #24
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
 800d324:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d108      	bne.n	800d33e <netif_add+0x26>
 800d32c:	4b57      	ldr	r3, [pc, #348]	@ (800d48c <netif_add+0x174>)
 800d32e:	f240 1227 	movw	r2, #295	@ 0x127
 800d332:	4957      	ldr	r1, [pc, #348]	@ (800d490 <netif_add+0x178>)
 800d334:	4857      	ldr	r0, [pc, #348]	@ (800d494 <netif_add+0x17c>)
 800d336:	f009 fdb1 	bl	8016e9c <iprintf>
 800d33a:	2300      	movs	r3, #0
 800d33c:	e0a2      	b.n	800d484 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d340:	2b00      	cmp	r3, #0
 800d342:	d108      	bne.n	800d356 <netif_add+0x3e>
 800d344:	4b51      	ldr	r3, [pc, #324]	@ (800d48c <netif_add+0x174>)
 800d346:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d34a:	4953      	ldr	r1, [pc, #332]	@ (800d498 <netif_add+0x180>)
 800d34c:	4851      	ldr	r0, [pc, #324]	@ (800d494 <netif_add+0x17c>)
 800d34e:	f009 fda5 	bl	8016e9c <iprintf>
 800d352:	2300      	movs	r3, #0
 800d354:	e096      	b.n	800d484 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d101      	bne.n	800d360 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d35c:	4b4f      	ldr	r3, [pc, #316]	@ (800d49c <netif_add+0x184>)
 800d35e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d366:	4b4d      	ldr	r3, [pc, #308]	@ (800d49c <netif_add+0x184>)
 800d368:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d370:	4b4a      	ldr	r3, [pc, #296]	@ (800d49c <netif_add+0x184>)
 800d372:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2200      	movs	r2, #0
 800d384:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	4a45      	ldr	r2, [pc, #276]	@ (800d4a0 <netif_add+0x188>)
 800d38a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2200      	movs	r2, #0
 800d390:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6a3a      	ldr	r2, [r7, #32]
 800d3a4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d3a6:	4b3f      	ldr	r3, [pc, #252]	@ (800d4a4 <netif_add+0x18c>)
 800d3a8:	781a      	ldrb	r2, [r3, #0]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3b4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	68b9      	ldr	r1, [r7, #8]
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f000 f913 	bl	800d5e8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	4798      	blx	r3
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d001      	beq.n	800d3d2 <netif_add+0xba>
    return NULL;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	e058      	b.n	800d484 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d3d8:	2bff      	cmp	r3, #255	@ 0xff
 800d3da:	d103      	bne.n	800d3e4 <netif_add+0xcc>
        netif->num = 0;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d3e8:	4b2f      	ldr	r3, [pc, #188]	@ (800d4a8 <netif_add+0x190>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	617b      	str	r3, [r7, #20]
 800d3ee:	e02b      	b.n	800d448 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d3f0:	697a      	ldr	r2, [r7, #20]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d106      	bne.n	800d406 <netif_add+0xee>
 800d3f8:	4b24      	ldr	r3, [pc, #144]	@ (800d48c <netif_add+0x174>)
 800d3fa:	f240 128b 	movw	r2, #395	@ 0x18b
 800d3fe:	492b      	ldr	r1, [pc, #172]	@ (800d4ac <netif_add+0x194>)
 800d400:	4824      	ldr	r0, [pc, #144]	@ (800d494 <netif_add+0x17c>)
 800d402:	f009 fd4b 	bl	8016e9c <iprintf>
        num_netifs++;
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	3301      	adds	r3, #1
 800d40a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	2bff      	cmp	r3, #255	@ 0xff
 800d410:	dd06      	ble.n	800d420 <netif_add+0x108>
 800d412:	4b1e      	ldr	r3, [pc, #120]	@ (800d48c <netif_add+0x174>)
 800d414:	f240 128d 	movw	r2, #397	@ 0x18d
 800d418:	4925      	ldr	r1, [pc, #148]	@ (800d4b0 <netif_add+0x198>)
 800d41a:	481e      	ldr	r0, [pc, #120]	@ (800d494 <netif_add+0x17c>)
 800d41c:	f009 fd3e 	bl	8016e9c <iprintf>
        if (netif2->num == netif->num) {
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d108      	bne.n	800d442 <netif_add+0x12a>
          netif->num++;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d436:	3301      	adds	r3, #1
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800d440:	e005      	b.n	800d44e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	617b      	str	r3, [r7, #20]
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1d0      	bne.n	800d3f0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1be      	bne.n	800d3d2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d45a:	2bfe      	cmp	r3, #254	@ 0xfe
 800d45c:	d103      	bne.n	800d466 <netif_add+0x14e>
    netif_num = 0;
 800d45e:	4b11      	ldr	r3, [pc, #68]	@ (800d4a4 <netif_add+0x18c>)
 800d460:	2200      	movs	r2, #0
 800d462:	701a      	strb	r2, [r3, #0]
 800d464:	e006      	b.n	800d474 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d46c:	3301      	adds	r3, #1
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	4b0c      	ldr	r3, [pc, #48]	@ (800d4a4 <netif_add+0x18c>)
 800d472:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d474:	4b0c      	ldr	r3, [pc, #48]	@ (800d4a8 <netif_add+0x190>)
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d47c:	4a0a      	ldr	r2, [pc, #40]	@ (800d4a8 <netif_add+0x190>)
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d482:	68fb      	ldr	r3, [r7, #12]
}
 800d484:	4618      	mov	r0, r3
 800d486:	3718      	adds	r7, #24
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	08018588 	.word	0x08018588
 800d490:	0801861c 	.word	0x0801861c
 800d494:	080185d8 	.word	0x080185d8
 800d498:	08018638 	.word	0x08018638
 800d49c:	0801af34 	.word	0x0801af34
 800d4a0:	0800d8c3 	.word	0x0800d8c3
 800d4a4:	20027360 	.word	0x20027360
 800d4a8:	20027358 	.word	0x20027358
 800d4ac:	0801865c 	.word	0x0801865c
 800d4b0:	08018670 	.word	0x08018670

0800d4b4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d4be:	6839      	ldr	r1, [r7, #0]
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f002 fb7f 	bl	800fbc4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f006 fd85 	bl	8013fd8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d4ce:	bf00      	nop
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
	...

0800d4d8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b086      	sub	sp, #24
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d106      	bne.n	800d4f8 <netif_do_set_ipaddr+0x20>
 800d4ea:	4b1d      	ldr	r3, [pc, #116]	@ (800d560 <netif_do_set_ipaddr+0x88>)
 800d4ec:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d4f0:	491c      	ldr	r1, [pc, #112]	@ (800d564 <netif_do_set_ipaddr+0x8c>)
 800d4f2:	481d      	ldr	r0, [pc, #116]	@ (800d568 <netif_do_set_ipaddr+0x90>)
 800d4f4:	f009 fcd2 	bl	8016e9c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d106      	bne.n	800d50c <netif_do_set_ipaddr+0x34>
 800d4fe:	4b18      	ldr	r3, [pc, #96]	@ (800d560 <netif_do_set_ipaddr+0x88>)
 800d500:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d504:	4917      	ldr	r1, [pc, #92]	@ (800d564 <netif_do_set_ipaddr+0x8c>)
 800d506:	4818      	ldr	r0, [pc, #96]	@ (800d568 <netif_do_set_ipaddr+0x90>)
 800d508:	f009 fcc8 	bl	8016e9c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	3304      	adds	r3, #4
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	429a      	cmp	r2, r3
 800d518:	d01c      	beq.n	800d554 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	3304      	adds	r3, #4
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d52a:	f107 0314 	add.w	r3, r7, #20
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff ffbf 	bl	800d4b4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <netif_do_set_ipaddr+0x6a>
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	e000      	b.n	800d544 <netif_do_set_ipaddr+0x6c>
 800d542:	2300      	movs	r3, #0
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d548:	2101      	movs	r1, #1
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f000 f8d2 	bl	800d6f4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d550:	2301      	movs	r3, #1
 800d552:	e000      	b.n	800d556 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3718      	adds	r7, #24
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	08018588 	.word	0x08018588
 800d564:	080186a0 	.word	0x080186a0
 800d568:	080185d8 	.word	0x080185d8

0800d56c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	3308      	adds	r3, #8
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	429a      	cmp	r2, r3
 800d584:	d00a      	beq.n	800d59c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d002      	beq.n	800d592 <netif_do_set_netmask+0x26>
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	e000      	b.n	800d594 <netif_do_set_netmask+0x28>
 800d592:	2300      	movs	r3, #0
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d598:	2301      	movs	r3, #1
 800d59a:	e000      	b.n	800d59e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3714      	adds	r7, #20
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d5aa:	b480      	push	{r7}
 800d5ac:	b085      	sub	sp, #20
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	60f8      	str	r0, [r7, #12]
 800d5b2:	60b9      	str	r1, [r7, #8]
 800d5b4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	330c      	adds	r3, #12
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d00a      	beq.n	800d5da <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d002      	beq.n	800d5d0 <netif_do_set_gw+0x26>
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	e000      	b.n	800d5d2 <netif_do_set_gw+0x28>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e000      	b.n	800d5dc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d5da:	2300      	movs	r3, #0
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3714      	adds	r7, #20
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b088      	sub	sp, #32
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
 800d5f4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d101      	bne.n	800d608 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d604:	4b1c      	ldr	r3, [pc, #112]	@ (800d678 <netif_set_addr+0x90>)
 800d606:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d101      	bne.n	800d612 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d60e:	4b1a      	ldr	r3, [pc, #104]	@ (800d678 <netif_set_addr+0x90>)
 800d610:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d101      	bne.n	800d61c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d618:	4b17      	ldr	r3, [pc, #92]	@ (800d678 <netif_set_addr+0x90>)
 800d61a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d003      	beq.n	800d62a <netif_set_addr+0x42>
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d101      	bne.n	800d62e <netif_set_addr+0x46>
 800d62a:	2301      	movs	r3, #1
 800d62c:	e000      	b.n	800d630 <netif_set_addr+0x48>
 800d62e:	2300      	movs	r3, #0
 800d630:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d006      	beq.n	800d646 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d638:	f107 0310 	add.w	r3, r7, #16
 800d63c:	461a      	mov	r2, r3
 800d63e:	68b9      	ldr	r1, [r7, #8]
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7ff ff49 	bl	800d4d8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d646:	69fa      	ldr	r2, [r7, #28]
 800d648:	6879      	ldr	r1, [r7, #4]
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f7ff ff8e 	bl	800d56c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d650:	69ba      	ldr	r2, [r7, #24]
 800d652:	6839      	ldr	r1, [r7, #0]
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f7ff ffa8 	bl	800d5aa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d106      	bne.n	800d66e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d660:	f107 0310 	add.w	r3, r7, #16
 800d664:	461a      	mov	r2, r3
 800d666:	68b9      	ldr	r1, [r7, #8]
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f7ff ff35 	bl	800d4d8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d66e:	bf00      	nop
 800d670:	3720      	adds	r7, #32
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	0801af34 	.word	0x0801af34

0800d67c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d684:	4a04      	ldr	r2, [pc, #16]	@ (800d698 <netif_set_default+0x1c>)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d68a:	bf00      	nop
 800d68c:	370c      	adds	r7, #12
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	2002735c 	.word	0x2002735c

0800d69c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d107      	bne.n	800d6ba <netif_set_up+0x1e>
 800d6aa:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e8 <netif_set_up+0x4c>)
 800d6ac:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d6b0:	490e      	ldr	r1, [pc, #56]	@ (800d6ec <netif_set_up+0x50>)
 800d6b2:	480f      	ldr	r0, [pc, #60]	@ (800d6f0 <netif_set_up+0x54>)
 800d6b4:	f009 fbf2 	bl	8016e9c <iprintf>
 800d6b8:	e013      	b.n	800d6e2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d6c0:	f003 0301 	and.w	r3, r3, #1
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10c      	bne.n	800d6e2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d6ce:	f043 0301 	orr.w	r3, r3, #1
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d6da:	2103      	movs	r1, #3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 f809 	bl	800d6f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	08018588 	.word	0x08018588
 800d6ec:	08018710 	.word	0x08018710
 800d6f0:	080185d8 	.word	0x080185d8

0800d6f4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d106      	bne.n	800d714 <netif_issue_reports+0x20>
 800d706:	4b18      	ldr	r3, [pc, #96]	@ (800d768 <netif_issue_reports+0x74>)
 800d708:	f240 326d 	movw	r2, #877	@ 0x36d
 800d70c:	4917      	ldr	r1, [pc, #92]	@ (800d76c <netif_issue_reports+0x78>)
 800d70e:	4818      	ldr	r0, [pc, #96]	@ (800d770 <netif_issue_reports+0x7c>)
 800d710:	f009 fbc4 	bl	8016e9c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d71a:	f003 0304 	and.w	r3, r3, #4
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d01e      	beq.n	800d760 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d728:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d017      	beq.n	800d760 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d730:	78fb      	ldrb	r3, [r7, #3]
 800d732:	f003 0301 	and.w	r3, r3, #1
 800d736:	2b00      	cmp	r3, #0
 800d738:	d013      	beq.n	800d762 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	3304      	adds	r3, #4
 800d73e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00e      	beq.n	800d762 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d74a:	f003 0308 	and.w	r3, r3, #8
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d007      	beq.n	800d762 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	3304      	adds	r3, #4
 800d756:	4619      	mov	r1, r3
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f007 fba7 	bl	8014eac <etharp_request>
 800d75e:	e000      	b.n	800d762 <netif_issue_reports+0x6e>
    return;
 800d760:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	08018588 	.word	0x08018588
 800d76c:	0801872c 	.word	0x0801872c
 800d770:	080185d8 	.word	0x080185d8

0800d774 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d107      	bne.n	800d792 <netif_set_down+0x1e>
 800d782:	4b12      	ldr	r3, [pc, #72]	@ (800d7cc <netif_set_down+0x58>)
 800d784:	f240 329b 	movw	r2, #923	@ 0x39b
 800d788:	4911      	ldr	r1, [pc, #68]	@ (800d7d0 <netif_set_down+0x5c>)
 800d78a:	4812      	ldr	r0, [pc, #72]	@ (800d7d4 <netif_set_down+0x60>)
 800d78c:	f009 fb86 	bl	8016e9c <iprintf>
 800d790:	e019      	b.n	800d7c6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d798:	f003 0301 	and.w	r3, r3, #1
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d012      	beq.n	800d7c6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7a6:	f023 0301 	bic.w	r3, r3, #1
 800d7aa:	b2da      	uxtb	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7b8:	f003 0308 	and.w	r3, r3, #8
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f006 ff31 	bl	8014628 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	08018588 	.word	0x08018588
 800d7d0:	08018750 	.word	0x08018750
 800d7d4:	080185d8 	.word	0x080185d8

0800d7d8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d107      	bne.n	800d7f6 <netif_set_link_up+0x1e>
 800d7e6:	4b13      	ldr	r3, [pc, #76]	@ (800d834 <netif_set_link_up+0x5c>)
 800d7e8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d7ec:	4912      	ldr	r1, [pc, #72]	@ (800d838 <netif_set_link_up+0x60>)
 800d7ee:	4813      	ldr	r0, [pc, #76]	@ (800d83c <netif_set_link_up+0x64>)
 800d7f0:	f009 fb54 	bl	8016e9c <iprintf>
 800d7f4:	e01b      	b.n	800d82e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7fc:	f003 0304 	and.w	r3, r3, #4
 800d800:	2b00      	cmp	r3, #0
 800d802:	d114      	bne.n	800d82e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d80a:	f043 0304 	orr.w	r3, r3, #4
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d816:	2103      	movs	r1, #3
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7ff ff6b 	bl	800d6f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	69db      	ldr	r3, [r3, #28]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d003      	beq.n	800d82e <netif_set_link_up+0x56>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	69db      	ldr	r3, [r3, #28]
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	08018588 	.word	0x08018588
 800d838:	08018770 	.word	0x08018770
 800d83c:	080185d8 	.word	0x080185d8

0800d840 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d107      	bne.n	800d85e <netif_set_link_down+0x1e>
 800d84e:	4b11      	ldr	r3, [pc, #68]	@ (800d894 <netif_set_link_down+0x54>)
 800d850:	f240 4206 	movw	r2, #1030	@ 0x406
 800d854:	4910      	ldr	r1, [pc, #64]	@ (800d898 <netif_set_link_down+0x58>)
 800d856:	4811      	ldr	r0, [pc, #68]	@ (800d89c <netif_set_link_down+0x5c>)
 800d858:	f009 fb20 	bl	8016e9c <iprintf>
 800d85c:	e017      	b.n	800d88e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d864:	f003 0304 	and.w	r3, r3, #4
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d010      	beq.n	800d88e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d872:	f023 0304 	bic.w	r3, r3, #4
 800d876:	b2da      	uxtb	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	69db      	ldr	r3, [r3, #28]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d003      	beq.n	800d88e <netif_set_link_down+0x4e>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	69db      	ldr	r3, [r3, #28]
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	08018588 	.word	0x08018588
 800d898:	08018794 	.word	0x08018794
 800d89c:	080185d8 	.word	0x080185d8

0800d8a0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d002      	beq.n	800d8b6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	683a      	ldr	r2, [r7, #0]
 800d8b4:	61da      	str	r2, [r3, #28]
  }
}
 800d8b6:	bf00      	nop
 800d8b8:	370c      	adds	r7, #12
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	b085      	sub	sp, #20
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	60f8      	str	r0, [r7, #12]
 800d8ca:	60b9      	str	r1, [r7, #8]
 800d8cc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d8ce:	f06f 030b 	mvn.w	r3, #11
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3714      	adds	r7, #20
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr
	...

0800d8e0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d8ea:	79fb      	ldrb	r3, [r7, #7]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d013      	beq.n	800d918 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d8f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d928 <netif_get_by_index+0x48>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	60fb      	str	r3, [r7, #12]
 800d8f6:	e00c      	b.n	800d912 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d8fe:	3301      	adds	r3, #1
 800d900:	b2db      	uxtb	r3, r3
 800d902:	79fa      	ldrb	r2, [r7, #7]
 800d904:	429a      	cmp	r2, r3
 800d906:	d101      	bne.n	800d90c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	e006      	b.n	800d91a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	60fb      	str	r3, [r7, #12]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d1ef      	bne.n	800d8f8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3714      	adds	r7, #20
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	20027358 	.word	0x20027358

0800d92c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d932:	f008 ffab 	bl	801688c <sys_arch_protect>
 800d936:	6038      	str	r0, [r7, #0]
 800d938:	4b0d      	ldr	r3, [pc, #52]	@ (800d970 <pbuf_free_ooseq+0x44>)
 800d93a:	2200      	movs	r2, #0
 800d93c:	701a      	strb	r2, [r3, #0]
 800d93e:	6838      	ldr	r0, [r7, #0]
 800d940:	f008 ffb2 	bl	80168a8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d944:	4b0b      	ldr	r3, [pc, #44]	@ (800d974 <pbuf_free_ooseq+0x48>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	607b      	str	r3, [r7, #4]
 800d94a:	e00a      	b.n	800d962 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d950:	2b00      	cmp	r3, #0
 800d952:	d003      	beq.n	800d95c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f002 f973 	bl	800fc40 <tcp_free_ooseq>
      return;
 800d95a:	e005      	b.n	800d968 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	607b      	str	r3, [r7, #4]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d1f1      	bne.n	800d94c <pbuf_free_ooseq+0x20>
    }
  }
}
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	20027361 	.word	0x20027361
 800d974:	20027370 	.word	0x20027370

0800d978 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d980:	f7ff ffd4 	bl	800d92c <pbuf_free_ooseq>
}
 800d984:	bf00      	nop
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d992:	f008 ff7b 	bl	801688c <sys_arch_protect>
 800d996:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d998:	4b0f      	ldr	r3, [pc, #60]	@ (800d9d8 <pbuf_pool_is_empty+0x4c>)
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d99e:	4b0e      	ldr	r3, [pc, #56]	@ (800d9d8 <pbuf_pool_is_empty+0x4c>)
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f008 ff7f 	bl	80168a8 <sys_arch_unprotect>

  if (!queued) {
 800d9aa:	78fb      	ldrb	r3, [r7, #3]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d10f      	bne.n	800d9d0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	480a      	ldr	r0, [pc, #40]	@ (800d9dc <pbuf_pool_is_empty+0x50>)
 800d9b4:	f7fe feaa 	bl	800c70c <tcpip_try_callback>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d008      	beq.n	800d9d0 <pbuf_pool_is_empty+0x44>
 800d9be:	f008 ff65 	bl	801688c <sys_arch_protect>
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	4b04      	ldr	r3, [pc, #16]	@ (800d9d8 <pbuf_pool_is_empty+0x4c>)
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	701a      	strb	r2, [r3, #0]
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f008 ff6c 	bl	80168a8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d9d0:	bf00      	nop
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	20027361 	.word	0x20027361
 800d9dc:	0800d979 	.word	0x0800d979

0800d9e0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	80fb      	strh	r3, [r7, #6]
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	68ba      	ldr	r2, [r7, #8]
 800da00:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	88fa      	ldrh	r2, [r7, #6]
 800da06:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	88ba      	ldrh	r2, [r7, #4]
 800da0c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800da0e:	8b3b      	ldrh	r3, [r7, #24]
 800da10:	b2da      	uxtb	r2, r3
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	7f3a      	ldrb	r2, [r7, #28]
 800da1a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2201      	movs	r2, #1
 800da20:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2200      	movs	r2, #0
 800da26:	73da      	strb	r2, [r3, #15]
}
 800da28:	bf00      	nop
 800da2a:	3714      	adds	r7, #20
 800da2c:	46bd      	mov	sp, r7
 800da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da32:	4770      	bx	lr

0800da34 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b08c      	sub	sp, #48	@ 0x30
 800da38:	af02      	add	r7, sp, #8
 800da3a:	4603      	mov	r3, r0
 800da3c:	71fb      	strb	r3, [r7, #7]
 800da3e:	460b      	mov	r3, r1
 800da40:	80bb      	strh	r3, [r7, #4]
 800da42:	4613      	mov	r3, r2
 800da44:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800da46:	79fb      	ldrb	r3, [r7, #7]
 800da48:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800da4a:	887b      	ldrh	r3, [r7, #2]
 800da4c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800da50:	d07f      	beq.n	800db52 <pbuf_alloc+0x11e>
 800da52:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800da56:	f300 80c8 	bgt.w	800dbea <pbuf_alloc+0x1b6>
 800da5a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800da5e:	d010      	beq.n	800da82 <pbuf_alloc+0x4e>
 800da60:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800da64:	f300 80c1 	bgt.w	800dbea <pbuf_alloc+0x1b6>
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d002      	beq.n	800da72 <pbuf_alloc+0x3e>
 800da6c:	2b41      	cmp	r3, #65	@ 0x41
 800da6e:	f040 80bc 	bne.w	800dbea <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800da72:	887a      	ldrh	r2, [r7, #2]
 800da74:	88bb      	ldrh	r3, [r7, #4]
 800da76:	4619      	mov	r1, r3
 800da78:	2000      	movs	r0, #0
 800da7a:	f000 f8d1 	bl	800dc20 <pbuf_alloc_reference>
 800da7e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800da80:	e0bd      	b.n	800dbfe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800da82:	2300      	movs	r3, #0
 800da84:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800da86:	2300      	movs	r3, #0
 800da88:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800da8a:	88bb      	ldrh	r3, [r7, #4]
 800da8c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800da8e:	200c      	movs	r0, #12
 800da90:	f7ff fb9a 	bl	800d1c8 <memp_malloc>
 800da94:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d109      	bne.n	800dab0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800da9c:	f7ff ff76 	bl	800d98c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800daa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d002      	beq.n	800daac <pbuf_alloc+0x78>
            pbuf_free(p);
 800daa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800daa8:	f000 faa8 	bl	800dffc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800daac:	2300      	movs	r3, #0
 800daae:	e0a7      	b.n	800dc00 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dab0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dab2:	3303      	adds	r3, #3
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	f023 0303 	bic.w	r3, r3, #3
 800daba:	b29b      	uxth	r3, r3
 800dabc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	8b7a      	ldrh	r2, [r7, #26]
 800dac4:	4293      	cmp	r3, r2
 800dac6:	bf28      	it	cs
 800dac8:	4613      	movcs	r3, r2
 800daca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dacc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dace:	3310      	adds	r3, #16
 800dad0:	693a      	ldr	r2, [r7, #16]
 800dad2:	4413      	add	r3, r2
 800dad4:	3303      	adds	r3, #3
 800dad6:	f023 0303 	bic.w	r3, r3, #3
 800dada:	4618      	mov	r0, r3
 800dadc:	89f9      	ldrh	r1, [r7, #14]
 800dade:	8b7a      	ldrh	r2, [r7, #26]
 800dae0:	2300      	movs	r3, #0
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	887b      	ldrh	r3, [r7, #2]
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	460b      	mov	r3, r1
 800daea:	4601      	mov	r1, r0
 800daec:	6938      	ldr	r0, [r7, #16]
 800daee:	f7ff ff77 	bl	800d9e0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	f003 0303 	and.w	r3, r3, #3
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d006      	beq.n	800db0c <pbuf_alloc+0xd8>
 800dafe:	4b42      	ldr	r3, [pc, #264]	@ (800dc08 <pbuf_alloc+0x1d4>)
 800db00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800db04:	4941      	ldr	r1, [pc, #260]	@ (800dc0c <pbuf_alloc+0x1d8>)
 800db06:	4842      	ldr	r0, [pc, #264]	@ (800dc10 <pbuf_alloc+0x1dc>)
 800db08:	f009 f9c8 	bl	8016e9c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800db0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db0e:	3303      	adds	r3, #3
 800db10:	f023 0303 	bic.w	r3, r3, #3
 800db14:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800db18:	d106      	bne.n	800db28 <pbuf_alloc+0xf4>
 800db1a:	4b3b      	ldr	r3, [pc, #236]	@ (800dc08 <pbuf_alloc+0x1d4>)
 800db1c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800db20:	493c      	ldr	r1, [pc, #240]	@ (800dc14 <pbuf_alloc+0x1e0>)
 800db22:	483b      	ldr	r0, [pc, #236]	@ (800dc10 <pbuf_alloc+0x1dc>)
 800db24:	f009 f9ba 	bl	8016e9c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800db28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d102      	bne.n	800db34 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	627b      	str	r3, [r7, #36]	@ 0x24
 800db32:	e002      	b.n	800db3a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	693a      	ldr	r2, [r7, #16]
 800db38:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800db3e:	8b7a      	ldrh	r2, [r7, #26]
 800db40:	89fb      	ldrh	r3, [r7, #14]
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800db46:	2300      	movs	r3, #0
 800db48:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800db4a:	8b7b      	ldrh	r3, [r7, #26]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d19e      	bne.n	800da8e <pbuf_alloc+0x5a>
      break;
 800db50:	e055      	b.n	800dbfe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800db52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db54:	3303      	adds	r3, #3
 800db56:	b29b      	uxth	r3, r3
 800db58:	f023 0303 	bic.w	r3, r3, #3
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	88bb      	ldrh	r3, [r7, #4]
 800db60:	3303      	adds	r3, #3
 800db62:	b29b      	uxth	r3, r3
 800db64:	f023 0303 	bic.w	r3, r3, #3
 800db68:	b29b      	uxth	r3, r3
 800db6a:	4413      	add	r3, r2
 800db6c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800db6e:	8b3b      	ldrh	r3, [r7, #24]
 800db70:	3310      	adds	r3, #16
 800db72:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800db74:	8b3a      	ldrh	r2, [r7, #24]
 800db76:	88bb      	ldrh	r3, [r7, #4]
 800db78:	3303      	adds	r3, #3
 800db7a:	f023 0303 	bic.w	r3, r3, #3
 800db7e:	429a      	cmp	r2, r3
 800db80:	d306      	bcc.n	800db90 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800db82:	8afa      	ldrh	r2, [r7, #22]
 800db84:	88bb      	ldrh	r3, [r7, #4]
 800db86:	3303      	adds	r3, #3
 800db88:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d201      	bcs.n	800db94 <pbuf_alloc+0x160>
        return NULL;
 800db90:	2300      	movs	r3, #0
 800db92:	e035      	b.n	800dc00 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800db94:	8afb      	ldrh	r3, [r7, #22]
 800db96:	4618      	mov	r0, r3
 800db98:	f7ff f972 	bl	800ce80 <mem_malloc>
 800db9c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800db9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d101      	bne.n	800dba8 <pbuf_alloc+0x174>
        return NULL;
 800dba4:	2300      	movs	r3, #0
 800dba6:	e02b      	b.n	800dc00 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dba8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbaa:	3310      	adds	r3, #16
 800dbac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbae:	4413      	add	r3, r2
 800dbb0:	3303      	adds	r3, #3
 800dbb2:	f023 0303 	bic.w	r3, r3, #3
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	88b9      	ldrh	r1, [r7, #4]
 800dbba:	88ba      	ldrh	r2, [r7, #4]
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	9301      	str	r3, [sp, #4]
 800dbc0:	887b      	ldrh	r3, [r7, #2]
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dbca:	f7ff ff09 	bl	800d9e0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	f003 0303 	and.w	r3, r3, #3
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d010      	beq.n	800dbfc <pbuf_alloc+0x1c8>
 800dbda:	4b0b      	ldr	r3, [pc, #44]	@ (800dc08 <pbuf_alloc+0x1d4>)
 800dbdc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800dbe0:	490d      	ldr	r1, [pc, #52]	@ (800dc18 <pbuf_alloc+0x1e4>)
 800dbe2:	480b      	ldr	r0, [pc, #44]	@ (800dc10 <pbuf_alloc+0x1dc>)
 800dbe4:	f009 f95a 	bl	8016e9c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dbe8:	e008      	b.n	800dbfc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dbea:	4b07      	ldr	r3, [pc, #28]	@ (800dc08 <pbuf_alloc+0x1d4>)
 800dbec:	f240 1227 	movw	r2, #295	@ 0x127
 800dbf0:	490a      	ldr	r1, [pc, #40]	@ (800dc1c <pbuf_alloc+0x1e8>)
 800dbf2:	4807      	ldr	r0, [pc, #28]	@ (800dc10 <pbuf_alloc+0x1dc>)
 800dbf4:	f009 f952 	bl	8016e9c <iprintf>
      return NULL;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	e001      	b.n	800dc00 <pbuf_alloc+0x1cc>
      break;
 800dbfc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800dbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3728      	adds	r7, #40	@ 0x28
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	080187b8 	.word	0x080187b8
 800dc0c:	080187e8 	.word	0x080187e8
 800dc10:	08018818 	.word	0x08018818
 800dc14:	08018840 	.word	0x08018840
 800dc18:	08018874 	.word	0x08018874
 800dc1c:	080188a0 	.word	0x080188a0

0800dc20 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af02      	add	r7, sp, #8
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	460b      	mov	r3, r1
 800dc2a:	807b      	strh	r3, [r7, #2]
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800dc30:	883b      	ldrh	r3, [r7, #0]
 800dc32:	2b41      	cmp	r3, #65	@ 0x41
 800dc34:	d009      	beq.n	800dc4a <pbuf_alloc_reference+0x2a>
 800dc36:	883b      	ldrh	r3, [r7, #0]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d006      	beq.n	800dc4a <pbuf_alloc_reference+0x2a>
 800dc3c:	4b0f      	ldr	r3, [pc, #60]	@ (800dc7c <pbuf_alloc_reference+0x5c>)
 800dc3e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800dc42:	490f      	ldr	r1, [pc, #60]	@ (800dc80 <pbuf_alloc_reference+0x60>)
 800dc44:	480f      	ldr	r0, [pc, #60]	@ (800dc84 <pbuf_alloc_reference+0x64>)
 800dc46:	f009 f929 	bl	8016e9c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800dc4a:	200b      	movs	r0, #11
 800dc4c:	f7ff fabc 	bl	800d1c8 <memp_malloc>
 800dc50:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d101      	bne.n	800dc5c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	e00b      	b.n	800dc74 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dc5c:	8879      	ldrh	r1, [r7, #2]
 800dc5e:	887a      	ldrh	r2, [r7, #2]
 800dc60:	2300      	movs	r3, #0
 800dc62:	9301      	str	r3, [sp, #4]
 800dc64:	883b      	ldrh	r3, [r7, #0]
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	460b      	mov	r3, r1
 800dc6a:	6879      	ldr	r1, [r7, #4]
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f7ff feb7 	bl	800d9e0 <pbuf_init_alloced_pbuf>
  return p;
 800dc72:	68fb      	ldr	r3, [r7, #12]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	080187b8 	.word	0x080187b8
 800dc80:	080188bc 	.word	0x080188bc
 800dc84:	08018818 	.word	0x08018818

0800dc88 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b088      	sub	sp, #32
 800dc8c:	af02      	add	r7, sp, #8
 800dc8e:	607b      	str	r3, [r7, #4]
 800dc90:	4603      	mov	r3, r0
 800dc92:	73fb      	strb	r3, [r7, #15]
 800dc94:	460b      	mov	r3, r1
 800dc96:	81bb      	strh	r3, [r7, #12]
 800dc98:	4613      	mov	r3, r2
 800dc9a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dc9c:	7bfb      	ldrb	r3, [r7, #15]
 800dc9e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dca0:	8a7b      	ldrh	r3, [r7, #18]
 800dca2:	3303      	adds	r3, #3
 800dca4:	f023 0203 	bic.w	r2, r3, #3
 800dca8:	89bb      	ldrh	r3, [r7, #12]
 800dcaa:	441a      	add	r2, r3
 800dcac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d901      	bls.n	800dcb6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	e018      	b.n	800dce8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dcb6:	6a3b      	ldr	r3, [r7, #32]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d007      	beq.n	800dccc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dcbc:	8a7b      	ldrh	r3, [r7, #18]
 800dcbe:	3303      	adds	r3, #3
 800dcc0:	f023 0303 	bic.w	r3, r3, #3
 800dcc4:	6a3a      	ldr	r2, [r7, #32]
 800dcc6:	4413      	add	r3, r2
 800dcc8:	617b      	str	r3, [r7, #20]
 800dcca:	e001      	b.n	800dcd0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dccc:	2300      	movs	r3, #0
 800dcce:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	89b9      	ldrh	r1, [r7, #12]
 800dcd4:	89ba      	ldrh	r2, [r7, #12]
 800dcd6:	2302      	movs	r3, #2
 800dcd8:	9301      	str	r3, [sp, #4]
 800dcda:	897b      	ldrh	r3, [r7, #10]
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	460b      	mov	r3, r1
 800dce0:	6979      	ldr	r1, [r7, #20]
 800dce2:	f7ff fe7d 	bl	800d9e0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dce6:	687b      	ldr	r3, [r7, #4]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d106      	bne.n	800dd10 <pbuf_realloc+0x20>
 800dd02:	4b3a      	ldr	r3, [pc, #232]	@ (800ddec <pbuf_realloc+0xfc>)
 800dd04:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800dd08:	4939      	ldr	r1, [pc, #228]	@ (800ddf0 <pbuf_realloc+0x100>)
 800dd0a:	483a      	ldr	r0, [pc, #232]	@ (800ddf4 <pbuf_realloc+0x104>)
 800dd0c:	f009 f8c6 	bl	8016e9c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	891b      	ldrh	r3, [r3, #8]
 800dd14:	887a      	ldrh	r2, [r7, #2]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d263      	bcs.n	800dde2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	891a      	ldrh	r2, [r3, #8]
 800dd1e:	887b      	ldrh	r3, [r7, #2]
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dd24:	887b      	ldrh	r3, [r7, #2]
 800dd26:	817b      	strh	r3, [r7, #10]
  q = p;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800dd2c:	e018      	b.n	800dd60 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	895b      	ldrh	r3, [r3, #10]
 800dd32:	897a      	ldrh	r2, [r7, #10]
 800dd34:	1ad3      	subs	r3, r2, r3
 800dd36:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	891a      	ldrh	r2, [r3, #8]
 800dd3c:	893b      	ldrh	r3, [r7, #8]
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d106      	bne.n	800dd60 <pbuf_realloc+0x70>
 800dd52:	4b26      	ldr	r3, [pc, #152]	@ (800ddec <pbuf_realloc+0xfc>)
 800dd54:	f240 12af 	movw	r2, #431	@ 0x1af
 800dd58:	4927      	ldr	r1, [pc, #156]	@ (800ddf8 <pbuf_realloc+0x108>)
 800dd5a:	4826      	ldr	r0, [pc, #152]	@ (800ddf4 <pbuf_realloc+0x104>)
 800dd5c:	f009 f89e 	bl	8016e9c <iprintf>
  while (rem_len > q->len) {
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	895b      	ldrh	r3, [r3, #10]
 800dd64:	897a      	ldrh	r2, [r7, #10]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d8e1      	bhi.n	800dd2e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	7b1b      	ldrb	r3, [r3, #12]
 800dd6e:	f003 030f 	and.w	r3, r3, #15
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d121      	bne.n	800ddba <pbuf_realloc+0xca>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	895b      	ldrh	r3, [r3, #10]
 800dd7a:	897a      	ldrh	r2, [r7, #10]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d01c      	beq.n	800ddba <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	7b5b      	ldrb	r3, [r3, #13]
 800dd84:	f003 0302 	and.w	r3, r3, #2
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d116      	bne.n	800ddba <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	685a      	ldr	r2, [r3, #4]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	1ad3      	subs	r3, r2, r3
 800dd94:	b29a      	uxth	r2, r3
 800dd96:	897b      	ldrh	r3, [r7, #10]
 800dd98:	4413      	add	r3, r2
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f7fe ff64 	bl	800cc6c <mem_trim>
 800dda4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d106      	bne.n	800ddba <pbuf_realloc+0xca>
 800ddac:	4b0f      	ldr	r3, [pc, #60]	@ (800ddec <pbuf_realloc+0xfc>)
 800ddae:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800ddb2:	4912      	ldr	r1, [pc, #72]	@ (800ddfc <pbuf_realloc+0x10c>)
 800ddb4:	480f      	ldr	r0, [pc, #60]	@ (800ddf4 <pbuf_realloc+0x104>)
 800ddb6:	f009 f871 	bl	8016e9c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	897a      	ldrh	r2, [r7, #10]
 800ddbe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	895a      	ldrh	r2, [r3, #10]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d004      	beq.n	800ddda <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f000 f911 	bl	800dffc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2200      	movs	r2, #0
 800ddde:	601a      	str	r2, [r3, #0]
 800dde0:	e000      	b.n	800dde4 <pbuf_realloc+0xf4>
    return;
 800dde2:	bf00      	nop

}
 800dde4:	3710      	adds	r7, #16
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	080187b8 	.word	0x080187b8
 800ddf0:	080188d0 	.word	0x080188d0
 800ddf4:	08018818 	.word	0x08018818
 800ddf8:	080188e8 	.word	0x080188e8
 800ddfc:	08018900 	.word	0x08018900

0800de00 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b086      	sub	sp, #24
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	4613      	mov	r3, r2
 800de0c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d106      	bne.n	800de22 <pbuf_add_header_impl+0x22>
 800de14:	4b2b      	ldr	r3, [pc, #172]	@ (800dec4 <pbuf_add_header_impl+0xc4>)
 800de16:	f240 12df 	movw	r2, #479	@ 0x1df
 800de1a:	492b      	ldr	r1, [pc, #172]	@ (800dec8 <pbuf_add_header_impl+0xc8>)
 800de1c:	482b      	ldr	r0, [pc, #172]	@ (800decc <pbuf_add_header_impl+0xcc>)
 800de1e:	f009 f83d 	bl	8016e9c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d003      	beq.n	800de30 <pbuf_add_header_impl+0x30>
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de2e:	d301      	bcc.n	800de34 <pbuf_add_header_impl+0x34>
    return 1;
 800de30:	2301      	movs	r3, #1
 800de32:	e043      	b.n	800debc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d101      	bne.n	800de3e <pbuf_add_header_impl+0x3e>
    return 0;
 800de3a:	2300      	movs	r3, #0
 800de3c:	e03e      	b.n	800debc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	891a      	ldrh	r2, [r3, #8]
 800de46:	8a7b      	ldrh	r3, [r7, #18]
 800de48:	4413      	add	r3, r2
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	8a7a      	ldrh	r2, [r7, #18]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d901      	bls.n	800de56 <pbuf_add_header_impl+0x56>
    return 1;
 800de52:	2301      	movs	r3, #1
 800de54:	e032      	b.n	800debc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	7b1b      	ldrb	r3, [r3, #12]
 800de5a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800de5c:	8a3b      	ldrh	r3, [r7, #16]
 800de5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de62:	2b00      	cmp	r3, #0
 800de64:	d00c      	beq.n	800de80 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	425b      	negs	r3, r3
 800de6e:	4413      	add	r3, r2
 800de70:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	3310      	adds	r3, #16
 800de76:	697a      	ldr	r2, [r7, #20]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d20d      	bcs.n	800de98 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800de7c:	2301      	movs	r3, #1
 800de7e:	e01d      	b.n	800debc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800de80:	79fb      	ldrb	r3, [r7, #7]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d006      	beq.n	800de94 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	685a      	ldr	r2, [r3, #4]
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	425b      	negs	r3, r3
 800de8e:	4413      	add	r3, r2
 800de90:	617b      	str	r3, [r7, #20]
 800de92:	e001      	b.n	800de98 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800de94:	2301      	movs	r3, #1
 800de96:	e011      	b.n	800debc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	697a      	ldr	r2, [r7, #20]
 800de9c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	895a      	ldrh	r2, [r3, #10]
 800dea2:	8a7b      	ldrh	r3, [r7, #18]
 800dea4:	4413      	add	r3, r2
 800dea6:	b29a      	uxth	r2, r3
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	891a      	ldrh	r2, [r3, #8]
 800deb0:	8a7b      	ldrh	r3, [r7, #18]
 800deb2:	4413      	add	r3, r2
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	811a      	strh	r2, [r3, #8]


  return 0;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3718      	adds	r7, #24
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	080187b8 	.word	0x080187b8
 800dec8:	0801891c 	.word	0x0801891c
 800decc:	08018818 	.word	0x08018818

0800ded0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800deda:	2200      	movs	r2, #0
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7ff ff8e 	bl	800de00 <pbuf_add_header_impl>
 800dee4:	4603      	mov	r3, r0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
	...

0800def0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d106      	bne.n	800df0e <pbuf_remove_header+0x1e>
 800df00:	4b20      	ldr	r3, [pc, #128]	@ (800df84 <pbuf_remove_header+0x94>)
 800df02:	f240 224b 	movw	r2, #587	@ 0x24b
 800df06:	4920      	ldr	r1, [pc, #128]	@ (800df88 <pbuf_remove_header+0x98>)
 800df08:	4820      	ldr	r0, [pc, #128]	@ (800df8c <pbuf_remove_header+0x9c>)
 800df0a:	f008 ffc7 	bl	8016e9c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d003      	beq.n	800df1c <pbuf_remove_header+0x2c>
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df1a:	d301      	bcc.n	800df20 <pbuf_remove_header+0x30>
    return 1;
 800df1c:	2301      	movs	r3, #1
 800df1e:	e02c      	b.n	800df7a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d101      	bne.n	800df2a <pbuf_remove_header+0x3a>
    return 0;
 800df26:	2300      	movs	r3, #0
 800df28:	e027      	b.n	800df7a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	895b      	ldrh	r3, [r3, #10]
 800df32:	89fa      	ldrh	r2, [r7, #14]
 800df34:	429a      	cmp	r2, r3
 800df36:	d908      	bls.n	800df4a <pbuf_remove_header+0x5a>
 800df38:	4b12      	ldr	r3, [pc, #72]	@ (800df84 <pbuf_remove_header+0x94>)
 800df3a:	f240 2255 	movw	r2, #597	@ 0x255
 800df3e:	4914      	ldr	r1, [pc, #80]	@ (800df90 <pbuf_remove_header+0xa0>)
 800df40:	4812      	ldr	r0, [pc, #72]	@ (800df8c <pbuf_remove_header+0x9c>)
 800df42:	f008 ffab 	bl	8016e9c <iprintf>
 800df46:	2301      	movs	r3, #1
 800df48:	e017      	b.n	800df7a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	685a      	ldr	r2, [r3, #4]
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	441a      	add	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	895a      	ldrh	r2, [r3, #10]
 800df60:	89fb      	ldrh	r3, [r7, #14]
 800df62:	1ad3      	subs	r3, r2, r3
 800df64:	b29a      	uxth	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	891a      	ldrh	r2, [r3, #8]
 800df6e:	89fb      	ldrh	r3, [r7, #14]
 800df70:	1ad3      	subs	r3, r2, r3
 800df72:	b29a      	uxth	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	080187b8 	.word	0x080187b8
 800df88:	0801891c 	.word	0x0801891c
 800df8c:	08018818 	.word	0x08018818
 800df90:	08018928 	.word	0x08018928

0800df94 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	460b      	mov	r3, r1
 800df9e:	807b      	strh	r3, [r7, #2]
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dfa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	da08      	bge.n	800dfbe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dfac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dfb0:	425b      	negs	r3, r3
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f7ff ff9b 	bl	800def0 <pbuf_remove_header>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	e007      	b.n	800dfce <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dfbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dfc2:	787a      	ldrb	r2, [r7, #1]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7ff ff1a 	bl	800de00 <pbuf_add_header_impl>
 800dfcc:	4603      	mov	r3, r0
  }
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b082      	sub	sp, #8
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
 800dfde:	460b      	mov	r3, r1
 800dfe0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dfe2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	4619      	mov	r1, r3
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7ff ffd2 	bl	800df94 <pbuf_header_impl>
 800dff0:	4603      	mov	r3, r0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3708      	adds	r7, #8
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
	...

0800dffc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b088      	sub	sp, #32
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d10b      	bne.n	800e022 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d106      	bne.n	800e01e <pbuf_free+0x22>
 800e010:	4b3b      	ldr	r3, [pc, #236]	@ (800e100 <pbuf_free+0x104>)
 800e012:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e016:	493b      	ldr	r1, [pc, #236]	@ (800e104 <pbuf_free+0x108>)
 800e018:	483b      	ldr	r0, [pc, #236]	@ (800e108 <pbuf_free+0x10c>)
 800e01a:	f008 ff3f 	bl	8016e9c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e01e:	2300      	movs	r3, #0
 800e020:	e069      	b.n	800e0f6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e022:	2300      	movs	r3, #0
 800e024:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e026:	e062      	b.n	800e0ee <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e028:	f008 fc30 	bl	801688c <sys_arch_protect>
 800e02c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	7b9b      	ldrb	r3, [r3, #14]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d106      	bne.n	800e044 <pbuf_free+0x48>
 800e036:	4b32      	ldr	r3, [pc, #200]	@ (800e100 <pbuf_free+0x104>)
 800e038:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e03c:	4933      	ldr	r1, [pc, #204]	@ (800e10c <pbuf_free+0x110>)
 800e03e:	4832      	ldr	r0, [pc, #200]	@ (800e108 <pbuf_free+0x10c>)
 800e040:	f008 ff2c 	bl	8016e9c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	7b9b      	ldrb	r3, [r3, #14]
 800e048:	3b01      	subs	r3, #1
 800e04a:	b2da      	uxtb	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	739a      	strb	r2, [r3, #14]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	7b9b      	ldrb	r3, [r3, #14]
 800e054:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e056:	69b8      	ldr	r0, [r7, #24]
 800e058:	f008 fc26 	bl	80168a8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e05c:	7dfb      	ldrb	r3, [r7, #23]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d143      	bne.n	800e0ea <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	7b1b      	ldrb	r3, [r3, #12]
 800e06c:	f003 030f 	and.w	r3, r3, #15
 800e070:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	7b5b      	ldrb	r3, [r3, #13]
 800e076:	f003 0302 	and.w	r3, r3, #2
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d011      	beq.n	800e0a2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	691b      	ldr	r3, [r3, #16]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d106      	bne.n	800e098 <pbuf_free+0x9c>
 800e08a:	4b1d      	ldr	r3, [pc, #116]	@ (800e100 <pbuf_free+0x104>)
 800e08c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e090:	491f      	ldr	r1, [pc, #124]	@ (800e110 <pbuf_free+0x114>)
 800e092:	481d      	ldr	r0, [pc, #116]	@ (800e108 <pbuf_free+0x10c>)
 800e094:	f008 ff02 	bl	8016e9c <iprintf>
        pc->custom_free_function(p);
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	691b      	ldr	r3, [r3, #16]
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	4798      	blx	r3
 800e0a0:	e01d      	b.n	800e0de <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e0a2:	7bfb      	ldrb	r3, [r7, #15]
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d104      	bne.n	800e0b2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e0a8:	6879      	ldr	r1, [r7, #4]
 800e0aa:	200c      	movs	r0, #12
 800e0ac:	f7ff f902 	bl	800d2b4 <memp_free>
 800e0b0:	e015      	b.n	800e0de <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e0b2:	7bfb      	ldrb	r3, [r7, #15]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d104      	bne.n	800e0c2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e0b8:	6879      	ldr	r1, [r7, #4]
 800e0ba:	200b      	movs	r0, #11
 800e0bc:	f7ff f8fa 	bl	800d2b4 <memp_free>
 800e0c0:	e00d      	b.n	800e0de <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e0c2:	7bfb      	ldrb	r3, [r7, #15]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d103      	bne.n	800e0d0 <pbuf_free+0xd4>
          mem_free(p);
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f7fe fd3f 	bl	800cb4c <mem_free>
 800e0ce:	e006      	b.n	800e0de <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e0d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e100 <pbuf_free+0x104>)
 800e0d2:	f240 320f 	movw	r2, #783	@ 0x30f
 800e0d6:	490f      	ldr	r1, [pc, #60]	@ (800e114 <pbuf_free+0x118>)
 800e0d8:	480b      	ldr	r0, [pc, #44]	@ (800e108 <pbuf_free+0x10c>)
 800e0da:	f008 fedf 	bl	8016e9c <iprintf>
        }
      }
      count++;
 800e0de:	7ffb      	ldrb	r3, [r7, #31]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	607b      	str	r3, [r7, #4]
 800e0e8:	e001      	b.n	800e0ee <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d199      	bne.n	800e028 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e0f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3720      	adds	r7, #32
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	080187b8 	.word	0x080187b8
 800e104:	0801891c 	.word	0x0801891c
 800e108:	08018818 	.word	0x08018818
 800e10c:	08018948 	.word	0x08018948
 800e110:	08018960 	.word	0x08018960
 800e114:	08018984 	.word	0x08018984

0800e118 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e124:	e005      	b.n	800e132 <pbuf_clen+0x1a>
    ++len;
 800e126:	89fb      	ldrh	r3, [r7, #14]
 800e128:	3301      	adds	r3, #1
 800e12a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d1f6      	bne.n	800e126 <pbuf_clen+0xe>
  }
  return len;
 800e138:	89fb      	ldrh	r3, [r7, #14]
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3714      	adds	r7, #20
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr
	...

0800e148 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d016      	beq.n	800e184 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e156:	f008 fb99 	bl	801688c <sys_arch_protect>
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	7b9b      	ldrb	r3, [r3, #14]
 800e160:	3301      	adds	r3, #1
 800e162:	b2da      	uxtb	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	739a      	strb	r2, [r3, #14]
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f008 fb9d 	bl	80168a8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	7b9b      	ldrb	r3, [r3, #14]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d106      	bne.n	800e184 <pbuf_ref+0x3c>
 800e176:	4b05      	ldr	r3, [pc, #20]	@ (800e18c <pbuf_ref+0x44>)
 800e178:	f240 3242 	movw	r2, #834	@ 0x342
 800e17c:	4904      	ldr	r1, [pc, #16]	@ (800e190 <pbuf_ref+0x48>)
 800e17e:	4805      	ldr	r0, [pc, #20]	@ (800e194 <pbuf_ref+0x4c>)
 800e180:	f008 fe8c 	bl	8016e9c <iprintf>
  }
}
 800e184:	bf00      	nop
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	080187b8 	.word	0x080187b8
 800e190:	08018998 	.word	0x08018998
 800e194:	08018818 	.word	0x08018818

0800e198 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d002      	beq.n	800e1ae <pbuf_cat+0x16>
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d107      	bne.n	800e1be <pbuf_cat+0x26>
 800e1ae:	4b20      	ldr	r3, [pc, #128]	@ (800e230 <pbuf_cat+0x98>)
 800e1b0:	f240 3259 	movw	r2, #857	@ 0x359
 800e1b4:	491f      	ldr	r1, [pc, #124]	@ (800e234 <pbuf_cat+0x9c>)
 800e1b6:	4820      	ldr	r0, [pc, #128]	@ (800e238 <pbuf_cat+0xa0>)
 800e1b8:	f008 fe70 	bl	8016e9c <iprintf>
 800e1bc:	e034      	b.n	800e228 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	60fb      	str	r3, [r7, #12]
 800e1c2:	e00a      	b.n	800e1da <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	891a      	ldrh	r2, [r3, #8]
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	891b      	ldrh	r3, [r3, #8]
 800e1cc:	4413      	add	r3, r2
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	60fb      	str	r3, [r7, #12]
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1f0      	bne.n	800e1c4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	891a      	ldrh	r2, [r3, #8]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	895b      	ldrh	r3, [r3, #10]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d006      	beq.n	800e1fc <pbuf_cat+0x64>
 800e1ee:	4b10      	ldr	r3, [pc, #64]	@ (800e230 <pbuf_cat+0x98>)
 800e1f0:	f240 3262 	movw	r2, #866	@ 0x362
 800e1f4:	4911      	ldr	r1, [pc, #68]	@ (800e23c <pbuf_cat+0xa4>)
 800e1f6:	4810      	ldr	r0, [pc, #64]	@ (800e238 <pbuf_cat+0xa0>)
 800e1f8:	f008 fe50 	bl	8016e9c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d006      	beq.n	800e212 <pbuf_cat+0x7a>
 800e204:	4b0a      	ldr	r3, [pc, #40]	@ (800e230 <pbuf_cat+0x98>)
 800e206:	f240 3263 	movw	r2, #867	@ 0x363
 800e20a:	490d      	ldr	r1, [pc, #52]	@ (800e240 <pbuf_cat+0xa8>)
 800e20c:	480a      	ldr	r0, [pc, #40]	@ (800e238 <pbuf_cat+0xa0>)
 800e20e:	f008 fe45 	bl	8016e9c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	891a      	ldrh	r2, [r3, #8]
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	891b      	ldrh	r3, [r3, #8]
 800e21a:	4413      	add	r3, r2
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	683a      	ldr	r2, [r7, #0]
 800e226:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	080187b8 	.word	0x080187b8
 800e234:	080189ac 	.word	0x080189ac
 800e238:	08018818 	.word	0x08018818
 800e23c:	080189e4 	.word	0x080189e4
 800e240:	08018a14 	.word	0x08018a14

0800e244 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b086      	sub	sp, #24
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e24e:	2300      	movs	r3, #0
 800e250:	617b      	str	r3, [r7, #20]
 800e252:	2300      	movs	r3, #0
 800e254:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d008      	beq.n	800e26e <pbuf_copy+0x2a>
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d005      	beq.n	800e26e <pbuf_copy+0x2a>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	891a      	ldrh	r2, [r3, #8]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	891b      	ldrh	r3, [r3, #8]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d209      	bcs.n	800e282 <pbuf_copy+0x3e>
 800e26e:	4b57      	ldr	r3, [pc, #348]	@ (800e3cc <pbuf_copy+0x188>)
 800e270:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e274:	4956      	ldr	r1, [pc, #344]	@ (800e3d0 <pbuf_copy+0x18c>)
 800e276:	4857      	ldr	r0, [pc, #348]	@ (800e3d4 <pbuf_copy+0x190>)
 800e278:	f008 fe10 	bl	8016e9c <iprintf>
 800e27c:	f06f 030f 	mvn.w	r3, #15
 800e280:	e09f      	b.n	800e3c2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	895b      	ldrh	r3, [r3, #10]
 800e286:	461a      	mov	r2, r3
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	1ad2      	subs	r2, r2, r3
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	895b      	ldrh	r3, [r3, #10]
 800e290:	4619      	mov	r1, r3
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	1acb      	subs	r3, r1, r3
 800e296:	429a      	cmp	r2, r3
 800e298:	d306      	bcc.n	800e2a8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	895b      	ldrh	r3, [r3, #10]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	1ad3      	subs	r3, r2, r3
 800e2a4:	60fb      	str	r3, [r7, #12]
 800e2a6:	e005      	b.n	800e2b4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	895b      	ldrh	r3, [r3, #10]
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	685a      	ldr	r2, [r3, #4]
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	18d0      	adds	r0, r2, r3
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	685a      	ldr	r2, [r3, #4]
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	f009 f813 	bl	80172f2 <memcpy>
    offset_to += len;
 800e2cc:	697a      	ldr	r2, [r7, #20]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e2d4:	693a      	ldr	r2, [r7, #16]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	4413      	add	r3, r2
 800e2da:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	895b      	ldrh	r3, [r3, #10]
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d906      	bls.n	800e2f6 <pbuf_copy+0xb2>
 800e2e8:	4b38      	ldr	r3, [pc, #224]	@ (800e3cc <pbuf_copy+0x188>)
 800e2ea:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e2ee:	493a      	ldr	r1, [pc, #232]	@ (800e3d8 <pbuf_copy+0x194>)
 800e2f0:	4838      	ldr	r0, [pc, #224]	@ (800e3d4 <pbuf_copy+0x190>)
 800e2f2:	f008 fdd3 	bl	8016e9c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	895b      	ldrh	r3, [r3, #10]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d906      	bls.n	800e310 <pbuf_copy+0xcc>
 800e302:	4b32      	ldr	r3, [pc, #200]	@ (800e3cc <pbuf_copy+0x188>)
 800e304:	f240 32da 	movw	r2, #986	@ 0x3da
 800e308:	4934      	ldr	r1, [pc, #208]	@ (800e3dc <pbuf_copy+0x198>)
 800e30a:	4832      	ldr	r0, [pc, #200]	@ (800e3d4 <pbuf_copy+0x190>)
 800e30c:	f008 fdc6 	bl	8016e9c <iprintf>
    if (offset_from >= p_from->len) {
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	895b      	ldrh	r3, [r3, #10]
 800e314:	461a      	mov	r2, r3
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	4293      	cmp	r3, r2
 800e31a:	d304      	bcc.n	800e326 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e31c:	2300      	movs	r3, #0
 800e31e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	895b      	ldrh	r3, [r3, #10]
 800e32a:	461a      	mov	r2, r3
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	4293      	cmp	r3, r2
 800e330:	d114      	bne.n	800e35c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d10c      	bne.n	800e35c <pbuf_copy+0x118>
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d009      	beq.n	800e35c <pbuf_copy+0x118>
 800e348:	4b20      	ldr	r3, [pc, #128]	@ (800e3cc <pbuf_copy+0x188>)
 800e34a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e34e:	4924      	ldr	r1, [pc, #144]	@ (800e3e0 <pbuf_copy+0x19c>)
 800e350:	4820      	ldr	r0, [pc, #128]	@ (800e3d4 <pbuf_copy+0x190>)
 800e352:	f008 fda3 	bl	8016e9c <iprintf>
 800e356:	f06f 030f 	mvn.w	r3, #15
 800e35a:	e032      	b.n	800e3c2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d013      	beq.n	800e38a <pbuf_copy+0x146>
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	895a      	ldrh	r2, [r3, #10]
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	891b      	ldrh	r3, [r3, #8]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d10d      	bne.n	800e38a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d009      	beq.n	800e38a <pbuf_copy+0x146>
 800e376:	4b15      	ldr	r3, [pc, #84]	@ (800e3cc <pbuf_copy+0x188>)
 800e378:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e37c:	4919      	ldr	r1, [pc, #100]	@ (800e3e4 <pbuf_copy+0x1a0>)
 800e37e:	4815      	ldr	r0, [pc, #84]	@ (800e3d4 <pbuf_copy+0x190>)
 800e380:	f008 fd8c 	bl	8016e9c <iprintf>
 800e384:	f06f 0305 	mvn.w	r3, #5
 800e388:	e01b      	b.n	800e3c2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d013      	beq.n	800e3b8 <pbuf_copy+0x174>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	895a      	ldrh	r2, [r3, #10]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	891b      	ldrh	r3, [r3, #8]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d10d      	bne.n	800e3b8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d009      	beq.n	800e3b8 <pbuf_copy+0x174>
 800e3a4:	4b09      	ldr	r3, [pc, #36]	@ (800e3cc <pbuf_copy+0x188>)
 800e3a6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e3aa:	490e      	ldr	r1, [pc, #56]	@ (800e3e4 <pbuf_copy+0x1a0>)
 800e3ac:	4809      	ldr	r0, [pc, #36]	@ (800e3d4 <pbuf_copy+0x190>)
 800e3ae:	f008 fd75 	bl	8016e9c <iprintf>
 800e3b2:	f06f 0305 	mvn.w	r3, #5
 800e3b6:	e004      	b.n	800e3c2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	f47f af61 	bne.w	800e282 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e3c0:	2300      	movs	r3, #0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3718      	adds	r7, #24
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	080187b8 	.word	0x080187b8
 800e3d0:	08018a60 	.word	0x08018a60
 800e3d4:	08018818 	.word	0x08018818
 800e3d8:	08018a90 	.word	0x08018a90
 800e3dc:	08018aa8 	.word	0x08018aa8
 800e3e0:	08018ac4 	.word	0x08018ac4
 800e3e4:	08018ad4 	.word	0x08018ad4

0800e3e8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b088      	sub	sp, #32
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	80fb      	strh	r3, [r7, #6]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e3fe:	2300      	movs	r3, #0
 800e400:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e402:	2300      	movs	r3, #0
 800e404:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d108      	bne.n	800e41e <pbuf_copy_partial+0x36>
 800e40c:	4b2b      	ldr	r3, [pc, #172]	@ (800e4bc <pbuf_copy_partial+0xd4>)
 800e40e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e412:	492b      	ldr	r1, [pc, #172]	@ (800e4c0 <pbuf_copy_partial+0xd8>)
 800e414:	482b      	ldr	r0, [pc, #172]	@ (800e4c4 <pbuf_copy_partial+0xdc>)
 800e416:	f008 fd41 	bl	8016e9c <iprintf>
 800e41a:	2300      	movs	r3, #0
 800e41c:	e04a      	b.n	800e4b4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d108      	bne.n	800e436 <pbuf_copy_partial+0x4e>
 800e424:	4b25      	ldr	r3, [pc, #148]	@ (800e4bc <pbuf_copy_partial+0xd4>)
 800e426:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e42a:	4927      	ldr	r1, [pc, #156]	@ (800e4c8 <pbuf_copy_partial+0xe0>)
 800e42c:	4825      	ldr	r0, [pc, #148]	@ (800e4c4 <pbuf_copy_partial+0xdc>)
 800e42e:	f008 fd35 	bl	8016e9c <iprintf>
 800e432:	2300      	movs	r3, #0
 800e434:	e03e      	b.n	800e4b4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	61fb      	str	r3, [r7, #28]
 800e43a:	e034      	b.n	800e4a6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e43c:	88bb      	ldrh	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00a      	beq.n	800e458 <pbuf_copy_partial+0x70>
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	895b      	ldrh	r3, [r3, #10]
 800e446:	88ba      	ldrh	r2, [r7, #4]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d305      	bcc.n	800e458 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	895b      	ldrh	r3, [r3, #10]
 800e450:	88ba      	ldrh	r2, [r7, #4]
 800e452:	1ad3      	subs	r3, r2, r3
 800e454:	80bb      	strh	r3, [r7, #4]
 800e456:	e023      	b.n	800e4a0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	895a      	ldrh	r2, [r3, #10]
 800e45c:	88bb      	ldrh	r3, [r7, #4]
 800e45e:	1ad3      	subs	r3, r2, r3
 800e460:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e462:	8b3a      	ldrh	r2, [r7, #24]
 800e464:	88fb      	ldrh	r3, [r7, #6]
 800e466:	429a      	cmp	r2, r3
 800e468:	d901      	bls.n	800e46e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e46a:	88fb      	ldrh	r3, [r7, #6]
 800e46c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e46e:	8b7b      	ldrh	r3, [r7, #26]
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	18d0      	adds	r0, r2, r3
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	685a      	ldr	r2, [r3, #4]
 800e478:	88bb      	ldrh	r3, [r7, #4]
 800e47a:	4413      	add	r3, r2
 800e47c:	8b3a      	ldrh	r2, [r7, #24]
 800e47e:	4619      	mov	r1, r3
 800e480:	f008 ff37 	bl	80172f2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e484:	8afa      	ldrh	r2, [r7, #22]
 800e486:	8b3b      	ldrh	r3, [r7, #24]
 800e488:	4413      	add	r3, r2
 800e48a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e48c:	8b7a      	ldrh	r2, [r7, #26]
 800e48e:	8b3b      	ldrh	r3, [r7, #24]
 800e490:	4413      	add	r3, r2
 800e492:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e494:	88fa      	ldrh	r2, [r7, #6]
 800e496:	8b3b      	ldrh	r3, [r7, #24]
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e49c:	2300      	movs	r3, #0
 800e49e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	61fb      	str	r3, [r7, #28]
 800e4a6:	88fb      	ldrh	r3, [r7, #6]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <pbuf_copy_partial+0xca>
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1c4      	bne.n	800e43c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e4b2:	8afb      	ldrh	r3, [r7, #22]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3720      	adds	r7, #32
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	080187b8 	.word	0x080187b8
 800e4c0:	08018b00 	.word	0x08018b00
 800e4c4:	08018818 	.word	0x08018818
 800e4c8:	08018b20 	.word	0x08018b20

0800e4cc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	603a      	str	r2, [r7, #0]
 800e4d6:	71fb      	strb	r3, [r7, #7]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	8919      	ldrh	r1, [r3, #8]
 800e4e0:	88ba      	ldrh	r2, [r7, #4]
 800e4e2:	79fb      	ldrb	r3, [r7, #7]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7ff faa5 	bl	800da34 <pbuf_alloc>
 800e4ea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d101      	bne.n	800e4f6 <pbuf_clone+0x2a>
    return NULL;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	e011      	b.n	800e51a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e4f6:	6839      	ldr	r1, [r7, #0]
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f7ff fea3 	bl	800e244 <pbuf_copy>
 800e4fe:	4603      	mov	r3, r0
 800e500:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e502:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d006      	beq.n	800e518 <pbuf_clone+0x4c>
 800e50a:	4b06      	ldr	r3, [pc, #24]	@ (800e524 <pbuf_clone+0x58>)
 800e50c:	f240 5224 	movw	r2, #1316	@ 0x524
 800e510:	4905      	ldr	r1, [pc, #20]	@ (800e528 <pbuf_clone+0x5c>)
 800e512:	4806      	ldr	r0, [pc, #24]	@ (800e52c <pbuf_clone+0x60>)
 800e514:	f008 fcc2 	bl	8016e9c <iprintf>
  return q;
 800e518:	68fb      	ldr	r3, [r7, #12]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	080187b8 	.word	0x080187b8
 800e528:	08018c2c 	.word	0x08018c2c
 800e52c:	08018818 	.word	0x08018818

0800e530 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e534:	f008 fbb2 	bl	8016c9c <rand>
 800e538:	4603      	mov	r3, r0
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e540:	b29b      	uxth	r3, r3
 800e542:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e546:	b29a      	uxth	r2, r3
 800e548:	4b01      	ldr	r3, [pc, #4]	@ (800e550 <tcp_init+0x20>)
 800e54a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e54c:	bf00      	nop
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	20000024 	.word	0x20000024

0800e554 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	7d1b      	ldrb	r3, [r3, #20]
 800e560:	2b01      	cmp	r3, #1
 800e562:	d105      	bne.n	800e570 <tcp_free+0x1c>
 800e564:	4b06      	ldr	r3, [pc, #24]	@ (800e580 <tcp_free+0x2c>)
 800e566:	22d4      	movs	r2, #212	@ 0xd4
 800e568:	4906      	ldr	r1, [pc, #24]	@ (800e584 <tcp_free+0x30>)
 800e56a:	4807      	ldr	r0, [pc, #28]	@ (800e588 <tcp_free+0x34>)
 800e56c:	f008 fc96 	bl	8016e9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e570:	6879      	ldr	r1, [r7, #4]
 800e572:	2001      	movs	r0, #1
 800e574:	f7fe fe9e 	bl	800d2b4 <memp_free>
}
 800e578:	bf00      	nop
 800e57a:	3708      	adds	r7, #8
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	08018cb8 	.word	0x08018cb8
 800e584:	08018ce8 	.word	0x08018ce8
 800e588:	08018cfc 	.word	0x08018cfc

0800e58c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	7d1b      	ldrb	r3, [r3, #20]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d105      	bne.n	800e5a8 <tcp_free_listen+0x1c>
 800e59c:	4b06      	ldr	r3, [pc, #24]	@ (800e5b8 <tcp_free_listen+0x2c>)
 800e59e:	22df      	movs	r2, #223	@ 0xdf
 800e5a0:	4906      	ldr	r1, [pc, #24]	@ (800e5bc <tcp_free_listen+0x30>)
 800e5a2:	4807      	ldr	r0, [pc, #28]	@ (800e5c0 <tcp_free_listen+0x34>)
 800e5a4:	f008 fc7a 	bl	8016e9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e5a8:	6879      	ldr	r1, [r7, #4]
 800e5aa:	2002      	movs	r0, #2
 800e5ac:	f7fe fe82 	bl	800d2b4 <memp_free>
}
 800e5b0:	bf00      	nop
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	08018cb8 	.word	0x08018cb8
 800e5bc:	08018d24 	.word	0x08018d24
 800e5c0:	08018cfc 	.word	0x08018cfc

0800e5c4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e5c8:	f000 fea4 	bl	800f314 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e5cc:	4b07      	ldr	r3, [pc, #28]	@ (800e5ec <tcp_tmr+0x28>)
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	b2da      	uxtb	r2, r3
 800e5d4:	4b05      	ldr	r3, [pc, #20]	@ (800e5ec <tcp_tmr+0x28>)
 800e5d6:	701a      	strb	r2, [r3, #0]
 800e5d8:	4b04      	ldr	r3, [pc, #16]	@ (800e5ec <tcp_tmr+0x28>)
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	f003 0301 	and.w	r3, r3, #1
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d001      	beq.n	800e5e8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e5e4:	f000 fb54 	bl	800ec90 <tcp_slowtmr>
  }
}
 800e5e8:	bf00      	nop
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	20027379 	.word	0x20027379

0800e5f0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d105      	bne.n	800e60c <tcp_remove_listener+0x1c>
 800e600:	4b0d      	ldr	r3, [pc, #52]	@ (800e638 <tcp_remove_listener+0x48>)
 800e602:	22ff      	movs	r2, #255	@ 0xff
 800e604:	490d      	ldr	r1, [pc, #52]	@ (800e63c <tcp_remove_listener+0x4c>)
 800e606:	480e      	ldr	r0, [pc, #56]	@ (800e640 <tcp_remove_listener+0x50>)
 800e608:	f008 fc48 	bl	8016e9c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	60fb      	str	r3, [r7, #12]
 800e610:	e00a      	b.n	800e628 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e616:	683a      	ldr	r2, [r7, #0]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d102      	bne.n	800e622 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	68db      	ldr	r3, [r3, #12]
 800e626:	60fb      	str	r3, [r7, #12]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d1f1      	bne.n	800e612 <tcp_remove_listener+0x22>
    }
  }
}
 800e62e:	bf00      	nop
 800e630:	bf00      	nop
 800e632:	3710      	adds	r7, #16
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	08018cb8 	.word	0x08018cb8
 800e63c:	08018d40 	.word	0x08018d40
 800e640:	08018cfc 	.word	0x08018cfc

0800e644 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d106      	bne.n	800e660 <tcp_listen_closed+0x1c>
 800e652:	4b14      	ldr	r3, [pc, #80]	@ (800e6a4 <tcp_listen_closed+0x60>)
 800e654:	f240 1211 	movw	r2, #273	@ 0x111
 800e658:	4913      	ldr	r1, [pc, #76]	@ (800e6a8 <tcp_listen_closed+0x64>)
 800e65a:	4814      	ldr	r0, [pc, #80]	@ (800e6ac <tcp_listen_closed+0x68>)
 800e65c:	f008 fc1e 	bl	8016e9c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	7d1b      	ldrb	r3, [r3, #20]
 800e664:	2b01      	cmp	r3, #1
 800e666:	d006      	beq.n	800e676 <tcp_listen_closed+0x32>
 800e668:	4b0e      	ldr	r3, [pc, #56]	@ (800e6a4 <tcp_listen_closed+0x60>)
 800e66a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e66e:	4910      	ldr	r1, [pc, #64]	@ (800e6b0 <tcp_listen_closed+0x6c>)
 800e670:	480e      	ldr	r0, [pc, #56]	@ (800e6ac <tcp_listen_closed+0x68>)
 800e672:	f008 fc13 	bl	8016e9c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e676:	2301      	movs	r3, #1
 800e678:	60fb      	str	r3, [r7, #12]
 800e67a:	e00b      	b.n	800e694 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e67c:	4a0d      	ldr	r2, [pc, #52]	@ (800e6b4 <tcp_listen_closed+0x70>)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	6879      	ldr	r1, [r7, #4]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7ff ffb1 	bl	800e5f0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	3301      	adds	r3, #1
 800e692:	60fb      	str	r3, [r7, #12]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2b03      	cmp	r3, #3
 800e698:	d9f0      	bls.n	800e67c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e69a:	bf00      	nop
 800e69c:	bf00      	nop
 800e69e:	3710      	adds	r7, #16
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	08018cb8 	.word	0x08018cb8
 800e6a8:	08018d68 	.word	0x08018d68
 800e6ac:	08018cfc 	.word	0x08018cfc
 800e6b0:	08018d74 	.word	0x08018d74
 800e6b4:	0801af0c 	.word	0x0801af0c

0800e6b8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e6b8:	b5b0      	push	{r4, r5, r7, lr}
 800e6ba:	b088      	sub	sp, #32
 800e6bc:	af04      	add	r7, sp, #16
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d106      	bne.n	800e6d8 <tcp_close_shutdown+0x20>
 800e6ca:	4b63      	ldr	r3, [pc, #396]	@ (800e858 <tcp_close_shutdown+0x1a0>)
 800e6cc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e6d0:	4962      	ldr	r1, [pc, #392]	@ (800e85c <tcp_close_shutdown+0x1a4>)
 800e6d2:	4863      	ldr	r0, [pc, #396]	@ (800e860 <tcp_close_shutdown+0x1a8>)
 800e6d4:	f008 fbe2 	bl	8016e9c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e6d8:	78fb      	ldrb	r3, [r7, #3]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d066      	beq.n	800e7ac <tcp_close_shutdown+0xf4>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	7d1b      	ldrb	r3, [r3, #20]
 800e6e2:	2b04      	cmp	r3, #4
 800e6e4:	d003      	beq.n	800e6ee <tcp_close_shutdown+0x36>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	7d1b      	ldrb	r3, [r3, #20]
 800e6ea:	2b07      	cmp	r3, #7
 800e6ec:	d15e      	bne.n	800e7ac <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d104      	bne.n	800e700 <tcp_close_shutdown+0x48>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6fa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e6fe:	d055      	beq.n	800e7ac <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	8b5b      	ldrh	r3, [r3, #26]
 800e704:	f003 0310 	and.w	r3, r3, #16
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d106      	bne.n	800e71a <tcp_close_shutdown+0x62>
 800e70c:	4b52      	ldr	r3, [pc, #328]	@ (800e858 <tcp_close_shutdown+0x1a0>)
 800e70e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e712:	4954      	ldr	r1, [pc, #336]	@ (800e864 <tcp_close_shutdown+0x1ac>)
 800e714:	4852      	ldr	r0, [pc, #328]	@ (800e860 <tcp_close_shutdown+0x1a8>)
 800e716:	f008 fbc1 	bl	8016e9c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e722:	687d      	ldr	r5, [r7, #4]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	3304      	adds	r3, #4
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	8ad2      	ldrh	r2, [r2, #22]
 800e72c:	6879      	ldr	r1, [r7, #4]
 800e72e:	8b09      	ldrh	r1, [r1, #24]
 800e730:	9102      	str	r1, [sp, #8]
 800e732:	9201      	str	r2, [sp, #4]
 800e734:	9300      	str	r3, [sp, #0]
 800e736:	462b      	mov	r3, r5
 800e738:	4622      	mov	r2, r4
 800e73a:	4601      	mov	r1, r0
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f004 fe8d 	bl	801345c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f001 f8c8 	bl	800f8d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e748:	4b47      	ldr	r3, [pc, #284]	@ (800e868 <tcp_close_shutdown+0x1b0>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d105      	bne.n	800e75e <tcp_close_shutdown+0xa6>
 800e752:	4b45      	ldr	r3, [pc, #276]	@ (800e868 <tcp_close_shutdown+0x1b0>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	68db      	ldr	r3, [r3, #12]
 800e758:	4a43      	ldr	r2, [pc, #268]	@ (800e868 <tcp_close_shutdown+0x1b0>)
 800e75a:	6013      	str	r3, [r2, #0]
 800e75c:	e013      	b.n	800e786 <tcp_close_shutdown+0xce>
 800e75e:	4b42      	ldr	r3, [pc, #264]	@ (800e868 <tcp_close_shutdown+0x1b0>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	60fb      	str	r3, [r7, #12]
 800e764:	e00c      	b.n	800e780 <tcp_close_shutdown+0xc8>
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	68db      	ldr	r3, [r3, #12]
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d104      	bne.n	800e77a <tcp_close_shutdown+0xc2>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	68da      	ldr	r2, [r3, #12]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	60da      	str	r2, [r3, #12]
 800e778:	e005      	b.n	800e786 <tcp_close_shutdown+0xce>
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	60fb      	str	r3, [r7, #12]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d1ef      	bne.n	800e766 <tcp_close_shutdown+0xae>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2200      	movs	r2, #0
 800e78a:	60da      	str	r2, [r3, #12]
 800e78c:	4b37      	ldr	r3, [pc, #220]	@ (800e86c <tcp_close_shutdown+0x1b4>)
 800e78e:	2201      	movs	r2, #1
 800e790:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e792:	4b37      	ldr	r3, [pc, #220]	@ (800e870 <tcp_close_shutdown+0x1b8>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d102      	bne.n	800e7a2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e79c:	f003 fd5c 	bl	8012258 <tcp_trigger_input_pcb_close>
 800e7a0:	e002      	b.n	800e7a8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f7ff fed6 	bl	800e554 <tcp_free>
      }
      return ERR_OK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e050      	b.n	800e84e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	7d1b      	ldrb	r3, [r3, #20]
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d03b      	beq.n	800e82c <tcp_close_shutdown+0x174>
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	dc44      	bgt.n	800e842 <tcp_close_shutdown+0x18a>
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d002      	beq.n	800e7c2 <tcp_close_shutdown+0x10a>
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d02a      	beq.n	800e816 <tcp_close_shutdown+0x15e>
 800e7c0:	e03f      	b.n	800e842 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	8adb      	ldrh	r3, [r3, #22]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d021      	beq.n	800e80e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e7ca:	4b2a      	ldr	r3, [pc, #168]	@ (800e874 <tcp_close_shutdown+0x1bc>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d105      	bne.n	800e7e0 <tcp_close_shutdown+0x128>
 800e7d4:	4b27      	ldr	r3, [pc, #156]	@ (800e874 <tcp_close_shutdown+0x1bc>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	4a26      	ldr	r2, [pc, #152]	@ (800e874 <tcp_close_shutdown+0x1bc>)
 800e7dc:	6013      	str	r3, [r2, #0]
 800e7de:	e013      	b.n	800e808 <tcp_close_shutdown+0x150>
 800e7e0:	4b24      	ldr	r3, [pc, #144]	@ (800e874 <tcp_close_shutdown+0x1bc>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	60bb      	str	r3, [r7, #8]
 800e7e6:	e00c      	b.n	800e802 <tcp_close_shutdown+0x14a>
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d104      	bne.n	800e7fc <tcp_close_shutdown+0x144>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	68da      	ldr	r2, [r3, #12]
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	60da      	str	r2, [r3, #12]
 800e7fa:	e005      	b.n	800e808 <tcp_close_shutdown+0x150>
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	60bb      	str	r3, [r7, #8]
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d1ef      	bne.n	800e7e8 <tcp_close_shutdown+0x130>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f7ff fea0 	bl	800e554 <tcp_free>
      break;
 800e814:	e01a      	b.n	800e84c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7ff ff14 	bl	800e644 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e81c:	6879      	ldr	r1, [r7, #4]
 800e81e:	4816      	ldr	r0, [pc, #88]	@ (800e878 <tcp_close_shutdown+0x1c0>)
 800e820:	f001 f8aa 	bl	800f978 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f7ff feb1 	bl	800e58c <tcp_free_listen>
      break;
 800e82a:	e00f      	b.n	800e84c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e82c:	6879      	ldr	r1, [r7, #4]
 800e82e:	480e      	ldr	r0, [pc, #56]	@ (800e868 <tcp_close_shutdown+0x1b0>)
 800e830:	f001 f8a2 	bl	800f978 <tcp_pcb_remove>
 800e834:	4b0d      	ldr	r3, [pc, #52]	@ (800e86c <tcp_close_shutdown+0x1b4>)
 800e836:	2201      	movs	r2, #1
 800e838:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7ff fe8a 	bl	800e554 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e840:	e004      	b.n	800e84c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 f81a 	bl	800e87c <tcp_close_shutdown_fin>
 800e848:	4603      	mov	r3, r0
 800e84a:	e000      	b.n	800e84e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bdb0      	pop	{r4, r5, r7, pc}
 800e856:	bf00      	nop
 800e858:	08018cb8 	.word	0x08018cb8
 800e85c:	08018d8c 	.word	0x08018d8c
 800e860:	08018cfc 	.word	0x08018cfc
 800e864:	08018dac 	.word	0x08018dac
 800e868:	20027370 	.word	0x20027370
 800e86c:	20027378 	.word	0x20027378
 800e870:	200273b0 	.word	0x200273b0
 800e874:	20027368 	.word	0x20027368
 800e878:	2002736c 	.word	0x2002736c

0800e87c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d106      	bne.n	800e898 <tcp_close_shutdown_fin+0x1c>
 800e88a:	4b2e      	ldr	r3, [pc, #184]	@ (800e944 <tcp_close_shutdown_fin+0xc8>)
 800e88c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e890:	492d      	ldr	r1, [pc, #180]	@ (800e948 <tcp_close_shutdown_fin+0xcc>)
 800e892:	482e      	ldr	r0, [pc, #184]	@ (800e94c <tcp_close_shutdown_fin+0xd0>)
 800e894:	f008 fb02 	bl	8016e9c <iprintf>

  switch (pcb->state) {
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	7d1b      	ldrb	r3, [r3, #20]
 800e89c:	2b07      	cmp	r3, #7
 800e89e:	d020      	beq.n	800e8e2 <tcp_close_shutdown_fin+0x66>
 800e8a0:	2b07      	cmp	r3, #7
 800e8a2:	dc2b      	bgt.n	800e8fc <tcp_close_shutdown_fin+0x80>
 800e8a4:	2b03      	cmp	r3, #3
 800e8a6:	d002      	beq.n	800e8ae <tcp_close_shutdown_fin+0x32>
 800e8a8:	2b04      	cmp	r3, #4
 800e8aa:	d00d      	beq.n	800e8c8 <tcp_close_shutdown_fin+0x4c>
 800e8ac:	e026      	b.n	800e8fc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f003 fee2 	bl	8012678 <tcp_send_fin>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e8b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d11f      	bne.n	800e900 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2205      	movs	r2, #5
 800e8c4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e8c6:	e01b      	b.n	800e900 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f003 fed5 	bl	8012678 <tcp_send_fin>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d114      	bne.n	800e904 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2205      	movs	r2, #5
 800e8de:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e8e0:	e010      	b.n	800e904 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f003 fec8 	bl	8012678 <tcp_send_fin>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e8ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d109      	bne.n	800e908 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2209      	movs	r2, #9
 800e8f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e8fa:	e005      	b.n	800e908 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	e01c      	b.n	800e93a <tcp_close_shutdown_fin+0xbe>
      break;
 800e900:	bf00      	nop
 800e902:	e002      	b.n	800e90a <tcp_close_shutdown_fin+0x8e>
      break;
 800e904:	bf00      	nop
 800e906:	e000      	b.n	800e90a <tcp_close_shutdown_fin+0x8e>
      break;
 800e908:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d103      	bne.n	800e91a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f003 ffee 	bl	80128f4 <tcp_output>
 800e918:	e00d      	b.n	800e936 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e922:	d108      	bne.n	800e936 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	8b5b      	ldrh	r3, [r3, #26]
 800e928:	f043 0308 	orr.w	r3, r3, #8
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e932:	2300      	movs	r3, #0
 800e934:	e001      	b.n	800e93a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e936:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	08018cb8 	.word	0x08018cb8
 800e948:	08018d68 	.word	0x08018d68
 800e94c:	08018cfc 	.word	0x08018cfc

0800e950 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d109      	bne.n	800e972 <tcp_close+0x22>
 800e95e:	4b0f      	ldr	r3, [pc, #60]	@ (800e99c <tcp_close+0x4c>)
 800e960:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800e964:	490e      	ldr	r1, [pc, #56]	@ (800e9a0 <tcp_close+0x50>)
 800e966:	480f      	ldr	r0, [pc, #60]	@ (800e9a4 <tcp_close+0x54>)
 800e968:	f008 fa98 	bl	8016e9c <iprintf>
 800e96c:	f06f 030f 	mvn.w	r3, #15
 800e970:	e00f      	b.n	800e992 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	7d1b      	ldrb	r3, [r3, #20]
 800e976:	2b01      	cmp	r3, #1
 800e978:	d006      	beq.n	800e988 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	8b5b      	ldrh	r3, [r3, #26]
 800e97e:	f043 0310 	orr.w	r3, r3, #16
 800e982:	b29a      	uxth	r2, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e988:	2101      	movs	r1, #1
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f7ff fe94 	bl	800e6b8 <tcp_close_shutdown>
 800e990:	4603      	mov	r3, r0
}
 800e992:	4618      	mov	r0, r3
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	08018cb8 	.word	0x08018cb8
 800e9a0:	08018dc8 	.word	0x08018dc8
 800e9a4:	08018cfc 	.word	0x08018cfc

0800e9a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b08e      	sub	sp, #56	@ 0x38
 800e9ac:	af04      	add	r7, sp, #16
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d107      	bne.n	800e9c8 <tcp_abandon+0x20>
 800e9b8:	4b52      	ldr	r3, [pc, #328]	@ (800eb04 <tcp_abandon+0x15c>)
 800e9ba:	f240 223d 	movw	r2, #573	@ 0x23d
 800e9be:	4952      	ldr	r1, [pc, #328]	@ (800eb08 <tcp_abandon+0x160>)
 800e9c0:	4852      	ldr	r0, [pc, #328]	@ (800eb0c <tcp_abandon+0x164>)
 800e9c2:	f008 fa6b 	bl	8016e9c <iprintf>
 800e9c6:	e099      	b.n	800eafc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	7d1b      	ldrb	r3, [r3, #20]
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d106      	bne.n	800e9de <tcp_abandon+0x36>
 800e9d0:	4b4c      	ldr	r3, [pc, #304]	@ (800eb04 <tcp_abandon+0x15c>)
 800e9d2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800e9d6:	494e      	ldr	r1, [pc, #312]	@ (800eb10 <tcp_abandon+0x168>)
 800e9d8:	484c      	ldr	r0, [pc, #304]	@ (800eb0c <tcp_abandon+0x164>)
 800e9da:	f008 fa5f 	bl	8016e9c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	7d1b      	ldrb	r3, [r3, #20]
 800e9e2:	2b0a      	cmp	r3, #10
 800e9e4:	d107      	bne.n	800e9f6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e9e6:	6879      	ldr	r1, [r7, #4]
 800e9e8:	484a      	ldr	r0, [pc, #296]	@ (800eb14 <tcp_abandon+0x16c>)
 800e9ea:	f000 ffc5 	bl	800f978 <tcp_pcb_remove>
    tcp_free(pcb);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7ff fdb0 	bl	800e554 <tcp_free>
 800e9f4:	e082      	b.n	800eafc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea02:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea08:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea10:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	691b      	ldr	r3, [r3, #16]
 800ea16:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	7d1b      	ldrb	r3, [r3, #20]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d126      	bne.n	800ea6e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	8adb      	ldrh	r3, [r3, #22]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d02e      	beq.n	800ea86 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ea28:	4b3b      	ldr	r3, [pc, #236]	@ (800eb18 <tcp_abandon+0x170>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d105      	bne.n	800ea3e <tcp_abandon+0x96>
 800ea32:	4b39      	ldr	r3, [pc, #228]	@ (800eb18 <tcp_abandon+0x170>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	4a37      	ldr	r2, [pc, #220]	@ (800eb18 <tcp_abandon+0x170>)
 800ea3a:	6013      	str	r3, [r2, #0]
 800ea3c:	e013      	b.n	800ea66 <tcp_abandon+0xbe>
 800ea3e:	4b36      	ldr	r3, [pc, #216]	@ (800eb18 <tcp_abandon+0x170>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	61fb      	str	r3, [r7, #28]
 800ea44:	e00c      	b.n	800ea60 <tcp_abandon+0xb8>
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	68db      	ldr	r3, [r3, #12]
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d104      	bne.n	800ea5a <tcp_abandon+0xb2>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	68da      	ldr	r2, [r3, #12]
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	60da      	str	r2, [r3, #12]
 800ea58:	e005      	b.n	800ea66 <tcp_abandon+0xbe>
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	61fb      	str	r3, [r7, #28]
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1ef      	bne.n	800ea46 <tcp_abandon+0x9e>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	60da      	str	r2, [r3, #12]
 800ea6c:	e00b      	b.n	800ea86 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	8adb      	ldrh	r3, [r3, #22]
 800ea76:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ea78:	6879      	ldr	r1, [r7, #4]
 800ea7a:	4828      	ldr	r0, [pc, #160]	@ (800eb1c <tcp_abandon+0x174>)
 800ea7c:	f000 ff7c 	bl	800f978 <tcp_pcb_remove>
 800ea80:	4b27      	ldr	r3, [pc, #156]	@ (800eb20 <tcp_abandon+0x178>)
 800ea82:	2201      	movs	r2, #1
 800ea84:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d004      	beq.n	800ea98 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea92:	4618      	mov	r0, r3
 800ea94:	f000 fd1e 	bl	800f4d4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d004      	beq.n	800eaaa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f000 fd15 	bl	800f4d4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d004      	beq.n	800eabc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eab6:	4618      	mov	r0, r3
 800eab8:	f000 fd0c 	bl	800f4d4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800eabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d00e      	beq.n	800eae0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800eac2:	6879      	ldr	r1, [r7, #4]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	3304      	adds	r3, #4
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	8b12      	ldrh	r2, [r2, #24]
 800eacc:	9202      	str	r2, [sp, #8]
 800eace:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ead0:	9201      	str	r2, [sp, #4]
 800ead2:	9300      	str	r3, [sp, #0]
 800ead4:	460b      	mov	r3, r1
 800ead6:	697a      	ldr	r2, [r7, #20]
 800ead8:	69b9      	ldr	r1, [r7, #24]
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f004 fcbe 	bl	801345c <tcp_rst>
    }
    last_state = pcb->state;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	7d1b      	ldrb	r3, [r3, #20]
 800eae4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7ff fd34 	bl	800e554 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d004      	beq.n	800eafc <tcp_abandon+0x154>
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	f06f 010c 	mvn.w	r1, #12
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	4798      	blx	r3
  }
}
 800eafc:	3728      	adds	r7, #40	@ 0x28
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	08018cb8 	.word	0x08018cb8
 800eb08:	08018dfc 	.word	0x08018dfc
 800eb0c:	08018cfc 	.word	0x08018cfc
 800eb10:	08018e18 	.word	0x08018e18
 800eb14:	20027374 	.word	0x20027374
 800eb18:	20027368 	.word	0x20027368
 800eb1c:	20027370 	.word	0x20027370
 800eb20:	20027378 	.word	0x20027378

0800eb24 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800eb2c:	2101      	movs	r1, #1
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f7ff ff3a 	bl	800e9a8 <tcp_abandon>
}
 800eb34:	bf00      	nop
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d106      	bne.n	800eb58 <tcp_update_rcv_ann_wnd+0x1c>
 800eb4a:	4b25      	ldr	r3, [pc, #148]	@ (800ebe0 <tcp_update_rcv_ann_wnd+0xa4>)
 800eb4c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800eb50:	4924      	ldr	r1, [pc, #144]	@ (800ebe4 <tcp_update_rcv_ann_wnd+0xa8>)
 800eb52:	4825      	ldr	r0, [pc, #148]	@ (800ebe8 <tcp_update_rcv_ann_wnd+0xac>)
 800eb54:	f008 f9a2 	bl	8016e9c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800eb60:	4413      	add	r3, r2
 800eb62:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800eb6c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800eb70:	bf28      	it	cs
 800eb72:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800eb76:	b292      	uxth	r2, r2
 800eb78:	4413      	add	r3, r2
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	1ad3      	subs	r3, r2, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	db08      	blt.n	800eb94 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	e020      	b.n	800ebd6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb9c:	1ad3      	subs	r3, r2, r3
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	dd03      	ble.n	800ebaa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800eba8:	e014      	b.n	800ebd4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebb2:	1ad3      	subs	r3, r2, r3
 800ebb4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ebbc:	d306      	bcc.n	800ebcc <tcp_update_rcv_ann_wnd+0x90>
 800ebbe:	4b08      	ldr	r3, [pc, #32]	@ (800ebe0 <tcp_update_rcv_ann_wnd+0xa4>)
 800ebc0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ebc4:	4909      	ldr	r1, [pc, #36]	@ (800ebec <tcp_update_rcv_ann_wnd+0xb0>)
 800ebc6:	4808      	ldr	r0, [pc, #32]	@ (800ebe8 <tcp_update_rcv_ann_wnd+0xac>)
 800ebc8:	f008 f968 	bl	8016e9c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	b29a      	uxth	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ebd4:	2300      	movs	r3, #0
  }
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3710      	adds	r7, #16
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	08018cb8 	.word	0x08018cb8
 800ebe4:	08018f14 	.word	0x08018f14
 800ebe8:	08018cfc 	.word	0x08018cfc
 800ebec:	08018f38 	.word	0x08018f38

0800ebf0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d107      	bne.n	800ec12 <tcp_recved+0x22>
 800ec02:	4b1f      	ldr	r3, [pc, #124]	@ (800ec80 <tcp_recved+0x90>)
 800ec04:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ec08:	491e      	ldr	r1, [pc, #120]	@ (800ec84 <tcp_recved+0x94>)
 800ec0a:	481f      	ldr	r0, [pc, #124]	@ (800ec88 <tcp_recved+0x98>)
 800ec0c:	f008 f946 	bl	8016e9c <iprintf>
 800ec10:	e032      	b.n	800ec78 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	7d1b      	ldrb	r3, [r3, #20]
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	d106      	bne.n	800ec28 <tcp_recved+0x38>
 800ec1a:	4b19      	ldr	r3, [pc, #100]	@ (800ec80 <tcp_recved+0x90>)
 800ec1c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800ec20:	491a      	ldr	r1, [pc, #104]	@ (800ec8c <tcp_recved+0x9c>)
 800ec22:	4819      	ldr	r0, [pc, #100]	@ (800ec88 <tcp_recved+0x98>)
 800ec24:	f008 f93a 	bl	8016e9c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ec2c:	887b      	ldrh	r3, [r7, #2]
 800ec2e:	4413      	add	r3, r2
 800ec30:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ec32:	89fb      	ldrh	r3, [r7, #14]
 800ec34:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ec38:	d804      	bhi.n	800ec44 <tcp_recved+0x54>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec3e:	89fa      	ldrh	r2, [r7, #14]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d204      	bcs.n	800ec4e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ec4a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ec4c:	e002      	b.n	800ec54 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	89fa      	ldrh	r2, [r7, #14]
 800ec52:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7ff ff71 	bl	800eb3c <tcp_update_rcv_ann_wnd>
 800ec5a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ec62:	d309      	bcc.n	800ec78 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	8b5b      	ldrh	r3, [r3, #26]
 800ec68:	f043 0302 	orr.w	r3, r3, #2
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f003 fe3e 	bl	80128f4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	08018cb8 	.word	0x08018cb8
 800ec84:	08018f54 	.word	0x08018f54
 800ec88:	08018cfc 	.word	0x08018cfc
 800ec8c:	08018f6c 	.word	0x08018f6c

0800ec90 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ec90:	b5b0      	push	{r4, r5, r7, lr}
 800ec92:	b090      	sub	sp, #64	@ 0x40
 800ec94:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ec96:	2300      	movs	r3, #0
 800ec98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800ec9c:	4b95      	ldr	r3, [pc, #596]	@ (800eef4 <tcp_slowtmr+0x264>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	3301      	adds	r3, #1
 800eca2:	4a94      	ldr	r2, [pc, #592]	@ (800eef4 <tcp_slowtmr+0x264>)
 800eca4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800eca6:	4b94      	ldr	r3, [pc, #592]	@ (800eef8 <tcp_slowtmr+0x268>)
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	3301      	adds	r3, #1
 800ecac:	b2da      	uxtb	r2, r3
 800ecae:	4b92      	ldr	r3, [pc, #584]	@ (800eef8 <tcp_slowtmr+0x268>)
 800ecb0:	701a      	strb	r2, [r3, #0]
 800ecb2:	e000      	b.n	800ecb6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800ecb4:	bf00      	nop
  prev = NULL;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800ecba:	4b90      	ldr	r3, [pc, #576]	@ (800eefc <tcp_slowtmr+0x26c>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ecc0:	e29d      	b.n	800f1fe <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ecc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc4:	7d1b      	ldrb	r3, [r3, #20]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d106      	bne.n	800ecd8 <tcp_slowtmr+0x48>
 800ecca:	4b8d      	ldr	r3, [pc, #564]	@ (800ef00 <tcp_slowtmr+0x270>)
 800eccc:	f240 42be 	movw	r2, #1214	@ 0x4be
 800ecd0:	498c      	ldr	r1, [pc, #560]	@ (800ef04 <tcp_slowtmr+0x274>)
 800ecd2:	488d      	ldr	r0, [pc, #564]	@ (800ef08 <tcp_slowtmr+0x278>)
 800ecd4:	f008 f8e2 	bl	8016e9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ecd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecda:	7d1b      	ldrb	r3, [r3, #20]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d106      	bne.n	800ecee <tcp_slowtmr+0x5e>
 800ece0:	4b87      	ldr	r3, [pc, #540]	@ (800ef00 <tcp_slowtmr+0x270>)
 800ece2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800ece6:	4989      	ldr	r1, [pc, #548]	@ (800ef0c <tcp_slowtmr+0x27c>)
 800ece8:	4887      	ldr	r0, [pc, #540]	@ (800ef08 <tcp_slowtmr+0x278>)
 800ecea:	f008 f8d7 	bl	8016e9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ecee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf0:	7d1b      	ldrb	r3, [r3, #20]
 800ecf2:	2b0a      	cmp	r3, #10
 800ecf4:	d106      	bne.n	800ed04 <tcp_slowtmr+0x74>
 800ecf6:	4b82      	ldr	r3, [pc, #520]	@ (800ef00 <tcp_slowtmr+0x270>)
 800ecf8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800ecfc:	4984      	ldr	r1, [pc, #528]	@ (800ef10 <tcp_slowtmr+0x280>)
 800ecfe:	4882      	ldr	r0, [pc, #520]	@ (800ef08 <tcp_slowtmr+0x278>)
 800ed00:	f008 f8cc 	bl	8016e9c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ed04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed06:	7f9a      	ldrb	r2, [r3, #30]
 800ed08:	4b7b      	ldr	r3, [pc, #492]	@ (800eef8 <tcp_slowtmr+0x268>)
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d105      	bne.n	800ed1c <tcp_slowtmr+0x8c>
      prev = pcb;
 800ed10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed12:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ed14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800ed1a:	e270      	b.n	800f1fe <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800ed1c:	4b76      	ldr	r3, [pc, #472]	@ (800eef8 <tcp_slowtmr+0x268>)
 800ed1e:	781a      	ldrb	r2, [r3, #0]
 800ed20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed22:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800ed24:	2300      	movs	r3, #0
 800ed26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ed30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed32:	7d1b      	ldrb	r3, [r3, #20]
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d10a      	bne.n	800ed4e <tcp_slowtmr+0xbe>
 800ed38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ed3e:	2b05      	cmp	r3, #5
 800ed40:	d905      	bls.n	800ed4e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800ed42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed46:	3301      	adds	r3, #1
 800ed48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed4c:	e11e      	b.n	800ef8c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ed4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ed54:	2b0b      	cmp	r3, #11
 800ed56:	d905      	bls.n	800ed64 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800ed58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed62:	e113      	b.n	800ef8c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800ed64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed66:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d075      	beq.n	800ee5a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ed6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d006      	beq.n	800ed84 <tcp_slowtmr+0xf4>
 800ed76:	4b62      	ldr	r3, [pc, #392]	@ (800ef00 <tcp_slowtmr+0x270>)
 800ed78:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800ed7c:	4965      	ldr	r1, [pc, #404]	@ (800ef14 <tcp_slowtmr+0x284>)
 800ed7e:	4862      	ldr	r0, [pc, #392]	@ (800ef08 <tcp_slowtmr+0x278>)
 800ed80:	f008 f88c 	bl	8016e9c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ed84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d106      	bne.n	800ed9a <tcp_slowtmr+0x10a>
 800ed8c:	4b5c      	ldr	r3, [pc, #368]	@ (800ef00 <tcp_slowtmr+0x270>)
 800ed8e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800ed92:	4961      	ldr	r1, [pc, #388]	@ (800ef18 <tcp_slowtmr+0x288>)
 800ed94:	485c      	ldr	r0, [pc, #368]	@ (800ef08 <tcp_slowtmr+0x278>)
 800ed96:	f008 f881 	bl	8016e9c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ed9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed9c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800eda0:	2b0b      	cmp	r3, #11
 800eda2:	d905      	bls.n	800edb0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800eda4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eda8:	3301      	adds	r3, #1
 800edaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800edae:	e0ed      	b.n	800ef8c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800edb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800edb6:	3b01      	subs	r3, #1
 800edb8:	4a58      	ldr	r2, [pc, #352]	@ (800ef1c <tcp_slowtmr+0x28c>)
 800edba:	5cd3      	ldrb	r3, [r2, r3]
 800edbc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800edbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800edc4:	7c7a      	ldrb	r2, [r7, #17]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d907      	bls.n	800edda <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800edca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edcc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800edd0:	3301      	adds	r3, #1
 800edd2:	b2da      	uxtb	r2, r3
 800edd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800edda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eddc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ede0:	7c7a      	ldrb	r2, [r7, #17]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	f200 80d2 	bhi.w	800ef8c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800ede8:	2301      	movs	r3, #1
 800edea:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800edec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d108      	bne.n	800ee08 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800edf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800edf8:	f004 fc24 	bl	8013644 <tcp_zero_window_probe>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d014      	beq.n	800ee2c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800ee02:	2300      	movs	r3, #0
 800ee04:	623b      	str	r3, [r7, #32]
 800ee06:	e011      	b.n	800ee2c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ee08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee0e:	4619      	mov	r1, r3
 800ee10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee12:	f003 fae9 	bl	80123e8 <tcp_split_unsent_seg>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d107      	bne.n	800ee2c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800ee1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee1e:	f003 fd69 	bl	80128f4 <tcp_output>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d101      	bne.n	800ee2c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800ee2c:	6a3b      	ldr	r3, [r7, #32]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	f000 80ac 	beq.w	800ef8c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800ee34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee36:	2200      	movs	r2, #0
 800ee38:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ee3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee3e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ee42:	2b06      	cmp	r3, #6
 800ee44:	f200 80a2 	bhi.w	800ef8c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800ee48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee4a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ee4e:	3301      	adds	r3, #1
 800ee50:	b2da      	uxtb	r2, r3
 800ee52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee54:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ee58:	e098      	b.n	800ef8c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ee5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	db0f      	blt.n	800ee84 <tcp_slowtmr+0x1f4>
 800ee64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ee6a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d008      	beq.n	800ee84 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ee72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	b21a      	sxth	r2, r3
 800ee80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee82:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ee84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee86:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ee8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee8c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ee90:	429a      	cmp	r2, r3
 800ee92:	db7b      	blt.n	800ef8c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ee94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee96:	f004 f821 	bl	8012edc <tcp_rexmit_rto_prepare>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d007      	beq.n	800eeb0 <tcp_slowtmr+0x220>
 800eea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d171      	bne.n	800ef8c <tcp_slowtmr+0x2fc>
 800eea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d06d      	beq.n	800ef8c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800eeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeb2:	7d1b      	ldrb	r3, [r3, #20]
 800eeb4:	2b02      	cmp	r3, #2
 800eeb6:	d03a      	beq.n	800ef2e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800eeb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eebe:	2b0c      	cmp	r3, #12
 800eec0:	bf28      	it	cs
 800eec2:	230c      	movcs	r3, #12
 800eec4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800eec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800eecc:	10db      	asrs	r3, r3, #3
 800eece:	b21b      	sxth	r3, r3
 800eed0:	461a      	mov	r2, r3
 800eed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800eed8:	4413      	add	r3, r2
 800eeda:	7efa      	ldrb	r2, [r7, #27]
 800eedc:	4910      	ldr	r1, [pc, #64]	@ (800ef20 <tcp_slowtmr+0x290>)
 800eede:	5c8a      	ldrb	r2, [r1, r2]
 800eee0:	4093      	lsls	r3, r2
 800eee2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800eeea:	4293      	cmp	r3, r2
 800eeec:	dc1a      	bgt.n	800ef24 <tcp_slowtmr+0x294>
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	b21a      	sxth	r2, r3
 800eef2:	e019      	b.n	800ef28 <tcp_slowtmr+0x298>
 800eef4:	20027364 	.word	0x20027364
 800eef8:	2002737a 	.word	0x2002737a
 800eefc:	20027370 	.word	0x20027370
 800ef00:	08018cb8 	.word	0x08018cb8
 800ef04:	08018ffc 	.word	0x08018ffc
 800ef08:	08018cfc 	.word	0x08018cfc
 800ef0c:	08019028 	.word	0x08019028
 800ef10:	08019054 	.word	0x08019054
 800ef14:	08019084 	.word	0x08019084
 800ef18:	080190b8 	.word	0x080190b8
 800ef1c:	0801af04 	.word	0x0801af04
 800ef20:	0801aef4 	.word	0x0801aef4
 800ef24:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ef28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ef2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef30:	2200      	movs	r2, #0
 800ef32:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ef34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ef3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ef40:	4293      	cmp	r3, r2
 800ef42:	bf28      	it	cs
 800ef44:	4613      	movcs	r3, r2
 800ef46:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ef48:	8a7b      	ldrh	r3, [r7, #18]
 800ef4a:	085b      	lsrs	r3, r3, #1
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef50:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ef54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ef5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef5e:	005b      	lsls	r3, r3, #1
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d206      	bcs.n	800ef74 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ef66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef6a:	005b      	lsls	r3, r3, #1
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef70:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ef74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef76:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ef78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ef7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef80:	2200      	movs	r2, #0
 800ef82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ef86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef88:	f004 f818 	bl	8012fbc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ef8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef8e:	7d1b      	ldrb	r3, [r3, #20]
 800ef90:	2b06      	cmp	r3, #6
 800ef92:	d111      	bne.n	800efb8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ef94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef96:	8b5b      	ldrh	r3, [r3, #26]
 800ef98:	f003 0310 	and.w	r3, r3, #16
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d00b      	beq.n	800efb8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800efa0:	4b9c      	ldr	r3, [pc, #624]	@ (800f214 <tcp_slowtmr+0x584>)
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efa6:	6a1b      	ldr	r3, [r3, #32]
 800efa8:	1ad3      	subs	r3, r2, r3
 800efaa:	2b28      	cmp	r3, #40	@ 0x28
 800efac:	d904      	bls.n	800efb8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800efae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800efb2:	3301      	adds	r3, #1
 800efb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800efb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efba:	7a5b      	ldrb	r3, [r3, #9]
 800efbc:	f003 0308 	and.w	r3, r3, #8
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d04a      	beq.n	800f05a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800efc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800efc8:	2b04      	cmp	r3, #4
 800efca:	d003      	beq.n	800efd4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800efcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800efd0:	2b07      	cmp	r3, #7
 800efd2:	d142      	bne.n	800f05a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800efd4:	4b8f      	ldr	r3, [pc, #572]	@ (800f214 <tcp_slowtmr+0x584>)
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efda:	6a1b      	ldr	r3, [r3, #32]
 800efdc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800efde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efe0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800efe4:	4b8c      	ldr	r3, [pc, #560]	@ (800f218 <tcp_slowtmr+0x588>)
 800efe6:	440b      	add	r3, r1
 800efe8:	498c      	ldr	r1, [pc, #560]	@ (800f21c <tcp_slowtmr+0x58c>)
 800efea:	fba1 1303 	umull	r1, r3, r1, r3
 800efee:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d90a      	bls.n	800f00a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800eff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eff8:	3301      	adds	r3, #1
 800effa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800effe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f002:	3301      	adds	r3, #1
 800f004:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f008:	e027      	b.n	800f05a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f00a:	4b82      	ldr	r3, [pc, #520]	@ (800f214 <tcp_slowtmr+0x584>)
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f010:	6a1b      	ldr	r3, [r3, #32]
 800f012:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f016:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f01c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f020:	4618      	mov	r0, r3
 800f022:	4b7f      	ldr	r3, [pc, #508]	@ (800f220 <tcp_slowtmr+0x590>)
 800f024:	fb00 f303 	mul.w	r3, r0, r3
 800f028:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f02a:	497c      	ldr	r1, [pc, #496]	@ (800f21c <tcp_slowtmr+0x58c>)
 800f02c:	fba1 1303 	umull	r1, r3, r1, r3
 800f030:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f032:	429a      	cmp	r2, r3
 800f034:	d911      	bls.n	800f05a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f036:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f038:	f004 fac4 	bl	80135c4 <tcp_keepalive>
 800f03c:	4603      	mov	r3, r0
 800f03e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800f042:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f046:	2b00      	cmp	r3, #0
 800f048:	d107      	bne.n	800f05a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f04c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f050:	3301      	adds	r3, #1
 800f052:	b2da      	uxtb	r2, r3
 800f054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f056:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800f05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f05c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d011      	beq.n	800f086 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f062:	4b6c      	ldr	r3, [pc, #432]	@ (800f214 <tcp_slowtmr+0x584>)
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f068:	6a1b      	ldr	r3, [r3, #32]
 800f06a:	1ad2      	subs	r2, r2, r3
 800f06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f06e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f072:	4619      	mov	r1, r3
 800f074:	460b      	mov	r3, r1
 800f076:	005b      	lsls	r3, r3, #1
 800f078:	440b      	add	r3, r1
 800f07a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d302      	bcc.n	800f086 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800f080:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f082:	f000 fddd 	bl	800fc40 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800f086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f088:	7d1b      	ldrb	r3, [r3, #20]
 800f08a:	2b03      	cmp	r3, #3
 800f08c:	d10b      	bne.n	800f0a6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f08e:	4b61      	ldr	r3, [pc, #388]	@ (800f214 <tcp_slowtmr+0x584>)
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f094:	6a1b      	ldr	r3, [r3, #32]
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	2b28      	cmp	r3, #40	@ 0x28
 800f09a:	d904      	bls.n	800f0a6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800f09c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800f0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0a8:	7d1b      	ldrb	r3, [r3, #20]
 800f0aa:	2b09      	cmp	r3, #9
 800f0ac:	d10b      	bne.n	800f0c6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f0ae:	4b59      	ldr	r3, [pc, #356]	@ (800f214 <tcp_slowtmr+0x584>)
 800f0b0:	681a      	ldr	r2, [r3, #0]
 800f0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0b4:	6a1b      	ldr	r3, [r3, #32]
 800f0b6:	1ad3      	subs	r3, r2, r3
 800f0b8:	2bf0      	cmp	r3, #240	@ 0xf0
 800f0ba:	d904      	bls.n	800f0c6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800f0c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d060      	beq.n	800f190 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800f0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0d4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800f0d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f0d8:	f000 fbfe 	bl	800f8d8 <tcp_pcb_purge>
      if (prev != NULL) {
 800f0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d010      	beq.n	800f104 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f0e2:	4b50      	ldr	r3, [pc, #320]	@ (800f224 <tcp_slowtmr+0x594>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d106      	bne.n	800f0fa <tcp_slowtmr+0x46a>
 800f0ec:	4b4e      	ldr	r3, [pc, #312]	@ (800f228 <tcp_slowtmr+0x598>)
 800f0ee:	f240 526d 	movw	r2, #1389	@ 0x56d
 800f0f2:	494e      	ldr	r1, [pc, #312]	@ (800f22c <tcp_slowtmr+0x59c>)
 800f0f4:	484e      	ldr	r0, [pc, #312]	@ (800f230 <tcp_slowtmr+0x5a0>)
 800f0f6:	f007 fed1 	bl	8016e9c <iprintf>
        prev->next = pcb->next;
 800f0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0fc:	68da      	ldr	r2, [r3, #12]
 800f0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f100:	60da      	str	r2, [r3, #12]
 800f102:	e00f      	b.n	800f124 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f104:	4b47      	ldr	r3, [pc, #284]	@ (800f224 <tcp_slowtmr+0x594>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d006      	beq.n	800f11c <tcp_slowtmr+0x48c>
 800f10e:	4b46      	ldr	r3, [pc, #280]	@ (800f228 <tcp_slowtmr+0x598>)
 800f110:	f240 5271 	movw	r2, #1393	@ 0x571
 800f114:	4947      	ldr	r1, [pc, #284]	@ (800f234 <tcp_slowtmr+0x5a4>)
 800f116:	4846      	ldr	r0, [pc, #280]	@ (800f230 <tcp_slowtmr+0x5a0>)
 800f118:	f007 fec0 	bl	8016e9c <iprintf>
        tcp_active_pcbs = pcb->next;
 800f11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	4a40      	ldr	r2, [pc, #256]	@ (800f224 <tcp_slowtmr+0x594>)
 800f122:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800f124:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d013      	beq.n	800f154 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f12e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f132:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f134:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800f136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f138:	3304      	adds	r3, #4
 800f13a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f13c:	8ad2      	ldrh	r2, [r2, #22]
 800f13e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f140:	8b09      	ldrh	r1, [r1, #24]
 800f142:	9102      	str	r1, [sp, #8]
 800f144:	9201      	str	r2, [sp, #4]
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	462b      	mov	r3, r5
 800f14a:	4622      	mov	r2, r4
 800f14c:	4601      	mov	r1, r0
 800f14e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f150:	f004 f984 	bl	801345c <tcp_rst>
      err_arg = pcb->callback_arg;
 800f154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f15c:	7d1b      	ldrb	r3, [r3, #20]
 800f15e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f162:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f16a:	6838      	ldr	r0, [r7, #0]
 800f16c:	f7ff f9f2 	bl	800e554 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800f170:	4b31      	ldr	r3, [pc, #196]	@ (800f238 <tcp_slowtmr+0x5a8>)
 800f172:	2200      	movs	r2, #0
 800f174:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d004      	beq.n	800f186 <tcp_slowtmr+0x4f6>
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f06f 010c 	mvn.w	r1, #12
 800f182:	68b8      	ldr	r0, [r7, #8]
 800f184:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f186:	4b2c      	ldr	r3, [pc, #176]	@ (800f238 <tcp_slowtmr+0x5a8>)
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d037      	beq.n	800f1fe <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f18e:	e592      	b.n	800ecb6 <tcp_slowtmr+0x26>
      prev = pcb;
 800f190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f192:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800f19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f19c:	7f1b      	ldrb	r3, [r3, #28]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	b2da      	uxtb	r2, r3
 800f1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1a4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1a8:	7f1a      	ldrb	r2, [r3, #28]
 800f1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ac:	7f5b      	ldrb	r3, [r3, #29]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d325      	bcc.n	800f1fe <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800f1b8:	4b1f      	ldr	r3, [pc, #124]	@ (800f238 <tcp_slowtmr+0x5a8>)
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00b      	beq.n	800f1e0 <tcp_slowtmr+0x550>
 800f1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f1ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1d0:	6912      	ldr	r2, [r2, #16]
 800f1d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f1d4:	4610      	mov	r0, r2
 800f1d6:	4798      	blx	r3
 800f1d8:	4603      	mov	r3, r0
 800f1da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f1de:	e002      	b.n	800f1e6 <tcp_slowtmr+0x556>
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800f1e6:	4b14      	ldr	r3, [pc, #80]	@ (800f238 <tcp_slowtmr+0x5a8>)
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	f47f ad62 	bne.w	800ecb4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f1f0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d102      	bne.n	800f1fe <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f1f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f1fa:	f003 fb7b 	bl	80128f4 <tcp_output>
  while (pcb != NULL) {
 800f1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f200:	2b00      	cmp	r3, #0
 800f202:	f47f ad5e 	bne.w	800ecc2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f206:	2300      	movs	r3, #0
 800f208:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f20a:	4b0c      	ldr	r3, [pc, #48]	@ (800f23c <tcp_slowtmr+0x5ac>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f210:	e069      	b.n	800f2e6 <tcp_slowtmr+0x656>
 800f212:	bf00      	nop
 800f214:	20027364 	.word	0x20027364
 800f218:	000a4cb8 	.word	0x000a4cb8
 800f21c:	10624dd3 	.word	0x10624dd3
 800f220:	000124f8 	.word	0x000124f8
 800f224:	20027370 	.word	0x20027370
 800f228:	08018cb8 	.word	0x08018cb8
 800f22c:	080190f0 	.word	0x080190f0
 800f230:	08018cfc 	.word	0x08018cfc
 800f234:	0801911c 	.word	0x0801911c
 800f238:	20027378 	.word	0x20027378
 800f23c:	20027374 	.word	0x20027374
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f242:	7d1b      	ldrb	r3, [r3, #20]
 800f244:	2b0a      	cmp	r3, #10
 800f246:	d006      	beq.n	800f256 <tcp_slowtmr+0x5c6>
 800f248:	4b2b      	ldr	r3, [pc, #172]	@ (800f2f8 <tcp_slowtmr+0x668>)
 800f24a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800f24e:	492b      	ldr	r1, [pc, #172]	@ (800f2fc <tcp_slowtmr+0x66c>)
 800f250:	482b      	ldr	r0, [pc, #172]	@ (800f300 <tcp_slowtmr+0x670>)
 800f252:	f007 fe23 	bl	8016e9c <iprintf>
    pcb_remove = 0;
 800f256:	2300      	movs	r3, #0
 800f258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f25c:	4b29      	ldr	r3, [pc, #164]	@ (800f304 <tcp_slowtmr+0x674>)
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f262:	6a1b      	ldr	r3, [r3, #32]
 800f264:	1ad3      	subs	r3, r2, r3
 800f266:	2bf0      	cmp	r3, #240	@ 0xf0
 800f268:	d904      	bls.n	800f274 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800f26a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f26e:	3301      	adds	r3, #1
 800f270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d02f      	beq.n	800f2dc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f27c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f27e:	f000 fb2b 	bl	800f8d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f284:	2b00      	cmp	r3, #0
 800f286:	d010      	beq.n	800f2aa <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f288:	4b1f      	ldr	r3, [pc, #124]	@ (800f308 <tcp_slowtmr+0x678>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f28e:	429a      	cmp	r2, r3
 800f290:	d106      	bne.n	800f2a0 <tcp_slowtmr+0x610>
 800f292:	4b19      	ldr	r3, [pc, #100]	@ (800f2f8 <tcp_slowtmr+0x668>)
 800f294:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f298:	491c      	ldr	r1, [pc, #112]	@ (800f30c <tcp_slowtmr+0x67c>)
 800f29a:	4819      	ldr	r0, [pc, #100]	@ (800f300 <tcp_slowtmr+0x670>)
 800f29c:	f007 fdfe 	bl	8016e9c <iprintf>
        prev->next = pcb->next;
 800f2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2a2:	68da      	ldr	r2, [r3, #12]
 800f2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a6:	60da      	str	r2, [r3, #12]
 800f2a8:	e00f      	b.n	800f2ca <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f2aa:	4b17      	ldr	r3, [pc, #92]	@ (800f308 <tcp_slowtmr+0x678>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d006      	beq.n	800f2c2 <tcp_slowtmr+0x632>
 800f2b4:	4b10      	ldr	r3, [pc, #64]	@ (800f2f8 <tcp_slowtmr+0x668>)
 800f2b6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f2ba:	4915      	ldr	r1, [pc, #84]	@ (800f310 <tcp_slowtmr+0x680>)
 800f2bc:	4810      	ldr	r0, [pc, #64]	@ (800f300 <tcp_slowtmr+0x670>)
 800f2be:	f007 fded 	bl	8016e9c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	4a10      	ldr	r2, [pc, #64]	@ (800f308 <tcp_slowtmr+0x678>)
 800f2c8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2cc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2d0:	68db      	ldr	r3, [r3, #12]
 800f2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f2d4:	69f8      	ldr	r0, [r7, #28]
 800f2d6:	f7ff f93d 	bl	800e554 <tcp_free>
 800f2da:	e004      	b.n	800f2e6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2de:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1a9      	bne.n	800f240 <tcp_slowtmr+0x5b0>
    }
  }
}
 800f2ec:	bf00      	nop
 800f2ee:	bf00      	nop
 800f2f0:	3730      	adds	r7, #48	@ 0x30
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bdb0      	pop	{r4, r5, r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	08018cb8 	.word	0x08018cb8
 800f2fc:	08019148 	.word	0x08019148
 800f300:	08018cfc 	.word	0x08018cfc
 800f304:	20027364 	.word	0x20027364
 800f308:	20027374 	.word	0x20027374
 800f30c:	08019178 	.word	0x08019178
 800f310:	080191a0 	.word	0x080191a0

0800f314 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f31a:	4b2d      	ldr	r3, [pc, #180]	@ (800f3d0 <tcp_fasttmr+0xbc>)
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	3301      	adds	r3, #1
 800f320:	b2da      	uxtb	r2, r3
 800f322:	4b2b      	ldr	r3, [pc, #172]	@ (800f3d0 <tcp_fasttmr+0xbc>)
 800f324:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f326:	4b2b      	ldr	r3, [pc, #172]	@ (800f3d4 <tcp_fasttmr+0xc0>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f32c:	e048      	b.n	800f3c0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	7f9a      	ldrb	r2, [r3, #30]
 800f332:	4b27      	ldr	r3, [pc, #156]	@ (800f3d0 <tcp_fasttmr+0xbc>)
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	429a      	cmp	r2, r3
 800f338:	d03f      	beq.n	800f3ba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f33a:	4b25      	ldr	r3, [pc, #148]	@ (800f3d0 <tcp_fasttmr+0xbc>)
 800f33c:	781a      	ldrb	r2, [r3, #0]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	8b5b      	ldrh	r3, [r3, #26]
 800f346:	f003 0301 	and.w	r3, r3, #1
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d010      	beq.n	800f370 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	8b5b      	ldrh	r3, [r3, #26]
 800f352:	f043 0302 	orr.w	r3, r3, #2
 800f356:	b29a      	uxth	r2, r3
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f003 fac9 	bl	80128f4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	8b5b      	ldrh	r3, [r3, #26]
 800f366:	f023 0303 	bic.w	r3, r3, #3
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	8b5b      	ldrh	r3, [r3, #26]
 800f374:	f003 0308 	and.w	r3, r3, #8
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d009      	beq.n	800f390 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	8b5b      	ldrh	r3, [r3, #26]
 800f380:	f023 0308 	bic.w	r3, r3, #8
 800f384:	b29a      	uxth	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff fa76 	bl	800e87c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d00a      	beq.n	800f3b4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f39e:	4b0e      	ldr	r3, [pc, #56]	@ (800f3d8 <tcp_fasttmr+0xc4>)
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 f819 	bl	800f3dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f3aa:	4b0b      	ldr	r3, [pc, #44]	@ (800f3d8 <tcp_fasttmr+0xc4>)
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d000      	beq.n	800f3b4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f3b2:	e7b8      	b.n	800f326 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	607b      	str	r3, [r7, #4]
 800f3b8:	e002      	b.n	800f3c0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d1b3      	bne.n	800f32e <tcp_fasttmr+0x1a>
    }
  }
}
 800f3c6:	bf00      	nop
 800f3c8:	bf00      	nop
 800f3ca:	3708      	adds	r7, #8
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	2002737a 	.word	0x2002737a
 800f3d4:	20027370 	.word	0x20027370
 800f3d8:	20027378 	.word	0x20027378

0800f3dc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f3dc:	b590      	push	{r4, r7, lr}
 800f3de:	b085      	sub	sp, #20
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d109      	bne.n	800f3fe <tcp_process_refused_data+0x22>
 800f3ea:	4b37      	ldr	r3, [pc, #220]	@ (800f4c8 <tcp_process_refused_data+0xec>)
 800f3ec:	f240 6209 	movw	r2, #1545	@ 0x609
 800f3f0:	4936      	ldr	r1, [pc, #216]	@ (800f4cc <tcp_process_refused_data+0xf0>)
 800f3f2:	4837      	ldr	r0, [pc, #220]	@ (800f4d0 <tcp_process_refused_data+0xf4>)
 800f3f4:	f007 fd52 	bl	8016e9c <iprintf>
 800f3f8:	f06f 030f 	mvn.w	r3, #15
 800f3fc:	e060      	b.n	800f4c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f402:	7b5b      	ldrb	r3, [r3, #13]
 800f404:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f40a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00b      	beq.n	800f434 <tcp_process_refused_data+0x58>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6918      	ldr	r0, [r3, #16]
 800f426:	2300      	movs	r3, #0
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	6879      	ldr	r1, [r7, #4]
 800f42c:	47a0      	blx	r4
 800f42e:	4603      	mov	r3, r0
 800f430:	73fb      	strb	r3, [r7, #15]
 800f432:	e007      	b.n	800f444 <tcp_process_refused_data+0x68>
 800f434:	2300      	movs	r3, #0
 800f436:	68ba      	ldr	r2, [r7, #8]
 800f438:	6879      	ldr	r1, [r7, #4]
 800f43a:	2000      	movs	r0, #0
 800f43c:	f000 f8a4 	bl	800f588 <tcp_recv_null>
 800f440:	4603      	mov	r3, r0
 800f442:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d12a      	bne.n	800f4a2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f44c:	7bbb      	ldrb	r3, [r7, #14]
 800f44e:	f003 0320 	and.w	r3, r3, #32
 800f452:	2b00      	cmp	r3, #0
 800f454:	d033      	beq.n	800f4be <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f45a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f45e:	d005      	beq.n	800f46c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f464:	3301      	adds	r3, #1
 800f466:	b29a      	uxth	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00b      	beq.n	800f48e <tcp_process_refused_data+0xb2>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6918      	ldr	r0, [r3, #16]
 800f480:	2300      	movs	r3, #0
 800f482:	2200      	movs	r2, #0
 800f484:	6879      	ldr	r1, [r7, #4]
 800f486:	47a0      	blx	r4
 800f488:	4603      	mov	r3, r0
 800f48a:	73fb      	strb	r3, [r7, #15]
 800f48c:	e001      	b.n	800f492 <tcp_process_refused_data+0xb6>
 800f48e:	2300      	movs	r3, #0
 800f490:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f496:	f113 0f0d 	cmn.w	r3, #13
 800f49a:	d110      	bne.n	800f4be <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f49c:	f06f 030c 	mvn.w	r3, #12
 800f4a0:	e00e      	b.n	800f4c0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f4a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4a6:	f113 0f0d 	cmn.w	r3, #13
 800f4aa:	d102      	bne.n	800f4b2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f4ac:	f06f 030c 	mvn.w	r3, #12
 800f4b0:	e006      	b.n	800f4c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f4b8:	f06f 0304 	mvn.w	r3, #4
 800f4bc:	e000      	b.n	800f4c0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3714      	adds	r7, #20
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd90      	pop	{r4, r7, pc}
 800f4c8:	08018cb8 	.word	0x08018cb8
 800f4cc:	080191c8 	.word	0x080191c8
 800f4d0:	08018cfc 	.word	0x08018cfc

0800f4d4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f4dc:	e007      	b.n	800f4ee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 f80a 	bl	800f4fe <tcp_seg_free>
    seg = next;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d1f4      	bne.n	800f4de <tcp_segs_free+0xa>
  }
}
 800f4f4:	bf00      	nop
 800f4f6:	bf00      	nop
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b082      	sub	sp, #8
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00c      	beq.n	800f526 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d004      	beq.n	800f51e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	4618      	mov	r0, r3
 800f51a:	f7fe fd6f 	bl	800dffc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f51e:	6879      	ldr	r1, [r7, #4]
 800f520:	2003      	movs	r0, #3
 800f522:	f7fd fec7 	bl	800d2b4 <memp_free>
  }
}
 800f526:	bf00      	nop
 800f528:	3708      	adds	r7, #8
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
	...

0800f530 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d106      	bne.n	800f54c <tcp_seg_copy+0x1c>
 800f53e:	4b0f      	ldr	r3, [pc, #60]	@ (800f57c <tcp_seg_copy+0x4c>)
 800f540:	f240 6282 	movw	r2, #1666	@ 0x682
 800f544:	490e      	ldr	r1, [pc, #56]	@ (800f580 <tcp_seg_copy+0x50>)
 800f546:	480f      	ldr	r0, [pc, #60]	@ (800f584 <tcp_seg_copy+0x54>)
 800f548:	f007 fca8 	bl	8016e9c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f54c:	2003      	movs	r0, #3
 800f54e:	f7fd fe3b 	bl	800d1c8 <memp_malloc>
 800f552:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d101      	bne.n	800f55e <tcp_seg_copy+0x2e>
    return NULL;
 800f55a:	2300      	movs	r3, #0
 800f55c:	e00a      	b.n	800f574 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f55e:	2210      	movs	r2, #16
 800f560:	6879      	ldr	r1, [r7, #4]
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f007 fec5 	bl	80172f2 <memcpy>
  pbuf_ref(cseg->p);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fe fdeb 	bl	800e148 <pbuf_ref>
  return cseg;
 800f572:	68fb      	ldr	r3, [r7, #12]
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	08018cb8 	.word	0x08018cb8
 800f580:	0801920c 	.word	0x0801920c
 800f584:	08018cfc 	.word	0x08018cfc

0800f588 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
 800f594:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d109      	bne.n	800f5b0 <tcp_recv_null+0x28>
 800f59c:	4b12      	ldr	r3, [pc, #72]	@ (800f5e8 <tcp_recv_null+0x60>)
 800f59e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f5a2:	4912      	ldr	r1, [pc, #72]	@ (800f5ec <tcp_recv_null+0x64>)
 800f5a4:	4812      	ldr	r0, [pc, #72]	@ (800f5f0 <tcp_recv_null+0x68>)
 800f5a6:	f007 fc79 	bl	8016e9c <iprintf>
 800f5aa:	f06f 030f 	mvn.w	r3, #15
 800f5ae:	e016      	b.n	800f5de <tcp_recv_null+0x56>

  if (p != NULL) {
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d009      	beq.n	800f5ca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	891b      	ldrh	r3, [r3, #8]
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	68b8      	ldr	r0, [r7, #8]
 800f5be:	f7ff fb17 	bl	800ebf0 <tcp_recved>
    pbuf_free(p);
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7fe fd1a 	bl	800dffc <pbuf_free>
 800f5c8:	e008      	b.n	800f5dc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f5ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d104      	bne.n	800f5dc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f5d2:	68b8      	ldr	r0, [r7, #8]
 800f5d4:	f7ff f9bc 	bl	800e950 <tcp_close>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	e000      	b.n	800f5de <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	08018cb8 	.word	0x08018cb8
 800f5ec:	08019228 	.word	0x08019228
 800f5f0:	08018cfc 	.word	0x08018cfc

0800f5f4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b086      	sub	sp, #24
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f5fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f602:	2b00      	cmp	r3, #0
 800f604:	db01      	blt.n	800f60a <tcp_kill_prio+0x16>
 800f606:	79fb      	ldrb	r3, [r7, #7]
 800f608:	e000      	b.n	800f60c <tcp_kill_prio+0x18>
 800f60a:	237f      	movs	r3, #127	@ 0x7f
 800f60c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f60e:	7afb      	ldrb	r3, [r7, #11]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d034      	beq.n	800f67e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f614:	7afb      	ldrb	r3, [r7, #11]
 800f616:	3b01      	subs	r3, #1
 800f618:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f61e:	2300      	movs	r3, #0
 800f620:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f622:	4b19      	ldr	r3, [pc, #100]	@ (800f688 <tcp_kill_prio+0x94>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	617b      	str	r3, [r7, #20]
 800f628:	e01f      	b.n	800f66a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	7d5b      	ldrb	r3, [r3, #21]
 800f62e:	7afa      	ldrb	r2, [r7, #11]
 800f630:	429a      	cmp	r2, r3
 800f632:	d80c      	bhi.n	800f64e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f638:	7afa      	ldrb	r2, [r7, #11]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d112      	bne.n	800f664 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f63e:	4b13      	ldr	r3, [pc, #76]	@ (800f68c <tcp_kill_prio+0x98>)
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	6a1b      	ldr	r3, [r3, #32]
 800f646:	1ad3      	subs	r3, r2, r3
 800f648:	68fa      	ldr	r2, [r7, #12]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d80a      	bhi.n	800f664 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f64e:	4b0f      	ldr	r3, [pc, #60]	@ (800f68c <tcp_kill_prio+0x98>)
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	6a1b      	ldr	r3, [r3, #32]
 800f656:	1ad3      	subs	r3, r2, r3
 800f658:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	7d5b      	ldrb	r3, [r3, #21]
 800f662:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	617b      	str	r3, [r7, #20]
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1dc      	bne.n	800f62a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d004      	beq.n	800f680 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f676:	6938      	ldr	r0, [r7, #16]
 800f678:	f7ff fa54 	bl	800eb24 <tcp_abort>
 800f67c:	e000      	b.n	800f680 <tcp_kill_prio+0x8c>
    return;
 800f67e:	bf00      	nop
  }
}
 800f680:	3718      	adds	r7, #24
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	20027370 	.word	0x20027370
 800f68c:	20027364 	.word	0x20027364

0800f690 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b086      	sub	sp, #24
 800f694:	af00      	add	r7, sp, #0
 800f696:	4603      	mov	r3, r0
 800f698:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f69a:	79fb      	ldrb	r3, [r7, #7]
 800f69c:	2b08      	cmp	r3, #8
 800f69e:	d009      	beq.n	800f6b4 <tcp_kill_state+0x24>
 800f6a0:	79fb      	ldrb	r3, [r7, #7]
 800f6a2:	2b09      	cmp	r3, #9
 800f6a4:	d006      	beq.n	800f6b4 <tcp_kill_state+0x24>
 800f6a6:	4b1a      	ldr	r3, [pc, #104]	@ (800f710 <tcp_kill_state+0x80>)
 800f6a8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800f6ac:	4919      	ldr	r1, [pc, #100]	@ (800f714 <tcp_kill_state+0x84>)
 800f6ae:	481a      	ldr	r0, [pc, #104]	@ (800f718 <tcp_kill_state+0x88>)
 800f6b0:	f007 fbf4 	bl	8016e9c <iprintf>

  inactivity = 0;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6bc:	4b17      	ldr	r3, [pc, #92]	@ (800f71c <tcp_kill_state+0x8c>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	617b      	str	r3, [r7, #20]
 800f6c2:	e017      	b.n	800f6f4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	7d1b      	ldrb	r3, [r3, #20]
 800f6c8:	79fa      	ldrb	r2, [r7, #7]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d10f      	bne.n	800f6ee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f6ce:	4b14      	ldr	r3, [pc, #80]	@ (800f720 <tcp_kill_state+0x90>)
 800f6d0:	681a      	ldr	r2, [r3, #0]
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	6a1b      	ldr	r3, [r3, #32]
 800f6d6:	1ad3      	subs	r3, r2, r3
 800f6d8:	68fa      	ldr	r2, [r7, #12]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d807      	bhi.n	800f6ee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f6de:	4b10      	ldr	r3, [pc, #64]	@ (800f720 <tcp_kill_state+0x90>)
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	6a1b      	ldr	r3, [r3, #32]
 800f6e6:	1ad3      	subs	r3, r2, r3
 800f6e8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	617b      	str	r3, [r7, #20]
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1e4      	bne.n	800f6c4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d003      	beq.n	800f708 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f700:	2100      	movs	r1, #0
 800f702:	6938      	ldr	r0, [r7, #16]
 800f704:	f7ff f950 	bl	800e9a8 <tcp_abandon>
  }
}
 800f708:	bf00      	nop
 800f70a:	3718      	adds	r7, #24
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	08018cb8 	.word	0x08018cb8
 800f714:	08019244 	.word	0x08019244
 800f718:	08018cfc 	.word	0x08018cfc
 800f71c:	20027370 	.word	0x20027370
 800f720:	20027364 	.word	0x20027364

0800f724 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f72e:	2300      	movs	r3, #0
 800f730:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f732:	4b12      	ldr	r3, [pc, #72]	@ (800f77c <tcp_kill_timewait+0x58>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	60fb      	str	r3, [r7, #12]
 800f738:	e012      	b.n	800f760 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f73a:	4b11      	ldr	r3, [pc, #68]	@ (800f780 <tcp_kill_timewait+0x5c>)
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6a1b      	ldr	r3, [r3, #32]
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	429a      	cmp	r2, r3
 800f748:	d807      	bhi.n	800f75a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f74a:	4b0d      	ldr	r3, [pc, #52]	@ (800f780 <tcp_kill_timewait+0x5c>)
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	6a1b      	ldr	r3, [r3, #32]
 800f752:	1ad3      	subs	r3, r2, r3
 800f754:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	60fb      	str	r3, [r7, #12]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d1e9      	bne.n	800f73a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d002      	beq.n	800f772 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f76c:	68b8      	ldr	r0, [r7, #8]
 800f76e:	f7ff f9d9 	bl	800eb24 <tcp_abort>
  }
}
 800f772:	bf00      	nop
 800f774:	3710      	adds	r7, #16
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	20027374 	.word	0x20027374
 800f780:	20027364 	.word	0x20027364

0800f784 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f78a:	4b10      	ldr	r3, [pc, #64]	@ (800f7cc <tcp_handle_closepend+0x48>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f790:	e014      	b.n	800f7bc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	8b5b      	ldrh	r3, [r3, #26]
 800f79c:	f003 0308 	and.w	r3, r3, #8
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d009      	beq.n	800f7b8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	8b5b      	ldrh	r3, [r3, #26]
 800f7a8:	f023 0308 	bic.w	r3, r3, #8
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f7ff f862 	bl	800e87c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d1e7      	bne.n	800f792 <tcp_handle_closepend+0xe>
  }
}
 800f7c2:	bf00      	nop
 800f7c4:	bf00      	nop
 800f7c6:	3708      	adds	r7, #8
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	20027370 	.word	0x20027370

0800f7d0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f7da:	2001      	movs	r0, #1
 800f7dc:	f7fd fcf4 	bl	800d1c8 <memp_malloc>
 800f7e0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d126      	bne.n	800f836 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f7e8:	f7ff ffcc 	bl	800f784 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f7ec:	f7ff ff9a 	bl	800f724 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f7f0:	2001      	movs	r0, #1
 800f7f2:	f7fd fce9 	bl	800d1c8 <memp_malloc>
 800f7f6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d11b      	bne.n	800f836 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f7fe:	2009      	movs	r0, #9
 800f800:	f7ff ff46 	bl	800f690 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f804:	2001      	movs	r0, #1
 800f806:	f7fd fcdf 	bl	800d1c8 <memp_malloc>
 800f80a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d111      	bne.n	800f836 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f812:	2008      	movs	r0, #8
 800f814:	f7ff ff3c 	bl	800f690 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f818:	2001      	movs	r0, #1
 800f81a:	f7fd fcd5 	bl	800d1c8 <memp_malloc>
 800f81e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d107      	bne.n	800f836 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f826:	79fb      	ldrb	r3, [r7, #7]
 800f828:	4618      	mov	r0, r3
 800f82a:	f7ff fee3 	bl	800f5f4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f82e:	2001      	movs	r0, #1
 800f830:	f7fd fcca 	bl	800d1c8 <memp_malloc>
 800f834:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d03f      	beq.n	800f8bc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f83c:	229c      	movs	r2, #156	@ 0x9c
 800f83e:	2100      	movs	r1, #0
 800f840:	68f8      	ldr	r0, [r7, #12]
 800f842:	f007 fc83 	bl	801714c <memset>
    pcb->prio = prio;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	79fa      	ldrb	r2, [r7, #7]
 800f84a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f852:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f85c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	22ff      	movs	r2, #255	@ 0xff
 800f86a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f872:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2206      	movs	r2, #6
 800f878:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2206      	movs	r2, #6
 800f880:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f888:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2201      	movs	r2, #1
 800f88e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f892:	4b0d      	ldr	r3, [pc, #52]	@ (800f8c8 <tcp_alloc+0xf8>)
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f89a:	4b0c      	ldr	r3, [pc, #48]	@ (800f8cc <tcp_alloc+0xfc>)
 800f89c:	781a      	ldrb	r2, [r3, #0]
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f8a8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	4a08      	ldr	r2, [pc, #32]	@ (800f8d0 <tcp_alloc+0x100>)
 800f8b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	4a07      	ldr	r2, [pc, #28]	@ (800f8d4 <tcp_alloc+0x104>)
 800f8b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3710      	adds	r7, #16
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	20027364 	.word	0x20027364
 800f8cc:	2002737a 	.word	0x2002737a
 800f8d0:	0800f589 	.word	0x0800f589
 800f8d4:	006ddd00 	.word	0x006ddd00

0800f8d8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d107      	bne.n	800f8f6 <tcp_pcb_purge+0x1e>
 800f8e6:	4b21      	ldr	r3, [pc, #132]	@ (800f96c <tcp_pcb_purge+0x94>)
 800f8e8:	f640 0251 	movw	r2, #2129	@ 0x851
 800f8ec:	4920      	ldr	r1, [pc, #128]	@ (800f970 <tcp_pcb_purge+0x98>)
 800f8ee:	4821      	ldr	r0, [pc, #132]	@ (800f974 <tcp_pcb_purge+0x9c>)
 800f8f0:	f007 fad4 	bl	8016e9c <iprintf>
 800f8f4:	e037      	b.n	800f966 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	7d1b      	ldrb	r3, [r3, #20]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d033      	beq.n	800f966 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f902:	2b0a      	cmp	r3, #10
 800f904:	d02f      	beq.n	800f966 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d02b      	beq.n	800f966 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f912:	2b00      	cmp	r3, #0
 800f914:	d007      	beq.n	800f926 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fe fb6e 	bl	800dffc <pbuf_free>
      pcb->refused_data = NULL;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2200      	movs	r2, #0
 800f924:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d002      	beq.n	800f934 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 f986 	bl	800fc40 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f93a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f940:	4618      	mov	r0, r3
 800f942:	f7ff fdc7 	bl	800f4d4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7ff fdc2 	bl	800f4d4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f966:	3708      	adds	r7, #8
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	08018cb8 	.word	0x08018cb8
 800f970:	08019304 	.word	0x08019304
 800f974:	08018cfc 	.word	0x08018cfc

0800f978 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d106      	bne.n	800f996 <tcp_pcb_remove+0x1e>
 800f988:	4b3e      	ldr	r3, [pc, #248]	@ (800fa84 <tcp_pcb_remove+0x10c>)
 800f98a:	f640 0283 	movw	r2, #2179	@ 0x883
 800f98e:	493e      	ldr	r1, [pc, #248]	@ (800fa88 <tcp_pcb_remove+0x110>)
 800f990:	483e      	ldr	r0, [pc, #248]	@ (800fa8c <tcp_pcb_remove+0x114>)
 800f992:	f007 fa83 	bl	8016e9c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d106      	bne.n	800f9aa <tcp_pcb_remove+0x32>
 800f99c:	4b39      	ldr	r3, [pc, #228]	@ (800fa84 <tcp_pcb_remove+0x10c>)
 800f99e:	f640 0284 	movw	r2, #2180	@ 0x884
 800f9a2:	493b      	ldr	r1, [pc, #236]	@ (800fa90 <tcp_pcb_remove+0x118>)
 800f9a4:	4839      	ldr	r0, [pc, #228]	@ (800fa8c <tcp_pcb_remove+0x114>)
 800f9a6:	f007 fa79 	bl	8016e9c <iprintf>

  TCP_RMV(pcblist, pcb);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	683a      	ldr	r2, [r7, #0]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d105      	bne.n	800f9c0 <tcp_pcb_remove+0x48>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	68da      	ldr	r2, [r3, #12]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	601a      	str	r2, [r3, #0]
 800f9be:	e013      	b.n	800f9e8 <tcp_pcb_remove+0x70>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	60fb      	str	r3, [r7, #12]
 800f9c6:	e00c      	b.n	800f9e2 <tcp_pcb_remove+0x6a>
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	683a      	ldr	r2, [r7, #0]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d104      	bne.n	800f9dc <tcp_pcb_remove+0x64>
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	68da      	ldr	r2, [r3, #12]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	60da      	str	r2, [r3, #12]
 800f9da:	e005      	b.n	800f9e8 <tcp_pcb_remove+0x70>
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	60fb      	str	r3, [r7, #12]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d1ef      	bne.n	800f9c8 <tcp_pcb_remove+0x50>
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f9ee:	6838      	ldr	r0, [r7, #0]
 800f9f0:	f7ff ff72 	bl	800f8d8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	7d1b      	ldrb	r3, [r3, #20]
 800f9f8:	2b0a      	cmp	r3, #10
 800f9fa:	d013      	beq.n	800fa24 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d00f      	beq.n	800fa24 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	8b5b      	ldrh	r3, [r3, #26]
 800fa08:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d009      	beq.n	800fa24 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	8b5b      	ldrh	r3, [r3, #26]
 800fa14:	f043 0302 	orr.w	r3, r3, #2
 800fa18:	b29a      	uxth	r2, r3
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fa1e:	6838      	ldr	r0, [r7, #0]
 800fa20:	f002 ff68 	bl	80128f4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	7d1b      	ldrb	r3, [r3, #20]
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d020      	beq.n	800fa6e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d006      	beq.n	800fa42 <tcp_pcb_remove+0xca>
 800fa34:	4b13      	ldr	r3, [pc, #76]	@ (800fa84 <tcp_pcb_remove+0x10c>)
 800fa36:	f640 0293 	movw	r2, #2195	@ 0x893
 800fa3a:	4916      	ldr	r1, [pc, #88]	@ (800fa94 <tcp_pcb_remove+0x11c>)
 800fa3c:	4813      	ldr	r0, [pc, #76]	@ (800fa8c <tcp_pcb_remove+0x114>)
 800fa3e:	f007 fa2d 	bl	8016e9c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d006      	beq.n	800fa58 <tcp_pcb_remove+0xe0>
 800fa4a:	4b0e      	ldr	r3, [pc, #56]	@ (800fa84 <tcp_pcb_remove+0x10c>)
 800fa4c:	f640 0294 	movw	r2, #2196	@ 0x894
 800fa50:	4911      	ldr	r1, [pc, #68]	@ (800fa98 <tcp_pcb_remove+0x120>)
 800fa52:	480e      	ldr	r0, [pc, #56]	@ (800fa8c <tcp_pcb_remove+0x114>)
 800fa54:	f007 fa22 	bl	8016e9c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d006      	beq.n	800fa6e <tcp_pcb_remove+0xf6>
 800fa60:	4b08      	ldr	r3, [pc, #32]	@ (800fa84 <tcp_pcb_remove+0x10c>)
 800fa62:	f640 0296 	movw	r2, #2198	@ 0x896
 800fa66:	490d      	ldr	r1, [pc, #52]	@ (800fa9c <tcp_pcb_remove+0x124>)
 800fa68:	4808      	ldr	r0, [pc, #32]	@ (800fa8c <tcp_pcb_remove+0x114>)
 800fa6a:	f007 fa17 	bl	8016e9c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	2200      	movs	r2, #0
 800fa72:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	2200      	movs	r2, #0
 800fa78:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fa7a:	bf00      	nop
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	08018cb8 	.word	0x08018cb8
 800fa88:	08019320 	.word	0x08019320
 800fa8c:	08018cfc 	.word	0x08018cfc
 800fa90:	0801933c 	.word	0x0801933c
 800fa94:	0801935c 	.word	0x0801935c
 800fa98:	08019374 	.word	0x08019374
 800fa9c:	08019390 	.word	0x08019390

0800faa0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d106      	bne.n	800fabc <tcp_next_iss+0x1c>
 800faae:	4b0a      	ldr	r3, [pc, #40]	@ (800fad8 <tcp_next_iss+0x38>)
 800fab0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800fab4:	4909      	ldr	r1, [pc, #36]	@ (800fadc <tcp_next_iss+0x3c>)
 800fab6:	480a      	ldr	r0, [pc, #40]	@ (800fae0 <tcp_next_iss+0x40>)
 800fab8:	f007 f9f0 	bl	8016e9c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fabc:	4b09      	ldr	r3, [pc, #36]	@ (800fae4 <tcp_next_iss+0x44>)
 800fabe:	681a      	ldr	r2, [r3, #0]
 800fac0:	4b09      	ldr	r3, [pc, #36]	@ (800fae8 <tcp_next_iss+0x48>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	4413      	add	r3, r2
 800fac6:	4a07      	ldr	r2, [pc, #28]	@ (800fae4 <tcp_next_iss+0x44>)
 800fac8:	6013      	str	r3, [r2, #0]
  return iss;
 800faca:	4b06      	ldr	r3, [pc, #24]	@ (800fae4 <tcp_next_iss+0x44>)
 800facc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800face:	4618      	mov	r0, r3
 800fad0:	3708      	adds	r7, #8
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	08018cb8 	.word	0x08018cb8
 800fadc:	080193a8 	.word	0x080193a8
 800fae0:	08018cfc 	.word	0x08018cfc
 800fae4:	20000028 	.word	0x20000028
 800fae8:	20027364 	.word	0x20027364

0800faec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	4603      	mov	r3, r0
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	607a      	str	r2, [r7, #4]
 800faf8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d106      	bne.n	800fb0e <tcp_eff_send_mss_netif+0x22>
 800fb00:	4b14      	ldr	r3, [pc, #80]	@ (800fb54 <tcp_eff_send_mss_netif+0x68>)
 800fb02:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800fb06:	4914      	ldr	r1, [pc, #80]	@ (800fb58 <tcp_eff_send_mss_netif+0x6c>)
 800fb08:	4814      	ldr	r0, [pc, #80]	@ (800fb5c <tcp_eff_send_mss_netif+0x70>)
 800fb0a:	f007 f9c7 	bl	8016e9c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d101      	bne.n	800fb18 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fb14:	89fb      	ldrh	r3, [r7, #14]
 800fb16:	e019      	b.n	800fb4c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fb1c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fb1e:	8afb      	ldrh	r3, [r7, #22]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d012      	beq.n	800fb4a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fb24:	2328      	movs	r3, #40	@ 0x28
 800fb26:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fb28:	8afa      	ldrh	r2, [r7, #22]
 800fb2a:	8abb      	ldrh	r3, [r7, #20]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d904      	bls.n	800fb3a <tcp_eff_send_mss_netif+0x4e>
 800fb30:	8afa      	ldrh	r2, [r7, #22]
 800fb32:	8abb      	ldrh	r3, [r7, #20]
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	e000      	b.n	800fb3c <tcp_eff_send_mss_netif+0x50>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fb3e:	8a7a      	ldrh	r2, [r7, #18]
 800fb40:	89fb      	ldrh	r3, [r7, #14]
 800fb42:	4293      	cmp	r3, r2
 800fb44:	bf28      	it	cs
 800fb46:	4613      	movcs	r3, r2
 800fb48:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fb4a:	89fb      	ldrh	r3, [r7, #14]
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3718      	adds	r7, #24
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	08018cb8 	.word	0x08018cb8
 800fb58:	080193c4 	.word	0x080193c4
 800fb5c:	08018cfc 	.word	0x08018cfc

0800fb60 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d119      	bne.n	800fba8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fb74:	4b10      	ldr	r3, [pc, #64]	@ (800fbb8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fb76:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800fb7a:	4910      	ldr	r1, [pc, #64]	@ (800fbbc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fb7c:	4810      	ldr	r0, [pc, #64]	@ (800fbc0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fb7e:	f007 f98d 	bl	8016e9c <iprintf>

  while (pcb != NULL) {
 800fb82:	e011      	b.n	800fba8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d108      	bne.n	800fba2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f7fe ffc4 	bl	800eb24 <tcp_abort>
      pcb = next;
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	60fb      	str	r3, [r7, #12]
 800fba0:	e002      	b.n	800fba8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d1ea      	bne.n	800fb84 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fbae:	bf00      	nop
 800fbb0:	bf00      	nop
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	08018cb8 	.word	0x08018cb8
 800fbbc:	080193ec 	.word	0x080193ec
 800fbc0:	08018cfc 	.word	0x08018cfc

0800fbc4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d02a      	beq.n	800fc2a <tcp_netif_ip_addr_changed+0x66>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d026      	beq.n	800fc2a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fbdc:	4b15      	ldr	r3, [pc, #84]	@ (800fc34 <tcp_netif_ip_addr_changed+0x70>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f7ff ffbc 	bl	800fb60 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fbe8:	4b13      	ldr	r3, [pc, #76]	@ (800fc38 <tcp_netif_ip_addr_changed+0x74>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4619      	mov	r1, r3
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f7ff ffb6 	bl	800fb60 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d017      	beq.n	800fc2a <tcp_netif_ip_addr_changed+0x66>
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d013      	beq.n	800fc2a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fc02:	4b0e      	ldr	r3, [pc, #56]	@ (800fc3c <tcp_netif_ip_addr_changed+0x78>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	60fb      	str	r3, [r7, #12]
 800fc08:	e00c      	b.n	800fc24 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681a      	ldr	r2, [r3, #0]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d103      	bne.n	800fc1e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1ef      	bne.n	800fc0a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fc2a:	bf00      	nop
 800fc2c:	3710      	adds	r7, #16
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	20027370 	.word	0x20027370
 800fc38:	20027368 	.word	0x20027368
 800fc3c:	2002736c 	.word	0x2002736c

0800fc40 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d007      	beq.n	800fc60 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7ff fc3d 	bl	800f4d4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fc60:	bf00      	nop
 800fc62:	3708      	adds	r7, #8
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fc68:	b590      	push	{r4, r7, lr}
 800fc6a:	b08d      	sub	sp, #52	@ 0x34
 800fc6c:	af04      	add	r7, sp, #16
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d105      	bne.n	800fc84 <tcp_input+0x1c>
 800fc78:	4b9b      	ldr	r3, [pc, #620]	@ (800fee8 <tcp_input+0x280>)
 800fc7a:	2283      	movs	r2, #131	@ 0x83
 800fc7c:	499b      	ldr	r1, [pc, #620]	@ (800feec <tcp_input+0x284>)
 800fc7e:	489c      	ldr	r0, [pc, #624]	@ (800fef0 <tcp_input+0x288>)
 800fc80:	f007 f90c 	bl	8016e9c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	4a9a      	ldr	r2, [pc, #616]	@ (800fef4 <tcp_input+0x28c>)
 800fc8a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	895b      	ldrh	r3, [r3, #10]
 800fc90:	2b13      	cmp	r3, #19
 800fc92:	f240 83d1 	bls.w	8010438 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fc96:	4b98      	ldr	r3, [pc, #608]	@ (800fef8 <tcp_input+0x290>)
 800fc98:	695b      	ldr	r3, [r3, #20]
 800fc9a:	4a97      	ldr	r2, [pc, #604]	@ (800fef8 <tcp_input+0x290>)
 800fc9c:	6812      	ldr	r2, [r2, #0]
 800fc9e:	4611      	mov	r1, r2
 800fca0:	4618      	mov	r0, r3
 800fca2:	f005 fd39 	bl	8015718 <ip4_addr_isbroadcast_u32>
 800fca6:	4603      	mov	r3, r0
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f040 83c7 	bne.w	801043c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fcae:	4b92      	ldr	r3, [pc, #584]	@ (800fef8 <tcp_input+0x290>)
 800fcb0:	695b      	ldr	r3, [r3, #20]
 800fcb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fcb6:	2be0      	cmp	r3, #224	@ 0xe0
 800fcb8:	f000 83c0 	beq.w	801043c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fcbc:	4b8d      	ldr	r3, [pc, #564]	@ (800fef4 <tcp_input+0x28c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	899b      	ldrh	r3, [r3, #12]
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7fc fdab 	bl	800c820 <lwip_htons>
 800fcca:	4603      	mov	r3, r0
 800fccc:	0b1b      	lsrs	r3, r3, #12
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	009b      	lsls	r3, r3, #2
 800fcd4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fcd6:	7cbb      	ldrb	r3, [r7, #18]
 800fcd8:	2b13      	cmp	r3, #19
 800fcda:	f240 83b1 	bls.w	8010440 <tcp_input+0x7d8>
 800fcde:	7cbb      	ldrb	r3, [r7, #18]
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	891b      	ldrh	r3, [r3, #8]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	f200 83aa 	bhi.w	8010440 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fcec:	7cbb      	ldrb	r3, [r7, #18]
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	3b14      	subs	r3, #20
 800fcf2:	b29a      	uxth	r2, r3
 800fcf4:	4b81      	ldr	r3, [pc, #516]	@ (800fefc <tcp_input+0x294>)
 800fcf6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fcf8:	4b81      	ldr	r3, [pc, #516]	@ (800ff00 <tcp_input+0x298>)
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	895a      	ldrh	r2, [r3, #10]
 800fd02:	7cbb      	ldrb	r3, [r7, #18]
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d309      	bcc.n	800fd1e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fd0a:	4b7c      	ldr	r3, [pc, #496]	@ (800fefc <tcp_input+0x294>)
 800fd0c:	881a      	ldrh	r2, [r3, #0]
 800fd0e:	4b7d      	ldr	r3, [pc, #500]	@ (800ff04 <tcp_input+0x29c>)
 800fd10:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fd12:	7cbb      	ldrb	r3, [r7, #18]
 800fd14:	4619      	mov	r1, r3
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f7fe f8ea 	bl	800def0 <pbuf_remove_header>
 800fd1c:	e04e      	b.n	800fdbc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d105      	bne.n	800fd32 <tcp_input+0xca>
 800fd26:	4b70      	ldr	r3, [pc, #448]	@ (800fee8 <tcp_input+0x280>)
 800fd28:	22c2      	movs	r2, #194	@ 0xc2
 800fd2a:	4977      	ldr	r1, [pc, #476]	@ (800ff08 <tcp_input+0x2a0>)
 800fd2c:	4870      	ldr	r0, [pc, #448]	@ (800fef0 <tcp_input+0x288>)
 800fd2e:	f007 f8b5 	bl	8016e9c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fd32:	2114      	movs	r1, #20
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7fe f8db 	bl	800def0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	895a      	ldrh	r2, [r3, #10]
 800fd3e:	4b71      	ldr	r3, [pc, #452]	@ (800ff04 <tcp_input+0x29c>)
 800fd40:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fd42:	4b6e      	ldr	r3, [pc, #440]	@ (800fefc <tcp_input+0x294>)
 800fd44:	881a      	ldrh	r2, [r3, #0]
 800fd46:	4b6f      	ldr	r3, [pc, #444]	@ (800ff04 <tcp_input+0x29c>)
 800fd48:	881b      	ldrh	r3, [r3, #0]
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fd4e:	4b6d      	ldr	r3, [pc, #436]	@ (800ff04 <tcp_input+0x29c>)
 800fd50:	881b      	ldrh	r3, [r3, #0]
 800fd52:	4619      	mov	r1, r3
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7fe f8cb 	bl	800def0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	895b      	ldrh	r3, [r3, #10]
 800fd60:	8a3a      	ldrh	r2, [r7, #16]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	f200 836e 	bhi.w	8010444 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	4a64      	ldr	r2, [pc, #400]	@ (800ff00 <tcp_input+0x298>)
 800fd70:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	8a3a      	ldrh	r2, [r7, #16]
 800fd78:	4611      	mov	r1, r2
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fe f8b8 	bl	800def0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	891a      	ldrh	r2, [r3, #8]
 800fd84:	8a3b      	ldrh	r3, [r7, #16]
 800fd86:	1ad3      	subs	r3, r2, r3
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	895b      	ldrh	r3, [r3, #10]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d005      	beq.n	800fda2 <tcp_input+0x13a>
 800fd96:	4b54      	ldr	r3, [pc, #336]	@ (800fee8 <tcp_input+0x280>)
 800fd98:	22df      	movs	r2, #223	@ 0xdf
 800fd9a:	495c      	ldr	r1, [pc, #368]	@ (800ff0c <tcp_input+0x2a4>)
 800fd9c:	4854      	ldr	r0, [pc, #336]	@ (800fef0 <tcp_input+0x288>)
 800fd9e:	f007 f87d 	bl	8016e9c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	891a      	ldrh	r2, [r3, #8]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	891b      	ldrh	r3, [r3, #8]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d005      	beq.n	800fdbc <tcp_input+0x154>
 800fdb0:	4b4d      	ldr	r3, [pc, #308]	@ (800fee8 <tcp_input+0x280>)
 800fdb2:	22e0      	movs	r2, #224	@ 0xe0
 800fdb4:	4956      	ldr	r1, [pc, #344]	@ (800ff10 <tcp_input+0x2a8>)
 800fdb6:	484e      	ldr	r0, [pc, #312]	@ (800fef0 <tcp_input+0x288>)
 800fdb8:	f007 f870 	bl	8016e9c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fdbc:	4b4d      	ldr	r3, [pc, #308]	@ (800fef4 <tcp_input+0x28c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	881b      	ldrh	r3, [r3, #0]
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	4a4b      	ldr	r2, [pc, #300]	@ (800fef4 <tcp_input+0x28c>)
 800fdc6:	6814      	ldr	r4, [r2, #0]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7fc fd29 	bl	800c820 <lwip_htons>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fdd2:	4b48      	ldr	r3, [pc, #288]	@ (800fef4 <tcp_input+0x28c>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	885b      	ldrh	r3, [r3, #2]
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	4a46      	ldr	r2, [pc, #280]	@ (800fef4 <tcp_input+0x28c>)
 800fddc:	6814      	ldr	r4, [r2, #0]
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7fc fd1e 	bl	800c820 <lwip_htons>
 800fde4:	4603      	mov	r3, r0
 800fde6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fde8:	4b42      	ldr	r3, [pc, #264]	@ (800fef4 <tcp_input+0x28c>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	4a41      	ldr	r2, [pc, #260]	@ (800fef4 <tcp_input+0x28c>)
 800fdf0:	6814      	ldr	r4, [r2, #0]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fc fd2a 	bl	800c84c <lwip_htonl>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	6063      	str	r3, [r4, #4]
 800fdfc:	6863      	ldr	r3, [r4, #4]
 800fdfe:	4a45      	ldr	r2, [pc, #276]	@ (800ff14 <tcp_input+0x2ac>)
 800fe00:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fe02:	4b3c      	ldr	r3, [pc, #240]	@ (800fef4 <tcp_input+0x28c>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	689b      	ldr	r3, [r3, #8]
 800fe08:	4a3a      	ldr	r2, [pc, #232]	@ (800fef4 <tcp_input+0x28c>)
 800fe0a:	6814      	ldr	r4, [r2, #0]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7fc fd1d 	bl	800c84c <lwip_htonl>
 800fe12:	4603      	mov	r3, r0
 800fe14:	60a3      	str	r3, [r4, #8]
 800fe16:	68a3      	ldr	r3, [r4, #8]
 800fe18:	4a3f      	ldr	r2, [pc, #252]	@ (800ff18 <tcp_input+0x2b0>)
 800fe1a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fe1c:	4b35      	ldr	r3, [pc, #212]	@ (800fef4 <tcp_input+0x28c>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	89db      	ldrh	r3, [r3, #14]
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	4a33      	ldr	r2, [pc, #204]	@ (800fef4 <tcp_input+0x28c>)
 800fe26:	6814      	ldr	r4, [r2, #0]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fc fcf9 	bl	800c820 <lwip_htons>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fe32:	4b30      	ldr	r3, [pc, #192]	@ (800fef4 <tcp_input+0x28c>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	899b      	ldrh	r3, [r3, #12]
 800fe38:	b29b      	uxth	r3, r3
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7fc fcf0 	bl	800c820 <lwip_htons>
 800fe40:	4603      	mov	r3, r0
 800fe42:	b2db      	uxtb	r3, r3
 800fe44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe48:	b2da      	uxtb	r2, r3
 800fe4a:	4b34      	ldr	r3, [pc, #208]	@ (800ff1c <tcp_input+0x2b4>)
 800fe4c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	891a      	ldrh	r2, [r3, #8]
 800fe52:	4b33      	ldr	r3, [pc, #204]	@ (800ff20 <tcp_input+0x2b8>)
 800fe54:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fe56:	4b31      	ldr	r3, [pc, #196]	@ (800ff1c <tcp_input+0x2b4>)
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	f003 0303 	and.w	r3, r3, #3
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d00c      	beq.n	800fe7c <tcp_input+0x214>
    tcplen++;
 800fe62:	4b2f      	ldr	r3, [pc, #188]	@ (800ff20 <tcp_input+0x2b8>)
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	3301      	adds	r3, #1
 800fe68:	b29a      	uxth	r2, r3
 800fe6a:	4b2d      	ldr	r3, [pc, #180]	@ (800ff20 <tcp_input+0x2b8>)
 800fe6c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	891a      	ldrh	r2, [r3, #8]
 800fe72:	4b2b      	ldr	r3, [pc, #172]	@ (800ff20 <tcp_input+0x2b8>)
 800fe74:	881b      	ldrh	r3, [r3, #0]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	f200 82e6 	bhi.w	8010448 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe80:	4b28      	ldr	r3, [pc, #160]	@ (800ff24 <tcp_input+0x2bc>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	61fb      	str	r3, [r7, #28]
 800fe86:	e09d      	b.n	800ffc4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fe88:	69fb      	ldr	r3, [r7, #28]
 800fe8a:	7d1b      	ldrb	r3, [r3, #20]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d105      	bne.n	800fe9c <tcp_input+0x234>
 800fe90:	4b15      	ldr	r3, [pc, #84]	@ (800fee8 <tcp_input+0x280>)
 800fe92:	22fb      	movs	r2, #251	@ 0xfb
 800fe94:	4924      	ldr	r1, [pc, #144]	@ (800ff28 <tcp_input+0x2c0>)
 800fe96:	4816      	ldr	r0, [pc, #88]	@ (800fef0 <tcp_input+0x288>)
 800fe98:	f007 f800 	bl	8016e9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	7d1b      	ldrb	r3, [r3, #20]
 800fea0:	2b0a      	cmp	r3, #10
 800fea2:	d105      	bne.n	800feb0 <tcp_input+0x248>
 800fea4:	4b10      	ldr	r3, [pc, #64]	@ (800fee8 <tcp_input+0x280>)
 800fea6:	22fc      	movs	r2, #252	@ 0xfc
 800fea8:	4920      	ldr	r1, [pc, #128]	@ (800ff2c <tcp_input+0x2c4>)
 800feaa:	4811      	ldr	r0, [pc, #68]	@ (800fef0 <tcp_input+0x288>)
 800feac:	f006 fff6 	bl	8016e9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800feb0:	69fb      	ldr	r3, [r7, #28]
 800feb2:	7d1b      	ldrb	r3, [r3, #20]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d105      	bne.n	800fec4 <tcp_input+0x25c>
 800feb8:	4b0b      	ldr	r3, [pc, #44]	@ (800fee8 <tcp_input+0x280>)
 800feba:	22fd      	movs	r2, #253	@ 0xfd
 800febc:	491c      	ldr	r1, [pc, #112]	@ (800ff30 <tcp_input+0x2c8>)
 800febe:	480c      	ldr	r0, [pc, #48]	@ (800fef0 <tcp_input+0x288>)
 800fec0:	f006 ffec 	bl	8016e9c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	7a1b      	ldrb	r3, [r3, #8]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d033      	beq.n	800ff34 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	7a1a      	ldrb	r2, [r3, #8]
 800fed0:	4b09      	ldr	r3, [pc, #36]	@ (800fef8 <tcp_input+0x290>)
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fed8:	3301      	adds	r3, #1
 800feda:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fedc:	429a      	cmp	r2, r3
 800fede:	d029      	beq.n	800ff34 <tcp_input+0x2cc>
      prev = pcb;
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	61bb      	str	r3, [r7, #24]
      continue;
 800fee4:	e06b      	b.n	800ffbe <tcp_input+0x356>
 800fee6:	bf00      	nop
 800fee8:	08019420 	.word	0x08019420
 800feec:	08019454 	.word	0x08019454
 800fef0:	0801946c 	.word	0x0801946c
 800fef4:	2002738c 	.word	0x2002738c
 800fef8:	20024264 	.word	0x20024264
 800fefc:	20027390 	.word	0x20027390
 800ff00:	20027394 	.word	0x20027394
 800ff04:	20027392 	.word	0x20027392
 800ff08:	08019494 	.word	0x08019494
 800ff0c:	080194a4 	.word	0x080194a4
 800ff10:	080194b0 	.word	0x080194b0
 800ff14:	2002739c 	.word	0x2002739c
 800ff18:	200273a0 	.word	0x200273a0
 800ff1c:	200273a8 	.word	0x200273a8
 800ff20:	200273a6 	.word	0x200273a6
 800ff24:	20027370 	.word	0x20027370
 800ff28:	080194d0 	.word	0x080194d0
 800ff2c:	080194f8 	.word	0x080194f8
 800ff30:	08019524 	.word	0x08019524
    }

    if (pcb->remote_port == tcphdr->src &&
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	8b1a      	ldrh	r2, [r3, #24]
 800ff38:	4b72      	ldr	r3, [pc, #456]	@ (8010104 <tcp_input+0x49c>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	881b      	ldrh	r3, [r3, #0]
 800ff3e:	b29b      	uxth	r3, r3
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d13a      	bne.n	800ffba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	8ada      	ldrh	r2, [r3, #22]
 800ff48:	4b6e      	ldr	r3, [pc, #440]	@ (8010104 <tcp_input+0x49c>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	885b      	ldrh	r3, [r3, #2]
 800ff4e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d132      	bne.n	800ffba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	685a      	ldr	r2, [r3, #4]
 800ff58:	4b6b      	ldr	r3, [pc, #428]	@ (8010108 <tcp_input+0x4a0>)
 800ff5a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d12c      	bne.n	800ffba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	681a      	ldr	r2, [r3, #0]
 800ff64:	4b68      	ldr	r3, [pc, #416]	@ (8010108 <tcp_input+0x4a0>)
 800ff66:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d126      	bne.n	800ffba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	69fa      	ldr	r2, [r7, #28]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d106      	bne.n	800ff84 <tcp_input+0x31c>
 800ff76:	4b65      	ldr	r3, [pc, #404]	@ (801010c <tcp_input+0x4a4>)
 800ff78:	f240 120d 	movw	r2, #269	@ 0x10d
 800ff7c:	4964      	ldr	r1, [pc, #400]	@ (8010110 <tcp_input+0x4a8>)
 800ff7e:	4865      	ldr	r0, [pc, #404]	@ (8010114 <tcp_input+0x4ac>)
 800ff80:	f006 ff8c 	bl	8016e9c <iprintf>
      if (prev != NULL) {
 800ff84:	69bb      	ldr	r3, [r7, #24]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00a      	beq.n	800ffa0 <tcp_input+0x338>
        prev->next = pcb->next;
 800ff8a:	69fb      	ldr	r3, [r7, #28]
 800ff8c:	68da      	ldr	r2, [r3, #12]
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ff92:	4b61      	ldr	r3, [pc, #388]	@ (8010118 <tcp_input+0x4b0>)
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ff9a:	4a5f      	ldr	r2, [pc, #380]	@ (8010118 <tcp_input+0x4b0>)
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	69fa      	ldr	r2, [r7, #28]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d111      	bne.n	800ffce <tcp_input+0x366>
 800ffaa:	4b58      	ldr	r3, [pc, #352]	@ (801010c <tcp_input+0x4a4>)
 800ffac:	f240 1215 	movw	r2, #277	@ 0x115
 800ffb0:	495a      	ldr	r1, [pc, #360]	@ (801011c <tcp_input+0x4b4>)
 800ffb2:	4858      	ldr	r0, [pc, #352]	@ (8010114 <tcp_input+0x4ac>)
 800ffb4:	f006 ff72 	bl	8016e9c <iprintf>
      break;
 800ffb8:	e009      	b.n	800ffce <tcp_input+0x366>
    }
    prev = pcb;
 800ffba:	69fb      	ldr	r3, [r7, #28]
 800ffbc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffbe:	69fb      	ldr	r3, [r7, #28]
 800ffc0:	68db      	ldr	r3, [r3, #12]
 800ffc2:	61fb      	str	r3, [r7, #28]
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f47f af5e 	bne.w	800fe88 <tcp_input+0x220>
 800ffcc:	e000      	b.n	800ffd0 <tcp_input+0x368>
      break;
 800ffce:	bf00      	nop
  }

  if (pcb == NULL) {
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	f040 80aa 	bne.w	801012c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffd8:	4b51      	ldr	r3, [pc, #324]	@ (8010120 <tcp_input+0x4b8>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	61fb      	str	r3, [r7, #28]
 800ffde:	e03f      	b.n	8010060 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	7d1b      	ldrb	r3, [r3, #20]
 800ffe4:	2b0a      	cmp	r3, #10
 800ffe6:	d006      	beq.n	800fff6 <tcp_input+0x38e>
 800ffe8:	4b48      	ldr	r3, [pc, #288]	@ (801010c <tcp_input+0x4a4>)
 800ffea:	f240 121f 	movw	r2, #287	@ 0x11f
 800ffee:	494d      	ldr	r1, [pc, #308]	@ (8010124 <tcp_input+0x4bc>)
 800fff0:	4848      	ldr	r0, [pc, #288]	@ (8010114 <tcp_input+0x4ac>)
 800fff2:	f006 ff53 	bl	8016e9c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fff6:	69fb      	ldr	r3, [r7, #28]
 800fff8:	7a1b      	ldrb	r3, [r3, #8]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d009      	beq.n	8010012 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fffe:	69fb      	ldr	r3, [r7, #28]
 8010000:	7a1a      	ldrb	r2, [r3, #8]
 8010002:	4b41      	ldr	r3, [pc, #260]	@ (8010108 <tcp_input+0x4a0>)
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801000a:	3301      	adds	r3, #1
 801000c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801000e:	429a      	cmp	r2, r3
 8010010:	d122      	bne.n	8010058 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010012:	69fb      	ldr	r3, [r7, #28]
 8010014:	8b1a      	ldrh	r2, [r3, #24]
 8010016:	4b3b      	ldr	r3, [pc, #236]	@ (8010104 <tcp_input+0x49c>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	881b      	ldrh	r3, [r3, #0]
 801001c:	b29b      	uxth	r3, r3
 801001e:	429a      	cmp	r2, r3
 8010020:	d11b      	bne.n	801005a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	8ada      	ldrh	r2, [r3, #22]
 8010026:	4b37      	ldr	r3, [pc, #220]	@ (8010104 <tcp_input+0x49c>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	885b      	ldrh	r3, [r3, #2]
 801002c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801002e:	429a      	cmp	r2, r3
 8010030:	d113      	bne.n	801005a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	685a      	ldr	r2, [r3, #4]
 8010036:	4b34      	ldr	r3, [pc, #208]	@ (8010108 <tcp_input+0x4a0>)
 8010038:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801003a:	429a      	cmp	r2, r3
 801003c:	d10d      	bne.n	801005a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801003e:	69fb      	ldr	r3, [r7, #28]
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	4b31      	ldr	r3, [pc, #196]	@ (8010108 <tcp_input+0x4a0>)
 8010044:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010046:	429a      	cmp	r2, r3
 8010048:	d107      	bne.n	801005a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801004a:	69f8      	ldr	r0, [r7, #28]
 801004c:	f000 fb56 	bl	80106fc <tcp_timewait_input>
        }
        pbuf_free(p);
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f7fd ffd3 	bl	800dffc <pbuf_free>
        return;
 8010056:	e1fd      	b.n	8010454 <tcp_input+0x7ec>
        continue;
 8010058:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801005a:	69fb      	ldr	r3, [r7, #28]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	61fb      	str	r3, [r7, #28]
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d1bc      	bne.n	800ffe0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010066:	2300      	movs	r3, #0
 8010068:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801006a:	4b2f      	ldr	r3, [pc, #188]	@ (8010128 <tcp_input+0x4c0>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	617b      	str	r3, [r7, #20]
 8010070:	e02a      	b.n	80100c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	7a1b      	ldrb	r3, [r3, #8]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d00c      	beq.n	8010094 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	7a1a      	ldrb	r2, [r3, #8]
 801007e:	4b22      	ldr	r3, [pc, #136]	@ (8010108 <tcp_input+0x4a0>)
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010086:	3301      	adds	r3, #1
 8010088:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801008a:	429a      	cmp	r2, r3
 801008c:	d002      	beq.n	8010094 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	61bb      	str	r3, [r7, #24]
        continue;
 8010092:	e016      	b.n	80100c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	8ada      	ldrh	r2, [r3, #22]
 8010098:	4b1a      	ldr	r3, [pc, #104]	@ (8010104 <tcp_input+0x49c>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	885b      	ldrh	r3, [r3, #2]
 801009e:	b29b      	uxth	r3, r3
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d10c      	bne.n	80100be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	4b17      	ldr	r3, [pc, #92]	@ (8010108 <tcp_input+0x4a0>)
 80100aa:	695b      	ldr	r3, [r3, #20]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d00f      	beq.n	80100d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d00d      	beq.n	80100d2 <tcp_input+0x46a>
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d009      	beq.n	80100d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	617b      	str	r3, [r7, #20]
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1d1      	bne.n	8010072 <tcp_input+0x40a>
 80100ce:	e000      	b.n	80100d2 <tcp_input+0x46a>
            break;
 80100d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d029      	beq.n	801012c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d00a      	beq.n	80100f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	68da      	ldr	r2, [r3, #12]
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80100e6:	4b10      	ldr	r3, [pc, #64]	@ (8010128 <tcp_input+0x4c0>)
 80100e8:	681a      	ldr	r2, [r3, #0]
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80100ee:	4a0e      	ldr	r2, [pc, #56]	@ (8010128 <tcp_input+0x4c0>)
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80100f4:	6978      	ldr	r0, [r7, #20]
 80100f6:	f000 fa03 	bl	8010500 <tcp_listen_input>
      }
      pbuf_free(p);
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f7fd ff7e 	bl	800dffc <pbuf_free>
      return;
 8010100:	e1a8      	b.n	8010454 <tcp_input+0x7ec>
 8010102:	bf00      	nop
 8010104:	2002738c 	.word	0x2002738c
 8010108:	20024264 	.word	0x20024264
 801010c:	08019420 	.word	0x08019420
 8010110:	0801954c 	.word	0x0801954c
 8010114:	0801946c 	.word	0x0801946c
 8010118:	20027370 	.word	0x20027370
 801011c:	08019578 	.word	0x08019578
 8010120:	20027374 	.word	0x20027374
 8010124:	080195a4 	.word	0x080195a4
 8010128:	2002736c 	.word	0x2002736c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	2b00      	cmp	r3, #0
 8010130:	f000 8158 	beq.w	80103e4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010134:	4b95      	ldr	r3, [pc, #596]	@ (801038c <tcp_input+0x724>)
 8010136:	2200      	movs	r2, #0
 8010138:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	891a      	ldrh	r2, [r3, #8]
 801013e:	4b93      	ldr	r3, [pc, #588]	@ (801038c <tcp_input+0x724>)
 8010140:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010142:	4a92      	ldr	r2, [pc, #584]	@ (801038c <tcp_input+0x724>)
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010148:	4b91      	ldr	r3, [pc, #580]	@ (8010390 <tcp_input+0x728>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	4a8f      	ldr	r2, [pc, #572]	@ (801038c <tcp_input+0x724>)
 801014e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010150:	4b90      	ldr	r3, [pc, #576]	@ (8010394 <tcp_input+0x72c>)
 8010152:	2200      	movs	r2, #0
 8010154:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010156:	4b90      	ldr	r3, [pc, #576]	@ (8010398 <tcp_input+0x730>)
 8010158:	2200      	movs	r2, #0
 801015a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801015c:	4b8f      	ldr	r3, [pc, #572]	@ (801039c <tcp_input+0x734>)
 801015e:	2200      	movs	r2, #0
 8010160:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010162:	4b8f      	ldr	r3, [pc, #572]	@ (80103a0 <tcp_input+0x738>)
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	f003 0308 	and.w	r3, r3, #8
 801016a:	2b00      	cmp	r3, #0
 801016c:	d006      	beq.n	801017c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	7b5b      	ldrb	r3, [r3, #13]
 8010172:	f043 0301 	orr.w	r3, r3, #1
 8010176:	b2da      	uxtb	r2, r3
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010180:	2b00      	cmp	r3, #0
 8010182:	d017      	beq.n	80101b4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010184:	69f8      	ldr	r0, [r7, #28]
 8010186:	f7ff f929 	bl	800f3dc <tcp_process_refused_data>
 801018a:	4603      	mov	r3, r0
 801018c:	f113 0f0d 	cmn.w	r3, #13
 8010190:	d007      	beq.n	80101a2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010196:	2b00      	cmp	r3, #0
 8010198:	d00c      	beq.n	80101b4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801019a:	4b82      	ldr	r3, [pc, #520]	@ (80103a4 <tcp_input+0x73c>)
 801019c:	881b      	ldrh	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d008      	beq.n	80101b4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80101a2:	69fb      	ldr	r3, [r7, #28]
 80101a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	f040 80e3 	bne.w	8010372 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80101ac:	69f8      	ldr	r0, [r7, #28]
 80101ae:	f003 f9a7 	bl	8013500 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80101b2:	e0de      	b.n	8010372 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80101b4:	4a7c      	ldr	r2, [pc, #496]	@ (80103a8 <tcp_input+0x740>)
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80101ba:	69f8      	ldr	r0, [r7, #28]
 80101bc:	f000 fb18 	bl	80107f0 <tcp_process>
 80101c0:	4603      	mov	r3, r0
 80101c2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80101c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80101c8:	f113 0f0d 	cmn.w	r3, #13
 80101cc:	f000 80d3 	beq.w	8010376 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80101d0:	4b71      	ldr	r3, [pc, #452]	@ (8010398 <tcp_input+0x730>)
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	f003 0308 	and.w	r3, r3, #8
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d015      	beq.n	8010208 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d008      	beq.n	80101f8 <tcp_input+0x590>
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101ec:	69fa      	ldr	r2, [r7, #28]
 80101ee:	6912      	ldr	r2, [r2, #16]
 80101f0:	f06f 010d 	mvn.w	r1, #13
 80101f4:	4610      	mov	r0, r2
 80101f6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80101f8:	69f9      	ldr	r1, [r7, #28]
 80101fa:	486c      	ldr	r0, [pc, #432]	@ (80103ac <tcp_input+0x744>)
 80101fc:	f7ff fbbc 	bl	800f978 <tcp_pcb_remove>
        tcp_free(pcb);
 8010200:	69f8      	ldr	r0, [r7, #28]
 8010202:	f7fe f9a7 	bl	800e554 <tcp_free>
 8010206:	e0da      	b.n	80103be <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010208:	2300      	movs	r3, #0
 801020a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801020c:	4b63      	ldr	r3, [pc, #396]	@ (801039c <tcp_input+0x734>)
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d01d      	beq.n	8010250 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010214:	4b61      	ldr	r3, [pc, #388]	@ (801039c <tcp_input+0x734>)
 8010216:	881b      	ldrh	r3, [r3, #0]
 8010218:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010220:	2b00      	cmp	r3, #0
 8010222:	d00a      	beq.n	801023a <tcp_input+0x5d2>
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801022a:	69fa      	ldr	r2, [r7, #28]
 801022c:	6910      	ldr	r0, [r2, #16]
 801022e:	89fa      	ldrh	r2, [r7, #14]
 8010230:	69f9      	ldr	r1, [r7, #28]
 8010232:	4798      	blx	r3
 8010234:	4603      	mov	r3, r0
 8010236:	74fb      	strb	r3, [r7, #19]
 8010238:	e001      	b.n	801023e <tcp_input+0x5d6>
 801023a:	2300      	movs	r3, #0
 801023c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801023e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010242:	f113 0f0d 	cmn.w	r3, #13
 8010246:	f000 8098 	beq.w	801037a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801024a:	4b54      	ldr	r3, [pc, #336]	@ (801039c <tcp_input+0x734>)
 801024c:	2200      	movs	r2, #0
 801024e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010250:	69f8      	ldr	r0, [r7, #28]
 8010252:	f000 f915 	bl	8010480 <tcp_input_delayed_close>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	f040 8090 	bne.w	801037e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801025e:	4b4d      	ldr	r3, [pc, #308]	@ (8010394 <tcp_input+0x72c>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d041      	beq.n	80102ea <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801026a:	2b00      	cmp	r3, #0
 801026c:	d006      	beq.n	801027c <tcp_input+0x614>
 801026e:	4b50      	ldr	r3, [pc, #320]	@ (80103b0 <tcp_input+0x748>)
 8010270:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010274:	494f      	ldr	r1, [pc, #316]	@ (80103b4 <tcp_input+0x74c>)
 8010276:	4850      	ldr	r0, [pc, #320]	@ (80103b8 <tcp_input+0x750>)
 8010278:	f006 fe10 	bl	8016e9c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	8b5b      	ldrh	r3, [r3, #26]
 8010280:	f003 0310 	and.w	r3, r3, #16
 8010284:	2b00      	cmp	r3, #0
 8010286:	d008      	beq.n	801029a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010288:	4b42      	ldr	r3, [pc, #264]	@ (8010394 <tcp_input+0x72c>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4618      	mov	r0, r3
 801028e:	f7fd feb5 	bl	800dffc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010292:	69f8      	ldr	r0, [r7, #28]
 8010294:	f7fe fc46 	bl	800eb24 <tcp_abort>
            goto aborted;
 8010298:	e091      	b.n	80103be <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d00c      	beq.n	80102be <tcp_input+0x656>
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80102aa:	69fb      	ldr	r3, [r7, #28]
 80102ac:	6918      	ldr	r0, [r3, #16]
 80102ae:	4b39      	ldr	r3, [pc, #228]	@ (8010394 <tcp_input+0x72c>)
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	2300      	movs	r3, #0
 80102b4:	69f9      	ldr	r1, [r7, #28]
 80102b6:	47a0      	blx	r4
 80102b8:	4603      	mov	r3, r0
 80102ba:	74fb      	strb	r3, [r7, #19]
 80102bc:	e008      	b.n	80102d0 <tcp_input+0x668>
 80102be:	4b35      	ldr	r3, [pc, #212]	@ (8010394 <tcp_input+0x72c>)
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	2300      	movs	r3, #0
 80102c4:	69f9      	ldr	r1, [r7, #28]
 80102c6:	2000      	movs	r0, #0
 80102c8:	f7ff f95e 	bl	800f588 <tcp_recv_null>
 80102cc:	4603      	mov	r3, r0
 80102ce:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80102d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102d4:	f113 0f0d 	cmn.w	r3, #13
 80102d8:	d053      	beq.n	8010382 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80102da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d003      	beq.n	80102ea <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80102e2:	4b2c      	ldr	r3, [pc, #176]	@ (8010394 <tcp_input+0x72c>)
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80102ea:	4b2b      	ldr	r3, [pc, #172]	@ (8010398 <tcp_input+0x730>)
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	f003 0320 	and.w	r3, r3, #32
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d030      	beq.n	8010358 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d009      	beq.n	8010312 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80102fe:	69fb      	ldr	r3, [r7, #28]
 8010300:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010302:	7b5a      	ldrb	r2, [r3, #13]
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010308:	f042 0220 	orr.w	r2, r2, #32
 801030c:	b2d2      	uxtb	r2, r2
 801030e:	735a      	strb	r2, [r3, #13]
 8010310:	e022      	b.n	8010358 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010312:	69fb      	ldr	r3, [r7, #28]
 8010314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010316:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801031a:	d005      	beq.n	8010328 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010320:	3301      	adds	r3, #1
 8010322:	b29a      	uxth	r2, r3
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801032e:	2b00      	cmp	r3, #0
 8010330:	d00b      	beq.n	801034a <tcp_input+0x6e2>
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	6918      	ldr	r0, [r3, #16]
 801033c:	2300      	movs	r3, #0
 801033e:	2200      	movs	r2, #0
 8010340:	69f9      	ldr	r1, [r7, #28]
 8010342:	47a0      	blx	r4
 8010344:	4603      	mov	r3, r0
 8010346:	74fb      	strb	r3, [r7, #19]
 8010348:	e001      	b.n	801034e <tcp_input+0x6e6>
 801034a:	2300      	movs	r3, #0
 801034c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801034e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010352:	f113 0f0d 	cmn.w	r3, #13
 8010356:	d016      	beq.n	8010386 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010358:	4b13      	ldr	r3, [pc, #76]	@ (80103a8 <tcp_input+0x740>)
 801035a:	2200      	movs	r2, #0
 801035c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801035e:	69f8      	ldr	r0, [r7, #28]
 8010360:	f000 f88e 	bl	8010480 <tcp_input_delayed_close>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d128      	bne.n	80103bc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801036a:	69f8      	ldr	r0, [r7, #28]
 801036c:	f002 fac2 	bl	80128f4 <tcp_output>
 8010370:	e025      	b.n	80103be <tcp_input+0x756>
        goto aborted;
 8010372:	bf00      	nop
 8010374:	e023      	b.n	80103be <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010376:	bf00      	nop
 8010378:	e021      	b.n	80103be <tcp_input+0x756>
              goto aborted;
 801037a:	bf00      	nop
 801037c:	e01f      	b.n	80103be <tcp_input+0x756>
          goto aborted;
 801037e:	bf00      	nop
 8010380:	e01d      	b.n	80103be <tcp_input+0x756>
            goto aborted;
 8010382:	bf00      	nop
 8010384:	e01b      	b.n	80103be <tcp_input+0x756>
              goto aborted;
 8010386:	bf00      	nop
 8010388:	e019      	b.n	80103be <tcp_input+0x756>
 801038a:	bf00      	nop
 801038c:	2002737c 	.word	0x2002737c
 8010390:	2002738c 	.word	0x2002738c
 8010394:	200273ac 	.word	0x200273ac
 8010398:	200273a9 	.word	0x200273a9
 801039c:	200273a4 	.word	0x200273a4
 80103a0:	200273a8 	.word	0x200273a8
 80103a4:	200273a6 	.word	0x200273a6
 80103a8:	200273b0 	.word	0x200273b0
 80103ac:	20027370 	.word	0x20027370
 80103b0:	08019420 	.word	0x08019420
 80103b4:	080195d4 	.word	0x080195d4
 80103b8:	0801946c 	.word	0x0801946c
          goto aborted;
 80103bc:	bf00      	nop
    tcp_input_pcb = NULL;
 80103be:	4b27      	ldr	r3, [pc, #156]	@ (801045c <tcp_input+0x7f4>)
 80103c0:	2200      	movs	r2, #0
 80103c2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80103c4:	4b26      	ldr	r3, [pc, #152]	@ (8010460 <tcp_input+0x7f8>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80103ca:	4b26      	ldr	r3, [pc, #152]	@ (8010464 <tcp_input+0x7fc>)
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d03f      	beq.n	8010452 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80103d2:	4b24      	ldr	r3, [pc, #144]	@ (8010464 <tcp_input+0x7fc>)
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fd fe10 	bl	800dffc <pbuf_free>
      inseg.p = NULL;
 80103dc:	4b21      	ldr	r3, [pc, #132]	@ (8010464 <tcp_input+0x7fc>)
 80103de:	2200      	movs	r2, #0
 80103e0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80103e2:	e036      	b.n	8010452 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80103e4:	4b20      	ldr	r3, [pc, #128]	@ (8010468 <tcp_input+0x800>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	899b      	ldrh	r3, [r3, #12]
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7fc fa17 	bl	800c820 <lwip_htons>
 80103f2:	4603      	mov	r3, r0
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	f003 0304 	and.w	r3, r3, #4
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d118      	bne.n	8010430 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103fe:	4b1b      	ldr	r3, [pc, #108]	@ (801046c <tcp_input+0x804>)
 8010400:	6819      	ldr	r1, [r3, #0]
 8010402:	4b1b      	ldr	r3, [pc, #108]	@ (8010470 <tcp_input+0x808>)
 8010404:	881b      	ldrh	r3, [r3, #0]
 8010406:	461a      	mov	r2, r3
 8010408:	4b1a      	ldr	r3, [pc, #104]	@ (8010474 <tcp_input+0x80c>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801040e:	4b16      	ldr	r3, [pc, #88]	@ (8010468 <tcp_input+0x800>)
 8010410:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010412:	885b      	ldrh	r3, [r3, #2]
 8010414:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010416:	4a14      	ldr	r2, [pc, #80]	@ (8010468 <tcp_input+0x800>)
 8010418:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801041a:	8812      	ldrh	r2, [r2, #0]
 801041c:	b292      	uxth	r2, r2
 801041e:	9202      	str	r2, [sp, #8]
 8010420:	9301      	str	r3, [sp, #4]
 8010422:	4b15      	ldr	r3, [pc, #84]	@ (8010478 <tcp_input+0x810>)
 8010424:	9300      	str	r3, [sp, #0]
 8010426:	4b15      	ldr	r3, [pc, #84]	@ (801047c <tcp_input+0x814>)
 8010428:	4602      	mov	r2, r0
 801042a:	2000      	movs	r0, #0
 801042c:	f003 f816 	bl	801345c <tcp_rst>
    pbuf_free(p);
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f7fd fde3 	bl	800dffc <pbuf_free>
  return;
 8010436:	e00c      	b.n	8010452 <tcp_input+0x7ea>
    goto dropped;
 8010438:	bf00      	nop
 801043a:	e006      	b.n	801044a <tcp_input+0x7e2>
    goto dropped;
 801043c:	bf00      	nop
 801043e:	e004      	b.n	801044a <tcp_input+0x7e2>
    goto dropped;
 8010440:	bf00      	nop
 8010442:	e002      	b.n	801044a <tcp_input+0x7e2>
      goto dropped;
 8010444:	bf00      	nop
 8010446:	e000      	b.n	801044a <tcp_input+0x7e2>
      goto dropped;
 8010448:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f7fd fdd6 	bl	800dffc <pbuf_free>
 8010450:	e000      	b.n	8010454 <tcp_input+0x7ec>
  return;
 8010452:	bf00      	nop
}
 8010454:	3724      	adds	r7, #36	@ 0x24
 8010456:	46bd      	mov	sp, r7
 8010458:	bd90      	pop	{r4, r7, pc}
 801045a:	bf00      	nop
 801045c:	200273b0 	.word	0x200273b0
 8010460:	200273ac 	.word	0x200273ac
 8010464:	2002737c 	.word	0x2002737c
 8010468:	2002738c 	.word	0x2002738c
 801046c:	200273a0 	.word	0x200273a0
 8010470:	200273a6 	.word	0x200273a6
 8010474:	2002739c 	.word	0x2002739c
 8010478:	20024274 	.word	0x20024274
 801047c:	20024278 	.word	0x20024278

08010480 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b082      	sub	sp, #8
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d106      	bne.n	801049c <tcp_input_delayed_close+0x1c>
 801048e:	4b17      	ldr	r3, [pc, #92]	@ (80104ec <tcp_input_delayed_close+0x6c>)
 8010490:	f240 225a 	movw	r2, #602	@ 0x25a
 8010494:	4916      	ldr	r1, [pc, #88]	@ (80104f0 <tcp_input_delayed_close+0x70>)
 8010496:	4817      	ldr	r0, [pc, #92]	@ (80104f4 <tcp_input_delayed_close+0x74>)
 8010498:	f006 fd00 	bl	8016e9c <iprintf>

  if (recv_flags & TF_CLOSED) {
 801049c:	4b16      	ldr	r3, [pc, #88]	@ (80104f8 <tcp_input_delayed_close+0x78>)
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	f003 0310 	and.w	r3, r3, #16
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d01c      	beq.n	80104e2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	8b5b      	ldrh	r3, [r3, #26]
 80104ac:	f003 0310 	and.w	r3, r3, #16
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d10d      	bne.n	80104d0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d008      	beq.n	80104d0 <tcp_input_delayed_close+0x50>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	6912      	ldr	r2, [r2, #16]
 80104c8:	f06f 010e 	mvn.w	r1, #14
 80104cc:	4610      	mov	r0, r2
 80104ce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80104d0:	6879      	ldr	r1, [r7, #4]
 80104d2:	480a      	ldr	r0, [pc, #40]	@ (80104fc <tcp_input_delayed_close+0x7c>)
 80104d4:	f7ff fa50 	bl	800f978 <tcp_pcb_remove>
    tcp_free(pcb);
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f7fe f83b 	bl	800e554 <tcp_free>
    return 1;
 80104de:	2301      	movs	r3, #1
 80104e0:	e000      	b.n	80104e4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80104e2:	2300      	movs	r3, #0
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	08019420 	.word	0x08019420
 80104f0:	080195f0 	.word	0x080195f0
 80104f4:	0801946c 	.word	0x0801946c
 80104f8:	200273a9 	.word	0x200273a9
 80104fc:	20027370 	.word	0x20027370

08010500 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010500:	b590      	push	{r4, r7, lr}
 8010502:	b08b      	sub	sp, #44	@ 0x2c
 8010504:	af04      	add	r7, sp, #16
 8010506:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010508:	4b6f      	ldr	r3, [pc, #444]	@ (80106c8 <tcp_listen_input+0x1c8>)
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	f003 0304 	and.w	r3, r3, #4
 8010510:	2b00      	cmp	r3, #0
 8010512:	f040 80d2 	bne.w	80106ba <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d106      	bne.n	801052a <tcp_listen_input+0x2a>
 801051c:	4b6b      	ldr	r3, [pc, #428]	@ (80106cc <tcp_listen_input+0x1cc>)
 801051e:	f240 2281 	movw	r2, #641	@ 0x281
 8010522:	496b      	ldr	r1, [pc, #428]	@ (80106d0 <tcp_listen_input+0x1d0>)
 8010524:	486b      	ldr	r0, [pc, #428]	@ (80106d4 <tcp_listen_input+0x1d4>)
 8010526:	f006 fcb9 	bl	8016e9c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801052a:	4b67      	ldr	r3, [pc, #412]	@ (80106c8 <tcp_listen_input+0x1c8>)
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	f003 0310 	and.w	r3, r3, #16
 8010532:	2b00      	cmp	r3, #0
 8010534:	d019      	beq.n	801056a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010536:	4b68      	ldr	r3, [pc, #416]	@ (80106d8 <tcp_listen_input+0x1d8>)
 8010538:	6819      	ldr	r1, [r3, #0]
 801053a:	4b68      	ldr	r3, [pc, #416]	@ (80106dc <tcp_listen_input+0x1dc>)
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	461a      	mov	r2, r3
 8010540:	4b67      	ldr	r3, [pc, #412]	@ (80106e0 <tcp_listen_input+0x1e0>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010546:	4b67      	ldr	r3, [pc, #412]	@ (80106e4 <tcp_listen_input+0x1e4>)
 8010548:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801054a:	885b      	ldrh	r3, [r3, #2]
 801054c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801054e:	4a65      	ldr	r2, [pc, #404]	@ (80106e4 <tcp_listen_input+0x1e4>)
 8010550:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010552:	8812      	ldrh	r2, [r2, #0]
 8010554:	b292      	uxth	r2, r2
 8010556:	9202      	str	r2, [sp, #8]
 8010558:	9301      	str	r3, [sp, #4]
 801055a:	4b63      	ldr	r3, [pc, #396]	@ (80106e8 <tcp_listen_input+0x1e8>)
 801055c:	9300      	str	r3, [sp, #0]
 801055e:	4b63      	ldr	r3, [pc, #396]	@ (80106ec <tcp_listen_input+0x1ec>)
 8010560:	4602      	mov	r2, r0
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f002 ff7a 	bl	801345c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010568:	e0a9      	b.n	80106be <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801056a:	4b57      	ldr	r3, [pc, #348]	@ (80106c8 <tcp_listen_input+0x1c8>)
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	f003 0302 	and.w	r3, r3, #2
 8010572:	2b00      	cmp	r3, #0
 8010574:	f000 80a3 	beq.w	80106be <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	7d5b      	ldrb	r3, [r3, #21]
 801057c:	4618      	mov	r0, r3
 801057e:	f7ff f927 	bl	800f7d0 <tcp_alloc>
 8010582:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d111      	bne.n	80105ae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	699b      	ldr	r3, [r3, #24]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d00a      	beq.n	80105a8 <tcp_listen_input+0xa8>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	699b      	ldr	r3, [r3, #24]
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	6910      	ldr	r0, [r2, #16]
 801059a:	f04f 32ff 	mov.w	r2, #4294967295
 801059e:	2100      	movs	r1, #0
 80105a0:	4798      	blx	r3
 80105a2:	4603      	mov	r3, r0
 80105a4:	73bb      	strb	r3, [r7, #14]
      return;
 80105a6:	e08b      	b.n	80106c0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80105a8:	23f0      	movs	r3, #240	@ 0xf0
 80105aa:	73bb      	strb	r3, [r7, #14]
      return;
 80105ac:	e088      	b.n	80106c0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80105ae:	4b50      	ldr	r3, [pc, #320]	@ (80106f0 <tcp_listen_input+0x1f0>)
 80105b0:	695a      	ldr	r2, [r3, #20]
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80105b6:	4b4e      	ldr	r3, [pc, #312]	@ (80106f0 <tcp_listen_input+0x1f0>)
 80105b8:	691a      	ldr	r2, [r3, #16]
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	8ada      	ldrh	r2, [r3, #22]
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80105c6:	4b47      	ldr	r3, [pc, #284]	@ (80106e4 <tcp_listen_input+0x1e4>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	881b      	ldrh	r3, [r3, #0]
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	2203      	movs	r2, #3
 80105d6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80105d8:	4b41      	ldr	r3, [pc, #260]	@ (80106e0 <tcp_listen_input+0x1e0>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	1c5a      	adds	r2, r3, #1
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80105ea:	6978      	ldr	r0, [r7, #20]
 80105ec:	f7ff fa58 	bl	800faa0 <tcp_next_iss>
 80105f0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	693a      	ldr	r2, [r7, #16]
 80105f6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	693a      	ldr	r2, [r7, #16]
 80105fc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	693a      	ldr	r2, [r7, #16]
 8010602:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	693a      	ldr	r2, [r7, #16]
 8010608:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801060a:	4b35      	ldr	r3, [pc, #212]	@ (80106e0 <tcp_listen_input+0x1e0>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	1e5a      	subs	r2, r3, #1
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	691a      	ldr	r2, [r3, #16]
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	7a5b      	ldrb	r3, [r3, #9]
 8010626:	f003 030c 	and.w	r3, r3, #12
 801062a:	b2da      	uxtb	r2, r3
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	7a1a      	ldrb	r2, [r3, #8]
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010638:	4b2e      	ldr	r3, [pc, #184]	@ (80106f4 <tcp_listen_input+0x1f4>)
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	60da      	str	r2, [r3, #12]
 8010640:	4a2c      	ldr	r2, [pc, #176]	@ (80106f4 <tcp_listen_input+0x1f4>)
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	6013      	str	r3, [r2, #0]
 8010646:	f003 f8cb 	bl	80137e0 <tcp_timer_needed>
 801064a:	4b2b      	ldr	r3, [pc, #172]	@ (80106f8 <tcp_listen_input+0x1f8>)
 801064c:	2201      	movs	r2, #1
 801064e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010650:	6978      	ldr	r0, [r7, #20]
 8010652:	f001 fd8b 	bl	801216c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010656:	4b23      	ldr	r3, [pc, #140]	@ (80106e4 <tcp_listen_input+0x1e4>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	89db      	ldrh	r3, [r3, #14]
 801065c:	b29a      	uxth	r2, r3
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	3304      	adds	r3, #4
 8010678:	4618      	mov	r0, r3
 801067a:	f004 fdb7 	bl	80151ec <ip4_route>
 801067e:	4601      	mov	r1, r0
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	3304      	adds	r3, #4
 8010684:	461a      	mov	r2, r3
 8010686:	4620      	mov	r0, r4
 8010688:	f7ff fa30 	bl	800faec <tcp_eff_send_mss_netif>
 801068c:	4603      	mov	r3, r0
 801068e:	461a      	mov	r2, r3
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010694:	2112      	movs	r1, #18
 8010696:	6978      	ldr	r0, [r7, #20]
 8010698:	f002 f83e 	bl	8012718 <tcp_enqueue_flags>
 801069c:	4603      	mov	r3, r0
 801069e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80106a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d004      	beq.n	80106b2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80106a8:	2100      	movs	r1, #0
 80106aa:	6978      	ldr	r0, [r7, #20]
 80106ac:	f7fe f97c 	bl	800e9a8 <tcp_abandon>
      return;
 80106b0:	e006      	b.n	80106c0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80106b2:	6978      	ldr	r0, [r7, #20]
 80106b4:	f002 f91e 	bl	80128f4 <tcp_output>
  return;
 80106b8:	e001      	b.n	80106be <tcp_listen_input+0x1be>
    return;
 80106ba:	bf00      	nop
 80106bc:	e000      	b.n	80106c0 <tcp_listen_input+0x1c0>
  return;
 80106be:	bf00      	nop
}
 80106c0:	371c      	adds	r7, #28
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd90      	pop	{r4, r7, pc}
 80106c6:	bf00      	nop
 80106c8:	200273a8 	.word	0x200273a8
 80106cc:	08019420 	.word	0x08019420
 80106d0:	08019618 	.word	0x08019618
 80106d4:	0801946c 	.word	0x0801946c
 80106d8:	200273a0 	.word	0x200273a0
 80106dc:	200273a6 	.word	0x200273a6
 80106e0:	2002739c 	.word	0x2002739c
 80106e4:	2002738c 	.word	0x2002738c
 80106e8:	20024274 	.word	0x20024274
 80106ec:	20024278 	.word	0x20024278
 80106f0:	20024264 	.word	0x20024264
 80106f4:	20027370 	.word	0x20027370
 80106f8:	20027378 	.word	0x20027378

080106fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b086      	sub	sp, #24
 8010700:	af04      	add	r7, sp, #16
 8010702:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010704:	4b2f      	ldr	r3, [pc, #188]	@ (80107c4 <tcp_timewait_input+0xc8>)
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	f003 0304 	and.w	r3, r3, #4
 801070c:	2b00      	cmp	r3, #0
 801070e:	d153      	bne.n	80107b8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d106      	bne.n	8010724 <tcp_timewait_input+0x28>
 8010716:	4b2c      	ldr	r3, [pc, #176]	@ (80107c8 <tcp_timewait_input+0xcc>)
 8010718:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801071c:	492b      	ldr	r1, [pc, #172]	@ (80107cc <tcp_timewait_input+0xd0>)
 801071e:	482c      	ldr	r0, [pc, #176]	@ (80107d0 <tcp_timewait_input+0xd4>)
 8010720:	f006 fbbc 	bl	8016e9c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010724:	4b27      	ldr	r3, [pc, #156]	@ (80107c4 <tcp_timewait_input+0xc8>)
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	f003 0302 	and.w	r3, r3, #2
 801072c:	2b00      	cmp	r3, #0
 801072e:	d02a      	beq.n	8010786 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010730:	4b28      	ldr	r3, [pc, #160]	@ (80107d4 <tcp_timewait_input+0xd8>)
 8010732:	681a      	ldr	r2, [r3, #0]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010738:	1ad3      	subs	r3, r2, r3
 801073a:	2b00      	cmp	r3, #0
 801073c:	db2d      	blt.n	801079a <tcp_timewait_input+0x9e>
 801073e:	4b25      	ldr	r3, [pc, #148]	@ (80107d4 <tcp_timewait_input+0xd8>)
 8010740:	681a      	ldr	r2, [r3, #0]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010746:	6879      	ldr	r1, [r7, #4]
 8010748:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801074a:	440b      	add	r3, r1
 801074c:	1ad3      	subs	r3, r2, r3
 801074e:	2b00      	cmp	r3, #0
 8010750:	dc23      	bgt.n	801079a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010752:	4b21      	ldr	r3, [pc, #132]	@ (80107d8 <tcp_timewait_input+0xdc>)
 8010754:	6819      	ldr	r1, [r3, #0]
 8010756:	4b21      	ldr	r3, [pc, #132]	@ (80107dc <tcp_timewait_input+0xe0>)
 8010758:	881b      	ldrh	r3, [r3, #0]
 801075a:	461a      	mov	r2, r3
 801075c:	4b1d      	ldr	r3, [pc, #116]	@ (80107d4 <tcp_timewait_input+0xd8>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010762:	4b1f      	ldr	r3, [pc, #124]	@ (80107e0 <tcp_timewait_input+0xe4>)
 8010764:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010766:	885b      	ldrh	r3, [r3, #2]
 8010768:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801076a:	4a1d      	ldr	r2, [pc, #116]	@ (80107e0 <tcp_timewait_input+0xe4>)
 801076c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801076e:	8812      	ldrh	r2, [r2, #0]
 8010770:	b292      	uxth	r2, r2
 8010772:	9202      	str	r2, [sp, #8]
 8010774:	9301      	str	r3, [sp, #4]
 8010776:	4b1b      	ldr	r3, [pc, #108]	@ (80107e4 <tcp_timewait_input+0xe8>)
 8010778:	9300      	str	r3, [sp, #0]
 801077a:	4b1b      	ldr	r3, [pc, #108]	@ (80107e8 <tcp_timewait_input+0xec>)
 801077c:	4602      	mov	r2, r0
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f002 fe6c 	bl	801345c <tcp_rst>
      return;
 8010784:	e01b      	b.n	80107be <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010786:	4b0f      	ldr	r3, [pc, #60]	@ (80107c4 <tcp_timewait_input+0xc8>)
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	f003 0301 	and.w	r3, r3, #1
 801078e:	2b00      	cmp	r3, #0
 8010790:	d003      	beq.n	801079a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010792:	4b16      	ldr	r3, [pc, #88]	@ (80107ec <tcp_timewait_input+0xf0>)
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801079a:	4b10      	ldr	r3, [pc, #64]	@ (80107dc <tcp_timewait_input+0xe0>)
 801079c:	881b      	ldrh	r3, [r3, #0]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d00c      	beq.n	80107bc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	8b5b      	ldrh	r3, [r3, #26]
 80107a6:	f043 0302 	orr.w	r3, r3, #2
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f002 f89f 	bl	80128f4 <tcp_output>
  }
  return;
 80107b6:	e001      	b.n	80107bc <tcp_timewait_input+0xc0>
    return;
 80107b8:	bf00      	nop
 80107ba:	e000      	b.n	80107be <tcp_timewait_input+0xc2>
  return;
 80107bc:	bf00      	nop
}
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	200273a8 	.word	0x200273a8
 80107c8:	08019420 	.word	0x08019420
 80107cc:	08019638 	.word	0x08019638
 80107d0:	0801946c 	.word	0x0801946c
 80107d4:	2002739c 	.word	0x2002739c
 80107d8:	200273a0 	.word	0x200273a0
 80107dc:	200273a6 	.word	0x200273a6
 80107e0:	2002738c 	.word	0x2002738c
 80107e4:	20024274 	.word	0x20024274
 80107e8:	20024278 	.word	0x20024278
 80107ec:	20027364 	.word	0x20027364

080107f0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80107f0:	b590      	push	{r4, r7, lr}
 80107f2:	b08d      	sub	sp, #52	@ 0x34
 80107f4:	af04      	add	r7, sp, #16
 80107f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80107f8:	2300      	movs	r3, #0
 80107fa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80107fc:	2300      	movs	r3, #0
 80107fe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d106      	bne.n	8010814 <tcp_process+0x24>
 8010806:	4b9d      	ldr	r3, [pc, #628]	@ (8010a7c <tcp_process+0x28c>)
 8010808:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801080c:	499c      	ldr	r1, [pc, #624]	@ (8010a80 <tcp_process+0x290>)
 801080e:	489d      	ldr	r0, [pc, #628]	@ (8010a84 <tcp_process+0x294>)
 8010810:	f006 fb44 	bl	8016e9c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010814:	4b9c      	ldr	r3, [pc, #624]	@ (8010a88 <tcp_process+0x298>)
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	f003 0304 	and.w	r3, r3, #4
 801081c:	2b00      	cmp	r3, #0
 801081e:	d04e      	beq.n	80108be <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	7d1b      	ldrb	r3, [r3, #20]
 8010824:	2b02      	cmp	r3, #2
 8010826:	d108      	bne.n	801083a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801082c:	4b97      	ldr	r3, [pc, #604]	@ (8010a8c <tcp_process+0x29c>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	429a      	cmp	r2, r3
 8010832:	d123      	bne.n	801087c <tcp_process+0x8c>
        acceptable = 1;
 8010834:	2301      	movs	r3, #1
 8010836:	76fb      	strb	r3, [r7, #27]
 8010838:	e020      	b.n	801087c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801083e:	4b94      	ldr	r3, [pc, #592]	@ (8010a90 <tcp_process+0x2a0>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	429a      	cmp	r2, r3
 8010844:	d102      	bne.n	801084c <tcp_process+0x5c>
        acceptable = 1;
 8010846:	2301      	movs	r3, #1
 8010848:	76fb      	strb	r3, [r7, #27]
 801084a:	e017      	b.n	801087c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801084c:	4b90      	ldr	r3, [pc, #576]	@ (8010a90 <tcp_process+0x2a0>)
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	2b00      	cmp	r3, #0
 8010858:	db10      	blt.n	801087c <tcp_process+0x8c>
 801085a:	4b8d      	ldr	r3, [pc, #564]	@ (8010a90 <tcp_process+0x2a0>)
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010862:	6879      	ldr	r1, [r7, #4]
 8010864:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010866:	440b      	add	r3, r1
 8010868:	1ad3      	subs	r3, r2, r3
 801086a:	2b00      	cmp	r3, #0
 801086c:	dc06      	bgt.n	801087c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	8b5b      	ldrh	r3, [r3, #26]
 8010872:	f043 0302 	orr.w	r3, r3, #2
 8010876:	b29a      	uxth	r2, r3
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801087c:	7efb      	ldrb	r3, [r7, #27]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d01b      	beq.n	80108ba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	7d1b      	ldrb	r3, [r3, #20]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d106      	bne.n	8010898 <tcp_process+0xa8>
 801088a:	4b7c      	ldr	r3, [pc, #496]	@ (8010a7c <tcp_process+0x28c>)
 801088c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010890:	4980      	ldr	r1, [pc, #512]	@ (8010a94 <tcp_process+0x2a4>)
 8010892:	487c      	ldr	r0, [pc, #496]	@ (8010a84 <tcp_process+0x294>)
 8010894:	f006 fb02 	bl	8016e9c <iprintf>
      recv_flags |= TF_RESET;
 8010898:	4b7f      	ldr	r3, [pc, #508]	@ (8010a98 <tcp_process+0x2a8>)
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	f043 0308 	orr.w	r3, r3, #8
 80108a0:	b2da      	uxtb	r2, r3
 80108a2:	4b7d      	ldr	r3, [pc, #500]	@ (8010a98 <tcp_process+0x2a8>)
 80108a4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	8b5b      	ldrh	r3, [r3, #26]
 80108aa:	f023 0301 	bic.w	r3, r3, #1
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80108b4:	f06f 030d 	mvn.w	r3, #13
 80108b8:	e37a      	b.n	8010fb0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80108ba:	2300      	movs	r3, #0
 80108bc:	e378      	b.n	8010fb0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80108be:	4b72      	ldr	r3, [pc, #456]	@ (8010a88 <tcp_process+0x298>)
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	f003 0302 	and.w	r3, r3, #2
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d010      	beq.n	80108ec <tcp_process+0xfc>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	7d1b      	ldrb	r3, [r3, #20]
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	d00c      	beq.n	80108ec <tcp_process+0xfc>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	7d1b      	ldrb	r3, [r3, #20]
 80108d6:	2b03      	cmp	r3, #3
 80108d8:	d008      	beq.n	80108ec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	8b5b      	ldrh	r3, [r3, #26]
 80108de:	f043 0302 	orr.w	r3, r3, #2
 80108e2:	b29a      	uxth	r2, r3
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80108e8:	2300      	movs	r3, #0
 80108ea:	e361      	b.n	8010fb0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	8b5b      	ldrh	r3, [r3, #26]
 80108f0:	f003 0310 	and.w	r3, r3, #16
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d103      	bne.n	8010900 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80108f8:	4b68      	ldr	r3, [pc, #416]	@ (8010a9c <tcp_process+0x2ac>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2200      	movs	r2, #0
 8010904:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2200      	movs	r2, #0
 801090c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f001 fc2b 	bl	801216c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	7d1b      	ldrb	r3, [r3, #20]
 801091a:	3b02      	subs	r3, #2
 801091c:	2b07      	cmp	r3, #7
 801091e:	f200 8337 	bhi.w	8010f90 <tcp_process+0x7a0>
 8010922:	a201      	add	r2, pc, #4	@ (adr r2, 8010928 <tcp_process+0x138>)
 8010924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010928:	08010949 	.word	0x08010949
 801092c:	08010b79 	.word	0x08010b79
 8010930:	08010cf1 	.word	0x08010cf1
 8010934:	08010d1b 	.word	0x08010d1b
 8010938:	08010e3f 	.word	0x08010e3f
 801093c:	08010cf1 	.word	0x08010cf1
 8010940:	08010ecb 	.word	0x08010ecb
 8010944:	08010f5b 	.word	0x08010f5b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010948:	4b4f      	ldr	r3, [pc, #316]	@ (8010a88 <tcp_process+0x298>)
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	f003 0310 	and.w	r3, r3, #16
 8010950:	2b00      	cmp	r3, #0
 8010952:	f000 80e4 	beq.w	8010b1e <tcp_process+0x32e>
 8010956:	4b4c      	ldr	r3, [pc, #304]	@ (8010a88 <tcp_process+0x298>)
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	f003 0302 	and.w	r3, r3, #2
 801095e:	2b00      	cmp	r3, #0
 8010960:	f000 80dd 	beq.w	8010b1e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010968:	1c5a      	adds	r2, r3, #1
 801096a:	4b48      	ldr	r3, [pc, #288]	@ (8010a8c <tcp_process+0x29c>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	429a      	cmp	r2, r3
 8010970:	f040 80d5 	bne.w	8010b1e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010974:	4b46      	ldr	r3, [pc, #280]	@ (8010a90 <tcp_process+0x2a0>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	1c5a      	adds	r2, r3, #1
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010986:	4b41      	ldr	r3, [pc, #260]	@ (8010a8c <tcp_process+0x29c>)
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801098e:	4b44      	ldr	r3, [pc, #272]	@ (8010aa0 <tcp_process+0x2b0>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	89db      	ldrh	r3, [r3, #14]
 8010994:	b29a      	uxth	r2, r3
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80109a8:	4b39      	ldr	r3, [pc, #228]	@ (8010a90 <tcp_process+0x2a0>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	1e5a      	subs	r2, r3, #1
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2204      	movs	r2, #4
 80109b6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	3304      	adds	r3, #4
 80109c0:	4618      	mov	r0, r3
 80109c2:	f004 fc13 	bl	80151ec <ip4_route>
 80109c6:	4601      	mov	r1, r0
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	3304      	adds	r3, #4
 80109cc:	461a      	mov	r2, r3
 80109ce:	4620      	mov	r0, r4
 80109d0:	f7ff f88c 	bl	800faec <tcp_eff_send_mss_netif>
 80109d4:	4603      	mov	r3, r0
 80109d6:	461a      	mov	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109e0:	009a      	lsls	r2, r3, #2
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109e6:	005b      	lsls	r3, r3, #1
 80109e8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80109ec:	428b      	cmp	r3, r1
 80109ee:	bf38      	it	cc
 80109f0:	460b      	movcc	r3, r1
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d204      	bcs.n	8010a00 <tcp_process+0x210>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	e00d      	b.n	8010a1c <tcp_process+0x22c>
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a04:	005b      	lsls	r3, r3, #1
 8010a06:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d904      	bls.n	8010a18 <tcp_process+0x228>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a12:	005b      	lsls	r3, r3, #1
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	e001      	b.n	8010a1c <tcp_process+0x22c>
 8010a18:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d106      	bne.n	8010a3a <tcp_process+0x24a>
 8010a2c:	4b13      	ldr	r3, [pc, #76]	@ (8010a7c <tcp_process+0x28c>)
 8010a2e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8010a32:	491c      	ldr	r1, [pc, #112]	@ (8010aa4 <tcp_process+0x2b4>)
 8010a34:	4813      	ldr	r0, [pc, #76]	@ (8010a84 <tcp_process+0x294>)
 8010a36:	f006 fa31 	bl	8016e9c <iprintf>
        --pcb->snd_queuelen;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a40:	3b01      	subs	r3, #1
 8010a42:	b29a      	uxth	r2, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a4e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d12a      	bne.n	8010aac <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a5a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d106      	bne.n	8010a70 <tcp_process+0x280>
 8010a62:	4b06      	ldr	r3, [pc, #24]	@ (8010a7c <tcp_process+0x28c>)
 8010a64:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010a68:	490f      	ldr	r1, [pc, #60]	@ (8010aa8 <tcp_process+0x2b8>)
 8010a6a:	4806      	ldr	r0, [pc, #24]	@ (8010a84 <tcp_process+0x294>)
 8010a6c:	f006 fa16 	bl	8016e9c <iprintf>
          pcb->unsent = rseg->next;
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	681a      	ldr	r2, [r3, #0]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010a78:	e01c      	b.n	8010ab4 <tcp_process+0x2c4>
 8010a7a:	bf00      	nop
 8010a7c:	08019420 	.word	0x08019420
 8010a80:	08019658 	.word	0x08019658
 8010a84:	0801946c 	.word	0x0801946c
 8010a88:	200273a8 	.word	0x200273a8
 8010a8c:	200273a0 	.word	0x200273a0
 8010a90:	2002739c 	.word	0x2002739c
 8010a94:	08019674 	.word	0x08019674
 8010a98:	200273a9 	.word	0x200273a9
 8010a9c:	20027364 	.word	0x20027364
 8010aa0:	2002738c 	.word	0x2002738c
 8010aa4:	08019694 	.word	0x08019694
 8010aa8:	080196ac 	.word	0x080196ac
        } else {
          pcb->unacked = rseg->next;
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010ab4:	69f8      	ldr	r0, [r7, #28]
 8010ab6:	f7fe fd22 	bl	800f4fe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d104      	bne.n	8010acc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ac8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010aca:	e006      	b.n	8010ada <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d00a      	beq.n	8010afa <tcp_process+0x30a>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	6910      	ldr	r0, [r2, #16]
 8010aee:	2200      	movs	r2, #0
 8010af0:	6879      	ldr	r1, [r7, #4]
 8010af2:	4798      	blx	r3
 8010af4:	4603      	mov	r3, r0
 8010af6:	76bb      	strb	r3, [r7, #26]
 8010af8:	e001      	b.n	8010afe <tcp_process+0x30e>
 8010afa:	2300      	movs	r3, #0
 8010afc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010afe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010b02:	f113 0f0d 	cmn.w	r3, #13
 8010b06:	d102      	bne.n	8010b0e <tcp_process+0x31e>
          return ERR_ABRT;
 8010b08:	f06f 030c 	mvn.w	r3, #12
 8010b0c:	e250      	b.n	8010fb0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	8b5b      	ldrh	r3, [r3, #26]
 8010b12:	f043 0302 	orr.w	r3, r3, #2
 8010b16:	b29a      	uxth	r2, r3
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010b1c:	e23a      	b.n	8010f94 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010b1e:	4b98      	ldr	r3, [pc, #608]	@ (8010d80 <tcp_process+0x590>)
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	f003 0310 	and.w	r3, r3, #16
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	f000 8234 	beq.w	8010f94 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b2c:	4b95      	ldr	r3, [pc, #596]	@ (8010d84 <tcp_process+0x594>)
 8010b2e:	6819      	ldr	r1, [r3, #0]
 8010b30:	4b95      	ldr	r3, [pc, #596]	@ (8010d88 <tcp_process+0x598>)
 8010b32:	881b      	ldrh	r3, [r3, #0]
 8010b34:	461a      	mov	r2, r3
 8010b36:	4b95      	ldr	r3, [pc, #596]	@ (8010d8c <tcp_process+0x59c>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b3c:	4b94      	ldr	r3, [pc, #592]	@ (8010d90 <tcp_process+0x5a0>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b40:	885b      	ldrh	r3, [r3, #2]
 8010b42:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b44:	4a92      	ldr	r2, [pc, #584]	@ (8010d90 <tcp_process+0x5a0>)
 8010b46:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b48:	8812      	ldrh	r2, [r2, #0]
 8010b4a:	b292      	uxth	r2, r2
 8010b4c:	9202      	str	r2, [sp, #8]
 8010b4e:	9301      	str	r3, [sp, #4]
 8010b50:	4b90      	ldr	r3, [pc, #576]	@ (8010d94 <tcp_process+0x5a4>)
 8010b52:	9300      	str	r3, [sp, #0]
 8010b54:	4b90      	ldr	r3, [pc, #576]	@ (8010d98 <tcp_process+0x5a8>)
 8010b56:	4602      	mov	r2, r0
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f002 fc7f 	bl	801345c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010b64:	2b05      	cmp	r3, #5
 8010b66:	f200 8215 	bhi.w	8010f94 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f002 fa4b 	bl	801300c <tcp_rexmit_rto>
      break;
 8010b76:	e20d      	b.n	8010f94 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010b78:	4b81      	ldr	r3, [pc, #516]	@ (8010d80 <tcp_process+0x590>)
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	f003 0310 	and.w	r3, r3, #16
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	f000 80a1 	beq.w	8010cc8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b86:	4b7f      	ldr	r3, [pc, #508]	@ (8010d84 <tcp_process+0x594>)
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b8e:	1ad3      	subs	r3, r2, r3
 8010b90:	3b01      	subs	r3, #1
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	db7e      	blt.n	8010c94 <tcp_process+0x4a4>
 8010b96:	4b7b      	ldr	r3, [pc, #492]	@ (8010d84 <tcp_process+0x594>)
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b9e:	1ad3      	subs	r3, r2, r3
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	dc77      	bgt.n	8010c94 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2204      	movs	r2, #4
 8010ba8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d102      	bne.n	8010bb8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010bb2:	23fa      	movs	r3, #250	@ 0xfa
 8010bb4:	76bb      	strb	r3, [r7, #26]
 8010bb6:	e01d      	b.n	8010bf4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010bbc:	699b      	ldr	r3, [r3, #24]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d106      	bne.n	8010bd0 <tcp_process+0x3e0>
 8010bc2:	4b76      	ldr	r3, [pc, #472]	@ (8010d9c <tcp_process+0x5ac>)
 8010bc4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010bc8:	4975      	ldr	r1, [pc, #468]	@ (8010da0 <tcp_process+0x5b0>)
 8010bca:	4876      	ldr	r0, [pc, #472]	@ (8010da4 <tcp_process+0x5b4>)
 8010bcc:	f006 f966 	bl	8016e9c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010bd4:	699b      	ldr	r3, [r3, #24]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d00a      	beq.n	8010bf0 <tcp_process+0x400>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010bde:	699b      	ldr	r3, [r3, #24]
 8010be0:	687a      	ldr	r2, [r7, #4]
 8010be2:	6910      	ldr	r0, [r2, #16]
 8010be4:	2200      	movs	r2, #0
 8010be6:	6879      	ldr	r1, [r7, #4]
 8010be8:	4798      	blx	r3
 8010bea:	4603      	mov	r3, r0
 8010bec:	76bb      	strb	r3, [r7, #26]
 8010bee:	e001      	b.n	8010bf4 <tcp_process+0x404>
 8010bf0:	23f0      	movs	r3, #240	@ 0xf0
 8010bf2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010bf4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d00a      	beq.n	8010c12 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010bfc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010c00:	f113 0f0d 	cmn.w	r3, #13
 8010c04:	d002      	beq.n	8010c0c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f7fd ff8c 	bl	800eb24 <tcp_abort>
            }
            return ERR_ABRT;
 8010c0c:	f06f 030c 	mvn.w	r3, #12
 8010c10:	e1ce      	b.n	8010fb0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 fae0 	bl	80111d8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010c18:	4b63      	ldr	r3, [pc, #396]	@ (8010da8 <tcp_process+0x5b8>)
 8010c1a:	881b      	ldrh	r3, [r3, #0]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d005      	beq.n	8010c2c <tcp_process+0x43c>
            recv_acked--;
 8010c20:	4b61      	ldr	r3, [pc, #388]	@ (8010da8 <tcp_process+0x5b8>)
 8010c22:	881b      	ldrh	r3, [r3, #0]
 8010c24:	3b01      	subs	r3, #1
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	4b5f      	ldr	r3, [pc, #380]	@ (8010da8 <tcp_process+0x5b8>)
 8010c2a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c30:	009a      	lsls	r2, r3, #2
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c36:	005b      	lsls	r3, r3, #1
 8010c38:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010c3c:	428b      	cmp	r3, r1
 8010c3e:	bf38      	it	cc
 8010c40:	460b      	movcc	r3, r1
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d204      	bcs.n	8010c50 <tcp_process+0x460>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c4a:	009b      	lsls	r3, r3, #2
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	e00d      	b.n	8010c6c <tcp_process+0x47c>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c54:	005b      	lsls	r3, r3, #1
 8010c56:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d904      	bls.n	8010c68 <tcp_process+0x478>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c62:	005b      	lsls	r3, r3, #1
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	e001      	b.n	8010c6c <tcp_process+0x47c>
 8010c68:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010c72:	4b4e      	ldr	r3, [pc, #312]	@ (8010dac <tcp_process+0x5bc>)
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	f003 0320 	and.w	r3, r3, #32
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d037      	beq.n	8010cee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	8b5b      	ldrh	r3, [r3, #26]
 8010c82:	f043 0302 	orr.w	r3, r3, #2
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2207      	movs	r2, #7
 8010c90:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010c92:	e02c      	b.n	8010cee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c94:	4b3b      	ldr	r3, [pc, #236]	@ (8010d84 <tcp_process+0x594>)
 8010c96:	6819      	ldr	r1, [r3, #0]
 8010c98:	4b3b      	ldr	r3, [pc, #236]	@ (8010d88 <tcp_process+0x598>)
 8010c9a:	881b      	ldrh	r3, [r3, #0]
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8010d8c <tcp_process+0x59c>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8010d90 <tcp_process+0x5a0>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ca8:	885b      	ldrh	r3, [r3, #2]
 8010caa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010cac:	4a38      	ldr	r2, [pc, #224]	@ (8010d90 <tcp_process+0x5a0>)
 8010cae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cb0:	8812      	ldrh	r2, [r2, #0]
 8010cb2:	b292      	uxth	r2, r2
 8010cb4:	9202      	str	r2, [sp, #8]
 8010cb6:	9301      	str	r3, [sp, #4]
 8010cb8:	4b36      	ldr	r3, [pc, #216]	@ (8010d94 <tcp_process+0x5a4>)
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	4b36      	ldr	r3, [pc, #216]	@ (8010d98 <tcp_process+0x5a8>)
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f002 fbcb 	bl	801345c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010cc6:	e167      	b.n	8010f98 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8010d80 <tcp_process+0x590>)
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	f003 0302 	and.w	r3, r3, #2
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	f000 8161 	beq.w	8010f98 <tcp_process+0x7a8>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cda:	1e5a      	subs	r2, r3, #1
 8010cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8010d8c <tcp_process+0x59c>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	f040 8159 	bne.w	8010f98 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f002 f9b2 	bl	8013050 <tcp_rexmit>
      break;
 8010cec:	e154      	b.n	8010f98 <tcp_process+0x7a8>
 8010cee:	e153      	b.n	8010f98 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 fa71 	bl	80111d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8010dac <tcp_process+0x5bc>)
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	f003 0320 	and.w	r3, r3, #32
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f000 814c 	beq.w	8010f9c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	8b5b      	ldrh	r3, [r3, #26]
 8010d08:	f043 0302 	orr.w	r3, r3, #2
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2207      	movs	r2, #7
 8010d16:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010d18:	e140      	b.n	8010f9c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f000 fa5c 	bl	80111d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010d20:	4b22      	ldr	r3, [pc, #136]	@ (8010dac <tcp_process+0x5bc>)
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	f003 0320 	and.w	r3, r3, #32
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d071      	beq.n	8010e10 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010d2c:	4b14      	ldr	r3, [pc, #80]	@ (8010d80 <tcp_process+0x590>)
 8010d2e:	781b      	ldrb	r3, [r3, #0]
 8010d30:	f003 0310 	and.w	r3, r3, #16
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d060      	beq.n	8010dfa <tcp_process+0x60a>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010d3c:	4b11      	ldr	r3, [pc, #68]	@ (8010d84 <tcp_process+0x594>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d15a      	bne.n	8010dfa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d156      	bne.n	8010dfa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	8b5b      	ldrh	r3, [r3, #26]
 8010d50:	f043 0302 	orr.w	r3, r3, #2
 8010d54:	b29a      	uxth	r2, r3
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f7fe fdbc 	bl	800f8d8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010d60:	4b13      	ldr	r3, [pc, #76]	@ (8010db0 <tcp_process+0x5c0>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	687a      	ldr	r2, [r7, #4]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d105      	bne.n	8010d76 <tcp_process+0x586>
 8010d6a:	4b11      	ldr	r3, [pc, #68]	@ (8010db0 <tcp_process+0x5c0>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	68db      	ldr	r3, [r3, #12]
 8010d70:	4a0f      	ldr	r2, [pc, #60]	@ (8010db0 <tcp_process+0x5c0>)
 8010d72:	6013      	str	r3, [r2, #0]
 8010d74:	e02e      	b.n	8010dd4 <tcp_process+0x5e4>
 8010d76:	4b0e      	ldr	r3, [pc, #56]	@ (8010db0 <tcp_process+0x5c0>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	617b      	str	r3, [r7, #20]
 8010d7c:	e027      	b.n	8010dce <tcp_process+0x5de>
 8010d7e:	bf00      	nop
 8010d80:	200273a8 	.word	0x200273a8
 8010d84:	200273a0 	.word	0x200273a0
 8010d88:	200273a6 	.word	0x200273a6
 8010d8c:	2002739c 	.word	0x2002739c
 8010d90:	2002738c 	.word	0x2002738c
 8010d94:	20024274 	.word	0x20024274
 8010d98:	20024278 	.word	0x20024278
 8010d9c:	08019420 	.word	0x08019420
 8010da0:	080196c0 	.word	0x080196c0
 8010da4:	0801946c 	.word	0x0801946c
 8010da8:	200273a4 	.word	0x200273a4
 8010dac:	200273a9 	.word	0x200273a9
 8010db0:	20027370 	.word	0x20027370
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	68db      	ldr	r3, [r3, #12]
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d104      	bne.n	8010dc8 <tcp_process+0x5d8>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	68da      	ldr	r2, [r3, #12]
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	60da      	str	r2, [r3, #12]
 8010dc6:	e005      	b.n	8010dd4 <tcp_process+0x5e4>
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	68db      	ldr	r3, [r3, #12]
 8010dcc:	617b      	str	r3, [r7, #20]
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d1ef      	bne.n	8010db4 <tcp_process+0x5c4>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	60da      	str	r2, [r3, #12]
 8010dda:	4b77      	ldr	r3, [pc, #476]	@ (8010fb8 <tcp_process+0x7c8>)
 8010ddc:	2201      	movs	r2, #1
 8010dde:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	220a      	movs	r2, #10
 8010de4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010de6:	4b75      	ldr	r3, [pc, #468]	@ (8010fbc <tcp_process+0x7cc>)
 8010de8:	681a      	ldr	r2, [r3, #0]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	60da      	str	r2, [r3, #12]
 8010dee:	4a73      	ldr	r2, [pc, #460]	@ (8010fbc <tcp_process+0x7cc>)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6013      	str	r3, [r2, #0]
 8010df4:	f002 fcf4 	bl	80137e0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010df8:	e0d2      	b.n	8010fa0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	8b5b      	ldrh	r3, [r3, #26]
 8010dfe:	f043 0302 	orr.w	r3, r3, #2
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2208      	movs	r2, #8
 8010e0c:	751a      	strb	r2, [r3, #20]
      break;
 8010e0e:	e0c7      	b.n	8010fa0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e10:	4b6b      	ldr	r3, [pc, #428]	@ (8010fc0 <tcp_process+0x7d0>)
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	f003 0310 	and.w	r3, r3, #16
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	f000 80c1 	beq.w	8010fa0 <tcp_process+0x7b0>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010e22:	4b68      	ldr	r3, [pc, #416]	@ (8010fc4 <tcp_process+0x7d4>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	f040 80ba 	bne.w	8010fa0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	f040 80b5 	bne.w	8010fa0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2206      	movs	r2, #6
 8010e3a:	751a      	strb	r2, [r3, #20]
      break;
 8010e3c:	e0b0      	b.n	8010fa0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f000 f9ca 	bl	80111d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010e44:	4b60      	ldr	r3, [pc, #384]	@ (8010fc8 <tcp_process+0x7d8>)
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	f003 0320 	and.w	r3, r3, #32
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	f000 80a9 	beq.w	8010fa4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	8b5b      	ldrh	r3, [r3, #26]
 8010e56:	f043 0302 	orr.w	r3, r3, #2
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f7fe fd39 	bl	800f8d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010e66:	4b59      	ldr	r3, [pc, #356]	@ (8010fcc <tcp_process+0x7dc>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d105      	bne.n	8010e7c <tcp_process+0x68c>
 8010e70:	4b56      	ldr	r3, [pc, #344]	@ (8010fcc <tcp_process+0x7dc>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	4a55      	ldr	r2, [pc, #340]	@ (8010fcc <tcp_process+0x7dc>)
 8010e78:	6013      	str	r3, [r2, #0]
 8010e7a:	e013      	b.n	8010ea4 <tcp_process+0x6b4>
 8010e7c:	4b53      	ldr	r3, [pc, #332]	@ (8010fcc <tcp_process+0x7dc>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	613b      	str	r3, [r7, #16]
 8010e82:	e00c      	b.n	8010e9e <tcp_process+0x6ae>
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	687a      	ldr	r2, [r7, #4]
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d104      	bne.n	8010e98 <tcp_process+0x6a8>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	68da      	ldr	r2, [r3, #12]
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	60da      	str	r2, [r3, #12]
 8010e96:	e005      	b.n	8010ea4 <tcp_process+0x6b4>
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	613b      	str	r3, [r7, #16]
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1ef      	bne.n	8010e84 <tcp_process+0x694>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	60da      	str	r2, [r3, #12]
 8010eaa:	4b43      	ldr	r3, [pc, #268]	@ (8010fb8 <tcp_process+0x7c8>)
 8010eac:	2201      	movs	r2, #1
 8010eae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	220a      	movs	r2, #10
 8010eb4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010eb6:	4b41      	ldr	r3, [pc, #260]	@ (8010fbc <tcp_process+0x7cc>)
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	60da      	str	r2, [r3, #12]
 8010ebe:	4a3f      	ldr	r2, [pc, #252]	@ (8010fbc <tcp_process+0x7cc>)
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6013      	str	r3, [r2, #0]
 8010ec4:	f002 fc8c 	bl	80137e0 <tcp_timer_needed>
      }
      break;
 8010ec8:	e06c      	b.n	8010fa4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 f984 	bl	80111d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8010fc0 <tcp_process+0x7d0>)
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	f003 0310 	and.w	r3, r3, #16
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d065      	beq.n	8010fa8 <tcp_process+0x7b8>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010ee0:	4b38      	ldr	r3, [pc, #224]	@ (8010fc4 <tcp_process+0x7d4>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d15f      	bne.n	8010fa8 <tcp_process+0x7b8>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d15b      	bne.n	8010fa8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f7fe fcf1 	bl	800f8d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010ef6:	4b35      	ldr	r3, [pc, #212]	@ (8010fcc <tcp_process+0x7dc>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d105      	bne.n	8010f0c <tcp_process+0x71c>
 8010f00:	4b32      	ldr	r3, [pc, #200]	@ (8010fcc <tcp_process+0x7dc>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	4a31      	ldr	r2, [pc, #196]	@ (8010fcc <tcp_process+0x7dc>)
 8010f08:	6013      	str	r3, [r2, #0]
 8010f0a:	e013      	b.n	8010f34 <tcp_process+0x744>
 8010f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8010fcc <tcp_process+0x7dc>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	60fb      	str	r3, [r7, #12]
 8010f12:	e00c      	b.n	8010f2e <tcp_process+0x73e>
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	687a      	ldr	r2, [r7, #4]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d104      	bne.n	8010f28 <tcp_process+0x738>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	68da      	ldr	r2, [r3, #12]
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	60da      	str	r2, [r3, #12]
 8010f26:	e005      	b.n	8010f34 <tcp_process+0x744>
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	60fb      	str	r3, [r7, #12]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d1ef      	bne.n	8010f14 <tcp_process+0x724>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2200      	movs	r2, #0
 8010f38:	60da      	str	r2, [r3, #12]
 8010f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8010fb8 <tcp_process+0x7c8>)
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	220a      	movs	r2, #10
 8010f44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010f46:	4b1d      	ldr	r3, [pc, #116]	@ (8010fbc <tcp_process+0x7cc>)
 8010f48:	681a      	ldr	r2, [r3, #0]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	60da      	str	r2, [r3, #12]
 8010f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8010fbc <tcp_process+0x7cc>)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6013      	str	r3, [r2, #0]
 8010f54:	f002 fc44 	bl	80137e0 <tcp_timer_needed>
      }
      break;
 8010f58:	e026      	b.n	8010fa8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f000 f93c 	bl	80111d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010f60:	4b17      	ldr	r3, [pc, #92]	@ (8010fc0 <tcp_process+0x7d0>)
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	f003 0310 	and.w	r3, r3, #16
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d01f      	beq.n	8010fac <tcp_process+0x7bc>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f70:	4b14      	ldr	r3, [pc, #80]	@ (8010fc4 <tcp_process+0x7d4>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d119      	bne.n	8010fac <tcp_process+0x7bc>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d115      	bne.n	8010fac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010f80:	4b11      	ldr	r3, [pc, #68]	@ (8010fc8 <tcp_process+0x7d8>)
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	f043 0310 	orr.w	r3, r3, #16
 8010f88:	b2da      	uxtb	r2, r3
 8010f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8010fc8 <tcp_process+0x7d8>)
 8010f8c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010f8e:	e00d      	b.n	8010fac <tcp_process+0x7bc>
    default:
      break;
 8010f90:	bf00      	nop
 8010f92:	e00c      	b.n	8010fae <tcp_process+0x7be>
      break;
 8010f94:	bf00      	nop
 8010f96:	e00a      	b.n	8010fae <tcp_process+0x7be>
      break;
 8010f98:	bf00      	nop
 8010f9a:	e008      	b.n	8010fae <tcp_process+0x7be>
      break;
 8010f9c:	bf00      	nop
 8010f9e:	e006      	b.n	8010fae <tcp_process+0x7be>
      break;
 8010fa0:	bf00      	nop
 8010fa2:	e004      	b.n	8010fae <tcp_process+0x7be>
      break;
 8010fa4:	bf00      	nop
 8010fa6:	e002      	b.n	8010fae <tcp_process+0x7be>
      break;
 8010fa8:	bf00      	nop
 8010faa:	e000      	b.n	8010fae <tcp_process+0x7be>
      break;
 8010fac:	bf00      	nop
  }
  return ERR_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3724      	adds	r7, #36	@ 0x24
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd90      	pop	{r4, r7, pc}
 8010fb8:	20027378 	.word	0x20027378
 8010fbc:	20027374 	.word	0x20027374
 8010fc0:	200273a8 	.word	0x200273a8
 8010fc4:	200273a0 	.word	0x200273a0
 8010fc8:	200273a9 	.word	0x200273a9
 8010fcc:	20027370 	.word	0x20027370

08010fd0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010fd0:	b590      	push	{r4, r7, lr}
 8010fd2:	b085      	sub	sp, #20
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d106      	bne.n	8010fee <tcp_oos_insert_segment+0x1e>
 8010fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80110d0 <tcp_oos_insert_segment+0x100>)
 8010fe2:	f240 421f 	movw	r2, #1055	@ 0x41f
 8010fe6:	493b      	ldr	r1, [pc, #236]	@ (80110d4 <tcp_oos_insert_segment+0x104>)
 8010fe8:	483b      	ldr	r0, [pc, #236]	@ (80110d8 <tcp_oos_insert_segment+0x108>)
 8010fea:	f005 ff57 	bl	8016e9c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	899b      	ldrh	r3, [r3, #12]
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7fb fc12 	bl	800c820 <lwip_htons>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	b2db      	uxtb	r3, r3
 8011000:	f003 0301 	and.w	r3, r3, #1
 8011004:	2b00      	cmp	r3, #0
 8011006:	d028      	beq.n	801105a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011008:	6838      	ldr	r0, [r7, #0]
 801100a:	f7fe fa63 	bl	800f4d4 <tcp_segs_free>
    next = NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	603b      	str	r3, [r7, #0]
 8011012:	e056      	b.n	80110c2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	68db      	ldr	r3, [r3, #12]
 8011018:	899b      	ldrh	r3, [r3, #12]
 801101a:	b29b      	uxth	r3, r3
 801101c:	4618      	mov	r0, r3
 801101e:	f7fb fbff 	bl	800c820 <lwip_htons>
 8011022:	4603      	mov	r3, r0
 8011024:	b2db      	uxtb	r3, r3
 8011026:	f003 0301 	and.w	r3, r3, #1
 801102a:	2b00      	cmp	r3, #0
 801102c:	d00d      	beq.n	801104a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	68db      	ldr	r3, [r3, #12]
 8011032:	899b      	ldrh	r3, [r3, #12]
 8011034:	b29c      	uxth	r4, r3
 8011036:	2001      	movs	r0, #1
 8011038:	f7fb fbf2 	bl	800c820 <lwip_htons>
 801103c:	4603      	mov	r3, r0
 801103e:	461a      	mov	r2, r3
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	4322      	orrs	r2, r4
 8011046:	b292      	uxth	r2, r2
 8011048:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011054:	68f8      	ldr	r0, [r7, #12]
 8011056:	f7fe fa52 	bl	800f4fe <tcp_seg_free>
    while (next &&
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d00e      	beq.n	801107e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	891b      	ldrh	r3, [r3, #8]
 8011064:	461a      	mov	r2, r3
 8011066:	4b1d      	ldr	r3, [pc, #116]	@ (80110dc <tcp_oos_insert_segment+0x10c>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	441a      	add	r2, r3
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	6839      	ldr	r1, [r7, #0]
 8011074:	8909      	ldrh	r1, [r1, #8]
 8011076:	440b      	add	r3, r1
 8011078:	1ad3      	subs	r3, r2, r3
    while (next &&
 801107a:	2b00      	cmp	r3, #0
 801107c:	daca      	bge.n	8011014 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d01e      	beq.n	80110c2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	891b      	ldrh	r3, [r3, #8]
 8011088:	461a      	mov	r2, r3
 801108a:	4b14      	ldr	r3, [pc, #80]	@ (80110dc <tcp_oos_insert_segment+0x10c>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	441a      	add	r2, r3
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011098:	2b00      	cmp	r3, #0
 801109a:	dd12      	ble.n	80110c2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	68db      	ldr	r3, [r3, #12]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	b29a      	uxth	r2, r3
 80110a4:	4b0d      	ldr	r3, [pc, #52]	@ (80110dc <tcp_oos_insert_segment+0x10c>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	1ad3      	subs	r3, r2, r3
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	685a      	ldr	r2, [r3, #4]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	891b      	ldrh	r3, [r3, #8]
 80110ba:	4619      	mov	r1, r3
 80110bc:	4610      	mov	r0, r2
 80110be:	f7fc fe17 	bl	800dcf0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	683a      	ldr	r2, [r7, #0]
 80110c6:	601a      	str	r2, [r3, #0]
}
 80110c8:	bf00      	nop
 80110ca:	3714      	adds	r7, #20
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd90      	pop	{r4, r7, pc}
 80110d0:	08019420 	.word	0x08019420
 80110d4:	080196e0 	.word	0x080196e0
 80110d8:	0801946c 	.word	0x0801946c
 80110dc:	2002739c 	.word	0x2002739c

080110e0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80110e0:	b5b0      	push	{r4, r5, r7, lr}
 80110e2:	b086      	sub	sp, #24
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	607a      	str	r2, [r7, #4]
 80110ec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80110ee:	e03e      	b.n	801116e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fd f80a 	bl	800e118 <pbuf_clen>
 8011104:	4603      	mov	r3, r0
 8011106:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801110e:	8a7a      	ldrh	r2, [r7, #18]
 8011110:	429a      	cmp	r2, r3
 8011112:	d906      	bls.n	8011122 <tcp_free_acked_segments+0x42>
 8011114:	4b2a      	ldr	r3, [pc, #168]	@ (80111c0 <tcp_free_acked_segments+0xe0>)
 8011116:	f240 4257 	movw	r2, #1111	@ 0x457
 801111a:	492a      	ldr	r1, [pc, #168]	@ (80111c4 <tcp_free_acked_segments+0xe4>)
 801111c:	482a      	ldr	r0, [pc, #168]	@ (80111c8 <tcp_free_acked_segments+0xe8>)
 801111e:	f005 febd 	bl	8016e9c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011128:	8a7b      	ldrh	r3, [r7, #18]
 801112a:	1ad3      	subs	r3, r2, r3
 801112c:	b29a      	uxth	r2, r3
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	891a      	ldrh	r2, [r3, #8]
 8011138:	4b24      	ldr	r3, [pc, #144]	@ (80111cc <tcp_free_acked_segments+0xec>)
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	4413      	add	r3, r2
 801113e:	b29a      	uxth	r2, r3
 8011140:	4b22      	ldr	r3, [pc, #136]	@ (80111cc <tcp_free_acked_segments+0xec>)
 8011142:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011144:	6978      	ldr	r0, [r7, #20]
 8011146:	f7fe f9da 	bl	800f4fe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011150:	2b00      	cmp	r3, #0
 8011152:	d00c      	beq.n	801116e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d109      	bne.n	801116e <tcp_free_acked_segments+0x8e>
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d106      	bne.n	801116e <tcp_free_acked_segments+0x8e>
 8011160:	4b17      	ldr	r3, [pc, #92]	@ (80111c0 <tcp_free_acked_segments+0xe0>)
 8011162:	f240 4261 	movw	r2, #1121	@ 0x461
 8011166:	491a      	ldr	r1, [pc, #104]	@ (80111d0 <tcp_free_acked_segments+0xf0>)
 8011168:	4817      	ldr	r0, [pc, #92]	@ (80111c8 <tcp_free_acked_segments+0xe8>)
 801116a:	f005 fe97 	bl	8016e9c <iprintf>
  while (seg_list != NULL &&
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d020      	beq.n	80111b6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	4618      	mov	r0, r3
 801117c:	f7fb fb66 	bl	800c84c <lwip_htonl>
 8011180:	4604      	mov	r4, r0
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	891b      	ldrh	r3, [r3, #8]
 8011186:	461d      	mov	r5, r3
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	899b      	ldrh	r3, [r3, #12]
 801118e:	b29b      	uxth	r3, r3
 8011190:	4618      	mov	r0, r3
 8011192:	f7fb fb45 	bl	800c820 <lwip_htons>
 8011196:	4603      	mov	r3, r0
 8011198:	b2db      	uxtb	r3, r3
 801119a:	f003 0303 	and.w	r3, r3, #3
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d001      	beq.n	80111a6 <tcp_free_acked_segments+0xc6>
 80111a2:	2301      	movs	r3, #1
 80111a4:	e000      	b.n	80111a8 <tcp_free_acked_segments+0xc8>
 80111a6:	2300      	movs	r3, #0
 80111a8:	442b      	add	r3, r5
 80111aa:	18e2      	adds	r2, r4, r3
 80111ac:	4b09      	ldr	r3, [pc, #36]	@ (80111d4 <tcp_free_acked_segments+0xf4>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	dd9c      	ble.n	80110f0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80111b6:	68bb      	ldr	r3, [r7, #8]
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3718      	adds	r7, #24
 80111bc:	46bd      	mov	sp, r7
 80111be:	bdb0      	pop	{r4, r5, r7, pc}
 80111c0:	08019420 	.word	0x08019420
 80111c4:	08019708 	.word	0x08019708
 80111c8:	0801946c 	.word	0x0801946c
 80111cc:	200273a4 	.word	0x200273a4
 80111d0:	08019730 	.word	0x08019730
 80111d4:	200273a0 	.word	0x200273a0

080111d8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80111d8:	b5b0      	push	{r4, r5, r7, lr}
 80111da:	b094      	sub	sp, #80	@ 0x50
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80111e0:	2300      	movs	r3, #0
 80111e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d106      	bne.n	80111f8 <tcp_receive+0x20>
 80111ea:	4b91      	ldr	r3, [pc, #580]	@ (8011430 <tcp_receive+0x258>)
 80111ec:	f240 427b 	movw	r2, #1147	@ 0x47b
 80111f0:	4990      	ldr	r1, [pc, #576]	@ (8011434 <tcp_receive+0x25c>)
 80111f2:	4891      	ldr	r0, [pc, #580]	@ (8011438 <tcp_receive+0x260>)
 80111f4:	f005 fe52 	bl	8016e9c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	7d1b      	ldrb	r3, [r3, #20]
 80111fc:	2b03      	cmp	r3, #3
 80111fe:	d806      	bhi.n	801120e <tcp_receive+0x36>
 8011200:	4b8b      	ldr	r3, [pc, #556]	@ (8011430 <tcp_receive+0x258>)
 8011202:	f240 427c 	movw	r2, #1148	@ 0x47c
 8011206:	498d      	ldr	r1, [pc, #564]	@ (801143c <tcp_receive+0x264>)
 8011208:	488b      	ldr	r0, [pc, #556]	@ (8011438 <tcp_receive+0x260>)
 801120a:	f005 fe47 	bl	8016e9c <iprintf>

  if (flags & TCP_ACK) {
 801120e:	4b8c      	ldr	r3, [pc, #560]	@ (8011440 <tcp_receive+0x268>)
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	f003 0310 	and.w	r3, r3, #16
 8011216:	2b00      	cmp	r3, #0
 8011218:	f000 8264 	beq.w	80116e4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011222:	461a      	mov	r2, r3
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011228:	4413      	add	r3, r2
 801122a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011230:	4b84      	ldr	r3, [pc, #528]	@ (8011444 <tcp_receive+0x26c>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	2b00      	cmp	r3, #0
 8011238:	db1b      	blt.n	8011272 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801123e:	4b81      	ldr	r3, [pc, #516]	@ (8011444 <tcp_receive+0x26c>)
 8011240:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011242:	429a      	cmp	r2, r3
 8011244:	d106      	bne.n	8011254 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801124a:	4b7f      	ldr	r3, [pc, #508]	@ (8011448 <tcp_receive+0x270>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	1ad3      	subs	r3, r2, r3
 8011250:	2b00      	cmp	r3, #0
 8011252:	db0e      	blt.n	8011272 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011258:	4b7b      	ldr	r3, [pc, #492]	@ (8011448 <tcp_receive+0x270>)
 801125a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801125c:	429a      	cmp	r2, r3
 801125e:	d125      	bne.n	80112ac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011260:	4b7a      	ldr	r3, [pc, #488]	@ (801144c <tcp_receive+0x274>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	89db      	ldrh	r3, [r3, #14]
 8011266:	b29a      	uxth	r2, r3
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801126e:	429a      	cmp	r2, r3
 8011270:	d91c      	bls.n	80112ac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011272:	4b76      	ldr	r3, [pc, #472]	@ (801144c <tcp_receive+0x274>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	89db      	ldrh	r3, [r3, #14]
 8011278:	b29a      	uxth	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801128c:	429a      	cmp	r2, r3
 801128e:	d205      	bcs.n	801129c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801129c:	4b69      	ldr	r3, [pc, #420]	@ (8011444 <tcp_receive+0x26c>)
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80112a4:	4b68      	ldr	r3, [pc, #416]	@ (8011448 <tcp_receive+0x270>)
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80112ac:	4b66      	ldr	r3, [pc, #408]	@ (8011448 <tcp_receive+0x270>)
 80112ae:	681a      	ldr	r2, [r3, #0]
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112b4:	1ad3      	subs	r3, r2, r3
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	dc58      	bgt.n	801136c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80112ba:	4b65      	ldr	r3, [pc, #404]	@ (8011450 <tcp_receive+0x278>)
 80112bc:	881b      	ldrh	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d14b      	bne.n	801135a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80112cc:	4413      	add	r3, r2
 80112ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d142      	bne.n	801135a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80112da:	2b00      	cmp	r3, #0
 80112dc:	db3d      	blt.n	801135a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80112e2:	4b59      	ldr	r3, [pc, #356]	@ (8011448 <tcp_receive+0x270>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d137      	bne.n	801135a <tcp_receive+0x182>
              found_dupack = 1;
 80112ea:	2301      	movs	r3, #1
 80112ec:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80112f4:	2bff      	cmp	r3, #255	@ 0xff
 80112f6:	d007      	beq.n	8011308 <tcp_receive+0x130>
                ++pcb->dupacks;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80112fe:	3301      	adds	r3, #1
 8011300:	b2da      	uxtb	r2, r3
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801130e:	2b03      	cmp	r3, #3
 8011310:	d91b      	bls.n	801134a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801131c:	4413      	add	r3, r2
 801131e:	b29a      	uxth	r2, r3
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011326:	429a      	cmp	r2, r3
 8011328:	d30a      	bcc.n	8011340 <tcp_receive+0x168>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011334:	4413      	add	r3, r2
 8011336:	b29a      	uxth	r2, r3
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801133e:	e004      	b.n	801134a <tcp_receive+0x172>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011346:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011350:	2b02      	cmp	r3, #2
 8011352:	d902      	bls.n	801135a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f001 fee7 	bl	8013128 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801135a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801135c:	2b00      	cmp	r3, #0
 801135e:	f040 8161 	bne.w	8011624 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2200      	movs	r2, #0
 8011366:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801136a:	e15b      	b.n	8011624 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801136c:	4b36      	ldr	r3, [pc, #216]	@ (8011448 <tcp_receive+0x270>)
 801136e:	681a      	ldr	r2, [r3, #0]
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011374:	1ad3      	subs	r3, r2, r3
 8011376:	3b01      	subs	r3, #1
 8011378:	2b00      	cmp	r3, #0
 801137a:	f2c0 814e 	blt.w	801161a <tcp_receive+0x442>
 801137e:	4b32      	ldr	r3, [pc, #200]	@ (8011448 <tcp_receive+0x270>)
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011386:	1ad3      	subs	r3, r2, r3
 8011388:	2b00      	cmp	r3, #0
 801138a:	f300 8146 	bgt.w	801161a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	8b5b      	ldrh	r3, [r3, #26]
 8011392:	f003 0304 	and.w	r3, r3, #4
 8011396:	2b00      	cmp	r3, #0
 8011398:	d010      	beq.n	80113bc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	8b5b      	ldrh	r3, [r3, #26]
 801139e:	f023 0304 	bic.w	r3, r3, #4
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2200      	movs	r2, #0
 80113b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2200      	movs	r2, #0
 80113c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80113ca:	10db      	asrs	r3, r3, #3
 80113cc:	b21b      	sxth	r3, r3
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80113d6:	b29b      	uxth	r3, r3
 80113d8:	4413      	add	r3, r2
 80113da:	b29b      	uxth	r3, r3
 80113dc:	b21a      	sxth	r2, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80113e4:	4b18      	ldr	r3, [pc, #96]	@ (8011448 <tcp_receive+0x270>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	b29a      	uxth	r2, r3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2200      	movs	r2, #0
 80113f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80113fc:	4b12      	ldr	r3, [pc, #72]	@ (8011448 <tcp_receive+0x270>)
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	7d1b      	ldrb	r3, [r3, #20]
 8011408:	2b03      	cmp	r3, #3
 801140a:	f240 8097 	bls.w	801153c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801141a:	429a      	cmp	r2, r3
 801141c:	d245      	bcs.n	80114aa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	8b5b      	ldrh	r3, [r3, #26]
 8011422:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011426:	2b00      	cmp	r3, #0
 8011428:	d014      	beq.n	8011454 <tcp_receive+0x27c>
 801142a:	2301      	movs	r3, #1
 801142c:	e013      	b.n	8011456 <tcp_receive+0x27e>
 801142e:	bf00      	nop
 8011430:	08019420 	.word	0x08019420
 8011434:	08019750 	.word	0x08019750
 8011438:	0801946c 	.word	0x0801946c
 801143c:	0801976c 	.word	0x0801976c
 8011440:	200273a8 	.word	0x200273a8
 8011444:	2002739c 	.word	0x2002739c
 8011448:	200273a0 	.word	0x200273a0
 801144c:	2002738c 	.word	0x2002738c
 8011450:	200273a6 	.word	0x200273a6
 8011454:	2302      	movs	r3, #2
 8011456:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801145a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801145e:	b29a      	uxth	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011464:	fb12 f303 	smulbb	r3, r2, r3
 8011468:	b29b      	uxth	r3, r3
 801146a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801146c:	4293      	cmp	r3, r2
 801146e:	bf28      	it	cs
 8011470:	4613      	movcs	r3, r2
 8011472:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801147a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801147c:	4413      	add	r3, r2
 801147e:	b29a      	uxth	r2, r3
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011486:	429a      	cmp	r2, r3
 8011488:	d309      	bcc.n	801149e <tcp_receive+0x2c6>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011490:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011492:	4413      	add	r3, r2
 8011494:	b29a      	uxth	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801149c:	e04e      	b.n	801153c <tcp_receive+0x364>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80114a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80114a8:	e048      	b.n	801153c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80114b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80114b2:	4413      	add	r3, r2
 80114b4:	b29a      	uxth	r2, r3
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80114bc:	429a      	cmp	r2, r3
 80114be:	d309      	bcc.n	80114d4 <tcp_receive+0x2fc>
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80114c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80114c8:	4413      	add	r3, r2
 80114ca:	b29a      	uxth	r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80114d2:	e004      	b.n	80114de <tcp_receive+0x306>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80114da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d326      	bcc.n	801153c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80114fa:	1ad3      	subs	r3, r2, r3
 80114fc:	b29a      	uxth	r2, r3
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801150e:	4413      	add	r3, r2
 8011510:	b29a      	uxth	r2, r3
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011518:	429a      	cmp	r2, r3
 801151a:	d30a      	bcc.n	8011532 <tcp_receive+0x35a>
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011526:	4413      	add	r3, r2
 8011528:	b29a      	uxth	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011530:	e004      	b.n	801153c <tcp_receive+0x364>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011538:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011544:	4a98      	ldr	r2, [pc, #608]	@ (80117a8 <tcp_receive+0x5d0>)
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f7ff fdca 	bl	80110e0 <tcp_free_acked_segments>
 801154c:	4602      	mov	r2, r0
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801155a:	4a94      	ldr	r2, [pc, #592]	@ (80117ac <tcp_receive+0x5d4>)
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f7ff fdbf 	bl	80110e0 <tcp_free_acked_segments>
 8011562:	4602      	mov	r2, r0
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801156c:	2b00      	cmp	r3, #0
 801156e:	d104      	bne.n	801157a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011576:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011578:	e002      	b.n	8011580 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2200      	movs	r2, #0
 801157e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2200      	movs	r2, #0
 8011584:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801158a:	2b00      	cmp	r3, #0
 801158c:	d103      	bne.n	8011596 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2200      	movs	r2, #0
 8011592:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801159c:	4b84      	ldr	r3, [pc, #528]	@ (80117b0 <tcp_receive+0x5d8>)
 801159e:	881b      	ldrh	r3, [r3, #0]
 80115a0:	4413      	add	r3, r2
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	8b5b      	ldrh	r3, [r3, #26]
 80115ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d035      	beq.n	8011622 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d118      	bne.n	80115f0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00c      	beq.n	80115e0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fb f93a 	bl	800c84c <lwip_htonl>
 80115d8:	4603      	mov	r3, r0
 80115da:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80115dc:	2b00      	cmp	r3, #0
 80115de:	dc20      	bgt.n	8011622 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	8b5b      	ldrh	r3, [r3, #26]
 80115e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80115e8:	b29a      	uxth	r2, r3
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80115ee:	e018      	b.n	8011622 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115f8:	68db      	ldr	r3, [r3, #12]
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fb f925 	bl	800c84c <lwip_htonl>
 8011602:	4603      	mov	r3, r0
 8011604:	1ae3      	subs	r3, r4, r3
 8011606:	2b00      	cmp	r3, #0
 8011608:	dc0b      	bgt.n	8011622 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	8b5b      	ldrh	r3, [r3, #26]
 801160e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011612:	b29a      	uxth	r2, r3
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011618:	e003      	b.n	8011622 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f001 ff70 	bl	8013500 <tcp_send_empty_ack>
 8011620:	e000      	b.n	8011624 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011622:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011628:	2b00      	cmp	r3, #0
 801162a:	d05b      	beq.n	80116e4 <tcp_receive+0x50c>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011630:	4b60      	ldr	r3, [pc, #384]	@ (80117b4 <tcp_receive+0x5dc>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	1ad3      	subs	r3, r2, r3
 8011636:	2b00      	cmp	r3, #0
 8011638:	da54      	bge.n	80116e4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801163a:	4b5f      	ldr	r3, [pc, #380]	@ (80117b8 <tcp_receive+0x5e0>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	b29a      	uxth	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011644:	b29b      	uxth	r3, r3
 8011646:	1ad3      	subs	r3, r2, r3
 8011648:	b29b      	uxth	r3, r3
 801164a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801164e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011658:	10db      	asrs	r3, r3, #3
 801165a:	b21b      	sxth	r3, r3
 801165c:	b29b      	uxth	r3, r3
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	b29b      	uxth	r3, r3
 8011662:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801166c:	b29a      	uxth	r2, r3
 801166e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011672:	4413      	add	r3, r2
 8011674:	b29b      	uxth	r3, r3
 8011676:	b21a      	sxth	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801167c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011680:	2b00      	cmp	r3, #0
 8011682:	da05      	bge.n	8011690 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011684:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011688:	425b      	negs	r3, r3
 801168a:	b29b      	uxth	r3, r3
 801168c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011690:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801169a:	109b      	asrs	r3, r3, #2
 801169c:	b21b      	sxth	r3, r3
 801169e:	b29b      	uxth	r3, r3
 80116a0:	1ad3      	subs	r3, r2, r3
 80116a2:	b29b      	uxth	r3, r3
 80116a4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80116ae:	b29a      	uxth	r2, r3
 80116b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80116b4:	4413      	add	r3, r2
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	b21a      	sxth	r2, r3
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80116c4:	10db      	asrs	r3, r3, #3
 80116c6:	b21b      	sxth	r3, r3
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	4413      	add	r3, r2
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	b21a      	sxth	r2, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2200      	movs	r2, #0
 80116e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80116e4:	4b35      	ldr	r3, [pc, #212]	@ (80117bc <tcp_receive+0x5e4>)
 80116e6:	881b      	ldrh	r3, [r3, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	f000 84df 	beq.w	80120ac <tcp_receive+0xed4>
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	7d1b      	ldrb	r3, [r3, #20]
 80116f2:	2b06      	cmp	r3, #6
 80116f4:	f200 84da 	bhi.w	80120ac <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80116fc:	4b30      	ldr	r3, [pc, #192]	@ (80117c0 <tcp_receive+0x5e8>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	1ad3      	subs	r3, r2, r3
 8011702:	3b01      	subs	r3, #1
 8011704:	2b00      	cmp	r3, #0
 8011706:	f2c0 808f 	blt.w	8011828 <tcp_receive+0x650>
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801170e:	4b2b      	ldr	r3, [pc, #172]	@ (80117bc <tcp_receive+0x5e4>)
 8011710:	881b      	ldrh	r3, [r3, #0]
 8011712:	4619      	mov	r1, r3
 8011714:	4b2a      	ldr	r3, [pc, #168]	@ (80117c0 <tcp_receive+0x5e8>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	440b      	add	r3, r1
 801171a:	1ad3      	subs	r3, r2, r3
 801171c:	3301      	adds	r3, #1
 801171e:	2b00      	cmp	r3, #0
 8011720:	f300 8082 	bgt.w	8011828 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011724:	4b27      	ldr	r3, [pc, #156]	@ (80117c4 <tcp_receive+0x5ec>)
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801172e:	4b24      	ldr	r3, [pc, #144]	@ (80117c0 <tcp_receive+0x5e8>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	1ad3      	subs	r3, r2, r3
 8011734:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011736:	4b23      	ldr	r3, [pc, #140]	@ (80117c4 <tcp_receive+0x5ec>)
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d106      	bne.n	801174c <tcp_receive+0x574>
 801173e:	4b22      	ldr	r3, [pc, #136]	@ (80117c8 <tcp_receive+0x5f0>)
 8011740:	f240 5294 	movw	r2, #1428	@ 0x594
 8011744:	4921      	ldr	r1, [pc, #132]	@ (80117cc <tcp_receive+0x5f4>)
 8011746:	4822      	ldr	r0, [pc, #136]	@ (80117d0 <tcp_receive+0x5f8>)
 8011748:	f005 fba8 	bl	8016e9c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801174e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011752:	4293      	cmp	r3, r2
 8011754:	d906      	bls.n	8011764 <tcp_receive+0x58c>
 8011756:	4b1c      	ldr	r3, [pc, #112]	@ (80117c8 <tcp_receive+0x5f0>)
 8011758:	f240 5295 	movw	r2, #1429	@ 0x595
 801175c:	491d      	ldr	r1, [pc, #116]	@ (80117d4 <tcp_receive+0x5fc>)
 801175e:	481c      	ldr	r0, [pc, #112]	@ (80117d0 <tcp_receive+0x5f8>)
 8011760:	f005 fb9c 	bl	8016e9c <iprintf>
      off = (u16_t)off32;
 8011764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011766:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801176a:	4b16      	ldr	r3, [pc, #88]	@ (80117c4 <tcp_receive+0x5ec>)
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	891b      	ldrh	r3, [r3, #8]
 8011770:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011774:	429a      	cmp	r2, r3
 8011776:	d906      	bls.n	8011786 <tcp_receive+0x5ae>
 8011778:	4b13      	ldr	r3, [pc, #76]	@ (80117c8 <tcp_receive+0x5f0>)
 801177a:	f240 5297 	movw	r2, #1431	@ 0x597
 801177e:	4916      	ldr	r1, [pc, #88]	@ (80117d8 <tcp_receive+0x600>)
 8011780:	4813      	ldr	r0, [pc, #76]	@ (80117d0 <tcp_receive+0x5f8>)
 8011782:	f005 fb8b 	bl	8016e9c <iprintf>
      inseg.len -= off;
 8011786:	4b0f      	ldr	r3, [pc, #60]	@ (80117c4 <tcp_receive+0x5ec>)
 8011788:	891a      	ldrh	r2, [r3, #8]
 801178a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801178e:	1ad3      	subs	r3, r2, r3
 8011790:	b29a      	uxth	r2, r3
 8011792:	4b0c      	ldr	r3, [pc, #48]	@ (80117c4 <tcp_receive+0x5ec>)
 8011794:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011796:	4b0b      	ldr	r3, [pc, #44]	@ (80117c4 <tcp_receive+0x5ec>)
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	891a      	ldrh	r2, [r3, #8]
 801179c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80117a0:	1ad3      	subs	r3, r2, r3
 80117a2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80117a4:	e02a      	b.n	80117fc <tcp_receive+0x624>
 80117a6:	bf00      	nop
 80117a8:	08019788 	.word	0x08019788
 80117ac:	08019790 	.word	0x08019790
 80117b0:	200273a4 	.word	0x200273a4
 80117b4:	200273a0 	.word	0x200273a0
 80117b8:	20027364 	.word	0x20027364
 80117bc:	200273a6 	.word	0x200273a6
 80117c0:	2002739c 	.word	0x2002739c
 80117c4:	2002737c 	.word	0x2002737c
 80117c8:	08019420 	.word	0x08019420
 80117cc:	08019798 	.word	0x08019798
 80117d0:	0801946c 	.word	0x0801946c
 80117d4:	080197a8 	.word	0x080197a8
 80117d8:	080197b8 	.word	0x080197b8
        off -= p->len;
 80117dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117de:	895b      	ldrh	r3, [r3, #10]
 80117e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80117e4:	1ad3      	subs	r3, r2, r3
 80117e6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80117ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117ec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80117ee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80117f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117f2:	2200      	movs	r2, #0
 80117f4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80117f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80117fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117fe:	895b      	ldrh	r3, [r3, #10]
 8011800:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011804:	429a      	cmp	r2, r3
 8011806:	d8e9      	bhi.n	80117dc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011808:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801180c:	4619      	mov	r1, r3
 801180e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011810:	f7fc fb6e 	bl	800def0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011818:	4a90      	ldr	r2, [pc, #576]	@ (8011a5c <tcp_receive+0x884>)
 801181a:	6013      	str	r3, [r2, #0]
 801181c:	4b90      	ldr	r3, [pc, #576]	@ (8011a60 <tcp_receive+0x888>)
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	4a8e      	ldr	r2, [pc, #568]	@ (8011a5c <tcp_receive+0x884>)
 8011822:	6812      	ldr	r2, [r2, #0]
 8011824:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011826:	e00d      	b.n	8011844 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011828:	4b8c      	ldr	r3, [pc, #560]	@ (8011a5c <tcp_receive+0x884>)
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011830:	1ad3      	subs	r3, r2, r3
 8011832:	2b00      	cmp	r3, #0
 8011834:	da06      	bge.n	8011844 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	8b5b      	ldrh	r3, [r3, #26]
 801183a:	f043 0302 	orr.w	r3, r3, #2
 801183e:	b29a      	uxth	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011844:	4b85      	ldr	r3, [pc, #532]	@ (8011a5c <tcp_receive+0x884>)
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801184c:	1ad3      	subs	r3, r2, r3
 801184e:	2b00      	cmp	r3, #0
 8011850:	f2c0 8427 	blt.w	80120a2 <tcp_receive+0xeca>
 8011854:	4b81      	ldr	r3, [pc, #516]	@ (8011a5c <tcp_receive+0x884>)
 8011856:	681a      	ldr	r2, [r3, #0]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801185c:	6879      	ldr	r1, [r7, #4]
 801185e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011860:	440b      	add	r3, r1
 8011862:	1ad3      	subs	r3, r2, r3
 8011864:	3301      	adds	r3, #1
 8011866:	2b00      	cmp	r3, #0
 8011868:	f300 841b 	bgt.w	80120a2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011870:	4b7a      	ldr	r3, [pc, #488]	@ (8011a5c <tcp_receive+0x884>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	429a      	cmp	r2, r3
 8011876:	f040 8298 	bne.w	8011daa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801187a:	4b79      	ldr	r3, [pc, #484]	@ (8011a60 <tcp_receive+0x888>)
 801187c:	891c      	ldrh	r4, [r3, #8]
 801187e:	4b78      	ldr	r3, [pc, #480]	@ (8011a60 <tcp_receive+0x888>)
 8011880:	68db      	ldr	r3, [r3, #12]
 8011882:	899b      	ldrh	r3, [r3, #12]
 8011884:	b29b      	uxth	r3, r3
 8011886:	4618      	mov	r0, r3
 8011888:	f7fa ffca 	bl	800c820 <lwip_htons>
 801188c:	4603      	mov	r3, r0
 801188e:	b2db      	uxtb	r3, r3
 8011890:	f003 0303 	and.w	r3, r3, #3
 8011894:	2b00      	cmp	r3, #0
 8011896:	d001      	beq.n	801189c <tcp_receive+0x6c4>
 8011898:	2301      	movs	r3, #1
 801189a:	e000      	b.n	801189e <tcp_receive+0x6c6>
 801189c:	2300      	movs	r3, #0
 801189e:	4423      	add	r3, r4
 80118a0:	b29a      	uxth	r2, r3
 80118a2:	4b70      	ldr	r3, [pc, #448]	@ (8011a64 <tcp_receive+0x88c>)
 80118a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80118aa:	4b6e      	ldr	r3, [pc, #440]	@ (8011a64 <tcp_receive+0x88c>)
 80118ac:	881b      	ldrh	r3, [r3, #0]
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d274      	bcs.n	801199c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80118b2:	4b6b      	ldr	r3, [pc, #428]	@ (8011a60 <tcp_receive+0x888>)
 80118b4:	68db      	ldr	r3, [r3, #12]
 80118b6:	899b      	ldrh	r3, [r3, #12]
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7fa ffb0 	bl	800c820 <lwip_htons>
 80118c0:	4603      	mov	r3, r0
 80118c2:	b2db      	uxtb	r3, r3
 80118c4:	f003 0301 	and.w	r3, r3, #1
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d01e      	beq.n	801190a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80118cc:	4b64      	ldr	r3, [pc, #400]	@ (8011a60 <tcp_receive+0x888>)
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	899b      	ldrh	r3, [r3, #12]
 80118d2:	b29b      	uxth	r3, r3
 80118d4:	b21b      	sxth	r3, r3
 80118d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80118da:	b21c      	sxth	r4, r3
 80118dc:	4b60      	ldr	r3, [pc, #384]	@ (8011a60 <tcp_receive+0x888>)
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	899b      	ldrh	r3, [r3, #12]
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fa ff9b 	bl	800c820 <lwip_htons>
 80118ea:	4603      	mov	r3, r0
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fa ff93 	bl	800c820 <lwip_htons>
 80118fa:	4603      	mov	r3, r0
 80118fc:	b21b      	sxth	r3, r3
 80118fe:	4323      	orrs	r3, r4
 8011900:	b21a      	sxth	r2, r3
 8011902:	4b57      	ldr	r3, [pc, #348]	@ (8011a60 <tcp_receive+0x888>)
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	b292      	uxth	r2, r2
 8011908:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801190e:	4b54      	ldr	r3, [pc, #336]	@ (8011a60 <tcp_receive+0x888>)
 8011910:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011912:	4b53      	ldr	r3, [pc, #332]	@ (8011a60 <tcp_receive+0x888>)
 8011914:	68db      	ldr	r3, [r3, #12]
 8011916:	899b      	ldrh	r3, [r3, #12]
 8011918:	b29b      	uxth	r3, r3
 801191a:	4618      	mov	r0, r3
 801191c:	f7fa ff80 	bl	800c820 <lwip_htons>
 8011920:	4603      	mov	r3, r0
 8011922:	b2db      	uxtb	r3, r3
 8011924:	f003 0302 	and.w	r3, r3, #2
 8011928:	2b00      	cmp	r3, #0
 801192a:	d005      	beq.n	8011938 <tcp_receive+0x760>
            inseg.len -= 1;
 801192c:	4b4c      	ldr	r3, [pc, #304]	@ (8011a60 <tcp_receive+0x888>)
 801192e:	891b      	ldrh	r3, [r3, #8]
 8011930:	3b01      	subs	r3, #1
 8011932:	b29a      	uxth	r2, r3
 8011934:	4b4a      	ldr	r3, [pc, #296]	@ (8011a60 <tcp_receive+0x888>)
 8011936:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011938:	4b49      	ldr	r3, [pc, #292]	@ (8011a60 <tcp_receive+0x888>)
 801193a:	685b      	ldr	r3, [r3, #4]
 801193c:	4a48      	ldr	r2, [pc, #288]	@ (8011a60 <tcp_receive+0x888>)
 801193e:	8912      	ldrh	r2, [r2, #8]
 8011940:	4611      	mov	r1, r2
 8011942:	4618      	mov	r0, r3
 8011944:	f7fc f9d4 	bl	800dcf0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011948:	4b45      	ldr	r3, [pc, #276]	@ (8011a60 <tcp_receive+0x888>)
 801194a:	891c      	ldrh	r4, [r3, #8]
 801194c:	4b44      	ldr	r3, [pc, #272]	@ (8011a60 <tcp_receive+0x888>)
 801194e:	68db      	ldr	r3, [r3, #12]
 8011950:	899b      	ldrh	r3, [r3, #12]
 8011952:	b29b      	uxth	r3, r3
 8011954:	4618      	mov	r0, r3
 8011956:	f7fa ff63 	bl	800c820 <lwip_htons>
 801195a:	4603      	mov	r3, r0
 801195c:	b2db      	uxtb	r3, r3
 801195e:	f003 0303 	and.w	r3, r3, #3
 8011962:	2b00      	cmp	r3, #0
 8011964:	d001      	beq.n	801196a <tcp_receive+0x792>
 8011966:	2301      	movs	r3, #1
 8011968:	e000      	b.n	801196c <tcp_receive+0x794>
 801196a:	2300      	movs	r3, #0
 801196c:	4423      	add	r3, r4
 801196e:	b29a      	uxth	r2, r3
 8011970:	4b3c      	ldr	r3, [pc, #240]	@ (8011a64 <tcp_receive+0x88c>)
 8011972:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011974:	4b3b      	ldr	r3, [pc, #236]	@ (8011a64 <tcp_receive+0x88c>)
 8011976:	881b      	ldrh	r3, [r3, #0]
 8011978:	461a      	mov	r2, r3
 801197a:	4b38      	ldr	r3, [pc, #224]	@ (8011a5c <tcp_receive+0x884>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	441a      	add	r2, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011984:	6879      	ldr	r1, [r7, #4]
 8011986:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011988:	440b      	add	r3, r1
 801198a:	429a      	cmp	r2, r3
 801198c:	d006      	beq.n	801199c <tcp_receive+0x7c4>
 801198e:	4b36      	ldr	r3, [pc, #216]	@ (8011a68 <tcp_receive+0x890>)
 8011990:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011994:	4935      	ldr	r1, [pc, #212]	@ (8011a6c <tcp_receive+0x894>)
 8011996:	4836      	ldr	r0, [pc, #216]	@ (8011a70 <tcp_receive+0x898>)
 8011998:	f005 fa80 	bl	8016e9c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	f000 80e6 	beq.w	8011b72 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80119a6:	4b2e      	ldr	r3, [pc, #184]	@ (8011a60 <tcp_receive+0x888>)
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	899b      	ldrh	r3, [r3, #12]
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fa ff36 	bl	800c820 <lwip_htons>
 80119b4:	4603      	mov	r3, r0
 80119b6:	b2db      	uxtb	r3, r3
 80119b8:	f003 0301 	and.w	r3, r3, #1
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d010      	beq.n	80119e2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80119c0:	e00a      	b.n	80119d8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119c6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80119d2:	68f8      	ldr	r0, [r7, #12]
 80119d4:	f7fd fd93 	bl	800f4fe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1f0      	bne.n	80119c2 <tcp_receive+0x7ea>
 80119e0:	e0c7      	b.n	8011b72 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80119e8:	e051      	b.n	8011a8e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80119ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	899b      	ldrh	r3, [r3, #12]
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7fa ff14 	bl	800c820 <lwip_htons>
 80119f8:	4603      	mov	r3, r0
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	f003 0301 	and.w	r3, r3, #1
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d03c      	beq.n	8011a7e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011a04:	4b16      	ldr	r3, [pc, #88]	@ (8011a60 <tcp_receive+0x888>)
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	899b      	ldrh	r3, [r3, #12]
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fa ff07 	bl	800c820 <lwip_htons>
 8011a12:	4603      	mov	r3, r0
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d12f      	bne.n	8011a7e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011a1e:	4b10      	ldr	r3, [pc, #64]	@ (8011a60 <tcp_receive+0x888>)
 8011a20:	68db      	ldr	r3, [r3, #12]
 8011a22:	899b      	ldrh	r3, [r3, #12]
 8011a24:	b29c      	uxth	r4, r3
 8011a26:	2001      	movs	r0, #1
 8011a28:	f7fa fefa 	bl	800c820 <lwip_htons>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	461a      	mov	r2, r3
 8011a30:	4b0b      	ldr	r3, [pc, #44]	@ (8011a60 <tcp_receive+0x888>)
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	4322      	orrs	r2, r4
 8011a36:	b292      	uxth	r2, r2
 8011a38:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011a3a:	4b09      	ldr	r3, [pc, #36]	@ (8011a60 <tcp_receive+0x888>)
 8011a3c:	891c      	ldrh	r4, [r3, #8]
 8011a3e:	4b08      	ldr	r3, [pc, #32]	@ (8011a60 <tcp_receive+0x888>)
 8011a40:	68db      	ldr	r3, [r3, #12]
 8011a42:	899b      	ldrh	r3, [r3, #12]
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7fa feea 	bl	800c820 <lwip_htons>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	f003 0303 	and.w	r3, r3, #3
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00d      	beq.n	8011a74 <tcp_receive+0x89c>
 8011a58:	2301      	movs	r3, #1
 8011a5a:	e00c      	b.n	8011a76 <tcp_receive+0x89e>
 8011a5c:	2002739c 	.word	0x2002739c
 8011a60:	2002737c 	.word	0x2002737c
 8011a64:	200273a6 	.word	0x200273a6
 8011a68:	08019420 	.word	0x08019420
 8011a6c:	080197c8 	.word	0x080197c8
 8011a70:	0801946c 	.word	0x0801946c
 8011a74:	2300      	movs	r3, #0
 8011a76:	4423      	add	r3, r4
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	4b98      	ldr	r3, [pc, #608]	@ (8011cdc <tcp_receive+0xb04>)
 8011a7c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a80:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011a88:	6938      	ldr	r0, [r7, #16]
 8011a8a:	f7fd fd38 	bl	800f4fe <tcp_seg_free>
            while (next &&
 8011a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d00e      	beq.n	8011ab2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011a94:	4b91      	ldr	r3, [pc, #580]	@ (8011cdc <tcp_receive+0xb04>)
 8011a96:	881b      	ldrh	r3, [r3, #0]
 8011a98:	461a      	mov	r2, r3
 8011a9a:	4b91      	ldr	r3, [pc, #580]	@ (8011ce0 <tcp_receive+0xb08>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	441a      	add	r2, r3
 8011aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011aa8:	8909      	ldrh	r1, [r1, #8]
 8011aaa:	440b      	add	r3, r1
 8011aac:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	da9b      	bge.n	80119ea <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d059      	beq.n	8011b6c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011ab8:	4b88      	ldr	r3, [pc, #544]	@ (8011cdc <tcp_receive+0xb04>)
 8011aba:	881b      	ldrh	r3, [r3, #0]
 8011abc:	461a      	mov	r2, r3
 8011abe:	4b88      	ldr	r3, [pc, #544]	@ (8011ce0 <tcp_receive+0xb08>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	441a      	add	r2, r3
 8011ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ac6:	68db      	ldr	r3, [r3, #12]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	dd4d      	ble.n	8011b6c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ad2:	68db      	ldr	r3, [r3, #12]
 8011ad4:	685b      	ldr	r3, [r3, #4]
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	4b81      	ldr	r3, [pc, #516]	@ (8011ce0 <tcp_receive+0xb08>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	1ad3      	subs	r3, r2, r3
 8011ae0:	b29a      	uxth	r2, r3
 8011ae2:	4b80      	ldr	r3, [pc, #512]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011ae4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011ae8:	68db      	ldr	r3, [r3, #12]
 8011aea:	899b      	ldrh	r3, [r3, #12]
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	4618      	mov	r0, r3
 8011af0:	f7fa fe96 	bl	800c820 <lwip_htons>
 8011af4:	4603      	mov	r3, r0
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	f003 0302 	and.w	r3, r3, #2
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d005      	beq.n	8011b0c <tcp_receive+0x934>
                inseg.len -= 1;
 8011b00:	4b78      	ldr	r3, [pc, #480]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011b02:	891b      	ldrh	r3, [r3, #8]
 8011b04:	3b01      	subs	r3, #1
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	4b76      	ldr	r3, [pc, #472]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011b0a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011b0c:	4b75      	ldr	r3, [pc, #468]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	4a74      	ldr	r2, [pc, #464]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011b12:	8912      	ldrh	r2, [r2, #8]
 8011b14:	4611      	mov	r1, r2
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7fc f8ea 	bl	800dcf0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011b1c:	4b71      	ldr	r3, [pc, #452]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011b1e:	891c      	ldrh	r4, [r3, #8]
 8011b20:	4b70      	ldr	r3, [pc, #448]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011b22:	68db      	ldr	r3, [r3, #12]
 8011b24:	899b      	ldrh	r3, [r3, #12]
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7fa fe79 	bl	800c820 <lwip_htons>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	b2db      	uxtb	r3, r3
 8011b32:	f003 0303 	and.w	r3, r3, #3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d001      	beq.n	8011b3e <tcp_receive+0x966>
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	e000      	b.n	8011b40 <tcp_receive+0x968>
 8011b3e:	2300      	movs	r3, #0
 8011b40:	4423      	add	r3, r4
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	4b65      	ldr	r3, [pc, #404]	@ (8011cdc <tcp_receive+0xb04>)
 8011b46:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011b48:	4b64      	ldr	r3, [pc, #400]	@ (8011cdc <tcp_receive+0xb04>)
 8011b4a:	881b      	ldrh	r3, [r3, #0]
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	4b64      	ldr	r3, [pc, #400]	@ (8011ce0 <tcp_receive+0xb08>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	441a      	add	r2, r3
 8011b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d006      	beq.n	8011b6c <tcp_receive+0x994>
 8011b5e:	4b62      	ldr	r3, [pc, #392]	@ (8011ce8 <tcp_receive+0xb10>)
 8011b60:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011b64:	4961      	ldr	r1, [pc, #388]	@ (8011cec <tcp_receive+0xb14>)
 8011b66:	4862      	ldr	r0, [pc, #392]	@ (8011cf0 <tcp_receive+0xb18>)
 8011b68:	f005 f998 	bl	8016e9c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011b70:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011b72:	4b5a      	ldr	r3, [pc, #360]	@ (8011cdc <tcp_receive+0xb04>)
 8011b74:	881b      	ldrh	r3, [r3, #0]
 8011b76:	461a      	mov	r2, r3
 8011b78:	4b59      	ldr	r3, [pc, #356]	@ (8011ce0 <tcp_receive+0xb08>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	441a      	add	r2, r3
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011b86:	4b55      	ldr	r3, [pc, #340]	@ (8011cdc <tcp_receive+0xb04>)
 8011b88:	881b      	ldrh	r3, [r3, #0]
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d206      	bcs.n	8011b9c <tcp_receive+0x9c4>
 8011b8e:	4b56      	ldr	r3, [pc, #344]	@ (8011ce8 <tcp_receive+0xb10>)
 8011b90:	f240 6207 	movw	r2, #1543	@ 0x607
 8011b94:	4957      	ldr	r1, [pc, #348]	@ (8011cf4 <tcp_receive+0xb1c>)
 8011b96:	4856      	ldr	r0, [pc, #344]	@ (8011cf0 <tcp_receive+0xb18>)
 8011b98:	f005 f980 	bl	8016e9c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011ba0:	4b4e      	ldr	r3, [pc, #312]	@ (8011cdc <tcp_receive+0xb04>)
 8011ba2:	881b      	ldrh	r3, [r3, #0]
 8011ba4:	1ad3      	subs	r3, r2, r3
 8011ba6:	b29a      	uxth	r2, r3
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f7fc ffc5 	bl	800eb3c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011bb4:	685b      	ldr	r3, [r3, #4]
 8011bb6:	891b      	ldrh	r3, [r3, #8]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d006      	beq.n	8011bca <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011bbc:	4b49      	ldr	r3, [pc, #292]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	4a4d      	ldr	r2, [pc, #308]	@ (8011cf8 <tcp_receive+0xb20>)
 8011bc2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011bc4:	4b47      	ldr	r3, [pc, #284]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011bca:	4b46      	ldr	r3, [pc, #280]	@ (8011ce4 <tcp_receive+0xb0c>)
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	899b      	ldrh	r3, [r3, #12]
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7fa fe24 	bl	800c820 <lwip_htons>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	b2db      	uxtb	r3, r3
 8011bdc:	f003 0301 	and.w	r3, r3, #1
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	f000 80b8 	beq.w	8011d56 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011be6:	4b45      	ldr	r3, [pc, #276]	@ (8011cfc <tcp_receive+0xb24>)
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	f043 0320 	orr.w	r3, r3, #32
 8011bee:	b2da      	uxtb	r2, r3
 8011bf0:	4b42      	ldr	r3, [pc, #264]	@ (8011cfc <tcp_receive+0xb24>)
 8011bf2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011bf4:	e0af      	b.n	8011d56 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bfa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c00:	68db      	ldr	r3, [r3, #12]
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	4a36      	ldr	r2, [pc, #216]	@ (8011ce0 <tcp_receive+0xb08>)
 8011c06:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	891b      	ldrh	r3, [r3, #8]
 8011c0c:	461c      	mov	r4, r3
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	68db      	ldr	r3, [r3, #12]
 8011c12:	899b      	ldrh	r3, [r3, #12]
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7fa fe02 	bl	800c820 <lwip_htons>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	b2db      	uxtb	r3, r3
 8011c20:	f003 0303 	and.w	r3, r3, #3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d001      	beq.n	8011c2c <tcp_receive+0xa54>
 8011c28:	2301      	movs	r3, #1
 8011c2a:	e000      	b.n	8011c2e <tcp_receive+0xa56>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	191a      	adds	r2, r3, r4
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c34:	441a      	add	r2, r3
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011c3e:	461c      	mov	r4, r3
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	891b      	ldrh	r3, [r3, #8]
 8011c44:	461d      	mov	r5, r3
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	899b      	ldrh	r3, [r3, #12]
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7fa fde6 	bl	800c820 <lwip_htons>
 8011c54:	4603      	mov	r3, r0
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	f003 0303 	and.w	r3, r3, #3
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d001      	beq.n	8011c64 <tcp_receive+0xa8c>
 8011c60:	2301      	movs	r3, #1
 8011c62:	e000      	b.n	8011c66 <tcp_receive+0xa8e>
 8011c64:	2300      	movs	r3, #0
 8011c66:	442b      	add	r3, r5
 8011c68:	429c      	cmp	r4, r3
 8011c6a:	d206      	bcs.n	8011c7a <tcp_receive+0xaa2>
 8011c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8011ce8 <tcp_receive+0xb10>)
 8011c6e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8011c72:	4923      	ldr	r1, [pc, #140]	@ (8011d00 <tcp_receive+0xb28>)
 8011c74:	481e      	ldr	r0, [pc, #120]	@ (8011cf0 <tcp_receive+0xb18>)
 8011c76:	f005 f911 	bl	8016e9c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	891b      	ldrh	r3, [r3, #8]
 8011c7e:	461c      	mov	r4, r3
 8011c80:	68bb      	ldr	r3, [r7, #8]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	899b      	ldrh	r3, [r3, #12]
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7fa fdc9 	bl	800c820 <lwip_htons>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	f003 0303 	and.w	r3, r3, #3
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d001      	beq.n	8011c9e <tcp_receive+0xac6>
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e000      	b.n	8011ca0 <tcp_receive+0xac8>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	1919      	adds	r1, r3, r4
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011ca6:	b28b      	uxth	r3, r1
 8011ca8:	1ad3      	subs	r3, r2, r3
 8011caa:	b29a      	uxth	r2, r3
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f7fc ff43 	bl	800eb3c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	891b      	ldrh	r3, [r3, #8]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d028      	beq.n	8011d12 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8011cf8 <tcp_receive+0xb20>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d01d      	beq.n	8011d04 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8011cf8 <tcp_receive+0xb20>)
 8011cca:	681a      	ldr	r2, [r3, #0]
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	4610      	mov	r0, r2
 8011cd4:	f7fc fa60 	bl	800e198 <pbuf_cat>
 8011cd8:	e018      	b.n	8011d0c <tcp_receive+0xb34>
 8011cda:	bf00      	nop
 8011cdc:	200273a6 	.word	0x200273a6
 8011ce0:	2002739c 	.word	0x2002739c
 8011ce4:	2002737c 	.word	0x2002737c
 8011ce8:	08019420 	.word	0x08019420
 8011cec:	08019800 	.word	0x08019800
 8011cf0:	0801946c 	.word	0x0801946c
 8011cf4:	0801983c 	.word	0x0801983c
 8011cf8:	200273ac 	.word	0x200273ac
 8011cfc:	200273a9 	.word	0x200273a9
 8011d00:	0801985c 	.word	0x0801985c
            } else {
              recv_data = cseg->p;
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	4a70      	ldr	r2, [pc, #448]	@ (8011ecc <tcp_receive+0xcf4>)
 8011d0a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	68db      	ldr	r3, [r3, #12]
 8011d16:	899b      	ldrh	r3, [r3, #12]
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7fa fd80 	bl	800c820 <lwip_htons>
 8011d20:	4603      	mov	r3, r0
 8011d22:	b2db      	uxtb	r3, r3
 8011d24:	f003 0301 	and.w	r3, r3, #1
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d00d      	beq.n	8011d48 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011d2c:	4b68      	ldr	r3, [pc, #416]	@ (8011ed0 <tcp_receive+0xcf8>)
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	f043 0320 	orr.w	r3, r3, #32
 8011d34:	b2da      	uxtb	r2, r3
 8011d36:	4b66      	ldr	r3, [pc, #408]	@ (8011ed0 <tcp_receive+0xcf8>)
 8011d38:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	7d1b      	ldrb	r3, [r3, #20]
 8011d3e:	2b04      	cmp	r3, #4
 8011d40:	d102      	bne.n	8011d48 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2207      	movs	r2, #7
 8011d46:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011d50:	68b8      	ldr	r0, [r7, #8]
 8011d52:	f7fd fbd4 	bl	800f4fe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d008      	beq.n	8011d70 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d62:	68db      	ldr	r3, [r3, #12]
 8011d64:	685a      	ldr	r2, [r3, #4]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	f43f af43 	beq.w	8011bf6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	8b5b      	ldrh	r3, [r3, #26]
 8011d74:	f003 0301 	and.w	r3, r3, #1
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00e      	beq.n	8011d9a <tcp_receive+0xbc2>
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	8b5b      	ldrh	r3, [r3, #26]
 8011d80:	f023 0301 	bic.w	r3, r3, #1
 8011d84:	b29a      	uxth	r2, r3
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	835a      	strh	r2, [r3, #26]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	8b5b      	ldrh	r3, [r3, #26]
 8011d8e:	f043 0302 	orr.w	r3, r3, #2
 8011d92:	b29a      	uxth	r2, r3
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011d98:	e187      	b.n	80120aa <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	8b5b      	ldrh	r3, [r3, #26]
 8011d9e:	f043 0301 	orr.w	r3, r3, #1
 8011da2:	b29a      	uxth	r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011da8:	e17f      	b.n	80120aa <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d106      	bne.n	8011dc0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011db2:	4848      	ldr	r0, [pc, #288]	@ (8011ed4 <tcp_receive+0xcfc>)
 8011db4:	f7fd fbbc 	bl	800f530 <tcp_seg_copy>
 8011db8:	4602      	mov	r2, r0
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	675a      	str	r2, [r3, #116]	@ 0x74
 8011dbe:	e16c      	b.n	801209a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011dca:	e156      	b.n	801207a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	685a      	ldr	r2, [r3, #4]
 8011dd2:	4b41      	ldr	r3, [pc, #260]	@ (8011ed8 <tcp_receive+0xd00>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d11d      	bne.n	8011e16 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011dda:	4b3e      	ldr	r3, [pc, #248]	@ (8011ed4 <tcp_receive+0xcfc>)
 8011ddc:	891a      	ldrh	r2, [r3, #8]
 8011dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011de0:	891b      	ldrh	r3, [r3, #8]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	f240 814e 	bls.w	8012084 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011de8:	483a      	ldr	r0, [pc, #232]	@ (8011ed4 <tcp_receive+0xcfc>)
 8011dea:	f7fd fba1 	bl	800f530 <tcp_seg_copy>
 8011dee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	f000 8148 	beq.w	8012088 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d003      	beq.n	8011e06 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e00:	697a      	ldr	r2, [r7, #20]
 8011e02:	601a      	str	r2, [r3, #0]
 8011e04:	e002      	b.n	8011e0c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	697a      	ldr	r2, [r7, #20]
 8011e0a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011e0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011e0e:	6978      	ldr	r0, [r7, #20]
 8011e10:	f7ff f8de 	bl	8010fd0 <tcp_oos_insert_segment>
                }
                break;
 8011e14:	e138      	b.n	8012088 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d117      	bne.n	8011e4c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8011ed8 <tcp_receive+0xd00>)
 8011e1e:	681a      	ldr	r2, [r3, #0]
 8011e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e22:	68db      	ldr	r3, [r3, #12]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	1ad3      	subs	r3, r2, r3
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	da57      	bge.n	8011edc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011e2c:	4829      	ldr	r0, [pc, #164]	@ (8011ed4 <tcp_receive+0xcfc>)
 8011e2e:	f7fd fb7f 	bl	800f530 <tcp_seg_copy>
 8011e32:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	f000 8128 	beq.w	801208c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	69ba      	ldr	r2, [r7, #24]
 8011e40:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011e42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011e44:	69b8      	ldr	r0, [r7, #24]
 8011e46:	f7ff f8c3 	bl	8010fd0 <tcp_oos_insert_segment>
                  }
                  break;
 8011e4a:	e11f      	b.n	801208c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011e4c:	4b22      	ldr	r3, [pc, #136]	@ (8011ed8 <tcp_receive+0xd00>)
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	1ad3      	subs	r3, r2, r3
 8011e58:	3b01      	subs	r3, #1
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	db3e      	blt.n	8011edc <tcp_receive+0xd04>
 8011e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8011ed8 <tcp_receive+0xd00>)
 8011e60:	681a      	ldr	r2, [r3, #0]
 8011e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	1ad3      	subs	r3, r2, r3
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	dc35      	bgt.n	8011edc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011e70:	4818      	ldr	r0, [pc, #96]	@ (8011ed4 <tcp_receive+0xcfc>)
 8011e72:	f7fd fb5d 	bl	800f530 <tcp_seg_copy>
 8011e76:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011e78:	69fb      	ldr	r3, [r7, #28]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	f000 8108 	beq.w	8012090 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e88:	8912      	ldrh	r2, [r2, #8]
 8011e8a:	441a      	add	r2, r3
 8011e8c:	4b12      	ldr	r3, [pc, #72]	@ (8011ed8 <tcp_receive+0xd00>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	1ad3      	subs	r3, r2, r3
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	dd12      	ble.n	8011ebc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011e96:	4b10      	ldr	r3, [pc, #64]	@ (8011ed8 <tcp_receive+0xd00>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	b29b      	uxth	r3, r3
 8011ea4:	1ad3      	subs	r3, r2, r3
 8011ea6:	b29a      	uxth	r2, r3
 8011ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011eaa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011eae:	685a      	ldr	r2, [r3, #4]
 8011eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011eb2:	891b      	ldrh	r3, [r3, #8]
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	4610      	mov	r0, r2
 8011eb8:	f7fb ff1a 	bl	800dcf0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ebe:	69fa      	ldr	r2, [r7, #28]
 8011ec0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011ec2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011ec4:	69f8      	ldr	r0, [r7, #28]
 8011ec6:	f7ff f883 	bl	8010fd0 <tcp_oos_insert_segment>
                  }
                  break;
 8011eca:	e0e1      	b.n	8012090 <tcp_receive+0xeb8>
 8011ecc:	200273ac 	.word	0x200273ac
 8011ed0:	200273a9 	.word	0x200273a9
 8011ed4:	2002737c 	.word	0x2002737c
 8011ed8:	2002739c 	.word	0x2002739c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ede:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	f040 80c5 	bne.w	8012074 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011eea:	4b7f      	ldr	r3, [pc, #508]	@ (80120e8 <tcp_receive+0xf10>)
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ef0:	68db      	ldr	r3, [r3, #12]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f340 80bc 	ble.w	8012074 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011efe:	68db      	ldr	r3, [r3, #12]
 8011f00:	899b      	ldrh	r3, [r3, #12]
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7fa fc8b 	bl	800c820 <lwip_htons>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	b2db      	uxtb	r3, r3
 8011f0e:	f003 0301 	and.w	r3, r3, #1
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	f040 80be 	bne.w	8012094 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011f18:	4874      	ldr	r0, [pc, #464]	@ (80120ec <tcp_receive+0xf14>)
 8011f1a:	f7fd fb09 	bl	800f530 <tcp_seg_copy>
 8011f1e:	4602      	mov	r2, r0
 8011f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f22:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	f000 80b5 	beq.w	8012098 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f30:	68db      	ldr	r3, [r3, #12]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011f36:	8912      	ldrh	r2, [r2, #8]
 8011f38:	441a      	add	r2, r3
 8011f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80120e8 <tcp_receive+0xf10>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	1ad3      	subs	r3, r2, r3
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	dd12      	ble.n	8011f6a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011f44:	4b68      	ldr	r3, [pc, #416]	@ (80120e8 <tcp_receive+0xf10>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f4c:	68db      	ldr	r3, [r3, #12]
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	1ad3      	subs	r3, r2, r3
 8011f54:	b29a      	uxth	r2, r3
 8011f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f58:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f5c:	685a      	ldr	r2, [r3, #4]
 8011f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f60:	891b      	ldrh	r3, [r3, #8]
 8011f62:	4619      	mov	r1, r3
 8011f64:	4610      	mov	r0, r2
 8011f66:	f7fb fec3 	bl	800dcf0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011f6a:	4b61      	ldr	r3, [pc, #388]	@ (80120f0 <tcp_receive+0xf18>)
 8011f6c:	881b      	ldrh	r3, [r3, #0]
 8011f6e:	461a      	mov	r2, r3
 8011f70:	4b5d      	ldr	r3, [pc, #372]	@ (80120e8 <tcp_receive+0xf10>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	441a      	add	r2, r3
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f7a:	6879      	ldr	r1, [r7, #4]
 8011f7c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011f7e:	440b      	add	r3, r1
 8011f80:	1ad3      	subs	r3, r2, r3
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	f340 8088 	ble.w	8012098 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	68db      	ldr	r3, [r3, #12]
 8011f8e:	899b      	ldrh	r3, [r3, #12]
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7fa fc44 	bl	800c820 <lwip_htons>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	f003 0301 	and.w	r3, r3, #1
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d021      	beq.n	8011fe8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	68db      	ldr	r3, [r3, #12]
 8011faa:	899b      	ldrh	r3, [r3, #12]
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	b21b      	sxth	r3, r3
 8011fb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011fb4:	b21c      	sxth	r4, r3
 8011fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	899b      	ldrh	r3, [r3, #12]
 8011fbe:	b29b      	uxth	r3, r3
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7fa fc2d 	bl	800c820 <lwip_htons>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7fa fc25 	bl	800c820 <lwip_htons>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	b21b      	sxth	r3, r3
 8011fda:	4323      	orrs	r3, r4
 8011fdc:	b21a      	sxth	r2, r3
 8011fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	68db      	ldr	r3, [r3, #12]
 8011fe4:	b292      	uxth	r2, r2
 8011fe6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fec:	b29a      	uxth	r2, r3
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ff2:	4413      	add	r3, r2
 8011ff4:	b299      	uxth	r1, r3
 8011ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80120e8 <tcp_receive+0xf10>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	b29a      	uxth	r2, r3
 8011ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	1a8a      	subs	r2, r1, r2
 8012002:	b292      	uxth	r2, r2
 8012004:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	685a      	ldr	r2, [r3, #4]
 801200c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	891b      	ldrh	r3, [r3, #8]
 8012012:	4619      	mov	r1, r3
 8012014:	4610      	mov	r0, r2
 8012016:	f7fb fe6b 	bl	800dcf0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801201a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	891c      	ldrh	r4, [r3, #8]
 8012020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	899b      	ldrh	r3, [r3, #12]
 8012028:	b29b      	uxth	r3, r3
 801202a:	4618      	mov	r0, r3
 801202c:	f7fa fbf8 	bl	800c820 <lwip_htons>
 8012030:	4603      	mov	r3, r0
 8012032:	b2db      	uxtb	r3, r3
 8012034:	f003 0303 	and.w	r3, r3, #3
 8012038:	2b00      	cmp	r3, #0
 801203a:	d001      	beq.n	8012040 <tcp_receive+0xe68>
 801203c:	2301      	movs	r3, #1
 801203e:	e000      	b.n	8012042 <tcp_receive+0xe6a>
 8012040:	2300      	movs	r3, #0
 8012042:	4423      	add	r3, r4
 8012044:	b29a      	uxth	r2, r3
 8012046:	4b2a      	ldr	r3, [pc, #168]	@ (80120f0 <tcp_receive+0xf18>)
 8012048:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801204a:	4b29      	ldr	r3, [pc, #164]	@ (80120f0 <tcp_receive+0xf18>)
 801204c:	881b      	ldrh	r3, [r3, #0]
 801204e:	461a      	mov	r2, r3
 8012050:	4b25      	ldr	r3, [pc, #148]	@ (80120e8 <tcp_receive+0xf10>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	441a      	add	r2, r3
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801205a:	6879      	ldr	r1, [r7, #4]
 801205c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801205e:	440b      	add	r3, r1
 8012060:	429a      	cmp	r2, r3
 8012062:	d019      	beq.n	8012098 <tcp_receive+0xec0>
 8012064:	4b23      	ldr	r3, [pc, #140]	@ (80120f4 <tcp_receive+0xf1c>)
 8012066:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801206a:	4923      	ldr	r1, [pc, #140]	@ (80120f8 <tcp_receive+0xf20>)
 801206c:	4823      	ldr	r0, [pc, #140]	@ (80120fc <tcp_receive+0xf24>)
 801206e:	f004 ff15 	bl	8016e9c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012072:	e011      	b.n	8012098 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	63bb      	str	r3, [r7, #56]	@ 0x38
 801207a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801207c:	2b00      	cmp	r3, #0
 801207e:	f47f aea5 	bne.w	8011dcc <tcp_receive+0xbf4>
 8012082:	e00a      	b.n	801209a <tcp_receive+0xec2>
                break;
 8012084:	bf00      	nop
 8012086:	e008      	b.n	801209a <tcp_receive+0xec2>
                break;
 8012088:	bf00      	nop
 801208a:	e006      	b.n	801209a <tcp_receive+0xec2>
                  break;
 801208c:	bf00      	nop
 801208e:	e004      	b.n	801209a <tcp_receive+0xec2>
                  break;
 8012090:	bf00      	nop
 8012092:	e002      	b.n	801209a <tcp_receive+0xec2>
                  break;
 8012094:	bf00      	nop
 8012096:	e000      	b.n	801209a <tcp_receive+0xec2>
                break;
 8012098:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f001 fa30 	bl	8013500 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80120a0:	e003      	b.n	80120aa <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f001 fa2c 	bl	8013500 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80120a8:	e01a      	b.n	80120e0 <tcp_receive+0xf08>
 80120aa:	e019      	b.n	80120e0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80120ac:	4b0e      	ldr	r3, [pc, #56]	@ (80120e8 <tcp_receive+0xf10>)
 80120ae:	681a      	ldr	r2, [r3, #0]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120b4:	1ad3      	subs	r3, r2, r3
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	db0a      	blt.n	80120d0 <tcp_receive+0xef8>
 80120ba:	4b0b      	ldr	r3, [pc, #44]	@ (80120e8 <tcp_receive+0xf10>)
 80120bc:	681a      	ldr	r2, [r3, #0]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120c2:	6879      	ldr	r1, [r7, #4]
 80120c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80120c6:	440b      	add	r3, r1
 80120c8:	1ad3      	subs	r3, r2, r3
 80120ca:	3301      	adds	r3, #1
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	dd07      	ble.n	80120e0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	8b5b      	ldrh	r3, [r3, #26]
 80120d4:	f043 0302 	orr.w	r3, r3, #2
 80120d8:	b29a      	uxth	r2, r3
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80120de:	e7ff      	b.n	80120e0 <tcp_receive+0xf08>
 80120e0:	bf00      	nop
 80120e2:	3750      	adds	r7, #80	@ 0x50
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bdb0      	pop	{r4, r5, r7, pc}
 80120e8:	2002739c 	.word	0x2002739c
 80120ec:	2002737c 	.word	0x2002737c
 80120f0:	200273a6 	.word	0x200273a6
 80120f4:	08019420 	.word	0x08019420
 80120f8:	080197c8 	.word	0x080197c8
 80120fc:	0801946c 	.word	0x0801946c

08012100 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012100:	b480      	push	{r7}
 8012102:	b083      	sub	sp, #12
 8012104:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012106:	4b15      	ldr	r3, [pc, #84]	@ (801215c <tcp_get_next_optbyte+0x5c>)
 8012108:	881b      	ldrh	r3, [r3, #0]
 801210a:	1c5a      	adds	r2, r3, #1
 801210c:	b291      	uxth	r1, r2
 801210e:	4a13      	ldr	r2, [pc, #76]	@ (801215c <tcp_get_next_optbyte+0x5c>)
 8012110:	8011      	strh	r1, [r2, #0]
 8012112:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012114:	4b12      	ldr	r3, [pc, #72]	@ (8012160 <tcp_get_next_optbyte+0x60>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d004      	beq.n	8012126 <tcp_get_next_optbyte+0x26>
 801211c:	4b11      	ldr	r3, [pc, #68]	@ (8012164 <tcp_get_next_optbyte+0x64>)
 801211e:	881b      	ldrh	r3, [r3, #0]
 8012120:	88fa      	ldrh	r2, [r7, #6]
 8012122:	429a      	cmp	r2, r3
 8012124:	d208      	bcs.n	8012138 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012126:	4b10      	ldr	r3, [pc, #64]	@ (8012168 <tcp_get_next_optbyte+0x68>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	3314      	adds	r3, #20
 801212c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801212e:	88fb      	ldrh	r3, [r7, #6]
 8012130:	683a      	ldr	r2, [r7, #0]
 8012132:	4413      	add	r3, r2
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	e00b      	b.n	8012150 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012138:	88fb      	ldrh	r3, [r7, #6]
 801213a:	b2da      	uxtb	r2, r3
 801213c:	4b09      	ldr	r3, [pc, #36]	@ (8012164 <tcp_get_next_optbyte+0x64>)
 801213e:	881b      	ldrh	r3, [r3, #0]
 8012140:	b2db      	uxtb	r3, r3
 8012142:	1ad3      	subs	r3, r2, r3
 8012144:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012146:	4b06      	ldr	r3, [pc, #24]	@ (8012160 <tcp_get_next_optbyte+0x60>)
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	797b      	ldrb	r3, [r7, #5]
 801214c:	4413      	add	r3, r2
 801214e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012150:	4618      	mov	r0, r3
 8012152:	370c      	adds	r7, #12
 8012154:	46bd      	mov	sp, r7
 8012156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215a:	4770      	bx	lr
 801215c:	20027398 	.word	0x20027398
 8012160:	20027394 	.word	0x20027394
 8012164:	20027392 	.word	0x20027392
 8012168:	2002738c 	.word	0x2002738c

0801216c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d106      	bne.n	8012188 <tcp_parseopt+0x1c>
 801217a:	4b32      	ldr	r3, [pc, #200]	@ (8012244 <tcp_parseopt+0xd8>)
 801217c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012180:	4931      	ldr	r1, [pc, #196]	@ (8012248 <tcp_parseopt+0xdc>)
 8012182:	4832      	ldr	r0, [pc, #200]	@ (801224c <tcp_parseopt+0xe0>)
 8012184:	f004 fe8a 	bl	8016e9c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012188:	4b31      	ldr	r3, [pc, #196]	@ (8012250 <tcp_parseopt+0xe4>)
 801218a:	881b      	ldrh	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d056      	beq.n	801223e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012190:	4b30      	ldr	r3, [pc, #192]	@ (8012254 <tcp_parseopt+0xe8>)
 8012192:	2200      	movs	r2, #0
 8012194:	801a      	strh	r2, [r3, #0]
 8012196:	e046      	b.n	8012226 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8012198:	f7ff ffb2 	bl	8012100 <tcp_get_next_optbyte>
 801219c:	4603      	mov	r3, r0
 801219e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80121a0:	7bfb      	ldrb	r3, [r7, #15]
 80121a2:	2b02      	cmp	r3, #2
 80121a4:	d006      	beq.n	80121b4 <tcp_parseopt+0x48>
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	dc2a      	bgt.n	8012200 <tcp_parseopt+0x94>
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d042      	beq.n	8012234 <tcp_parseopt+0xc8>
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d038      	beq.n	8012224 <tcp_parseopt+0xb8>
 80121b2:	e025      	b.n	8012200 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80121b4:	f7ff ffa4 	bl	8012100 <tcp_get_next_optbyte>
 80121b8:	4603      	mov	r3, r0
 80121ba:	2b04      	cmp	r3, #4
 80121bc:	d13c      	bne.n	8012238 <tcp_parseopt+0xcc>
 80121be:	4b25      	ldr	r3, [pc, #148]	@ (8012254 <tcp_parseopt+0xe8>)
 80121c0:	881b      	ldrh	r3, [r3, #0]
 80121c2:	3301      	adds	r3, #1
 80121c4:	4a22      	ldr	r2, [pc, #136]	@ (8012250 <tcp_parseopt+0xe4>)
 80121c6:	8812      	ldrh	r2, [r2, #0]
 80121c8:	4293      	cmp	r3, r2
 80121ca:	da35      	bge.n	8012238 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80121cc:	f7ff ff98 	bl	8012100 <tcp_get_next_optbyte>
 80121d0:	4603      	mov	r3, r0
 80121d2:	021b      	lsls	r3, r3, #8
 80121d4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80121d6:	f7ff ff93 	bl	8012100 <tcp_get_next_optbyte>
 80121da:	4603      	mov	r3, r0
 80121dc:	461a      	mov	r2, r3
 80121de:	89bb      	ldrh	r3, [r7, #12]
 80121e0:	4313      	orrs	r3, r2
 80121e2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80121e4:	89bb      	ldrh	r3, [r7, #12]
 80121e6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80121ea:	d804      	bhi.n	80121f6 <tcp_parseopt+0x8a>
 80121ec:	89bb      	ldrh	r3, [r7, #12]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d001      	beq.n	80121f6 <tcp_parseopt+0x8a>
 80121f2:	89ba      	ldrh	r2, [r7, #12]
 80121f4:	e001      	b.n	80121fa <tcp_parseopt+0x8e>
 80121f6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80121fe:	e012      	b.n	8012226 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012200:	f7ff ff7e 	bl	8012100 <tcp_get_next_optbyte>
 8012204:	4603      	mov	r3, r0
 8012206:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012208:	7afb      	ldrb	r3, [r7, #11]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d916      	bls.n	801223c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801220e:	7afb      	ldrb	r3, [r7, #11]
 8012210:	b29a      	uxth	r2, r3
 8012212:	4b10      	ldr	r3, [pc, #64]	@ (8012254 <tcp_parseopt+0xe8>)
 8012214:	881b      	ldrh	r3, [r3, #0]
 8012216:	4413      	add	r3, r2
 8012218:	b29b      	uxth	r3, r3
 801221a:	3b02      	subs	r3, #2
 801221c:	b29a      	uxth	r2, r3
 801221e:	4b0d      	ldr	r3, [pc, #52]	@ (8012254 <tcp_parseopt+0xe8>)
 8012220:	801a      	strh	r2, [r3, #0]
 8012222:	e000      	b.n	8012226 <tcp_parseopt+0xba>
          break;
 8012224:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012226:	4b0b      	ldr	r3, [pc, #44]	@ (8012254 <tcp_parseopt+0xe8>)
 8012228:	881a      	ldrh	r2, [r3, #0]
 801222a:	4b09      	ldr	r3, [pc, #36]	@ (8012250 <tcp_parseopt+0xe4>)
 801222c:	881b      	ldrh	r3, [r3, #0]
 801222e:	429a      	cmp	r2, r3
 8012230:	d3b2      	bcc.n	8012198 <tcp_parseopt+0x2c>
 8012232:	e004      	b.n	801223e <tcp_parseopt+0xd2>
          return;
 8012234:	bf00      	nop
 8012236:	e002      	b.n	801223e <tcp_parseopt+0xd2>
            return;
 8012238:	bf00      	nop
 801223a:	e000      	b.n	801223e <tcp_parseopt+0xd2>
            return;
 801223c:	bf00      	nop
      }
    }
  }
}
 801223e:	3710      	adds	r7, #16
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	08019420 	.word	0x08019420
 8012248:	08019884 	.word	0x08019884
 801224c:	0801946c 	.word	0x0801946c
 8012250:	20027390 	.word	0x20027390
 8012254:	20027398 	.word	0x20027398

08012258 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012258:	b480      	push	{r7}
 801225a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801225c:	4b05      	ldr	r3, [pc, #20]	@ (8012274 <tcp_trigger_input_pcb_close+0x1c>)
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	f043 0310 	orr.w	r3, r3, #16
 8012264:	b2da      	uxtb	r2, r3
 8012266:	4b03      	ldr	r3, [pc, #12]	@ (8012274 <tcp_trigger_input_pcb_close+0x1c>)
 8012268:	701a      	strb	r2, [r3, #0]
}
 801226a:	bf00      	nop
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr
 8012274:	200273a9 	.word	0x200273a9

08012278 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d00a      	beq.n	80122a0 <tcp_route+0x28>
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	7a1b      	ldrb	r3, [r3, #8]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d006      	beq.n	80122a0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	7a1b      	ldrb	r3, [r3, #8]
 8012296:	4618      	mov	r0, r3
 8012298:	f7fb fb22 	bl	800d8e0 <netif_get_by_index>
 801229c:	4603      	mov	r3, r0
 801229e:	e003      	b.n	80122a8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f002 ffa3 	bl	80151ec <ip4_route>
 80122a6:	4603      	mov	r3, r0
  }
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3710      	adds	r7, #16
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80122b0:	b590      	push	{r4, r7, lr}
 80122b2:	b087      	sub	sp, #28
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	60f8      	str	r0, [r7, #12]
 80122b8:	60b9      	str	r1, [r7, #8]
 80122ba:	603b      	str	r3, [r7, #0]
 80122bc:	4613      	mov	r3, r2
 80122be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d105      	bne.n	80122d2 <tcp_create_segment+0x22>
 80122c6:	4b43      	ldr	r3, [pc, #268]	@ (80123d4 <tcp_create_segment+0x124>)
 80122c8:	22a3      	movs	r2, #163	@ 0xa3
 80122ca:	4943      	ldr	r1, [pc, #268]	@ (80123d8 <tcp_create_segment+0x128>)
 80122cc:	4843      	ldr	r0, [pc, #268]	@ (80123dc <tcp_create_segment+0x12c>)
 80122ce:	f004 fde5 	bl	8016e9c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d105      	bne.n	80122e4 <tcp_create_segment+0x34>
 80122d8:	4b3e      	ldr	r3, [pc, #248]	@ (80123d4 <tcp_create_segment+0x124>)
 80122da:	22a4      	movs	r2, #164	@ 0xa4
 80122dc:	4940      	ldr	r1, [pc, #256]	@ (80123e0 <tcp_create_segment+0x130>)
 80122de:	483f      	ldr	r0, [pc, #252]	@ (80123dc <tcp_create_segment+0x12c>)
 80122e0:	f004 fddc 	bl	8016e9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80122e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	f003 0304 	and.w	r3, r3, #4
 80122f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80122f2:	2003      	movs	r0, #3
 80122f4:	f7fa ff68 	bl	800d1c8 <memp_malloc>
 80122f8:	6138      	str	r0, [r7, #16]
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d104      	bne.n	801230a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012300:	68b8      	ldr	r0, [r7, #8]
 8012302:	f7fb fe7b 	bl	800dffc <pbuf_free>
    return NULL;
 8012306:	2300      	movs	r3, #0
 8012308:	e060      	b.n	80123cc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012310:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	2200      	movs	r2, #0
 8012316:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	68ba      	ldr	r2, [r7, #8]
 801231c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	891a      	ldrh	r2, [r3, #8]
 8012322:	7dfb      	ldrb	r3, [r7, #23]
 8012324:	b29b      	uxth	r3, r3
 8012326:	429a      	cmp	r2, r3
 8012328:	d205      	bcs.n	8012336 <tcp_create_segment+0x86>
 801232a:	4b2a      	ldr	r3, [pc, #168]	@ (80123d4 <tcp_create_segment+0x124>)
 801232c:	22b0      	movs	r2, #176	@ 0xb0
 801232e:	492d      	ldr	r1, [pc, #180]	@ (80123e4 <tcp_create_segment+0x134>)
 8012330:	482a      	ldr	r0, [pc, #168]	@ (80123dc <tcp_create_segment+0x12c>)
 8012332:	f004 fdb3 	bl	8016e9c <iprintf>
  seg->len = p->tot_len - optlen;
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	891a      	ldrh	r2, [r3, #8]
 801233a:	7dfb      	ldrb	r3, [r7, #23]
 801233c:	b29b      	uxth	r3, r3
 801233e:	1ad3      	subs	r3, r2, r3
 8012340:	b29a      	uxth	r2, r3
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012346:	2114      	movs	r1, #20
 8012348:	68b8      	ldr	r0, [r7, #8]
 801234a:	f7fb fdc1 	bl	800ded0 <pbuf_add_header>
 801234e:	4603      	mov	r3, r0
 8012350:	2b00      	cmp	r3, #0
 8012352:	d004      	beq.n	801235e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012354:	6938      	ldr	r0, [r7, #16]
 8012356:	f7fd f8d2 	bl	800f4fe <tcp_seg_free>
    return NULL;
 801235a:	2300      	movs	r3, #0
 801235c:	e036      	b.n	80123cc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	685b      	ldr	r3, [r3, #4]
 8012362:	685a      	ldr	r2, [r3, #4]
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	8ada      	ldrh	r2, [r3, #22]
 801236c:	693b      	ldr	r3, [r7, #16]
 801236e:	68dc      	ldr	r4, [r3, #12]
 8012370:	4610      	mov	r0, r2
 8012372:	f7fa fa55 	bl	800c820 <lwip_htons>
 8012376:	4603      	mov	r3, r0
 8012378:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	8b1a      	ldrh	r2, [r3, #24]
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	68dc      	ldr	r4, [r3, #12]
 8012382:	4610      	mov	r0, r2
 8012384:	f7fa fa4c 	bl	800c820 <lwip_htons>
 8012388:	4603      	mov	r3, r0
 801238a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	68dc      	ldr	r4, [r3, #12]
 8012390:	6838      	ldr	r0, [r7, #0]
 8012392:	f7fa fa5b 	bl	800c84c <lwip_htonl>
 8012396:	4603      	mov	r3, r0
 8012398:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801239a:	7dfb      	ldrb	r3, [r7, #23]
 801239c:	089b      	lsrs	r3, r3, #2
 801239e:	b2db      	uxtb	r3, r3
 80123a0:	3305      	adds	r3, #5
 80123a2:	b29b      	uxth	r3, r3
 80123a4:	031b      	lsls	r3, r3, #12
 80123a6:	b29a      	uxth	r2, r3
 80123a8:	79fb      	ldrb	r3, [r7, #7]
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	4313      	orrs	r3, r2
 80123ae:	b29a      	uxth	r2, r3
 80123b0:	693b      	ldr	r3, [r7, #16]
 80123b2:	68dc      	ldr	r4, [r3, #12]
 80123b4:	4610      	mov	r0, r2
 80123b6:	f7fa fa33 	bl	800c820 <lwip_htons>
 80123ba:	4603      	mov	r3, r0
 80123bc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	2200      	movs	r2, #0
 80123c4:	749a      	strb	r2, [r3, #18]
 80123c6:	2200      	movs	r2, #0
 80123c8:	74da      	strb	r2, [r3, #19]
  return seg;
 80123ca:	693b      	ldr	r3, [r7, #16]
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	371c      	adds	r7, #28
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd90      	pop	{r4, r7, pc}
 80123d4:	080198a0 	.word	0x080198a0
 80123d8:	080198d4 	.word	0x080198d4
 80123dc:	080198f4 	.word	0x080198f4
 80123e0:	0801991c 	.word	0x0801991c
 80123e4:	08019940 	.word	0x08019940

080123e8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80123e8:	b590      	push	{r4, r7, lr}
 80123ea:	b08b      	sub	sp, #44	@ 0x2c
 80123ec:	af02      	add	r7, sp, #8
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	460b      	mov	r3, r1
 80123f2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80123f4:	2300      	movs	r3, #0
 80123f6:	61fb      	str	r3, [r7, #28]
 80123f8:	2300      	movs	r3, #0
 80123fa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80123fc:	2300      	movs	r3, #0
 80123fe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d106      	bne.n	8012414 <tcp_split_unsent_seg+0x2c>
 8012406:	4b95      	ldr	r3, [pc, #596]	@ (801265c <tcp_split_unsent_seg+0x274>)
 8012408:	f240 324b 	movw	r2, #843	@ 0x34b
 801240c:	4994      	ldr	r1, [pc, #592]	@ (8012660 <tcp_split_unsent_seg+0x278>)
 801240e:	4895      	ldr	r0, [pc, #596]	@ (8012664 <tcp_split_unsent_seg+0x27c>)
 8012410:	f004 fd44 	bl	8016e9c <iprintf>

  useg = pcb->unsent;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012418:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d102      	bne.n	8012426 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012420:	f04f 33ff 	mov.w	r3, #4294967295
 8012424:	e116      	b.n	8012654 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012426:	887b      	ldrh	r3, [r7, #2]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d109      	bne.n	8012440 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801242c:	4b8b      	ldr	r3, [pc, #556]	@ (801265c <tcp_split_unsent_seg+0x274>)
 801242e:	f240 3253 	movw	r2, #851	@ 0x353
 8012432:	498d      	ldr	r1, [pc, #564]	@ (8012668 <tcp_split_unsent_seg+0x280>)
 8012434:	488b      	ldr	r0, [pc, #556]	@ (8012664 <tcp_split_unsent_seg+0x27c>)
 8012436:	f004 fd31 	bl	8016e9c <iprintf>
    return ERR_VAL;
 801243a:	f06f 0305 	mvn.w	r3, #5
 801243e:	e109      	b.n	8012654 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	891b      	ldrh	r3, [r3, #8]
 8012444:	887a      	ldrh	r2, [r7, #2]
 8012446:	429a      	cmp	r2, r3
 8012448:	d301      	bcc.n	801244e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801244a:	2300      	movs	r3, #0
 801244c:	e102      	b.n	8012654 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012452:	887a      	ldrh	r2, [r7, #2]
 8012454:	429a      	cmp	r2, r3
 8012456:	d906      	bls.n	8012466 <tcp_split_unsent_seg+0x7e>
 8012458:	4b80      	ldr	r3, [pc, #512]	@ (801265c <tcp_split_unsent_seg+0x274>)
 801245a:	f240 325b 	movw	r2, #859	@ 0x35b
 801245e:	4983      	ldr	r1, [pc, #524]	@ (801266c <tcp_split_unsent_seg+0x284>)
 8012460:	4880      	ldr	r0, [pc, #512]	@ (8012664 <tcp_split_unsent_seg+0x27c>)
 8012462:	f004 fd1b 	bl	8016e9c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	891b      	ldrh	r3, [r3, #8]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d106      	bne.n	801247c <tcp_split_unsent_seg+0x94>
 801246e:	4b7b      	ldr	r3, [pc, #492]	@ (801265c <tcp_split_unsent_seg+0x274>)
 8012470:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8012474:	497e      	ldr	r1, [pc, #504]	@ (8012670 <tcp_split_unsent_seg+0x288>)
 8012476:	487b      	ldr	r0, [pc, #492]	@ (8012664 <tcp_split_unsent_seg+0x27c>)
 8012478:	f004 fd10 	bl	8016e9c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	7a9b      	ldrb	r3, [r3, #10]
 8012480:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012482:	7bfb      	ldrb	r3, [r7, #15]
 8012484:	009b      	lsls	r3, r3, #2
 8012486:	b2db      	uxtb	r3, r3
 8012488:	f003 0304 	and.w	r3, r3, #4
 801248c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	891a      	ldrh	r2, [r3, #8]
 8012492:	887b      	ldrh	r3, [r7, #2]
 8012494:	1ad3      	subs	r3, r2, r3
 8012496:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012498:	7bbb      	ldrb	r3, [r7, #14]
 801249a:	b29a      	uxth	r2, r3
 801249c:	89bb      	ldrh	r3, [r7, #12]
 801249e:	4413      	add	r3, r2
 80124a0:	b29b      	uxth	r3, r3
 80124a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80124a6:	4619      	mov	r1, r3
 80124a8:	2036      	movs	r0, #54	@ 0x36
 80124aa:	f7fb fac3 	bl	800da34 <pbuf_alloc>
 80124ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80124b0:	693b      	ldr	r3, [r7, #16]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	f000 80b7 	beq.w	8012626 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	685b      	ldr	r3, [r3, #4]
 80124bc:	891a      	ldrh	r2, [r3, #8]
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	891b      	ldrh	r3, [r3, #8]
 80124c2:	1ad3      	subs	r3, r2, r3
 80124c4:	b29a      	uxth	r2, r3
 80124c6:	887b      	ldrh	r3, [r7, #2]
 80124c8:	4413      	add	r3, r2
 80124ca:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	6858      	ldr	r0, [r3, #4]
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	685a      	ldr	r2, [r3, #4]
 80124d4:	7bbb      	ldrb	r3, [r7, #14]
 80124d6:	18d1      	adds	r1, r2, r3
 80124d8:	897b      	ldrh	r3, [r7, #10]
 80124da:	89ba      	ldrh	r2, [r7, #12]
 80124dc:	f7fb ff84 	bl	800e3e8 <pbuf_copy_partial>
 80124e0:	4603      	mov	r3, r0
 80124e2:	461a      	mov	r2, r3
 80124e4:	89bb      	ldrh	r3, [r7, #12]
 80124e6:	4293      	cmp	r3, r2
 80124e8:	f040 809f 	bne.w	801262a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	68db      	ldr	r3, [r3, #12]
 80124f0:	899b      	ldrh	r3, [r3, #12]
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7fa f993 	bl	800c820 <lwip_htons>
 80124fa:	4603      	mov	r3, r0
 80124fc:	b2db      	uxtb	r3, r3
 80124fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012502:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012504:	2300      	movs	r3, #0
 8012506:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012508:	7efb      	ldrb	r3, [r7, #27]
 801250a:	f003 0308 	and.w	r3, r3, #8
 801250e:	2b00      	cmp	r3, #0
 8012510:	d007      	beq.n	8012522 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012512:	7efb      	ldrb	r3, [r7, #27]
 8012514:	f023 0308 	bic.w	r3, r3, #8
 8012518:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801251a:	7ebb      	ldrb	r3, [r7, #26]
 801251c:	f043 0308 	orr.w	r3, r3, #8
 8012520:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012522:	7efb      	ldrb	r3, [r7, #27]
 8012524:	f003 0301 	and.w	r3, r3, #1
 8012528:	2b00      	cmp	r3, #0
 801252a:	d007      	beq.n	801253c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801252c:	7efb      	ldrb	r3, [r7, #27]
 801252e:	f023 0301 	bic.w	r3, r3, #1
 8012532:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012534:	7ebb      	ldrb	r3, [r7, #26]
 8012536:	f043 0301 	orr.w	r3, r3, #1
 801253a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	68db      	ldr	r3, [r3, #12]
 8012540:	685b      	ldr	r3, [r3, #4]
 8012542:	4618      	mov	r0, r3
 8012544:	f7fa f982 	bl	800c84c <lwip_htonl>
 8012548:	4602      	mov	r2, r0
 801254a:	887b      	ldrh	r3, [r7, #2]
 801254c:	18d1      	adds	r1, r2, r3
 801254e:	7eba      	ldrb	r2, [r7, #26]
 8012550:	7bfb      	ldrb	r3, [r7, #15]
 8012552:	9300      	str	r3, [sp, #0]
 8012554:	460b      	mov	r3, r1
 8012556:	6939      	ldr	r1, [r7, #16]
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f7ff fea9 	bl	80122b0 <tcp_create_segment>
 801255e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d063      	beq.n	801262e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	4618      	mov	r0, r3
 801256c:	f7fb fdd4 	bl	800e118 <pbuf_clen>
 8012570:	4603      	mov	r3, r0
 8012572:	461a      	mov	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801257a:	1a9b      	subs	r3, r3, r2
 801257c:	b29a      	uxth	r2, r3
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	6858      	ldr	r0, [r3, #4]
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	891a      	ldrh	r2, [r3, #8]
 801258e:	89bb      	ldrh	r3, [r7, #12]
 8012590:	1ad3      	subs	r3, r2, r3
 8012592:	b29b      	uxth	r3, r3
 8012594:	4619      	mov	r1, r3
 8012596:	f7fb fbab 	bl	800dcf0 <pbuf_realloc>
  useg->len -= remainder;
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	891a      	ldrh	r2, [r3, #8]
 801259e:	89bb      	ldrh	r3, [r7, #12]
 80125a0:	1ad3      	subs	r3, r2, r3
 80125a2:	b29a      	uxth	r2, r3
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	899b      	ldrh	r3, [r3, #12]
 80125ae:	b29c      	uxth	r4, r3
 80125b0:	7efb      	ldrb	r3, [r7, #27]
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7fa f933 	bl	800c820 <lwip_htons>
 80125ba:	4603      	mov	r3, r0
 80125bc:	461a      	mov	r2, r3
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	68db      	ldr	r3, [r3, #12]
 80125c2:	4322      	orrs	r2, r4
 80125c4:	b292      	uxth	r2, r2
 80125c6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7fb fda3 	bl	800e118 <pbuf_clen>
 80125d2:	4603      	mov	r3, r0
 80125d4:	461a      	mov	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80125dc:	4413      	add	r3, r2
 80125de:	b29a      	uxth	r2, r3
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7fb fd94 	bl	800e118 <pbuf_clen>
 80125f0:	4603      	mov	r3, r0
 80125f2:	461a      	mov	r2, r3
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80125fa:	4413      	add	r3, r2
 80125fc:	b29a      	uxth	r2, r3
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	681a      	ldr	r2, [r3, #0]
 8012608:	69fb      	ldr	r3, [r7, #28]
 801260a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	69fa      	ldr	r2, [r7, #28]
 8012610:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012612:	69fb      	ldr	r3, [r7, #28]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d103      	bne.n	8012622 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2200      	movs	r2, #0
 801261e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012622:	2300      	movs	r3, #0
 8012624:	e016      	b.n	8012654 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012626:	bf00      	nop
 8012628:	e002      	b.n	8012630 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801262a:	bf00      	nop
 801262c:	e000      	b.n	8012630 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801262e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012630:	69fb      	ldr	r3, [r7, #28]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d006      	beq.n	8012644 <tcp_split_unsent_seg+0x25c>
 8012636:	4b09      	ldr	r3, [pc, #36]	@ (801265c <tcp_split_unsent_seg+0x274>)
 8012638:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801263c:	490d      	ldr	r1, [pc, #52]	@ (8012674 <tcp_split_unsent_seg+0x28c>)
 801263e:	4809      	ldr	r0, [pc, #36]	@ (8012664 <tcp_split_unsent_seg+0x27c>)
 8012640:	f004 fc2c 	bl	8016e9c <iprintf>
  if (p != NULL) {
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d002      	beq.n	8012650 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801264a:	6938      	ldr	r0, [r7, #16]
 801264c:	f7fb fcd6 	bl	800dffc <pbuf_free>
  }

  return ERR_MEM;
 8012650:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012654:	4618      	mov	r0, r3
 8012656:	3724      	adds	r7, #36	@ 0x24
 8012658:	46bd      	mov	sp, r7
 801265a:	bd90      	pop	{r4, r7, pc}
 801265c:	080198a0 	.word	0x080198a0
 8012660:	08019c34 	.word	0x08019c34
 8012664:	080198f4 	.word	0x080198f4
 8012668:	08019c58 	.word	0x08019c58
 801266c:	08019c7c 	.word	0x08019c7c
 8012670:	08019c8c 	.word	0x08019c8c
 8012674:	08019c9c 	.word	0x08019c9c

08012678 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012678:	b590      	push	{r4, r7, lr}
 801267a:	b085      	sub	sp, #20
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d106      	bne.n	8012694 <tcp_send_fin+0x1c>
 8012686:	4b21      	ldr	r3, [pc, #132]	@ (801270c <tcp_send_fin+0x94>)
 8012688:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801268c:	4920      	ldr	r1, [pc, #128]	@ (8012710 <tcp_send_fin+0x98>)
 801268e:	4821      	ldr	r0, [pc, #132]	@ (8012714 <tcp_send_fin+0x9c>)
 8012690:	f004 fc04 	bl	8016e9c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012698:	2b00      	cmp	r3, #0
 801269a:	d02e      	beq.n	80126fa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126a0:	60fb      	str	r3, [r7, #12]
 80126a2:	e002      	b.n	80126aa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d1f8      	bne.n	80126a4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	68db      	ldr	r3, [r3, #12]
 80126b6:	899b      	ldrh	r3, [r3, #12]
 80126b8:	b29b      	uxth	r3, r3
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7fa f8b0 	bl	800c820 <lwip_htons>
 80126c0:	4603      	mov	r3, r0
 80126c2:	b2db      	uxtb	r3, r3
 80126c4:	f003 0307 	and.w	r3, r3, #7
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d116      	bne.n	80126fa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	899b      	ldrh	r3, [r3, #12]
 80126d2:	b29c      	uxth	r4, r3
 80126d4:	2001      	movs	r0, #1
 80126d6:	f7fa f8a3 	bl	800c820 <lwip_htons>
 80126da:	4603      	mov	r3, r0
 80126dc:	461a      	mov	r2, r3
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	4322      	orrs	r2, r4
 80126e4:	b292      	uxth	r2, r2
 80126e6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	8b5b      	ldrh	r3, [r3, #26]
 80126ec:	f043 0320 	orr.w	r3, r3, #32
 80126f0:	b29a      	uxth	r2, r3
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80126f6:	2300      	movs	r3, #0
 80126f8:	e004      	b.n	8012704 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80126fa:	2101      	movs	r1, #1
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f000 f80b 	bl	8012718 <tcp_enqueue_flags>
 8012702:	4603      	mov	r3, r0
}
 8012704:	4618      	mov	r0, r3
 8012706:	3714      	adds	r7, #20
 8012708:	46bd      	mov	sp, r7
 801270a:	bd90      	pop	{r4, r7, pc}
 801270c:	080198a0 	.word	0x080198a0
 8012710:	08019ca8 	.word	0x08019ca8
 8012714:	080198f4 	.word	0x080198f4

08012718 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b08a      	sub	sp, #40	@ 0x28
 801271c:	af02      	add	r7, sp, #8
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	460b      	mov	r3, r1
 8012722:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012724:	2300      	movs	r3, #0
 8012726:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012728:	2300      	movs	r3, #0
 801272a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801272c:	78fb      	ldrb	r3, [r7, #3]
 801272e:	f003 0303 	and.w	r3, r3, #3
 8012732:	2b00      	cmp	r3, #0
 8012734:	d106      	bne.n	8012744 <tcp_enqueue_flags+0x2c>
 8012736:	4b67      	ldr	r3, [pc, #412]	@ (80128d4 <tcp_enqueue_flags+0x1bc>)
 8012738:	f240 4211 	movw	r2, #1041	@ 0x411
 801273c:	4966      	ldr	r1, [pc, #408]	@ (80128d8 <tcp_enqueue_flags+0x1c0>)
 801273e:	4867      	ldr	r0, [pc, #412]	@ (80128dc <tcp_enqueue_flags+0x1c4>)
 8012740:	f004 fbac 	bl	8016e9c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d106      	bne.n	8012758 <tcp_enqueue_flags+0x40>
 801274a:	4b62      	ldr	r3, [pc, #392]	@ (80128d4 <tcp_enqueue_flags+0x1bc>)
 801274c:	f240 4213 	movw	r2, #1043	@ 0x413
 8012750:	4963      	ldr	r1, [pc, #396]	@ (80128e0 <tcp_enqueue_flags+0x1c8>)
 8012752:	4862      	ldr	r0, [pc, #392]	@ (80128dc <tcp_enqueue_flags+0x1c4>)
 8012754:	f004 fba2 	bl	8016e9c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012758:	78fb      	ldrb	r3, [r7, #3]
 801275a:	f003 0302 	and.w	r3, r3, #2
 801275e:	2b00      	cmp	r3, #0
 8012760:	d001      	beq.n	8012766 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012762:	2301      	movs	r3, #1
 8012764:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012766:	7ffb      	ldrb	r3, [r7, #31]
 8012768:	009b      	lsls	r3, r3, #2
 801276a:	b2db      	uxtb	r3, r3
 801276c:	f003 0304 	and.w	r3, r3, #4
 8012770:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012772:	7dfb      	ldrb	r3, [r7, #23]
 8012774:	b29b      	uxth	r3, r3
 8012776:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801277a:	4619      	mov	r1, r3
 801277c:	2036      	movs	r0, #54	@ 0x36
 801277e:	f7fb f959 	bl	800da34 <pbuf_alloc>
 8012782:	6138      	str	r0, [r7, #16]
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d109      	bne.n	801279e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	8b5b      	ldrh	r3, [r3, #26]
 801278e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012792:	b29a      	uxth	r2, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012798:	f04f 33ff 	mov.w	r3, #4294967295
 801279c:	e095      	b.n	80128ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	895a      	ldrh	r2, [r3, #10]
 80127a2:	7dfb      	ldrb	r3, [r7, #23]
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d206      	bcs.n	80127b8 <tcp_enqueue_flags+0xa0>
 80127aa:	4b4a      	ldr	r3, [pc, #296]	@ (80128d4 <tcp_enqueue_flags+0x1bc>)
 80127ac:	f240 4239 	movw	r2, #1081	@ 0x439
 80127b0:	494c      	ldr	r1, [pc, #304]	@ (80128e4 <tcp_enqueue_flags+0x1cc>)
 80127b2:	484a      	ldr	r0, [pc, #296]	@ (80128dc <tcp_enqueue_flags+0x1c4>)
 80127b4:	f004 fb72 	bl	8016e9c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80127bc:	78fa      	ldrb	r2, [r7, #3]
 80127be:	7ffb      	ldrb	r3, [r7, #31]
 80127c0:	9300      	str	r3, [sp, #0]
 80127c2:	460b      	mov	r3, r1
 80127c4:	6939      	ldr	r1, [r7, #16]
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f7ff fd72 	bl	80122b0 <tcp_create_segment>
 80127cc:	60f8      	str	r0, [r7, #12]
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d109      	bne.n	80127e8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	8b5b      	ldrh	r3, [r3, #26]
 80127d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127dc:	b29a      	uxth	r2, r3
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80127e2:	f04f 33ff 	mov.w	r3, #4294967295
 80127e6:	e070      	b.n	80128ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	f003 0303 	and.w	r3, r3, #3
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d006      	beq.n	8012802 <tcp_enqueue_flags+0xea>
 80127f4:	4b37      	ldr	r3, [pc, #220]	@ (80128d4 <tcp_enqueue_flags+0x1bc>)
 80127f6:	f240 4242 	movw	r2, #1090	@ 0x442
 80127fa:	493b      	ldr	r1, [pc, #236]	@ (80128e8 <tcp_enqueue_flags+0x1d0>)
 80127fc:	4837      	ldr	r0, [pc, #220]	@ (80128dc <tcp_enqueue_flags+0x1c4>)
 80127fe:	f004 fb4d 	bl	8016e9c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	891b      	ldrh	r3, [r3, #8]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d006      	beq.n	8012818 <tcp_enqueue_flags+0x100>
 801280a:	4b32      	ldr	r3, [pc, #200]	@ (80128d4 <tcp_enqueue_flags+0x1bc>)
 801280c:	f240 4243 	movw	r2, #1091	@ 0x443
 8012810:	4936      	ldr	r1, [pc, #216]	@ (80128ec <tcp_enqueue_flags+0x1d4>)
 8012812:	4832      	ldr	r0, [pc, #200]	@ (80128dc <tcp_enqueue_flags+0x1c4>)
 8012814:	f004 fb42 	bl	8016e9c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801281c:	2b00      	cmp	r3, #0
 801281e:	d103      	bne.n	8012828 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	68fa      	ldr	r2, [r7, #12]
 8012824:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012826:	e00d      	b.n	8012844 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801282c:	61bb      	str	r3, [r7, #24]
 801282e:	e002      	b.n	8012836 <tcp_enqueue_flags+0x11e>
 8012830:	69bb      	ldr	r3, [r7, #24]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	61bb      	str	r3, [r7, #24]
 8012836:	69bb      	ldr	r3, [r7, #24]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1f8      	bne.n	8012830 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	68fa      	ldr	r2, [r7, #12]
 8012842:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2200      	movs	r2, #0
 8012848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801284c:	78fb      	ldrb	r3, [r7, #3]
 801284e:	f003 0302 	and.w	r3, r3, #2
 8012852:	2b00      	cmp	r3, #0
 8012854:	d104      	bne.n	8012860 <tcp_enqueue_flags+0x148>
 8012856:	78fb      	ldrb	r3, [r7, #3]
 8012858:	f003 0301 	and.w	r3, r3, #1
 801285c:	2b00      	cmp	r3, #0
 801285e:	d004      	beq.n	801286a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012864:	1c5a      	adds	r2, r3, #1
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801286a:	78fb      	ldrb	r3, [r7, #3]
 801286c:	f003 0301 	and.w	r3, r3, #1
 8012870:	2b00      	cmp	r3, #0
 8012872:	d006      	beq.n	8012882 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	8b5b      	ldrh	r3, [r3, #26]
 8012878:	f043 0320 	orr.w	r3, r3, #32
 801287c:	b29a      	uxth	r2, r3
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	4618      	mov	r0, r3
 8012888:	f7fb fc46 	bl	800e118 <pbuf_clen>
 801288c:	4603      	mov	r3, r0
 801288e:	461a      	mov	r2, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012896:	4413      	add	r3, r2
 8012898:	b29a      	uxth	r2, r3
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d00e      	beq.n	80128c8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d10a      	bne.n	80128c8 <tcp_enqueue_flags+0x1b0>
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d106      	bne.n	80128c8 <tcp_enqueue_flags+0x1b0>
 80128ba:	4b06      	ldr	r3, [pc, #24]	@ (80128d4 <tcp_enqueue_flags+0x1bc>)
 80128bc:	f240 4265 	movw	r2, #1125	@ 0x465
 80128c0:	490b      	ldr	r1, [pc, #44]	@ (80128f0 <tcp_enqueue_flags+0x1d8>)
 80128c2:	4806      	ldr	r0, [pc, #24]	@ (80128dc <tcp_enqueue_flags+0x1c4>)
 80128c4:	f004 faea 	bl	8016e9c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80128c8:	2300      	movs	r3, #0
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3720      	adds	r7, #32
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}
 80128d2:	bf00      	nop
 80128d4:	080198a0 	.word	0x080198a0
 80128d8:	08019cc4 	.word	0x08019cc4
 80128dc:	080198f4 	.word	0x080198f4
 80128e0:	08019d1c 	.word	0x08019d1c
 80128e4:	08019d3c 	.word	0x08019d3c
 80128e8:	08019d78 	.word	0x08019d78
 80128ec:	08019d90 	.word	0x08019d90
 80128f0:	08019dbc 	.word	0x08019dbc

080128f4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80128f4:	b5b0      	push	{r4, r5, r7, lr}
 80128f6:	b08a      	sub	sp, #40	@ 0x28
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d106      	bne.n	8012910 <tcp_output+0x1c>
 8012902:	4b8a      	ldr	r3, [pc, #552]	@ (8012b2c <tcp_output+0x238>)
 8012904:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012908:	4989      	ldr	r1, [pc, #548]	@ (8012b30 <tcp_output+0x23c>)
 801290a:	488a      	ldr	r0, [pc, #552]	@ (8012b34 <tcp_output+0x240>)
 801290c:	f004 fac6 	bl	8016e9c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	7d1b      	ldrb	r3, [r3, #20]
 8012914:	2b01      	cmp	r3, #1
 8012916:	d106      	bne.n	8012926 <tcp_output+0x32>
 8012918:	4b84      	ldr	r3, [pc, #528]	@ (8012b2c <tcp_output+0x238>)
 801291a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801291e:	4986      	ldr	r1, [pc, #536]	@ (8012b38 <tcp_output+0x244>)
 8012920:	4884      	ldr	r0, [pc, #528]	@ (8012b34 <tcp_output+0x240>)
 8012922:	f004 fabb 	bl	8016e9c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012926:	4b85      	ldr	r3, [pc, #532]	@ (8012b3c <tcp_output+0x248>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	687a      	ldr	r2, [r7, #4]
 801292c:	429a      	cmp	r2, r3
 801292e:	d101      	bne.n	8012934 <tcp_output+0x40>
    return ERR_OK;
 8012930:	2300      	movs	r3, #0
 8012932:	e1ce      	b.n	8012cd2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012940:	4293      	cmp	r3, r2
 8012942:	bf28      	it	cs
 8012944:	4613      	movcs	r3, r2
 8012946:	b29b      	uxth	r3, r3
 8012948:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801294e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012952:	2b00      	cmp	r3, #0
 8012954:	d10b      	bne.n	801296e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	8b5b      	ldrh	r3, [r3, #26]
 801295a:	f003 0302 	and.w	r3, r3, #2
 801295e:	2b00      	cmp	r3, #0
 8012960:	f000 81aa 	beq.w	8012cb8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f000 fdcb 	bl	8013500 <tcp_send_empty_ack>
 801296a:	4603      	mov	r3, r0
 801296c:	e1b1      	b.n	8012cd2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801296e:	6879      	ldr	r1, [r7, #4]
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	3304      	adds	r3, #4
 8012974:	461a      	mov	r2, r3
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f7ff fc7e 	bl	8012278 <tcp_route>
 801297c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d102      	bne.n	801298a <tcp_output+0x96>
    return ERR_RTE;
 8012984:	f06f 0303 	mvn.w	r3, #3
 8012988:	e1a3      	b.n	8012cd2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d003      	beq.n	8012998 <tcp_output+0xa4>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d111      	bne.n	80129bc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012998:	697b      	ldr	r3, [r7, #20]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d002      	beq.n	80129a4 <tcp_output+0xb0>
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	3304      	adds	r3, #4
 80129a2:	e000      	b.n	80129a6 <tcp_output+0xb2>
 80129a4:	2300      	movs	r3, #0
 80129a6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d102      	bne.n	80129b4 <tcp_output+0xc0>
      return ERR_RTE;
 80129ae:	f06f 0303 	mvn.w	r3, #3
 80129b2:	e18e      	b.n	8012cd2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	681a      	ldr	r2, [r3, #0]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80129bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7f9 ff42 	bl	800c84c <lwip_htonl>
 80129c8:	4602      	mov	r2, r0
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129ce:	1ad3      	subs	r3, r2, r3
 80129d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129d2:	8912      	ldrh	r2, [r2, #8]
 80129d4:	4413      	add	r3, r2
 80129d6:	69ba      	ldr	r2, [r7, #24]
 80129d8:	429a      	cmp	r2, r3
 80129da:	d227      	bcs.n	8012a2c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80129e2:	461a      	mov	r2, r3
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	4293      	cmp	r3, r2
 80129e8:	d114      	bne.n	8012a14 <tcp_output+0x120>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d110      	bne.n	8012a14 <tcp_output+0x120>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d10b      	bne.n	8012a14 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2200      	movs	r2, #0
 8012a00:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2201      	movs	r2, #1
 8012a08:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	8b5b      	ldrh	r3, [r3, #26]
 8012a18:	f003 0302 	and.w	r3, r3, #2
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	f000 814d 	beq.w	8012cbc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f000 fd6c 	bl	8013500 <tcp_send_empty_ack>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	e152      	b.n	8012cd2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a38:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012a3a:	6a3b      	ldr	r3, [r7, #32]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f000 811c 	beq.w	8012c7a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012a42:	e002      	b.n	8012a4a <tcp_output+0x156>
 8012a44:	6a3b      	ldr	r3, [r7, #32]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	623b      	str	r3, [r7, #32]
 8012a4a:	6a3b      	ldr	r3, [r7, #32]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d1f8      	bne.n	8012a44 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012a52:	e112      	b.n	8012c7a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	899b      	ldrh	r3, [r3, #12]
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7f9 fedf 	bl	800c820 <lwip_htons>
 8012a62:	4603      	mov	r3, r0
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	f003 0304 	and.w	r3, r3, #4
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d006      	beq.n	8012a7c <tcp_output+0x188>
 8012a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8012b2c <tcp_output+0x238>)
 8012a70:	f240 5236 	movw	r2, #1334	@ 0x536
 8012a74:	4932      	ldr	r1, [pc, #200]	@ (8012b40 <tcp_output+0x24c>)
 8012a76:	482f      	ldr	r0, [pc, #188]	@ (8012b34 <tcp_output+0x240>)
 8012a78:	f004 fa10 	bl	8016e9c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d01f      	beq.n	8012ac4 <tcp_output+0x1d0>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	8b5b      	ldrh	r3, [r3, #26]
 8012a88:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d119      	bne.n	8012ac4 <tcp_output+0x1d0>
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d00b      	beq.n	8012ab0 <tcp_output+0x1bc>
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d110      	bne.n	8012ac4 <tcp_output+0x1d0>
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012aa6:	891a      	ldrh	r2, [r3, #8]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d209      	bcs.n	8012ac4 <tcp_output+0x1d0>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d004      	beq.n	8012ac4 <tcp_output+0x1d0>
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012ac0:	2b08      	cmp	r3, #8
 8012ac2:	d901      	bls.n	8012ac8 <tcp_output+0x1d4>
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	e000      	b.n	8012aca <tcp_output+0x1d6>
 8012ac8:	2300      	movs	r3, #0
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d106      	bne.n	8012adc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	8b5b      	ldrh	r3, [r3, #26]
 8012ad2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f000 80e4 	beq.w	8012ca4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	7d1b      	ldrb	r3, [r3, #20]
 8012ae0:	2b02      	cmp	r3, #2
 8012ae2:	d00d      	beq.n	8012b00 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	899b      	ldrh	r3, [r3, #12]
 8012aea:	b29c      	uxth	r4, r3
 8012aec:	2010      	movs	r0, #16
 8012aee:	f7f9 fe97 	bl	800c820 <lwip_htons>
 8012af2:	4603      	mov	r3, r0
 8012af4:	461a      	mov	r2, r3
 8012af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012af8:	68db      	ldr	r3, [r3, #12]
 8012afa:	4322      	orrs	r2, r4
 8012afc:	b292      	uxth	r2, r2
 8012afe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012b00:	697a      	ldr	r2, [r7, #20]
 8012b02:	6879      	ldr	r1, [r7, #4]
 8012b04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012b06:	f000 f909 	bl	8012d1c <tcp_output_segment>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d016      	beq.n	8012b44 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	8b5b      	ldrh	r3, [r3, #26]
 8012b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b1e:	b29a      	uxth	r2, r3
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	835a      	strh	r2, [r3, #26]
      return err;
 8012b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b28:	e0d3      	b.n	8012cd2 <tcp_output+0x3de>
 8012b2a:	bf00      	nop
 8012b2c:	080198a0 	.word	0x080198a0
 8012b30:	08019de4 	.word	0x08019de4
 8012b34:	080198f4 	.word	0x080198f4
 8012b38:	08019dfc 	.word	0x08019dfc
 8012b3c:	200273b0 	.word	0x200273b0
 8012b40:	08019e24 	.word	0x08019e24
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	7d1b      	ldrb	r3, [r3, #20]
 8012b50:	2b02      	cmp	r3, #2
 8012b52:	d006      	beq.n	8012b62 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	8b5b      	ldrh	r3, [r3, #26]
 8012b58:	f023 0303 	bic.w	r3, r3, #3
 8012b5c:	b29a      	uxth	r2, r3
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b64:	68db      	ldr	r3, [r3, #12]
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f7f9 fe6f 	bl	800c84c <lwip_htonl>
 8012b6e:	4604      	mov	r4, r0
 8012b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b72:	891b      	ldrh	r3, [r3, #8]
 8012b74:	461d      	mov	r5, r3
 8012b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b78:	68db      	ldr	r3, [r3, #12]
 8012b7a:	899b      	ldrh	r3, [r3, #12]
 8012b7c:	b29b      	uxth	r3, r3
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7f9 fe4e 	bl	800c820 <lwip_htons>
 8012b84:	4603      	mov	r3, r0
 8012b86:	b2db      	uxtb	r3, r3
 8012b88:	f003 0303 	and.w	r3, r3, #3
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d001      	beq.n	8012b94 <tcp_output+0x2a0>
 8012b90:	2301      	movs	r3, #1
 8012b92:	e000      	b.n	8012b96 <tcp_output+0x2a2>
 8012b94:	2300      	movs	r3, #0
 8012b96:	442b      	add	r3, r5
 8012b98:	4423      	add	r3, r4
 8012b9a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	1ad3      	subs	r3, r2, r3
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	da02      	bge.n	8012bae <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	68ba      	ldr	r2, [r7, #8]
 8012bac:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bb0:	891b      	ldrh	r3, [r3, #8]
 8012bb2:	461c      	mov	r4, r3
 8012bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	899b      	ldrh	r3, [r3, #12]
 8012bba:	b29b      	uxth	r3, r3
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7f9 fe2f 	bl	800c820 <lwip_htons>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	b2db      	uxtb	r3, r3
 8012bc6:	f003 0303 	and.w	r3, r3, #3
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d001      	beq.n	8012bd2 <tcp_output+0x2de>
 8012bce:	2301      	movs	r3, #1
 8012bd0:	e000      	b.n	8012bd4 <tcp_output+0x2e0>
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	4423      	add	r3, r4
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d049      	beq.n	8012c6e <tcp_output+0x37a>
      seg->next = NULL;
 8012bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bdc:	2200      	movs	r2, #0
 8012bde:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d105      	bne.n	8012bf4 <tcp_output+0x300>
        pcb->unacked = seg;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012bec:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bf0:	623b      	str	r3, [r7, #32]
 8012bf2:	e03f      	b.n	8012c74 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7f9 fe26 	bl	800c84c <lwip_htonl>
 8012c00:	4604      	mov	r4, r0
 8012c02:	6a3b      	ldr	r3, [r7, #32]
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	685b      	ldr	r3, [r3, #4]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7f9 fe1f 	bl	800c84c <lwip_htonl>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	1ae3      	subs	r3, r4, r3
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	da24      	bge.n	8012c60 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	3370      	adds	r3, #112	@ 0x70
 8012c1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c1c:	e002      	b.n	8012c24 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c24:	69fb      	ldr	r3, [r7, #28]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d011      	beq.n	8012c50 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	68db      	ldr	r3, [r3, #12]
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7f9 fe09 	bl	800c84c <lwip_htonl>
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c3e:	68db      	ldr	r3, [r3, #12]
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7f9 fe02 	bl	800c84c <lwip_htonl>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	dbe6      	blt.n	8012c1e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c56:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012c58:	69fb      	ldr	r3, [r7, #28]
 8012c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c5c:	601a      	str	r2, [r3, #0]
 8012c5e:	e009      	b.n	8012c74 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012c60:	6a3b      	ldr	r3, [r7, #32]
 8012c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c64:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012c66:	6a3b      	ldr	r3, [r7, #32]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	623b      	str	r3, [r7, #32]
 8012c6c:	e002      	b.n	8012c74 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012c6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012c70:	f7fc fc45 	bl	800f4fe <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c78:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d012      	beq.n	8012ca6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c82:	68db      	ldr	r3, [r3, #12]
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7f9 fde0 	bl	800c84c <lwip_htonl>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c92:	1ad3      	subs	r3, r2, r3
 8012c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c96:	8912      	ldrh	r2, [r2, #8]
 8012c98:	4413      	add	r3, r2
  while (seg != NULL &&
 8012c9a:	69ba      	ldr	r2, [r7, #24]
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	f4bf aed9 	bcs.w	8012a54 <tcp_output+0x160>
 8012ca2:	e000      	b.n	8012ca6 <tcp_output+0x3b2>
      break;
 8012ca4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d108      	bne.n	8012cc0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012cb6:	e004      	b.n	8012cc2 <tcp_output+0x3ce>
    goto output_done;
 8012cb8:	bf00      	nop
 8012cba:	e002      	b.n	8012cc2 <tcp_output+0x3ce>
    goto output_done;
 8012cbc:	bf00      	nop
 8012cbe:	e000      	b.n	8012cc2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012cc0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	8b5b      	ldrh	r3, [r3, #26]
 8012cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012cca:	b29a      	uxth	r2, r3
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012cd0:	2300      	movs	r3, #0
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3728      	adds	r7, #40	@ 0x28
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8012cda:	bf00      	nop

08012cdc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d106      	bne.n	8012cf8 <tcp_output_segment_busy+0x1c>
 8012cea:	4b09      	ldr	r3, [pc, #36]	@ (8012d10 <tcp_output_segment_busy+0x34>)
 8012cec:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012cf0:	4908      	ldr	r1, [pc, #32]	@ (8012d14 <tcp_output_segment_busy+0x38>)
 8012cf2:	4809      	ldr	r0, [pc, #36]	@ (8012d18 <tcp_output_segment_busy+0x3c>)
 8012cf4:	f004 f8d2 	bl	8016e9c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	7b9b      	ldrb	r3, [r3, #14]
 8012cfe:	2b01      	cmp	r3, #1
 8012d00:	d001      	beq.n	8012d06 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012d02:	2301      	movs	r3, #1
 8012d04:	e000      	b.n	8012d08 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012d06:	2300      	movs	r3, #0
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3708      	adds	r7, #8
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}
 8012d10:	080198a0 	.word	0x080198a0
 8012d14:	08019e3c 	.word	0x08019e3c
 8012d18:	080198f4 	.word	0x080198f4

08012d1c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012d1c:	b5b0      	push	{r4, r5, r7, lr}
 8012d1e:	b08c      	sub	sp, #48	@ 0x30
 8012d20:	af04      	add	r7, sp, #16
 8012d22:	60f8      	str	r0, [r7, #12]
 8012d24:	60b9      	str	r1, [r7, #8]
 8012d26:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d106      	bne.n	8012d3c <tcp_output_segment+0x20>
 8012d2e:	4b64      	ldr	r3, [pc, #400]	@ (8012ec0 <tcp_output_segment+0x1a4>)
 8012d30:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012d34:	4963      	ldr	r1, [pc, #396]	@ (8012ec4 <tcp_output_segment+0x1a8>)
 8012d36:	4864      	ldr	r0, [pc, #400]	@ (8012ec8 <tcp_output_segment+0x1ac>)
 8012d38:	f004 f8b0 	bl	8016e9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d106      	bne.n	8012d50 <tcp_output_segment+0x34>
 8012d42:	4b5f      	ldr	r3, [pc, #380]	@ (8012ec0 <tcp_output_segment+0x1a4>)
 8012d44:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012d48:	4960      	ldr	r1, [pc, #384]	@ (8012ecc <tcp_output_segment+0x1b0>)
 8012d4a:	485f      	ldr	r0, [pc, #380]	@ (8012ec8 <tcp_output_segment+0x1ac>)
 8012d4c:	f004 f8a6 	bl	8016e9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d106      	bne.n	8012d64 <tcp_output_segment+0x48>
 8012d56:	4b5a      	ldr	r3, [pc, #360]	@ (8012ec0 <tcp_output_segment+0x1a4>)
 8012d58:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012d5c:	495c      	ldr	r1, [pc, #368]	@ (8012ed0 <tcp_output_segment+0x1b4>)
 8012d5e:	485a      	ldr	r0, [pc, #360]	@ (8012ec8 <tcp_output_segment+0x1ac>)
 8012d60:	f004 f89c 	bl	8016e9c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012d64:	68f8      	ldr	r0, [r7, #12]
 8012d66:	f7ff ffb9 	bl	8012cdc <tcp_output_segment_busy>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d001      	beq.n	8012d74 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012d70:	2300      	movs	r3, #0
 8012d72:	e0a1      	b.n	8012eb8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	68dc      	ldr	r4, [r3, #12]
 8012d7c:	4610      	mov	r0, r2
 8012d7e:	f7f9 fd65 	bl	800c84c <lwip_htonl>
 8012d82:	4603      	mov	r3, r0
 8012d84:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	68dc      	ldr	r4, [r3, #12]
 8012d8e:	4610      	mov	r0, r2
 8012d90:	f7f9 fd46 	bl	800c820 <lwip_htons>
 8012d94:	4603      	mov	r3, r0
 8012d96:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d9c:	68ba      	ldr	r2, [r7, #8]
 8012d9e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012da0:	441a      	add	r2, r3
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	68db      	ldr	r3, [r3, #12]
 8012daa:	3314      	adds	r3, #20
 8012dac:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	7a9b      	ldrb	r3, [r3, #10]
 8012db2:	f003 0301 	and.w	r3, r3, #1
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d015      	beq.n	8012de6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	3304      	adds	r3, #4
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	6879      	ldr	r1, [r7, #4]
 8012dc2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012dc6:	f7fc fe91 	bl	800faec <tcp_eff_send_mss_netif>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012dce:	8b7b      	ldrh	r3, [r7, #26]
 8012dd0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7f9 fd39 	bl	800c84c <lwip_htonl>
 8012dda:	4602      	mov	r2, r0
 8012ddc:	69fb      	ldr	r3, [r7, #28]
 8012dde:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	3304      	adds	r3, #4
 8012de4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	da02      	bge.n	8012df6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	2200      	movs	r2, #0
 8012df4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d10c      	bne.n	8012e18 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012dfe:	4b35      	ldr	r3, [pc, #212]	@ (8012ed4 <tcp_output_segment+0x1b8>)
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	68db      	ldr	r3, [r3, #12]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7f9 fd1d 	bl	800c84c <lwip_htonl>
 8012e12:	4602      	mov	r2, r0
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	68da      	ldr	r2, [r3, #12]
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	685b      	ldr	r3, [r3, #4]
 8012e22:	1ad3      	subs	r3, r2, r3
 8012e24:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	685b      	ldr	r3, [r3, #4]
 8012e2a:	8959      	ldrh	r1, [r3, #10]
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	685b      	ldr	r3, [r3, #4]
 8012e30:	8b3a      	ldrh	r2, [r7, #24]
 8012e32:	1a8a      	subs	r2, r1, r2
 8012e34:	b292      	uxth	r2, r2
 8012e36:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	8919      	ldrh	r1, [r3, #8]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	8b3a      	ldrh	r2, [r7, #24]
 8012e44:	1a8a      	subs	r2, r1, r2
 8012e46:	b292      	uxth	r2, r2
 8012e48:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	68fa      	ldr	r2, [r7, #12]
 8012e50:	68d2      	ldr	r2, [r2, #12]
 8012e52:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	68db      	ldr	r3, [r3, #12]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	741a      	strb	r2, [r3, #16]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	68da      	ldr	r2, [r3, #12]
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	7a9b      	ldrb	r3, [r3, #10]
 8012e68:	f003 0301 	and.w	r3, r3, #1
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d001      	beq.n	8012e74 <tcp_output_segment+0x158>
 8012e70:	2318      	movs	r3, #24
 8012e72:	e000      	b.n	8012e76 <tcp_output_segment+0x15a>
 8012e74:	2314      	movs	r3, #20
 8012e76:	4413      	add	r3, r2
 8012e78:	69fa      	ldr	r2, [r7, #28]
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	d006      	beq.n	8012e8c <tcp_output_segment+0x170>
 8012e7e:	4b10      	ldr	r3, [pc, #64]	@ (8012ec0 <tcp_output_segment+0x1a4>)
 8012e80:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012e84:	4914      	ldr	r1, [pc, #80]	@ (8012ed8 <tcp_output_segment+0x1bc>)
 8012e86:	4810      	ldr	r0, [pc, #64]	@ (8012ec8 <tcp_output_segment+0x1ac>)
 8012e88:	f004 f808 	bl	8016e9c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	6858      	ldr	r0, [r3, #4]
 8012e90:	68b9      	ldr	r1, [r7, #8]
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	1d1c      	adds	r4, r3, #4
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	7add      	ldrb	r5, [r3, #11]
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	7a9b      	ldrb	r3, [r3, #10]
 8012e9e:	687a      	ldr	r2, [r7, #4]
 8012ea0:	9202      	str	r2, [sp, #8]
 8012ea2:	2206      	movs	r2, #6
 8012ea4:	9201      	str	r2, [sp, #4]
 8012ea6:	9300      	str	r3, [sp, #0]
 8012ea8:	462b      	mov	r3, r5
 8012eaa:	4622      	mov	r2, r4
 8012eac:	f002 fb5c 	bl	8015568 <ip4_output_if>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012eb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3720      	adds	r7, #32
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8012ec0:	080198a0 	.word	0x080198a0
 8012ec4:	08019e64 	.word	0x08019e64
 8012ec8:	080198f4 	.word	0x080198f4
 8012ecc:	08019e84 	.word	0x08019e84
 8012ed0:	08019ea4 	.word	0x08019ea4
 8012ed4:	20027364 	.word	0x20027364
 8012ed8:	08019ec8 	.word	0x08019ec8

08012edc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012edc:	b5b0      	push	{r4, r5, r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d106      	bne.n	8012ef8 <tcp_rexmit_rto_prepare+0x1c>
 8012eea:	4b31      	ldr	r3, [pc, #196]	@ (8012fb0 <tcp_rexmit_rto_prepare+0xd4>)
 8012eec:	f240 6263 	movw	r2, #1635	@ 0x663
 8012ef0:	4930      	ldr	r1, [pc, #192]	@ (8012fb4 <tcp_rexmit_rto_prepare+0xd8>)
 8012ef2:	4831      	ldr	r0, [pc, #196]	@ (8012fb8 <tcp_rexmit_rto_prepare+0xdc>)
 8012ef4:	f003 ffd2 	bl	8016e9c <iprintf>

  if (pcb->unacked == NULL) {
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d102      	bne.n	8012f06 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012f00:	f06f 0305 	mvn.w	r3, #5
 8012f04:	e050      	b.n	8012fa8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f0a:	60fb      	str	r3, [r7, #12]
 8012f0c:	e00b      	b.n	8012f26 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012f0e:	68f8      	ldr	r0, [r7, #12]
 8012f10:	f7ff fee4 	bl	8012cdc <tcp_output_segment_busy>
 8012f14:	4603      	mov	r3, r0
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d002      	beq.n	8012f20 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012f1a:	f06f 0305 	mvn.w	r3, #5
 8012f1e:	e043      	b.n	8012fa8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	60fb      	str	r3, [r7, #12]
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d1ef      	bne.n	8012f0e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012f2e:	68f8      	ldr	r0, [r7, #12]
 8012f30:	f7ff fed4 	bl	8012cdc <tcp_output_segment_busy>
 8012f34:	4603      	mov	r3, r0
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d002      	beq.n	8012f40 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012f3a:	f06f 0305 	mvn.w	r3, #5
 8012f3e:	e033      	b.n	8012fa8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2200      	movs	r2, #0
 8012f54:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	8b5b      	ldrh	r3, [r3, #26]
 8012f5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7f9 fc6e 	bl	800c84c <lwip_htonl>
 8012f70:	4604      	mov	r4, r0
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	891b      	ldrh	r3, [r3, #8]
 8012f76:	461d      	mov	r5, r3
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	68db      	ldr	r3, [r3, #12]
 8012f7c:	899b      	ldrh	r3, [r3, #12]
 8012f7e:	b29b      	uxth	r3, r3
 8012f80:	4618      	mov	r0, r3
 8012f82:	f7f9 fc4d 	bl	800c820 <lwip_htons>
 8012f86:	4603      	mov	r3, r0
 8012f88:	b2db      	uxtb	r3, r3
 8012f8a:	f003 0303 	and.w	r3, r3, #3
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d001      	beq.n	8012f96 <tcp_rexmit_rto_prepare+0xba>
 8012f92:	2301      	movs	r3, #1
 8012f94:	e000      	b.n	8012f98 <tcp_rexmit_rto_prepare+0xbc>
 8012f96:	2300      	movs	r3, #0
 8012f98:	442b      	add	r3, r5
 8012f9a:	18e2      	adds	r2, r4, r3
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012fa6:	2300      	movs	r3, #0
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3710      	adds	r7, #16
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bdb0      	pop	{r4, r5, r7, pc}
 8012fb0:	080198a0 	.word	0x080198a0
 8012fb4:	08019edc 	.word	0x08019edc
 8012fb8:	080198f4 	.word	0x080198f4

08012fbc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b082      	sub	sp, #8
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d106      	bne.n	8012fd8 <tcp_rexmit_rto_commit+0x1c>
 8012fca:	4b0d      	ldr	r3, [pc, #52]	@ (8013000 <tcp_rexmit_rto_commit+0x44>)
 8012fcc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012fd0:	490c      	ldr	r1, [pc, #48]	@ (8013004 <tcp_rexmit_rto_commit+0x48>)
 8012fd2:	480d      	ldr	r0, [pc, #52]	@ (8013008 <tcp_rexmit_rto_commit+0x4c>)
 8012fd4:	f003 ff62 	bl	8016e9c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012fde:	2bff      	cmp	r3, #255	@ 0xff
 8012fe0:	d007      	beq.n	8012ff2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012fe8:	3301      	adds	r3, #1
 8012fea:	b2da      	uxtb	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7ff fc7e 	bl	80128f4 <tcp_output>
}
 8012ff8:	bf00      	nop
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	080198a0 	.word	0x080198a0
 8013004:	08019f00 	.word	0x08019f00
 8013008:	080198f4 	.word	0x080198f4

0801300c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b082      	sub	sp, #8
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d106      	bne.n	8013028 <tcp_rexmit_rto+0x1c>
 801301a:	4b0a      	ldr	r3, [pc, #40]	@ (8013044 <tcp_rexmit_rto+0x38>)
 801301c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8013020:	4909      	ldr	r1, [pc, #36]	@ (8013048 <tcp_rexmit_rto+0x3c>)
 8013022:	480a      	ldr	r0, [pc, #40]	@ (801304c <tcp_rexmit_rto+0x40>)
 8013024:	f003 ff3a 	bl	8016e9c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f7ff ff57 	bl	8012edc <tcp_rexmit_rto_prepare>
 801302e:	4603      	mov	r3, r0
 8013030:	2b00      	cmp	r3, #0
 8013032:	d102      	bne.n	801303a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f7ff ffc1 	bl	8012fbc <tcp_rexmit_rto_commit>
  }
}
 801303a:	bf00      	nop
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	080198a0 	.word	0x080198a0
 8013048:	08019f24 	.word	0x08019f24
 801304c:	080198f4 	.word	0x080198f4

08013050 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013050:	b590      	push	{r4, r7, lr}
 8013052:	b085      	sub	sp, #20
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d106      	bne.n	801306c <tcp_rexmit+0x1c>
 801305e:	4b2f      	ldr	r3, [pc, #188]	@ (801311c <tcp_rexmit+0xcc>)
 8013060:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8013064:	492e      	ldr	r1, [pc, #184]	@ (8013120 <tcp_rexmit+0xd0>)
 8013066:	482f      	ldr	r0, [pc, #188]	@ (8013124 <tcp_rexmit+0xd4>)
 8013068:	f003 ff18 	bl	8016e9c <iprintf>

  if (pcb->unacked == NULL) {
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013070:	2b00      	cmp	r3, #0
 8013072:	d102      	bne.n	801307a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013074:	f06f 0305 	mvn.w	r3, #5
 8013078:	e04c      	b.n	8013114 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801307e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013080:	68b8      	ldr	r0, [r7, #8]
 8013082:	f7ff fe2b 	bl	8012cdc <tcp_output_segment_busy>
 8013086:	4603      	mov	r3, r0
 8013088:	2b00      	cmp	r3, #0
 801308a:	d002      	beq.n	8013092 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801308c:	f06f 0305 	mvn.w	r3, #5
 8013090:	e040      	b.n	8013114 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	681a      	ldr	r2, [r3, #0]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	336c      	adds	r3, #108	@ 0x6c
 801309e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80130a0:	e002      	b.n	80130a8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d011      	beq.n	80130d4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	68db      	ldr	r3, [r3, #12]
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7f9 fbc7 	bl	800c84c <lwip_htonl>
 80130be:	4604      	mov	r4, r0
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	68db      	ldr	r3, [r3, #12]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7f9 fbc0 	bl	800c84c <lwip_htonl>
 80130cc:	4603      	mov	r3, r0
 80130ce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	dbe6      	blt.n	80130a2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	68ba      	ldr	r2, [r7, #8]
 80130e0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d103      	bne.n	80130f2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2200      	movs	r2, #0
 80130ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80130f8:	2bff      	cmp	r3, #255	@ 0xff
 80130fa:	d007      	beq.n	801310c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013102:	3301      	adds	r3, #1
 8013104:	b2da      	uxtb	r2, r3
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2200      	movs	r2, #0
 8013110:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013112:	2300      	movs	r3, #0
}
 8013114:	4618      	mov	r0, r3
 8013116:	3714      	adds	r7, #20
 8013118:	46bd      	mov	sp, r7
 801311a:	bd90      	pop	{r4, r7, pc}
 801311c:	080198a0 	.word	0x080198a0
 8013120:	08019f40 	.word	0x08019f40
 8013124:	080198f4 	.word	0x080198f4

08013128 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d106      	bne.n	8013144 <tcp_rexmit_fast+0x1c>
 8013136:	4b2a      	ldr	r3, [pc, #168]	@ (80131e0 <tcp_rexmit_fast+0xb8>)
 8013138:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801313c:	4929      	ldr	r1, [pc, #164]	@ (80131e4 <tcp_rexmit_fast+0xbc>)
 801313e:	482a      	ldr	r0, [pc, #168]	@ (80131e8 <tcp_rexmit_fast+0xc0>)
 8013140:	f003 feac 	bl	8016e9c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013148:	2b00      	cmp	r3, #0
 801314a:	d045      	beq.n	80131d8 <tcp_rexmit_fast+0xb0>
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	8b5b      	ldrh	r3, [r3, #26]
 8013150:	f003 0304 	and.w	r3, r3, #4
 8013154:	2b00      	cmp	r3, #0
 8013156:	d13f      	bne.n	80131d8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7ff ff79 	bl	8013050 <tcp_rexmit>
 801315e:	4603      	mov	r3, r0
 8013160:	2b00      	cmp	r3, #0
 8013162:	d139      	bne.n	80131d8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013170:	4293      	cmp	r3, r2
 8013172:	bf28      	it	cs
 8013174:	4613      	movcs	r3, r2
 8013176:	b29b      	uxth	r3, r3
 8013178:	2b00      	cmp	r3, #0
 801317a:	da00      	bge.n	801317e <tcp_rexmit_fast+0x56>
 801317c:	3301      	adds	r3, #1
 801317e:	105b      	asrs	r3, r3, #1
 8013180:	b29a      	uxth	r2, r3
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801318e:	461a      	mov	r2, r3
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013194:	005b      	lsls	r3, r3, #1
 8013196:	429a      	cmp	r2, r3
 8013198:	d206      	bcs.n	80131a8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801319e:	005b      	lsls	r3, r3, #1
 80131a0:	b29a      	uxth	r2, r3
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131b2:	4619      	mov	r1, r3
 80131b4:	0049      	lsls	r1, r1, #1
 80131b6:	440b      	add	r3, r1
 80131b8:	b29b      	uxth	r3, r3
 80131ba:	4413      	add	r3, r2
 80131bc:	b29a      	uxth	r2, r3
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	8b5b      	ldrh	r3, [r3, #26]
 80131c8:	f043 0304 	orr.w	r3, r3, #4
 80131cc:	b29a      	uxth	r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2200      	movs	r2, #0
 80131d6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80131d8:	bf00      	nop
 80131da:	3708      	adds	r7, #8
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	080198a0 	.word	0x080198a0
 80131e4:	08019f58 	.word	0x08019f58
 80131e8:	080198f4 	.word	0x080198f4

080131ec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b086      	sub	sp, #24
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	607b      	str	r3, [r7, #4]
 80131f6:	460b      	mov	r3, r1
 80131f8:	817b      	strh	r3, [r7, #10]
 80131fa:	4613      	mov	r3, r2
 80131fc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80131fe:	897a      	ldrh	r2, [r7, #10]
 8013200:	893b      	ldrh	r3, [r7, #8]
 8013202:	4413      	add	r3, r2
 8013204:	b29b      	uxth	r3, r3
 8013206:	3314      	adds	r3, #20
 8013208:	b29b      	uxth	r3, r3
 801320a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801320e:	4619      	mov	r1, r3
 8013210:	2022      	movs	r0, #34	@ 0x22
 8013212:	f7fa fc0f 	bl	800da34 <pbuf_alloc>
 8013216:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d04d      	beq.n	80132ba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801321e:	897b      	ldrh	r3, [r7, #10]
 8013220:	3313      	adds	r3, #19
 8013222:	697a      	ldr	r2, [r7, #20]
 8013224:	8952      	ldrh	r2, [r2, #10]
 8013226:	4293      	cmp	r3, r2
 8013228:	db06      	blt.n	8013238 <tcp_output_alloc_header_common+0x4c>
 801322a:	4b26      	ldr	r3, [pc, #152]	@ (80132c4 <tcp_output_alloc_header_common+0xd8>)
 801322c:	f240 7223 	movw	r2, #1827	@ 0x723
 8013230:	4925      	ldr	r1, [pc, #148]	@ (80132c8 <tcp_output_alloc_header_common+0xdc>)
 8013232:	4826      	ldr	r0, [pc, #152]	@ (80132cc <tcp_output_alloc_header_common+0xe0>)
 8013234:	f003 fe32 	bl	8016e9c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	685b      	ldr	r3, [r3, #4]
 801323c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801323e:	8c3b      	ldrh	r3, [r7, #32]
 8013240:	4618      	mov	r0, r3
 8013242:	f7f9 faed 	bl	800c820 <lwip_htons>
 8013246:	4603      	mov	r3, r0
 8013248:	461a      	mov	r2, r3
 801324a:	693b      	ldr	r3, [r7, #16]
 801324c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801324e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013250:	4618      	mov	r0, r3
 8013252:	f7f9 fae5 	bl	800c820 <lwip_htons>
 8013256:	4603      	mov	r3, r0
 8013258:	461a      	mov	r2, r3
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	687a      	ldr	r2, [r7, #4]
 8013262:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013264:	68f8      	ldr	r0, [r7, #12]
 8013266:	f7f9 faf1 	bl	800c84c <lwip_htonl>
 801326a:	4602      	mov	r2, r0
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013270:	897b      	ldrh	r3, [r7, #10]
 8013272:	089b      	lsrs	r3, r3, #2
 8013274:	b29b      	uxth	r3, r3
 8013276:	3305      	adds	r3, #5
 8013278:	b29b      	uxth	r3, r3
 801327a:	031b      	lsls	r3, r3, #12
 801327c:	b29a      	uxth	r2, r3
 801327e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013282:	b29b      	uxth	r3, r3
 8013284:	4313      	orrs	r3, r2
 8013286:	b29b      	uxth	r3, r3
 8013288:	4618      	mov	r0, r3
 801328a:	f7f9 fac9 	bl	800c820 <lwip_htons>
 801328e:	4603      	mov	r3, r0
 8013290:	461a      	mov	r2, r3
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013296:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013298:	4618      	mov	r0, r3
 801329a:	f7f9 fac1 	bl	800c820 <lwip_htons>
 801329e:	4603      	mov	r3, r0
 80132a0:	461a      	mov	r2, r3
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	2200      	movs	r2, #0
 80132aa:	741a      	strb	r2, [r3, #16]
 80132ac:	2200      	movs	r2, #0
 80132ae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	2200      	movs	r2, #0
 80132b4:	749a      	strb	r2, [r3, #18]
 80132b6:	2200      	movs	r2, #0
 80132b8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80132ba:	697b      	ldr	r3, [r7, #20]
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3718      	adds	r7, #24
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	080198a0 	.word	0x080198a0
 80132c8:	08019f78 	.word	0x08019f78
 80132cc:	080198f4 	.word	0x080198f4

080132d0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80132d0:	b5b0      	push	{r4, r5, r7, lr}
 80132d2:	b08a      	sub	sp, #40	@ 0x28
 80132d4:	af04      	add	r7, sp, #16
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	607b      	str	r3, [r7, #4]
 80132da:	460b      	mov	r3, r1
 80132dc:	817b      	strh	r3, [r7, #10]
 80132de:	4613      	mov	r3, r2
 80132e0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d106      	bne.n	80132f6 <tcp_output_alloc_header+0x26>
 80132e8:	4b15      	ldr	r3, [pc, #84]	@ (8013340 <tcp_output_alloc_header+0x70>)
 80132ea:	f240 7242 	movw	r2, #1858	@ 0x742
 80132ee:	4915      	ldr	r1, [pc, #84]	@ (8013344 <tcp_output_alloc_header+0x74>)
 80132f0:	4815      	ldr	r0, [pc, #84]	@ (8013348 <tcp_output_alloc_header+0x78>)
 80132f2:	f003 fdd3 	bl	8016e9c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	8adb      	ldrh	r3, [r3, #22]
 80132fe:	68fa      	ldr	r2, [r7, #12]
 8013300:	8b12      	ldrh	r2, [r2, #24]
 8013302:	68f9      	ldr	r1, [r7, #12]
 8013304:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8013306:	893d      	ldrh	r5, [r7, #8]
 8013308:	897c      	ldrh	r4, [r7, #10]
 801330a:	9103      	str	r1, [sp, #12]
 801330c:	2110      	movs	r1, #16
 801330e:	9102      	str	r1, [sp, #8]
 8013310:	9201      	str	r2, [sp, #4]
 8013312:	9300      	str	r3, [sp, #0]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	462a      	mov	r2, r5
 8013318:	4621      	mov	r1, r4
 801331a:	f7ff ff67 	bl	80131ec <tcp_output_alloc_header_common>
 801331e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d006      	beq.n	8013334 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801332a:	68fa      	ldr	r2, [r7, #12]
 801332c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801332e:	441a      	add	r2, r3
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8013334:	697b      	ldr	r3, [r7, #20]
}
 8013336:	4618      	mov	r0, r3
 8013338:	3718      	adds	r7, #24
 801333a:	46bd      	mov	sp, r7
 801333c:	bdb0      	pop	{r4, r5, r7, pc}
 801333e:	bf00      	nop
 8013340:	080198a0 	.word	0x080198a0
 8013344:	08019fa8 	.word	0x08019fa8
 8013348:	080198f4 	.word	0x080198f4

0801334c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b088      	sub	sp, #32
 8013350:	af00      	add	r7, sp, #0
 8013352:	60f8      	str	r0, [r7, #12]
 8013354:	60b9      	str	r1, [r7, #8]
 8013356:	4611      	mov	r1, r2
 8013358:	461a      	mov	r2, r3
 801335a:	460b      	mov	r3, r1
 801335c:	71fb      	strb	r3, [r7, #7]
 801335e:	4613      	mov	r3, r2
 8013360:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013362:	2300      	movs	r3, #0
 8013364:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d106      	bne.n	801337a <tcp_output_fill_options+0x2e>
 801336c:	4b12      	ldr	r3, [pc, #72]	@ (80133b8 <tcp_output_fill_options+0x6c>)
 801336e:	f240 7256 	movw	r2, #1878	@ 0x756
 8013372:	4912      	ldr	r1, [pc, #72]	@ (80133bc <tcp_output_fill_options+0x70>)
 8013374:	4812      	ldr	r0, [pc, #72]	@ (80133c0 <tcp_output_fill_options+0x74>)
 8013376:	f003 fd91 	bl	8016e9c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013380:	69bb      	ldr	r3, [r7, #24]
 8013382:	3314      	adds	r3, #20
 8013384:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013386:	8bfb      	ldrh	r3, [r7, #30]
 8013388:	009b      	lsls	r3, r3, #2
 801338a:	461a      	mov	r2, r3
 801338c:	79fb      	ldrb	r3, [r7, #7]
 801338e:	009b      	lsls	r3, r3, #2
 8013390:	f003 0304 	and.w	r3, r3, #4
 8013394:	4413      	add	r3, r2
 8013396:	3314      	adds	r3, #20
 8013398:	69ba      	ldr	r2, [r7, #24]
 801339a:	4413      	add	r3, r2
 801339c:	697a      	ldr	r2, [r7, #20]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d006      	beq.n	80133b0 <tcp_output_fill_options+0x64>
 80133a2:	4b05      	ldr	r3, [pc, #20]	@ (80133b8 <tcp_output_fill_options+0x6c>)
 80133a4:	f240 7275 	movw	r2, #1909	@ 0x775
 80133a8:	4906      	ldr	r1, [pc, #24]	@ (80133c4 <tcp_output_fill_options+0x78>)
 80133aa:	4805      	ldr	r0, [pc, #20]	@ (80133c0 <tcp_output_fill_options+0x74>)
 80133ac:	f003 fd76 	bl	8016e9c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80133b0:	bf00      	nop
 80133b2:	3720      	adds	r7, #32
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}
 80133b8:	080198a0 	.word	0x080198a0
 80133bc:	08019fd0 	.word	0x08019fd0
 80133c0:	080198f4 	.word	0x080198f4
 80133c4:	08019ec8 	.word	0x08019ec8

080133c8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b08a      	sub	sp, #40	@ 0x28
 80133cc:	af04      	add	r7, sp, #16
 80133ce:	60f8      	str	r0, [r7, #12]
 80133d0:	60b9      	str	r1, [r7, #8]
 80133d2:	607a      	str	r2, [r7, #4]
 80133d4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d106      	bne.n	80133ea <tcp_output_control_segment+0x22>
 80133dc:	4b1c      	ldr	r3, [pc, #112]	@ (8013450 <tcp_output_control_segment+0x88>)
 80133de:	f240 7287 	movw	r2, #1927	@ 0x787
 80133e2:	491c      	ldr	r1, [pc, #112]	@ (8013454 <tcp_output_control_segment+0x8c>)
 80133e4:	481c      	ldr	r0, [pc, #112]	@ (8013458 <tcp_output_control_segment+0x90>)
 80133e6:	f003 fd59 	bl	8016e9c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80133ea:	683a      	ldr	r2, [r7, #0]
 80133ec:	6879      	ldr	r1, [r7, #4]
 80133ee:	68f8      	ldr	r0, [r7, #12]
 80133f0:	f7fe ff42 	bl	8012278 <tcp_route>
 80133f4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d102      	bne.n	8013402 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80133fc:	23fc      	movs	r3, #252	@ 0xfc
 80133fe:	75fb      	strb	r3, [r7, #23]
 8013400:	e01c      	b.n	801343c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d006      	beq.n	8013416 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	7adb      	ldrb	r3, [r3, #11]
 801340c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	7a9b      	ldrb	r3, [r3, #10]
 8013412:	757b      	strb	r3, [r7, #21]
 8013414:	e003      	b.n	801341e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013416:	23ff      	movs	r3, #255	@ 0xff
 8013418:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801341a:	2300      	movs	r3, #0
 801341c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801341e:	7dba      	ldrb	r2, [r7, #22]
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	9302      	str	r3, [sp, #8]
 8013424:	2306      	movs	r3, #6
 8013426:	9301      	str	r3, [sp, #4]
 8013428:	7d7b      	ldrb	r3, [r7, #21]
 801342a:	9300      	str	r3, [sp, #0]
 801342c:	4613      	mov	r3, r2
 801342e:	683a      	ldr	r2, [r7, #0]
 8013430:	6879      	ldr	r1, [r7, #4]
 8013432:	68b8      	ldr	r0, [r7, #8]
 8013434:	f002 f898 	bl	8015568 <ip4_output_if>
 8013438:	4603      	mov	r3, r0
 801343a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801343c:	68b8      	ldr	r0, [r7, #8]
 801343e:	f7fa fddd 	bl	800dffc <pbuf_free>
  return err;
 8013442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013446:	4618      	mov	r0, r3
 8013448:	3718      	adds	r7, #24
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	bf00      	nop
 8013450:	080198a0 	.word	0x080198a0
 8013454:	08019ff8 	.word	0x08019ff8
 8013458:	080198f4 	.word	0x080198f4

0801345c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801345c:	b590      	push	{r4, r7, lr}
 801345e:	b08b      	sub	sp, #44	@ 0x2c
 8013460:	af04      	add	r7, sp, #16
 8013462:	60f8      	str	r0, [r7, #12]
 8013464:	60b9      	str	r1, [r7, #8]
 8013466:	607a      	str	r2, [r7, #4]
 8013468:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d106      	bne.n	801347e <tcp_rst+0x22>
 8013470:	4b1f      	ldr	r3, [pc, #124]	@ (80134f0 <tcp_rst+0x94>)
 8013472:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8013476:	491f      	ldr	r1, [pc, #124]	@ (80134f4 <tcp_rst+0x98>)
 8013478:	481f      	ldr	r0, [pc, #124]	@ (80134f8 <tcp_rst+0x9c>)
 801347a:	f003 fd0f 	bl	8016e9c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801347e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013480:	2b00      	cmp	r3, #0
 8013482:	d106      	bne.n	8013492 <tcp_rst+0x36>
 8013484:	4b1a      	ldr	r3, [pc, #104]	@ (80134f0 <tcp_rst+0x94>)
 8013486:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801348a:	491c      	ldr	r1, [pc, #112]	@ (80134fc <tcp_rst+0xa0>)
 801348c:	481a      	ldr	r0, [pc, #104]	@ (80134f8 <tcp_rst+0x9c>)
 801348e:	f003 fd05 	bl	8016e9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013492:	2300      	movs	r3, #0
 8013494:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013496:	f246 0308 	movw	r3, #24584	@ 0x6008
 801349a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801349c:	7dfb      	ldrb	r3, [r7, #23]
 801349e:	b29c      	uxth	r4, r3
 80134a0:	68b8      	ldr	r0, [r7, #8]
 80134a2:	f7f9 f9d3 	bl	800c84c <lwip_htonl>
 80134a6:	4602      	mov	r2, r0
 80134a8:	8abb      	ldrh	r3, [r7, #20]
 80134aa:	9303      	str	r3, [sp, #12]
 80134ac:	2314      	movs	r3, #20
 80134ae:	9302      	str	r3, [sp, #8]
 80134b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80134b2:	9301      	str	r3, [sp, #4]
 80134b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80134b6:	9300      	str	r3, [sp, #0]
 80134b8:	4613      	mov	r3, r2
 80134ba:	2200      	movs	r2, #0
 80134bc:	4621      	mov	r1, r4
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f7ff fe94 	bl	80131ec <tcp_output_alloc_header_common>
 80134c4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d00c      	beq.n	80134e6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80134cc:	7dfb      	ldrb	r3, [r7, #23]
 80134ce:	2200      	movs	r2, #0
 80134d0:	6939      	ldr	r1, [r7, #16]
 80134d2:	68f8      	ldr	r0, [r7, #12]
 80134d4:	f7ff ff3a 	bl	801334c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80134d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134da:	683a      	ldr	r2, [r7, #0]
 80134dc:	6939      	ldr	r1, [r7, #16]
 80134de:	68f8      	ldr	r0, [r7, #12]
 80134e0:	f7ff ff72 	bl	80133c8 <tcp_output_control_segment>
 80134e4:	e000      	b.n	80134e8 <tcp_rst+0x8c>
    return;
 80134e6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80134e8:	371c      	adds	r7, #28
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd90      	pop	{r4, r7, pc}
 80134ee:	bf00      	nop
 80134f0:	080198a0 	.word	0x080198a0
 80134f4:	0801a024 	.word	0x0801a024
 80134f8:	080198f4 	.word	0x080198f4
 80134fc:	0801a040 	.word	0x0801a040

08013500 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013500:	b590      	push	{r4, r7, lr}
 8013502:	b087      	sub	sp, #28
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013508:	2300      	movs	r3, #0
 801350a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801350c:	2300      	movs	r3, #0
 801350e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d106      	bne.n	8013524 <tcp_send_empty_ack+0x24>
 8013516:	4b28      	ldr	r3, [pc, #160]	@ (80135b8 <tcp_send_empty_ack+0xb8>)
 8013518:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801351c:	4927      	ldr	r1, [pc, #156]	@ (80135bc <tcp_send_empty_ack+0xbc>)
 801351e:	4828      	ldr	r0, [pc, #160]	@ (80135c0 <tcp_send_empty_ack+0xc0>)
 8013520:	f003 fcbc 	bl	8016e9c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013524:	7dfb      	ldrb	r3, [r7, #23]
 8013526:	009b      	lsls	r3, r3, #2
 8013528:	b2db      	uxtb	r3, r3
 801352a:	f003 0304 	and.w	r3, r3, #4
 801352e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013530:	7d7b      	ldrb	r3, [r7, #21]
 8013532:	b29c      	uxth	r4, r3
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013538:	4618      	mov	r0, r3
 801353a:	f7f9 f987 	bl	800c84c <lwip_htonl>
 801353e:	4603      	mov	r3, r0
 8013540:	2200      	movs	r2, #0
 8013542:	4621      	mov	r1, r4
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f7ff fec3 	bl	80132d0 <tcp_output_alloc_header>
 801354a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d109      	bne.n	8013566 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	8b5b      	ldrh	r3, [r3, #26]
 8013556:	f043 0303 	orr.w	r3, r3, #3
 801355a:	b29a      	uxth	r2, r3
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013560:	f06f 0301 	mvn.w	r3, #1
 8013564:	e023      	b.n	80135ae <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013566:	7dbb      	ldrb	r3, [r7, #22]
 8013568:	7dfa      	ldrb	r2, [r7, #23]
 801356a:	6939      	ldr	r1, [r7, #16]
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	f7ff feed 	bl	801334c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	3304      	adds	r3, #4
 8013578:	6939      	ldr	r1, [r7, #16]
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f7ff ff24 	bl	80133c8 <tcp_output_control_segment>
 8013580:	4603      	mov	r3, r0
 8013582:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d007      	beq.n	801359c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	8b5b      	ldrh	r3, [r3, #26]
 8013590:	f043 0303 	orr.w	r3, r3, #3
 8013594:	b29a      	uxth	r2, r3
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	835a      	strh	r2, [r3, #26]
 801359a:	e006      	b.n	80135aa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	8b5b      	ldrh	r3, [r3, #26]
 80135a0:	f023 0303 	bic.w	r3, r3, #3
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80135aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	371c      	adds	r7, #28
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd90      	pop	{r4, r7, pc}
 80135b6:	bf00      	nop
 80135b8:	080198a0 	.word	0x080198a0
 80135bc:	0801a05c 	.word	0x0801a05c
 80135c0:	080198f4 	.word	0x080198f4

080135c4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80135c4:	b590      	push	{r4, r7, lr}
 80135c6:	b087      	sub	sp, #28
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80135cc:	2300      	movs	r3, #0
 80135ce:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d106      	bne.n	80135e4 <tcp_keepalive+0x20>
 80135d6:	4b18      	ldr	r3, [pc, #96]	@ (8013638 <tcp_keepalive+0x74>)
 80135d8:	f640 0224 	movw	r2, #2084	@ 0x824
 80135dc:	4917      	ldr	r1, [pc, #92]	@ (801363c <tcp_keepalive+0x78>)
 80135de:	4818      	ldr	r0, [pc, #96]	@ (8013640 <tcp_keepalive+0x7c>)
 80135e0:	f003 fc5c 	bl	8016e9c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80135e4:	7dfb      	ldrb	r3, [r7, #23]
 80135e6:	b29c      	uxth	r4, r3
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80135ec:	3b01      	subs	r3, #1
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7f9 f92c 	bl	800c84c <lwip_htonl>
 80135f4:	4603      	mov	r3, r0
 80135f6:	2200      	movs	r2, #0
 80135f8:	4621      	mov	r1, r4
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7ff fe68 	bl	80132d0 <tcp_output_alloc_header>
 8013600:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d102      	bne.n	801360e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013608:	f04f 33ff 	mov.w	r3, #4294967295
 801360c:	e010      	b.n	8013630 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801360e:	7dfb      	ldrb	r3, [r7, #23]
 8013610:	2200      	movs	r2, #0
 8013612:	6939      	ldr	r1, [r7, #16]
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f7ff fe99 	bl	801334c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801361a:	687a      	ldr	r2, [r7, #4]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	3304      	adds	r3, #4
 8013620:	6939      	ldr	r1, [r7, #16]
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f7ff fed0 	bl	80133c8 <tcp_output_control_segment>
 8013628:	4603      	mov	r3, r0
 801362a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801362c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013630:	4618      	mov	r0, r3
 8013632:	371c      	adds	r7, #28
 8013634:	46bd      	mov	sp, r7
 8013636:	bd90      	pop	{r4, r7, pc}
 8013638:	080198a0 	.word	0x080198a0
 801363c:	0801a07c 	.word	0x0801a07c
 8013640:	080198f4 	.word	0x080198f4

08013644 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013644:	b590      	push	{r4, r7, lr}
 8013646:	b08b      	sub	sp, #44	@ 0x2c
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801364c:	2300      	movs	r3, #0
 801364e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d106      	bne.n	8013666 <tcp_zero_window_probe+0x22>
 8013658:	4b4c      	ldr	r3, [pc, #304]	@ (801378c <tcp_zero_window_probe+0x148>)
 801365a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801365e:	494c      	ldr	r1, [pc, #304]	@ (8013790 <tcp_zero_window_probe+0x14c>)
 8013660:	484c      	ldr	r0, [pc, #304]	@ (8013794 <tcp_zero_window_probe+0x150>)
 8013662:	f003 fc1b 	bl	8016e9c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801366a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801366c:	6a3b      	ldr	r3, [r7, #32]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d101      	bne.n	8013676 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013672:	2300      	movs	r3, #0
 8013674:	e086      	b.n	8013784 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801367c:	2bff      	cmp	r3, #255	@ 0xff
 801367e:	d007      	beq.n	8013690 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013686:	3301      	adds	r3, #1
 8013688:	b2da      	uxtb	r2, r3
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013690:	6a3b      	ldr	r3, [r7, #32]
 8013692:	68db      	ldr	r3, [r3, #12]
 8013694:	899b      	ldrh	r3, [r3, #12]
 8013696:	b29b      	uxth	r3, r3
 8013698:	4618      	mov	r0, r3
 801369a:	f7f9 f8c1 	bl	800c820 <lwip_htons>
 801369e:	4603      	mov	r3, r0
 80136a0:	b2db      	uxtb	r3, r3
 80136a2:	f003 0301 	and.w	r3, r3, #1
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d005      	beq.n	80136b6 <tcp_zero_window_probe+0x72>
 80136aa:	6a3b      	ldr	r3, [r7, #32]
 80136ac:	891b      	ldrh	r3, [r3, #8]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d101      	bne.n	80136b6 <tcp_zero_window_probe+0x72>
 80136b2:	2301      	movs	r3, #1
 80136b4:	e000      	b.n	80136b8 <tcp_zero_window_probe+0x74>
 80136b6:	2300      	movs	r3, #0
 80136b8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80136ba:	7ffb      	ldrb	r3, [r7, #31]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	bf0c      	ite	eq
 80136c0:	2301      	moveq	r3, #1
 80136c2:	2300      	movne	r3, #0
 80136c4:	b2db      	uxtb	r3, r3
 80136c6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80136c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136cc:	b299      	uxth	r1, r3
 80136ce:	6a3b      	ldr	r3, [r7, #32]
 80136d0:	68db      	ldr	r3, [r3, #12]
 80136d2:	685b      	ldr	r3, [r3, #4]
 80136d4:	8bba      	ldrh	r2, [r7, #28]
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f7ff fdfa 	bl	80132d0 <tcp_output_alloc_header>
 80136dc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80136de:	69bb      	ldr	r3, [r7, #24]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d102      	bne.n	80136ea <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80136e4:	f04f 33ff 	mov.w	r3, #4294967295
 80136e8:	e04c      	b.n	8013784 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80136ea:	69bb      	ldr	r3, [r7, #24]
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80136f0:	7ffb      	ldrb	r3, [r7, #31]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d011      	beq.n	801371a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	899b      	ldrh	r3, [r3, #12]
 80136fa:	b29b      	uxth	r3, r3
 80136fc:	b21b      	sxth	r3, r3
 80136fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013702:	b21c      	sxth	r4, r3
 8013704:	2011      	movs	r0, #17
 8013706:	f7f9 f88b 	bl	800c820 <lwip_htons>
 801370a:	4603      	mov	r3, r0
 801370c:	b21b      	sxth	r3, r3
 801370e:	4323      	orrs	r3, r4
 8013710:	b21b      	sxth	r3, r3
 8013712:	b29a      	uxth	r2, r3
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	819a      	strh	r2, [r3, #12]
 8013718:	e010      	b.n	801373c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801371a:	69bb      	ldr	r3, [r7, #24]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	3314      	adds	r3, #20
 8013720:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013722:	6a3b      	ldr	r3, [r7, #32]
 8013724:	6858      	ldr	r0, [r3, #4]
 8013726:	6a3b      	ldr	r3, [r7, #32]
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	891a      	ldrh	r2, [r3, #8]
 801372c:	6a3b      	ldr	r3, [r7, #32]
 801372e:	891b      	ldrh	r3, [r3, #8]
 8013730:	1ad3      	subs	r3, r2, r3
 8013732:	b29b      	uxth	r3, r3
 8013734:	2201      	movs	r2, #1
 8013736:	6939      	ldr	r1, [r7, #16]
 8013738:	f7fa fe56 	bl	800e3e8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801373c:	6a3b      	ldr	r3, [r7, #32]
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	685b      	ldr	r3, [r3, #4]
 8013742:	4618      	mov	r0, r3
 8013744:	f7f9 f882 	bl	800c84c <lwip_htonl>
 8013748:	4603      	mov	r3, r0
 801374a:	3301      	adds	r3, #1
 801374c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	1ad3      	subs	r3, r2, r3
 8013756:	2b00      	cmp	r3, #0
 8013758:	da02      	bge.n	8013760 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	68fa      	ldr	r2, [r7, #12]
 801375e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013764:	2200      	movs	r2, #0
 8013766:	69b9      	ldr	r1, [r7, #24]
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f7ff fdef 	bl	801334c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801376e:	687a      	ldr	r2, [r7, #4]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	3304      	adds	r3, #4
 8013774:	69b9      	ldr	r1, [r7, #24]
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f7ff fe26 	bl	80133c8 <tcp_output_control_segment>
 801377c:	4603      	mov	r3, r0
 801377e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013780:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013784:	4618      	mov	r0, r3
 8013786:	372c      	adds	r7, #44	@ 0x2c
 8013788:	46bd      	mov	sp, r7
 801378a:	bd90      	pop	{r4, r7, pc}
 801378c:	080198a0 	.word	0x080198a0
 8013790:	0801a098 	.word	0x0801a098
 8013794:	080198f4 	.word	0x080198f4

08013798 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80137a0:	f7fa ff10 	bl	800e5c4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80137a4:	4b0a      	ldr	r3, [pc, #40]	@ (80137d0 <tcpip_tcp_timer+0x38>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d103      	bne.n	80137b4 <tcpip_tcp_timer+0x1c>
 80137ac:	4b09      	ldr	r3, [pc, #36]	@ (80137d4 <tcpip_tcp_timer+0x3c>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d005      	beq.n	80137c0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80137b4:	2200      	movs	r2, #0
 80137b6:	4908      	ldr	r1, [pc, #32]	@ (80137d8 <tcpip_tcp_timer+0x40>)
 80137b8:	20fa      	movs	r0, #250	@ 0xfa
 80137ba:	f000 f8f3 	bl	80139a4 <sys_timeout>
 80137be:	e003      	b.n	80137c8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80137c0:	4b06      	ldr	r3, [pc, #24]	@ (80137dc <tcpip_tcp_timer+0x44>)
 80137c2:	2200      	movs	r2, #0
 80137c4:	601a      	str	r2, [r3, #0]
  }
}
 80137c6:	bf00      	nop
 80137c8:	bf00      	nop
 80137ca:	3708      	adds	r7, #8
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}
 80137d0:	20027370 	.word	0x20027370
 80137d4:	20027374 	.word	0x20027374
 80137d8:	08013799 	.word	0x08013799
 80137dc:	200273bc 	.word	0x200273bc

080137e0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80137e4:	4b0a      	ldr	r3, [pc, #40]	@ (8013810 <tcp_timer_needed+0x30>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d10f      	bne.n	801380c <tcp_timer_needed+0x2c>
 80137ec:	4b09      	ldr	r3, [pc, #36]	@ (8013814 <tcp_timer_needed+0x34>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d103      	bne.n	80137fc <tcp_timer_needed+0x1c>
 80137f4:	4b08      	ldr	r3, [pc, #32]	@ (8013818 <tcp_timer_needed+0x38>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d007      	beq.n	801380c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80137fc:	4b04      	ldr	r3, [pc, #16]	@ (8013810 <tcp_timer_needed+0x30>)
 80137fe:	2201      	movs	r2, #1
 8013800:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013802:	2200      	movs	r2, #0
 8013804:	4905      	ldr	r1, [pc, #20]	@ (801381c <tcp_timer_needed+0x3c>)
 8013806:	20fa      	movs	r0, #250	@ 0xfa
 8013808:	f000 f8cc 	bl	80139a4 <sys_timeout>
  }
}
 801380c:	bf00      	nop
 801380e:	bd80      	pop	{r7, pc}
 8013810:	200273bc 	.word	0x200273bc
 8013814:	20027370 	.word	0x20027370
 8013818:	20027374 	.word	0x20027374
 801381c:	08013799 	.word	0x08013799

08013820 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b086      	sub	sp, #24
 8013824:	af00      	add	r7, sp, #0
 8013826:	60f8      	str	r0, [r7, #12]
 8013828:	60b9      	str	r1, [r7, #8]
 801382a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801382c:	200a      	movs	r0, #10
 801382e:	f7f9 fccb 	bl	800d1c8 <memp_malloc>
 8013832:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d109      	bne.n	801384e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801383a:	693b      	ldr	r3, [r7, #16]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d151      	bne.n	80138e4 <sys_timeout_abs+0xc4>
 8013840:	4b2a      	ldr	r3, [pc, #168]	@ (80138ec <sys_timeout_abs+0xcc>)
 8013842:	22be      	movs	r2, #190	@ 0xbe
 8013844:	492a      	ldr	r1, [pc, #168]	@ (80138f0 <sys_timeout_abs+0xd0>)
 8013846:	482b      	ldr	r0, [pc, #172]	@ (80138f4 <sys_timeout_abs+0xd4>)
 8013848:	f003 fb28 	bl	8016e9c <iprintf>
    return;
 801384c:	e04a      	b.n	80138e4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801384e:	693b      	ldr	r3, [r7, #16]
 8013850:	2200      	movs	r2, #0
 8013852:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	68ba      	ldr	r2, [r7, #8]
 8013858:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	687a      	ldr	r2, [r7, #4]
 801385e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	68fa      	ldr	r2, [r7, #12]
 8013864:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013866:	4b24      	ldr	r3, [pc, #144]	@ (80138f8 <sys_timeout_abs+0xd8>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d103      	bne.n	8013876 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801386e:	4a22      	ldr	r2, [pc, #136]	@ (80138f8 <sys_timeout_abs+0xd8>)
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	6013      	str	r3, [r2, #0]
    return;
 8013874:	e037      	b.n	80138e6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013876:	693b      	ldr	r3, [r7, #16]
 8013878:	685a      	ldr	r2, [r3, #4]
 801387a:	4b1f      	ldr	r3, [pc, #124]	@ (80138f8 <sys_timeout_abs+0xd8>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	685b      	ldr	r3, [r3, #4]
 8013880:	1ad3      	subs	r3, r2, r3
 8013882:	0fdb      	lsrs	r3, r3, #31
 8013884:	f003 0301 	and.w	r3, r3, #1
 8013888:	b2db      	uxtb	r3, r3
 801388a:	2b00      	cmp	r3, #0
 801388c:	d007      	beq.n	801389e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801388e:	4b1a      	ldr	r3, [pc, #104]	@ (80138f8 <sys_timeout_abs+0xd8>)
 8013890:	681a      	ldr	r2, [r3, #0]
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013896:	4a18      	ldr	r2, [pc, #96]	@ (80138f8 <sys_timeout_abs+0xd8>)
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	6013      	str	r3, [r2, #0]
 801389c:	e023      	b.n	80138e6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801389e:	4b16      	ldr	r3, [pc, #88]	@ (80138f8 <sys_timeout_abs+0xd8>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	617b      	str	r3, [r7, #20]
 80138a4:	e01a      	b.n	80138dc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d00b      	beq.n	80138c6 <sys_timeout_abs+0xa6>
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	685a      	ldr	r2, [r3, #4]
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	685b      	ldr	r3, [r3, #4]
 80138b8:	1ad3      	subs	r3, r2, r3
 80138ba:	0fdb      	lsrs	r3, r3, #31
 80138bc:	f003 0301 	and.w	r3, r3, #1
 80138c0:	b2db      	uxtb	r3, r3
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d007      	beq.n	80138d6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80138c6:	697b      	ldr	r3, [r7, #20]
 80138c8:	681a      	ldr	r2, [r3, #0]
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	693a      	ldr	r2, [r7, #16]
 80138d2:	601a      	str	r2, [r3, #0]
        break;
 80138d4:	e007      	b.n	80138e6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	617b      	str	r3, [r7, #20]
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d1e1      	bne.n	80138a6 <sys_timeout_abs+0x86>
 80138e2:	e000      	b.n	80138e6 <sys_timeout_abs+0xc6>
    return;
 80138e4:	bf00      	nop
      }
    }
  }
}
 80138e6:	3718      	adds	r7, #24
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	0801a0bc 	.word	0x0801a0bc
 80138f0:	0801a0f0 	.word	0x0801a0f0
 80138f4:	0801a130 	.word	0x0801a130
 80138f8:	200273b4 	.word	0x200273b4

080138fc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b086      	sub	sp, #24
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	685b      	ldr	r3, [r3, #4]
 801390c:	4798      	blx	r3

  now = sys_now();
 801390e:	f7f4 fadd 	bl	8007ecc <sys_now>
 8013912:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	681a      	ldr	r2, [r3, #0]
 8013918:	4b0f      	ldr	r3, [pc, #60]	@ (8013958 <lwip_cyclic_timer+0x5c>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	4413      	add	r3, r2
 801391e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013920:	68fa      	ldr	r2, [r7, #12]
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	1ad3      	subs	r3, r2, r3
 8013926:	0fdb      	lsrs	r3, r3, #31
 8013928:	f003 0301 	and.w	r3, r3, #1
 801392c:	b2db      	uxtb	r3, r3
 801392e:	2b00      	cmp	r3, #0
 8013930:	d009      	beq.n	8013946 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	4413      	add	r3, r2
 801393a:	687a      	ldr	r2, [r7, #4]
 801393c:	4907      	ldr	r1, [pc, #28]	@ (801395c <lwip_cyclic_timer+0x60>)
 801393e:	4618      	mov	r0, r3
 8013940:	f7ff ff6e 	bl	8013820 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013944:	e004      	b.n	8013950 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	4904      	ldr	r1, [pc, #16]	@ (801395c <lwip_cyclic_timer+0x60>)
 801394a:	68f8      	ldr	r0, [r7, #12]
 801394c:	f7ff ff68 	bl	8013820 <sys_timeout_abs>
}
 8013950:	bf00      	nop
 8013952:	3718      	adds	r7, #24
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}
 8013958:	200273b8 	.word	0x200273b8
 801395c:	080138fd 	.word	0x080138fd

08013960 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013966:	2301      	movs	r3, #1
 8013968:	607b      	str	r3, [r7, #4]
 801396a:	e00e      	b.n	801398a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801396c:	4a0b      	ldr	r2, [pc, #44]	@ (801399c <sys_timeouts_init+0x3c>)
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	00db      	lsls	r3, r3, #3
 8013978:	4a08      	ldr	r2, [pc, #32]	@ (801399c <sys_timeouts_init+0x3c>)
 801397a:	4413      	add	r3, r2
 801397c:	461a      	mov	r2, r3
 801397e:	4908      	ldr	r1, [pc, #32]	@ (80139a0 <sys_timeouts_init+0x40>)
 8013980:	f000 f810 	bl	80139a4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	3301      	adds	r3, #1
 8013988:	607b      	str	r3, [r7, #4]
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2b02      	cmp	r3, #2
 801398e:	d9ed      	bls.n	801396c <sys_timeouts_init+0xc>
  }
}
 8013990:	bf00      	nop
 8013992:	bf00      	nop
 8013994:	3708      	adds	r7, #8
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
 801399a:	bf00      	nop
 801399c:	0801af1c 	.word	0x0801af1c
 80139a0:	080138fd 	.word	0x080138fd

080139a4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b086      	sub	sp, #24
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	60f8      	str	r0, [r7, #12]
 80139ac:	60b9      	str	r1, [r7, #8]
 80139ae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80139b6:	d306      	bcc.n	80139c6 <sys_timeout+0x22>
 80139b8:	4b0a      	ldr	r3, [pc, #40]	@ (80139e4 <sys_timeout+0x40>)
 80139ba:	f240 1229 	movw	r2, #297	@ 0x129
 80139be:	490a      	ldr	r1, [pc, #40]	@ (80139e8 <sys_timeout+0x44>)
 80139c0:	480a      	ldr	r0, [pc, #40]	@ (80139ec <sys_timeout+0x48>)
 80139c2:	f003 fa6b 	bl	8016e9c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80139c6:	f7f4 fa81 	bl	8007ecc <sys_now>
 80139ca:	4602      	mov	r2, r0
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	4413      	add	r3, r2
 80139d0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	68b9      	ldr	r1, [r7, #8]
 80139d6:	6978      	ldr	r0, [r7, #20]
 80139d8:	f7ff ff22 	bl	8013820 <sys_timeout_abs>
#endif
}
 80139dc:	bf00      	nop
 80139de:	3718      	adds	r7, #24
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}
 80139e4:	0801a0bc 	.word	0x0801a0bc
 80139e8:	0801a158 	.word	0x0801a158
 80139ec:	0801a130 	.word	0x0801a130

080139f0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b084      	sub	sp, #16
 80139f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80139f6:	f7f4 fa69 	bl	8007ecc <sys_now>
 80139fa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80139fc:	4b17      	ldr	r3, [pc, #92]	@ (8013a5c <sys_check_timeouts+0x6c>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d022      	beq.n	8013a4e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	68fa      	ldr	r2, [r7, #12]
 8013a0e:	1ad3      	subs	r3, r2, r3
 8013a10:	0fdb      	lsrs	r3, r3, #31
 8013a12:	f003 0301 	and.w	r3, r3, #1
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d11a      	bne.n	8013a52 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	4a0e      	ldr	r2, [pc, #56]	@ (8013a5c <sys_check_timeouts+0x6c>)
 8013a22:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	689b      	ldr	r3, [r3, #8]
 8013a28:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013a2a:	68bb      	ldr	r3, [r7, #8]
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	4a0a      	ldr	r2, [pc, #40]	@ (8013a60 <sys_check_timeouts+0x70>)
 8013a36:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013a38:	68b9      	ldr	r1, [r7, #8]
 8013a3a:	200a      	movs	r0, #10
 8013a3c:	f7f9 fc3a 	bl	800d2b4 <memp_free>
    if (handler != NULL) {
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d0da      	beq.n	80139fc <sys_check_timeouts+0xc>
      handler(arg);
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6838      	ldr	r0, [r7, #0]
 8013a4a:	4798      	blx	r3
  do {
 8013a4c:	e7d6      	b.n	80139fc <sys_check_timeouts+0xc>
      return;
 8013a4e:	bf00      	nop
 8013a50:	e000      	b.n	8013a54 <sys_check_timeouts+0x64>
      return;
 8013a52:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013a54:	3710      	adds	r7, #16
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	200273b4 	.word	0x200273b4
 8013a60:	200273b8 	.word	0x200273b8

08013a64 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b082      	sub	sp, #8
 8013a68:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013a6a:	4b16      	ldr	r3, [pc, #88]	@ (8013ac4 <sys_timeouts_sleeptime+0x60>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d102      	bne.n	8013a78 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013a72:	f04f 33ff 	mov.w	r3, #4294967295
 8013a76:	e020      	b.n	8013aba <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013a78:	f7f4 fa28 	bl	8007ecc <sys_now>
 8013a7c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013a7e:	4b11      	ldr	r3, [pc, #68]	@ (8013ac4 <sys_timeouts_sleeptime+0x60>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	685a      	ldr	r2, [r3, #4]
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	1ad3      	subs	r3, r2, r3
 8013a88:	0fdb      	lsrs	r3, r3, #31
 8013a8a:	f003 0301 	and.w	r3, r3, #1
 8013a8e:	b2db      	uxtb	r3, r3
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d001      	beq.n	8013a98 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013a94:	2300      	movs	r3, #0
 8013a96:	e010      	b.n	8013aba <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013a98:	4b0a      	ldr	r3, [pc, #40]	@ (8013ac4 <sys_timeouts_sleeptime+0x60>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	685a      	ldr	r2, [r3, #4]
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	1ad3      	subs	r3, r2, r3
 8013aa2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	da06      	bge.n	8013ab8 <sys_timeouts_sleeptime+0x54>
 8013aaa:	4b07      	ldr	r3, [pc, #28]	@ (8013ac8 <sys_timeouts_sleeptime+0x64>)
 8013aac:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013ab0:	4906      	ldr	r1, [pc, #24]	@ (8013acc <sys_timeouts_sleeptime+0x68>)
 8013ab2:	4807      	ldr	r0, [pc, #28]	@ (8013ad0 <sys_timeouts_sleeptime+0x6c>)
 8013ab4:	f003 f9f2 	bl	8016e9c <iprintf>
    return ret;
 8013ab8:	683b      	ldr	r3, [r7, #0]
  }
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	3708      	adds	r7, #8
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}
 8013ac2:	bf00      	nop
 8013ac4:	200273b4 	.word	0x200273b4
 8013ac8:	0801a0bc 	.word	0x0801a0bc
 8013acc:	0801a190 	.word	0x0801a190
 8013ad0:	0801a130 	.word	0x0801a130

08013ad4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013ad8:	f003 f8e0 	bl	8016c9c <rand>
 8013adc:	4603      	mov	r3, r0
 8013ade:	b29b      	uxth	r3, r3
 8013ae0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013ae4:	b29b      	uxth	r3, r3
 8013ae6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013aea:	b29a      	uxth	r2, r3
 8013aec:	4b01      	ldr	r3, [pc, #4]	@ (8013af4 <udp_init+0x20>)
 8013aee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013af0:	bf00      	nop
 8013af2:	bd80      	pop	{r7, pc}
 8013af4:	2000002c 	.word	0x2000002c

08013af8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013af8:	b480      	push	{r7}
 8013afa:	b083      	sub	sp, #12
 8013afc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013afe:	2300      	movs	r3, #0
 8013b00:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013b02:	4b17      	ldr	r3, [pc, #92]	@ (8013b60 <udp_new_port+0x68>)
 8013b04:	881b      	ldrh	r3, [r3, #0]
 8013b06:	1c5a      	adds	r2, r3, #1
 8013b08:	b291      	uxth	r1, r2
 8013b0a:	4a15      	ldr	r2, [pc, #84]	@ (8013b60 <udp_new_port+0x68>)
 8013b0c:	8011      	strh	r1, [r2, #0]
 8013b0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013b12:	4293      	cmp	r3, r2
 8013b14:	d103      	bne.n	8013b1e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013b16:	4b12      	ldr	r3, [pc, #72]	@ (8013b60 <udp_new_port+0x68>)
 8013b18:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013b1c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b1e:	4b11      	ldr	r3, [pc, #68]	@ (8013b64 <udp_new_port+0x6c>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	603b      	str	r3, [r7, #0]
 8013b24:	e011      	b.n	8013b4a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	8a5a      	ldrh	r2, [r3, #18]
 8013b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8013b60 <udp_new_port+0x68>)
 8013b2c:	881b      	ldrh	r3, [r3, #0]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d108      	bne.n	8013b44 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013b32:	88fb      	ldrh	r3, [r7, #6]
 8013b34:	3301      	adds	r3, #1
 8013b36:	80fb      	strh	r3, [r7, #6]
 8013b38:	88fb      	ldrh	r3, [r7, #6]
 8013b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013b3e:	d3e0      	bcc.n	8013b02 <udp_new_port+0xa>
        return 0;
 8013b40:	2300      	movs	r3, #0
 8013b42:	e007      	b.n	8013b54 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	68db      	ldr	r3, [r3, #12]
 8013b48:	603b      	str	r3, [r7, #0]
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d1ea      	bne.n	8013b26 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013b50:	4b03      	ldr	r3, [pc, #12]	@ (8013b60 <udp_new_port+0x68>)
 8013b52:	881b      	ldrh	r3, [r3, #0]
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	370c      	adds	r7, #12
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr
 8013b60:	2000002c 	.word	0x2000002c
 8013b64:	200273c0 	.word	0x200273c0

08013b68 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b084      	sub	sp, #16
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	60f8      	str	r0, [r7, #12]
 8013b70:	60b9      	str	r1, [r7, #8]
 8013b72:	4613      	mov	r3, r2
 8013b74:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d105      	bne.n	8013b88 <udp_input_local_match+0x20>
 8013b7c:	4b27      	ldr	r3, [pc, #156]	@ (8013c1c <udp_input_local_match+0xb4>)
 8013b7e:	2287      	movs	r2, #135	@ 0x87
 8013b80:	4927      	ldr	r1, [pc, #156]	@ (8013c20 <udp_input_local_match+0xb8>)
 8013b82:	4828      	ldr	r0, [pc, #160]	@ (8013c24 <udp_input_local_match+0xbc>)
 8013b84:	f003 f98a 	bl	8016e9c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d105      	bne.n	8013b9a <udp_input_local_match+0x32>
 8013b8e:	4b23      	ldr	r3, [pc, #140]	@ (8013c1c <udp_input_local_match+0xb4>)
 8013b90:	2288      	movs	r2, #136	@ 0x88
 8013b92:	4925      	ldr	r1, [pc, #148]	@ (8013c28 <udp_input_local_match+0xc0>)
 8013b94:	4823      	ldr	r0, [pc, #140]	@ (8013c24 <udp_input_local_match+0xbc>)
 8013b96:	f003 f981 	bl	8016e9c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	7a1b      	ldrb	r3, [r3, #8]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d00b      	beq.n	8013bba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	7a1a      	ldrb	r2, [r3, #8]
 8013ba6:	4b21      	ldr	r3, [pc, #132]	@ (8013c2c <udp_input_local_match+0xc4>)
 8013ba8:	685b      	ldr	r3, [r3, #4]
 8013baa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013bae:	3301      	adds	r3, #1
 8013bb0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	d001      	beq.n	8013bba <udp_input_local_match+0x52>
    return 0;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	e02b      	b.n	8013c12 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013bba:	79fb      	ldrb	r3, [r7, #7]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d018      	beq.n	8013bf2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d013      	beq.n	8013bee <udp_input_local_match+0x86>
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d00f      	beq.n	8013bee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013bce:	4b17      	ldr	r3, [pc, #92]	@ (8013c2c <udp_input_local_match+0xc4>)
 8013bd0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bd6:	d00a      	beq.n	8013bee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	4b13      	ldr	r3, [pc, #76]	@ (8013c2c <udp_input_local_match+0xc4>)
 8013bde:	695b      	ldr	r3, [r3, #20]
 8013be0:	405a      	eors	r2, r3
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	3308      	adds	r3, #8
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d110      	bne.n	8013c10 <udp_input_local_match+0xa8>
          return 1;
 8013bee:	2301      	movs	r3, #1
 8013bf0:	e00f      	b.n	8013c12 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d009      	beq.n	8013c0c <udp_input_local_match+0xa4>
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d005      	beq.n	8013c0c <udp_input_local_match+0xa4>
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	681a      	ldr	r2, [r3, #0]
 8013c04:	4b09      	ldr	r3, [pc, #36]	@ (8013c2c <udp_input_local_match+0xc4>)
 8013c06:	695b      	ldr	r3, [r3, #20]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d101      	bne.n	8013c10 <udp_input_local_match+0xa8>
        return 1;
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	e000      	b.n	8013c12 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013c10:	2300      	movs	r3, #0
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3710      	adds	r7, #16
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}
 8013c1a:	bf00      	nop
 8013c1c:	0801a1a4 	.word	0x0801a1a4
 8013c20:	0801a1d4 	.word	0x0801a1d4
 8013c24:	0801a1f8 	.word	0x0801a1f8
 8013c28:	0801a220 	.word	0x0801a220
 8013c2c:	20024264 	.word	0x20024264

08013c30 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013c30:	b590      	push	{r4, r7, lr}
 8013c32:	b08d      	sub	sp, #52	@ 0x34
 8013c34:	af02      	add	r7, sp, #8
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d105      	bne.n	8013c50 <udp_input+0x20>
 8013c44:	4b7c      	ldr	r3, [pc, #496]	@ (8013e38 <udp_input+0x208>)
 8013c46:	22cf      	movs	r2, #207	@ 0xcf
 8013c48:	497c      	ldr	r1, [pc, #496]	@ (8013e3c <udp_input+0x20c>)
 8013c4a:	487d      	ldr	r0, [pc, #500]	@ (8013e40 <udp_input+0x210>)
 8013c4c:	f003 f926 	bl	8016e9c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d105      	bne.n	8013c62 <udp_input+0x32>
 8013c56:	4b78      	ldr	r3, [pc, #480]	@ (8013e38 <udp_input+0x208>)
 8013c58:	22d0      	movs	r2, #208	@ 0xd0
 8013c5a:	497a      	ldr	r1, [pc, #488]	@ (8013e44 <udp_input+0x214>)
 8013c5c:	4878      	ldr	r0, [pc, #480]	@ (8013e40 <udp_input+0x210>)
 8013c5e:	f003 f91d 	bl	8016e9c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	895b      	ldrh	r3, [r3, #10]
 8013c66:	2b07      	cmp	r3, #7
 8013c68:	d803      	bhi.n	8013c72 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f7fa f9c6 	bl	800dffc <pbuf_free>
    goto end;
 8013c70:	e0de      	b.n	8013e30 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	685b      	ldr	r3, [r3, #4]
 8013c76:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013c78:	4b73      	ldr	r3, [pc, #460]	@ (8013e48 <udp_input+0x218>)
 8013c7a:	695b      	ldr	r3, [r3, #20]
 8013c7c:	4a72      	ldr	r2, [pc, #456]	@ (8013e48 <udp_input+0x218>)
 8013c7e:	6812      	ldr	r2, [r2, #0]
 8013c80:	4611      	mov	r1, r2
 8013c82:	4618      	mov	r0, r3
 8013c84:	f001 fd48 	bl	8015718 <ip4_addr_isbroadcast_u32>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	881b      	ldrh	r3, [r3, #0]
 8013c90:	b29b      	uxth	r3, r3
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7f8 fdc4 	bl	800c820 <lwip_htons>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013c9c:	697b      	ldr	r3, [r7, #20]
 8013c9e:	885b      	ldrh	r3, [r3, #2]
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f7f8 fdbc 	bl	800c820 <lwip_htons>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013cac:	2300      	movs	r3, #0
 8013cae:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cb8:	4b64      	ldr	r3, [pc, #400]	@ (8013e4c <udp_input+0x21c>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8013cbe:	e054      	b.n	8013d6a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc2:	8a5b      	ldrh	r3, [r3, #18]
 8013cc4:	89fa      	ldrh	r2, [r7, #14]
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d14a      	bne.n	8013d60 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013cca:	7cfb      	ldrb	r3, [r7, #19]
 8013ccc:	461a      	mov	r2, r3
 8013cce:	6839      	ldr	r1, [r7, #0]
 8013cd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013cd2:	f7ff ff49 	bl	8013b68 <udp_input_local_match>
 8013cd6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d041      	beq.n	8013d60 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cde:	7c1b      	ldrb	r3, [r3, #16]
 8013ce0:	f003 0304 	and.w	r3, r3, #4
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d11d      	bne.n	8013d24 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d102      	bne.n	8013cf4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cf0:	61fb      	str	r3, [r7, #28]
 8013cf2:	e017      	b.n	8013d24 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013cf4:	7cfb      	ldrb	r3, [r7, #19]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d014      	beq.n	8013d24 <udp_input+0xf4>
 8013cfa:	4b53      	ldr	r3, [pc, #332]	@ (8013e48 <udp_input+0x218>)
 8013cfc:	695b      	ldr	r3, [r3, #20]
 8013cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d02:	d10f      	bne.n	8013d24 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	681a      	ldr	r2, [r3, #0]
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	3304      	adds	r3, #4
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d008      	beq.n	8013d24 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d14:	681a      	ldr	r2, [r3, #0]
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	3304      	adds	r3, #4
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d101      	bne.n	8013d24 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d22:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d26:	8a9b      	ldrh	r3, [r3, #20]
 8013d28:	8a3a      	ldrh	r2, [r7, #16]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d118      	bne.n	8013d60 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d30:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d005      	beq.n	8013d42 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d38:	685a      	ldr	r2, [r3, #4]
 8013d3a:	4b43      	ldr	r3, [pc, #268]	@ (8013e48 <udp_input+0x218>)
 8013d3c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d10e      	bne.n	8013d60 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013d42:	6a3b      	ldr	r3, [r7, #32]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d014      	beq.n	8013d72 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d4a:	68da      	ldr	r2, [r3, #12]
 8013d4c:	6a3b      	ldr	r3, [r7, #32]
 8013d4e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013d50:	4b3e      	ldr	r3, [pc, #248]	@ (8013e4c <udp_input+0x21c>)
 8013d52:	681a      	ldr	r2, [r3, #0]
 8013d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d56:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013d58:	4a3c      	ldr	r2, [pc, #240]	@ (8013e4c <udp_input+0x21c>)
 8013d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d5c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013d5e:	e008      	b.n	8013d72 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d62:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d1a7      	bne.n	8013cc0 <udp_input+0x90>
 8013d70:	e000      	b.n	8013d74 <udp_input+0x144>
        break;
 8013d72:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d101      	bne.n	8013d7e <udp_input+0x14e>
    pcb = uncon_pcb;
 8013d7a:	69fb      	ldr	r3, [r7, #28]
 8013d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d002      	beq.n	8013d8a <udp_input+0x15a>
    for_us = 1;
 8013d84:	2301      	movs	r3, #1
 8013d86:	76fb      	strb	r3, [r7, #27]
 8013d88:	e00a      	b.n	8013da0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	3304      	adds	r3, #4
 8013d8e:	681a      	ldr	r2, [r3, #0]
 8013d90:	4b2d      	ldr	r3, [pc, #180]	@ (8013e48 <udp_input+0x218>)
 8013d92:	695b      	ldr	r3, [r3, #20]
 8013d94:	429a      	cmp	r2, r3
 8013d96:	bf0c      	ite	eq
 8013d98:	2301      	moveq	r3, #1
 8013d9a:	2300      	movne	r3, #0
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013da0:	7efb      	ldrb	r3, [r7, #27]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d041      	beq.n	8013e2a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013da6:	2108      	movs	r1, #8
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f7fa f8a1 	bl	800def0 <pbuf_remove_header>
 8013dae:	4603      	mov	r3, r0
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d00a      	beq.n	8013dca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013db4:	4b20      	ldr	r3, [pc, #128]	@ (8013e38 <udp_input+0x208>)
 8013db6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013dba:	4925      	ldr	r1, [pc, #148]	@ (8013e50 <udp_input+0x220>)
 8013dbc:	4820      	ldr	r0, [pc, #128]	@ (8013e40 <udp_input+0x210>)
 8013dbe:	f003 f86d 	bl	8016e9c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013dc2:	6878      	ldr	r0, [r7, #4]
 8013dc4:	f7fa f91a 	bl	800dffc <pbuf_free>
      goto end;
 8013dc8:	e032      	b.n	8013e30 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d012      	beq.n	8013df6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dd2:	699b      	ldr	r3, [r3, #24]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d00a      	beq.n	8013dee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dda:	699c      	ldr	r4, [r3, #24]
 8013ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dde:	69d8      	ldr	r0, [r3, #28]
 8013de0:	8a3b      	ldrh	r3, [r7, #16]
 8013de2:	9300      	str	r3, [sp, #0]
 8013de4:	4b1b      	ldr	r3, [pc, #108]	@ (8013e54 <udp_input+0x224>)
 8013de6:	687a      	ldr	r2, [r7, #4]
 8013de8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013dea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013dec:	e021      	b.n	8013e32 <udp_input+0x202>
        pbuf_free(p);
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f7fa f904 	bl	800dffc <pbuf_free>
        goto end;
 8013df4:	e01c      	b.n	8013e30 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013df6:	7cfb      	ldrb	r3, [r7, #19]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d112      	bne.n	8013e22 <udp_input+0x1f2>
 8013dfc:	4b12      	ldr	r3, [pc, #72]	@ (8013e48 <udp_input+0x218>)
 8013dfe:	695b      	ldr	r3, [r3, #20]
 8013e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013e04:	2be0      	cmp	r3, #224	@ 0xe0
 8013e06:	d00c      	beq.n	8013e22 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013e08:	4b0f      	ldr	r3, [pc, #60]	@ (8013e48 <udp_input+0x218>)
 8013e0a:	899b      	ldrh	r3, [r3, #12]
 8013e0c:	3308      	adds	r3, #8
 8013e0e:	b29b      	uxth	r3, r3
 8013e10:	b21b      	sxth	r3, r3
 8013e12:	4619      	mov	r1, r3
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f7fa f8de 	bl	800dfd6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013e1a:	2103      	movs	r1, #3
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f001 f95b 	bl	80150d8 <icmp_dest_unreach>
      pbuf_free(p);
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f7fa f8ea 	bl	800dffc <pbuf_free>
  return;
 8013e28:	e003      	b.n	8013e32 <udp_input+0x202>
    pbuf_free(p);
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f7fa f8e6 	bl	800dffc <pbuf_free>
  return;
 8013e30:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013e32:	372c      	adds	r7, #44	@ 0x2c
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd90      	pop	{r4, r7, pc}
 8013e38:	0801a1a4 	.word	0x0801a1a4
 8013e3c:	0801a248 	.word	0x0801a248
 8013e40:	0801a1f8 	.word	0x0801a1f8
 8013e44:	0801a260 	.word	0x0801a260
 8013e48:	20024264 	.word	0x20024264
 8013e4c:	200273c0 	.word	0x200273c0
 8013e50:	0801a27c 	.word	0x0801a27c
 8013e54:	20024274 	.word	0x20024274

08013e58 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b086      	sub	sp, #24
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	60f8      	str	r0, [r7, #12]
 8013e60:	60b9      	str	r1, [r7, #8]
 8013e62:	4613      	mov	r3, r2
 8013e64:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d101      	bne.n	8013e70 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013e6c:	4b39      	ldr	r3, [pc, #228]	@ (8013f54 <udp_bind+0xfc>)
 8013e6e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d109      	bne.n	8013e8a <udp_bind+0x32>
 8013e76:	4b38      	ldr	r3, [pc, #224]	@ (8013f58 <udp_bind+0x100>)
 8013e78:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013e7c:	4937      	ldr	r1, [pc, #220]	@ (8013f5c <udp_bind+0x104>)
 8013e7e:	4838      	ldr	r0, [pc, #224]	@ (8013f60 <udp_bind+0x108>)
 8013e80:	f003 f80c 	bl	8016e9c <iprintf>
 8013e84:	f06f 030f 	mvn.w	r3, #15
 8013e88:	e060      	b.n	8013f4c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e8e:	4b35      	ldr	r3, [pc, #212]	@ (8013f64 <udp_bind+0x10c>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	617b      	str	r3, [r7, #20]
 8013e94:	e009      	b.n	8013eaa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013e96:	68fa      	ldr	r2, [r7, #12]
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d102      	bne.n	8013ea4 <udp_bind+0x4c>
      rebind = 1;
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8013ea2:	e005      	b.n	8013eb0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	68db      	ldr	r3, [r3, #12]
 8013ea8:	617b      	str	r3, [r7, #20]
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d1f2      	bne.n	8013e96 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013eb0:	88fb      	ldrh	r3, [r7, #6]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d109      	bne.n	8013eca <udp_bind+0x72>
    port = udp_new_port();
 8013eb6:	f7ff fe1f 	bl	8013af8 <udp_new_port>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013ebe:	88fb      	ldrh	r3, [r7, #6]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d12c      	bne.n	8013f1e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013ec4:	f06f 0307 	mvn.w	r3, #7
 8013ec8:	e040      	b.n	8013f4c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013eca:	4b26      	ldr	r3, [pc, #152]	@ (8013f64 <udp_bind+0x10c>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	617b      	str	r3, [r7, #20]
 8013ed0:	e022      	b.n	8013f18 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013ed2:	68fa      	ldr	r2, [r7, #12]
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d01b      	beq.n	8013f12 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	8a5b      	ldrh	r3, [r3, #18]
 8013ede:	88fa      	ldrh	r2, [r7, #6]
 8013ee0:	429a      	cmp	r2, r3
 8013ee2:	d116      	bne.n	8013f12 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	681a      	ldr	r2, [r3, #0]
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013eec:	429a      	cmp	r2, r3
 8013eee:	d00d      	beq.n	8013f0c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d00a      	beq.n	8013f0c <udp_bind+0xb4>
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d006      	beq.n	8013f0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013efe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d003      	beq.n	8013f0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d102      	bne.n	8013f12 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013f0c:	f06f 0307 	mvn.w	r3, #7
 8013f10:	e01c      	b.n	8013f4c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	68db      	ldr	r3, [r3, #12]
 8013f16:	617b      	str	r3, [r7, #20]
 8013f18:	697b      	ldr	r3, [r7, #20]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d1d9      	bne.n	8013ed2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d002      	beq.n	8013f2a <udp_bind+0xd2>
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	e000      	b.n	8013f2c <udp_bind+0xd4>
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	68fa      	ldr	r2, [r7, #12]
 8013f2e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	88fa      	ldrh	r2, [r7, #6]
 8013f34:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013f36:	7cfb      	ldrb	r3, [r7, #19]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d106      	bne.n	8013f4a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013f3c:	4b09      	ldr	r3, [pc, #36]	@ (8013f64 <udp_bind+0x10c>)
 8013f3e:	681a      	ldr	r2, [r3, #0]
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013f44:	4a07      	ldr	r2, [pc, #28]	@ (8013f64 <udp_bind+0x10c>)
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013f4a:	2300      	movs	r3, #0
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3718      	adds	r7, #24
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	0801af34 	.word	0x0801af34
 8013f58:	0801a1a4 	.word	0x0801a1a4
 8013f5c:	0801a46c 	.word	0x0801a46c
 8013f60:	0801a1f8 	.word	0x0801a1f8
 8013f64:	200273c0 	.word	0x200273c0

08013f68 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b084      	sub	sp, #16
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	60b9      	str	r1, [r7, #8]
 8013f72:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d107      	bne.n	8013f8a <udp_recv+0x22>
 8013f7a:	4b08      	ldr	r3, [pc, #32]	@ (8013f9c <udp_recv+0x34>)
 8013f7c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013f80:	4907      	ldr	r1, [pc, #28]	@ (8013fa0 <udp_recv+0x38>)
 8013f82:	4808      	ldr	r0, [pc, #32]	@ (8013fa4 <udp_recv+0x3c>)
 8013f84:	f002 ff8a 	bl	8016e9c <iprintf>
 8013f88:	e005      	b.n	8013f96 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	68ba      	ldr	r2, [r7, #8]
 8013f8e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	61da      	str	r2, [r3, #28]
}
 8013f96:	3710      	adds	r7, #16
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bd80      	pop	{r7, pc}
 8013f9c:	0801a1a4 	.word	0x0801a1a4
 8013fa0:	0801a4d8 	.word	0x0801a4d8
 8013fa4:	0801a1f8 	.word	0x0801a1f8

08013fa8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013fae:	2000      	movs	r0, #0
 8013fb0:	f7f9 f90a 	bl	800d1c8 <memp_malloc>
 8013fb4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d007      	beq.n	8013fcc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013fbc:	2220      	movs	r2, #32
 8013fbe:	2100      	movs	r1, #0
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f003 f8c3 	bl	801714c <memset>
    pcb->ttl = UDP_TTL;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	22ff      	movs	r2, #255	@ 0xff
 8013fca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013fcc:	687b      	ldr	r3, [r7, #4]
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3708      	adds	r7, #8
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
	...

08013fd8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013fd8:	b480      	push	{r7}
 8013fda:	b085      	sub	sp, #20
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d01e      	beq.n	8014026 <udp_netif_ip_addr_changed+0x4e>
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d01a      	beq.n	8014026 <udp_netif_ip_addr_changed+0x4e>
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d017      	beq.n	8014026 <udp_netif_ip_addr_changed+0x4e>
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d013      	beq.n	8014026 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8014034 <udp_netif_ip_addr_changed+0x5c>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	60fb      	str	r3, [r7, #12]
 8014004:	e00c      	b.n	8014020 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	681a      	ldr	r2, [r3, #0]
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	429a      	cmp	r2, r3
 8014010:	d103      	bne.n	801401a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	681a      	ldr	r2, [r3, #0]
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	68db      	ldr	r3, [r3, #12]
 801401e:	60fb      	str	r3, [r7, #12]
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d1ef      	bne.n	8014006 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014026:	bf00      	nop
 8014028:	3714      	adds	r7, #20
 801402a:	46bd      	mov	sp, r7
 801402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014030:	4770      	bx	lr
 8014032:	bf00      	nop
 8014034:	200273c0 	.word	0x200273c0

08014038 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014040:	4915      	ldr	r1, [pc, #84]	@ (8014098 <etharp_free_entry+0x60>)
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	4613      	mov	r3, r2
 8014046:	005b      	lsls	r3, r3, #1
 8014048:	4413      	add	r3, r2
 801404a:	00db      	lsls	r3, r3, #3
 801404c:	440b      	add	r3, r1
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d013      	beq.n	801407c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014054:	4910      	ldr	r1, [pc, #64]	@ (8014098 <etharp_free_entry+0x60>)
 8014056:	687a      	ldr	r2, [r7, #4]
 8014058:	4613      	mov	r3, r2
 801405a:	005b      	lsls	r3, r3, #1
 801405c:	4413      	add	r3, r2
 801405e:	00db      	lsls	r3, r3, #3
 8014060:	440b      	add	r3, r1
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	4618      	mov	r0, r3
 8014066:	f7f9 ffc9 	bl	800dffc <pbuf_free>
    arp_table[i].q = NULL;
 801406a:	490b      	ldr	r1, [pc, #44]	@ (8014098 <etharp_free_entry+0x60>)
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	4613      	mov	r3, r2
 8014070:	005b      	lsls	r3, r3, #1
 8014072:	4413      	add	r3, r2
 8014074:	00db      	lsls	r3, r3, #3
 8014076:	440b      	add	r3, r1
 8014078:	2200      	movs	r2, #0
 801407a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801407c:	4906      	ldr	r1, [pc, #24]	@ (8014098 <etharp_free_entry+0x60>)
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	4613      	mov	r3, r2
 8014082:	005b      	lsls	r3, r3, #1
 8014084:	4413      	add	r3, r2
 8014086:	00db      	lsls	r3, r3, #3
 8014088:	440b      	add	r3, r1
 801408a:	3314      	adds	r3, #20
 801408c:	2200      	movs	r2, #0
 801408e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014090:	bf00      	nop
 8014092:	3708      	adds	r7, #8
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}
 8014098:	200273c4 	.word	0x200273c4

0801409c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b082      	sub	sp, #8
 80140a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140a2:	2300      	movs	r3, #0
 80140a4:	607b      	str	r3, [r7, #4]
 80140a6:	e096      	b.n	80141d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80140a8:	494f      	ldr	r1, [pc, #316]	@ (80141e8 <etharp_tmr+0x14c>)
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	4613      	mov	r3, r2
 80140ae:	005b      	lsls	r3, r3, #1
 80140b0:	4413      	add	r3, r2
 80140b2:	00db      	lsls	r3, r3, #3
 80140b4:	440b      	add	r3, r1
 80140b6:	3314      	adds	r3, #20
 80140b8:	781b      	ldrb	r3, [r3, #0]
 80140ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80140bc:	78fb      	ldrb	r3, [r7, #3]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	f000 8086 	beq.w	80141d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80140c4:	4948      	ldr	r1, [pc, #288]	@ (80141e8 <etharp_tmr+0x14c>)
 80140c6:	687a      	ldr	r2, [r7, #4]
 80140c8:	4613      	mov	r3, r2
 80140ca:	005b      	lsls	r3, r3, #1
 80140cc:	4413      	add	r3, r2
 80140ce:	00db      	lsls	r3, r3, #3
 80140d0:	440b      	add	r3, r1
 80140d2:	3312      	adds	r3, #18
 80140d4:	881b      	ldrh	r3, [r3, #0]
 80140d6:	3301      	adds	r3, #1
 80140d8:	b298      	uxth	r0, r3
 80140da:	4943      	ldr	r1, [pc, #268]	@ (80141e8 <etharp_tmr+0x14c>)
 80140dc:	687a      	ldr	r2, [r7, #4]
 80140de:	4613      	mov	r3, r2
 80140e0:	005b      	lsls	r3, r3, #1
 80140e2:	4413      	add	r3, r2
 80140e4:	00db      	lsls	r3, r3, #3
 80140e6:	440b      	add	r3, r1
 80140e8:	3312      	adds	r3, #18
 80140ea:	4602      	mov	r2, r0
 80140ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80140ee:	493e      	ldr	r1, [pc, #248]	@ (80141e8 <etharp_tmr+0x14c>)
 80140f0:	687a      	ldr	r2, [r7, #4]
 80140f2:	4613      	mov	r3, r2
 80140f4:	005b      	lsls	r3, r3, #1
 80140f6:	4413      	add	r3, r2
 80140f8:	00db      	lsls	r3, r3, #3
 80140fa:	440b      	add	r3, r1
 80140fc:	3312      	adds	r3, #18
 80140fe:	881b      	ldrh	r3, [r3, #0]
 8014100:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8014104:	d215      	bcs.n	8014132 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014106:	4938      	ldr	r1, [pc, #224]	@ (80141e8 <etharp_tmr+0x14c>)
 8014108:	687a      	ldr	r2, [r7, #4]
 801410a:	4613      	mov	r3, r2
 801410c:	005b      	lsls	r3, r3, #1
 801410e:	4413      	add	r3, r2
 8014110:	00db      	lsls	r3, r3, #3
 8014112:	440b      	add	r3, r1
 8014114:	3314      	adds	r3, #20
 8014116:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014118:	2b01      	cmp	r3, #1
 801411a:	d10e      	bne.n	801413a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801411c:	4932      	ldr	r1, [pc, #200]	@ (80141e8 <etharp_tmr+0x14c>)
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	4613      	mov	r3, r2
 8014122:	005b      	lsls	r3, r3, #1
 8014124:	4413      	add	r3, r2
 8014126:	00db      	lsls	r3, r3, #3
 8014128:	440b      	add	r3, r1
 801412a:	3312      	adds	r3, #18
 801412c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801412e:	2b04      	cmp	r3, #4
 8014130:	d903      	bls.n	801413a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f7ff ff80 	bl	8014038 <etharp_free_entry>
 8014138:	e04a      	b.n	80141d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801413a:	492b      	ldr	r1, [pc, #172]	@ (80141e8 <etharp_tmr+0x14c>)
 801413c:	687a      	ldr	r2, [r7, #4]
 801413e:	4613      	mov	r3, r2
 8014140:	005b      	lsls	r3, r3, #1
 8014142:	4413      	add	r3, r2
 8014144:	00db      	lsls	r3, r3, #3
 8014146:	440b      	add	r3, r1
 8014148:	3314      	adds	r3, #20
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	2b03      	cmp	r3, #3
 801414e:	d10a      	bne.n	8014166 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014150:	4925      	ldr	r1, [pc, #148]	@ (80141e8 <etharp_tmr+0x14c>)
 8014152:	687a      	ldr	r2, [r7, #4]
 8014154:	4613      	mov	r3, r2
 8014156:	005b      	lsls	r3, r3, #1
 8014158:	4413      	add	r3, r2
 801415a:	00db      	lsls	r3, r3, #3
 801415c:	440b      	add	r3, r1
 801415e:	3314      	adds	r3, #20
 8014160:	2204      	movs	r2, #4
 8014162:	701a      	strb	r2, [r3, #0]
 8014164:	e034      	b.n	80141d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014166:	4920      	ldr	r1, [pc, #128]	@ (80141e8 <etharp_tmr+0x14c>)
 8014168:	687a      	ldr	r2, [r7, #4]
 801416a:	4613      	mov	r3, r2
 801416c:	005b      	lsls	r3, r3, #1
 801416e:	4413      	add	r3, r2
 8014170:	00db      	lsls	r3, r3, #3
 8014172:	440b      	add	r3, r1
 8014174:	3314      	adds	r3, #20
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	2b04      	cmp	r3, #4
 801417a:	d10a      	bne.n	8014192 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801417c:	491a      	ldr	r1, [pc, #104]	@ (80141e8 <etharp_tmr+0x14c>)
 801417e:	687a      	ldr	r2, [r7, #4]
 8014180:	4613      	mov	r3, r2
 8014182:	005b      	lsls	r3, r3, #1
 8014184:	4413      	add	r3, r2
 8014186:	00db      	lsls	r3, r3, #3
 8014188:	440b      	add	r3, r1
 801418a:	3314      	adds	r3, #20
 801418c:	2202      	movs	r2, #2
 801418e:	701a      	strb	r2, [r3, #0]
 8014190:	e01e      	b.n	80141d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014192:	4915      	ldr	r1, [pc, #84]	@ (80141e8 <etharp_tmr+0x14c>)
 8014194:	687a      	ldr	r2, [r7, #4]
 8014196:	4613      	mov	r3, r2
 8014198:	005b      	lsls	r3, r3, #1
 801419a:	4413      	add	r3, r2
 801419c:	00db      	lsls	r3, r3, #3
 801419e:	440b      	add	r3, r1
 80141a0:	3314      	adds	r3, #20
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	2b01      	cmp	r3, #1
 80141a6:	d113      	bne.n	80141d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80141a8:	490f      	ldr	r1, [pc, #60]	@ (80141e8 <etharp_tmr+0x14c>)
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	4613      	mov	r3, r2
 80141ae:	005b      	lsls	r3, r3, #1
 80141b0:	4413      	add	r3, r2
 80141b2:	00db      	lsls	r3, r3, #3
 80141b4:	440b      	add	r3, r1
 80141b6:	3308      	adds	r3, #8
 80141b8:	6818      	ldr	r0, [r3, #0]
 80141ba:	687a      	ldr	r2, [r7, #4]
 80141bc:	4613      	mov	r3, r2
 80141be:	005b      	lsls	r3, r3, #1
 80141c0:	4413      	add	r3, r2
 80141c2:	00db      	lsls	r3, r3, #3
 80141c4:	4a08      	ldr	r2, [pc, #32]	@ (80141e8 <etharp_tmr+0x14c>)
 80141c6:	4413      	add	r3, r2
 80141c8:	3304      	adds	r3, #4
 80141ca:	4619      	mov	r1, r3
 80141cc:	f000 fe6e 	bl	8014eac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	3301      	adds	r3, #1
 80141d4:	607b      	str	r3, [r7, #4]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	2b09      	cmp	r3, #9
 80141da:	f77f af65 	ble.w	80140a8 <etharp_tmr+0xc>
      }
    }
  }
}
 80141de:	bf00      	nop
 80141e0:	bf00      	nop
 80141e2:	3708      	adds	r7, #8
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}
 80141e8:	200273c4 	.word	0x200273c4

080141ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b08a      	sub	sp, #40	@ 0x28
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	60f8      	str	r0, [r7, #12]
 80141f4:	460b      	mov	r3, r1
 80141f6:	607a      	str	r2, [r7, #4]
 80141f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80141fa:	230a      	movs	r3, #10
 80141fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80141fe:	230a      	movs	r3, #10
 8014200:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014202:	230a      	movs	r3, #10
 8014204:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8014206:	2300      	movs	r3, #0
 8014208:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801420a:	230a      	movs	r3, #10
 801420c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801420e:	2300      	movs	r3, #0
 8014210:	83bb      	strh	r3, [r7, #28]
 8014212:	2300      	movs	r3, #0
 8014214:	837b      	strh	r3, [r7, #26]
 8014216:	2300      	movs	r3, #0
 8014218:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801421a:	2300      	movs	r3, #0
 801421c:	843b      	strh	r3, [r7, #32]
 801421e:	e0ae      	b.n	801437e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014220:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014224:	49a6      	ldr	r1, [pc, #664]	@ (80144c0 <etharp_find_entry+0x2d4>)
 8014226:	4613      	mov	r3, r2
 8014228:	005b      	lsls	r3, r3, #1
 801422a:	4413      	add	r3, r2
 801422c:	00db      	lsls	r3, r3, #3
 801422e:	440b      	add	r3, r1
 8014230:	3314      	adds	r3, #20
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014236:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801423a:	2b0a      	cmp	r3, #10
 801423c:	d105      	bne.n	801424a <etharp_find_entry+0x5e>
 801423e:	7dfb      	ldrb	r3, [r7, #23]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d102      	bne.n	801424a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014244:	8c3b      	ldrh	r3, [r7, #32]
 8014246:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014248:	e095      	b.n	8014376 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801424a:	7dfb      	ldrb	r3, [r7, #23]
 801424c:	2b00      	cmp	r3, #0
 801424e:	f000 8092 	beq.w	8014376 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014252:	7dfb      	ldrb	r3, [r7, #23]
 8014254:	2b01      	cmp	r3, #1
 8014256:	d009      	beq.n	801426c <etharp_find_entry+0x80>
 8014258:	7dfb      	ldrb	r3, [r7, #23]
 801425a:	2b01      	cmp	r3, #1
 801425c:	d806      	bhi.n	801426c <etharp_find_entry+0x80>
 801425e:	4b99      	ldr	r3, [pc, #612]	@ (80144c4 <etharp_find_entry+0x2d8>)
 8014260:	f240 1223 	movw	r2, #291	@ 0x123
 8014264:	4998      	ldr	r1, [pc, #608]	@ (80144c8 <etharp_find_entry+0x2dc>)
 8014266:	4899      	ldr	r0, [pc, #612]	@ (80144cc <etharp_find_entry+0x2e0>)
 8014268:	f002 fe18 	bl	8016e9c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d020      	beq.n	80142b4 <etharp_find_entry+0xc8>
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	6819      	ldr	r1, [r3, #0]
 8014276:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801427a:	4891      	ldr	r0, [pc, #580]	@ (80144c0 <etharp_find_entry+0x2d4>)
 801427c:	4613      	mov	r3, r2
 801427e:	005b      	lsls	r3, r3, #1
 8014280:	4413      	add	r3, r2
 8014282:	00db      	lsls	r3, r3, #3
 8014284:	4403      	add	r3, r0
 8014286:	3304      	adds	r3, #4
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	4299      	cmp	r1, r3
 801428c:	d112      	bne.n	80142b4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d00c      	beq.n	80142ae <etharp_find_entry+0xc2>
 8014294:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014298:	4989      	ldr	r1, [pc, #548]	@ (80144c0 <etharp_find_entry+0x2d4>)
 801429a:	4613      	mov	r3, r2
 801429c:	005b      	lsls	r3, r3, #1
 801429e:	4413      	add	r3, r2
 80142a0:	00db      	lsls	r3, r3, #3
 80142a2:	440b      	add	r3, r1
 80142a4:	3308      	adds	r3, #8
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	687a      	ldr	r2, [r7, #4]
 80142aa:	429a      	cmp	r2, r3
 80142ac:	d102      	bne.n	80142b4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80142ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80142b2:	e100      	b.n	80144b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80142b4:	7dfb      	ldrb	r3, [r7, #23]
 80142b6:	2b01      	cmp	r3, #1
 80142b8:	d140      	bne.n	801433c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80142ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142be:	4980      	ldr	r1, [pc, #512]	@ (80144c0 <etharp_find_entry+0x2d4>)
 80142c0:	4613      	mov	r3, r2
 80142c2:	005b      	lsls	r3, r3, #1
 80142c4:	4413      	add	r3, r2
 80142c6:	00db      	lsls	r3, r3, #3
 80142c8:	440b      	add	r3, r1
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d01a      	beq.n	8014306 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80142d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142d4:	497a      	ldr	r1, [pc, #488]	@ (80144c0 <etharp_find_entry+0x2d4>)
 80142d6:	4613      	mov	r3, r2
 80142d8:	005b      	lsls	r3, r3, #1
 80142da:	4413      	add	r3, r2
 80142dc:	00db      	lsls	r3, r3, #3
 80142de:	440b      	add	r3, r1
 80142e0:	3312      	adds	r3, #18
 80142e2:	881b      	ldrh	r3, [r3, #0]
 80142e4:	8bba      	ldrh	r2, [r7, #28]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d845      	bhi.n	8014376 <etharp_find_entry+0x18a>
            old_queue = i;
 80142ea:	8c3b      	ldrh	r3, [r7, #32]
 80142ec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80142ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142f2:	4973      	ldr	r1, [pc, #460]	@ (80144c0 <etharp_find_entry+0x2d4>)
 80142f4:	4613      	mov	r3, r2
 80142f6:	005b      	lsls	r3, r3, #1
 80142f8:	4413      	add	r3, r2
 80142fa:	00db      	lsls	r3, r3, #3
 80142fc:	440b      	add	r3, r1
 80142fe:	3312      	adds	r3, #18
 8014300:	881b      	ldrh	r3, [r3, #0]
 8014302:	83bb      	strh	r3, [r7, #28]
 8014304:	e037      	b.n	8014376 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014306:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801430a:	496d      	ldr	r1, [pc, #436]	@ (80144c0 <etharp_find_entry+0x2d4>)
 801430c:	4613      	mov	r3, r2
 801430e:	005b      	lsls	r3, r3, #1
 8014310:	4413      	add	r3, r2
 8014312:	00db      	lsls	r3, r3, #3
 8014314:	440b      	add	r3, r1
 8014316:	3312      	adds	r3, #18
 8014318:	881b      	ldrh	r3, [r3, #0]
 801431a:	8b7a      	ldrh	r2, [r7, #26]
 801431c:	429a      	cmp	r2, r3
 801431e:	d82a      	bhi.n	8014376 <etharp_find_entry+0x18a>
            old_pending = i;
 8014320:	8c3b      	ldrh	r3, [r7, #32]
 8014322:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8014324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014328:	4965      	ldr	r1, [pc, #404]	@ (80144c0 <etharp_find_entry+0x2d4>)
 801432a:	4613      	mov	r3, r2
 801432c:	005b      	lsls	r3, r3, #1
 801432e:	4413      	add	r3, r2
 8014330:	00db      	lsls	r3, r3, #3
 8014332:	440b      	add	r3, r1
 8014334:	3312      	adds	r3, #18
 8014336:	881b      	ldrh	r3, [r3, #0]
 8014338:	837b      	strh	r3, [r7, #26]
 801433a:	e01c      	b.n	8014376 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801433c:	7dfb      	ldrb	r3, [r7, #23]
 801433e:	2b01      	cmp	r3, #1
 8014340:	d919      	bls.n	8014376 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014342:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014346:	495e      	ldr	r1, [pc, #376]	@ (80144c0 <etharp_find_entry+0x2d4>)
 8014348:	4613      	mov	r3, r2
 801434a:	005b      	lsls	r3, r3, #1
 801434c:	4413      	add	r3, r2
 801434e:	00db      	lsls	r3, r3, #3
 8014350:	440b      	add	r3, r1
 8014352:	3312      	adds	r3, #18
 8014354:	881b      	ldrh	r3, [r3, #0]
 8014356:	8b3a      	ldrh	r2, [r7, #24]
 8014358:	429a      	cmp	r2, r3
 801435a:	d80c      	bhi.n	8014376 <etharp_find_entry+0x18a>
            old_stable = i;
 801435c:	8c3b      	ldrh	r3, [r7, #32]
 801435e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014360:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014364:	4956      	ldr	r1, [pc, #344]	@ (80144c0 <etharp_find_entry+0x2d4>)
 8014366:	4613      	mov	r3, r2
 8014368:	005b      	lsls	r3, r3, #1
 801436a:	4413      	add	r3, r2
 801436c:	00db      	lsls	r3, r3, #3
 801436e:	440b      	add	r3, r1
 8014370:	3312      	adds	r3, #18
 8014372:	881b      	ldrh	r3, [r3, #0]
 8014374:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014376:	8c3b      	ldrh	r3, [r7, #32]
 8014378:	3301      	adds	r3, #1
 801437a:	b29b      	uxth	r3, r3
 801437c:	843b      	strh	r3, [r7, #32]
 801437e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014382:	2b09      	cmp	r3, #9
 8014384:	f77f af4c 	ble.w	8014220 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014388:	7afb      	ldrb	r3, [r7, #11]
 801438a:	f003 0302 	and.w	r3, r3, #2
 801438e:	2b00      	cmp	r3, #0
 8014390:	d108      	bne.n	80143a4 <etharp_find_entry+0x1b8>
 8014392:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014396:	2b0a      	cmp	r3, #10
 8014398:	d107      	bne.n	80143aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801439a:	7afb      	ldrb	r3, [r7, #11]
 801439c:	f003 0301 	and.w	r3, r3, #1
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d102      	bne.n	80143aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80143a4:	f04f 33ff 	mov.w	r3, #4294967295
 80143a8:	e085      	b.n	80144b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80143aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80143ae:	2b09      	cmp	r3, #9
 80143b0:	dc02      	bgt.n	80143b8 <etharp_find_entry+0x1cc>
    i = empty;
 80143b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80143b4:	843b      	strh	r3, [r7, #32]
 80143b6:	e039      	b.n	801442c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80143b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80143bc:	2b09      	cmp	r3, #9
 80143be:	dc14      	bgt.n	80143ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80143c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80143c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80143c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143c8:	493d      	ldr	r1, [pc, #244]	@ (80144c0 <etharp_find_entry+0x2d4>)
 80143ca:	4613      	mov	r3, r2
 80143cc:	005b      	lsls	r3, r3, #1
 80143ce:	4413      	add	r3, r2
 80143d0:	00db      	lsls	r3, r3, #3
 80143d2:	440b      	add	r3, r1
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d018      	beq.n	801440c <etharp_find_entry+0x220>
 80143da:	4b3a      	ldr	r3, [pc, #232]	@ (80144c4 <etharp_find_entry+0x2d8>)
 80143dc:	f240 126d 	movw	r2, #365	@ 0x16d
 80143e0:	493b      	ldr	r1, [pc, #236]	@ (80144d0 <etharp_find_entry+0x2e4>)
 80143e2:	483a      	ldr	r0, [pc, #232]	@ (80144cc <etharp_find_entry+0x2e0>)
 80143e4:	f002 fd5a 	bl	8016e9c <iprintf>
 80143e8:	e010      	b.n	801440c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80143ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80143ee:	2b09      	cmp	r3, #9
 80143f0:	dc02      	bgt.n	80143f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80143f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80143f4:	843b      	strh	r3, [r7, #32]
 80143f6:	e009      	b.n	801440c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80143f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80143fc:	2b09      	cmp	r3, #9
 80143fe:	dc02      	bgt.n	8014406 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014400:	8bfb      	ldrh	r3, [r7, #30]
 8014402:	843b      	strh	r3, [r7, #32]
 8014404:	e002      	b.n	801440c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014406:	f04f 33ff 	mov.w	r3, #4294967295
 801440a:	e054      	b.n	80144b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801440c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014410:	2b09      	cmp	r3, #9
 8014412:	dd06      	ble.n	8014422 <etharp_find_entry+0x236>
 8014414:	4b2b      	ldr	r3, [pc, #172]	@ (80144c4 <etharp_find_entry+0x2d8>)
 8014416:	f240 127f 	movw	r2, #383	@ 0x17f
 801441a:	492e      	ldr	r1, [pc, #184]	@ (80144d4 <etharp_find_entry+0x2e8>)
 801441c:	482b      	ldr	r0, [pc, #172]	@ (80144cc <etharp_find_entry+0x2e0>)
 801441e:	f002 fd3d 	bl	8016e9c <iprintf>
    etharp_free_entry(i);
 8014422:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014426:	4618      	mov	r0, r3
 8014428:	f7ff fe06 	bl	8014038 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801442c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014430:	2b09      	cmp	r3, #9
 8014432:	dd06      	ble.n	8014442 <etharp_find_entry+0x256>
 8014434:	4b23      	ldr	r3, [pc, #140]	@ (80144c4 <etharp_find_entry+0x2d8>)
 8014436:	f240 1283 	movw	r2, #387	@ 0x183
 801443a:	4926      	ldr	r1, [pc, #152]	@ (80144d4 <etharp_find_entry+0x2e8>)
 801443c:	4823      	ldr	r0, [pc, #140]	@ (80144cc <etharp_find_entry+0x2e0>)
 801443e:	f002 fd2d 	bl	8016e9c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014442:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014446:	491e      	ldr	r1, [pc, #120]	@ (80144c0 <etharp_find_entry+0x2d4>)
 8014448:	4613      	mov	r3, r2
 801444a:	005b      	lsls	r3, r3, #1
 801444c:	4413      	add	r3, r2
 801444e:	00db      	lsls	r3, r3, #3
 8014450:	440b      	add	r3, r1
 8014452:	3314      	adds	r3, #20
 8014454:	781b      	ldrb	r3, [r3, #0]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d006      	beq.n	8014468 <etharp_find_entry+0x27c>
 801445a:	4b1a      	ldr	r3, [pc, #104]	@ (80144c4 <etharp_find_entry+0x2d8>)
 801445c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014460:	491d      	ldr	r1, [pc, #116]	@ (80144d8 <etharp_find_entry+0x2ec>)
 8014462:	481a      	ldr	r0, [pc, #104]	@ (80144cc <etharp_find_entry+0x2e0>)
 8014464:	f002 fd1a 	bl	8016e9c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d00b      	beq.n	8014486 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801446e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	6819      	ldr	r1, [r3, #0]
 8014476:	4812      	ldr	r0, [pc, #72]	@ (80144c0 <etharp_find_entry+0x2d4>)
 8014478:	4613      	mov	r3, r2
 801447a:	005b      	lsls	r3, r3, #1
 801447c:	4413      	add	r3, r2
 801447e:	00db      	lsls	r3, r3, #3
 8014480:	4403      	add	r3, r0
 8014482:	3304      	adds	r3, #4
 8014484:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801448a:	490d      	ldr	r1, [pc, #52]	@ (80144c0 <etharp_find_entry+0x2d4>)
 801448c:	4613      	mov	r3, r2
 801448e:	005b      	lsls	r3, r3, #1
 8014490:	4413      	add	r3, r2
 8014492:	00db      	lsls	r3, r3, #3
 8014494:	440b      	add	r3, r1
 8014496:	3312      	adds	r3, #18
 8014498:	2200      	movs	r2, #0
 801449a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801449c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144a0:	4907      	ldr	r1, [pc, #28]	@ (80144c0 <etharp_find_entry+0x2d4>)
 80144a2:	4613      	mov	r3, r2
 80144a4:	005b      	lsls	r3, r3, #1
 80144a6:	4413      	add	r3, r2
 80144a8:	00db      	lsls	r3, r3, #3
 80144aa:	440b      	add	r3, r1
 80144ac:	3308      	adds	r3, #8
 80144ae:	687a      	ldr	r2, [r7, #4]
 80144b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80144b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3728      	adds	r7, #40	@ 0x28
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd80      	pop	{r7, pc}
 80144be:	bf00      	nop
 80144c0:	200273c4 	.word	0x200273c4
 80144c4:	0801a508 	.word	0x0801a508
 80144c8:	0801a540 	.word	0x0801a540
 80144cc:	0801a580 	.word	0x0801a580
 80144d0:	0801a5a8 	.word	0x0801a5a8
 80144d4:	0801a5c0 	.word	0x0801a5c0
 80144d8:	0801a5d4 	.word	0x0801a5d4

080144dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b088      	sub	sp, #32
 80144e0:	af02      	add	r7, sp, #8
 80144e2:	60f8      	str	r0, [r7, #12]
 80144e4:	60b9      	str	r1, [r7, #8]
 80144e6:	607a      	str	r2, [r7, #4]
 80144e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80144f0:	2b06      	cmp	r3, #6
 80144f2:	d006      	beq.n	8014502 <etharp_update_arp_entry+0x26>
 80144f4:	4b48      	ldr	r3, [pc, #288]	@ (8014618 <etharp_update_arp_entry+0x13c>)
 80144f6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80144fa:	4948      	ldr	r1, [pc, #288]	@ (801461c <etharp_update_arp_entry+0x140>)
 80144fc:	4848      	ldr	r0, [pc, #288]	@ (8014620 <etharp_update_arp_entry+0x144>)
 80144fe:	f002 fccd 	bl	8016e9c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d012      	beq.n	801452e <etharp_update_arp_entry+0x52>
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d00e      	beq.n	801452e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	68f9      	ldr	r1, [r7, #12]
 8014516:	4618      	mov	r0, r3
 8014518:	f001 f8fe 	bl	8015718 <ip4_addr_isbroadcast_u32>
 801451c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801451e:	2b00      	cmp	r3, #0
 8014520:	d105      	bne.n	801452e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014522:	68bb      	ldr	r3, [r7, #8]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801452a:	2be0      	cmp	r3, #224	@ 0xe0
 801452c:	d102      	bne.n	8014534 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801452e:	f06f 030f 	mvn.w	r3, #15
 8014532:	e06c      	b.n	801460e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014534:	78fb      	ldrb	r3, [r7, #3]
 8014536:	68fa      	ldr	r2, [r7, #12]
 8014538:	4619      	mov	r1, r3
 801453a:	68b8      	ldr	r0, [r7, #8]
 801453c:	f7ff fe56 	bl	80141ec <etharp_find_entry>
 8014540:	4603      	mov	r3, r0
 8014542:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014544:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014548:	2b00      	cmp	r3, #0
 801454a:	da02      	bge.n	8014552 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801454c:	8afb      	ldrh	r3, [r7, #22]
 801454e:	b25b      	sxtb	r3, r3
 8014550:	e05d      	b.n	801460e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014552:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014556:	4933      	ldr	r1, [pc, #204]	@ (8014624 <etharp_update_arp_entry+0x148>)
 8014558:	4613      	mov	r3, r2
 801455a:	005b      	lsls	r3, r3, #1
 801455c:	4413      	add	r3, r2
 801455e:	00db      	lsls	r3, r3, #3
 8014560:	440b      	add	r3, r1
 8014562:	3314      	adds	r3, #20
 8014564:	2202      	movs	r2, #2
 8014566:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014568:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801456c:	492d      	ldr	r1, [pc, #180]	@ (8014624 <etharp_update_arp_entry+0x148>)
 801456e:	4613      	mov	r3, r2
 8014570:	005b      	lsls	r3, r3, #1
 8014572:	4413      	add	r3, r2
 8014574:	00db      	lsls	r3, r3, #3
 8014576:	440b      	add	r3, r1
 8014578:	3308      	adds	r3, #8
 801457a:	68fa      	ldr	r2, [r7, #12]
 801457c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801457e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014582:	4613      	mov	r3, r2
 8014584:	005b      	lsls	r3, r3, #1
 8014586:	4413      	add	r3, r2
 8014588:	00db      	lsls	r3, r3, #3
 801458a:	3308      	adds	r3, #8
 801458c:	4a25      	ldr	r2, [pc, #148]	@ (8014624 <etharp_update_arp_entry+0x148>)
 801458e:	4413      	add	r3, r2
 8014590:	3304      	adds	r3, #4
 8014592:	2206      	movs	r2, #6
 8014594:	6879      	ldr	r1, [r7, #4]
 8014596:	4618      	mov	r0, r3
 8014598:	f002 feab 	bl	80172f2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801459c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145a0:	4920      	ldr	r1, [pc, #128]	@ (8014624 <etharp_update_arp_entry+0x148>)
 80145a2:	4613      	mov	r3, r2
 80145a4:	005b      	lsls	r3, r3, #1
 80145a6:	4413      	add	r3, r2
 80145a8:	00db      	lsls	r3, r3, #3
 80145aa:	440b      	add	r3, r1
 80145ac:	3312      	adds	r3, #18
 80145ae:	2200      	movs	r2, #0
 80145b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80145b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145b6:	491b      	ldr	r1, [pc, #108]	@ (8014624 <etharp_update_arp_entry+0x148>)
 80145b8:	4613      	mov	r3, r2
 80145ba:	005b      	lsls	r3, r3, #1
 80145bc:	4413      	add	r3, r2
 80145be:	00db      	lsls	r3, r3, #3
 80145c0:	440b      	add	r3, r1
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d021      	beq.n	801460c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80145c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145cc:	4915      	ldr	r1, [pc, #84]	@ (8014624 <etharp_update_arp_entry+0x148>)
 80145ce:	4613      	mov	r3, r2
 80145d0:	005b      	lsls	r3, r3, #1
 80145d2:	4413      	add	r3, r2
 80145d4:	00db      	lsls	r3, r3, #3
 80145d6:	440b      	add	r3, r1
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80145dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145e0:	4910      	ldr	r1, [pc, #64]	@ (8014624 <etharp_update_arp_entry+0x148>)
 80145e2:	4613      	mov	r3, r2
 80145e4:	005b      	lsls	r3, r3, #1
 80145e6:	4413      	add	r3, r2
 80145e8:	00db      	lsls	r3, r3, #3
 80145ea:	440b      	add	r3, r1
 80145ec:	2200      	movs	r2, #0
 80145ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80145f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80145fa:	9300      	str	r3, [sp, #0]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	6939      	ldr	r1, [r7, #16]
 8014600:	68f8      	ldr	r0, [r7, #12]
 8014602:	f002 f827 	bl	8016654 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014606:	6938      	ldr	r0, [r7, #16]
 8014608:	f7f9 fcf8 	bl	800dffc <pbuf_free>
  }
  return ERR_OK;
 801460c:	2300      	movs	r3, #0
}
 801460e:	4618      	mov	r0, r3
 8014610:	3718      	adds	r7, #24
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
 8014616:	bf00      	nop
 8014618:	0801a508 	.word	0x0801a508
 801461c:	0801a600 	.word	0x0801a600
 8014620:	0801a580 	.word	0x0801a580
 8014624:	200273c4 	.word	0x200273c4

08014628 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014630:	2300      	movs	r3, #0
 8014632:	60fb      	str	r3, [r7, #12]
 8014634:	e01e      	b.n	8014674 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014636:	4913      	ldr	r1, [pc, #76]	@ (8014684 <etharp_cleanup_netif+0x5c>)
 8014638:	68fa      	ldr	r2, [r7, #12]
 801463a:	4613      	mov	r3, r2
 801463c:	005b      	lsls	r3, r3, #1
 801463e:	4413      	add	r3, r2
 8014640:	00db      	lsls	r3, r3, #3
 8014642:	440b      	add	r3, r1
 8014644:	3314      	adds	r3, #20
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801464a:	7afb      	ldrb	r3, [r7, #11]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d00e      	beq.n	801466e <etharp_cleanup_netif+0x46>
 8014650:	490c      	ldr	r1, [pc, #48]	@ (8014684 <etharp_cleanup_netif+0x5c>)
 8014652:	68fa      	ldr	r2, [r7, #12]
 8014654:	4613      	mov	r3, r2
 8014656:	005b      	lsls	r3, r3, #1
 8014658:	4413      	add	r3, r2
 801465a:	00db      	lsls	r3, r3, #3
 801465c:	440b      	add	r3, r1
 801465e:	3308      	adds	r3, #8
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	429a      	cmp	r2, r3
 8014666:	d102      	bne.n	801466e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014668:	68f8      	ldr	r0, [r7, #12]
 801466a:	f7ff fce5 	bl	8014038 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	3301      	adds	r3, #1
 8014672:	60fb      	str	r3, [r7, #12]
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	2b09      	cmp	r3, #9
 8014678:	dddd      	ble.n	8014636 <etharp_cleanup_netif+0xe>
    }
  }
}
 801467a:	bf00      	nop
 801467c:	bf00      	nop
 801467e:	3710      	adds	r7, #16
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}
 8014684:	200273c4 	.word	0x200273c4

08014688 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014688:	b5b0      	push	{r4, r5, r7, lr}
 801468a:	b08a      	sub	sp, #40	@ 0x28
 801468c:	af04      	add	r7, sp, #16
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d107      	bne.n	80146a8 <etharp_input+0x20>
 8014698:	4b3d      	ldr	r3, [pc, #244]	@ (8014790 <etharp_input+0x108>)
 801469a:	f240 228a 	movw	r2, #650	@ 0x28a
 801469e:	493d      	ldr	r1, [pc, #244]	@ (8014794 <etharp_input+0x10c>)
 80146a0:	483d      	ldr	r0, [pc, #244]	@ (8014798 <etharp_input+0x110>)
 80146a2:	f002 fbfb 	bl	8016e9c <iprintf>
 80146a6:	e06f      	b.n	8014788 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80146ae:	693b      	ldr	r3, [r7, #16]
 80146b0:	881b      	ldrh	r3, [r3, #0]
 80146b2:	b29b      	uxth	r3, r3
 80146b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80146b8:	d10c      	bne.n	80146d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80146be:	2b06      	cmp	r3, #6
 80146c0:	d108      	bne.n	80146d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80146c6:	2b04      	cmp	r3, #4
 80146c8:	d104      	bne.n	80146d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	885b      	ldrh	r3, [r3, #2]
 80146ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80146d0:	2b08      	cmp	r3, #8
 80146d2:	d003      	beq.n	80146dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f7f9 fc91 	bl	800dffc <pbuf_free>
    return;
 80146da:	e055      	b.n	8014788 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80146dc:	693b      	ldr	r3, [r7, #16]
 80146de:	330e      	adds	r3, #14
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	3318      	adds	r3, #24
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	3304      	adds	r3, #4
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d102      	bne.n	80146fc <etharp_input+0x74>
    for_us = 0;
 80146f6:	2300      	movs	r3, #0
 80146f8:	75fb      	strb	r3, [r7, #23]
 80146fa:	e009      	b.n	8014710 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80146fc:	68ba      	ldr	r2, [r7, #8]
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	3304      	adds	r3, #4
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	429a      	cmp	r2, r3
 8014706:	bf0c      	ite	eq
 8014708:	2301      	moveq	r3, #1
 801470a:	2300      	movne	r3, #0
 801470c:	b2db      	uxtb	r3, r3
 801470e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014710:	693b      	ldr	r3, [r7, #16]
 8014712:	f103 0208 	add.w	r2, r3, #8
 8014716:	7dfb      	ldrb	r3, [r7, #23]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d001      	beq.n	8014720 <etharp_input+0x98>
 801471c:	2301      	movs	r3, #1
 801471e:	e000      	b.n	8014722 <etharp_input+0x9a>
 8014720:	2302      	movs	r3, #2
 8014722:	f107 010c 	add.w	r1, r7, #12
 8014726:	6838      	ldr	r0, [r7, #0]
 8014728:	f7ff fed8 	bl	80144dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	88db      	ldrh	r3, [r3, #6]
 8014730:	b29b      	uxth	r3, r3
 8014732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014736:	d003      	beq.n	8014740 <etharp_input+0xb8>
 8014738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801473c:	d01e      	beq.n	801477c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801473e:	e020      	b.n	8014782 <etharp_input+0xfa>
      if (for_us) {
 8014740:	7dfb      	ldrb	r3, [r7, #23]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d01c      	beq.n	8014780 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801475c:	693a      	ldr	r2, [r7, #16]
 801475e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014760:	2102      	movs	r1, #2
 8014762:	9103      	str	r1, [sp, #12]
 8014764:	f107 010c 	add.w	r1, r7, #12
 8014768:	9102      	str	r1, [sp, #8]
 801476a:	9201      	str	r2, [sp, #4]
 801476c:	9300      	str	r3, [sp, #0]
 801476e:	462b      	mov	r3, r5
 8014770:	4622      	mov	r2, r4
 8014772:	4601      	mov	r1, r0
 8014774:	6838      	ldr	r0, [r7, #0]
 8014776:	f000 faeb 	bl	8014d50 <etharp_raw>
      break;
 801477a:	e001      	b.n	8014780 <etharp_input+0xf8>
      break;
 801477c:	bf00      	nop
 801477e:	e000      	b.n	8014782 <etharp_input+0xfa>
      break;
 8014780:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f7f9 fc3a 	bl	800dffc <pbuf_free>
}
 8014788:	3718      	adds	r7, #24
 801478a:	46bd      	mov	sp, r7
 801478c:	bdb0      	pop	{r4, r5, r7, pc}
 801478e:	bf00      	nop
 8014790:	0801a508 	.word	0x0801a508
 8014794:	0801a658 	.word	0x0801a658
 8014798:	0801a580 	.word	0x0801a580

0801479c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b086      	sub	sp, #24
 80147a0:	af02      	add	r7, sp, #8
 80147a2:	60f8      	str	r0, [r7, #12]
 80147a4:	60b9      	str	r1, [r7, #8]
 80147a6:	4613      	mov	r3, r2
 80147a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80147aa:	79fa      	ldrb	r2, [r7, #7]
 80147ac:	4944      	ldr	r1, [pc, #272]	@ (80148c0 <etharp_output_to_arp_index+0x124>)
 80147ae:	4613      	mov	r3, r2
 80147b0:	005b      	lsls	r3, r3, #1
 80147b2:	4413      	add	r3, r2
 80147b4:	00db      	lsls	r3, r3, #3
 80147b6:	440b      	add	r3, r1
 80147b8:	3314      	adds	r3, #20
 80147ba:	781b      	ldrb	r3, [r3, #0]
 80147bc:	2b01      	cmp	r3, #1
 80147be:	d806      	bhi.n	80147ce <etharp_output_to_arp_index+0x32>
 80147c0:	4b40      	ldr	r3, [pc, #256]	@ (80148c4 <etharp_output_to_arp_index+0x128>)
 80147c2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80147c6:	4940      	ldr	r1, [pc, #256]	@ (80148c8 <etharp_output_to_arp_index+0x12c>)
 80147c8:	4840      	ldr	r0, [pc, #256]	@ (80148cc <etharp_output_to_arp_index+0x130>)
 80147ca:	f002 fb67 	bl	8016e9c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80147ce:	79fa      	ldrb	r2, [r7, #7]
 80147d0:	493b      	ldr	r1, [pc, #236]	@ (80148c0 <etharp_output_to_arp_index+0x124>)
 80147d2:	4613      	mov	r3, r2
 80147d4:	005b      	lsls	r3, r3, #1
 80147d6:	4413      	add	r3, r2
 80147d8:	00db      	lsls	r3, r3, #3
 80147da:	440b      	add	r3, r1
 80147dc:	3314      	adds	r3, #20
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	2b02      	cmp	r3, #2
 80147e2:	d153      	bne.n	801488c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80147e4:	79fa      	ldrb	r2, [r7, #7]
 80147e6:	4936      	ldr	r1, [pc, #216]	@ (80148c0 <etharp_output_to_arp_index+0x124>)
 80147e8:	4613      	mov	r3, r2
 80147ea:	005b      	lsls	r3, r3, #1
 80147ec:	4413      	add	r3, r2
 80147ee:	00db      	lsls	r3, r3, #3
 80147f0:	440b      	add	r3, r1
 80147f2:	3312      	adds	r3, #18
 80147f4:	881b      	ldrh	r3, [r3, #0]
 80147f6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80147fa:	d919      	bls.n	8014830 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80147fc:	79fa      	ldrb	r2, [r7, #7]
 80147fe:	4613      	mov	r3, r2
 8014800:	005b      	lsls	r3, r3, #1
 8014802:	4413      	add	r3, r2
 8014804:	00db      	lsls	r3, r3, #3
 8014806:	4a2e      	ldr	r2, [pc, #184]	@ (80148c0 <etharp_output_to_arp_index+0x124>)
 8014808:	4413      	add	r3, r2
 801480a:	3304      	adds	r3, #4
 801480c:	4619      	mov	r1, r3
 801480e:	68f8      	ldr	r0, [r7, #12]
 8014810:	f000 fb4c 	bl	8014eac <etharp_request>
 8014814:	4603      	mov	r3, r0
 8014816:	2b00      	cmp	r3, #0
 8014818:	d138      	bne.n	801488c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801481a:	79fa      	ldrb	r2, [r7, #7]
 801481c:	4928      	ldr	r1, [pc, #160]	@ (80148c0 <etharp_output_to_arp_index+0x124>)
 801481e:	4613      	mov	r3, r2
 8014820:	005b      	lsls	r3, r3, #1
 8014822:	4413      	add	r3, r2
 8014824:	00db      	lsls	r3, r3, #3
 8014826:	440b      	add	r3, r1
 8014828:	3314      	adds	r3, #20
 801482a:	2203      	movs	r2, #3
 801482c:	701a      	strb	r2, [r3, #0]
 801482e:	e02d      	b.n	801488c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014830:	79fa      	ldrb	r2, [r7, #7]
 8014832:	4923      	ldr	r1, [pc, #140]	@ (80148c0 <etharp_output_to_arp_index+0x124>)
 8014834:	4613      	mov	r3, r2
 8014836:	005b      	lsls	r3, r3, #1
 8014838:	4413      	add	r3, r2
 801483a:	00db      	lsls	r3, r3, #3
 801483c:	440b      	add	r3, r1
 801483e:	3312      	adds	r3, #18
 8014840:	881b      	ldrh	r3, [r3, #0]
 8014842:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8014846:	d321      	bcc.n	801488c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014848:	79fa      	ldrb	r2, [r7, #7]
 801484a:	4613      	mov	r3, r2
 801484c:	005b      	lsls	r3, r3, #1
 801484e:	4413      	add	r3, r2
 8014850:	00db      	lsls	r3, r3, #3
 8014852:	4a1b      	ldr	r2, [pc, #108]	@ (80148c0 <etharp_output_to_arp_index+0x124>)
 8014854:	4413      	add	r3, r2
 8014856:	1d19      	adds	r1, r3, #4
 8014858:	79fa      	ldrb	r2, [r7, #7]
 801485a:	4613      	mov	r3, r2
 801485c:	005b      	lsls	r3, r3, #1
 801485e:	4413      	add	r3, r2
 8014860:	00db      	lsls	r3, r3, #3
 8014862:	3308      	adds	r3, #8
 8014864:	4a16      	ldr	r2, [pc, #88]	@ (80148c0 <etharp_output_to_arp_index+0x124>)
 8014866:	4413      	add	r3, r2
 8014868:	3304      	adds	r3, #4
 801486a:	461a      	mov	r2, r3
 801486c:	68f8      	ldr	r0, [r7, #12]
 801486e:	f000 fafb 	bl	8014e68 <etharp_request_dst>
 8014872:	4603      	mov	r3, r0
 8014874:	2b00      	cmp	r3, #0
 8014876:	d109      	bne.n	801488c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014878:	79fa      	ldrb	r2, [r7, #7]
 801487a:	4911      	ldr	r1, [pc, #68]	@ (80148c0 <etharp_output_to_arp_index+0x124>)
 801487c:	4613      	mov	r3, r2
 801487e:	005b      	lsls	r3, r3, #1
 8014880:	4413      	add	r3, r2
 8014882:	00db      	lsls	r3, r3, #3
 8014884:	440b      	add	r3, r1
 8014886:	3314      	adds	r3, #20
 8014888:	2203      	movs	r2, #3
 801488a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014892:	79fa      	ldrb	r2, [r7, #7]
 8014894:	4613      	mov	r3, r2
 8014896:	005b      	lsls	r3, r3, #1
 8014898:	4413      	add	r3, r2
 801489a:	00db      	lsls	r3, r3, #3
 801489c:	3308      	adds	r3, #8
 801489e:	4a08      	ldr	r2, [pc, #32]	@ (80148c0 <etharp_output_to_arp_index+0x124>)
 80148a0:	4413      	add	r3, r2
 80148a2:	3304      	adds	r3, #4
 80148a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80148a8:	9200      	str	r2, [sp, #0]
 80148aa:	460a      	mov	r2, r1
 80148ac:	68b9      	ldr	r1, [r7, #8]
 80148ae:	68f8      	ldr	r0, [r7, #12]
 80148b0:	f001 fed0 	bl	8016654 <ethernet_output>
 80148b4:	4603      	mov	r3, r0
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3710      	adds	r7, #16
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	200273c4 	.word	0x200273c4
 80148c4:	0801a508 	.word	0x0801a508
 80148c8:	0801a678 	.word	0x0801a678
 80148cc:	0801a580 	.word	0x0801a580

080148d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b08a      	sub	sp, #40	@ 0x28
 80148d4:	af02      	add	r7, sp, #8
 80148d6:	60f8      	str	r0, [r7, #12]
 80148d8:	60b9      	str	r1, [r7, #8]
 80148da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d106      	bne.n	80148f4 <etharp_output+0x24>
 80148e6:	4b73      	ldr	r3, [pc, #460]	@ (8014ab4 <etharp_output+0x1e4>)
 80148e8:	f240 321e 	movw	r2, #798	@ 0x31e
 80148ec:	4972      	ldr	r1, [pc, #456]	@ (8014ab8 <etharp_output+0x1e8>)
 80148ee:	4873      	ldr	r0, [pc, #460]	@ (8014abc <etharp_output+0x1ec>)
 80148f0:	f002 fad4 	bl	8016e9c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d106      	bne.n	8014908 <etharp_output+0x38>
 80148fa:	4b6e      	ldr	r3, [pc, #440]	@ (8014ab4 <etharp_output+0x1e4>)
 80148fc:	f240 321f 	movw	r2, #799	@ 0x31f
 8014900:	496f      	ldr	r1, [pc, #444]	@ (8014ac0 <etharp_output+0x1f0>)
 8014902:	486e      	ldr	r0, [pc, #440]	@ (8014abc <etharp_output+0x1ec>)
 8014904:	f002 faca 	bl	8016e9c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d106      	bne.n	801491c <etharp_output+0x4c>
 801490e:	4b69      	ldr	r3, [pc, #420]	@ (8014ab4 <etharp_output+0x1e4>)
 8014910:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014914:	496b      	ldr	r1, [pc, #428]	@ (8014ac4 <etharp_output+0x1f4>)
 8014916:	4869      	ldr	r0, [pc, #420]	@ (8014abc <etharp_output+0x1ec>)
 8014918:	f002 fac0 	bl	8016e9c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	68f9      	ldr	r1, [r7, #12]
 8014922:	4618      	mov	r0, r3
 8014924:	f000 fef8 	bl	8015718 <ip4_addr_isbroadcast_u32>
 8014928:	4603      	mov	r3, r0
 801492a:	2b00      	cmp	r3, #0
 801492c:	d002      	beq.n	8014934 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801492e:	4b66      	ldr	r3, [pc, #408]	@ (8014ac8 <etharp_output+0x1f8>)
 8014930:	61fb      	str	r3, [r7, #28]
 8014932:	e0af      	b.n	8014a94 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801493c:	2be0      	cmp	r3, #224	@ 0xe0
 801493e:	d118      	bne.n	8014972 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014940:	2301      	movs	r3, #1
 8014942:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014944:	2300      	movs	r3, #0
 8014946:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014948:	235e      	movs	r3, #94	@ 0x5e
 801494a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	3301      	adds	r3, #1
 8014950:	781b      	ldrb	r3, [r3, #0]
 8014952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014956:	b2db      	uxtb	r3, r3
 8014958:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	3302      	adds	r3, #2
 801495e:	781b      	ldrb	r3, [r3, #0]
 8014960:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	3303      	adds	r3, #3
 8014966:	781b      	ldrb	r3, [r3, #0]
 8014968:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801496a:	f107 0310 	add.w	r3, r7, #16
 801496e:	61fb      	str	r3, [r7, #28]
 8014970:	e090      	b.n	8014a94 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	681a      	ldr	r2, [r3, #0]
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	3304      	adds	r3, #4
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	405a      	eors	r2, r3
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	3308      	adds	r3, #8
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	4013      	ands	r3, r2
 8014986:	2b00      	cmp	r3, #0
 8014988:	d012      	beq.n	80149b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014990:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014994:	4293      	cmp	r3, r2
 8014996:	d00b      	beq.n	80149b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	330c      	adds	r3, #12
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d003      	beq.n	80149aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	330c      	adds	r3, #12
 80149a6:	61bb      	str	r3, [r7, #24]
 80149a8:	e002      	b.n	80149b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80149aa:	f06f 0303 	mvn.w	r3, #3
 80149ae:	e07d      	b.n	8014aac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80149b0:	4b46      	ldr	r3, [pc, #280]	@ (8014acc <etharp_output+0x1fc>)
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	4619      	mov	r1, r3
 80149b6:	4a46      	ldr	r2, [pc, #280]	@ (8014ad0 <etharp_output+0x200>)
 80149b8:	460b      	mov	r3, r1
 80149ba:	005b      	lsls	r3, r3, #1
 80149bc:	440b      	add	r3, r1
 80149be:	00db      	lsls	r3, r3, #3
 80149c0:	4413      	add	r3, r2
 80149c2:	3314      	adds	r3, #20
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	2b01      	cmp	r3, #1
 80149c8:	d925      	bls.n	8014a16 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80149ca:	4b40      	ldr	r3, [pc, #256]	@ (8014acc <etharp_output+0x1fc>)
 80149cc:	781b      	ldrb	r3, [r3, #0]
 80149ce:	4619      	mov	r1, r3
 80149d0:	4a3f      	ldr	r2, [pc, #252]	@ (8014ad0 <etharp_output+0x200>)
 80149d2:	460b      	mov	r3, r1
 80149d4:	005b      	lsls	r3, r3, #1
 80149d6:	440b      	add	r3, r1
 80149d8:	00db      	lsls	r3, r3, #3
 80149da:	4413      	add	r3, r2
 80149dc:	3308      	adds	r3, #8
 80149de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80149e0:	68fa      	ldr	r2, [r7, #12]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d117      	bne.n	8014a16 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80149e6:	69bb      	ldr	r3, [r7, #24]
 80149e8:	681a      	ldr	r2, [r3, #0]
 80149ea:	4b38      	ldr	r3, [pc, #224]	@ (8014acc <etharp_output+0x1fc>)
 80149ec:	781b      	ldrb	r3, [r3, #0]
 80149ee:	4618      	mov	r0, r3
 80149f0:	4937      	ldr	r1, [pc, #220]	@ (8014ad0 <etharp_output+0x200>)
 80149f2:	4603      	mov	r3, r0
 80149f4:	005b      	lsls	r3, r3, #1
 80149f6:	4403      	add	r3, r0
 80149f8:	00db      	lsls	r3, r3, #3
 80149fa:	440b      	add	r3, r1
 80149fc:	3304      	adds	r3, #4
 80149fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d108      	bne.n	8014a16 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014a04:	4b31      	ldr	r3, [pc, #196]	@ (8014acc <etharp_output+0x1fc>)
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	461a      	mov	r2, r3
 8014a0a:	68b9      	ldr	r1, [r7, #8]
 8014a0c:	68f8      	ldr	r0, [r7, #12]
 8014a0e:	f7ff fec5 	bl	801479c <etharp_output_to_arp_index>
 8014a12:	4603      	mov	r3, r0
 8014a14:	e04a      	b.n	8014aac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014a16:	2300      	movs	r3, #0
 8014a18:	75fb      	strb	r3, [r7, #23]
 8014a1a:	e031      	b.n	8014a80 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014a1c:	7dfa      	ldrb	r2, [r7, #23]
 8014a1e:	492c      	ldr	r1, [pc, #176]	@ (8014ad0 <etharp_output+0x200>)
 8014a20:	4613      	mov	r3, r2
 8014a22:	005b      	lsls	r3, r3, #1
 8014a24:	4413      	add	r3, r2
 8014a26:	00db      	lsls	r3, r3, #3
 8014a28:	440b      	add	r3, r1
 8014a2a:	3314      	adds	r3, #20
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	2b01      	cmp	r3, #1
 8014a30:	d923      	bls.n	8014a7a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014a32:	7dfa      	ldrb	r2, [r7, #23]
 8014a34:	4926      	ldr	r1, [pc, #152]	@ (8014ad0 <etharp_output+0x200>)
 8014a36:	4613      	mov	r3, r2
 8014a38:	005b      	lsls	r3, r3, #1
 8014a3a:	4413      	add	r3, r2
 8014a3c:	00db      	lsls	r3, r3, #3
 8014a3e:	440b      	add	r3, r1
 8014a40:	3308      	adds	r3, #8
 8014a42:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014a44:	68fa      	ldr	r2, [r7, #12]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d117      	bne.n	8014a7a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014a4a:	69bb      	ldr	r3, [r7, #24]
 8014a4c:	6819      	ldr	r1, [r3, #0]
 8014a4e:	7dfa      	ldrb	r2, [r7, #23]
 8014a50:	481f      	ldr	r0, [pc, #124]	@ (8014ad0 <etharp_output+0x200>)
 8014a52:	4613      	mov	r3, r2
 8014a54:	005b      	lsls	r3, r3, #1
 8014a56:	4413      	add	r3, r2
 8014a58:	00db      	lsls	r3, r3, #3
 8014a5a:	4403      	add	r3, r0
 8014a5c:	3304      	adds	r3, #4
 8014a5e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014a60:	4299      	cmp	r1, r3
 8014a62:	d10a      	bne.n	8014a7a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014a64:	4a19      	ldr	r2, [pc, #100]	@ (8014acc <etharp_output+0x1fc>)
 8014a66:	7dfb      	ldrb	r3, [r7, #23]
 8014a68:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014a6a:	7dfb      	ldrb	r3, [r7, #23]
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	68b9      	ldr	r1, [r7, #8]
 8014a70:	68f8      	ldr	r0, [r7, #12]
 8014a72:	f7ff fe93 	bl	801479c <etharp_output_to_arp_index>
 8014a76:	4603      	mov	r3, r0
 8014a78:	e018      	b.n	8014aac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014a7a:	7dfb      	ldrb	r3, [r7, #23]
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	75fb      	strb	r3, [r7, #23]
 8014a80:	7dfb      	ldrb	r3, [r7, #23]
 8014a82:	2b09      	cmp	r3, #9
 8014a84:	d9ca      	bls.n	8014a1c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014a86:	68ba      	ldr	r2, [r7, #8]
 8014a88:	69b9      	ldr	r1, [r7, #24]
 8014a8a:	68f8      	ldr	r0, [r7, #12]
 8014a8c:	f000 f822 	bl	8014ad4 <etharp_query>
 8014a90:	4603      	mov	r3, r0
 8014a92:	e00b      	b.n	8014aac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014a9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014a9e:	9300      	str	r3, [sp, #0]
 8014aa0:	69fb      	ldr	r3, [r7, #28]
 8014aa2:	68b9      	ldr	r1, [r7, #8]
 8014aa4:	68f8      	ldr	r0, [r7, #12]
 8014aa6:	f001 fdd5 	bl	8016654 <ethernet_output>
 8014aaa:	4603      	mov	r3, r0
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3720      	adds	r7, #32
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}
 8014ab4:	0801a508 	.word	0x0801a508
 8014ab8:	0801a658 	.word	0x0801a658
 8014abc:	0801a580 	.word	0x0801a580
 8014ac0:	0801a6a8 	.word	0x0801a6a8
 8014ac4:	0801a648 	.word	0x0801a648
 8014ac8:	0801af38 	.word	0x0801af38
 8014acc:	200274b4 	.word	0x200274b4
 8014ad0:	200273c4 	.word	0x200273c4

08014ad4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b08c      	sub	sp, #48	@ 0x30
 8014ad8:	af02      	add	r7, sp, #8
 8014ada:	60f8      	str	r0, [r7, #12]
 8014adc:	60b9      	str	r1, [r7, #8]
 8014ade:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	3326      	adds	r3, #38	@ 0x26
 8014ae4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014ae6:	23ff      	movs	r3, #255	@ 0xff
 8014ae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014aec:	2300      	movs	r3, #0
 8014aee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	68f9      	ldr	r1, [r7, #12]
 8014af6:	4618      	mov	r0, r3
 8014af8:	f000 fe0e 	bl	8015718 <ip4_addr_isbroadcast_u32>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d10c      	bne.n	8014b1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b0a:	2be0      	cmp	r3, #224	@ 0xe0
 8014b0c:	d006      	beq.n	8014b1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014b0e:	68bb      	ldr	r3, [r7, #8]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d003      	beq.n	8014b1c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d102      	bne.n	8014b22 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014b1c:	f06f 030f 	mvn.w	r3, #15
 8014b20:	e101      	b.n	8014d26 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014b22:	68fa      	ldr	r2, [r7, #12]
 8014b24:	2101      	movs	r1, #1
 8014b26:	68b8      	ldr	r0, [r7, #8]
 8014b28:	f7ff fb60 	bl	80141ec <etharp_find_entry>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014b30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	da02      	bge.n	8014b3e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014b38:	8a7b      	ldrh	r3, [r7, #18]
 8014b3a:	b25b      	sxtb	r3, r3
 8014b3c:	e0f3      	b.n	8014d26 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014b3e:	8a7b      	ldrh	r3, [r7, #18]
 8014b40:	2b7e      	cmp	r3, #126	@ 0x7e
 8014b42:	d906      	bls.n	8014b52 <etharp_query+0x7e>
 8014b44:	4b7a      	ldr	r3, [pc, #488]	@ (8014d30 <etharp_query+0x25c>)
 8014b46:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014b4a:	497a      	ldr	r1, [pc, #488]	@ (8014d34 <etharp_query+0x260>)
 8014b4c:	487a      	ldr	r0, [pc, #488]	@ (8014d38 <etharp_query+0x264>)
 8014b4e:	f002 f9a5 	bl	8016e9c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014b52:	8a7b      	ldrh	r3, [r7, #18]
 8014b54:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014b56:	7c7a      	ldrb	r2, [r7, #17]
 8014b58:	4978      	ldr	r1, [pc, #480]	@ (8014d3c <etharp_query+0x268>)
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	005b      	lsls	r3, r3, #1
 8014b5e:	4413      	add	r3, r2
 8014b60:	00db      	lsls	r3, r3, #3
 8014b62:	440b      	add	r3, r1
 8014b64:	3314      	adds	r3, #20
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d115      	bne.n	8014b98 <etharp_query+0xc4>
    is_new_entry = 1;
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014b70:	7c7a      	ldrb	r2, [r7, #17]
 8014b72:	4972      	ldr	r1, [pc, #456]	@ (8014d3c <etharp_query+0x268>)
 8014b74:	4613      	mov	r3, r2
 8014b76:	005b      	lsls	r3, r3, #1
 8014b78:	4413      	add	r3, r2
 8014b7a:	00db      	lsls	r3, r3, #3
 8014b7c:	440b      	add	r3, r1
 8014b7e:	3314      	adds	r3, #20
 8014b80:	2201      	movs	r2, #1
 8014b82:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014b84:	7c7a      	ldrb	r2, [r7, #17]
 8014b86:	496d      	ldr	r1, [pc, #436]	@ (8014d3c <etharp_query+0x268>)
 8014b88:	4613      	mov	r3, r2
 8014b8a:	005b      	lsls	r3, r3, #1
 8014b8c:	4413      	add	r3, r2
 8014b8e:	00db      	lsls	r3, r3, #3
 8014b90:	440b      	add	r3, r1
 8014b92:	3308      	adds	r3, #8
 8014b94:	68fa      	ldr	r2, [r7, #12]
 8014b96:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014b98:	7c7a      	ldrb	r2, [r7, #17]
 8014b9a:	4968      	ldr	r1, [pc, #416]	@ (8014d3c <etharp_query+0x268>)
 8014b9c:	4613      	mov	r3, r2
 8014b9e:	005b      	lsls	r3, r3, #1
 8014ba0:	4413      	add	r3, r2
 8014ba2:	00db      	lsls	r3, r3, #3
 8014ba4:	440b      	add	r3, r1
 8014ba6:	3314      	adds	r3, #20
 8014ba8:	781b      	ldrb	r3, [r3, #0]
 8014baa:	2b01      	cmp	r3, #1
 8014bac:	d011      	beq.n	8014bd2 <etharp_query+0xfe>
 8014bae:	7c7a      	ldrb	r2, [r7, #17]
 8014bb0:	4962      	ldr	r1, [pc, #392]	@ (8014d3c <etharp_query+0x268>)
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	005b      	lsls	r3, r3, #1
 8014bb6:	4413      	add	r3, r2
 8014bb8:	00db      	lsls	r3, r3, #3
 8014bba:	440b      	add	r3, r1
 8014bbc:	3314      	adds	r3, #20
 8014bbe:	781b      	ldrb	r3, [r3, #0]
 8014bc0:	2b01      	cmp	r3, #1
 8014bc2:	d806      	bhi.n	8014bd2 <etharp_query+0xfe>
 8014bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8014d30 <etharp_query+0x25c>)
 8014bc6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014bca:	495d      	ldr	r1, [pc, #372]	@ (8014d40 <etharp_query+0x26c>)
 8014bcc:	485a      	ldr	r0, [pc, #360]	@ (8014d38 <etharp_query+0x264>)
 8014bce:	f002 f965 	bl	8016e9c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014bd2:	6a3b      	ldr	r3, [r7, #32]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d102      	bne.n	8014bde <etharp_query+0x10a>
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d10c      	bne.n	8014bf8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014bde:	68b9      	ldr	r1, [r7, #8]
 8014be0:	68f8      	ldr	r0, [r7, #12]
 8014be2:	f000 f963 	bl	8014eac <etharp_request>
 8014be6:	4603      	mov	r3, r0
 8014be8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d102      	bne.n	8014bf8 <etharp_query+0x124>
      return result;
 8014bf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014bf6:	e096      	b.n	8014d26 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d106      	bne.n	8014c0c <etharp_query+0x138>
 8014bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8014d30 <etharp_query+0x25c>)
 8014c00:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014c04:	494f      	ldr	r1, [pc, #316]	@ (8014d44 <etharp_query+0x270>)
 8014c06:	484c      	ldr	r0, [pc, #304]	@ (8014d38 <etharp_query+0x264>)
 8014c08:	f002 f948 	bl	8016e9c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014c0c:	7c7a      	ldrb	r2, [r7, #17]
 8014c0e:	494b      	ldr	r1, [pc, #300]	@ (8014d3c <etharp_query+0x268>)
 8014c10:	4613      	mov	r3, r2
 8014c12:	005b      	lsls	r3, r3, #1
 8014c14:	4413      	add	r3, r2
 8014c16:	00db      	lsls	r3, r3, #3
 8014c18:	440b      	add	r3, r1
 8014c1a:	3314      	adds	r3, #20
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	2b01      	cmp	r3, #1
 8014c20:	d917      	bls.n	8014c52 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014c22:	4a49      	ldr	r2, [pc, #292]	@ (8014d48 <etharp_query+0x274>)
 8014c24:	7c7b      	ldrb	r3, [r7, #17]
 8014c26:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014c28:	7c7a      	ldrb	r2, [r7, #17]
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	005b      	lsls	r3, r3, #1
 8014c2e:	4413      	add	r3, r2
 8014c30:	00db      	lsls	r3, r3, #3
 8014c32:	3308      	adds	r3, #8
 8014c34:	4a41      	ldr	r2, [pc, #260]	@ (8014d3c <etharp_query+0x268>)
 8014c36:	4413      	add	r3, r2
 8014c38:	3304      	adds	r3, #4
 8014c3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014c3e:	9200      	str	r2, [sp, #0]
 8014c40:	697a      	ldr	r2, [r7, #20]
 8014c42:	6879      	ldr	r1, [r7, #4]
 8014c44:	68f8      	ldr	r0, [r7, #12]
 8014c46:	f001 fd05 	bl	8016654 <ethernet_output>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014c50:	e067      	b.n	8014d22 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014c52:	7c7a      	ldrb	r2, [r7, #17]
 8014c54:	4939      	ldr	r1, [pc, #228]	@ (8014d3c <etharp_query+0x268>)
 8014c56:	4613      	mov	r3, r2
 8014c58:	005b      	lsls	r3, r3, #1
 8014c5a:	4413      	add	r3, r2
 8014c5c:	00db      	lsls	r3, r3, #3
 8014c5e:	440b      	add	r3, r1
 8014c60:	3314      	adds	r3, #20
 8014c62:	781b      	ldrb	r3, [r3, #0]
 8014c64:	2b01      	cmp	r3, #1
 8014c66:	d15c      	bne.n	8014d22 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014c68:	2300      	movs	r3, #0
 8014c6a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014c70:	e01c      	b.n	8014cac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	895a      	ldrh	r2, [r3, #10]
 8014c76:	69fb      	ldr	r3, [r7, #28]
 8014c78:	891b      	ldrh	r3, [r3, #8]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d10a      	bne.n	8014c94 <etharp_query+0x1c0>
 8014c7e:	69fb      	ldr	r3, [r7, #28]
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d006      	beq.n	8014c94 <etharp_query+0x1c0>
 8014c86:	4b2a      	ldr	r3, [pc, #168]	@ (8014d30 <etharp_query+0x25c>)
 8014c88:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014c8c:	492f      	ldr	r1, [pc, #188]	@ (8014d4c <etharp_query+0x278>)
 8014c8e:	482a      	ldr	r0, [pc, #168]	@ (8014d38 <etharp_query+0x264>)
 8014c90:	f002 f904 	bl	8016e9c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014c94:	69fb      	ldr	r3, [r7, #28]
 8014c96:	7b1b      	ldrb	r3, [r3, #12]
 8014c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d002      	beq.n	8014ca6 <etharp_query+0x1d2>
        copy_needed = 1;
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	61bb      	str	r3, [r7, #24]
        break;
 8014ca4:	e005      	b.n	8014cb2 <etharp_query+0x1de>
      }
      p = p->next;
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014cac:	69fb      	ldr	r3, [r7, #28]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d1df      	bne.n	8014c72 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014cb2:	69bb      	ldr	r3, [r7, #24]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d007      	beq.n	8014cc8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014cb8:	687a      	ldr	r2, [r7, #4]
 8014cba:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014cbe:	200e      	movs	r0, #14
 8014cc0:	f7f9 fc04 	bl	800e4cc <pbuf_clone>
 8014cc4:	61f8      	str	r0, [r7, #28]
 8014cc6:	e004      	b.n	8014cd2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014ccc:	69f8      	ldr	r0, [r7, #28]
 8014cce:	f7f9 fa3b 	bl	800e148 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014cd2:	69fb      	ldr	r3, [r7, #28]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d021      	beq.n	8014d1c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014cd8:	7c7a      	ldrb	r2, [r7, #17]
 8014cda:	4918      	ldr	r1, [pc, #96]	@ (8014d3c <etharp_query+0x268>)
 8014cdc:	4613      	mov	r3, r2
 8014cde:	005b      	lsls	r3, r3, #1
 8014ce0:	4413      	add	r3, r2
 8014ce2:	00db      	lsls	r3, r3, #3
 8014ce4:	440b      	add	r3, r1
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d00a      	beq.n	8014d02 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014cec:	7c7a      	ldrb	r2, [r7, #17]
 8014cee:	4913      	ldr	r1, [pc, #76]	@ (8014d3c <etharp_query+0x268>)
 8014cf0:	4613      	mov	r3, r2
 8014cf2:	005b      	lsls	r3, r3, #1
 8014cf4:	4413      	add	r3, r2
 8014cf6:	00db      	lsls	r3, r3, #3
 8014cf8:	440b      	add	r3, r1
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7f9 f97d 	bl	800dffc <pbuf_free>
      }
      arp_table[i].q = p;
 8014d02:	7c7a      	ldrb	r2, [r7, #17]
 8014d04:	490d      	ldr	r1, [pc, #52]	@ (8014d3c <etharp_query+0x268>)
 8014d06:	4613      	mov	r3, r2
 8014d08:	005b      	lsls	r3, r3, #1
 8014d0a:	4413      	add	r3, r2
 8014d0c:	00db      	lsls	r3, r3, #3
 8014d0e:	440b      	add	r3, r1
 8014d10:	69fa      	ldr	r2, [r7, #28]
 8014d12:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014d14:	2300      	movs	r3, #0
 8014d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014d1a:	e002      	b.n	8014d22 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014d1c:	23ff      	movs	r3, #255	@ 0xff
 8014d1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014d22:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014d26:	4618      	mov	r0, r3
 8014d28:	3728      	adds	r7, #40	@ 0x28
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}
 8014d2e:	bf00      	nop
 8014d30:	0801a508 	.word	0x0801a508
 8014d34:	0801a6b4 	.word	0x0801a6b4
 8014d38:	0801a580 	.word	0x0801a580
 8014d3c:	200273c4 	.word	0x200273c4
 8014d40:	0801a6c4 	.word	0x0801a6c4
 8014d44:	0801a6a8 	.word	0x0801a6a8
 8014d48:	200274b4 	.word	0x200274b4
 8014d4c:	0801a6ec 	.word	0x0801a6ec

08014d50 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b08a      	sub	sp, #40	@ 0x28
 8014d54:	af02      	add	r7, sp, #8
 8014d56:	60f8      	str	r0, [r7, #12]
 8014d58:	60b9      	str	r1, [r7, #8]
 8014d5a:	607a      	str	r2, [r7, #4]
 8014d5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d106      	bne.n	8014d76 <etharp_raw+0x26>
 8014d68:	4b3a      	ldr	r3, [pc, #232]	@ (8014e54 <etharp_raw+0x104>)
 8014d6a:	f240 4257 	movw	r2, #1111	@ 0x457
 8014d6e:	493a      	ldr	r1, [pc, #232]	@ (8014e58 <etharp_raw+0x108>)
 8014d70:	483a      	ldr	r0, [pc, #232]	@ (8014e5c <etharp_raw+0x10c>)
 8014d72:	f002 f893 	bl	8016e9c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014d76:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014d7a:	211c      	movs	r1, #28
 8014d7c:	200e      	movs	r0, #14
 8014d7e:	f7f8 fe59 	bl	800da34 <pbuf_alloc>
 8014d82:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014d84:	69bb      	ldr	r3, [r7, #24]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d102      	bne.n	8014d90 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d8e:	e05d      	b.n	8014e4c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014d90:	69bb      	ldr	r3, [r7, #24]
 8014d92:	895b      	ldrh	r3, [r3, #10]
 8014d94:	2b1b      	cmp	r3, #27
 8014d96:	d806      	bhi.n	8014da6 <etharp_raw+0x56>
 8014d98:	4b2e      	ldr	r3, [pc, #184]	@ (8014e54 <etharp_raw+0x104>)
 8014d9a:	f240 4262 	movw	r2, #1122	@ 0x462
 8014d9e:	4930      	ldr	r1, [pc, #192]	@ (8014e60 <etharp_raw+0x110>)
 8014da0:	482e      	ldr	r0, [pc, #184]	@ (8014e5c <etharp_raw+0x10c>)
 8014da2:	f002 f87b 	bl	8016e9c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014da6:	69bb      	ldr	r3, [r7, #24]
 8014da8:	685b      	ldr	r3, [r3, #4]
 8014daa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014dac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014dae:	4618      	mov	r0, r3
 8014db0:	f7f7 fd36 	bl	800c820 <lwip_htons>
 8014db4:	4603      	mov	r3, r0
 8014db6:	461a      	mov	r2, r3
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014dc2:	2b06      	cmp	r3, #6
 8014dc4:	d006      	beq.n	8014dd4 <etharp_raw+0x84>
 8014dc6:	4b23      	ldr	r3, [pc, #140]	@ (8014e54 <etharp_raw+0x104>)
 8014dc8:	f240 4269 	movw	r2, #1129	@ 0x469
 8014dcc:	4925      	ldr	r1, [pc, #148]	@ (8014e64 <etharp_raw+0x114>)
 8014dce:	4823      	ldr	r0, [pc, #140]	@ (8014e5c <etharp_raw+0x10c>)
 8014dd0:	f002 f864 	bl	8016e9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	3308      	adds	r3, #8
 8014dd8:	2206      	movs	r2, #6
 8014dda:	6839      	ldr	r1, [r7, #0]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f002 fa88 	bl	80172f2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	3312      	adds	r3, #18
 8014de6:	2206      	movs	r2, #6
 8014de8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014dea:	4618      	mov	r0, r3
 8014dec:	f002 fa81 	bl	80172f2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	330e      	adds	r3, #14
 8014df4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014df6:	6812      	ldr	r2, [r2, #0]
 8014df8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	3318      	adds	r3, #24
 8014dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014e00:	6812      	ldr	r2, [r2, #0]
 8014e02:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	2200      	movs	r2, #0
 8014e08:	701a      	strb	r2, [r3, #0]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	f042 0201 	orr.w	r2, r2, #1
 8014e10:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	2200      	movs	r2, #0
 8014e16:	f042 0208 	orr.w	r2, r2, #8
 8014e1a:	709a      	strb	r2, [r3, #2]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	2206      	movs	r2, #6
 8014e24:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014e26:	697b      	ldr	r3, [r7, #20]
 8014e28:	2204      	movs	r2, #4
 8014e2a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014e2c:	f640 0306 	movw	r3, #2054	@ 0x806
 8014e30:	9300      	str	r3, [sp, #0]
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	68ba      	ldr	r2, [r7, #8]
 8014e36:	69b9      	ldr	r1, [r7, #24]
 8014e38:	68f8      	ldr	r0, [r7, #12]
 8014e3a:	f001 fc0b 	bl	8016654 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014e3e:	69b8      	ldr	r0, [r7, #24]
 8014e40:	f7f9 f8dc 	bl	800dffc <pbuf_free>
  p = NULL;
 8014e44:	2300      	movs	r3, #0
 8014e46:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014e48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3720      	adds	r7, #32
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}
 8014e54:	0801a508 	.word	0x0801a508
 8014e58:	0801a658 	.word	0x0801a658
 8014e5c:	0801a580 	.word	0x0801a580
 8014e60:	0801a708 	.word	0x0801a708
 8014e64:	0801a73c 	.word	0x0801a73c

08014e68 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b088      	sub	sp, #32
 8014e6c:	af04      	add	r7, sp, #16
 8014e6e:	60f8      	str	r0, [r7, #12]
 8014e70:	60b9      	str	r1, [r7, #8]
 8014e72:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014e84:	2201      	movs	r2, #1
 8014e86:	9203      	str	r2, [sp, #12]
 8014e88:	68ba      	ldr	r2, [r7, #8]
 8014e8a:	9202      	str	r2, [sp, #8]
 8014e8c:	4a06      	ldr	r2, [pc, #24]	@ (8014ea8 <etharp_request_dst+0x40>)
 8014e8e:	9201      	str	r2, [sp, #4]
 8014e90:	9300      	str	r3, [sp, #0]
 8014e92:	4603      	mov	r3, r0
 8014e94:	687a      	ldr	r2, [r7, #4]
 8014e96:	68f8      	ldr	r0, [r7, #12]
 8014e98:	f7ff ff5a 	bl	8014d50 <etharp_raw>
 8014e9c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3710      	adds	r7, #16
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}
 8014ea6:	bf00      	nop
 8014ea8:	0801af40 	.word	0x0801af40

08014eac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b082      	sub	sp, #8
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014eb6:	4a05      	ldr	r2, [pc, #20]	@ (8014ecc <etharp_request+0x20>)
 8014eb8:	6839      	ldr	r1, [r7, #0]
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f7ff ffd4 	bl	8014e68 <etharp_request_dst>
 8014ec0:	4603      	mov	r3, r0
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3708      	adds	r7, #8
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}
 8014eca:	bf00      	nop
 8014ecc:	0801af38 	.word	0x0801af38

08014ed0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b08e      	sub	sp, #56	@ 0x38
 8014ed4:	af04      	add	r7, sp, #16
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014eda:	4b79      	ldr	r3, [pc, #484]	@ (80150c0 <icmp_input+0x1f0>)
 8014edc:	689b      	ldr	r3, [r3, #8]
 8014ede:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	f003 030f 	and.w	r3, r3, #15
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	009b      	lsls	r3, r3, #2
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014ef0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014ef2:	2b13      	cmp	r3, #19
 8014ef4:	f240 80cd 	bls.w	8015092 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	895b      	ldrh	r3, [r3, #10]
 8014efc:	2b03      	cmp	r3, #3
 8014efe:	f240 80ca 	bls.w	8015096 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	685b      	ldr	r3, [r3, #4]
 8014f06:	781b      	ldrb	r3, [r3, #0]
 8014f08:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014f0c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	f000 80b7 	beq.w	8015084 <icmp_input+0x1b4>
 8014f16:	2b08      	cmp	r3, #8
 8014f18:	f040 80b7 	bne.w	801508a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014f1c:	4b69      	ldr	r3, [pc, #420]	@ (80150c4 <icmp_input+0x1f4>)
 8014f1e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f20:	4b67      	ldr	r3, [pc, #412]	@ (80150c0 <icmp_input+0x1f0>)
 8014f22:	695b      	ldr	r3, [r3, #20]
 8014f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014f28:	2be0      	cmp	r3, #224	@ 0xe0
 8014f2a:	f000 80bb 	beq.w	80150a4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014f2e:	4b64      	ldr	r3, [pc, #400]	@ (80150c0 <icmp_input+0x1f0>)
 8014f30:	695b      	ldr	r3, [r3, #20]
 8014f32:	4a63      	ldr	r2, [pc, #396]	@ (80150c0 <icmp_input+0x1f0>)
 8014f34:	6812      	ldr	r2, [r2, #0]
 8014f36:	4611      	mov	r1, r2
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f000 fbed 	bl	8015718 <ip4_addr_isbroadcast_u32>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	f040 80b1 	bne.w	80150a8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	891b      	ldrh	r3, [r3, #8]
 8014f4a:	2b07      	cmp	r3, #7
 8014f4c:	f240 80a5 	bls.w	801509a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014f50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014f52:	330e      	adds	r3, #14
 8014f54:	4619      	mov	r1, r3
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	f7f8 ffba 	bl	800ded0 <pbuf_add_header>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d04b      	beq.n	8014ffa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	891a      	ldrh	r2, [r3, #8]
 8014f66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014f68:	4413      	add	r3, r2
 8014f6a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	891b      	ldrh	r3, [r3, #8]
 8014f70:	8b7a      	ldrh	r2, [r7, #26]
 8014f72:	429a      	cmp	r2, r3
 8014f74:	f0c0 809a 	bcc.w	80150ac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014f78:	8b7b      	ldrh	r3, [r7, #26]
 8014f7a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014f7e:	4619      	mov	r1, r3
 8014f80:	200e      	movs	r0, #14
 8014f82:	f7f8 fd57 	bl	800da34 <pbuf_alloc>
 8014f86:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	f000 8090 	beq.w	80150b0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	895b      	ldrh	r3, [r3, #10]
 8014f94:	461a      	mov	r2, r3
 8014f96:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014f98:	3308      	adds	r3, #8
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d203      	bcs.n	8014fa6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014f9e:	6978      	ldr	r0, [r7, #20]
 8014fa0:	f7f9 f82c 	bl	800dffc <pbuf_free>
          goto icmperr;
 8014fa4:	e085      	b.n	80150b2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014fa6:	697b      	ldr	r3, [r7, #20]
 8014fa8:	685b      	ldr	r3, [r3, #4]
 8014faa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014fac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f002 f99f 	bl	80172f2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014fb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	6978      	ldr	r0, [r7, #20]
 8014fba:	f7f8 ff99 	bl	800def0 <pbuf_remove_header>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d009      	beq.n	8014fd8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014fc4:	4b40      	ldr	r3, [pc, #256]	@ (80150c8 <icmp_input+0x1f8>)
 8014fc6:	22b6      	movs	r2, #182	@ 0xb6
 8014fc8:	4940      	ldr	r1, [pc, #256]	@ (80150cc <icmp_input+0x1fc>)
 8014fca:	4841      	ldr	r0, [pc, #260]	@ (80150d0 <icmp_input+0x200>)
 8014fcc:	f001 ff66 	bl	8016e9c <iprintf>
          pbuf_free(r);
 8014fd0:	6978      	ldr	r0, [r7, #20]
 8014fd2:	f7f9 f813 	bl	800dffc <pbuf_free>
          goto icmperr;
 8014fd6:	e06c      	b.n	80150b2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014fd8:	6879      	ldr	r1, [r7, #4]
 8014fda:	6978      	ldr	r0, [r7, #20]
 8014fdc:	f7f9 f932 	bl	800e244 <pbuf_copy>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d003      	beq.n	8014fee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014fe6:	6978      	ldr	r0, [r7, #20]
 8014fe8:	f7f9 f808 	bl	800dffc <pbuf_free>
          goto icmperr;
 8014fec:	e061      	b.n	80150b2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f7f9 f804 	bl	800dffc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	607b      	str	r3, [r7, #4]
 8014ff8:	e00f      	b.n	801501a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014ffa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014ffc:	330e      	adds	r3, #14
 8014ffe:	4619      	mov	r1, r3
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f7f8 ff75 	bl	800def0 <pbuf_remove_header>
 8015006:	4603      	mov	r3, r0
 8015008:	2b00      	cmp	r3, #0
 801500a:	d006      	beq.n	801501a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801500c:	4b2e      	ldr	r3, [pc, #184]	@ (80150c8 <icmp_input+0x1f8>)
 801500e:	22c7      	movs	r2, #199	@ 0xc7
 8015010:	4930      	ldr	r1, [pc, #192]	@ (80150d4 <icmp_input+0x204>)
 8015012:	482f      	ldr	r0, [pc, #188]	@ (80150d0 <icmp_input+0x200>)
 8015014:	f001 ff42 	bl	8016e9c <iprintf>
          goto icmperr;
 8015018:	e04b      	b.n	80150b2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	685b      	ldr	r3, [r3, #4]
 801501e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015020:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015022:	4619      	mov	r1, r3
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f7f8 ff53 	bl	800ded0 <pbuf_add_header>
 801502a:	4603      	mov	r3, r0
 801502c:	2b00      	cmp	r3, #0
 801502e:	d12b      	bne.n	8015088 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015036:	69fb      	ldr	r3, [r7, #28]
 8015038:	681a      	ldr	r2, [r3, #0]
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801503e:	4b20      	ldr	r3, [pc, #128]	@ (80150c0 <icmp_input+0x1f0>)
 8015040:	691a      	ldr	r2, [r3, #16]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015046:	693b      	ldr	r3, [r7, #16]
 8015048:	2200      	movs	r2, #0
 801504a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801504c:	693b      	ldr	r3, [r7, #16]
 801504e:	2200      	movs	r2, #0
 8015050:	709a      	strb	r2, [r3, #2]
 8015052:	2200      	movs	r2, #0
 8015054:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	22ff      	movs	r2, #255	@ 0xff
 801505a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	2200      	movs	r2, #0
 8015060:	729a      	strb	r2, [r3, #10]
 8015062:	2200      	movs	r2, #0
 8015064:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	9302      	str	r3, [sp, #8]
 801506a:	2301      	movs	r3, #1
 801506c:	9301      	str	r3, [sp, #4]
 801506e:	2300      	movs	r3, #0
 8015070:	9300      	str	r3, [sp, #0]
 8015072:	23ff      	movs	r3, #255	@ 0xff
 8015074:	2200      	movs	r2, #0
 8015076:	69f9      	ldr	r1, [r7, #28]
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f000 fa75 	bl	8015568 <ip4_output_if>
 801507e:	4603      	mov	r3, r0
 8015080:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015082:	e001      	b.n	8015088 <icmp_input+0x1b8>
      break;
 8015084:	bf00      	nop
 8015086:	e000      	b.n	801508a <icmp_input+0x1ba>
      break;
 8015088:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801508a:	6878      	ldr	r0, [r7, #4]
 801508c:	f7f8 ffb6 	bl	800dffc <pbuf_free>
  return;
 8015090:	e013      	b.n	80150ba <icmp_input+0x1ea>
    goto lenerr;
 8015092:	bf00      	nop
 8015094:	e002      	b.n	801509c <icmp_input+0x1cc>
    goto lenerr;
 8015096:	bf00      	nop
 8015098:	e000      	b.n	801509c <icmp_input+0x1cc>
        goto lenerr;
 801509a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f7f8 ffad 	bl	800dffc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80150a2:	e00a      	b.n	80150ba <icmp_input+0x1ea>
        goto icmperr;
 80150a4:	bf00      	nop
 80150a6:	e004      	b.n	80150b2 <icmp_input+0x1e2>
        goto icmperr;
 80150a8:	bf00      	nop
 80150aa:	e002      	b.n	80150b2 <icmp_input+0x1e2>
          goto icmperr;
 80150ac:	bf00      	nop
 80150ae:	e000      	b.n	80150b2 <icmp_input+0x1e2>
          goto icmperr;
 80150b0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80150b2:	6878      	ldr	r0, [r7, #4]
 80150b4:	f7f8 ffa2 	bl	800dffc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80150b8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80150ba:	3728      	adds	r7, #40	@ 0x28
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	20024264 	.word	0x20024264
 80150c4:	20024278 	.word	0x20024278
 80150c8:	0801a780 	.word	0x0801a780
 80150cc:	0801a7b8 	.word	0x0801a7b8
 80150d0:	0801a7f0 	.word	0x0801a7f0
 80150d4:	0801a818 	.word	0x0801a818

080150d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b082      	sub	sp, #8
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	460b      	mov	r3, r1
 80150e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80150e4:	78fb      	ldrb	r3, [r7, #3]
 80150e6:	461a      	mov	r2, r3
 80150e8:	2103      	movs	r1, #3
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	f000 f814 	bl	8015118 <icmp_send_response>
}
 80150f0:	bf00      	nop
 80150f2:	3708      	adds	r7, #8
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}

080150f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b082      	sub	sp, #8
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
 8015100:	460b      	mov	r3, r1
 8015102:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015104:	78fb      	ldrb	r3, [r7, #3]
 8015106:	461a      	mov	r2, r3
 8015108:	210b      	movs	r1, #11
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f000 f804 	bl	8015118 <icmp_send_response>
}
 8015110:	bf00      	nop
 8015112:	3708      	adds	r7, #8
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}

08015118 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b08c      	sub	sp, #48	@ 0x30
 801511c:	af04      	add	r7, sp, #16
 801511e:	6078      	str	r0, [r7, #4]
 8015120:	460b      	mov	r3, r1
 8015122:	70fb      	strb	r3, [r7, #3]
 8015124:	4613      	mov	r3, r2
 8015126:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015128:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801512c:	2124      	movs	r1, #36	@ 0x24
 801512e:	2022      	movs	r0, #34	@ 0x22
 8015130:	f7f8 fc80 	bl	800da34 <pbuf_alloc>
 8015134:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015136:	69fb      	ldr	r3, [r7, #28]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d04c      	beq.n	80151d6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801513c:	69fb      	ldr	r3, [r7, #28]
 801513e:	895b      	ldrh	r3, [r3, #10]
 8015140:	2b23      	cmp	r3, #35	@ 0x23
 8015142:	d806      	bhi.n	8015152 <icmp_send_response+0x3a>
 8015144:	4b26      	ldr	r3, [pc, #152]	@ (80151e0 <icmp_send_response+0xc8>)
 8015146:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801514a:	4926      	ldr	r1, [pc, #152]	@ (80151e4 <icmp_send_response+0xcc>)
 801514c:	4826      	ldr	r0, [pc, #152]	@ (80151e8 <icmp_send_response+0xd0>)
 801514e:	f001 fea5 	bl	8016e9c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	685b      	ldr	r3, [r3, #4]
 8015156:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	78fa      	ldrb	r2, [r7, #3]
 8015162:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015164:	697b      	ldr	r3, [r7, #20]
 8015166:	78ba      	ldrb	r2, [r7, #2]
 8015168:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801516a:	697b      	ldr	r3, [r7, #20]
 801516c:	2200      	movs	r2, #0
 801516e:	711a      	strb	r2, [r3, #4]
 8015170:	2200      	movs	r2, #0
 8015172:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	2200      	movs	r2, #0
 8015178:	719a      	strb	r2, [r3, #6]
 801517a:	2200      	movs	r2, #0
 801517c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801517e:	69fb      	ldr	r3, [r7, #28]
 8015180:	685b      	ldr	r3, [r3, #4]
 8015182:	f103 0008 	add.w	r0, r3, #8
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	685b      	ldr	r3, [r3, #4]
 801518a:	221c      	movs	r2, #28
 801518c:	4619      	mov	r1, r3
 801518e:	f002 f8b0 	bl	80172f2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015192:	69bb      	ldr	r3, [r7, #24]
 8015194:	68db      	ldr	r3, [r3, #12]
 8015196:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015198:	f107 030c 	add.w	r3, r7, #12
 801519c:	4618      	mov	r0, r3
 801519e:	f000 f825 	bl	80151ec <ip4_route>
 80151a2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d011      	beq.n	80151ce <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	2200      	movs	r2, #0
 80151ae:	709a      	strb	r2, [r3, #2]
 80151b0:	2200      	movs	r2, #0
 80151b2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80151b4:	f107 020c 	add.w	r2, r7, #12
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	9302      	str	r3, [sp, #8]
 80151bc:	2301      	movs	r3, #1
 80151be:	9301      	str	r3, [sp, #4]
 80151c0:	2300      	movs	r3, #0
 80151c2:	9300      	str	r3, [sp, #0]
 80151c4:	23ff      	movs	r3, #255	@ 0xff
 80151c6:	2100      	movs	r1, #0
 80151c8:	69f8      	ldr	r0, [r7, #28]
 80151ca:	f000 f9cd 	bl	8015568 <ip4_output_if>
  }
  pbuf_free(q);
 80151ce:	69f8      	ldr	r0, [r7, #28]
 80151d0:	f7f8 ff14 	bl	800dffc <pbuf_free>
 80151d4:	e000      	b.n	80151d8 <icmp_send_response+0xc0>
    return;
 80151d6:	bf00      	nop
}
 80151d8:	3720      	adds	r7, #32
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}
 80151de:	bf00      	nop
 80151e0:	0801a780 	.word	0x0801a780
 80151e4:	0801a84c 	.word	0x0801a84c
 80151e8:	0801a7f0 	.word	0x0801a7f0

080151ec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80151ec:	b480      	push	{r7}
 80151ee:	b085      	sub	sp, #20
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80151f4:	4b33      	ldr	r3, [pc, #204]	@ (80152c4 <ip4_route+0xd8>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	60fb      	str	r3, [r7, #12]
 80151fa:	e036      	b.n	801526a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015202:	f003 0301 	and.w	r3, r3, #1
 8015206:	b2db      	uxtb	r3, r3
 8015208:	2b00      	cmp	r3, #0
 801520a:	d02b      	beq.n	8015264 <ip4_route+0x78>
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015212:	089b      	lsrs	r3, r3, #2
 8015214:	f003 0301 	and.w	r3, r3, #1
 8015218:	b2db      	uxtb	r3, r3
 801521a:	2b00      	cmp	r3, #0
 801521c:	d022      	beq.n	8015264 <ip4_route+0x78>
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	3304      	adds	r3, #4
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d01d      	beq.n	8015264 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	681a      	ldr	r2, [r3, #0]
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	3304      	adds	r3, #4
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	405a      	eors	r2, r3
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	3308      	adds	r3, #8
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	4013      	ands	r3, r2
 801523c:	2b00      	cmp	r3, #0
 801523e:	d101      	bne.n	8015244 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	e038      	b.n	80152b6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801524a:	f003 0302 	and.w	r3, r3, #2
 801524e:	2b00      	cmp	r3, #0
 8015250:	d108      	bne.n	8015264 <ip4_route+0x78>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	681a      	ldr	r2, [r3, #0]
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	330c      	adds	r3, #12
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	429a      	cmp	r2, r3
 801525e:	d101      	bne.n	8015264 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	e028      	b.n	80152b6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	60fb      	str	r3, [r7, #12]
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d1c5      	bne.n	80151fc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015270:	4b15      	ldr	r3, [pc, #84]	@ (80152c8 <ip4_route+0xdc>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d01a      	beq.n	80152ae <ip4_route+0xc2>
 8015278:	4b13      	ldr	r3, [pc, #76]	@ (80152c8 <ip4_route+0xdc>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015280:	f003 0301 	and.w	r3, r3, #1
 8015284:	2b00      	cmp	r3, #0
 8015286:	d012      	beq.n	80152ae <ip4_route+0xc2>
 8015288:	4b0f      	ldr	r3, [pc, #60]	@ (80152c8 <ip4_route+0xdc>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015290:	f003 0304 	and.w	r3, r3, #4
 8015294:	2b00      	cmp	r3, #0
 8015296:	d00a      	beq.n	80152ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015298:	4b0b      	ldr	r3, [pc, #44]	@ (80152c8 <ip4_route+0xdc>)
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	3304      	adds	r3, #4
 801529e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d004      	beq.n	80152ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	b2db      	uxtb	r3, r3
 80152aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80152ac:	d101      	bne.n	80152b2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80152ae:	2300      	movs	r3, #0
 80152b0:	e001      	b.n	80152b6 <ip4_route+0xca>
  }

  return netif_default;
 80152b2:	4b05      	ldr	r3, [pc, #20]	@ (80152c8 <ip4_route+0xdc>)
 80152b4:	681b      	ldr	r3, [r3, #0]
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	3714      	adds	r7, #20
 80152ba:	46bd      	mov	sp, r7
 80152bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c0:	4770      	bx	lr
 80152c2:	bf00      	nop
 80152c4:	20027358 	.word	0x20027358
 80152c8:	2002735c 	.word	0x2002735c

080152cc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80152da:	f003 0301 	and.w	r3, r3, #1
 80152de:	b2db      	uxtb	r3, r3
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d016      	beq.n	8015312 <ip4_input_accept+0x46>
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	3304      	adds	r3, #4
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d011      	beq.n	8015312 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80152ee:	4b0b      	ldr	r3, [pc, #44]	@ (801531c <ip4_input_accept+0x50>)
 80152f0:	695a      	ldr	r2, [r3, #20]
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	3304      	adds	r3, #4
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d008      	beq.n	801530e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80152fc:	4b07      	ldr	r3, [pc, #28]	@ (801531c <ip4_input_accept+0x50>)
 80152fe:	695b      	ldr	r3, [r3, #20]
 8015300:	6879      	ldr	r1, [r7, #4]
 8015302:	4618      	mov	r0, r3
 8015304:	f000 fa08 	bl	8015718 <ip4_addr_isbroadcast_u32>
 8015308:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801530a:	2b00      	cmp	r3, #0
 801530c:	d001      	beq.n	8015312 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801530e:	2301      	movs	r3, #1
 8015310:	e000      	b.n	8015314 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015312:	2300      	movs	r3, #0
}
 8015314:	4618      	mov	r0, r3
 8015316:	3708      	adds	r7, #8
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}
 801531c:	20024264 	.word	0x20024264

08015320 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b086      	sub	sp, #24
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
 8015328:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015330:	697b      	ldr	r3, [r7, #20]
 8015332:	781b      	ldrb	r3, [r3, #0]
 8015334:	091b      	lsrs	r3, r3, #4
 8015336:	b2db      	uxtb	r3, r3
 8015338:	2b04      	cmp	r3, #4
 801533a:	d004      	beq.n	8015346 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801533c:	6878      	ldr	r0, [r7, #4]
 801533e:	f7f8 fe5d 	bl	800dffc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015342:	2300      	movs	r3, #0
 8015344:	e107      	b.n	8015556 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	f003 030f 	and.w	r3, r3, #15
 801534e:	b2db      	uxtb	r3, r3
 8015350:	009b      	lsls	r3, r3, #2
 8015352:	b2db      	uxtb	r3, r3
 8015354:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	885b      	ldrh	r3, [r3, #2]
 801535a:	b29b      	uxth	r3, r3
 801535c:	4618      	mov	r0, r3
 801535e:	f7f7 fa5f 	bl	800c820 <lwip_htons>
 8015362:	4603      	mov	r3, r0
 8015364:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	891b      	ldrh	r3, [r3, #8]
 801536a:	89ba      	ldrh	r2, [r7, #12]
 801536c:	429a      	cmp	r2, r3
 801536e:	d204      	bcs.n	801537a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015370:	89bb      	ldrh	r3, [r7, #12]
 8015372:	4619      	mov	r1, r3
 8015374:	6878      	ldr	r0, [r7, #4]
 8015376:	f7f8 fcbb 	bl	800dcf0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	895b      	ldrh	r3, [r3, #10]
 801537e:	89fa      	ldrh	r2, [r7, #14]
 8015380:	429a      	cmp	r2, r3
 8015382:	d807      	bhi.n	8015394 <ip4_input+0x74>
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	891b      	ldrh	r3, [r3, #8]
 8015388:	89ba      	ldrh	r2, [r7, #12]
 801538a:	429a      	cmp	r2, r3
 801538c:	d802      	bhi.n	8015394 <ip4_input+0x74>
 801538e:	89fb      	ldrh	r3, [r7, #14]
 8015390:	2b13      	cmp	r3, #19
 8015392:	d804      	bhi.n	801539e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f7f8 fe31 	bl	800dffc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801539a:	2300      	movs	r3, #0
 801539c:	e0db      	b.n	8015556 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	691b      	ldr	r3, [r3, #16]
 80153a2:	4a6f      	ldr	r2, [pc, #444]	@ (8015560 <ip4_input+0x240>)
 80153a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80153a6:	697b      	ldr	r3, [r7, #20]
 80153a8:	68db      	ldr	r3, [r3, #12]
 80153aa:	4a6d      	ldr	r2, [pc, #436]	@ (8015560 <ip4_input+0x240>)
 80153ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80153ae:	4b6c      	ldr	r3, [pc, #432]	@ (8015560 <ip4_input+0x240>)
 80153b0:	695b      	ldr	r3, [r3, #20]
 80153b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80153b6:	2be0      	cmp	r3, #224	@ 0xe0
 80153b8:	d112      	bne.n	80153e0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80153c0:	f003 0301 	and.w	r3, r3, #1
 80153c4:	b2db      	uxtb	r3, r3
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d007      	beq.n	80153da <ip4_input+0xba>
 80153ca:	683b      	ldr	r3, [r7, #0]
 80153cc:	3304      	adds	r3, #4
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d002      	beq.n	80153da <ip4_input+0xba>
      netif = inp;
 80153d4:	683b      	ldr	r3, [r7, #0]
 80153d6:	613b      	str	r3, [r7, #16]
 80153d8:	e02a      	b.n	8015430 <ip4_input+0x110>
    } else {
      netif = NULL;
 80153da:	2300      	movs	r3, #0
 80153dc:	613b      	str	r3, [r7, #16]
 80153de:	e027      	b.n	8015430 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80153e0:	6838      	ldr	r0, [r7, #0]
 80153e2:	f7ff ff73 	bl	80152cc <ip4_input_accept>
 80153e6:	4603      	mov	r3, r0
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d002      	beq.n	80153f2 <ip4_input+0xd2>
      netif = inp;
 80153ec:	683b      	ldr	r3, [r7, #0]
 80153ee:	613b      	str	r3, [r7, #16]
 80153f0:	e01e      	b.n	8015430 <ip4_input+0x110>
    } else {
      netif = NULL;
 80153f2:	2300      	movs	r3, #0
 80153f4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80153f6:	4b5a      	ldr	r3, [pc, #360]	@ (8015560 <ip4_input+0x240>)
 80153f8:	695b      	ldr	r3, [r3, #20]
 80153fa:	b2db      	uxtb	r3, r3
 80153fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80153fe:	d017      	beq.n	8015430 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015400:	4b58      	ldr	r3, [pc, #352]	@ (8015564 <ip4_input+0x244>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	613b      	str	r3, [r7, #16]
 8015406:	e00e      	b.n	8015426 <ip4_input+0x106>
          if (netif == inp) {
 8015408:	693a      	ldr	r2, [r7, #16]
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	429a      	cmp	r2, r3
 801540e:	d006      	beq.n	801541e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015410:	6938      	ldr	r0, [r7, #16]
 8015412:	f7ff ff5b 	bl	80152cc <ip4_input_accept>
 8015416:	4603      	mov	r3, r0
 8015418:	2b00      	cmp	r3, #0
 801541a:	d108      	bne.n	801542e <ip4_input+0x10e>
 801541c:	e000      	b.n	8015420 <ip4_input+0x100>
            continue;
 801541e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	613b      	str	r3, [r7, #16]
 8015426:	693b      	ldr	r3, [r7, #16]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d1ed      	bne.n	8015408 <ip4_input+0xe8>
 801542c:	e000      	b.n	8015430 <ip4_input+0x110>
            break;
 801542e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015430:	4b4b      	ldr	r3, [pc, #300]	@ (8015560 <ip4_input+0x240>)
 8015432:	691b      	ldr	r3, [r3, #16]
 8015434:	6839      	ldr	r1, [r7, #0]
 8015436:	4618      	mov	r0, r3
 8015438:	f000 f96e 	bl	8015718 <ip4_addr_isbroadcast_u32>
 801543c:	4603      	mov	r3, r0
 801543e:	2b00      	cmp	r3, #0
 8015440:	d105      	bne.n	801544e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015442:	4b47      	ldr	r3, [pc, #284]	@ (8015560 <ip4_input+0x240>)
 8015444:	691b      	ldr	r3, [r3, #16]
 8015446:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801544a:	2be0      	cmp	r3, #224	@ 0xe0
 801544c:	d104      	bne.n	8015458 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f7f8 fdd4 	bl	800dffc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015454:	2300      	movs	r3, #0
 8015456:	e07e      	b.n	8015556 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d104      	bne.n	8015468 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	f7f8 fdcc 	bl	800dffc <pbuf_free>
    return ERR_OK;
 8015464:	2300      	movs	r3, #0
 8015466:	e076      	b.n	8015556 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015468:	697b      	ldr	r3, [r7, #20]
 801546a:	88db      	ldrh	r3, [r3, #6]
 801546c:	b29b      	uxth	r3, r3
 801546e:	461a      	mov	r2, r3
 8015470:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015474:	4013      	ands	r3, r2
 8015476:	2b00      	cmp	r3, #0
 8015478:	d00b      	beq.n	8015492 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801547a:	6878      	ldr	r0, [r7, #4]
 801547c:	f000 fd22 	bl	8015ec4 <ip4_reass>
 8015480:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d101      	bne.n	801548c <ip4_input+0x16c>
      return ERR_OK;
 8015488:	2300      	movs	r3, #0
 801548a:	e064      	b.n	8015556 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015492:	4a33      	ldr	r2, [pc, #204]	@ (8015560 <ip4_input+0x240>)
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015498:	4a31      	ldr	r2, [pc, #196]	@ (8015560 <ip4_input+0x240>)
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801549e:	4a30      	ldr	r2, [pc, #192]	@ (8015560 <ip4_input+0x240>)
 80154a0:	697b      	ldr	r3, [r7, #20]
 80154a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	781b      	ldrb	r3, [r3, #0]
 80154a8:	f003 030f 	and.w	r3, r3, #15
 80154ac:	b2db      	uxtb	r3, r3
 80154ae:	009b      	lsls	r3, r3, #2
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	461a      	mov	r2, r3
 80154b4:	4b2a      	ldr	r3, [pc, #168]	@ (8015560 <ip4_input+0x240>)
 80154b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80154b8:	89fb      	ldrh	r3, [r7, #14]
 80154ba:	4619      	mov	r1, r3
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f7f8 fd17 	bl	800def0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80154c2:	697b      	ldr	r3, [r7, #20]
 80154c4:	7a5b      	ldrb	r3, [r3, #9]
 80154c6:	2b11      	cmp	r3, #17
 80154c8:	d006      	beq.n	80154d8 <ip4_input+0x1b8>
 80154ca:	2b11      	cmp	r3, #17
 80154cc:	dc13      	bgt.n	80154f6 <ip4_input+0x1d6>
 80154ce:	2b01      	cmp	r3, #1
 80154d0:	d00c      	beq.n	80154ec <ip4_input+0x1cc>
 80154d2:	2b06      	cmp	r3, #6
 80154d4:	d005      	beq.n	80154e2 <ip4_input+0x1c2>
 80154d6:	e00e      	b.n	80154f6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80154d8:	6839      	ldr	r1, [r7, #0]
 80154da:	6878      	ldr	r0, [r7, #4]
 80154dc:	f7fe fba8 	bl	8013c30 <udp_input>
        break;
 80154e0:	e026      	b.n	8015530 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80154e2:	6839      	ldr	r1, [r7, #0]
 80154e4:	6878      	ldr	r0, [r7, #4]
 80154e6:	f7fa fbbf 	bl	800fc68 <tcp_input>
        break;
 80154ea:	e021      	b.n	8015530 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80154ec:	6839      	ldr	r1, [r7, #0]
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f7ff fcee 	bl	8014ed0 <icmp_input>
        break;
 80154f4:	e01c      	b.n	8015530 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80154f6:	4b1a      	ldr	r3, [pc, #104]	@ (8015560 <ip4_input+0x240>)
 80154f8:	695b      	ldr	r3, [r3, #20]
 80154fa:	6939      	ldr	r1, [r7, #16]
 80154fc:	4618      	mov	r0, r3
 80154fe:	f000 f90b 	bl	8015718 <ip4_addr_isbroadcast_u32>
 8015502:	4603      	mov	r3, r0
 8015504:	2b00      	cmp	r3, #0
 8015506:	d10f      	bne.n	8015528 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015508:	4b15      	ldr	r3, [pc, #84]	@ (8015560 <ip4_input+0x240>)
 801550a:	695b      	ldr	r3, [r3, #20]
 801550c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015510:	2be0      	cmp	r3, #224	@ 0xe0
 8015512:	d009      	beq.n	8015528 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015518:	4619      	mov	r1, r3
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	f7f8 fd5b 	bl	800dfd6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015520:	2102      	movs	r1, #2
 8015522:	6878      	ldr	r0, [r7, #4]
 8015524:	f7ff fdd8 	bl	80150d8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	f7f8 fd67 	bl	800dffc <pbuf_free>
        break;
 801552e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015530:	4b0b      	ldr	r3, [pc, #44]	@ (8015560 <ip4_input+0x240>)
 8015532:	2200      	movs	r2, #0
 8015534:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015536:	4b0a      	ldr	r3, [pc, #40]	@ (8015560 <ip4_input+0x240>)
 8015538:	2200      	movs	r2, #0
 801553a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801553c:	4b08      	ldr	r3, [pc, #32]	@ (8015560 <ip4_input+0x240>)
 801553e:	2200      	movs	r2, #0
 8015540:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015542:	4b07      	ldr	r3, [pc, #28]	@ (8015560 <ip4_input+0x240>)
 8015544:	2200      	movs	r2, #0
 8015546:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015548:	4b05      	ldr	r3, [pc, #20]	@ (8015560 <ip4_input+0x240>)
 801554a:	2200      	movs	r2, #0
 801554c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801554e:	4b04      	ldr	r3, [pc, #16]	@ (8015560 <ip4_input+0x240>)
 8015550:	2200      	movs	r2, #0
 8015552:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015554:	2300      	movs	r3, #0
}
 8015556:	4618      	mov	r0, r3
 8015558:	3718      	adds	r7, #24
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}
 801555e:	bf00      	nop
 8015560:	20024264 	.word	0x20024264
 8015564:	20027358 	.word	0x20027358

08015568 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b08a      	sub	sp, #40	@ 0x28
 801556c:	af04      	add	r7, sp, #16
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	607a      	str	r2, [r7, #4]
 8015574:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d009      	beq.n	8015594 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d003      	beq.n	801558e <ip4_output_if+0x26>
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d102      	bne.n	8015594 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801558e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015590:	3304      	adds	r3, #4
 8015592:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015594:	78fa      	ldrb	r2, [r7, #3]
 8015596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015598:	9302      	str	r3, [sp, #8]
 801559a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801559e:	9301      	str	r3, [sp, #4]
 80155a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80155a4:	9300      	str	r3, [sp, #0]
 80155a6:	4613      	mov	r3, r2
 80155a8:	687a      	ldr	r2, [r7, #4]
 80155aa:	6979      	ldr	r1, [r7, #20]
 80155ac:	68f8      	ldr	r0, [r7, #12]
 80155ae:	f000 f805 	bl	80155bc <ip4_output_if_src>
 80155b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80155b4:	4618      	mov	r0, r3
 80155b6:	3718      	adds	r7, #24
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}

080155bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b088      	sub	sp, #32
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	60f8      	str	r0, [r7, #12]
 80155c4:	60b9      	str	r1, [r7, #8]
 80155c6:	607a      	str	r2, [r7, #4]
 80155c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	7b9b      	ldrb	r3, [r3, #14]
 80155ce:	2b01      	cmp	r3, #1
 80155d0:	d006      	beq.n	80155e0 <ip4_output_if_src+0x24>
 80155d2:	4b4b      	ldr	r3, [pc, #300]	@ (8015700 <ip4_output_if_src+0x144>)
 80155d4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80155d8:	494a      	ldr	r1, [pc, #296]	@ (8015704 <ip4_output_if_src+0x148>)
 80155da:	484b      	ldr	r0, [pc, #300]	@ (8015708 <ip4_output_if_src+0x14c>)
 80155dc:	f001 fc5e 	bl	8016e9c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d060      	beq.n	80156a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80155e6:	2314      	movs	r3, #20
 80155e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80155ea:	2114      	movs	r1, #20
 80155ec:	68f8      	ldr	r0, [r7, #12]
 80155ee:	f7f8 fc6f 	bl	800ded0 <pbuf_add_header>
 80155f2:	4603      	mov	r3, r0
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d002      	beq.n	80155fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80155f8:	f06f 0301 	mvn.w	r3, #1
 80155fc:	e07c      	b.n	80156f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	895b      	ldrh	r3, [r3, #10]
 8015608:	2b13      	cmp	r3, #19
 801560a:	d806      	bhi.n	801561a <ip4_output_if_src+0x5e>
 801560c:	4b3c      	ldr	r3, [pc, #240]	@ (8015700 <ip4_output_if_src+0x144>)
 801560e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015612:	493e      	ldr	r1, [pc, #248]	@ (801570c <ip4_output_if_src+0x150>)
 8015614:	483c      	ldr	r0, [pc, #240]	@ (8015708 <ip4_output_if_src+0x14c>)
 8015616:	f001 fc41 	bl	8016e9c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801561a:	69fb      	ldr	r3, [r7, #28]
 801561c:	78fa      	ldrb	r2, [r7, #3]
 801561e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015620:	69fb      	ldr	r3, [r7, #28]
 8015622:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015626:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681a      	ldr	r2, [r3, #0]
 801562c:	69fb      	ldr	r3, [r7, #28]
 801562e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015630:	8b7b      	ldrh	r3, [r7, #26]
 8015632:	089b      	lsrs	r3, r3, #2
 8015634:	b29b      	uxth	r3, r3
 8015636:	b2db      	uxtb	r3, r3
 8015638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801563c:	b2da      	uxtb	r2, r3
 801563e:	69fb      	ldr	r3, [r7, #28]
 8015640:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015648:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	891b      	ldrh	r3, [r3, #8]
 801564e:	4618      	mov	r0, r3
 8015650:	f7f7 f8e6 	bl	800c820 <lwip_htons>
 8015654:	4603      	mov	r3, r0
 8015656:	461a      	mov	r2, r3
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801565c:	69fb      	ldr	r3, [r7, #28]
 801565e:	2200      	movs	r2, #0
 8015660:	719a      	strb	r2, [r3, #6]
 8015662:	2200      	movs	r2, #0
 8015664:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015666:	4b2a      	ldr	r3, [pc, #168]	@ (8015710 <ip4_output_if_src+0x154>)
 8015668:	881b      	ldrh	r3, [r3, #0]
 801566a:	4618      	mov	r0, r3
 801566c:	f7f7 f8d8 	bl	800c820 <lwip_htons>
 8015670:	4603      	mov	r3, r0
 8015672:	461a      	mov	r2, r3
 8015674:	69fb      	ldr	r3, [r7, #28]
 8015676:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015678:	4b25      	ldr	r3, [pc, #148]	@ (8015710 <ip4_output_if_src+0x154>)
 801567a:	881b      	ldrh	r3, [r3, #0]
 801567c:	3301      	adds	r3, #1
 801567e:	b29a      	uxth	r2, r3
 8015680:	4b23      	ldr	r3, [pc, #140]	@ (8015710 <ip4_output_if_src+0x154>)
 8015682:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d104      	bne.n	8015694 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801568a:	4b22      	ldr	r3, [pc, #136]	@ (8015714 <ip4_output_if_src+0x158>)
 801568c:	681a      	ldr	r2, [r3, #0]
 801568e:	69fb      	ldr	r3, [r7, #28]
 8015690:	60da      	str	r2, [r3, #12]
 8015692:	e003      	b.n	801569c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	681a      	ldr	r2, [r3, #0]
 8015698:	69fb      	ldr	r3, [r7, #28]
 801569a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801569c:	69fb      	ldr	r3, [r7, #28]
 801569e:	2200      	movs	r2, #0
 80156a0:	729a      	strb	r2, [r3, #10]
 80156a2:	2200      	movs	r2, #0
 80156a4:	72da      	strb	r2, [r3, #11]
 80156a6:	e00f      	b.n	80156c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	895b      	ldrh	r3, [r3, #10]
 80156ac:	2b13      	cmp	r3, #19
 80156ae:	d802      	bhi.n	80156b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80156b0:	f06f 0301 	mvn.w	r3, #1
 80156b4:	e020      	b.n	80156f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80156bc:	69fb      	ldr	r3, [r7, #28]
 80156be:	691b      	ldr	r3, [r3, #16]
 80156c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80156c2:	f107 0314 	add.w	r3, r7, #20
 80156c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80156c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d00c      	beq.n	80156ea <ip4_output_if_src+0x12e>
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	891a      	ldrh	r2, [r3, #8]
 80156d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80156d8:	429a      	cmp	r2, r3
 80156da:	d906      	bls.n	80156ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80156dc:	687a      	ldr	r2, [r7, #4]
 80156de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80156e0:	68f8      	ldr	r0, [r7, #12]
 80156e2:	f000 fde3 	bl	80162ac <ip4_frag>
 80156e6:	4603      	mov	r3, r0
 80156e8:	e006      	b.n	80156f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80156ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156ec:	695b      	ldr	r3, [r3, #20]
 80156ee:	687a      	ldr	r2, [r7, #4]
 80156f0:	68f9      	ldr	r1, [r7, #12]
 80156f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156f4:	4798      	blx	r3
 80156f6:	4603      	mov	r3, r0
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3720      	adds	r7, #32
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}
 8015700:	0801a878 	.word	0x0801a878
 8015704:	0801a8ac 	.word	0x0801a8ac
 8015708:	0801a8b8 	.word	0x0801a8b8
 801570c:	0801a8e0 	.word	0x0801a8e0
 8015710:	200274b6 	.word	0x200274b6
 8015714:	0801af34 	.word	0x0801af34

08015718 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015718:	b480      	push	{r7}
 801571a:	b085      	sub	sp, #20
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
 8015720:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801572c:	d002      	beq.n	8015734 <ip4_addr_isbroadcast_u32+0x1c>
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d101      	bne.n	8015738 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015734:	2301      	movs	r3, #1
 8015736:	e02a      	b.n	801578e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801573e:	f003 0302 	and.w	r3, r3, #2
 8015742:	2b00      	cmp	r3, #0
 8015744:	d101      	bne.n	801574a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015746:	2300      	movs	r3, #0
 8015748:	e021      	b.n	801578e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	3304      	adds	r3, #4
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	687a      	ldr	r2, [r7, #4]
 8015752:	429a      	cmp	r2, r3
 8015754:	d101      	bne.n	801575a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015756:	2300      	movs	r3, #0
 8015758:	e019      	b.n	801578e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801575a:	68fa      	ldr	r2, [r7, #12]
 801575c:	683b      	ldr	r3, [r7, #0]
 801575e:	3304      	adds	r3, #4
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	405a      	eors	r2, r3
 8015764:	683b      	ldr	r3, [r7, #0]
 8015766:	3308      	adds	r3, #8
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	4013      	ands	r3, r2
 801576c:	2b00      	cmp	r3, #0
 801576e:	d10d      	bne.n	801578c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	3308      	adds	r3, #8
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	43da      	mvns	r2, r3
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	3308      	adds	r3, #8
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015784:	429a      	cmp	r2, r3
 8015786:	d101      	bne.n	801578c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015788:	2301      	movs	r3, #1
 801578a:	e000      	b.n	801578e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801578c:	2300      	movs	r3, #0
  }
}
 801578e:	4618      	mov	r0, r3
 8015790:	3714      	adds	r7, #20
 8015792:	46bd      	mov	sp, r7
 8015794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015798:	4770      	bx	lr
	...

0801579c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80157a4:	2210      	movs	r2, #16
 80157a6:	4904      	ldr	r1, [pc, #16]	@ (80157b8 <ip4addr_ntoa+0x1c>)
 80157a8:	6878      	ldr	r0, [r7, #4]
 80157aa:	f000 f807 	bl	80157bc <ip4addr_ntoa_r>
 80157ae:	4603      	mov	r3, r0
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	3708      	adds	r7, #8
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}
 80157b8:	200274b8 	.word	0x200274b8

080157bc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80157bc:	b480      	push	{r7}
 80157be:	b08d      	sub	sp, #52	@ 0x34
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	60f8      	str	r0, [r7, #12]
 80157c4:	60b9      	str	r1, [r7, #8]
 80157c6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80157c8:	2300      	movs	r3, #0
 80157ca:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 80157d6:	f107 0318 	add.w	r3, r7, #24
 80157da:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 80157dc:	2300      	movs	r3, #0
 80157de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80157e2:	e058      	b.n	8015896 <ip4addr_ntoa_r+0xda>
    i = 0;
 80157e4:	2300      	movs	r3, #0
 80157e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 80157ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157ec:	781a      	ldrb	r2, [r3, #0]
 80157ee:	4b32      	ldr	r3, [pc, #200]	@ (80158b8 <ip4addr_ntoa_r+0xfc>)
 80157f0:	fba3 1302 	umull	r1, r3, r3, r2
 80157f4:	08d9      	lsrs	r1, r3, #3
 80157f6:	460b      	mov	r3, r1
 80157f8:	009b      	lsls	r3, r3, #2
 80157fa:	440b      	add	r3, r1
 80157fc:	005b      	lsls	r3, r3, #1
 80157fe:	1ad3      	subs	r3, r2, r3
 8015800:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8015802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015804:	781b      	ldrb	r3, [r3, #0]
 8015806:	4a2c      	ldr	r2, [pc, #176]	@ (80158b8 <ip4addr_ntoa_r+0xfc>)
 8015808:	fba2 2303 	umull	r2, r3, r2, r3
 801580c:	08db      	lsrs	r3, r3, #3
 801580e:	b2da      	uxtb	r2, r3
 8015810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015812:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8015814:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015818:	1c5a      	adds	r2, r3, #1
 801581a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801581e:	4619      	mov	r1, r3
 8015820:	7ffb      	ldrb	r3, [r7, #31]
 8015822:	3330      	adds	r3, #48	@ 0x30
 8015824:	b2da      	uxtb	r2, r3
 8015826:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801582a:	443b      	add	r3, r7
 801582c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8015830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015832:	781b      	ldrb	r3, [r3, #0]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d1d8      	bne.n	80157ea <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8015838:	e011      	b.n	801585e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801583a:	6a3b      	ldr	r3, [r7, #32]
 801583c:	1c5a      	adds	r2, r3, #1
 801583e:	623a      	str	r2, [r7, #32]
 8015840:	687a      	ldr	r2, [r7, #4]
 8015842:	429a      	cmp	r2, r3
 8015844:	dc01      	bgt.n	801584a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8015846:	2300      	movs	r3, #0
 8015848:	e030      	b.n	80158ac <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801584a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801584e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015850:	1c59      	adds	r1, r3, #1
 8015852:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8015854:	3230      	adds	r2, #48	@ 0x30
 8015856:	443a      	add	r2, r7
 8015858:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801585c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801585e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015862:	1e5a      	subs	r2, r3, #1
 8015864:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8015868:	2b00      	cmp	r3, #0
 801586a:	d1e6      	bne.n	801583a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801586c:	6a3b      	ldr	r3, [r7, #32]
 801586e:	1c5a      	adds	r2, r3, #1
 8015870:	623a      	str	r2, [r7, #32]
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	429a      	cmp	r2, r3
 8015876:	dc01      	bgt.n	801587c <ip4addr_ntoa_r+0xc0>
      return NULL;
 8015878:	2300      	movs	r3, #0
 801587a:	e017      	b.n	80158ac <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801587e:	1c5a      	adds	r2, r3, #1
 8015880:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015882:	222e      	movs	r2, #46	@ 0x2e
 8015884:	701a      	strb	r2, [r3, #0]
    ap++;
 8015886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015888:	3301      	adds	r3, #1
 801588a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801588c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015890:	3301      	adds	r3, #1
 8015892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801589a:	2b03      	cmp	r3, #3
 801589c:	d9a2      	bls.n	80157e4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801589e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158a0:	3b01      	subs	r3, #1
 80158a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80158a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158a6:	2200      	movs	r2, #0
 80158a8:	701a      	strb	r2, [r3, #0]
  return buf;
 80158aa:	68bb      	ldr	r3, [r7, #8]
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3734      	adds	r7, #52	@ 0x34
 80158b0:	46bd      	mov	sp, r7
 80158b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b6:	4770      	bx	lr
 80158b8:	cccccccd 	.word	0xcccccccd

080158bc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b084      	sub	sp, #16
 80158c0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80158c2:	2300      	movs	r3, #0
 80158c4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80158c6:	4b12      	ldr	r3, [pc, #72]	@ (8015910 <ip_reass_tmr+0x54>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80158cc:	e018      	b.n	8015900 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	7fdb      	ldrb	r3, [r3, #31]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d00b      	beq.n	80158ee <ip_reass_tmr+0x32>
      r->timer--;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	7fdb      	ldrb	r3, [r3, #31]
 80158da:	3b01      	subs	r3, #1
 80158dc:	b2da      	uxtb	r2, r3
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	60fb      	str	r3, [r7, #12]
 80158ec:	e008      	b.n	8015900 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80158f8:	68b9      	ldr	r1, [r7, #8]
 80158fa:	6878      	ldr	r0, [r7, #4]
 80158fc:	f000 f80a 	bl	8015914 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d1e3      	bne.n	80158ce <ip_reass_tmr+0x12>
    }
  }
}
 8015906:	bf00      	nop
 8015908:	bf00      	nop
 801590a:	3710      	adds	r7, #16
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}
 8015910:	200274c8 	.word	0x200274c8

08015914 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b088      	sub	sp, #32
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801591e:	2300      	movs	r3, #0
 8015920:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015922:	683a      	ldr	r2, [r7, #0]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	429a      	cmp	r2, r3
 8015928:	d105      	bne.n	8015936 <ip_reass_free_complete_datagram+0x22>
 801592a:	4b45      	ldr	r3, [pc, #276]	@ (8015a40 <ip_reass_free_complete_datagram+0x12c>)
 801592c:	22ab      	movs	r2, #171	@ 0xab
 801592e:	4945      	ldr	r1, [pc, #276]	@ (8015a44 <ip_reass_free_complete_datagram+0x130>)
 8015930:	4845      	ldr	r0, [pc, #276]	@ (8015a48 <ip_reass_free_complete_datagram+0x134>)
 8015932:	f001 fab3 	bl	8016e9c <iprintf>
  if (prev != NULL) {
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d00a      	beq.n	8015952 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801593c:	683b      	ldr	r3, [r7, #0]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	687a      	ldr	r2, [r7, #4]
 8015942:	429a      	cmp	r2, r3
 8015944:	d005      	beq.n	8015952 <ip_reass_free_complete_datagram+0x3e>
 8015946:	4b3e      	ldr	r3, [pc, #248]	@ (8015a40 <ip_reass_free_complete_datagram+0x12c>)
 8015948:	22ad      	movs	r2, #173	@ 0xad
 801594a:	4940      	ldr	r1, [pc, #256]	@ (8015a4c <ip_reass_free_complete_datagram+0x138>)
 801594c:	483e      	ldr	r0, [pc, #248]	@ (8015a48 <ip_reass_free_complete_datagram+0x134>)
 801594e:	f001 faa5 	bl	8016e9c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	685b      	ldr	r3, [r3, #4]
 8015956:	685b      	ldr	r3, [r3, #4]
 8015958:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	889b      	ldrh	r3, [r3, #4]
 801595e:	b29b      	uxth	r3, r3
 8015960:	2b00      	cmp	r3, #0
 8015962:	d12a      	bne.n	80159ba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	685b      	ldr	r3, [r3, #4]
 8015968:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801596a:	697b      	ldr	r3, [r7, #20]
 801596c:	681a      	ldr	r2, [r3, #0]
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015972:	69bb      	ldr	r3, [r7, #24]
 8015974:	6858      	ldr	r0, [r3, #4]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	3308      	adds	r3, #8
 801597a:	2214      	movs	r2, #20
 801597c:	4619      	mov	r1, r3
 801597e:	f001 fcb8 	bl	80172f2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015982:	2101      	movs	r1, #1
 8015984:	69b8      	ldr	r0, [r7, #24]
 8015986:	f7ff fbb7 	bl	80150f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801598a:	69b8      	ldr	r0, [r7, #24]
 801598c:	f7f8 fbc4 	bl	800e118 <pbuf_clen>
 8015990:	4603      	mov	r3, r0
 8015992:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015994:	8bfa      	ldrh	r2, [r7, #30]
 8015996:	8a7b      	ldrh	r3, [r7, #18]
 8015998:	4413      	add	r3, r2
 801599a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801599e:	db05      	blt.n	80159ac <ip_reass_free_complete_datagram+0x98>
 80159a0:	4b27      	ldr	r3, [pc, #156]	@ (8015a40 <ip_reass_free_complete_datagram+0x12c>)
 80159a2:	22bc      	movs	r2, #188	@ 0xbc
 80159a4:	492a      	ldr	r1, [pc, #168]	@ (8015a50 <ip_reass_free_complete_datagram+0x13c>)
 80159a6:	4828      	ldr	r0, [pc, #160]	@ (8015a48 <ip_reass_free_complete_datagram+0x134>)
 80159a8:	f001 fa78 	bl	8016e9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80159ac:	8bfa      	ldrh	r2, [r7, #30]
 80159ae:	8a7b      	ldrh	r3, [r7, #18]
 80159b0:	4413      	add	r3, r2
 80159b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80159b4:	69b8      	ldr	r0, [r7, #24]
 80159b6:	f7f8 fb21 	bl	800dffc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	685b      	ldr	r3, [r3, #4]
 80159be:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80159c0:	e01f      	b.n	8015a02 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80159c2:	69bb      	ldr	r3, [r7, #24]
 80159c4:	685b      	ldr	r3, [r3, #4]
 80159c6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80159c8:	69bb      	ldr	r3, [r7, #24]
 80159ca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80159cc:	697b      	ldr	r3, [r7, #20]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80159d2:	68f8      	ldr	r0, [r7, #12]
 80159d4:	f7f8 fba0 	bl	800e118 <pbuf_clen>
 80159d8:	4603      	mov	r3, r0
 80159da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80159dc:	8bfa      	ldrh	r2, [r7, #30]
 80159de:	8a7b      	ldrh	r3, [r7, #18]
 80159e0:	4413      	add	r3, r2
 80159e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80159e6:	db05      	blt.n	80159f4 <ip_reass_free_complete_datagram+0xe0>
 80159e8:	4b15      	ldr	r3, [pc, #84]	@ (8015a40 <ip_reass_free_complete_datagram+0x12c>)
 80159ea:	22cc      	movs	r2, #204	@ 0xcc
 80159ec:	4918      	ldr	r1, [pc, #96]	@ (8015a50 <ip_reass_free_complete_datagram+0x13c>)
 80159ee:	4816      	ldr	r0, [pc, #88]	@ (8015a48 <ip_reass_free_complete_datagram+0x134>)
 80159f0:	f001 fa54 	bl	8016e9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80159f4:	8bfa      	ldrh	r2, [r7, #30]
 80159f6:	8a7b      	ldrh	r3, [r7, #18]
 80159f8:	4413      	add	r3, r2
 80159fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80159fc:	68f8      	ldr	r0, [r7, #12]
 80159fe:	f7f8 fafd 	bl	800dffc <pbuf_free>
  while (p != NULL) {
 8015a02:	69bb      	ldr	r3, [r7, #24]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d1dc      	bne.n	80159c2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015a08:	6839      	ldr	r1, [r7, #0]
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f000 f8c2 	bl	8015b94 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015a10:	4b10      	ldr	r3, [pc, #64]	@ (8015a54 <ip_reass_free_complete_datagram+0x140>)
 8015a12:	881b      	ldrh	r3, [r3, #0]
 8015a14:	8bfa      	ldrh	r2, [r7, #30]
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d905      	bls.n	8015a26 <ip_reass_free_complete_datagram+0x112>
 8015a1a:	4b09      	ldr	r3, [pc, #36]	@ (8015a40 <ip_reass_free_complete_datagram+0x12c>)
 8015a1c:	22d2      	movs	r2, #210	@ 0xd2
 8015a1e:	490e      	ldr	r1, [pc, #56]	@ (8015a58 <ip_reass_free_complete_datagram+0x144>)
 8015a20:	4809      	ldr	r0, [pc, #36]	@ (8015a48 <ip_reass_free_complete_datagram+0x134>)
 8015a22:	f001 fa3b 	bl	8016e9c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015a26:	4b0b      	ldr	r3, [pc, #44]	@ (8015a54 <ip_reass_free_complete_datagram+0x140>)
 8015a28:	881a      	ldrh	r2, [r3, #0]
 8015a2a:	8bfb      	ldrh	r3, [r7, #30]
 8015a2c:	1ad3      	subs	r3, r2, r3
 8015a2e:	b29a      	uxth	r2, r3
 8015a30:	4b08      	ldr	r3, [pc, #32]	@ (8015a54 <ip_reass_free_complete_datagram+0x140>)
 8015a32:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015a34:	8bfb      	ldrh	r3, [r7, #30]
}
 8015a36:	4618      	mov	r0, r3
 8015a38:	3720      	adds	r7, #32
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}
 8015a3e:	bf00      	nop
 8015a40:	0801a910 	.word	0x0801a910
 8015a44:	0801a94c 	.word	0x0801a94c
 8015a48:	0801a958 	.word	0x0801a958
 8015a4c:	0801a980 	.word	0x0801a980
 8015a50:	0801a994 	.word	0x0801a994
 8015a54:	200274cc 	.word	0x200274cc
 8015a58:	0801a9b4 	.word	0x0801a9b4

08015a5c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b08a      	sub	sp, #40	@ 0x28
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
 8015a64:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015a66:	2300      	movs	r3, #0
 8015a68:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015a72:	2300      	movs	r3, #0
 8015a74:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015a76:	2300      	movs	r3, #0
 8015a78:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015a7a:	4b28      	ldr	r3, [pc, #160]	@ (8015b1c <ip_reass_remove_oldest_datagram+0xc0>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015a80:	e030      	b.n	8015ae4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a84:	695a      	ldr	r2, [r3, #20]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	68db      	ldr	r3, [r3, #12]
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	d10c      	bne.n	8015aa8 <ip_reass_remove_oldest_datagram+0x4c>
 8015a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a90:	699a      	ldr	r2, [r3, #24]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	691b      	ldr	r3, [r3, #16]
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d106      	bne.n	8015aa8 <ip_reass_remove_oldest_datagram+0x4c>
 8015a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a9c:	899a      	ldrh	r2, [r3, #12]
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	889b      	ldrh	r3, [r3, #4]
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	d014      	beq.n	8015ad2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015aa8:	693b      	ldr	r3, [r7, #16]
 8015aaa:	3301      	adds	r3, #1
 8015aac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015aae:	6a3b      	ldr	r3, [r7, #32]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d104      	bne.n	8015abe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015ab8:	69fb      	ldr	r3, [r7, #28]
 8015aba:	61bb      	str	r3, [r7, #24]
 8015abc:	e009      	b.n	8015ad2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ac0:	7fda      	ldrb	r2, [r3, #31]
 8015ac2:	6a3b      	ldr	r3, [r7, #32]
 8015ac4:	7fdb      	ldrb	r3, [r3, #31]
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d803      	bhi.n	8015ad2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015acc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015ace:	69fb      	ldr	r3, [r7, #28]
 8015ad0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d001      	beq.n	8015ade <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015adc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d1cb      	bne.n	8015a82 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015aea:	6a3b      	ldr	r3, [r7, #32]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d008      	beq.n	8015b02 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015af0:	69b9      	ldr	r1, [r7, #24]
 8015af2:	6a38      	ldr	r0, [r7, #32]
 8015af4:	f7ff ff0e 	bl	8015914 <ip_reass_free_complete_datagram>
 8015af8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015afa:	697a      	ldr	r2, [r7, #20]
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	4413      	add	r3, r2
 8015b00:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015b02:	697a      	ldr	r2, [r7, #20]
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	429a      	cmp	r2, r3
 8015b08:	da02      	bge.n	8015b10 <ip_reass_remove_oldest_datagram+0xb4>
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	2b01      	cmp	r3, #1
 8015b0e:	dcac      	bgt.n	8015a6a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015b10:	697b      	ldr	r3, [r7, #20]
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3728      	adds	r7, #40	@ 0x28
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bd80      	pop	{r7, pc}
 8015b1a:	bf00      	nop
 8015b1c:	200274c8 	.word	0x200274c8

08015b20 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b084      	sub	sp, #16
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015b2a:	2004      	movs	r0, #4
 8015b2c:	f7f7 fb4c 	bl	800d1c8 <memp_malloc>
 8015b30:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d110      	bne.n	8015b5a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015b38:	6839      	ldr	r1, [r7, #0]
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f7ff ff8e 	bl	8015a5c <ip_reass_remove_oldest_datagram>
 8015b40:	4602      	mov	r2, r0
 8015b42:	683b      	ldr	r3, [r7, #0]
 8015b44:	4293      	cmp	r3, r2
 8015b46:	dc03      	bgt.n	8015b50 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015b48:	2004      	movs	r0, #4
 8015b4a:	f7f7 fb3d 	bl	800d1c8 <memp_malloc>
 8015b4e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d101      	bne.n	8015b5a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015b56:	2300      	movs	r3, #0
 8015b58:	e016      	b.n	8015b88 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015b5a:	2220      	movs	r2, #32
 8015b5c:	2100      	movs	r1, #0
 8015b5e:	68f8      	ldr	r0, [r7, #12]
 8015b60:	f001 faf4 	bl	801714c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	220f      	movs	r2, #15
 8015b68:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015b6a:	4b09      	ldr	r3, [pc, #36]	@ (8015b90 <ip_reass_enqueue_new_datagram+0x70>)
 8015b6c:	681a      	ldr	r2, [r3, #0]
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015b72:	4a07      	ldr	r2, [pc, #28]	@ (8015b90 <ip_reass_enqueue_new_datagram+0x70>)
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	3308      	adds	r3, #8
 8015b7c:	2214      	movs	r2, #20
 8015b7e:	6879      	ldr	r1, [r7, #4]
 8015b80:	4618      	mov	r0, r3
 8015b82:	f001 fbb6 	bl	80172f2 <memcpy>
  return ipr;
 8015b86:	68fb      	ldr	r3, [r7, #12]
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3710      	adds	r7, #16
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}
 8015b90:	200274c8 	.word	0x200274c8

08015b94 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
 8015b9c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015b9e:	4b10      	ldr	r3, [pc, #64]	@ (8015be0 <ip_reass_dequeue_datagram+0x4c>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	687a      	ldr	r2, [r7, #4]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d104      	bne.n	8015bb2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4a0c      	ldr	r2, [pc, #48]	@ (8015be0 <ip_reass_dequeue_datagram+0x4c>)
 8015bae:	6013      	str	r3, [r2, #0]
 8015bb0:	e00d      	b.n	8015bce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d106      	bne.n	8015bc6 <ip_reass_dequeue_datagram+0x32>
 8015bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8015be4 <ip_reass_dequeue_datagram+0x50>)
 8015bba:	f240 1245 	movw	r2, #325	@ 0x145
 8015bbe:	490a      	ldr	r1, [pc, #40]	@ (8015be8 <ip_reass_dequeue_datagram+0x54>)
 8015bc0:	480a      	ldr	r0, [pc, #40]	@ (8015bec <ip_reass_dequeue_datagram+0x58>)
 8015bc2:	f001 f96b 	bl	8016e9c <iprintf>
    prev->next = ipr->next;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681a      	ldr	r2, [r3, #0]
 8015bca:	683b      	ldr	r3, [r7, #0]
 8015bcc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015bce:	6879      	ldr	r1, [r7, #4]
 8015bd0:	2004      	movs	r0, #4
 8015bd2:	f7f7 fb6f 	bl	800d2b4 <memp_free>
}
 8015bd6:	bf00      	nop
 8015bd8:	3708      	adds	r7, #8
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	bd80      	pop	{r7, pc}
 8015bde:	bf00      	nop
 8015be0:	200274c8 	.word	0x200274c8
 8015be4:	0801a910 	.word	0x0801a910
 8015be8:	0801a9d8 	.word	0x0801a9d8
 8015bec:	0801a958 	.word	0x0801a958

08015bf0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b08c      	sub	sp, #48	@ 0x30
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	60f8      	str	r0, [r7, #12]
 8015bf8:	60b9      	str	r1, [r7, #8]
 8015bfa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015c00:	2301      	movs	r3, #1
 8015c02:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	685b      	ldr	r3, [r3, #4]
 8015c08:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015c0a:	69fb      	ldr	r3, [r7, #28]
 8015c0c:	885b      	ldrh	r3, [r3, #2]
 8015c0e:	b29b      	uxth	r3, r3
 8015c10:	4618      	mov	r0, r3
 8015c12:	f7f6 fe05 	bl	800c820 <lwip_htons>
 8015c16:	4603      	mov	r3, r0
 8015c18:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015c1a:	69fb      	ldr	r3, [r7, #28]
 8015c1c:	781b      	ldrb	r3, [r3, #0]
 8015c1e:	f003 030f 	and.w	r3, r3, #15
 8015c22:	b2db      	uxtb	r3, r3
 8015c24:	009b      	lsls	r3, r3, #2
 8015c26:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015c28:	7e7b      	ldrb	r3, [r7, #25]
 8015c2a:	b29b      	uxth	r3, r3
 8015c2c:	8b7a      	ldrh	r2, [r7, #26]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d202      	bcs.n	8015c38 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c32:	f04f 33ff 	mov.w	r3, #4294967295
 8015c36:	e135      	b.n	8015ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015c38:	7e7b      	ldrb	r3, [r7, #25]
 8015c3a:	b29b      	uxth	r3, r3
 8015c3c:	8b7a      	ldrh	r2, [r7, #26]
 8015c3e:	1ad3      	subs	r3, r2, r3
 8015c40:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015c42:	69fb      	ldr	r3, [r7, #28]
 8015c44:	88db      	ldrh	r3, [r3, #6]
 8015c46:	b29b      	uxth	r3, r3
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7f6 fde9 	bl	800c820 <lwip_htons>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c54:	b29b      	uxth	r3, r3
 8015c56:	00db      	lsls	r3, r3, #3
 8015c58:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015c5a:	68bb      	ldr	r3, [r7, #8]
 8015c5c:	685b      	ldr	r3, [r3, #4]
 8015c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c62:	2200      	movs	r2, #0
 8015c64:	701a      	strb	r2, [r3, #0]
 8015c66:	2200      	movs	r2, #0
 8015c68:	705a      	strb	r2, [r3, #1]
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	709a      	strb	r2, [r3, #2]
 8015c6e:	2200      	movs	r2, #0
 8015c70:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c74:	8afa      	ldrh	r2, [r7, #22]
 8015c76:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015c78:	8afa      	ldrh	r2, [r7, #22]
 8015c7a:	8b7b      	ldrh	r3, [r7, #26]
 8015c7c:	4413      	add	r3, r2
 8015c7e:	b29a      	uxth	r2, r3
 8015c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c82:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c86:	88db      	ldrh	r3, [r3, #6]
 8015c88:	b29b      	uxth	r3, r3
 8015c8a:	8afa      	ldrh	r2, [r7, #22]
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	d902      	bls.n	8015c96 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c90:	f04f 33ff 	mov.w	r3, #4294967295
 8015c94:	e106      	b.n	8015ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8015c9c:	e068      	b.n	8015d70 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ca0:	685b      	ldr	r3, [r3, #4]
 8015ca2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ca6:	889b      	ldrh	r3, [r3, #4]
 8015ca8:	b29a      	uxth	r2, r3
 8015caa:	693b      	ldr	r3, [r7, #16]
 8015cac:	889b      	ldrh	r3, [r3, #4]
 8015cae:	b29b      	uxth	r3, r3
 8015cb0:	429a      	cmp	r2, r3
 8015cb2:	d235      	bcs.n	8015d20 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015cb8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d020      	beq.n	8015d02 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cc2:	889b      	ldrh	r3, [r3, #4]
 8015cc4:	b29a      	uxth	r2, r3
 8015cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cc8:	88db      	ldrh	r3, [r3, #6]
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d307      	bcc.n	8015ce0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cd2:	88db      	ldrh	r3, [r3, #6]
 8015cd4:	b29a      	uxth	r2, r3
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	889b      	ldrh	r3, [r3, #4]
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d902      	bls.n	8015ce6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ce4:	e0de      	b.n	8015ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ce8:	68ba      	ldr	r2, [r7, #8]
 8015cea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cee:	88db      	ldrh	r3, [r3, #6]
 8015cf0:	b29a      	uxth	r2, r3
 8015cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cf4:	889b      	ldrh	r3, [r3, #4]
 8015cf6:	b29b      	uxth	r3, r3
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d03d      	beq.n	8015d78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015d00:	e03a      	b.n	8015d78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d04:	88db      	ldrh	r3, [r3, #6]
 8015d06:	b29a      	uxth	r2, r3
 8015d08:	693b      	ldr	r3, [r7, #16]
 8015d0a:	889b      	ldrh	r3, [r3, #4]
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	d902      	bls.n	8015d18 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d12:	f04f 33ff 	mov.w	r3, #4294967295
 8015d16:	e0c5      	b.n	8015ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	68ba      	ldr	r2, [r7, #8]
 8015d1c:	605a      	str	r2, [r3, #4]
      break;
 8015d1e:	e02b      	b.n	8015d78 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d22:	889b      	ldrh	r3, [r3, #4]
 8015d24:	b29a      	uxth	r2, r3
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	889b      	ldrh	r3, [r3, #4]
 8015d2a:	b29b      	uxth	r3, r3
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	d102      	bne.n	8015d36 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d30:	f04f 33ff 	mov.w	r3, #4294967295
 8015d34:	e0b6      	b.n	8015ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d38:	889b      	ldrh	r3, [r3, #4]
 8015d3a:	b29a      	uxth	r2, r3
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	88db      	ldrh	r3, [r3, #6]
 8015d40:	b29b      	uxth	r3, r3
 8015d42:	429a      	cmp	r2, r3
 8015d44:	d202      	bcs.n	8015d4c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d46:	f04f 33ff 	mov.w	r3, #4294967295
 8015d4a:	e0ab      	b.n	8015ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d009      	beq.n	8015d66 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d54:	88db      	ldrh	r3, [r3, #6]
 8015d56:	b29a      	uxth	r2, r3
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	889b      	ldrh	r3, [r3, #4]
 8015d5c:	b29b      	uxth	r3, r3
 8015d5e:	429a      	cmp	r2, r3
 8015d60:	d001      	beq.n	8015d66 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015d62:	2300      	movs	r3, #0
 8015d64:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d193      	bne.n	8015c9e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015d76:	e000      	b.n	8015d7a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015d78:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d12d      	bne.n	8015ddc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d01c      	beq.n	8015dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d88:	88db      	ldrh	r3, [r3, #6]
 8015d8a:	b29a      	uxth	r2, r3
 8015d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d8e:	889b      	ldrh	r3, [r3, #4]
 8015d90:	b29b      	uxth	r3, r3
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d906      	bls.n	8015da4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015d96:	4b45      	ldr	r3, [pc, #276]	@ (8015eac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d98:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015d9c:	4944      	ldr	r1, [pc, #272]	@ (8015eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015d9e:	4845      	ldr	r0, [pc, #276]	@ (8015eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015da0:	f001 f87c 	bl	8016e9c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015da6:	68ba      	ldr	r2, [r7, #8]
 8015da8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dac:	88db      	ldrh	r3, [r3, #6]
 8015dae:	b29a      	uxth	r2, r3
 8015db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015db2:	889b      	ldrh	r3, [r3, #4]
 8015db4:	b29b      	uxth	r3, r3
 8015db6:	429a      	cmp	r2, r3
 8015db8:	d010      	beq.n	8015ddc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015dba:	2300      	movs	r3, #0
 8015dbc:	623b      	str	r3, [r7, #32]
 8015dbe:	e00d      	b.n	8015ddc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d006      	beq.n	8015dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015dc8:	4b38      	ldr	r3, [pc, #224]	@ (8015eac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015dca:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015dce:	493a      	ldr	r1, [pc, #232]	@ (8015eb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015dd0:	4838      	ldr	r0, [pc, #224]	@ (8015eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015dd2:	f001 f863 	bl	8016e9c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	68ba      	ldr	r2, [r7, #8]
 8015dda:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d105      	bne.n	8015dee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	7f9b      	ldrb	r3, [r3, #30]
 8015de6:	f003 0301 	and.w	r3, r3, #1
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d059      	beq.n	8015ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015dee:	6a3b      	ldr	r3, [r7, #32]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d04f      	beq.n	8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d006      	beq.n	8015e0a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	685b      	ldr	r3, [r3, #4]
 8015e00:	685b      	ldr	r3, [r3, #4]
 8015e02:	889b      	ldrh	r3, [r3, #4]
 8015e04:	b29b      	uxth	r3, r3
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d002      	beq.n	8015e10 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	623b      	str	r3, [r7, #32]
 8015e0e:	e041      	b.n	8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e12:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015e1a:	e012      	b.n	8015e42 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e1e:	685b      	ldr	r3, [r3, #4]
 8015e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e24:	88db      	ldrh	r3, [r3, #6]
 8015e26:	b29a      	uxth	r2, r3
 8015e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e2a:	889b      	ldrh	r3, [r3, #4]
 8015e2c:	b29b      	uxth	r3, r3
 8015e2e:	429a      	cmp	r2, r3
 8015e30:	d002      	beq.n	8015e38 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015e32:	2300      	movs	r3, #0
 8015e34:	623b      	str	r3, [r7, #32]
            break;
 8015e36:	e007      	b.n	8015e48 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d1e9      	bne.n	8015e1c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015e48:	6a3b      	ldr	r3, [r7, #32]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d022      	beq.n	8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	685b      	ldr	r3, [r3, #4]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d106      	bne.n	8015e64 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015e56:	4b15      	ldr	r3, [pc, #84]	@ (8015eac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e58:	f240 12df 	movw	r2, #479	@ 0x1df
 8015e5c:	4917      	ldr	r1, [pc, #92]	@ (8015ebc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e5e:	4815      	ldr	r0, [pc, #84]	@ (8015eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e60:	f001 f81c 	bl	8016e9c <iprintf>
          LWIP_ASSERT("sanity check",
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	685b      	ldr	r3, [r3, #4]
 8015e68:	685b      	ldr	r3, [r3, #4]
 8015e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e6c:	429a      	cmp	r2, r3
 8015e6e:	d106      	bne.n	8015e7e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015e70:	4b0e      	ldr	r3, [pc, #56]	@ (8015eac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e72:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015e76:	4911      	ldr	r1, [pc, #68]	@ (8015ebc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e78:	480e      	ldr	r0, [pc, #56]	@ (8015eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e7a:	f001 f80f 	bl	8016e9c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d006      	beq.n	8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015e86:	4b09      	ldr	r3, [pc, #36]	@ (8015eac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e88:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015e8c:	490c      	ldr	r1, [pc, #48]	@ (8015ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015e8e:	4809      	ldr	r0, [pc, #36]	@ (8015eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e90:	f001 f804 	bl	8016e9c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015e94:	6a3b      	ldr	r3, [r7, #32]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	bf14      	ite	ne
 8015e9a:	2301      	movne	r3, #1
 8015e9c:	2300      	moveq	r3, #0
 8015e9e:	b2db      	uxtb	r3, r3
 8015ea0:	e000      	b.n	8015ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015ea2:	2300      	movs	r3, #0
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3730      	adds	r7, #48	@ 0x30
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}
 8015eac:	0801a910 	.word	0x0801a910
 8015eb0:	0801a9f4 	.word	0x0801a9f4
 8015eb4:	0801a958 	.word	0x0801a958
 8015eb8:	0801aa14 	.word	0x0801aa14
 8015ebc:	0801aa4c 	.word	0x0801aa4c
 8015ec0:	0801aa5c 	.word	0x0801aa5c

08015ec4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b08e      	sub	sp, #56	@ 0x38
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	685b      	ldr	r3, [r3, #4]
 8015ed0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	f003 030f 	and.w	r3, r3, #15
 8015eda:	b2db      	uxtb	r3, r3
 8015edc:	009b      	lsls	r3, r3, #2
 8015ede:	b2db      	uxtb	r3, r3
 8015ee0:	2b14      	cmp	r3, #20
 8015ee2:	f040 8171 	bne.w	80161c8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ee8:	88db      	ldrh	r3, [r3, #6]
 8015eea:	b29b      	uxth	r3, r3
 8015eec:	4618      	mov	r0, r3
 8015eee:	f7f6 fc97 	bl	800c820 <lwip_htons>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ef8:	b29b      	uxth	r3, r3
 8015efa:	00db      	lsls	r3, r3, #3
 8015efc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f00:	885b      	ldrh	r3, [r3, #2]
 8015f02:	b29b      	uxth	r3, r3
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7f6 fc8b 	bl	800c820 <lwip_htons>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f10:	781b      	ldrb	r3, [r3, #0]
 8015f12:	f003 030f 	and.w	r3, r3, #15
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	009b      	lsls	r3, r3, #2
 8015f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015f1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015f22:	b29b      	uxth	r3, r3
 8015f24:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015f26:	429a      	cmp	r2, r3
 8015f28:	f0c0 8150 	bcc.w	80161cc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015f30:	b29b      	uxth	r3, r3
 8015f32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015f34:	1ad3      	subs	r3, r2, r3
 8015f36:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f7f8 f8ed 	bl	800e118 <pbuf_clen>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015f42:	4b8c      	ldr	r3, [pc, #560]	@ (8016174 <ip4_reass+0x2b0>)
 8015f44:	881b      	ldrh	r3, [r3, #0]
 8015f46:	461a      	mov	r2, r3
 8015f48:	8c3b      	ldrh	r3, [r7, #32]
 8015f4a:	4413      	add	r3, r2
 8015f4c:	2b0a      	cmp	r3, #10
 8015f4e:	dd10      	ble.n	8015f72 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f50:	8c3b      	ldrh	r3, [r7, #32]
 8015f52:	4619      	mov	r1, r3
 8015f54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015f56:	f7ff fd81 	bl	8015a5c <ip_reass_remove_oldest_datagram>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	f000 8137 	beq.w	80161d0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015f62:	4b84      	ldr	r3, [pc, #528]	@ (8016174 <ip4_reass+0x2b0>)
 8015f64:	881b      	ldrh	r3, [r3, #0]
 8015f66:	461a      	mov	r2, r3
 8015f68:	8c3b      	ldrh	r3, [r7, #32]
 8015f6a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f6c:	2b0a      	cmp	r3, #10
 8015f6e:	f300 812f 	bgt.w	80161d0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f72:	4b81      	ldr	r3, [pc, #516]	@ (8016178 <ip4_reass+0x2b4>)
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f78:	e015      	b.n	8015fa6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f7c:	695a      	ldr	r2, [r3, #20]
 8015f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f80:	68db      	ldr	r3, [r3, #12]
 8015f82:	429a      	cmp	r2, r3
 8015f84:	d10c      	bne.n	8015fa0 <ip4_reass+0xdc>
 8015f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f88:	699a      	ldr	r2, [r3, #24]
 8015f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f8c:	691b      	ldr	r3, [r3, #16]
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	d106      	bne.n	8015fa0 <ip4_reass+0xdc>
 8015f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f94:	899a      	ldrh	r2, [r3, #12]
 8015f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f98:	889b      	ldrh	r3, [r3, #4]
 8015f9a:	b29b      	uxth	r3, r3
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d006      	beq.n	8015fae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8015fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d1e6      	bne.n	8015f7a <ip4_reass+0xb6>
 8015fac:	e000      	b.n	8015fb0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015fae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d109      	bne.n	8015fca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015fb6:	8c3b      	ldrh	r3, [r7, #32]
 8015fb8:	4619      	mov	r1, r3
 8015fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015fbc:	f7ff fdb0 	bl	8015b20 <ip_reass_enqueue_new_datagram>
 8015fc0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d11c      	bne.n	8016002 <ip4_reass+0x13e>
      goto nullreturn;
 8015fc8:	e105      	b.n	80161d6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fcc:	88db      	ldrh	r3, [r3, #6]
 8015fce:	b29b      	uxth	r3, r3
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7f6 fc25 	bl	800c820 <lwip_htons>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d110      	bne.n	8016002 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fe2:	89db      	ldrh	r3, [r3, #14]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f7f6 fc1b 	bl	800c820 <lwip_htons>
 8015fea:	4603      	mov	r3, r0
 8015fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d006      	beq.n	8016002 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ff6:	3308      	adds	r3, #8
 8015ff8:	2214      	movs	r2, #20
 8015ffa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f001 f978 	bl	80172f2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016004:	88db      	ldrh	r3, [r3, #6]
 8016006:	b29b      	uxth	r3, r3
 8016008:	f003 0320 	and.w	r3, r3, #32
 801600c:	2b00      	cmp	r3, #0
 801600e:	bf0c      	ite	eq
 8016010:	2301      	moveq	r3, #1
 8016012:	2300      	movne	r3, #0
 8016014:	b2db      	uxtb	r3, r3
 8016016:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016018:	69fb      	ldr	r3, [r7, #28]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d00e      	beq.n	801603c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801601e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016020:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016022:	4413      	add	r3, r2
 8016024:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016026:	8b7a      	ldrh	r2, [r7, #26]
 8016028:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801602a:	429a      	cmp	r2, r3
 801602c:	f0c0 80a0 	bcc.w	8016170 <ip4_reass+0x2ac>
 8016030:	8b7b      	ldrh	r3, [r7, #26]
 8016032:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8016036:	4293      	cmp	r3, r2
 8016038:	f200 809a 	bhi.w	8016170 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801603c:	69fa      	ldr	r2, [r7, #28]
 801603e:	6879      	ldr	r1, [r7, #4]
 8016040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016042:	f7ff fdd5 	bl	8015bf0 <ip_reass_chain_frag_into_datagram_and_validate>
 8016046:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801604e:	f000 809b 	beq.w	8016188 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016052:	4b48      	ldr	r3, [pc, #288]	@ (8016174 <ip4_reass+0x2b0>)
 8016054:	881a      	ldrh	r2, [r3, #0]
 8016056:	8c3b      	ldrh	r3, [r7, #32]
 8016058:	4413      	add	r3, r2
 801605a:	b29a      	uxth	r2, r3
 801605c:	4b45      	ldr	r3, [pc, #276]	@ (8016174 <ip4_reass+0x2b0>)
 801605e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016060:	69fb      	ldr	r3, [r7, #28]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d00d      	beq.n	8016082 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016066:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016068:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801606a:	4413      	add	r3, r2
 801606c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016070:	8a7a      	ldrh	r2, [r7, #18]
 8016072:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016076:	7f9b      	ldrb	r3, [r3, #30]
 8016078:	f043 0301 	orr.w	r3, r3, #1
 801607c:	b2da      	uxtb	r2, r3
 801607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016080:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016082:	697b      	ldr	r3, [r7, #20]
 8016084:	2b01      	cmp	r3, #1
 8016086:	d171      	bne.n	801616c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801608a:	8b9b      	ldrh	r3, [r3, #28]
 801608c:	3314      	adds	r3, #20
 801608e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016092:	685b      	ldr	r3, [r3, #4]
 8016094:	685b      	ldr	r3, [r3, #4]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801609c:	685b      	ldr	r3, [r3, #4]
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80160a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160a4:	3308      	adds	r3, #8
 80160a6:	2214      	movs	r2, #20
 80160a8:	4619      	mov	r1, r3
 80160aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80160ac:	f001 f921 	bl	80172f2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80160b0:	8a3b      	ldrh	r3, [r7, #16]
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7f6 fbb4 	bl	800c820 <lwip_htons>
 80160b8:	4603      	mov	r3, r0
 80160ba:	461a      	mov	r2, r3
 80160bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160be:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80160c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160c2:	2200      	movs	r2, #0
 80160c4:	719a      	strb	r2, [r3, #6]
 80160c6:	2200      	movs	r2, #0
 80160c8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80160ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160cc:	2200      	movs	r2, #0
 80160ce:	729a      	strb	r2, [r3, #10]
 80160d0:	2200      	movs	r2, #0
 80160d2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80160d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160d6:	685b      	ldr	r3, [r3, #4]
 80160d8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80160da:	e00d      	b.n	80160f8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80160dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160de:	685b      	ldr	r3, [r3, #4]
 80160e0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80160e2:	2114      	movs	r1, #20
 80160e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80160e6:	f7f7 ff03 	bl	800def0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80160ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f7f8 f853 	bl	800e198 <pbuf_cat>
      r = iprh->next_pbuf;
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80160f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d1ee      	bne.n	80160dc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80160fe:	4b1e      	ldr	r3, [pc, #120]	@ (8016178 <ip4_reass+0x2b4>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016104:	429a      	cmp	r2, r3
 8016106:	d102      	bne.n	801610e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016108:	2300      	movs	r3, #0
 801610a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801610c:	e010      	b.n	8016130 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801610e:	4b1a      	ldr	r3, [pc, #104]	@ (8016178 <ip4_reass+0x2b4>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016114:	e007      	b.n	8016126 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801611c:	429a      	cmp	r2, r3
 801611e:	d006      	beq.n	801612e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016128:	2b00      	cmp	r3, #0
 801612a:	d1f4      	bne.n	8016116 <ip4_reass+0x252>
 801612c:	e000      	b.n	8016130 <ip4_reass+0x26c>
          break;
 801612e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016130:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016132:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016134:	f7ff fd2e 	bl	8015b94 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f7f7 ffed 	bl	800e118 <pbuf_clen>
 801613e:	4603      	mov	r3, r0
 8016140:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016142:	4b0c      	ldr	r3, [pc, #48]	@ (8016174 <ip4_reass+0x2b0>)
 8016144:	881b      	ldrh	r3, [r3, #0]
 8016146:	8c3a      	ldrh	r2, [r7, #32]
 8016148:	429a      	cmp	r2, r3
 801614a:	d906      	bls.n	801615a <ip4_reass+0x296>
 801614c:	4b0b      	ldr	r3, [pc, #44]	@ (801617c <ip4_reass+0x2b8>)
 801614e:	f240 229b 	movw	r2, #667	@ 0x29b
 8016152:	490b      	ldr	r1, [pc, #44]	@ (8016180 <ip4_reass+0x2bc>)
 8016154:	480b      	ldr	r0, [pc, #44]	@ (8016184 <ip4_reass+0x2c0>)
 8016156:	f000 fea1 	bl	8016e9c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801615a:	4b06      	ldr	r3, [pc, #24]	@ (8016174 <ip4_reass+0x2b0>)
 801615c:	881a      	ldrh	r2, [r3, #0]
 801615e:	8c3b      	ldrh	r3, [r7, #32]
 8016160:	1ad3      	subs	r3, r2, r3
 8016162:	b29a      	uxth	r2, r3
 8016164:	4b03      	ldr	r3, [pc, #12]	@ (8016174 <ip4_reass+0x2b0>)
 8016166:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	e038      	b.n	80161de <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801616c:	2300      	movs	r3, #0
 801616e:	e036      	b.n	80161de <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016170:	bf00      	nop
 8016172:	e00a      	b.n	801618a <ip4_reass+0x2c6>
 8016174:	200274cc 	.word	0x200274cc
 8016178:	200274c8 	.word	0x200274c8
 801617c:	0801a910 	.word	0x0801a910
 8016180:	0801aa80 	.word	0x0801aa80
 8016184:	0801a958 	.word	0x0801a958
    goto nullreturn_ipr;
 8016188:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801618c:	2b00      	cmp	r3, #0
 801618e:	d106      	bne.n	801619e <ip4_reass+0x2da>
 8016190:	4b15      	ldr	r3, [pc, #84]	@ (80161e8 <ip4_reass+0x324>)
 8016192:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8016196:	4915      	ldr	r1, [pc, #84]	@ (80161ec <ip4_reass+0x328>)
 8016198:	4815      	ldr	r0, [pc, #84]	@ (80161f0 <ip4_reass+0x32c>)
 801619a:	f000 fe7f 	bl	8016e9c <iprintf>
  if (ipr->p == NULL) {
 801619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161a0:	685b      	ldr	r3, [r3, #4]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d116      	bne.n	80161d4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80161a6:	4b13      	ldr	r3, [pc, #76]	@ (80161f4 <ip4_reass+0x330>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80161ac:	429a      	cmp	r2, r3
 80161ae:	d006      	beq.n	80161be <ip4_reass+0x2fa>
 80161b0:	4b0d      	ldr	r3, [pc, #52]	@ (80161e8 <ip4_reass+0x324>)
 80161b2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80161b6:	4910      	ldr	r1, [pc, #64]	@ (80161f8 <ip4_reass+0x334>)
 80161b8:	480d      	ldr	r0, [pc, #52]	@ (80161f0 <ip4_reass+0x32c>)
 80161ba:	f000 fe6f 	bl	8016e9c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80161be:	2100      	movs	r1, #0
 80161c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80161c2:	f7ff fce7 	bl	8015b94 <ip_reass_dequeue_datagram>
 80161c6:	e006      	b.n	80161d6 <ip4_reass+0x312>
    goto nullreturn;
 80161c8:	bf00      	nop
 80161ca:	e004      	b.n	80161d6 <ip4_reass+0x312>
    goto nullreturn;
 80161cc:	bf00      	nop
 80161ce:	e002      	b.n	80161d6 <ip4_reass+0x312>
      goto nullreturn;
 80161d0:	bf00      	nop
 80161d2:	e000      	b.n	80161d6 <ip4_reass+0x312>
  }

nullreturn:
 80161d4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f7f7 ff10 	bl	800dffc <pbuf_free>
  return NULL;
 80161dc:	2300      	movs	r3, #0
}
 80161de:	4618      	mov	r0, r3
 80161e0:	3738      	adds	r7, #56	@ 0x38
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bd80      	pop	{r7, pc}
 80161e6:	bf00      	nop
 80161e8:	0801a910 	.word	0x0801a910
 80161ec:	0801aa9c 	.word	0x0801aa9c
 80161f0:	0801a958 	.word	0x0801a958
 80161f4:	200274c8 	.word	0x200274c8
 80161f8:	0801aaa8 	.word	0x0801aaa8

080161fc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016200:	2005      	movs	r0, #5
 8016202:	f7f6 ffe1 	bl	800d1c8 <memp_malloc>
 8016206:	4603      	mov	r3, r0
}
 8016208:	4618      	mov	r0, r3
 801620a:	bd80      	pop	{r7, pc}

0801620c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b082      	sub	sp, #8
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d106      	bne.n	8016228 <ip_frag_free_pbuf_custom_ref+0x1c>
 801621a:	4b07      	ldr	r3, [pc, #28]	@ (8016238 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801621c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016220:	4906      	ldr	r1, [pc, #24]	@ (801623c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016222:	4807      	ldr	r0, [pc, #28]	@ (8016240 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016224:	f000 fe3a 	bl	8016e9c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016228:	6879      	ldr	r1, [r7, #4]
 801622a:	2005      	movs	r0, #5
 801622c:	f7f7 f842 	bl	800d2b4 <memp_free>
}
 8016230:	bf00      	nop
 8016232:	3708      	adds	r7, #8
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}
 8016238:	0801a910 	.word	0x0801a910
 801623c:	0801aac8 	.word	0x0801aac8
 8016240:	0801a958 	.word	0x0801a958

08016244 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b084      	sub	sp, #16
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d106      	bne.n	8016264 <ipfrag_free_pbuf_custom+0x20>
 8016256:	4b11      	ldr	r3, [pc, #68]	@ (801629c <ipfrag_free_pbuf_custom+0x58>)
 8016258:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801625c:	4910      	ldr	r1, [pc, #64]	@ (80162a0 <ipfrag_free_pbuf_custom+0x5c>)
 801625e:	4811      	ldr	r0, [pc, #68]	@ (80162a4 <ipfrag_free_pbuf_custom+0x60>)
 8016260:	f000 fe1c 	bl	8016e9c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016264:	68fa      	ldr	r2, [r7, #12]
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	429a      	cmp	r2, r3
 801626a:	d006      	beq.n	801627a <ipfrag_free_pbuf_custom+0x36>
 801626c:	4b0b      	ldr	r3, [pc, #44]	@ (801629c <ipfrag_free_pbuf_custom+0x58>)
 801626e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8016272:	490d      	ldr	r1, [pc, #52]	@ (80162a8 <ipfrag_free_pbuf_custom+0x64>)
 8016274:	480b      	ldr	r0, [pc, #44]	@ (80162a4 <ipfrag_free_pbuf_custom+0x60>)
 8016276:	f000 fe11 	bl	8016e9c <iprintf>
  if (pcr->original != NULL) {
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	695b      	ldr	r3, [r3, #20]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d004      	beq.n	801628c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	695b      	ldr	r3, [r3, #20]
 8016286:	4618      	mov	r0, r3
 8016288:	f7f7 feb8 	bl	800dffc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801628c:	68f8      	ldr	r0, [r7, #12]
 801628e:	f7ff ffbd 	bl	801620c <ip_frag_free_pbuf_custom_ref>
}
 8016292:	bf00      	nop
 8016294:	3710      	adds	r7, #16
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}
 801629a:	bf00      	nop
 801629c:	0801a910 	.word	0x0801a910
 80162a0:	0801aad4 	.word	0x0801aad4
 80162a4:	0801a958 	.word	0x0801a958
 80162a8:	0801aae0 	.word	0x0801aae0

080162ac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b094      	sub	sp, #80	@ 0x50
 80162b0:	af02      	add	r7, sp, #8
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	60b9      	str	r1, [r7, #8]
 80162b6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80162b8:	2300      	movs	r3, #0
 80162ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80162be:	68bb      	ldr	r3, [r7, #8]
 80162c0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80162c2:	3b14      	subs	r3, #20
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	da00      	bge.n	80162ca <ip4_frag+0x1e>
 80162c8:	3307      	adds	r3, #7
 80162ca:	10db      	asrs	r3, r3, #3
 80162cc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80162ce:	2314      	movs	r3, #20
 80162d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	685b      	ldr	r3, [r3, #4]
 80162d6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80162d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162da:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80162dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162de:	781b      	ldrb	r3, [r3, #0]
 80162e0:	f003 030f 	and.w	r3, r3, #15
 80162e4:	b2db      	uxtb	r3, r3
 80162e6:	009b      	lsls	r3, r3, #2
 80162e8:	b2db      	uxtb	r3, r3
 80162ea:	2b14      	cmp	r3, #20
 80162ec:	d002      	beq.n	80162f4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80162ee:	f06f 0305 	mvn.w	r3, #5
 80162f2:	e110      	b.n	8016516 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	895b      	ldrh	r3, [r3, #10]
 80162f8:	2b13      	cmp	r3, #19
 80162fa:	d809      	bhi.n	8016310 <ip4_frag+0x64>
 80162fc:	4b88      	ldr	r3, [pc, #544]	@ (8016520 <ip4_frag+0x274>)
 80162fe:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8016302:	4988      	ldr	r1, [pc, #544]	@ (8016524 <ip4_frag+0x278>)
 8016304:	4888      	ldr	r0, [pc, #544]	@ (8016528 <ip4_frag+0x27c>)
 8016306:	f000 fdc9 	bl	8016e9c <iprintf>
 801630a:	f06f 0305 	mvn.w	r3, #5
 801630e:	e102      	b.n	8016516 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016312:	88db      	ldrh	r3, [r3, #6]
 8016314:	b29b      	uxth	r3, r3
 8016316:	4618      	mov	r0, r3
 8016318:	f7f6 fa82 	bl	800c820 <lwip_htons>
 801631c:	4603      	mov	r3, r0
 801631e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016320:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016322:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016326:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801632a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801632c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016330:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	891b      	ldrh	r3, [r3, #8]
 8016336:	3b14      	subs	r3, #20
 8016338:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801633c:	e0e1      	b.n	8016502 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801633e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016340:	00db      	lsls	r3, r3, #3
 8016342:	b29b      	uxth	r3, r3
 8016344:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016348:	4293      	cmp	r3, r2
 801634a:	bf28      	it	cs
 801634c:	4613      	movcs	r3, r2
 801634e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016350:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016354:	2114      	movs	r1, #20
 8016356:	200e      	movs	r0, #14
 8016358:	f7f7 fb6c 	bl	800da34 <pbuf_alloc>
 801635c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016360:	2b00      	cmp	r3, #0
 8016362:	f000 80d5 	beq.w	8016510 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016368:	895b      	ldrh	r3, [r3, #10]
 801636a:	2b13      	cmp	r3, #19
 801636c:	d806      	bhi.n	801637c <ip4_frag+0xd0>
 801636e:	4b6c      	ldr	r3, [pc, #432]	@ (8016520 <ip4_frag+0x274>)
 8016370:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016374:	496d      	ldr	r1, [pc, #436]	@ (801652c <ip4_frag+0x280>)
 8016376:	486c      	ldr	r0, [pc, #432]	@ (8016528 <ip4_frag+0x27c>)
 8016378:	f000 fd90 	bl	8016e9c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801637e:	685b      	ldr	r3, [r3, #4]
 8016380:	2214      	movs	r2, #20
 8016382:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016384:	4618      	mov	r0, r3
 8016386:	f000 ffb4 	bl	80172f2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801638c:	685b      	ldr	r3, [r3, #4]
 801638e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016390:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016392:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016396:	e064      	b.n	8016462 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	895a      	ldrh	r2, [r3, #10]
 801639c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801639e:	1ad3      	subs	r3, r2, r3
 80163a0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	895b      	ldrh	r3, [r3, #10]
 80163a6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80163a8:	429a      	cmp	r2, r3
 80163aa:	d906      	bls.n	80163ba <ip4_frag+0x10e>
 80163ac:	4b5c      	ldr	r3, [pc, #368]	@ (8016520 <ip4_frag+0x274>)
 80163ae:	f240 322d 	movw	r2, #813	@ 0x32d
 80163b2:	495f      	ldr	r1, [pc, #380]	@ (8016530 <ip4_frag+0x284>)
 80163b4:	485c      	ldr	r0, [pc, #368]	@ (8016528 <ip4_frag+0x27c>)
 80163b6:	f000 fd71 	bl	8016e9c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80163ba:	8bfa      	ldrh	r2, [r7, #30]
 80163bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80163c0:	4293      	cmp	r3, r2
 80163c2:	bf28      	it	cs
 80163c4:	4613      	movcs	r3, r2
 80163c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80163ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d105      	bne.n	80163de <ip4_frag+0x132>
        poff = 0;
 80163d2:	2300      	movs	r3, #0
 80163d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	60fb      	str	r3, [r7, #12]
        continue;
 80163dc:	e041      	b.n	8016462 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80163de:	f7ff ff0d 	bl	80161fc <ip_frag_alloc_pbuf_custom_ref>
 80163e2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80163e4:	69bb      	ldr	r3, [r7, #24]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d103      	bne.n	80163f2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80163ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163ec:	f7f7 fe06 	bl	800dffc <pbuf_free>
        goto memerr;
 80163f0:	e08f      	b.n	8016512 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163f2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80163fa:	4413      	add	r3, r2
 80163fc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016400:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016404:	9201      	str	r2, [sp, #4]
 8016406:	9300      	str	r3, [sp, #0]
 8016408:	4603      	mov	r3, r0
 801640a:	2241      	movs	r2, #65	@ 0x41
 801640c:	2000      	movs	r0, #0
 801640e:	f7f7 fc3b 	bl	800dc88 <pbuf_alloced_custom>
 8016412:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016414:	697b      	ldr	r3, [r7, #20]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d106      	bne.n	8016428 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801641a:	69b8      	ldr	r0, [r7, #24]
 801641c:	f7ff fef6 	bl	801620c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016420:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016422:	f7f7 fdeb 	bl	800dffc <pbuf_free>
        goto memerr;
 8016426:	e074      	b.n	8016512 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016428:	68f8      	ldr	r0, [r7, #12]
 801642a:	f7f7 fe8d 	bl	800e148 <pbuf_ref>
      pcr->original = p;
 801642e:	69bb      	ldr	r3, [r7, #24]
 8016430:	68fa      	ldr	r2, [r7, #12]
 8016432:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016434:	69bb      	ldr	r3, [r7, #24]
 8016436:	4a3f      	ldr	r2, [pc, #252]	@ (8016534 <ip4_frag+0x288>)
 8016438:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801643a:	6979      	ldr	r1, [r7, #20]
 801643c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801643e:	f7f7 feab 	bl	800e198 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016442:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8016446:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801644a:	1ad3      	subs	r3, r2, r3
 801644c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016450:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016454:	2b00      	cmp	r3, #0
 8016456:	d004      	beq.n	8016462 <ip4_frag+0x1b6>
        poff = 0;
 8016458:	2300      	movs	r3, #0
 801645a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016462:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016466:	2b00      	cmp	r3, #0
 8016468:	d196      	bne.n	8016398 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801646a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801646c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016470:	4413      	add	r3, r2
 8016472:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016474:	68bb      	ldr	r3, [r7, #8]
 8016476:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016478:	f1a3 0213 	sub.w	r2, r3, #19
 801647c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016480:	429a      	cmp	r2, r3
 8016482:	bfcc      	ite	gt
 8016484:	2301      	movgt	r3, #1
 8016486:	2300      	movle	r3, #0
 8016488:	b2db      	uxtb	r3, r3
 801648a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801648c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016494:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016496:	6a3b      	ldr	r3, [r7, #32]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d002      	beq.n	80164a2 <ip4_frag+0x1f6>
 801649c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d003      	beq.n	80164aa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80164a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80164a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80164a8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80164aa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80164ac:	4618      	mov	r0, r3
 80164ae:	f7f6 f9b7 	bl	800c820 <lwip_htons>
 80164b2:	4603      	mov	r3, r0
 80164b4:	461a      	mov	r2, r3
 80164b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164b8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80164ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80164bc:	3314      	adds	r3, #20
 80164be:	b29b      	uxth	r3, r3
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7f6 f9ad 	bl	800c820 <lwip_htons>
 80164c6:	4603      	mov	r3, r0
 80164c8:	461a      	mov	r2, r3
 80164ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164cc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80164ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164d0:	2200      	movs	r2, #0
 80164d2:	729a      	strb	r2, [r3, #10]
 80164d4:	2200      	movs	r2, #0
 80164d6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80164d8:	68bb      	ldr	r3, [r7, #8]
 80164da:	695b      	ldr	r3, [r3, #20]
 80164dc:	687a      	ldr	r2, [r7, #4]
 80164de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80164e0:	68b8      	ldr	r0, [r7, #8]
 80164e2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80164e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80164e6:	f7f7 fd89 	bl	800dffc <pbuf_free>
    left = (u16_t)(left - fragsize);
 80164ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80164ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80164f0:	1ad3      	subs	r3, r2, r3
 80164f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80164f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80164fa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80164fc:	4413      	add	r3, r2
 80164fe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016502:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016506:	2b00      	cmp	r3, #0
 8016508:	f47f af19 	bne.w	801633e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801650c:	2300      	movs	r3, #0
 801650e:	e002      	b.n	8016516 <ip4_frag+0x26a>
      goto memerr;
 8016510:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016516:	4618      	mov	r0, r3
 8016518:	3748      	adds	r7, #72	@ 0x48
 801651a:	46bd      	mov	sp, r7
 801651c:	bd80      	pop	{r7, pc}
 801651e:	bf00      	nop
 8016520:	0801a910 	.word	0x0801a910
 8016524:	0801aaec 	.word	0x0801aaec
 8016528:	0801a958 	.word	0x0801a958
 801652c:	0801ab08 	.word	0x0801ab08
 8016530:	0801ab28 	.word	0x0801ab28
 8016534:	08016245 	.word	0x08016245

08016538 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b086      	sub	sp, #24
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016542:	230e      	movs	r3, #14
 8016544:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	895b      	ldrh	r3, [r3, #10]
 801654a:	2b0e      	cmp	r3, #14
 801654c:	d96e      	bls.n	801662c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	7bdb      	ldrb	r3, [r3, #15]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d106      	bne.n	8016564 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016556:	683b      	ldr	r3, [r7, #0]
 8016558:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801655c:	3301      	adds	r3, #1
 801655e:	b2da      	uxtb	r2, r3
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	7b1a      	ldrb	r2, [r3, #12]
 801656e:	7b5b      	ldrb	r3, [r3, #13]
 8016570:	021b      	lsls	r3, r3, #8
 8016572:	4313      	orrs	r3, r2
 8016574:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	781b      	ldrb	r3, [r3, #0]
 801657a:	f003 0301 	and.w	r3, r3, #1
 801657e:	2b00      	cmp	r3, #0
 8016580:	d023      	beq.n	80165ca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016582:	693b      	ldr	r3, [r7, #16]
 8016584:	781b      	ldrb	r3, [r3, #0]
 8016586:	2b01      	cmp	r3, #1
 8016588:	d10f      	bne.n	80165aa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	785b      	ldrb	r3, [r3, #1]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d11b      	bne.n	80165ca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016592:	693b      	ldr	r3, [r7, #16]
 8016594:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016596:	2b5e      	cmp	r3, #94	@ 0x5e
 8016598:	d117      	bne.n	80165ca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	7b5b      	ldrb	r3, [r3, #13]
 801659e:	f043 0310 	orr.w	r3, r3, #16
 80165a2:	b2da      	uxtb	r2, r3
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	735a      	strb	r2, [r3, #13]
 80165a8:	e00f      	b.n	80165ca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80165aa:	693b      	ldr	r3, [r7, #16]
 80165ac:	2206      	movs	r2, #6
 80165ae:	4928      	ldr	r1, [pc, #160]	@ (8016650 <ethernet_input+0x118>)
 80165b0:	4618      	mov	r0, r3
 80165b2:	f000 fdbb 	bl	801712c <memcmp>
 80165b6:	4603      	mov	r3, r0
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d106      	bne.n	80165ca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	7b5b      	ldrb	r3, [r3, #13]
 80165c0:	f043 0308 	orr.w	r3, r3, #8
 80165c4:	b2da      	uxtb	r2, r3
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80165ca:	89fb      	ldrh	r3, [r7, #14]
 80165cc:	2b08      	cmp	r3, #8
 80165ce:	d003      	beq.n	80165d8 <ethernet_input+0xa0>
 80165d0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80165d4:	d014      	beq.n	8016600 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80165d6:	e032      	b.n	801663e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80165de:	f003 0308 	and.w	r3, r3, #8
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d024      	beq.n	8016630 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80165e6:	8afb      	ldrh	r3, [r7, #22]
 80165e8:	4619      	mov	r1, r3
 80165ea:	6878      	ldr	r0, [r7, #4]
 80165ec:	f7f7 fc80 	bl	800def0 <pbuf_remove_header>
 80165f0:	4603      	mov	r3, r0
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d11e      	bne.n	8016634 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80165f6:	6839      	ldr	r1, [r7, #0]
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f7fe fe91 	bl	8015320 <ip4_input>
      break;
 80165fe:	e013      	b.n	8016628 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016600:	683b      	ldr	r3, [r7, #0]
 8016602:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016606:	f003 0308 	and.w	r3, r3, #8
 801660a:	2b00      	cmp	r3, #0
 801660c:	d014      	beq.n	8016638 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801660e:	8afb      	ldrh	r3, [r7, #22]
 8016610:	4619      	mov	r1, r3
 8016612:	6878      	ldr	r0, [r7, #4]
 8016614:	f7f7 fc6c 	bl	800def0 <pbuf_remove_header>
 8016618:	4603      	mov	r3, r0
 801661a:	2b00      	cmp	r3, #0
 801661c:	d10e      	bne.n	801663c <ethernet_input+0x104>
        etharp_input(p, netif);
 801661e:	6839      	ldr	r1, [r7, #0]
 8016620:	6878      	ldr	r0, [r7, #4]
 8016622:	f7fe f831 	bl	8014688 <etharp_input>
      break;
 8016626:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016628:	2300      	movs	r3, #0
 801662a:	e00c      	b.n	8016646 <ethernet_input+0x10e>
    goto free_and_return;
 801662c:	bf00      	nop
 801662e:	e006      	b.n	801663e <ethernet_input+0x106>
        goto free_and_return;
 8016630:	bf00      	nop
 8016632:	e004      	b.n	801663e <ethernet_input+0x106>
        goto free_and_return;
 8016634:	bf00      	nop
 8016636:	e002      	b.n	801663e <ethernet_input+0x106>
        goto free_and_return;
 8016638:	bf00      	nop
 801663a:	e000      	b.n	801663e <ethernet_input+0x106>
        goto free_and_return;
 801663c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801663e:	6878      	ldr	r0, [r7, #4]
 8016640:	f7f7 fcdc 	bl	800dffc <pbuf_free>
  return ERR_OK;
 8016644:	2300      	movs	r3, #0
}
 8016646:	4618      	mov	r0, r3
 8016648:	3718      	adds	r7, #24
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}
 801664e:	bf00      	nop
 8016650:	0801af38 	.word	0x0801af38

08016654 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016654:	b580      	push	{r7, lr}
 8016656:	b086      	sub	sp, #24
 8016658:	af00      	add	r7, sp, #0
 801665a:	60f8      	str	r0, [r7, #12]
 801665c:	60b9      	str	r1, [r7, #8]
 801665e:	607a      	str	r2, [r7, #4]
 8016660:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016662:	8c3b      	ldrh	r3, [r7, #32]
 8016664:	4618      	mov	r0, r3
 8016666:	f7f6 f8db 	bl	800c820 <lwip_htons>
 801666a:	4603      	mov	r3, r0
 801666c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801666e:	210e      	movs	r1, #14
 8016670:	68b8      	ldr	r0, [r7, #8]
 8016672:	f7f7 fc2d 	bl	800ded0 <pbuf_add_header>
 8016676:	4603      	mov	r3, r0
 8016678:	2b00      	cmp	r3, #0
 801667a:	d125      	bne.n	80166c8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801667c:	68bb      	ldr	r3, [r7, #8]
 801667e:	685b      	ldr	r3, [r3, #4]
 8016680:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016682:	693b      	ldr	r3, [r7, #16]
 8016684:	8afa      	ldrh	r2, [r7, #22]
 8016686:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016688:	693b      	ldr	r3, [r7, #16]
 801668a:	2206      	movs	r2, #6
 801668c:	6839      	ldr	r1, [r7, #0]
 801668e:	4618      	mov	r0, r3
 8016690:	f000 fe2f 	bl	80172f2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016694:	693b      	ldr	r3, [r7, #16]
 8016696:	3306      	adds	r3, #6
 8016698:	2206      	movs	r2, #6
 801669a:	6879      	ldr	r1, [r7, #4]
 801669c:	4618      	mov	r0, r3
 801669e:	f000 fe28 	bl	80172f2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80166a8:	2b06      	cmp	r3, #6
 80166aa:	d006      	beq.n	80166ba <ethernet_output+0x66>
 80166ac:	4b0a      	ldr	r3, [pc, #40]	@ (80166d8 <ethernet_output+0x84>)
 80166ae:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80166b2:	490a      	ldr	r1, [pc, #40]	@ (80166dc <ethernet_output+0x88>)
 80166b4:	480a      	ldr	r0, [pc, #40]	@ (80166e0 <ethernet_output+0x8c>)
 80166b6:	f000 fbf1 	bl	8016e9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	699b      	ldr	r3, [r3, #24]
 80166be:	68b9      	ldr	r1, [r7, #8]
 80166c0:	68f8      	ldr	r0, [r7, #12]
 80166c2:	4798      	blx	r3
 80166c4:	4603      	mov	r3, r0
 80166c6:	e002      	b.n	80166ce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80166c8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80166ca:	f06f 0301 	mvn.w	r3, #1
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	3718      	adds	r7, #24
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	0801ab38 	.word	0x0801ab38
 80166dc:	0801ab70 	.word	0x0801ab70
 80166e0:	0801aba4 	.word	0x0801aba4

080166e4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b082      	sub	sp, #8
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
 80166ec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	2200      	movs	r2, #0
 80166f2:	2104      	movs	r1, #4
 80166f4:	4618      	mov	r0, r3
 80166f6:	f7f2 fa21 	bl	8008b3c <osMessageQueueNew>
 80166fa:	4602      	mov	r2, r0
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d102      	bne.n	801670e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016708:	f04f 33ff 	mov.w	r3, #4294967295
 801670c:	e000      	b.n	8016710 <sys_mbox_new+0x2c>

  return ERR_OK;
 801670e:	2300      	movs	r3, #0
}
 8016710:	4618      	mov	r0, r3
 8016712:	3708      	adds	r7, #8
 8016714:	46bd      	mov	sp, r7
 8016716:	bd80      	pop	{r7, pc}

08016718 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b084      	sub	sp, #16
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
 8016720:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	6818      	ldr	r0, [r3, #0]
 8016726:	4639      	mov	r1, r7
 8016728:	2300      	movs	r3, #0
 801672a:	2200      	movs	r2, #0
 801672c:	f7f2 fa8c 	bl	8008c48 <osMessageQueuePut>
 8016730:	4603      	mov	r3, r0
 8016732:	2b00      	cmp	r3, #0
 8016734:	d102      	bne.n	801673c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016736:	2300      	movs	r3, #0
 8016738:	73fb      	strb	r3, [r7, #15]
 801673a:	e001      	b.n	8016740 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801673c:	23ff      	movs	r3, #255	@ 0xff
 801673e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016740:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016744:	4618      	mov	r0, r3
 8016746:	3710      	adds	r7, #16
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}

0801674c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b086      	sub	sp, #24
 8016750:	af00      	add	r7, sp, #0
 8016752:	60f8      	str	r0, [r7, #12]
 8016754:	60b9      	str	r1, [r7, #8]
 8016756:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016758:	f7f1 fe52 	bl	8008400 <osKernelGetTickCount>
 801675c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d013      	beq.n	801678c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	6818      	ldr	r0, [r3, #0]
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2200      	movs	r2, #0
 801676c:	68b9      	ldr	r1, [r7, #8]
 801676e:	f7f2 fadf 	bl	8008d30 <osMessageQueueGet>
 8016772:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016774:	693b      	ldr	r3, [r7, #16]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d105      	bne.n	8016786 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801677a:	f7f1 fe41 	bl	8008400 <osKernelGetTickCount>
 801677e:	4602      	mov	r2, r0
 8016780:	697b      	ldr	r3, [r7, #20]
 8016782:	1ad3      	subs	r3, r2, r3
 8016784:	e00f      	b.n	80167a6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016786:	f04f 33ff 	mov.w	r3, #4294967295
 801678a:	e00c      	b.n	80167a6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	6818      	ldr	r0, [r3, #0]
 8016790:	f04f 33ff 	mov.w	r3, #4294967295
 8016794:	2200      	movs	r2, #0
 8016796:	68b9      	ldr	r1, [r7, #8]
 8016798:	f7f2 faca 	bl	8008d30 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801679c:	f7f1 fe30 	bl	8008400 <osKernelGetTickCount>
 80167a0:	4602      	mov	r2, r0
 80167a2:	697b      	ldr	r3, [r7, #20]
 80167a4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80167a6:	4618      	mov	r0, r3
 80167a8:	3718      	adds	r7, #24
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd80      	pop	{r7, pc}

080167ae <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80167ae:	b480      	push	{r7}
 80167b0:	b083      	sub	sp, #12
 80167b2:	af00      	add	r7, sp, #0
 80167b4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d101      	bne.n	80167c2 <sys_mbox_valid+0x14>
    return 0;
 80167be:	2300      	movs	r3, #0
 80167c0:	e000      	b.n	80167c4 <sys_mbox_valid+0x16>
  else
    return 1;
 80167c2:	2301      	movs	r3, #1
}
 80167c4:	4618      	mov	r0, r3
 80167c6:	370c      	adds	r7, #12
 80167c8:	46bd      	mov	sp, r7
 80167ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ce:	4770      	bx	lr

080167d0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80167d4:	2000      	movs	r0, #0
 80167d6:	f7f1 ff0f 	bl	80085f8 <osMutexNew>
 80167da:	4603      	mov	r3, r0
 80167dc:	4a01      	ldr	r2, [pc, #4]	@ (80167e4 <sys_init+0x14>)
 80167de:	6013      	str	r3, [r2, #0]
#endif
}
 80167e0:	bf00      	nop
 80167e2:	bd80      	pop	{r7, pc}
 80167e4:	200274d0 	.word	0x200274d0

080167e8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80167f0:	2000      	movs	r0, #0
 80167f2:	f7f1 ff01 	bl	80085f8 <osMutexNew>
 80167f6:	4602      	mov	r2, r0
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d102      	bne.n	801680a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016804:	f04f 33ff 	mov.w	r3, #4294967295
 8016808:	e000      	b.n	801680c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801680a:	2300      	movs	r3, #0
}
 801680c:	4618      	mov	r0, r3
 801680e:	3708      	adds	r7, #8
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}

08016814 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b082      	sub	sp, #8
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	f04f 31ff 	mov.w	r1, #4294967295
 8016824:	4618      	mov	r0, r3
 8016826:	f7f1 ff81 	bl	800872c <osMutexAcquire>
#endif
}
 801682a:	bf00      	nop
 801682c:	3708      	adds	r7, #8
 801682e:	46bd      	mov	sp, r7
 8016830:	bd80      	pop	{r7, pc}

08016832 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016832:	b580      	push	{r7, lr}
 8016834:	b082      	sub	sp, #8
 8016836:	af00      	add	r7, sp, #0
 8016838:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	4618      	mov	r0, r3
 8016840:	f7f1 ffd2 	bl	80087e8 <osMutexRelease>
}
 8016844:	bf00      	nop
 8016846:	3708      	adds	r7, #8
 8016848:	46bd      	mov	sp, r7
 801684a:	bd80      	pop	{r7, pc}

0801684c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b08e      	sub	sp, #56	@ 0x38
 8016850:	af00      	add	r7, sp, #0
 8016852:	60f8      	str	r0, [r7, #12]
 8016854:	60b9      	str	r1, [r7, #8]
 8016856:	607a      	str	r2, [r7, #4]
 8016858:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801685a:	f107 0314 	add.w	r3, r7, #20
 801685e:	2224      	movs	r2, #36	@ 0x24
 8016860:	2100      	movs	r1, #0
 8016862:	4618      	mov	r0, r3
 8016864:	f000 fc72 	bl	801714c <memset>
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	617b      	str	r3, [r7, #20]
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016872:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016874:	f107 0314 	add.w	r3, r7, #20
 8016878:	461a      	mov	r2, r3
 801687a:	6879      	ldr	r1, [r7, #4]
 801687c:	68b8      	ldr	r0, [r7, #8]
 801687e:	f7f1 fde7 	bl	8008450 <osThreadNew>
 8016882:	4603      	mov	r3, r0
#endif
}
 8016884:	4618      	mov	r0, r3
 8016886:	3738      	adds	r7, #56	@ 0x38
 8016888:	46bd      	mov	sp, r7
 801688a:	bd80      	pop	{r7, pc}

0801688c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016890:	4b04      	ldr	r3, [pc, #16]	@ (80168a4 <sys_arch_protect+0x18>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	f04f 31ff 	mov.w	r1, #4294967295
 8016898:	4618      	mov	r0, r3
 801689a:	f7f1 ff47 	bl	800872c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801689e:	2301      	movs	r3, #1
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	bd80      	pop	{r7, pc}
 80168a4:	200274d0 	.word	0x200274d0

080168a8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b082      	sub	sp, #8
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80168b0:	4b04      	ldr	r3, [pc, #16]	@ (80168c4 <sys_arch_unprotect+0x1c>)
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	4618      	mov	r0, r3
 80168b6:	f7f1 ff97 	bl	80087e8 <osMutexRelease>
}
 80168ba:	bf00      	nop
 80168bc:	3708      	adds	r7, #8
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}
 80168c2:	bf00      	nop
 80168c4:	200274d0 	.word	0x200274d0

080168c8 <uart_testing>:
#define TIMEOUT 	1000 	// ticks (30  millis).

#define UART_SENDER 		(&huart2)
#define UART_RECEIVER 		(&huart6)

result_pro_t uart_testing(test_command_t* command){
 80168c8:	b590      	push	{r4, r7, lr}
 80168ca:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 80168ce:	af00      	add	r7, sp, #0
 80168d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80168d4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80168d8:	6018      	str	r0, [r3, #0]
 80168da:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80168de:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80168e2:	6019      	str	r1, [r3, #0]


	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 80168e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80168e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80168ec:	4618      	mov	r0, r3
 80168ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80168f2:	461a      	mov	r2, r3
 80168f4:	2100      	movs	r1, #0
 80168f6:	f000 fc29 	bl	801714c <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 80168fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80168fe:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8016902:	4618      	mov	r0, r3
 8016904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016908:	461a      	mov	r2, r3
 801690a:	2100      	movs	r1, #0
 801690c:	f000 fc1e 	bl	801714c <memset>

	result_pro_t response;
	HAL_StatusTypeDef status;

	if (command == NULL) {
 8016910:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016914:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d118      	bne.n	8016950 <uart_testing+0x88>
        printf("UART_TEST: Received NULL command pointer. Skipping.\n");
 801691e:	48a6      	ldr	r0, [pc, #664]	@ (8016bb8 <uart_testing+0x2f0>)
 8016920:	f000 fb24 	bl	8016f6c <puts>
        response.test_result = TEST_ERR;
 8016924:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016928:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801692c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016930:	809a      	strh	r2, [r3, #4]
        return response;
 8016932:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016936:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 801693a:	6819      	ldr	r1, [r3, #0]
 801693c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016940:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016944:	460b      	mov	r3, r1
 8016946:	6810      	ldr	r0, [r2, #0]
 8016948:	6018      	str	r0, [r3, #0]
 801694a:	8892      	ldrh	r2, [r2, #4]
 801694c:	809a      	strh	r2, [r3, #4]
 801694e:	e129      	b.n	8016ba4 <uart_testing+0x2dc>
	}

	response.test_id = command->test_id;
 8016950:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016954:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	681a      	ldr	r2, [r3, #0]
 801695c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016960:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016964:	601a      	str	r2, [r3, #0]

	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 8016966:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801696a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	1dd9      	adds	r1, r3, #7
 8016972:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016976:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	799b      	ldrb	r3, [r3, #6]
 801697e:	461a      	mov	r2, r3
 8016980:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016984:	4618      	mov	r0, r3
 8016986:	f000 fcb4 	bl	80172f2 <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801698a:	2300      	movs	r3, #0
 801698c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8016990:	e0e2      	b.n	8016b58 <uart_testing+0x290>
		memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear receive buffer
 8016992:	f107 0310 	add.w	r3, r7, #16
 8016996:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801699a:	2100      	movs	r1, #0
 801699c:	4618      	mov	r0, r3
 801699e:	f000 fbd5 	bl	801714c <memset>

	    status = HAL_UART_Receive_DMA(UART_RECEIVER, rx_buffer, sizeof(rx_buffer));
 80169a2:	f107 0310 	add.w	r3, r7, #16
 80169a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80169aa:	4619      	mov	r1, r3
 80169ac:	4883      	ldr	r0, [pc, #524]	@ (8016bbc <uart_testing+0x2f4>)
 80169ae:	f7ef f943 	bl	8005c38 <HAL_UART_Receive_DMA>
 80169b2:	4603      	mov	r3, r0
 80169b4:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
	    if (status != HAL_OK) {
 80169b8:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d026      	beq.n	8016a0e <uart_testing+0x146>
	        printf("Failed to start receive DMA: %d, error 0x%"PRIX32"\r\n", status, HAL_UART_GetError(UART_RECEIVER));
 80169c0:	f897 4216 	ldrb.w	r4, [r7, #534]	@ 0x216
 80169c4:	487d      	ldr	r0, [pc, #500]	@ (8016bbc <uart_testing+0x2f4>)
 80169c6:	f7ef fc91 	bl	80062ec <HAL_UART_GetError>
 80169ca:	4603      	mov	r3, r0
 80169cc:	461a      	mov	r2, r3
 80169ce:	4621      	mov	r1, r4
 80169d0:	487b      	ldr	r0, [pc, #492]	@ (8016bc0 <uart_testing+0x2f8>)
 80169d2:	f000 fa63 	bl	8016e9c <iprintf>
	        response.test_result = TEST_FAIL;
 80169d6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80169da:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80169de:	22ff      	movs	r2, #255	@ 0xff
 80169e0:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 80169e2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80169e6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80169ea:	6818      	ldr	r0, [r3, #0]
 80169ec:	f7f5 fc5a 	bl	800c2a4 <vPortFree>
	        return response;
 80169f0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80169f4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80169f8:	6819      	ldr	r1, [r3, #0]
 80169fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80169fe:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016a02:	460b      	mov	r3, r1
 8016a04:	6810      	ldr	r0, [r2, #0]
 8016a06:	6018      	str	r0, [r3, #0]
 8016a08:	8892      	ldrh	r2, [r2, #4]
 8016a0a:	809a      	strh	r2, [r3, #4]
 8016a0c:	e0ca      	b.n	8016ba4 <uart_testing+0x2dc>
	    }

        // --- 1. TRANSMIT a block of data via DMA ---
		status = HAL_UART_Transmit_DMA(UART_SENDER, tx_buffer, command->bit_pattern_length);
 8016a0e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016a12:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	799b      	ldrb	r3, [r3, #6]
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016a20:	4619      	mov	r1, r3
 8016a22:	4868      	ldr	r0, [pc, #416]	@ (8016bc4 <uart_testing+0x2fc>)
 8016a24:	f7ef f88c 	bl	8005b40 <HAL_UART_Transmit_DMA>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
		if (status != HAL_OK) {
 8016a2e:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d01f      	beq.n	8016a76 <uart_testing+0x1ae>
			printf("Failed to sendIT on UART sender: %d, error 0x%"PRIX32"\r\n", status, HAL_UART_GetError(UART_SENDER));
 8016a36:	f897 4216 	ldrb.w	r4, [r7, #534]	@ 0x216
 8016a3a:	4862      	ldr	r0, [pc, #392]	@ (8016bc4 <uart_testing+0x2fc>)
 8016a3c:	f7ef fc56 	bl	80062ec <HAL_UART_GetError>
 8016a40:	4603      	mov	r3, r0
 8016a42:	461a      	mov	r2, r3
 8016a44:	4621      	mov	r1, r4
 8016a46:	4860      	ldr	r0, [pc, #384]	@ (8016bc8 <uart_testing+0x300>)
 8016a48:	f000 fa28 	bl	8016e9c <iprintf>
	        response.test_result = TEST_FAIL;
 8016a4c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016a50:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016a54:	22ff      	movs	r2, #255	@ 0xff
 8016a56:	809a      	strh	r2, [r3, #4]
	        return response;
 8016a58:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016a5c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016a60:	6819      	ldr	r1, [r3, #0]
 8016a62:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016a66:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016a6a:	460b      	mov	r3, r1
 8016a6c:	6810      	ldr	r0, [r2, #0]
 8016a6e:	6018      	str	r0, [r3, #0]
 8016a70:	8892      	ldrh	r2, [r2, #4]
 8016a72:	809a      	strh	r2, [r3, #4]
 8016a74:	e096      	b.n	8016ba4 <uart_testing+0x2dc>
//        else{
//			printf("Failed to receive a xUartRxSemaphore Token\n");
//        }

        // --- 3. COMPARE SENT vs. RECEIVED data ---
        if (command->bit_pattern_length > 100) {
 8016a76:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016a7a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	799b      	ldrb	r3, [r3, #6]
 8016a82:	2b64      	cmp	r3, #100	@ 0x64
 8016a84:	d903      	bls.n	8016a8e <uart_testing+0x1c6>
        	printf("bit_pattern_length more than 100");
 8016a86:	4851      	ldr	r0, [pc, #324]	@ (8016bcc <uart_testing+0x304>)
 8016a88:	f000 fa08 	bl	8016e9c <iprintf>
 8016a8c:	e05c      	b.n	8016b48 <uart_testing+0x280>
//                       i + 1, sent_crc, received_crc);
//                response.test_result = FAIL;
//                return response;            }
        } else {
            // Use memcmp for smaller data
        	int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 8016a8e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016a92:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	799b      	ldrb	r3, [r3, #6]
 8016a9a:	461a      	mov	r2, r3
 8016a9c:	f107 0110 	add.w	r1, r7, #16
 8016aa0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f000 fb41 	bl	801712c <memcmp>
 8016aaa:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
            if (comp != 0)
 8016aae:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d041      	beq.n	8016b3a <uart_testing+0x272>
            {
            	printf("memcmp result: %d\n", comp);
 8016ab6:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 8016aba:	4845      	ldr	r0, [pc, #276]	@ (8016bd0 <uart_testing+0x308>)
 8016abc:	f000 f9ee 	bl	8016e9c <iprintf>

                printf("UART_TEST: Data mismatch on iteration %u.\n", i + 1);
 8016ac0:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8016ac4:	3301      	adds	r3, #1
 8016ac6:	4619      	mov	r1, r3
 8016ac8:	4842      	ldr	r0, [pc, #264]	@ (8016bd4 <uart_testing+0x30c>)
 8016aca:	f000 f9e7 	bl	8016e9c <iprintf>
                // debug print mismatch details for small data
                printf("Sent: %.*s\n", command->bit_pattern_length, tx_buffer);
 8016ace:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016ad2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	799b      	ldrb	r3, [r3, #6]
 8016ada:	4619      	mov	r1, r3
 8016adc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8016ae0:	461a      	mov	r2, r3
 8016ae2:	483d      	ldr	r0, [pc, #244]	@ (8016bd8 <uart_testing+0x310>)
 8016ae4:	f000 f9da 	bl	8016e9c <iprintf>
                printf("Recv: %.*s\n", command->bit_pattern_length, rx_buffer);
 8016ae8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016aec:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	799b      	ldrb	r3, [r3, #6]
 8016af4:	4619      	mov	r1, r3
 8016af6:	f107 0310 	add.w	r3, r7, #16
 8016afa:	461a      	mov	r2, r3
 8016afc:	4837      	ldr	r0, [pc, #220]	@ (8016bdc <uart_testing+0x314>)
 8016afe:	f000 f9cd 	bl	8016e9c <iprintf>

                response.test_result = TEST_FAIL;
 8016b02:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016b06:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016b0a:	22ff      	movs	r2, #255	@ 0xff
 8016b0c:	809a      	strh	r2, [r3, #4]
                vPortFree(command);
 8016b0e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016b12:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016b16:	6818      	ldr	r0, [r3, #0]
 8016b18:	f7f5 fbc4 	bl	800c2a4 <vPortFree>
                return response;
 8016b1c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016b20:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016b24:	6819      	ldr	r1, [r3, #0]
 8016b26:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016b2a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016b2e:	460b      	mov	r3, r1
 8016b30:	6810      	ldr	r0, [r2, #0]
 8016b32:	6018      	str	r0, [r3, #0]
 8016b34:	8892      	ldrh	r2, [r2, #4]
 8016b36:	809a      	strh	r2, [r3, #4]
 8016b38:	e034      	b.n	8016ba4 <uart_testing+0x2dc>
            }
            else{
                printf("UART_TEST: Data Match on iteration %u.\n", i + 1);
 8016b3a:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8016b3e:	3301      	adds	r3, #1
 8016b40:	4619      	mov	r1, r3
 8016b42:	4827      	ldr	r0, [pc, #156]	@ (8016be0 <uart_testing+0x318>)
 8016b44:	f000 f9aa 	bl	8016e9c <iprintf>
            }
        }

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 8016b48:	200a      	movs	r0, #10
 8016b4a:	f7f1 fd27 	bl	800859c <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 8016b4e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8016b52:	3301      	adds	r3, #1
 8016b54:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8016b58:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016b5c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	795b      	ldrb	r3, [r3, #5]
 8016b64:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 8016b68:	429a      	cmp	r2, r3
 8016b6a:	f4ff af12 	bcc.w	8016992 <uart_testing+0xca>
	}
    response.test_result = TEST_PASS;
 8016b6e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016b72:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8016b76:	2201      	movs	r2, #1
 8016b78:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 8016b7a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016b7e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8016b82:	6818      	ldr	r0, [r3, #0]
 8016b84:	f7f5 fb8e 	bl	800c2a4 <vPortFree>
    return response;
 8016b88:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016b8c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016b90:	6819      	ldr	r1, [r3, #0]
 8016b92:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016b96:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8016b9a:	460b      	mov	r3, r1
 8016b9c:	6810      	ldr	r0, [r2, #0]
 8016b9e:	6018      	str	r0, [r3, #0]
 8016ba0:	8892      	ldrh	r2, [r2, #4]
 8016ba2:	809a      	strh	r2, [r3, #4]
}
 8016ba4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8016ba8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8016bac:	6818      	ldr	r0, [r3, #0]
 8016bae:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd90      	pop	{r4, r7, pc}
 8016bb6:	bf00      	nop
 8016bb8:	0801abcc 	.word	0x0801abcc
 8016bbc:	2000034c 	.word	0x2000034c
 8016bc0:	0801ac00 	.word	0x0801ac00
 8016bc4:	2000023c 	.word	0x2000023c
 8016bc8:	0801ac30 	.word	0x0801ac30
 8016bcc:	0801ac64 	.word	0x0801ac64
 8016bd0:	0801ac88 	.word	0x0801ac88
 8016bd4:	0801ac9c 	.word	0x0801ac9c
 8016bd8:	0801acc8 	.word	0x0801acc8
 8016bdc:	0801acd4 	.word	0x0801acd4
 8016be0:	0801ace0 	.word	0x0801ace0

08016be4 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b084      	sub	sp, #16
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8016bec:	2300      	movs	r3, #0
 8016bee:	60fb      	str	r3, [r7, #12]
    printf("TX callback fired\n");
 8016bf0:	480f      	ldr	r0, [pc, #60]	@ (8016c30 <HAL_UART_TxCpltCallback+0x4c>)
 8016bf2:	f000 f9bb 	bl	8016f6c <puts>

    if (huart->Instance == UART_SENDER->Instance) // Check the instance of your sender UART
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681a      	ldr	r2, [r3, #0]
 8016bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8016c34 <HAL_UART_TxCpltCallback+0x50>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d107      	bne.n	8016c12 <HAL_UART_TxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(xUartTxSemaphoreHandle, &xHigherPriorityTaskWoken);
 8016c02:	4b0d      	ldr	r3, [pc, #52]	@ (8016c38 <HAL_UART_TxCpltCallback+0x54>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	f107 020c 	add.w	r2, r7, #12
 8016c0a:	4611      	mov	r1, r2
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f7f2 fe22 	bl	8009856 <xQueueGiveFromISR>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d007      	beq.n	8016c28 <HAL_UART_TxCpltCallback+0x44>
 8016c18:	4b08      	ldr	r3, [pc, #32]	@ (8016c3c <HAL_UART_TxCpltCallback+0x58>)
 8016c1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016c1e:	601a      	str	r2, [r3, #0]
 8016c20:	f3bf 8f4f 	dsb	sy
 8016c24:	f3bf 8f6f 	isb	sy

}
 8016c28:	bf00      	nop
 8016c2a:	3710      	adds	r7, #16
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bd80      	pop	{r7, pc}
 8016c30:	0801ad08 	.word	0x0801ad08
 8016c34:	2000023c 	.word	0x2000023c
 8016c38:	2000098c 	.word	0x2000098c
 8016c3c:	e000ed04 	.word	0xe000ed04

08016c40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b084      	sub	sp, #16
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	60fb      	str	r3, [r7, #12]
    printf("RX callback fired\n");
 8016c4c:	480f      	ldr	r0, [pc, #60]	@ (8016c8c <HAL_UART_RxCpltCallback+0x4c>)
 8016c4e:	f000 f98d 	bl	8016f6c <puts>

    if (huart->Instance == UART_RECEIVER->Instance) // Check the instance of your receiver UART
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	681a      	ldr	r2, [r3, #0]
 8016c56:	4b0e      	ldr	r3, [pc, #56]	@ (8016c90 <HAL_UART_RxCpltCallback+0x50>)
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d107      	bne.n	8016c6e <HAL_UART_RxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(xUartRxSemaphoreHandle, &xHigherPriorityTaskWoken);
 8016c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8016c94 <HAL_UART_RxCpltCallback+0x54>)
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	f107 020c 	add.w	r2, r7, #12
 8016c66:	4611      	mov	r1, r2
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f7f2 fdf4 	bl	8009856 <xQueueGiveFromISR>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d007      	beq.n	8016c84 <HAL_UART_RxCpltCallback+0x44>
 8016c74:	4b08      	ldr	r3, [pc, #32]	@ (8016c98 <HAL_UART_RxCpltCallback+0x58>)
 8016c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016c7a:	601a      	str	r2, [r3, #0]
 8016c7c:	f3bf 8f4f 	dsb	sy
 8016c80:	f3bf 8f6f 	isb	sy
}
 8016c84:	bf00      	nop
 8016c86:	3710      	adds	r7, #16
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	bd80      	pop	{r7, pc}
 8016c8c:	0801ad1c 	.word	0x0801ad1c
 8016c90:	2000034c 	.word	0x2000034c
 8016c94:	20000988 	.word	0x20000988
 8016c98:	e000ed04 	.word	0xe000ed04

08016c9c <rand>:
 8016c9c:	4b16      	ldr	r3, [pc, #88]	@ (8016cf8 <rand+0x5c>)
 8016c9e:	b510      	push	{r4, lr}
 8016ca0:	681c      	ldr	r4, [r3, #0]
 8016ca2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016ca4:	b9b3      	cbnz	r3, 8016cd4 <rand+0x38>
 8016ca6:	2018      	movs	r0, #24
 8016ca8:	f000 fb9a 	bl	80173e0 <malloc>
 8016cac:	4602      	mov	r2, r0
 8016cae:	6320      	str	r0, [r4, #48]	@ 0x30
 8016cb0:	b920      	cbnz	r0, 8016cbc <rand+0x20>
 8016cb2:	4b12      	ldr	r3, [pc, #72]	@ (8016cfc <rand+0x60>)
 8016cb4:	4812      	ldr	r0, [pc, #72]	@ (8016d00 <rand+0x64>)
 8016cb6:	2152      	movs	r1, #82	@ 0x52
 8016cb8:	f000 fb2a 	bl	8017310 <__assert_func>
 8016cbc:	4911      	ldr	r1, [pc, #68]	@ (8016d04 <rand+0x68>)
 8016cbe:	4b12      	ldr	r3, [pc, #72]	@ (8016d08 <rand+0x6c>)
 8016cc0:	e9c0 1300 	strd	r1, r3, [r0]
 8016cc4:	4b11      	ldr	r3, [pc, #68]	@ (8016d0c <rand+0x70>)
 8016cc6:	6083      	str	r3, [r0, #8]
 8016cc8:	230b      	movs	r3, #11
 8016cca:	8183      	strh	r3, [r0, #12]
 8016ccc:	2100      	movs	r1, #0
 8016cce:	2001      	movs	r0, #1
 8016cd0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016cd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016cd6:	480e      	ldr	r0, [pc, #56]	@ (8016d10 <rand+0x74>)
 8016cd8:	690b      	ldr	r3, [r1, #16]
 8016cda:	694c      	ldr	r4, [r1, #20]
 8016cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8016d14 <rand+0x78>)
 8016cde:	4358      	muls	r0, r3
 8016ce0:	fb02 0004 	mla	r0, r2, r4, r0
 8016ce4:	fba3 3202 	umull	r3, r2, r3, r2
 8016ce8:	3301      	adds	r3, #1
 8016cea:	eb40 0002 	adc.w	r0, r0, r2
 8016cee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016cf2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016cf6:	bd10      	pop	{r4, pc}
 8016cf8:	2000003c 	.word	0x2000003c
 8016cfc:	0801af46 	.word	0x0801af46
 8016d00:	0801af5d 	.word	0x0801af5d
 8016d04:	abcd330e 	.word	0xabcd330e
 8016d08:	e66d1234 	.word	0xe66d1234
 8016d0c:	0005deec 	.word	0x0005deec
 8016d10:	5851f42d 	.word	0x5851f42d
 8016d14:	4c957f2d 	.word	0x4c957f2d

08016d18 <std>:
 8016d18:	2300      	movs	r3, #0
 8016d1a:	b510      	push	{r4, lr}
 8016d1c:	4604      	mov	r4, r0
 8016d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8016d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d26:	6083      	str	r3, [r0, #8]
 8016d28:	8181      	strh	r1, [r0, #12]
 8016d2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8016d2c:	81c2      	strh	r2, [r0, #14]
 8016d2e:	6183      	str	r3, [r0, #24]
 8016d30:	4619      	mov	r1, r3
 8016d32:	2208      	movs	r2, #8
 8016d34:	305c      	adds	r0, #92	@ 0x5c
 8016d36:	f000 fa09 	bl	801714c <memset>
 8016d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8016d70 <std+0x58>)
 8016d3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8016d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8016d74 <std+0x5c>)
 8016d40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016d42:	4b0d      	ldr	r3, [pc, #52]	@ (8016d78 <std+0x60>)
 8016d44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016d46:	4b0d      	ldr	r3, [pc, #52]	@ (8016d7c <std+0x64>)
 8016d48:	6323      	str	r3, [r4, #48]	@ 0x30
 8016d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8016d80 <std+0x68>)
 8016d4c:	6224      	str	r4, [r4, #32]
 8016d4e:	429c      	cmp	r4, r3
 8016d50:	d006      	beq.n	8016d60 <std+0x48>
 8016d52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016d56:	4294      	cmp	r4, r2
 8016d58:	d002      	beq.n	8016d60 <std+0x48>
 8016d5a:	33d0      	adds	r3, #208	@ 0xd0
 8016d5c:	429c      	cmp	r4, r3
 8016d5e:	d105      	bne.n	8016d6c <std+0x54>
 8016d60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d68:	f000 bac0 	b.w	80172ec <__retarget_lock_init_recursive>
 8016d6c:	bd10      	pop	{r4, pc}
 8016d6e:	bf00      	nop
 8016d70:	08016f7d 	.word	0x08016f7d
 8016d74:	08016f9f 	.word	0x08016f9f
 8016d78:	08016fd7 	.word	0x08016fd7
 8016d7c:	08016ffb 	.word	0x08016ffb
 8016d80:	200274d4 	.word	0x200274d4

08016d84 <stdio_exit_handler>:
 8016d84:	4a02      	ldr	r2, [pc, #8]	@ (8016d90 <stdio_exit_handler+0xc>)
 8016d86:	4903      	ldr	r1, [pc, #12]	@ (8016d94 <stdio_exit_handler+0x10>)
 8016d88:	4803      	ldr	r0, [pc, #12]	@ (8016d98 <stdio_exit_handler+0x14>)
 8016d8a:	f000 b869 	b.w	8016e60 <_fwalk_sglue>
 8016d8e:	bf00      	nop
 8016d90:	20000030 	.word	0x20000030
 8016d94:	08017bf1 	.word	0x08017bf1
 8016d98:	20000040 	.word	0x20000040

08016d9c <cleanup_stdio>:
 8016d9c:	6841      	ldr	r1, [r0, #4]
 8016d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8016dd0 <cleanup_stdio+0x34>)
 8016da0:	4299      	cmp	r1, r3
 8016da2:	b510      	push	{r4, lr}
 8016da4:	4604      	mov	r4, r0
 8016da6:	d001      	beq.n	8016dac <cleanup_stdio+0x10>
 8016da8:	f000 ff22 	bl	8017bf0 <_fflush_r>
 8016dac:	68a1      	ldr	r1, [r4, #8]
 8016dae:	4b09      	ldr	r3, [pc, #36]	@ (8016dd4 <cleanup_stdio+0x38>)
 8016db0:	4299      	cmp	r1, r3
 8016db2:	d002      	beq.n	8016dba <cleanup_stdio+0x1e>
 8016db4:	4620      	mov	r0, r4
 8016db6:	f000 ff1b 	bl	8017bf0 <_fflush_r>
 8016dba:	68e1      	ldr	r1, [r4, #12]
 8016dbc:	4b06      	ldr	r3, [pc, #24]	@ (8016dd8 <cleanup_stdio+0x3c>)
 8016dbe:	4299      	cmp	r1, r3
 8016dc0:	d004      	beq.n	8016dcc <cleanup_stdio+0x30>
 8016dc2:	4620      	mov	r0, r4
 8016dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dc8:	f000 bf12 	b.w	8017bf0 <_fflush_r>
 8016dcc:	bd10      	pop	{r4, pc}
 8016dce:	bf00      	nop
 8016dd0:	200274d4 	.word	0x200274d4
 8016dd4:	2002753c 	.word	0x2002753c
 8016dd8:	200275a4 	.word	0x200275a4

08016ddc <global_stdio_init.part.0>:
 8016ddc:	b510      	push	{r4, lr}
 8016dde:	4b0b      	ldr	r3, [pc, #44]	@ (8016e0c <global_stdio_init.part.0+0x30>)
 8016de0:	4c0b      	ldr	r4, [pc, #44]	@ (8016e10 <global_stdio_init.part.0+0x34>)
 8016de2:	4a0c      	ldr	r2, [pc, #48]	@ (8016e14 <global_stdio_init.part.0+0x38>)
 8016de4:	601a      	str	r2, [r3, #0]
 8016de6:	4620      	mov	r0, r4
 8016de8:	2200      	movs	r2, #0
 8016dea:	2104      	movs	r1, #4
 8016dec:	f7ff ff94 	bl	8016d18 <std>
 8016df0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016df4:	2201      	movs	r2, #1
 8016df6:	2109      	movs	r1, #9
 8016df8:	f7ff ff8e 	bl	8016d18 <std>
 8016dfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016e00:	2202      	movs	r2, #2
 8016e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e06:	2112      	movs	r1, #18
 8016e08:	f7ff bf86 	b.w	8016d18 <std>
 8016e0c:	2002760c 	.word	0x2002760c
 8016e10:	200274d4 	.word	0x200274d4
 8016e14:	08016d85 	.word	0x08016d85

08016e18 <__sfp_lock_acquire>:
 8016e18:	4801      	ldr	r0, [pc, #4]	@ (8016e20 <__sfp_lock_acquire+0x8>)
 8016e1a:	f000 ba68 	b.w	80172ee <__retarget_lock_acquire_recursive>
 8016e1e:	bf00      	nop
 8016e20:	20027615 	.word	0x20027615

08016e24 <__sfp_lock_release>:
 8016e24:	4801      	ldr	r0, [pc, #4]	@ (8016e2c <__sfp_lock_release+0x8>)
 8016e26:	f000 ba63 	b.w	80172f0 <__retarget_lock_release_recursive>
 8016e2a:	bf00      	nop
 8016e2c:	20027615 	.word	0x20027615

08016e30 <__sinit>:
 8016e30:	b510      	push	{r4, lr}
 8016e32:	4604      	mov	r4, r0
 8016e34:	f7ff fff0 	bl	8016e18 <__sfp_lock_acquire>
 8016e38:	6a23      	ldr	r3, [r4, #32]
 8016e3a:	b11b      	cbz	r3, 8016e44 <__sinit+0x14>
 8016e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e40:	f7ff bff0 	b.w	8016e24 <__sfp_lock_release>
 8016e44:	4b04      	ldr	r3, [pc, #16]	@ (8016e58 <__sinit+0x28>)
 8016e46:	6223      	str	r3, [r4, #32]
 8016e48:	4b04      	ldr	r3, [pc, #16]	@ (8016e5c <__sinit+0x2c>)
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d1f5      	bne.n	8016e3c <__sinit+0xc>
 8016e50:	f7ff ffc4 	bl	8016ddc <global_stdio_init.part.0>
 8016e54:	e7f2      	b.n	8016e3c <__sinit+0xc>
 8016e56:	bf00      	nop
 8016e58:	08016d9d 	.word	0x08016d9d
 8016e5c:	2002760c 	.word	0x2002760c

08016e60 <_fwalk_sglue>:
 8016e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e64:	4607      	mov	r7, r0
 8016e66:	4688      	mov	r8, r1
 8016e68:	4614      	mov	r4, r2
 8016e6a:	2600      	movs	r6, #0
 8016e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e70:	f1b9 0901 	subs.w	r9, r9, #1
 8016e74:	d505      	bpl.n	8016e82 <_fwalk_sglue+0x22>
 8016e76:	6824      	ldr	r4, [r4, #0]
 8016e78:	2c00      	cmp	r4, #0
 8016e7a:	d1f7      	bne.n	8016e6c <_fwalk_sglue+0xc>
 8016e7c:	4630      	mov	r0, r6
 8016e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e82:	89ab      	ldrh	r3, [r5, #12]
 8016e84:	2b01      	cmp	r3, #1
 8016e86:	d907      	bls.n	8016e98 <_fwalk_sglue+0x38>
 8016e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e8c:	3301      	adds	r3, #1
 8016e8e:	d003      	beq.n	8016e98 <_fwalk_sglue+0x38>
 8016e90:	4629      	mov	r1, r5
 8016e92:	4638      	mov	r0, r7
 8016e94:	47c0      	blx	r8
 8016e96:	4306      	orrs	r6, r0
 8016e98:	3568      	adds	r5, #104	@ 0x68
 8016e9a:	e7e9      	b.n	8016e70 <_fwalk_sglue+0x10>

08016e9c <iprintf>:
 8016e9c:	b40f      	push	{r0, r1, r2, r3}
 8016e9e:	b507      	push	{r0, r1, r2, lr}
 8016ea0:	4906      	ldr	r1, [pc, #24]	@ (8016ebc <iprintf+0x20>)
 8016ea2:	ab04      	add	r3, sp, #16
 8016ea4:	6808      	ldr	r0, [r1, #0]
 8016ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016eaa:	6881      	ldr	r1, [r0, #8]
 8016eac:	9301      	str	r3, [sp, #4]
 8016eae:	f000 fb77 	bl	80175a0 <_vfiprintf_r>
 8016eb2:	b003      	add	sp, #12
 8016eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016eb8:	b004      	add	sp, #16
 8016eba:	4770      	bx	lr
 8016ebc:	2000003c 	.word	0x2000003c

08016ec0 <_puts_r>:
 8016ec0:	6a03      	ldr	r3, [r0, #32]
 8016ec2:	b570      	push	{r4, r5, r6, lr}
 8016ec4:	6884      	ldr	r4, [r0, #8]
 8016ec6:	4605      	mov	r5, r0
 8016ec8:	460e      	mov	r6, r1
 8016eca:	b90b      	cbnz	r3, 8016ed0 <_puts_r+0x10>
 8016ecc:	f7ff ffb0 	bl	8016e30 <__sinit>
 8016ed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ed2:	07db      	lsls	r3, r3, #31
 8016ed4:	d405      	bmi.n	8016ee2 <_puts_r+0x22>
 8016ed6:	89a3      	ldrh	r3, [r4, #12]
 8016ed8:	0598      	lsls	r0, r3, #22
 8016eda:	d402      	bmi.n	8016ee2 <_puts_r+0x22>
 8016edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ede:	f000 fa06 	bl	80172ee <__retarget_lock_acquire_recursive>
 8016ee2:	89a3      	ldrh	r3, [r4, #12]
 8016ee4:	0719      	lsls	r1, r3, #28
 8016ee6:	d502      	bpl.n	8016eee <_puts_r+0x2e>
 8016ee8:	6923      	ldr	r3, [r4, #16]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d135      	bne.n	8016f5a <_puts_r+0x9a>
 8016eee:	4621      	mov	r1, r4
 8016ef0:	4628      	mov	r0, r5
 8016ef2:	f000 f8c5 	bl	8017080 <__swsetup_r>
 8016ef6:	b380      	cbz	r0, 8016f5a <_puts_r+0x9a>
 8016ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8016efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016efe:	07da      	lsls	r2, r3, #31
 8016f00:	d405      	bmi.n	8016f0e <_puts_r+0x4e>
 8016f02:	89a3      	ldrh	r3, [r4, #12]
 8016f04:	059b      	lsls	r3, r3, #22
 8016f06:	d402      	bmi.n	8016f0e <_puts_r+0x4e>
 8016f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f0a:	f000 f9f1 	bl	80172f0 <__retarget_lock_release_recursive>
 8016f0e:	4628      	mov	r0, r5
 8016f10:	bd70      	pop	{r4, r5, r6, pc}
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	da04      	bge.n	8016f20 <_puts_r+0x60>
 8016f16:	69a2      	ldr	r2, [r4, #24]
 8016f18:	429a      	cmp	r2, r3
 8016f1a:	dc17      	bgt.n	8016f4c <_puts_r+0x8c>
 8016f1c:	290a      	cmp	r1, #10
 8016f1e:	d015      	beq.n	8016f4c <_puts_r+0x8c>
 8016f20:	6823      	ldr	r3, [r4, #0]
 8016f22:	1c5a      	adds	r2, r3, #1
 8016f24:	6022      	str	r2, [r4, #0]
 8016f26:	7019      	strb	r1, [r3, #0]
 8016f28:	68a3      	ldr	r3, [r4, #8]
 8016f2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016f2e:	3b01      	subs	r3, #1
 8016f30:	60a3      	str	r3, [r4, #8]
 8016f32:	2900      	cmp	r1, #0
 8016f34:	d1ed      	bne.n	8016f12 <_puts_r+0x52>
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	da11      	bge.n	8016f5e <_puts_r+0x9e>
 8016f3a:	4622      	mov	r2, r4
 8016f3c:	210a      	movs	r1, #10
 8016f3e:	4628      	mov	r0, r5
 8016f40:	f000 f85f 	bl	8017002 <__swbuf_r>
 8016f44:	3001      	adds	r0, #1
 8016f46:	d0d7      	beq.n	8016ef8 <_puts_r+0x38>
 8016f48:	250a      	movs	r5, #10
 8016f4a:	e7d7      	b.n	8016efc <_puts_r+0x3c>
 8016f4c:	4622      	mov	r2, r4
 8016f4e:	4628      	mov	r0, r5
 8016f50:	f000 f857 	bl	8017002 <__swbuf_r>
 8016f54:	3001      	adds	r0, #1
 8016f56:	d1e7      	bne.n	8016f28 <_puts_r+0x68>
 8016f58:	e7ce      	b.n	8016ef8 <_puts_r+0x38>
 8016f5a:	3e01      	subs	r6, #1
 8016f5c:	e7e4      	b.n	8016f28 <_puts_r+0x68>
 8016f5e:	6823      	ldr	r3, [r4, #0]
 8016f60:	1c5a      	adds	r2, r3, #1
 8016f62:	6022      	str	r2, [r4, #0]
 8016f64:	220a      	movs	r2, #10
 8016f66:	701a      	strb	r2, [r3, #0]
 8016f68:	e7ee      	b.n	8016f48 <_puts_r+0x88>
	...

08016f6c <puts>:
 8016f6c:	4b02      	ldr	r3, [pc, #8]	@ (8016f78 <puts+0xc>)
 8016f6e:	4601      	mov	r1, r0
 8016f70:	6818      	ldr	r0, [r3, #0]
 8016f72:	f7ff bfa5 	b.w	8016ec0 <_puts_r>
 8016f76:	bf00      	nop
 8016f78:	2000003c 	.word	0x2000003c

08016f7c <__sread>:
 8016f7c:	b510      	push	{r4, lr}
 8016f7e:	460c      	mov	r4, r1
 8016f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f84:	f000 f96a 	bl	801725c <_read_r>
 8016f88:	2800      	cmp	r0, #0
 8016f8a:	bfab      	itete	ge
 8016f8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8016f90:	181b      	addge	r3, r3, r0
 8016f92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016f96:	bfac      	ite	ge
 8016f98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016f9a:	81a3      	strhlt	r3, [r4, #12]
 8016f9c:	bd10      	pop	{r4, pc}

08016f9e <__swrite>:
 8016f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fa2:	461f      	mov	r7, r3
 8016fa4:	898b      	ldrh	r3, [r1, #12]
 8016fa6:	05db      	lsls	r3, r3, #23
 8016fa8:	4605      	mov	r5, r0
 8016faa:	460c      	mov	r4, r1
 8016fac:	4616      	mov	r6, r2
 8016fae:	d505      	bpl.n	8016fbc <__swrite+0x1e>
 8016fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fb4:	2302      	movs	r3, #2
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	f000 f93e 	bl	8017238 <_lseek_r>
 8016fbc:	89a3      	ldrh	r3, [r4, #12]
 8016fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016fc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016fc6:	81a3      	strh	r3, [r4, #12]
 8016fc8:	4632      	mov	r2, r6
 8016fca:	463b      	mov	r3, r7
 8016fcc:	4628      	mov	r0, r5
 8016fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fd2:	f000 b955 	b.w	8017280 <_write_r>

08016fd6 <__sseek>:
 8016fd6:	b510      	push	{r4, lr}
 8016fd8:	460c      	mov	r4, r1
 8016fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fde:	f000 f92b 	bl	8017238 <_lseek_r>
 8016fe2:	1c43      	adds	r3, r0, #1
 8016fe4:	89a3      	ldrh	r3, [r4, #12]
 8016fe6:	bf15      	itete	ne
 8016fe8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016fea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016fee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016ff2:	81a3      	strheq	r3, [r4, #12]
 8016ff4:	bf18      	it	ne
 8016ff6:	81a3      	strhne	r3, [r4, #12]
 8016ff8:	bd10      	pop	{r4, pc}

08016ffa <__sclose>:
 8016ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ffe:	f000 b8ad 	b.w	801715c <_close_r>

08017002 <__swbuf_r>:
 8017002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017004:	460e      	mov	r6, r1
 8017006:	4614      	mov	r4, r2
 8017008:	4605      	mov	r5, r0
 801700a:	b118      	cbz	r0, 8017014 <__swbuf_r+0x12>
 801700c:	6a03      	ldr	r3, [r0, #32]
 801700e:	b90b      	cbnz	r3, 8017014 <__swbuf_r+0x12>
 8017010:	f7ff ff0e 	bl	8016e30 <__sinit>
 8017014:	69a3      	ldr	r3, [r4, #24]
 8017016:	60a3      	str	r3, [r4, #8]
 8017018:	89a3      	ldrh	r3, [r4, #12]
 801701a:	071a      	lsls	r2, r3, #28
 801701c:	d501      	bpl.n	8017022 <__swbuf_r+0x20>
 801701e:	6923      	ldr	r3, [r4, #16]
 8017020:	b943      	cbnz	r3, 8017034 <__swbuf_r+0x32>
 8017022:	4621      	mov	r1, r4
 8017024:	4628      	mov	r0, r5
 8017026:	f000 f82b 	bl	8017080 <__swsetup_r>
 801702a:	b118      	cbz	r0, 8017034 <__swbuf_r+0x32>
 801702c:	f04f 37ff 	mov.w	r7, #4294967295
 8017030:	4638      	mov	r0, r7
 8017032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017034:	6823      	ldr	r3, [r4, #0]
 8017036:	6922      	ldr	r2, [r4, #16]
 8017038:	1a98      	subs	r0, r3, r2
 801703a:	6963      	ldr	r3, [r4, #20]
 801703c:	b2f6      	uxtb	r6, r6
 801703e:	4283      	cmp	r3, r0
 8017040:	4637      	mov	r7, r6
 8017042:	dc05      	bgt.n	8017050 <__swbuf_r+0x4e>
 8017044:	4621      	mov	r1, r4
 8017046:	4628      	mov	r0, r5
 8017048:	f000 fdd2 	bl	8017bf0 <_fflush_r>
 801704c:	2800      	cmp	r0, #0
 801704e:	d1ed      	bne.n	801702c <__swbuf_r+0x2a>
 8017050:	68a3      	ldr	r3, [r4, #8]
 8017052:	3b01      	subs	r3, #1
 8017054:	60a3      	str	r3, [r4, #8]
 8017056:	6823      	ldr	r3, [r4, #0]
 8017058:	1c5a      	adds	r2, r3, #1
 801705a:	6022      	str	r2, [r4, #0]
 801705c:	701e      	strb	r6, [r3, #0]
 801705e:	6962      	ldr	r2, [r4, #20]
 8017060:	1c43      	adds	r3, r0, #1
 8017062:	429a      	cmp	r2, r3
 8017064:	d004      	beq.n	8017070 <__swbuf_r+0x6e>
 8017066:	89a3      	ldrh	r3, [r4, #12]
 8017068:	07db      	lsls	r3, r3, #31
 801706a:	d5e1      	bpl.n	8017030 <__swbuf_r+0x2e>
 801706c:	2e0a      	cmp	r6, #10
 801706e:	d1df      	bne.n	8017030 <__swbuf_r+0x2e>
 8017070:	4621      	mov	r1, r4
 8017072:	4628      	mov	r0, r5
 8017074:	f000 fdbc 	bl	8017bf0 <_fflush_r>
 8017078:	2800      	cmp	r0, #0
 801707a:	d0d9      	beq.n	8017030 <__swbuf_r+0x2e>
 801707c:	e7d6      	b.n	801702c <__swbuf_r+0x2a>
	...

08017080 <__swsetup_r>:
 8017080:	b538      	push	{r3, r4, r5, lr}
 8017082:	4b29      	ldr	r3, [pc, #164]	@ (8017128 <__swsetup_r+0xa8>)
 8017084:	4605      	mov	r5, r0
 8017086:	6818      	ldr	r0, [r3, #0]
 8017088:	460c      	mov	r4, r1
 801708a:	b118      	cbz	r0, 8017094 <__swsetup_r+0x14>
 801708c:	6a03      	ldr	r3, [r0, #32]
 801708e:	b90b      	cbnz	r3, 8017094 <__swsetup_r+0x14>
 8017090:	f7ff fece 	bl	8016e30 <__sinit>
 8017094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017098:	0719      	lsls	r1, r3, #28
 801709a:	d422      	bmi.n	80170e2 <__swsetup_r+0x62>
 801709c:	06da      	lsls	r2, r3, #27
 801709e:	d407      	bmi.n	80170b0 <__swsetup_r+0x30>
 80170a0:	2209      	movs	r2, #9
 80170a2:	602a      	str	r2, [r5, #0]
 80170a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80170a8:	81a3      	strh	r3, [r4, #12]
 80170aa:	f04f 30ff 	mov.w	r0, #4294967295
 80170ae:	e033      	b.n	8017118 <__swsetup_r+0x98>
 80170b0:	0758      	lsls	r0, r3, #29
 80170b2:	d512      	bpl.n	80170da <__swsetup_r+0x5a>
 80170b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80170b6:	b141      	cbz	r1, 80170ca <__swsetup_r+0x4a>
 80170b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80170bc:	4299      	cmp	r1, r3
 80170be:	d002      	beq.n	80170c6 <__swsetup_r+0x46>
 80170c0:	4628      	mov	r0, r5
 80170c2:	f000 f943 	bl	801734c <_free_r>
 80170c6:	2300      	movs	r3, #0
 80170c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80170ca:	89a3      	ldrh	r3, [r4, #12]
 80170cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80170d0:	81a3      	strh	r3, [r4, #12]
 80170d2:	2300      	movs	r3, #0
 80170d4:	6063      	str	r3, [r4, #4]
 80170d6:	6923      	ldr	r3, [r4, #16]
 80170d8:	6023      	str	r3, [r4, #0]
 80170da:	89a3      	ldrh	r3, [r4, #12]
 80170dc:	f043 0308 	orr.w	r3, r3, #8
 80170e0:	81a3      	strh	r3, [r4, #12]
 80170e2:	6923      	ldr	r3, [r4, #16]
 80170e4:	b94b      	cbnz	r3, 80170fa <__swsetup_r+0x7a>
 80170e6:	89a3      	ldrh	r3, [r4, #12]
 80170e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80170ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80170f0:	d003      	beq.n	80170fa <__swsetup_r+0x7a>
 80170f2:	4621      	mov	r1, r4
 80170f4:	4628      	mov	r0, r5
 80170f6:	f000 fddb 	bl	8017cb0 <__smakebuf_r>
 80170fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170fe:	f013 0201 	ands.w	r2, r3, #1
 8017102:	d00a      	beq.n	801711a <__swsetup_r+0x9a>
 8017104:	2200      	movs	r2, #0
 8017106:	60a2      	str	r2, [r4, #8]
 8017108:	6962      	ldr	r2, [r4, #20]
 801710a:	4252      	negs	r2, r2
 801710c:	61a2      	str	r2, [r4, #24]
 801710e:	6922      	ldr	r2, [r4, #16]
 8017110:	b942      	cbnz	r2, 8017124 <__swsetup_r+0xa4>
 8017112:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017116:	d1c5      	bne.n	80170a4 <__swsetup_r+0x24>
 8017118:	bd38      	pop	{r3, r4, r5, pc}
 801711a:	0799      	lsls	r1, r3, #30
 801711c:	bf58      	it	pl
 801711e:	6962      	ldrpl	r2, [r4, #20]
 8017120:	60a2      	str	r2, [r4, #8]
 8017122:	e7f4      	b.n	801710e <__swsetup_r+0x8e>
 8017124:	2000      	movs	r0, #0
 8017126:	e7f7      	b.n	8017118 <__swsetup_r+0x98>
 8017128:	2000003c 	.word	0x2000003c

0801712c <memcmp>:
 801712c:	b510      	push	{r4, lr}
 801712e:	3901      	subs	r1, #1
 8017130:	4402      	add	r2, r0
 8017132:	4290      	cmp	r0, r2
 8017134:	d101      	bne.n	801713a <memcmp+0xe>
 8017136:	2000      	movs	r0, #0
 8017138:	e005      	b.n	8017146 <memcmp+0x1a>
 801713a:	7803      	ldrb	r3, [r0, #0]
 801713c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017140:	42a3      	cmp	r3, r4
 8017142:	d001      	beq.n	8017148 <memcmp+0x1c>
 8017144:	1b18      	subs	r0, r3, r4
 8017146:	bd10      	pop	{r4, pc}
 8017148:	3001      	adds	r0, #1
 801714a:	e7f2      	b.n	8017132 <memcmp+0x6>

0801714c <memset>:
 801714c:	4402      	add	r2, r0
 801714e:	4603      	mov	r3, r0
 8017150:	4293      	cmp	r3, r2
 8017152:	d100      	bne.n	8017156 <memset+0xa>
 8017154:	4770      	bx	lr
 8017156:	f803 1b01 	strb.w	r1, [r3], #1
 801715a:	e7f9      	b.n	8017150 <memset+0x4>

0801715c <_close_r>:
 801715c:	b538      	push	{r3, r4, r5, lr}
 801715e:	4d06      	ldr	r5, [pc, #24]	@ (8017178 <_close_r+0x1c>)
 8017160:	2300      	movs	r3, #0
 8017162:	4604      	mov	r4, r0
 8017164:	4608      	mov	r0, r1
 8017166:	602b      	str	r3, [r5, #0]
 8017168:	f7ea fa9a 	bl	80016a0 <_close>
 801716c:	1c43      	adds	r3, r0, #1
 801716e:	d102      	bne.n	8017176 <_close_r+0x1a>
 8017170:	682b      	ldr	r3, [r5, #0]
 8017172:	b103      	cbz	r3, 8017176 <_close_r+0x1a>
 8017174:	6023      	str	r3, [r4, #0]
 8017176:	bd38      	pop	{r3, r4, r5, pc}
 8017178:	20027610 	.word	0x20027610

0801717c <_reclaim_reent>:
 801717c:	4b2d      	ldr	r3, [pc, #180]	@ (8017234 <_reclaim_reent+0xb8>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	4283      	cmp	r3, r0
 8017182:	b570      	push	{r4, r5, r6, lr}
 8017184:	4604      	mov	r4, r0
 8017186:	d053      	beq.n	8017230 <_reclaim_reent+0xb4>
 8017188:	69c3      	ldr	r3, [r0, #28]
 801718a:	b31b      	cbz	r3, 80171d4 <_reclaim_reent+0x58>
 801718c:	68db      	ldr	r3, [r3, #12]
 801718e:	b163      	cbz	r3, 80171aa <_reclaim_reent+0x2e>
 8017190:	2500      	movs	r5, #0
 8017192:	69e3      	ldr	r3, [r4, #28]
 8017194:	68db      	ldr	r3, [r3, #12]
 8017196:	5959      	ldr	r1, [r3, r5]
 8017198:	b9b1      	cbnz	r1, 80171c8 <_reclaim_reent+0x4c>
 801719a:	3504      	adds	r5, #4
 801719c:	2d80      	cmp	r5, #128	@ 0x80
 801719e:	d1f8      	bne.n	8017192 <_reclaim_reent+0x16>
 80171a0:	69e3      	ldr	r3, [r4, #28]
 80171a2:	4620      	mov	r0, r4
 80171a4:	68d9      	ldr	r1, [r3, #12]
 80171a6:	f000 f8d1 	bl	801734c <_free_r>
 80171aa:	69e3      	ldr	r3, [r4, #28]
 80171ac:	6819      	ldr	r1, [r3, #0]
 80171ae:	b111      	cbz	r1, 80171b6 <_reclaim_reent+0x3a>
 80171b0:	4620      	mov	r0, r4
 80171b2:	f000 f8cb 	bl	801734c <_free_r>
 80171b6:	69e3      	ldr	r3, [r4, #28]
 80171b8:	689d      	ldr	r5, [r3, #8]
 80171ba:	b15d      	cbz	r5, 80171d4 <_reclaim_reent+0x58>
 80171bc:	4629      	mov	r1, r5
 80171be:	4620      	mov	r0, r4
 80171c0:	682d      	ldr	r5, [r5, #0]
 80171c2:	f000 f8c3 	bl	801734c <_free_r>
 80171c6:	e7f8      	b.n	80171ba <_reclaim_reent+0x3e>
 80171c8:	680e      	ldr	r6, [r1, #0]
 80171ca:	4620      	mov	r0, r4
 80171cc:	f000 f8be 	bl	801734c <_free_r>
 80171d0:	4631      	mov	r1, r6
 80171d2:	e7e1      	b.n	8017198 <_reclaim_reent+0x1c>
 80171d4:	6961      	ldr	r1, [r4, #20]
 80171d6:	b111      	cbz	r1, 80171de <_reclaim_reent+0x62>
 80171d8:	4620      	mov	r0, r4
 80171da:	f000 f8b7 	bl	801734c <_free_r>
 80171de:	69e1      	ldr	r1, [r4, #28]
 80171e0:	b111      	cbz	r1, 80171e8 <_reclaim_reent+0x6c>
 80171e2:	4620      	mov	r0, r4
 80171e4:	f000 f8b2 	bl	801734c <_free_r>
 80171e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80171ea:	b111      	cbz	r1, 80171f2 <_reclaim_reent+0x76>
 80171ec:	4620      	mov	r0, r4
 80171ee:	f000 f8ad 	bl	801734c <_free_r>
 80171f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80171f4:	b111      	cbz	r1, 80171fc <_reclaim_reent+0x80>
 80171f6:	4620      	mov	r0, r4
 80171f8:	f000 f8a8 	bl	801734c <_free_r>
 80171fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80171fe:	b111      	cbz	r1, 8017206 <_reclaim_reent+0x8a>
 8017200:	4620      	mov	r0, r4
 8017202:	f000 f8a3 	bl	801734c <_free_r>
 8017206:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017208:	b111      	cbz	r1, 8017210 <_reclaim_reent+0x94>
 801720a:	4620      	mov	r0, r4
 801720c:	f000 f89e 	bl	801734c <_free_r>
 8017210:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017212:	b111      	cbz	r1, 801721a <_reclaim_reent+0x9e>
 8017214:	4620      	mov	r0, r4
 8017216:	f000 f899 	bl	801734c <_free_r>
 801721a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801721c:	b111      	cbz	r1, 8017224 <_reclaim_reent+0xa8>
 801721e:	4620      	mov	r0, r4
 8017220:	f000 f894 	bl	801734c <_free_r>
 8017224:	6a23      	ldr	r3, [r4, #32]
 8017226:	b11b      	cbz	r3, 8017230 <_reclaim_reent+0xb4>
 8017228:	4620      	mov	r0, r4
 801722a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801722e:	4718      	bx	r3
 8017230:	bd70      	pop	{r4, r5, r6, pc}
 8017232:	bf00      	nop
 8017234:	2000003c 	.word	0x2000003c

08017238 <_lseek_r>:
 8017238:	b538      	push	{r3, r4, r5, lr}
 801723a:	4d07      	ldr	r5, [pc, #28]	@ (8017258 <_lseek_r+0x20>)
 801723c:	4604      	mov	r4, r0
 801723e:	4608      	mov	r0, r1
 8017240:	4611      	mov	r1, r2
 8017242:	2200      	movs	r2, #0
 8017244:	602a      	str	r2, [r5, #0]
 8017246:	461a      	mov	r2, r3
 8017248:	f7ea fa51 	bl	80016ee <_lseek>
 801724c:	1c43      	adds	r3, r0, #1
 801724e:	d102      	bne.n	8017256 <_lseek_r+0x1e>
 8017250:	682b      	ldr	r3, [r5, #0]
 8017252:	b103      	cbz	r3, 8017256 <_lseek_r+0x1e>
 8017254:	6023      	str	r3, [r4, #0]
 8017256:	bd38      	pop	{r3, r4, r5, pc}
 8017258:	20027610 	.word	0x20027610

0801725c <_read_r>:
 801725c:	b538      	push	{r3, r4, r5, lr}
 801725e:	4d07      	ldr	r5, [pc, #28]	@ (801727c <_read_r+0x20>)
 8017260:	4604      	mov	r4, r0
 8017262:	4608      	mov	r0, r1
 8017264:	4611      	mov	r1, r2
 8017266:	2200      	movs	r2, #0
 8017268:	602a      	str	r2, [r5, #0]
 801726a:	461a      	mov	r2, r3
 801726c:	f7ea f9df 	bl	800162e <_read>
 8017270:	1c43      	adds	r3, r0, #1
 8017272:	d102      	bne.n	801727a <_read_r+0x1e>
 8017274:	682b      	ldr	r3, [r5, #0]
 8017276:	b103      	cbz	r3, 801727a <_read_r+0x1e>
 8017278:	6023      	str	r3, [r4, #0]
 801727a:	bd38      	pop	{r3, r4, r5, pc}
 801727c:	20027610 	.word	0x20027610

08017280 <_write_r>:
 8017280:	b538      	push	{r3, r4, r5, lr}
 8017282:	4d07      	ldr	r5, [pc, #28]	@ (80172a0 <_write_r+0x20>)
 8017284:	4604      	mov	r4, r0
 8017286:	4608      	mov	r0, r1
 8017288:	4611      	mov	r1, r2
 801728a:	2200      	movs	r2, #0
 801728c:	602a      	str	r2, [r5, #0]
 801728e:	461a      	mov	r2, r3
 8017290:	f7ea f9ea 	bl	8001668 <_write>
 8017294:	1c43      	adds	r3, r0, #1
 8017296:	d102      	bne.n	801729e <_write_r+0x1e>
 8017298:	682b      	ldr	r3, [r5, #0]
 801729a:	b103      	cbz	r3, 801729e <_write_r+0x1e>
 801729c:	6023      	str	r3, [r4, #0]
 801729e:	bd38      	pop	{r3, r4, r5, pc}
 80172a0:	20027610 	.word	0x20027610

080172a4 <__libc_init_array>:
 80172a4:	b570      	push	{r4, r5, r6, lr}
 80172a6:	4d0d      	ldr	r5, [pc, #52]	@ (80172dc <__libc_init_array+0x38>)
 80172a8:	4c0d      	ldr	r4, [pc, #52]	@ (80172e0 <__libc_init_array+0x3c>)
 80172aa:	1b64      	subs	r4, r4, r5
 80172ac:	10a4      	asrs	r4, r4, #2
 80172ae:	2600      	movs	r6, #0
 80172b0:	42a6      	cmp	r6, r4
 80172b2:	d109      	bne.n	80172c8 <__libc_init_array+0x24>
 80172b4:	4d0b      	ldr	r5, [pc, #44]	@ (80172e4 <__libc_init_array+0x40>)
 80172b6:	4c0c      	ldr	r4, [pc, #48]	@ (80172e8 <__libc_init_array+0x44>)
 80172b8:	f000 fdb4 	bl	8017e24 <_init>
 80172bc:	1b64      	subs	r4, r4, r5
 80172be:	10a4      	asrs	r4, r4, #2
 80172c0:	2600      	movs	r6, #0
 80172c2:	42a6      	cmp	r6, r4
 80172c4:	d105      	bne.n	80172d2 <__libc_init_array+0x2e>
 80172c6:	bd70      	pop	{r4, r5, r6, pc}
 80172c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80172cc:	4798      	blx	r3
 80172ce:	3601      	adds	r6, #1
 80172d0:	e7ee      	b.n	80172b0 <__libc_init_array+0xc>
 80172d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80172d6:	4798      	blx	r3
 80172d8:	3601      	adds	r6, #1
 80172da:	e7f2      	b.n	80172c2 <__libc_init_array+0x1e>
 80172dc:	0801b02c 	.word	0x0801b02c
 80172e0:	0801b02c 	.word	0x0801b02c
 80172e4:	0801b02c 	.word	0x0801b02c
 80172e8:	0801b030 	.word	0x0801b030

080172ec <__retarget_lock_init_recursive>:
 80172ec:	4770      	bx	lr

080172ee <__retarget_lock_acquire_recursive>:
 80172ee:	4770      	bx	lr

080172f0 <__retarget_lock_release_recursive>:
 80172f0:	4770      	bx	lr

080172f2 <memcpy>:
 80172f2:	440a      	add	r2, r1
 80172f4:	4291      	cmp	r1, r2
 80172f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80172fa:	d100      	bne.n	80172fe <memcpy+0xc>
 80172fc:	4770      	bx	lr
 80172fe:	b510      	push	{r4, lr}
 8017300:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017308:	4291      	cmp	r1, r2
 801730a:	d1f9      	bne.n	8017300 <memcpy+0xe>
 801730c:	bd10      	pop	{r4, pc}
	...

08017310 <__assert_func>:
 8017310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017312:	4614      	mov	r4, r2
 8017314:	461a      	mov	r2, r3
 8017316:	4b09      	ldr	r3, [pc, #36]	@ (801733c <__assert_func+0x2c>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	4605      	mov	r5, r0
 801731c:	68d8      	ldr	r0, [r3, #12]
 801731e:	b14c      	cbz	r4, 8017334 <__assert_func+0x24>
 8017320:	4b07      	ldr	r3, [pc, #28]	@ (8017340 <__assert_func+0x30>)
 8017322:	9100      	str	r1, [sp, #0]
 8017324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017328:	4906      	ldr	r1, [pc, #24]	@ (8017344 <__assert_func+0x34>)
 801732a:	462b      	mov	r3, r5
 801732c:	f000 fc88 	bl	8017c40 <fiprintf>
 8017330:	f000 fd2c 	bl	8017d8c <abort>
 8017334:	4b04      	ldr	r3, [pc, #16]	@ (8017348 <__assert_func+0x38>)
 8017336:	461c      	mov	r4, r3
 8017338:	e7f3      	b.n	8017322 <__assert_func+0x12>
 801733a:	bf00      	nop
 801733c:	2000003c 	.word	0x2000003c
 8017340:	0801afb5 	.word	0x0801afb5
 8017344:	0801afc2 	.word	0x0801afc2
 8017348:	0801aff0 	.word	0x0801aff0

0801734c <_free_r>:
 801734c:	b538      	push	{r3, r4, r5, lr}
 801734e:	4605      	mov	r5, r0
 8017350:	2900      	cmp	r1, #0
 8017352:	d041      	beq.n	80173d8 <_free_r+0x8c>
 8017354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017358:	1f0c      	subs	r4, r1, #4
 801735a:	2b00      	cmp	r3, #0
 801735c:	bfb8      	it	lt
 801735e:	18e4      	addlt	r4, r4, r3
 8017360:	f000 f8e8 	bl	8017534 <__malloc_lock>
 8017364:	4a1d      	ldr	r2, [pc, #116]	@ (80173dc <_free_r+0x90>)
 8017366:	6813      	ldr	r3, [r2, #0]
 8017368:	b933      	cbnz	r3, 8017378 <_free_r+0x2c>
 801736a:	6063      	str	r3, [r4, #4]
 801736c:	6014      	str	r4, [r2, #0]
 801736e:	4628      	mov	r0, r5
 8017370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017374:	f000 b8e4 	b.w	8017540 <__malloc_unlock>
 8017378:	42a3      	cmp	r3, r4
 801737a:	d908      	bls.n	801738e <_free_r+0x42>
 801737c:	6820      	ldr	r0, [r4, #0]
 801737e:	1821      	adds	r1, r4, r0
 8017380:	428b      	cmp	r3, r1
 8017382:	bf01      	itttt	eq
 8017384:	6819      	ldreq	r1, [r3, #0]
 8017386:	685b      	ldreq	r3, [r3, #4]
 8017388:	1809      	addeq	r1, r1, r0
 801738a:	6021      	streq	r1, [r4, #0]
 801738c:	e7ed      	b.n	801736a <_free_r+0x1e>
 801738e:	461a      	mov	r2, r3
 8017390:	685b      	ldr	r3, [r3, #4]
 8017392:	b10b      	cbz	r3, 8017398 <_free_r+0x4c>
 8017394:	42a3      	cmp	r3, r4
 8017396:	d9fa      	bls.n	801738e <_free_r+0x42>
 8017398:	6811      	ldr	r1, [r2, #0]
 801739a:	1850      	adds	r0, r2, r1
 801739c:	42a0      	cmp	r0, r4
 801739e:	d10b      	bne.n	80173b8 <_free_r+0x6c>
 80173a0:	6820      	ldr	r0, [r4, #0]
 80173a2:	4401      	add	r1, r0
 80173a4:	1850      	adds	r0, r2, r1
 80173a6:	4283      	cmp	r3, r0
 80173a8:	6011      	str	r1, [r2, #0]
 80173aa:	d1e0      	bne.n	801736e <_free_r+0x22>
 80173ac:	6818      	ldr	r0, [r3, #0]
 80173ae:	685b      	ldr	r3, [r3, #4]
 80173b0:	6053      	str	r3, [r2, #4]
 80173b2:	4408      	add	r0, r1
 80173b4:	6010      	str	r0, [r2, #0]
 80173b6:	e7da      	b.n	801736e <_free_r+0x22>
 80173b8:	d902      	bls.n	80173c0 <_free_r+0x74>
 80173ba:	230c      	movs	r3, #12
 80173bc:	602b      	str	r3, [r5, #0]
 80173be:	e7d6      	b.n	801736e <_free_r+0x22>
 80173c0:	6820      	ldr	r0, [r4, #0]
 80173c2:	1821      	adds	r1, r4, r0
 80173c4:	428b      	cmp	r3, r1
 80173c6:	bf04      	itt	eq
 80173c8:	6819      	ldreq	r1, [r3, #0]
 80173ca:	685b      	ldreq	r3, [r3, #4]
 80173cc:	6063      	str	r3, [r4, #4]
 80173ce:	bf04      	itt	eq
 80173d0:	1809      	addeq	r1, r1, r0
 80173d2:	6021      	streq	r1, [r4, #0]
 80173d4:	6054      	str	r4, [r2, #4]
 80173d6:	e7ca      	b.n	801736e <_free_r+0x22>
 80173d8:	bd38      	pop	{r3, r4, r5, pc}
 80173da:	bf00      	nop
 80173dc:	2002761c 	.word	0x2002761c

080173e0 <malloc>:
 80173e0:	4b02      	ldr	r3, [pc, #8]	@ (80173ec <malloc+0xc>)
 80173e2:	4601      	mov	r1, r0
 80173e4:	6818      	ldr	r0, [r3, #0]
 80173e6:	f000 b825 	b.w	8017434 <_malloc_r>
 80173ea:	bf00      	nop
 80173ec:	2000003c 	.word	0x2000003c

080173f0 <sbrk_aligned>:
 80173f0:	b570      	push	{r4, r5, r6, lr}
 80173f2:	4e0f      	ldr	r6, [pc, #60]	@ (8017430 <sbrk_aligned+0x40>)
 80173f4:	460c      	mov	r4, r1
 80173f6:	6831      	ldr	r1, [r6, #0]
 80173f8:	4605      	mov	r5, r0
 80173fa:	b911      	cbnz	r1, 8017402 <sbrk_aligned+0x12>
 80173fc:	f000 fcb6 	bl	8017d6c <_sbrk_r>
 8017400:	6030      	str	r0, [r6, #0]
 8017402:	4621      	mov	r1, r4
 8017404:	4628      	mov	r0, r5
 8017406:	f000 fcb1 	bl	8017d6c <_sbrk_r>
 801740a:	1c43      	adds	r3, r0, #1
 801740c:	d103      	bne.n	8017416 <sbrk_aligned+0x26>
 801740e:	f04f 34ff 	mov.w	r4, #4294967295
 8017412:	4620      	mov	r0, r4
 8017414:	bd70      	pop	{r4, r5, r6, pc}
 8017416:	1cc4      	adds	r4, r0, #3
 8017418:	f024 0403 	bic.w	r4, r4, #3
 801741c:	42a0      	cmp	r0, r4
 801741e:	d0f8      	beq.n	8017412 <sbrk_aligned+0x22>
 8017420:	1a21      	subs	r1, r4, r0
 8017422:	4628      	mov	r0, r5
 8017424:	f000 fca2 	bl	8017d6c <_sbrk_r>
 8017428:	3001      	adds	r0, #1
 801742a:	d1f2      	bne.n	8017412 <sbrk_aligned+0x22>
 801742c:	e7ef      	b.n	801740e <sbrk_aligned+0x1e>
 801742e:	bf00      	nop
 8017430:	20027618 	.word	0x20027618

08017434 <_malloc_r>:
 8017434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017438:	1ccd      	adds	r5, r1, #3
 801743a:	f025 0503 	bic.w	r5, r5, #3
 801743e:	3508      	adds	r5, #8
 8017440:	2d0c      	cmp	r5, #12
 8017442:	bf38      	it	cc
 8017444:	250c      	movcc	r5, #12
 8017446:	2d00      	cmp	r5, #0
 8017448:	4606      	mov	r6, r0
 801744a:	db01      	blt.n	8017450 <_malloc_r+0x1c>
 801744c:	42a9      	cmp	r1, r5
 801744e:	d904      	bls.n	801745a <_malloc_r+0x26>
 8017450:	230c      	movs	r3, #12
 8017452:	6033      	str	r3, [r6, #0]
 8017454:	2000      	movs	r0, #0
 8017456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801745a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017530 <_malloc_r+0xfc>
 801745e:	f000 f869 	bl	8017534 <__malloc_lock>
 8017462:	f8d8 3000 	ldr.w	r3, [r8]
 8017466:	461c      	mov	r4, r3
 8017468:	bb44      	cbnz	r4, 80174bc <_malloc_r+0x88>
 801746a:	4629      	mov	r1, r5
 801746c:	4630      	mov	r0, r6
 801746e:	f7ff ffbf 	bl	80173f0 <sbrk_aligned>
 8017472:	1c43      	adds	r3, r0, #1
 8017474:	4604      	mov	r4, r0
 8017476:	d158      	bne.n	801752a <_malloc_r+0xf6>
 8017478:	f8d8 4000 	ldr.w	r4, [r8]
 801747c:	4627      	mov	r7, r4
 801747e:	2f00      	cmp	r7, #0
 8017480:	d143      	bne.n	801750a <_malloc_r+0xd6>
 8017482:	2c00      	cmp	r4, #0
 8017484:	d04b      	beq.n	801751e <_malloc_r+0xea>
 8017486:	6823      	ldr	r3, [r4, #0]
 8017488:	4639      	mov	r1, r7
 801748a:	4630      	mov	r0, r6
 801748c:	eb04 0903 	add.w	r9, r4, r3
 8017490:	f000 fc6c 	bl	8017d6c <_sbrk_r>
 8017494:	4581      	cmp	r9, r0
 8017496:	d142      	bne.n	801751e <_malloc_r+0xea>
 8017498:	6821      	ldr	r1, [r4, #0]
 801749a:	1a6d      	subs	r5, r5, r1
 801749c:	4629      	mov	r1, r5
 801749e:	4630      	mov	r0, r6
 80174a0:	f7ff ffa6 	bl	80173f0 <sbrk_aligned>
 80174a4:	3001      	adds	r0, #1
 80174a6:	d03a      	beq.n	801751e <_malloc_r+0xea>
 80174a8:	6823      	ldr	r3, [r4, #0]
 80174aa:	442b      	add	r3, r5
 80174ac:	6023      	str	r3, [r4, #0]
 80174ae:	f8d8 3000 	ldr.w	r3, [r8]
 80174b2:	685a      	ldr	r2, [r3, #4]
 80174b4:	bb62      	cbnz	r2, 8017510 <_malloc_r+0xdc>
 80174b6:	f8c8 7000 	str.w	r7, [r8]
 80174ba:	e00f      	b.n	80174dc <_malloc_r+0xa8>
 80174bc:	6822      	ldr	r2, [r4, #0]
 80174be:	1b52      	subs	r2, r2, r5
 80174c0:	d420      	bmi.n	8017504 <_malloc_r+0xd0>
 80174c2:	2a0b      	cmp	r2, #11
 80174c4:	d917      	bls.n	80174f6 <_malloc_r+0xc2>
 80174c6:	1961      	adds	r1, r4, r5
 80174c8:	42a3      	cmp	r3, r4
 80174ca:	6025      	str	r5, [r4, #0]
 80174cc:	bf18      	it	ne
 80174ce:	6059      	strne	r1, [r3, #4]
 80174d0:	6863      	ldr	r3, [r4, #4]
 80174d2:	bf08      	it	eq
 80174d4:	f8c8 1000 	streq.w	r1, [r8]
 80174d8:	5162      	str	r2, [r4, r5]
 80174da:	604b      	str	r3, [r1, #4]
 80174dc:	4630      	mov	r0, r6
 80174de:	f000 f82f 	bl	8017540 <__malloc_unlock>
 80174e2:	f104 000b 	add.w	r0, r4, #11
 80174e6:	1d23      	adds	r3, r4, #4
 80174e8:	f020 0007 	bic.w	r0, r0, #7
 80174ec:	1ac2      	subs	r2, r0, r3
 80174ee:	bf1c      	itt	ne
 80174f0:	1a1b      	subne	r3, r3, r0
 80174f2:	50a3      	strne	r3, [r4, r2]
 80174f4:	e7af      	b.n	8017456 <_malloc_r+0x22>
 80174f6:	6862      	ldr	r2, [r4, #4]
 80174f8:	42a3      	cmp	r3, r4
 80174fa:	bf0c      	ite	eq
 80174fc:	f8c8 2000 	streq.w	r2, [r8]
 8017500:	605a      	strne	r2, [r3, #4]
 8017502:	e7eb      	b.n	80174dc <_malloc_r+0xa8>
 8017504:	4623      	mov	r3, r4
 8017506:	6864      	ldr	r4, [r4, #4]
 8017508:	e7ae      	b.n	8017468 <_malloc_r+0x34>
 801750a:	463c      	mov	r4, r7
 801750c:	687f      	ldr	r7, [r7, #4]
 801750e:	e7b6      	b.n	801747e <_malloc_r+0x4a>
 8017510:	461a      	mov	r2, r3
 8017512:	685b      	ldr	r3, [r3, #4]
 8017514:	42a3      	cmp	r3, r4
 8017516:	d1fb      	bne.n	8017510 <_malloc_r+0xdc>
 8017518:	2300      	movs	r3, #0
 801751a:	6053      	str	r3, [r2, #4]
 801751c:	e7de      	b.n	80174dc <_malloc_r+0xa8>
 801751e:	230c      	movs	r3, #12
 8017520:	6033      	str	r3, [r6, #0]
 8017522:	4630      	mov	r0, r6
 8017524:	f000 f80c 	bl	8017540 <__malloc_unlock>
 8017528:	e794      	b.n	8017454 <_malloc_r+0x20>
 801752a:	6005      	str	r5, [r0, #0]
 801752c:	e7d6      	b.n	80174dc <_malloc_r+0xa8>
 801752e:	bf00      	nop
 8017530:	2002761c 	.word	0x2002761c

08017534 <__malloc_lock>:
 8017534:	4801      	ldr	r0, [pc, #4]	@ (801753c <__malloc_lock+0x8>)
 8017536:	f7ff beda 	b.w	80172ee <__retarget_lock_acquire_recursive>
 801753a:	bf00      	nop
 801753c:	20027614 	.word	0x20027614

08017540 <__malloc_unlock>:
 8017540:	4801      	ldr	r0, [pc, #4]	@ (8017548 <__malloc_unlock+0x8>)
 8017542:	f7ff bed5 	b.w	80172f0 <__retarget_lock_release_recursive>
 8017546:	bf00      	nop
 8017548:	20027614 	.word	0x20027614

0801754c <__sfputc_r>:
 801754c:	6893      	ldr	r3, [r2, #8]
 801754e:	3b01      	subs	r3, #1
 8017550:	2b00      	cmp	r3, #0
 8017552:	b410      	push	{r4}
 8017554:	6093      	str	r3, [r2, #8]
 8017556:	da08      	bge.n	801756a <__sfputc_r+0x1e>
 8017558:	6994      	ldr	r4, [r2, #24]
 801755a:	42a3      	cmp	r3, r4
 801755c:	db01      	blt.n	8017562 <__sfputc_r+0x16>
 801755e:	290a      	cmp	r1, #10
 8017560:	d103      	bne.n	801756a <__sfputc_r+0x1e>
 8017562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017566:	f7ff bd4c 	b.w	8017002 <__swbuf_r>
 801756a:	6813      	ldr	r3, [r2, #0]
 801756c:	1c58      	adds	r0, r3, #1
 801756e:	6010      	str	r0, [r2, #0]
 8017570:	7019      	strb	r1, [r3, #0]
 8017572:	4608      	mov	r0, r1
 8017574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017578:	4770      	bx	lr

0801757a <__sfputs_r>:
 801757a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801757c:	4606      	mov	r6, r0
 801757e:	460f      	mov	r7, r1
 8017580:	4614      	mov	r4, r2
 8017582:	18d5      	adds	r5, r2, r3
 8017584:	42ac      	cmp	r4, r5
 8017586:	d101      	bne.n	801758c <__sfputs_r+0x12>
 8017588:	2000      	movs	r0, #0
 801758a:	e007      	b.n	801759c <__sfputs_r+0x22>
 801758c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017590:	463a      	mov	r2, r7
 8017592:	4630      	mov	r0, r6
 8017594:	f7ff ffda 	bl	801754c <__sfputc_r>
 8017598:	1c43      	adds	r3, r0, #1
 801759a:	d1f3      	bne.n	8017584 <__sfputs_r+0xa>
 801759c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080175a0 <_vfiprintf_r>:
 80175a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175a4:	460d      	mov	r5, r1
 80175a6:	b09d      	sub	sp, #116	@ 0x74
 80175a8:	4614      	mov	r4, r2
 80175aa:	4698      	mov	r8, r3
 80175ac:	4606      	mov	r6, r0
 80175ae:	b118      	cbz	r0, 80175b8 <_vfiprintf_r+0x18>
 80175b0:	6a03      	ldr	r3, [r0, #32]
 80175b2:	b90b      	cbnz	r3, 80175b8 <_vfiprintf_r+0x18>
 80175b4:	f7ff fc3c 	bl	8016e30 <__sinit>
 80175b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80175ba:	07d9      	lsls	r1, r3, #31
 80175bc:	d405      	bmi.n	80175ca <_vfiprintf_r+0x2a>
 80175be:	89ab      	ldrh	r3, [r5, #12]
 80175c0:	059a      	lsls	r2, r3, #22
 80175c2:	d402      	bmi.n	80175ca <_vfiprintf_r+0x2a>
 80175c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80175c6:	f7ff fe92 	bl	80172ee <__retarget_lock_acquire_recursive>
 80175ca:	89ab      	ldrh	r3, [r5, #12]
 80175cc:	071b      	lsls	r3, r3, #28
 80175ce:	d501      	bpl.n	80175d4 <_vfiprintf_r+0x34>
 80175d0:	692b      	ldr	r3, [r5, #16]
 80175d2:	b99b      	cbnz	r3, 80175fc <_vfiprintf_r+0x5c>
 80175d4:	4629      	mov	r1, r5
 80175d6:	4630      	mov	r0, r6
 80175d8:	f7ff fd52 	bl	8017080 <__swsetup_r>
 80175dc:	b170      	cbz	r0, 80175fc <_vfiprintf_r+0x5c>
 80175de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80175e0:	07dc      	lsls	r4, r3, #31
 80175e2:	d504      	bpl.n	80175ee <_vfiprintf_r+0x4e>
 80175e4:	f04f 30ff 	mov.w	r0, #4294967295
 80175e8:	b01d      	add	sp, #116	@ 0x74
 80175ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175ee:	89ab      	ldrh	r3, [r5, #12]
 80175f0:	0598      	lsls	r0, r3, #22
 80175f2:	d4f7      	bmi.n	80175e4 <_vfiprintf_r+0x44>
 80175f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80175f6:	f7ff fe7b 	bl	80172f0 <__retarget_lock_release_recursive>
 80175fa:	e7f3      	b.n	80175e4 <_vfiprintf_r+0x44>
 80175fc:	2300      	movs	r3, #0
 80175fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8017600:	2320      	movs	r3, #32
 8017602:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017606:	f8cd 800c 	str.w	r8, [sp, #12]
 801760a:	2330      	movs	r3, #48	@ 0x30
 801760c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80177bc <_vfiprintf_r+0x21c>
 8017610:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017614:	f04f 0901 	mov.w	r9, #1
 8017618:	4623      	mov	r3, r4
 801761a:	469a      	mov	sl, r3
 801761c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017620:	b10a      	cbz	r2, 8017626 <_vfiprintf_r+0x86>
 8017622:	2a25      	cmp	r2, #37	@ 0x25
 8017624:	d1f9      	bne.n	801761a <_vfiprintf_r+0x7a>
 8017626:	ebba 0b04 	subs.w	fp, sl, r4
 801762a:	d00b      	beq.n	8017644 <_vfiprintf_r+0xa4>
 801762c:	465b      	mov	r3, fp
 801762e:	4622      	mov	r2, r4
 8017630:	4629      	mov	r1, r5
 8017632:	4630      	mov	r0, r6
 8017634:	f7ff ffa1 	bl	801757a <__sfputs_r>
 8017638:	3001      	adds	r0, #1
 801763a:	f000 80a7 	beq.w	801778c <_vfiprintf_r+0x1ec>
 801763e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017640:	445a      	add	r2, fp
 8017642:	9209      	str	r2, [sp, #36]	@ 0x24
 8017644:	f89a 3000 	ldrb.w	r3, [sl]
 8017648:	2b00      	cmp	r3, #0
 801764a:	f000 809f 	beq.w	801778c <_vfiprintf_r+0x1ec>
 801764e:	2300      	movs	r3, #0
 8017650:	f04f 32ff 	mov.w	r2, #4294967295
 8017654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017658:	f10a 0a01 	add.w	sl, sl, #1
 801765c:	9304      	str	r3, [sp, #16]
 801765e:	9307      	str	r3, [sp, #28]
 8017660:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017664:	931a      	str	r3, [sp, #104]	@ 0x68
 8017666:	4654      	mov	r4, sl
 8017668:	2205      	movs	r2, #5
 801766a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801766e:	4853      	ldr	r0, [pc, #332]	@ (80177bc <_vfiprintf_r+0x21c>)
 8017670:	f7e8 fdce 	bl	8000210 <memchr>
 8017674:	9a04      	ldr	r2, [sp, #16]
 8017676:	b9d8      	cbnz	r0, 80176b0 <_vfiprintf_r+0x110>
 8017678:	06d1      	lsls	r1, r2, #27
 801767a:	bf44      	itt	mi
 801767c:	2320      	movmi	r3, #32
 801767e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017682:	0713      	lsls	r3, r2, #28
 8017684:	bf44      	itt	mi
 8017686:	232b      	movmi	r3, #43	@ 0x2b
 8017688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801768c:	f89a 3000 	ldrb.w	r3, [sl]
 8017690:	2b2a      	cmp	r3, #42	@ 0x2a
 8017692:	d015      	beq.n	80176c0 <_vfiprintf_r+0x120>
 8017694:	9a07      	ldr	r2, [sp, #28]
 8017696:	4654      	mov	r4, sl
 8017698:	2000      	movs	r0, #0
 801769a:	f04f 0c0a 	mov.w	ip, #10
 801769e:	4621      	mov	r1, r4
 80176a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176a4:	3b30      	subs	r3, #48	@ 0x30
 80176a6:	2b09      	cmp	r3, #9
 80176a8:	d94b      	bls.n	8017742 <_vfiprintf_r+0x1a2>
 80176aa:	b1b0      	cbz	r0, 80176da <_vfiprintf_r+0x13a>
 80176ac:	9207      	str	r2, [sp, #28]
 80176ae:	e014      	b.n	80176da <_vfiprintf_r+0x13a>
 80176b0:	eba0 0308 	sub.w	r3, r0, r8
 80176b4:	fa09 f303 	lsl.w	r3, r9, r3
 80176b8:	4313      	orrs	r3, r2
 80176ba:	9304      	str	r3, [sp, #16]
 80176bc:	46a2      	mov	sl, r4
 80176be:	e7d2      	b.n	8017666 <_vfiprintf_r+0xc6>
 80176c0:	9b03      	ldr	r3, [sp, #12]
 80176c2:	1d19      	adds	r1, r3, #4
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	9103      	str	r1, [sp, #12]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	bfbb      	ittet	lt
 80176cc:	425b      	neglt	r3, r3
 80176ce:	f042 0202 	orrlt.w	r2, r2, #2
 80176d2:	9307      	strge	r3, [sp, #28]
 80176d4:	9307      	strlt	r3, [sp, #28]
 80176d6:	bfb8      	it	lt
 80176d8:	9204      	strlt	r2, [sp, #16]
 80176da:	7823      	ldrb	r3, [r4, #0]
 80176dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80176de:	d10a      	bne.n	80176f6 <_vfiprintf_r+0x156>
 80176e0:	7863      	ldrb	r3, [r4, #1]
 80176e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80176e4:	d132      	bne.n	801774c <_vfiprintf_r+0x1ac>
 80176e6:	9b03      	ldr	r3, [sp, #12]
 80176e8:	1d1a      	adds	r2, r3, #4
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	9203      	str	r2, [sp, #12]
 80176ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80176f2:	3402      	adds	r4, #2
 80176f4:	9305      	str	r3, [sp, #20]
 80176f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80177cc <_vfiprintf_r+0x22c>
 80176fa:	7821      	ldrb	r1, [r4, #0]
 80176fc:	2203      	movs	r2, #3
 80176fe:	4650      	mov	r0, sl
 8017700:	f7e8 fd86 	bl	8000210 <memchr>
 8017704:	b138      	cbz	r0, 8017716 <_vfiprintf_r+0x176>
 8017706:	9b04      	ldr	r3, [sp, #16]
 8017708:	eba0 000a 	sub.w	r0, r0, sl
 801770c:	2240      	movs	r2, #64	@ 0x40
 801770e:	4082      	lsls	r2, r0
 8017710:	4313      	orrs	r3, r2
 8017712:	3401      	adds	r4, #1
 8017714:	9304      	str	r3, [sp, #16]
 8017716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801771a:	4829      	ldr	r0, [pc, #164]	@ (80177c0 <_vfiprintf_r+0x220>)
 801771c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017720:	2206      	movs	r2, #6
 8017722:	f7e8 fd75 	bl	8000210 <memchr>
 8017726:	2800      	cmp	r0, #0
 8017728:	d03f      	beq.n	80177aa <_vfiprintf_r+0x20a>
 801772a:	4b26      	ldr	r3, [pc, #152]	@ (80177c4 <_vfiprintf_r+0x224>)
 801772c:	bb1b      	cbnz	r3, 8017776 <_vfiprintf_r+0x1d6>
 801772e:	9b03      	ldr	r3, [sp, #12]
 8017730:	3307      	adds	r3, #7
 8017732:	f023 0307 	bic.w	r3, r3, #7
 8017736:	3308      	adds	r3, #8
 8017738:	9303      	str	r3, [sp, #12]
 801773a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801773c:	443b      	add	r3, r7
 801773e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017740:	e76a      	b.n	8017618 <_vfiprintf_r+0x78>
 8017742:	fb0c 3202 	mla	r2, ip, r2, r3
 8017746:	460c      	mov	r4, r1
 8017748:	2001      	movs	r0, #1
 801774a:	e7a8      	b.n	801769e <_vfiprintf_r+0xfe>
 801774c:	2300      	movs	r3, #0
 801774e:	3401      	adds	r4, #1
 8017750:	9305      	str	r3, [sp, #20]
 8017752:	4619      	mov	r1, r3
 8017754:	f04f 0c0a 	mov.w	ip, #10
 8017758:	4620      	mov	r0, r4
 801775a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801775e:	3a30      	subs	r2, #48	@ 0x30
 8017760:	2a09      	cmp	r2, #9
 8017762:	d903      	bls.n	801776c <_vfiprintf_r+0x1cc>
 8017764:	2b00      	cmp	r3, #0
 8017766:	d0c6      	beq.n	80176f6 <_vfiprintf_r+0x156>
 8017768:	9105      	str	r1, [sp, #20]
 801776a:	e7c4      	b.n	80176f6 <_vfiprintf_r+0x156>
 801776c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017770:	4604      	mov	r4, r0
 8017772:	2301      	movs	r3, #1
 8017774:	e7f0      	b.n	8017758 <_vfiprintf_r+0x1b8>
 8017776:	ab03      	add	r3, sp, #12
 8017778:	9300      	str	r3, [sp, #0]
 801777a:	462a      	mov	r2, r5
 801777c:	4b12      	ldr	r3, [pc, #72]	@ (80177c8 <_vfiprintf_r+0x228>)
 801777e:	a904      	add	r1, sp, #16
 8017780:	4630      	mov	r0, r6
 8017782:	f3af 8000 	nop.w
 8017786:	4607      	mov	r7, r0
 8017788:	1c78      	adds	r0, r7, #1
 801778a:	d1d6      	bne.n	801773a <_vfiprintf_r+0x19a>
 801778c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801778e:	07d9      	lsls	r1, r3, #31
 8017790:	d405      	bmi.n	801779e <_vfiprintf_r+0x1fe>
 8017792:	89ab      	ldrh	r3, [r5, #12]
 8017794:	059a      	lsls	r2, r3, #22
 8017796:	d402      	bmi.n	801779e <_vfiprintf_r+0x1fe>
 8017798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801779a:	f7ff fda9 	bl	80172f0 <__retarget_lock_release_recursive>
 801779e:	89ab      	ldrh	r3, [r5, #12]
 80177a0:	065b      	lsls	r3, r3, #25
 80177a2:	f53f af1f 	bmi.w	80175e4 <_vfiprintf_r+0x44>
 80177a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177a8:	e71e      	b.n	80175e8 <_vfiprintf_r+0x48>
 80177aa:	ab03      	add	r3, sp, #12
 80177ac:	9300      	str	r3, [sp, #0]
 80177ae:	462a      	mov	r2, r5
 80177b0:	4b05      	ldr	r3, [pc, #20]	@ (80177c8 <_vfiprintf_r+0x228>)
 80177b2:	a904      	add	r1, sp, #16
 80177b4:	4630      	mov	r0, r6
 80177b6:	f000 f879 	bl	80178ac <_printf_i>
 80177ba:	e7e4      	b.n	8017786 <_vfiprintf_r+0x1e6>
 80177bc:	0801aff1 	.word	0x0801aff1
 80177c0:	0801affb 	.word	0x0801affb
 80177c4:	00000000 	.word	0x00000000
 80177c8:	0801757b 	.word	0x0801757b
 80177cc:	0801aff7 	.word	0x0801aff7

080177d0 <_printf_common>:
 80177d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177d4:	4616      	mov	r6, r2
 80177d6:	4698      	mov	r8, r3
 80177d8:	688a      	ldr	r2, [r1, #8]
 80177da:	690b      	ldr	r3, [r1, #16]
 80177dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80177e0:	4293      	cmp	r3, r2
 80177e2:	bfb8      	it	lt
 80177e4:	4613      	movlt	r3, r2
 80177e6:	6033      	str	r3, [r6, #0]
 80177e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80177ec:	4607      	mov	r7, r0
 80177ee:	460c      	mov	r4, r1
 80177f0:	b10a      	cbz	r2, 80177f6 <_printf_common+0x26>
 80177f2:	3301      	adds	r3, #1
 80177f4:	6033      	str	r3, [r6, #0]
 80177f6:	6823      	ldr	r3, [r4, #0]
 80177f8:	0699      	lsls	r1, r3, #26
 80177fa:	bf42      	ittt	mi
 80177fc:	6833      	ldrmi	r3, [r6, #0]
 80177fe:	3302      	addmi	r3, #2
 8017800:	6033      	strmi	r3, [r6, #0]
 8017802:	6825      	ldr	r5, [r4, #0]
 8017804:	f015 0506 	ands.w	r5, r5, #6
 8017808:	d106      	bne.n	8017818 <_printf_common+0x48>
 801780a:	f104 0a19 	add.w	sl, r4, #25
 801780e:	68e3      	ldr	r3, [r4, #12]
 8017810:	6832      	ldr	r2, [r6, #0]
 8017812:	1a9b      	subs	r3, r3, r2
 8017814:	42ab      	cmp	r3, r5
 8017816:	dc26      	bgt.n	8017866 <_printf_common+0x96>
 8017818:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801781c:	6822      	ldr	r2, [r4, #0]
 801781e:	3b00      	subs	r3, #0
 8017820:	bf18      	it	ne
 8017822:	2301      	movne	r3, #1
 8017824:	0692      	lsls	r2, r2, #26
 8017826:	d42b      	bmi.n	8017880 <_printf_common+0xb0>
 8017828:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801782c:	4641      	mov	r1, r8
 801782e:	4638      	mov	r0, r7
 8017830:	47c8      	blx	r9
 8017832:	3001      	adds	r0, #1
 8017834:	d01e      	beq.n	8017874 <_printf_common+0xa4>
 8017836:	6823      	ldr	r3, [r4, #0]
 8017838:	6922      	ldr	r2, [r4, #16]
 801783a:	f003 0306 	and.w	r3, r3, #6
 801783e:	2b04      	cmp	r3, #4
 8017840:	bf02      	ittt	eq
 8017842:	68e5      	ldreq	r5, [r4, #12]
 8017844:	6833      	ldreq	r3, [r6, #0]
 8017846:	1aed      	subeq	r5, r5, r3
 8017848:	68a3      	ldr	r3, [r4, #8]
 801784a:	bf0c      	ite	eq
 801784c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017850:	2500      	movne	r5, #0
 8017852:	4293      	cmp	r3, r2
 8017854:	bfc4      	itt	gt
 8017856:	1a9b      	subgt	r3, r3, r2
 8017858:	18ed      	addgt	r5, r5, r3
 801785a:	2600      	movs	r6, #0
 801785c:	341a      	adds	r4, #26
 801785e:	42b5      	cmp	r5, r6
 8017860:	d11a      	bne.n	8017898 <_printf_common+0xc8>
 8017862:	2000      	movs	r0, #0
 8017864:	e008      	b.n	8017878 <_printf_common+0xa8>
 8017866:	2301      	movs	r3, #1
 8017868:	4652      	mov	r2, sl
 801786a:	4641      	mov	r1, r8
 801786c:	4638      	mov	r0, r7
 801786e:	47c8      	blx	r9
 8017870:	3001      	adds	r0, #1
 8017872:	d103      	bne.n	801787c <_printf_common+0xac>
 8017874:	f04f 30ff 	mov.w	r0, #4294967295
 8017878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801787c:	3501      	adds	r5, #1
 801787e:	e7c6      	b.n	801780e <_printf_common+0x3e>
 8017880:	18e1      	adds	r1, r4, r3
 8017882:	1c5a      	adds	r2, r3, #1
 8017884:	2030      	movs	r0, #48	@ 0x30
 8017886:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801788a:	4422      	add	r2, r4
 801788c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017890:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017894:	3302      	adds	r3, #2
 8017896:	e7c7      	b.n	8017828 <_printf_common+0x58>
 8017898:	2301      	movs	r3, #1
 801789a:	4622      	mov	r2, r4
 801789c:	4641      	mov	r1, r8
 801789e:	4638      	mov	r0, r7
 80178a0:	47c8      	blx	r9
 80178a2:	3001      	adds	r0, #1
 80178a4:	d0e6      	beq.n	8017874 <_printf_common+0xa4>
 80178a6:	3601      	adds	r6, #1
 80178a8:	e7d9      	b.n	801785e <_printf_common+0x8e>
	...

080178ac <_printf_i>:
 80178ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178b0:	7e0f      	ldrb	r7, [r1, #24]
 80178b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80178b4:	2f78      	cmp	r7, #120	@ 0x78
 80178b6:	4691      	mov	r9, r2
 80178b8:	4680      	mov	r8, r0
 80178ba:	460c      	mov	r4, r1
 80178bc:	469a      	mov	sl, r3
 80178be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80178c2:	d807      	bhi.n	80178d4 <_printf_i+0x28>
 80178c4:	2f62      	cmp	r7, #98	@ 0x62
 80178c6:	d80a      	bhi.n	80178de <_printf_i+0x32>
 80178c8:	2f00      	cmp	r7, #0
 80178ca:	f000 80d1 	beq.w	8017a70 <_printf_i+0x1c4>
 80178ce:	2f58      	cmp	r7, #88	@ 0x58
 80178d0:	f000 80b8 	beq.w	8017a44 <_printf_i+0x198>
 80178d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80178d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80178dc:	e03a      	b.n	8017954 <_printf_i+0xa8>
 80178de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80178e2:	2b15      	cmp	r3, #21
 80178e4:	d8f6      	bhi.n	80178d4 <_printf_i+0x28>
 80178e6:	a101      	add	r1, pc, #4	@ (adr r1, 80178ec <_printf_i+0x40>)
 80178e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80178ec:	08017945 	.word	0x08017945
 80178f0:	08017959 	.word	0x08017959
 80178f4:	080178d5 	.word	0x080178d5
 80178f8:	080178d5 	.word	0x080178d5
 80178fc:	080178d5 	.word	0x080178d5
 8017900:	080178d5 	.word	0x080178d5
 8017904:	08017959 	.word	0x08017959
 8017908:	080178d5 	.word	0x080178d5
 801790c:	080178d5 	.word	0x080178d5
 8017910:	080178d5 	.word	0x080178d5
 8017914:	080178d5 	.word	0x080178d5
 8017918:	08017a57 	.word	0x08017a57
 801791c:	08017983 	.word	0x08017983
 8017920:	08017a11 	.word	0x08017a11
 8017924:	080178d5 	.word	0x080178d5
 8017928:	080178d5 	.word	0x080178d5
 801792c:	08017a79 	.word	0x08017a79
 8017930:	080178d5 	.word	0x080178d5
 8017934:	08017983 	.word	0x08017983
 8017938:	080178d5 	.word	0x080178d5
 801793c:	080178d5 	.word	0x080178d5
 8017940:	08017a19 	.word	0x08017a19
 8017944:	6833      	ldr	r3, [r6, #0]
 8017946:	1d1a      	adds	r2, r3, #4
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	6032      	str	r2, [r6, #0]
 801794c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017950:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017954:	2301      	movs	r3, #1
 8017956:	e09c      	b.n	8017a92 <_printf_i+0x1e6>
 8017958:	6833      	ldr	r3, [r6, #0]
 801795a:	6820      	ldr	r0, [r4, #0]
 801795c:	1d19      	adds	r1, r3, #4
 801795e:	6031      	str	r1, [r6, #0]
 8017960:	0606      	lsls	r6, r0, #24
 8017962:	d501      	bpl.n	8017968 <_printf_i+0xbc>
 8017964:	681d      	ldr	r5, [r3, #0]
 8017966:	e003      	b.n	8017970 <_printf_i+0xc4>
 8017968:	0645      	lsls	r5, r0, #25
 801796a:	d5fb      	bpl.n	8017964 <_printf_i+0xb8>
 801796c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017970:	2d00      	cmp	r5, #0
 8017972:	da03      	bge.n	801797c <_printf_i+0xd0>
 8017974:	232d      	movs	r3, #45	@ 0x2d
 8017976:	426d      	negs	r5, r5
 8017978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801797c:	4858      	ldr	r0, [pc, #352]	@ (8017ae0 <_printf_i+0x234>)
 801797e:	230a      	movs	r3, #10
 8017980:	e011      	b.n	80179a6 <_printf_i+0xfa>
 8017982:	6821      	ldr	r1, [r4, #0]
 8017984:	6833      	ldr	r3, [r6, #0]
 8017986:	0608      	lsls	r0, r1, #24
 8017988:	f853 5b04 	ldr.w	r5, [r3], #4
 801798c:	d402      	bmi.n	8017994 <_printf_i+0xe8>
 801798e:	0649      	lsls	r1, r1, #25
 8017990:	bf48      	it	mi
 8017992:	b2ad      	uxthmi	r5, r5
 8017994:	2f6f      	cmp	r7, #111	@ 0x6f
 8017996:	4852      	ldr	r0, [pc, #328]	@ (8017ae0 <_printf_i+0x234>)
 8017998:	6033      	str	r3, [r6, #0]
 801799a:	bf14      	ite	ne
 801799c:	230a      	movne	r3, #10
 801799e:	2308      	moveq	r3, #8
 80179a0:	2100      	movs	r1, #0
 80179a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80179a6:	6866      	ldr	r6, [r4, #4]
 80179a8:	60a6      	str	r6, [r4, #8]
 80179aa:	2e00      	cmp	r6, #0
 80179ac:	db05      	blt.n	80179ba <_printf_i+0x10e>
 80179ae:	6821      	ldr	r1, [r4, #0]
 80179b0:	432e      	orrs	r6, r5
 80179b2:	f021 0104 	bic.w	r1, r1, #4
 80179b6:	6021      	str	r1, [r4, #0]
 80179b8:	d04b      	beq.n	8017a52 <_printf_i+0x1a6>
 80179ba:	4616      	mov	r6, r2
 80179bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80179c0:	fb03 5711 	mls	r7, r3, r1, r5
 80179c4:	5dc7      	ldrb	r7, [r0, r7]
 80179c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80179ca:	462f      	mov	r7, r5
 80179cc:	42bb      	cmp	r3, r7
 80179ce:	460d      	mov	r5, r1
 80179d0:	d9f4      	bls.n	80179bc <_printf_i+0x110>
 80179d2:	2b08      	cmp	r3, #8
 80179d4:	d10b      	bne.n	80179ee <_printf_i+0x142>
 80179d6:	6823      	ldr	r3, [r4, #0]
 80179d8:	07df      	lsls	r7, r3, #31
 80179da:	d508      	bpl.n	80179ee <_printf_i+0x142>
 80179dc:	6923      	ldr	r3, [r4, #16]
 80179de:	6861      	ldr	r1, [r4, #4]
 80179e0:	4299      	cmp	r1, r3
 80179e2:	bfde      	ittt	le
 80179e4:	2330      	movle	r3, #48	@ 0x30
 80179e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80179ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80179ee:	1b92      	subs	r2, r2, r6
 80179f0:	6122      	str	r2, [r4, #16]
 80179f2:	f8cd a000 	str.w	sl, [sp]
 80179f6:	464b      	mov	r3, r9
 80179f8:	aa03      	add	r2, sp, #12
 80179fa:	4621      	mov	r1, r4
 80179fc:	4640      	mov	r0, r8
 80179fe:	f7ff fee7 	bl	80177d0 <_printf_common>
 8017a02:	3001      	adds	r0, #1
 8017a04:	d14a      	bne.n	8017a9c <_printf_i+0x1f0>
 8017a06:	f04f 30ff 	mov.w	r0, #4294967295
 8017a0a:	b004      	add	sp, #16
 8017a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a10:	6823      	ldr	r3, [r4, #0]
 8017a12:	f043 0320 	orr.w	r3, r3, #32
 8017a16:	6023      	str	r3, [r4, #0]
 8017a18:	4832      	ldr	r0, [pc, #200]	@ (8017ae4 <_printf_i+0x238>)
 8017a1a:	2778      	movs	r7, #120	@ 0x78
 8017a1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017a20:	6823      	ldr	r3, [r4, #0]
 8017a22:	6831      	ldr	r1, [r6, #0]
 8017a24:	061f      	lsls	r7, r3, #24
 8017a26:	f851 5b04 	ldr.w	r5, [r1], #4
 8017a2a:	d402      	bmi.n	8017a32 <_printf_i+0x186>
 8017a2c:	065f      	lsls	r7, r3, #25
 8017a2e:	bf48      	it	mi
 8017a30:	b2ad      	uxthmi	r5, r5
 8017a32:	6031      	str	r1, [r6, #0]
 8017a34:	07d9      	lsls	r1, r3, #31
 8017a36:	bf44      	itt	mi
 8017a38:	f043 0320 	orrmi.w	r3, r3, #32
 8017a3c:	6023      	strmi	r3, [r4, #0]
 8017a3e:	b11d      	cbz	r5, 8017a48 <_printf_i+0x19c>
 8017a40:	2310      	movs	r3, #16
 8017a42:	e7ad      	b.n	80179a0 <_printf_i+0xf4>
 8017a44:	4826      	ldr	r0, [pc, #152]	@ (8017ae0 <_printf_i+0x234>)
 8017a46:	e7e9      	b.n	8017a1c <_printf_i+0x170>
 8017a48:	6823      	ldr	r3, [r4, #0]
 8017a4a:	f023 0320 	bic.w	r3, r3, #32
 8017a4e:	6023      	str	r3, [r4, #0]
 8017a50:	e7f6      	b.n	8017a40 <_printf_i+0x194>
 8017a52:	4616      	mov	r6, r2
 8017a54:	e7bd      	b.n	80179d2 <_printf_i+0x126>
 8017a56:	6833      	ldr	r3, [r6, #0]
 8017a58:	6825      	ldr	r5, [r4, #0]
 8017a5a:	6961      	ldr	r1, [r4, #20]
 8017a5c:	1d18      	adds	r0, r3, #4
 8017a5e:	6030      	str	r0, [r6, #0]
 8017a60:	062e      	lsls	r6, r5, #24
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	d501      	bpl.n	8017a6a <_printf_i+0x1be>
 8017a66:	6019      	str	r1, [r3, #0]
 8017a68:	e002      	b.n	8017a70 <_printf_i+0x1c4>
 8017a6a:	0668      	lsls	r0, r5, #25
 8017a6c:	d5fb      	bpl.n	8017a66 <_printf_i+0x1ba>
 8017a6e:	8019      	strh	r1, [r3, #0]
 8017a70:	2300      	movs	r3, #0
 8017a72:	6123      	str	r3, [r4, #16]
 8017a74:	4616      	mov	r6, r2
 8017a76:	e7bc      	b.n	80179f2 <_printf_i+0x146>
 8017a78:	6833      	ldr	r3, [r6, #0]
 8017a7a:	1d1a      	adds	r2, r3, #4
 8017a7c:	6032      	str	r2, [r6, #0]
 8017a7e:	681e      	ldr	r6, [r3, #0]
 8017a80:	6862      	ldr	r2, [r4, #4]
 8017a82:	2100      	movs	r1, #0
 8017a84:	4630      	mov	r0, r6
 8017a86:	f7e8 fbc3 	bl	8000210 <memchr>
 8017a8a:	b108      	cbz	r0, 8017a90 <_printf_i+0x1e4>
 8017a8c:	1b80      	subs	r0, r0, r6
 8017a8e:	6060      	str	r0, [r4, #4]
 8017a90:	6863      	ldr	r3, [r4, #4]
 8017a92:	6123      	str	r3, [r4, #16]
 8017a94:	2300      	movs	r3, #0
 8017a96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017a9a:	e7aa      	b.n	80179f2 <_printf_i+0x146>
 8017a9c:	6923      	ldr	r3, [r4, #16]
 8017a9e:	4632      	mov	r2, r6
 8017aa0:	4649      	mov	r1, r9
 8017aa2:	4640      	mov	r0, r8
 8017aa4:	47d0      	blx	sl
 8017aa6:	3001      	adds	r0, #1
 8017aa8:	d0ad      	beq.n	8017a06 <_printf_i+0x15a>
 8017aaa:	6823      	ldr	r3, [r4, #0]
 8017aac:	079b      	lsls	r3, r3, #30
 8017aae:	d413      	bmi.n	8017ad8 <_printf_i+0x22c>
 8017ab0:	68e0      	ldr	r0, [r4, #12]
 8017ab2:	9b03      	ldr	r3, [sp, #12]
 8017ab4:	4298      	cmp	r0, r3
 8017ab6:	bfb8      	it	lt
 8017ab8:	4618      	movlt	r0, r3
 8017aba:	e7a6      	b.n	8017a0a <_printf_i+0x15e>
 8017abc:	2301      	movs	r3, #1
 8017abe:	4632      	mov	r2, r6
 8017ac0:	4649      	mov	r1, r9
 8017ac2:	4640      	mov	r0, r8
 8017ac4:	47d0      	blx	sl
 8017ac6:	3001      	adds	r0, #1
 8017ac8:	d09d      	beq.n	8017a06 <_printf_i+0x15a>
 8017aca:	3501      	adds	r5, #1
 8017acc:	68e3      	ldr	r3, [r4, #12]
 8017ace:	9903      	ldr	r1, [sp, #12]
 8017ad0:	1a5b      	subs	r3, r3, r1
 8017ad2:	42ab      	cmp	r3, r5
 8017ad4:	dcf2      	bgt.n	8017abc <_printf_i+0x210>
 8017ad6:	e7eb      	b.n	8017ab0 <_printf_i+0x204>
 8017ad8:	2500      	movs	r5, #0
 8017ada:	f104 0619 	add.w	r6, r4, #25
 8017ade:	e7f5      	b.n	8017acc <_printf_i+0x220>
 8017ae0:	0801b002 	.word	0x0801b002
 8017ae4:	0801b013 	.word	0x0801b013

08017ae8 <__sflush_r>:
 8017ae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017af0:	0716      	lsls	r6, r2, #28
 8017af2:	4605      	mov	r5, r0
 8017af4:	460c      	mov	r4, r1
 8017af6:	d454      	bmi.n	8017ba2 <__sflush_r+0xba>
 8017af8:	684b      	ldr	r3, [r1, #4]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	dc02      	bgt.n	8017b04 <__sflush_r+0x1c>
 8017afe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	dd48      	ble.n	8017b96 <__sflush_r+0xae>
 8017b04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017b06:	2e00      	cmp	r6, #0
 8017b08:	d045      	beq.n	8017b96 <__sflush_r+0xae>
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017b10:	682f      	ldr	r7, [r5, #0]
 8017b12:	6a21      	ldr	r1, [r4, #32]
 8017b14:	602b      	str	r3, [r5, #0]
 8017b16:	d030      	beq.n	8017b7a <__sflush_r+0x92>
 8017b18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017b1a:	89a3      	ldrh	r3, [r4, #12]
 8017b1c:	0759      	lsls	r1, r3, #29
 8017b1e:	d505      	bpl.n	8017b2c <__sflush_r+0x44>
 8017b20:	6863      	ldr	r3, [r4, #4]
 8017b22:	1ad2      	subs	r2, r2, r3
 8017b24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017b26:	b10b      	cbz	r3, 8017b2c <__sflush_r+0x44>
 8017b28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017b2a:	1ad2      	subs	r2, r2, r3
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017b30:	6a21      	ldr	r1, [r4, #32]
 8017b32:	4628      	mov	r0, r5
 8017b34:	47b0      	blx	r6
 8017b36:	1c43      	adds	r3, r0, #1
 8017b38:	89a3      	ldrh	r3, [r4, #12]
 8017b3a:	d106      	bne.n	8017b4a <__sflush_r+0x62>
 8017b3c:	6829      	ldr	r1, [r5, #0]
 8017b3e:	291d      	cmp	r1, #29
 8017b40:	d82b      	bhi.n	8017b9a <__sflush_r+0xb2>
 8017b42:	4a2a      	ldr	r2, [pc, #168]	@ (8017bec <__sflush_r+0x104>)
 8017b44:	40ca      	lsrs	r2, r1
 8017b46:	07d6      	lsls	r6, r2, #31
 8017b48:	d527      	bpl.n	8017b9a <__sflush_r+0xb2>
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	6062      	str	r2, [r4, #4]
 8017b4e:	04d9      	lsls	r1, r3, #19
 8017b50:	6922      	ldr	r2, [r4, #16]
 8017b52:	6022      	str	r2, [r4, #0]
 8017b54:	d504      	bpl.n	8017b60 <__sflush_r+0x78>
 8017b56:	1c42      	adds	r2, r0, #1
 8017b58:	d101      	bne.n	8017b5e <__sflush_r+0x76>
 8017b5a:	682b      	ldr	r3, [r5, #0]
 8017b5c:	b903      	cbnz	r3, 8017b60 <__sflush_r+0x78>
 8017b5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017b60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017b62:	602f      	str	r7, [r5, #0]
 8017b64:	b1b9      	cbz	r1, 8017b96 <__sflush_r+0xae>
 8017b66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017b6a:	4299      	cmp	r1, r3
 8017b6c:	d002      	beq.n	8017b74 <__sflush_r+0x8c>
 8017b6e:	4628      	mov	r0, r5
 8017b70:	f7ff fbec 	bl	801734c <_free_r>
 8017b74:	2300      	movs	r3, #0
 8017b76:	6363      	str	r3, [r4, #52]	@ 0x34
 8017b78:	e00d      	b.n	8017b96 <__sflush_r+0xae>
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	4628      	mov	r0, r5
 8017b7e:	47b0      	blx	r6
 8017b80:	4602      	mov	r2, r0
 8017b82:	1c50      	adds	r0, r2, #1
 8017b84:	d1c9      	bne.n	8017b1a <__sflush_r+0x32>
 8017b86:	682b      	ldr	r3, [r5, #0]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d0c6      	beq.n	8017b1a <__sflush_r+0x32>
 8017b8c:	2b1d      	cmp	r3, #29
 8017b8e:	d001      	beq.n	8017b94 <__sflush_r+0xac>
 8017b90:	2b16      	cmp	r3, #22
 8017b92:	d11e      	bne.n	8017bd2 <__sflush_r+0xea>
 8017b94:	602f      	str	r7, [r5, #0]
 8017b96:	2000      	movs	r0, #0
 8017b98:	e022      	b.n	8017be0 <__sflush_r+0xf8>
 8017b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b9e:	b21b      	sxth	r3, r3
 8017ba0:	e01b      	b.n	8017bda <__sflush_r+0xf2>
 8017ba2:	690f      	ldr	r7, [r1, #16]
 8017ba4:	2f00      	cmp	r7, #0
 8017ba6:	d0f6      	beq.n	8017b96 <__sflush_r+0xae>
 8017ba8:	0793      	lsls	r3, r2, #30
 8017baa:	680e      	ldr	r6, [r1, #0]
 8017bac:	bf08      	it	eq
 8017bae:	694b      	ldreq	r3, [r1, #20]
 8017bb0:	600f      	str	r7, [r1, #0]
 8017bb2:	bf18      	it	ne
 8017bb4:	2300      	movne	r3, #0
 8017bb6:	eba6 0807 	sub.w	r8, r6, r7
 8017bba:	608b      	str	r3, [r1, #8]
 8017bbc:	f1b8 0f00 	cmp.w	r8, #0
 8017bc0:	dde9      	ble.n	8017b96 <__sflush_r+0xae>
 8017bc2:	6a21      	ldr	r1, [r4, #32]
 8017bc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017bc6:	4643      	mov	r3, r8
 8017bc8:	463a      	mov	r2, r7
 8017bca:	4628      	mov	r0, r5
 8017bcc:	47b0      	blx	r6
 8017bce:	2800      	cmp	r0, #0
 8017bd0:	dc08      	bgt.n	8017be4 <__sflush_r+0xfc>
 8017bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017bda:	81a3      	strh	r3, [r4, #12]
 8017bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8017be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017be4:	4407      	add	r7, r0
 8017be6:	eba8 0800 	sub.w	r8, r8, r0
 8017bea:	e7e7      	b.n	8017bbc <__sflush_r+0xd4>
 8017bec:	20400001 	.word	0x20400001

08017bf0 <_fflush_r>:
 8017bf0:	b538      	push	{r3, r4, r5, lr}
 8017bf2:	690b      	ldr	r3, [r1, #16]
 8017bf4:	4605      	mov	r5, r0
 8017bf6:	460c      	mov	r4, r1
 8017bf8:	b913      	cbnz	r3, 8017c00 <_fflush_r+0x10>
 8017bfa:	2500      	movs	r5, #0
 8017bfc:	4628      	mov	r0, r5
 8017bfe:	bd38      	pop	{r3, r4, r5, pc}
 8017c00:	b118      	cbz	r0, 8017c0a <_fflush_r+0x1a>
 8017c02:	6a03      	ldr	r3, [r0, #32]
 8017c04:	b90b      	cbnz	r3, 8017c0a <_fflush_r+0x1a>
 8017c06:	f7ff f913 	bl	8016e30 <__sinit>
 8017c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d0f3      	beq.n	8017bfa <_fflush_r+0xa>
 8017c12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017c14:	07d0      	lsls	r0, r2, #31
 8017c16:	d404      	bmi.n	8017c22 <_fflush_r+0x32>
 8017c18:	0599      	lsls	r1, r3, #22
 8017c1a:	d402      	bmi.n	8017c22 <_fflush_r+0x32>
 8017c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c1e:	f7ff fb66 	bl	80172ee <__retarget_lock_acquire_recursive>
 8017c22:	4628      	mov	r0, r5
 8017c24:	4621      	mov	r1, r4
 8017c26:	f7ff ff5f 	bl	8017ae8 <__sflush_r>
 8017c2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017c2c:	07da      	lsls	r2, r3, #31
 8017c2e:	4605      	mov	r5, r0
 8017c30:	d4e4      	bmi.n	8017bfc <_fflush_r+0xc>
 8017c32:	89a3      	ldrh	r3, [r4, #12]
 8017c34:	059b      	lsls	r3, r3, #22
 8017c36:	d4e1      	bmi.n	8017bfc <_fflush_r+0xc>
 8017c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c3a:	f7ff fb59 	bl	80172f0 <__retarget_lock_release_recursive>
 8017c3e:	e7dd      	b.n	8017bfc <_fflush_r+0xc>

08017c40 <fiprintf>:
 8017c40:	b40e      	push	{r1, r2, r3}
 8017c42:	b503      	push	{r0, r1, lr}
 8017c44:	4601      	mov	r1, r0
 8017c46:	ab03      	add	r3, sp, #12
 8017c48:	4805      	ldr	r0, [pc, #20]	@ (8017c60 <fiprintf+0x20>)
 8017c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c4e:	6800      	ldr	r0, [r0, #0]
 8017c50:	9301      	str	r3, [sp, #4]
 8017c52:	f7ff fca5 	bl	80175a0 <_vfiprintf_r>
 8017c56:	b002      	add	sp, #8
 8017c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c5c:	b003      	add	sp, #12
 8017c5e:	4770      	bx	lr
 8017c60:	2000003c 	.word	0x2000003c

08017c64 <__swhatbuf_r>:
 8017c64:	b570      	push	{r4, r5, r6, lr}
 8017c66:	460c      	mov	r4, r1
 8017c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c6c:	2900      	cmp	r1, #0
 8017c6e:	b096      	sub	sp, #88	@ 0x58
 8017c70:	4615      	mov	r5, r2
 8017c72:	461e      	mov	r6, r3
 8017c74:	da0d      	bge.n	8017c92 <__swhatbuf_r+0x2e>
 8017c76:	89a3      	ldrh	r3, [r4, #12]
 8017c78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017c7c:	f04f 0100 	mov.w	r1, #0
 8017c80:	bf14      	ite	ne
 8017c82:	2340      	movne	r3, #64	@ 0x40
 8017c84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017c88:	2000      	movs	r0, #0
 8017c8a:	6031      	str	r1, [r6, #0]
 8017c8c:	602b      	str	r3, [r5, #0]
 8017c8e:	b016      	add	sp, #88	@ 0x58
 8017c90:	bd70      	pop	{r4, r5, r6, pc}
 8017c92:	466a      	mov	r2, sp
 8017c94:	f000 f848 	bl	8017d28 <_fstat_r>
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	dbec      	blt.n	8017c76 <__swhatbuf_r+0x12>
 8017c9c:	9901      	ldr	r1, [sp, #4]
 8017c9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017ca2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017ca6:	4259      	negs	r1, r3
 8017ca8:	4159      	adcs	r1, r3
 8017caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017cae:	e7eb      	b.n	8017c88 <__swhatbuf_r+0x24>

08017cb0 <__smakebuf_r>:
 8017cb0:	898b      	ldrh	r3, [r1, #12]
 8017cb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017cb4:	079d      	lsls	r5, r3, #30
 8017cb6:	4606      	mov	r6, r0
 8017cb8:	460c      	mov	r4, r1
 8017cba:	d507      	bpl.n	8017ccc <__smakebuf_r+0x1c>
 8017cbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017cc0:	6023      	str	r3, [r4, #0]
 8017cc2:	6123      	str	r3, [r4, #16]
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	6163      	str	r3, [r4, #20]
 8017cc8:	b003      	add	sp, #12
 8017cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ccc:	ab01      	add	r3, sp, #4
 8017cce:	466a      	mov	r2, sp
 8017cd0:	f7ff ffc8 	bl	8017c64 <__swhatbuf_r>
 8017cd4:	9f00      	ldr	r7, [sp, #0]
 8017cd6:	4605      	mov	r5, r0
 8017cd8:	4639      	mov	r1, r7
 8017cda:	4630      	mov	r0, r6
 8017cdc:	f7ff fbaa 	bl	8017434 <_malloc_r>
 8017ce0:	b948      	cbnz	r0, 8017cf6 <__smakebuf_r+0x46>
 8017ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ce6:	059a      	lsls	r2, r3, #22
 8017ce8:	d4ee      	bmi.n	8017cc8 <__smakebuf_r+0x18>
 8017cea:	f023 0303 	bic.w	r3, r3, #3
 8017cee:	f043 0302 	orr.w	r3, r3, #2
 8017cf2:	81a3      	strh	r3, [r4, #12]
 8017cf4:	e7e2      	b.n	8017cbc <__smakebuf_r+0xc>
 8017cf6:	89a3      	ldrh	r3, [r4, #12]
 8017cf8:	6020      	str	r0, [r4, #0]
 8017cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017cfe:	81a3      	strh	r3, [r4, #12]
 8017d00:	9b01      	ldr	r3, [sp, #4]
 8017d02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017d06:	b15b      	cbz	r3, 8017d20 <__smakebuf_r+0x70>
 8017d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d0c:	4630      	mov	r0, r6
 8017d0e:	f000 f81d 	bl	8017d4c <_isatty_r>
 8017d12:	b128      	cbz	r0, 8017d20 <__smakebuf_r+0x70>
 8017d14:	89a3      	ldrh	r3, [r4, #12]
 8017d16:	f023 0303 	bic.w	r3, r3, #3
 8017d1a:	f043 0301 	orr.w	r3, r3, #1
 8017d1e:	81a3      	strh	r3, [r4, #12]
 8017d20:	89a3      	ldrh	r3, [r4, #12]
 8017d22:	431d      	orrs	r5, r3
 8017d24:	81a5      	strh	r5, [r4, #12]
 8017d26:	e7cf      	b.n	8017cc8 <__smakebuf_r+0x18>

08017d28 <_fstat_r>:
 8017d28:	b538      	push	{r3, r4, r5, lr}
 8017d2a:	4d07      	ldr	r5, [pc, #28]	@ (8017d48 <_fstat_r+0x20>)
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	4604      	mov	r4, r0
 8017d30:	4608      	mov	r0, r1
 8017d32:	4611      	mov	r1, r2
 8017d34:	602b      	str	r3, [r5, #0]
 8017d36:	f7e9 fcbf 	bl	80016b8 <_fstat>
 8017d3a:	1c43      	adds	r3, r0, #1
 8017d3c:	d102      	bne.n	8017d44 <_fstat_r+0x1c>
 8017d3e:	682b      	ldr	r3, [r5, #0]
 8017d40:	b103      	cbz	r3, 8017d44 <_fstat_r+0x1c>
 8017d42:	6023      	str	r3, [r4, #0]
 8017d44:	bd38      	pop	{r3, r4, r5, pc}
 8017d46:	bf00      	nop
 8017d48:	20027610 	.word	0x20027610

08017d4c <_isatty_r>:
 8017d4c:	b538      	push	{r3, r4, r5, lr}
 8017d4e:	4d06      	ldr	r5, [pc, #24]	@ (8017d68 <_isatty_r+0x1c>)
 8017d50:	2300      	movs	r3, #0
 8017d52:	4604      	mov	r4, r0
 8017d54:	4608      	mov	r0, r1
 8017d56:	602b      	str	r3, [r5, #0]
 8017d58:	f7e9 fcbe 	bl	80016d8 <_isatty>
 8017d5c:	1c43      	adds	r3, r0, #1
 8017d5e:	d102      	bne.n	8017d66 <_isatty_r+0x1a>
 8017d60:	682b      	ldr	r3, [r5, #0]
 8017d62:	b103      	cbz	r3, 8017d66 <_isatty_r+0x1a>
 8017d64:	6023      	str	r3, [r4, #0]
 8017d66:	bd38      	pop	{r3, r4, r5, pc}
 8017d68:	20027610 	.word	0x20027610

08017d6c <_sbrk_r>:
 8017d6c:	b538      	push	{r3, r4, r5, lr}
 8017d6e:	4d06      	ldr	r5, [pc, #24]	@ (8017d88 <_sbrk_r+0x1c>)
 8017d70:	2300      	movs	r3, #0
 8017d72:	4604      	mov	r4, r0
 8017d74:	4608      	mov	r0, r1
 8017d76:	602b      	str	r3, [r5, #0]
 8017d78:	f7e9 fcc6 	bl	8001708 <_sbrk>
 8017d7c:	1c43      	adds	r3, r0, #1
 8017d7e:	d102      	bne.n	8017d86 <_sbrk_r+0x1a>
 8017d80:	682b      	ldr	r3, [r5, #0]
 8017d82:	b103      	cbz	r3, 8017d86 <_sbrk_r+0x1a>
 8017d84:	6023      	str	r3, [r4, #0]
 8017d86:	bd38      	pop	{r3, r4, r5, pc}
 8017d88:	20027610 	.word	0x20027610

08017d8c <abort>:
 8017d8c:	b508      	push	{r3, lr}
 8017d8e:	2006      	movs	r0, #6
 8017d90:	f000 f82c 	bl	8017dec <raise>
 8017d94:	2001      	movs	r0, #1
 8017d96:	f7e9 fc3f 	bl	8001618 <_exit>

08017d9a <_raise_r>:
 8017d9a:	291f      	cmp	r1, #31
 8017d9c:	b538      	push	{r3, r4, r5, lr}
 8017d9e:	4605      	mov	r5, r0
 8017da0:	460c      	mov	r4, r1
 8017da2:	d904      	bls.n	8017dae <_raise_r+0x14>
 8017da4:	2316      	movs	r3, #22
 8017da6:	6003      	str	r3, [r0, #0]
 8017da8:	f04f 30ff 	mov.w	r0, #4294967295
 8017dac:	bd38      	pop	{r3, r4, r5, pc}
 8017dae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017db0:	b112      	cbz	r2, 8017db8 <_raise_r+0x1e>
 8017db2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017db6:	b94b      	cbnz	r3, 8017dcc <_raise_r+0x32>
 8017db8:	4628      	mov	r0, r5
 8017dba:	f000 f831 	bl	8017e20 <_getpid_r>
 8017dbe:	4622      	mov	r2, r4
 8017dc0:	4601      	mov	r1, r0
 8017dc2:	4628      	mov	r0, r5
 8017dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dc8:	f000 b818 	b.w	8017dfc <_kill_r>
 8017dcc:	2b01      	cmp	r3, #1
 8017dce:	d00a      	beq.n	8017de6 <_raise_r+0x4c>
 8017dd0:	1c59      	adds	r1, r3, #1
 8017dd2:	d103      	bne.n	8017ddc <_raise_r+0x42>
 8017dd4:	2316      	movs	r3, #22
 8017dd6:	6003      	str	r3, [r0, #0]
 8017dd8:	2001      	movs	r0, #1
 8017dda:	e7e7      	b.n	8017dac <_raise_r+0x12>
 8017ddc:	2100      	movs	r1, #0
 8017dde:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017de2:	4620      	mov	r0, r4
 8017de4:	4798      	blx	r3
 8017de6:	2000      	movs	r0, #0
 8017de8:	e7e0      	b.n	8017dac <_raise_r+0x12>
	...

08017dec <raise>:
 8017dec:	4b02      	ldr	r3, [pc, #8]	@ (8017df8 <raise+0xc>)
 8017dee:	4601      	mov	r1, r0
 8017df0:	6818      	ldr	r0, [r3, #0]
 8017df2:	f7ff bfd2 	b.w	8017d9a <_raise_r>
 8017df6:	bf00      	nop
 8017df8:	2000003c 	.word	0x2000003c

08017dfc <_kill_r>:
 8017dfc:	b538      	push	{r3, r4, r5, lr}
 8017dfe:	4d07      	ldr	r5, [pc, #28]	@ (8017e1c <_kill_r+0x20>)
 8017e00:	2300      	movs	r3, #0
 8017e02:	4604      	mov	r4, r0
 8017e04:	4608      	mov	r0, r1
 8017e06:	4611      	mov	r1, r2
 8017e08:	602b      	str	r3, [r5, #0]
 8017e0a:	f7e9 fbf3 	bl	80015f4 <_kill>
 8017e0e:	1c43      	adds	r3, r0, #1
 8017e10:	d102      	bne.n	8017e18 <_kill_r+0x1c>
 8017e12:	682b      	ldr	r3, [r5, #0]
 8017e14:	b103      	cbz	r3, 8017e18 <_kill_r+0x1c>
 8017e16:	6023      	str	r3, [r4, #0]
 8017e18:	bd38      	pop	{r3, r4, r5, pc}
 8017e1a:	bf00      	nop
 8017e1c:	20027610 	.word	0x20027610

08017e20 <_getpid_r>:
 8017e20:	f7e9 bbe0 	b.w	80015e4 <_getpid>

08017e24 <_init>:
 8017e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e26:	bf00      	nop
 8017e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e2a:	bc08      	pop	{r3}
 8017e2c:	469e      	mov	lr, r3
 8017e2e:	4770      	bx	lr

08017e30 <_fini>:
 8017e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e32:	bf00      	nop
 8017e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e36:	bc08      	pop	{r3}
 8017e38:	469e      	mov	lr, r3
 8017e3a:	4770      	bx	lr
